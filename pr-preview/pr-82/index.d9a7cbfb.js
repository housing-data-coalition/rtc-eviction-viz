
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}

function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}

      var $parcel$global = globalThis;
    
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire4bd4"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire4bd4"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("4rFIf", function(module, exports) {
"use strict";

module.exports = (parcelRequire("GRRtn"));

});
parcelRegister("GRRtn", function(module, exports) {

$parcel$export(module.exports, "Fragment", () => $080db41f888ab42c$export$ffb0004e005737fa, (v) => $080db41f888ab42c$export$ffb0004e005737fa = v);
$parcel$export(module.exports, "StrictMode", () => $080db41f888ab42c$export$5f8d39834fd61797, (v) => $080db41f888ab42c$export$5f8d39834fd61797 = v);
$parcel$export(module.exports, "Profiler", () => $080db41f888ab42c$export$e2c29f18771995cb, (v) => $080db41f888ab42c$export$e2c29f18771995cb = v);
$parcel$export(module.exports, "Suspense", () => $080db41f888ab42c$export$74bf444e3cd11ea5, (v) => $080db41f888ab42c$export$74bf444e3cd11ea5 = v);
$parcel$export(module.exports, "Children", () => $080db41f888ab42c$export$dca3b0875bd9a954, (v) => $080db41f888ab42c$export$dca3b0875bd9a954 = v);
$parcel$export(module.exports, "Component", () => $080db41f888ab42c$export$16fa2f45be04daa8, (v) => $080db41f888ab42c$export$16fa2f45be04daa8 = v);
$parcel$export(module.exports, "PureComponent", () => $080db41f888ab42c$export$221d75b3f55bb0bd, (v) => $080db41f888ab42c$export$221d75b3f55bb0bd = v);
$parcel$export(module.exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", () => $080db41f888ab42c$export$ae55be85d98224ed, (v) => $080db41f888ab42c$export$ae55be85d98224ed = v);
$parcel$export(module.exports, "cloneElement", () => $080db41f888ab42c$export$e530037191fcd5d7, (v) => $080db41f888ab42c$export$e530037191fcd5d7 = v);
$parcel$export(module.exports, "createContext", () => $080db41f888ab42c$export$fd42f52fd3ae1109, (v) => $080db41f888ab42c$export$fd42f52fd3ae1109 = v);
$parcel$export(module.exports, "createElement", () => $080db41f888ab42c$export$c8a8987d4410bf2d, (v) => $080db41f888ab42c$export$c8a8987d4410bf2d = v);
$parcel$export(module.exports, "createFactory", () => $080db41f888ab42c$export$d38cd72104c1f0e9, (v) => $080db41f888ab42c$export$d38cd72104c1f0e9 = v);
$parcel$export(module.exports, "createRef", () => $080db41f888ab42c$export$7d1e3a5e95ceca43, (v) => $080db41f888ab42c$export$7d1e3a5e95ceca43 = v);
$parcel$export(module.exports, "forwardRef", () => $080db41f888ab42c$export$257a8862b851cb5b, (v) => $080db41f888ab42c$export$257a8862b851cb5b = v);
$parcel$export(module.exports, "isValidElement", () => $080db41f888ab42c$export$a8257692ac88316c, (v) => $080db41f888ab42c$export$a8257692ac88316c = v);
$parcel$export(module.exports, "lazy", () => $080db41f888ab42c$export$488013bae63b21da, (v) => $080db41f888ab42c$export$488013bae63b21da = v);
$parcel$export(module.exports, "memo", () => $080db41f888ab42c$export$7c73462e0d25e514, (v) => $080db41f888ab42c$export$7c73462e0d25e514 = v);
$parcel$export(module.exports, "useCallback", () => $080db41f888ab42c$export$35808ee640e87ca7, (v) => $080db41f888ab42c$export$35808ee640e87ca7 = v);
$parcel$export(module.exports, "useContext", () => $080db41f888ab42c$export$fae74005e78b1a27, (v) => $080db41f888ab42c$export$fae74005e78b1a27 = v);
$parcel$export(module.exports, "useDebugValue", () => $080db41f888ab42c$export$dc8fbce3eb94dc1e, (v) => $080db41f888ab42c$export$dc8fbce3eb94dc1e = v);
$parcel$export(module.exports, "useEffect", () => $080db41f888ab42c$export$6d9c69b0de29b591, (v) => $080db41f888ab42c$export$6d9c69b0de29b591 = v);
$parcel$export(module.exports, "useImperativeHandle", () => $080db41f888ab42c$export$d5a552a76deda3c2, (v) => $080db41f888ab42c$export$d5a552a76deda3c2 = v);
$parcel$export(module.exports, "useLayoutEffect", () => $080db41f888ab42c$export$e5c5a5f917a5871c, (v) => $080db41f888ab42c$export$e5c5a5f917a5871c = v);
$parcel$export(module.exports, "useMemo", () => $080db41f888ab42c$export$1538c33de8887b59, (v) => $080db41f888ab42c$export$1538c33de8887b59 = v);
$parcel$export(module.exports, "useReducer", () => $080db41f888ab42c$export$13e3392192263954, (v) => $080db41f888ab42c$export$13e3392192263954 = v);
$parcel$export(module.exports, "useRef", () => $080db41f888ab42c$export$b8f5890fc79d6aca, (v) => $080db41f888ab42c$export$b8f5890fc79d6aca = v);
$parcel$export(module.exports, "useState", () => $080db41f888ab42c$export$60241385465d0a34, (v) => $080db41f888ab42c$export$60241385465d0a34 = v);
$parcel$export(module.exports, "version", () => $080db41f888ab42c$export$83d89fbfd8236492, (v) => $080db41f888ab42c$export$83d89fbfd8236492 = v);
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $080db41f888ab42c$export$ffb0004e005737fa;
var $080db41f888ab42c$export$5f8d39834fd61797;
var $080db41f888ab42c$export$e2c29f18771995cb;
var $080db41f888ab42c$export$74bf444e3cd11ea5;
var $080db41f888ab42c$export$dca3b0875bd9a954;
var $080db41f888ab42c$export$16fa2f45be04daa8;
var $080db41f888ab42c$export$221d75b3f55bb0bd;
var $080db41f888ab42c$export$ae55be85d98224ed;
var $080db41f888ab42c$export$e530037191fcd5d7;
var $080db41f888ab42c$export$fd42f52fd3ae1109;
var $080db41f888ab42c$export$c8a8987d4410bf2d;
var $080db41f888ab42c$export$d38cd72104c1f0e9;
var $080db41f888ab42c$export$7d1e3a5e95ceca43;
var $080db41f888ab42c$export$257a8862b851cb5b;
var $080db41f888ab42c$export$a8257692ac88316c;
var $080db41f888ab42c$export$488013bae63b21da;
var $080db41f888ab42c$export$7c73462e0d25e514;
var $080db41f888ab42c$export$35808ee640e87ca7;
var $080db41f888ab42c$export$fae74005e78b1a27;
var $080db41f888ab42c$export$dc8fbce3eb94dc1e;
var $080db41f888ab42c$export$6d9c69b0de29b591;
var $080db41f888ab42c$export$d5a552a76deda3c2;
var $080db41f888ab42c$export$e5c5a5f917a5871c;
var $080db41f888ab42c$export$1538c33de8887b59;
var $080db41f888ab42c$export$13e3392192263954;
var $080db41f888ab42c$export$b8f5890fc79d6aca;
var $080db41f888ab42c$export$60241385465d0a34;
var $080db41f888ab42c$export$83d89fbfd8236492;
"use strict";

var $kQ0Dz = parcelRequire("kQ0Dz");
var $080db41f888ab42c$var$n = 60103, $080db41f888ab42c$var$p = 60106;
$080db41f888ab42c$export$ffb0004e005737fa = 60107;
$080db41f888ab42c$export$5f8d39834fd61797 = 60108;
$080db41f888ab42c$export$e2c29f18771995cb = 60114;
var $080db41f888ab42c$var$q = 60109, $080db41f888ab42c$var$r = 60110, $080db41f888ab42c$var$t = 60112;
$080db41f888ab42c$export$74bf444e3cd11ea5 = 60113;
var $080db41f888ab42c$var$u = 60115, $080db41f888ab42c$var$v = 60116;
if ("function" === typeof Symbol && Symbol.for) {
    var $080db41f888ab42c$var$w = Symbol.for;
    $080db41f888ab42c$var$n = $080db41f888ab42c$var$w("react.element");
    $080db41f888ab42c$var$p = $080db41f888ab42c$var$w("react.portal");
    $080db41f888ab42c$export$ffb0004e005737fa = $080db41f888ab42c$var$w("react.fragment");
    $080db41f888ab42c$export$5f8d39834fd61797 = $080db41f888ab42c$var$w("react.strict_mode");
    $080db41f888ab42c$export$e2c29f18771995cb = $080db41f888ab42c$var$w("react.profiler");
    $080db41f888ab42c$var$q = $080db41f888ab42c$var$w("react.provider");
    $080db41f888ab42c$var$r = $080db41f888ab42c$var$w("react.context");
    $080db41f888ab42c$var$t = $080db41f888ab42c$var$w("react.forward_ref");
    $080db41f888ab42c$export$74bf444e3cd11ea5 = $080db41f888ab42c$var$w("react.suspense");
    $080db41f888ab42c$var$u = $080db41f888ab42c$var$w("react.memo");
    $080db41f888ab42c$var$v = $080db41f888ab42c$var$w("react.lazy");
}
var $080db41f888ab42c$var$x = "function" === typeof Symbol && Symbol.iterator;
function $080db41f888ab42c$var$y(a) {
    if (null === a || "object" !== typeof a) return null;
    a = $080db41f888ab42c$var$x && a[$080db41f888ab42c$var$x] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
function $080db41f888ab42c$var$z(a) {
    for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var $080db41f888ab42c$var$A = {
    isMounted: function() {
        return !1;
    },
    enqueueForceUpdate: function() {},
    enqueueReplaceState: function() {},
    enqueueSetState: function() {}
}, $080db41f888ab42c$var$B = {};
function $080db41f888ab42c$var$C(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = $080db41f888ab42c$var$B;
    this.updater = c || $080db41f888ab42c$var$A;
}
$080db41f888ab42c$var$C.prototype.isReactComponent = {};
$080db41f888ab42c$var$C.prototype.setState = function(a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error($080db41f888ab42c$var$z(85));
    this.updater.enqueueSetState(this, a, b, "setState");
};
$080db41f888ab42c$var$C.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function $080db41f888ab42c$var$D() {}
$080db41f888ab42c$var$D.prototype = $080db41f888ab42c$var$C.prototype;
function $080db41f888ab42c$var$E(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = $080db41f888ab42c$var$B;
    this.updater = c || $080db41f888ab42c$var$A;
}
var $080db41f888ab42c$var$F = $080db41f888ab42c$var$E.prototype = new $080db41f888ab42c$var$D;
$080db41f888ab42c$var$F.constructor = $080db41f888ab42c$var$E;
$kQ0Dz($080db41f888ab42c$var$F, $080db41f888ab42c$var$C.prototype);
$080db41f888ab42c$var$F.isPureReactComponent = !0;
var $080db41f888ab42c$var$G = {
    current: null
}, $080db41f888ab42c$var$H = Object.prototype.hasOwnProperty, $080db41f888ab42c$var$I = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function $080db41f888ab42c$var$J(a, b, c) {
    var e, d = {}, k = null, h = null;
    if (null != b) for(e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b)$080db41f888ab42c$var$H.call(b, e) && !$080db41f888ab42c$var$I.hasOwnProperty(e) && (d[e] = b[e]);
    var g = arguments.length - 2;
    if (1 === g) d.children = c;
    else if (1 < g) {
        for(var f = Array(g), m = 0; m < g; m++)f[m] = arguments[m + 2];
        d.children = f;
    }
    if (a && a.defaultProps) for(e in g = a.defaultProps, g)void 0 === d[e] && (d[e] = g[e]);
    return {
        $$typeof: $080db41f888ab42c$var$n,
        type: a,
        key: k,
        ref: h,
        props: d,
        _owner: $080db41f888ab42c$var$G.current
    };
}
function $080db41f888ab42c$var$K(a, b) {
    return {
        $$typeof: $080db41f888ab42c$var$n,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner
    };
}
function $080db41f888ab42c$var$L(a) {
    return "object" === typeof a && null !== a && a.$$typeof === $080db41f888ab42c$var$n;
}
function $080db41f888ab42c$var$escape(a) {
    var b = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function(a) {
        return b[a];
    });
}
var $080db41f888ab42c$var$M = /\/+/g;
function $080db41f888ab42c$var$N(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? $080db41f888ab42c$var$escape("" + a.key) : b.toString(36);
}
function $080db41f888ab42c$var$O(a, b, c, e, d) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = !1;
    if (null === a) h = !0;
    else switch(k){
        case "string":
        case "number":
            h = !0;
            break;
        case "object":
            switch(a.$$typeof){
                case $080db41f888ab42c$var$n:
                case $080db41f888ab42c$var$p:
                    h = !0;
            }
    }
    if (h) return h = a, d = d(h), a = "" === e ? "." + $080db41f888ab42c$var$N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace($080db41f888ab42c$var$M, "$&/") + "/"), $080db41f888ab42c$var$O(d, b, c, "", function(a) {
        return a;
    })) : null != d && ($080db41f888ab42c$var$L(d) && (d = $080db41f888ab42c$var$K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace($080db41f888ab42c$var$M, "$&/") + "/") + a)), b.push(d)), 1;
    h = 0;
    e = "" === e ? "." : e + ":";
    if (Array.isArray(a)) for(var g = 0; g < a.length; g++){
        k = a[g];
        var f = e + $080db41f888ab42c$var$N(k, g);
        h += $080db41f888ab42c$var$O(k, b, c, f, d);
    }
    else if (f = $080db41f888ab42c$var$y(a), "function" === typeof f) for(a = f.call(a), g = 0; !(k = a.next()).done;)k = k.value, f = e + $080db41f888ab42c$var$N(k, g++), h += $080db41f888ab42c$var$O(k, b, c, f, d);
    else if ("object" === k) throw b = "" + a, Error($080db41f888ab42c$var$z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
    return h;
}
function $080db41f888ab42c$var$P(a, b, c) {
    if (null == a) return a;
    var e = [], d = 0;
    $080db41f888ab42c$var$O(a, e, "", "", function(a) {
        return b.call(c, a, d++);
    });
    return e;
}
function $080db41f888ab42c$var$Q(a) {
    if (-1 === a._status) {
        var b = a._result;
        b = b();
        a._status = 0;
        a._result = b;
        b.then(function(b) {
            0 === a._status && (b = b.default, a._status = 1, a._result = b);
        }, function(b) {
            0 === a._status && (a._status = 2, a._result = b);
        });
    }
    if (1 === a._status) return a._result;
    throw a._result;
}
var $080db41f888ab42c$var$R = {
    current: null
};
function $080db41f888ab42c$var$S() {
    var a = $080db41f888ab42c$var$R.current;
    if (null === a) throw Error($080db41f888ab42c$var$z(321));
    return a;
}
var $080db41f888ab42c$var$T = {
    ReactCurrentDispatcher: $080db41f888ab42c$var$R,
    ReactCurrentBatchConfig: {
        transition: 0
    },
    ReactCurrentOwner: $080db41f888ab42c$var$G,
    IsSomeRendererActing: {
        current: !1
    },
    assign: $kQ0Dz
};
$080db41f888ab42c$export$dca3b0875bd9a954 = {
    map: $080db41f888ab42c$var$P,
    forEach: function(a, b, c) {
        $080db41f888ab42c$var$P(a, function() {
            b.apply(this, arguments);
        }, c);
    },
    count: function(a) {
        var b = 0;
        $080db41f888ab42c$var$P(a, function() {
            b++;
        });
        return b;
    },
    toArray: function(a) {
        return $080db41f888ab42c$var$P(a, function(a) {
            return a;
        }) || [];
    },
    only: function(a) {
        if (!$080db41f888ab42c$var$L(a)) throw Error($080db41f888ab42c$var$z(143));
        return a;
    }
};
$080db41f888ab42c$export$16fa2f45be04daa8 = $080db41f888ab42c$var$C;
$080db41f888ab42c$export$221d75b3f55bb0bd = $080db41f888ab42c$var$E;
$080db41f888ab42c$export$ae55be85d98224ed = $080db41f888ab42c$var$T;
$080db41f888ab42c$export$e530037191fcd5d7 = function(a, b, c) {
    if (null === a || void 0 === a) throw Error($080db41f888ab42c$var$z(267, a));
    var e = $kQ0Dz({}, a.props), d = a.key, k = a.ref, h = a._owner;
    if (null != b) {
        void 0 !== b.ref && (k = b.ref, h = $080db41f888ab42c$var$G.current);
        void 0 !== b.key && (d = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for(f in b)$080db41f888ab42c$var$H.call(b, f) && !$080db41f888ab42c$var$I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) e.children = c;
    else if (1 < f) {
        g = Array(f);
        for(var m = 0; m < f; m++)g[m] = arguments[m + 2];
        e.children = g;
    }
    return {
        $$typeof: $080db41f888ab42c$var$n,
        type: a.type,
        key: d,
        ref: k,
        props: e,
        _owner: h
    };
};
$080db41f888ab42c$export$fd42f52fd3ae1109 = function(a, b) {
    void 0 === b && (b = null);
    a = {
        $$typeof: $080db41f888ab42c$var$r,
        _calculateChangedBits: b,
        _currentValue: a,
        _currentValue2: a,
        _threadCount: 0,
        Provider: null,
        Consumer: null
    };
    a.Provider = {
        $$typeof: $080db41f888ab42c$var$q,
        _context: a
    };
    return a.Consumer = a;
};
$080db41f888ab42c$export$c8a8987d4410bf2d = $080db41f888ab42c$var$J;
$080db41f888ab42c$export$d38cd72104c1f0e9 = function(a) {
    var b = $080db41f888ab42c$var$J.bind(null, a);
    b.type = a;
    return b;
};
$080db41f888ab42c$export$7d1e3a5e95ceca43 = function() {
    return {
        current: null
    };
};
$080db41f888ab42c$export$257a8862b851cb5b = function(a) {
    return {
        $$typeof: $080db41f888ab42c$var$t,
        render: a
    };
};
$080db41f888ab42c$export$a8257692ac88316c = $080db41f888ab42c$var$L;
$080db41f888ab42c$export$488013bae63b21da = function(a) {
    return {
        $$typeof: $080db41f888ab42c$var$v,
        _payload: {
            _status: -1,
            _result: a
        },
        _init: $080db41f888ab42c$var$Q
    };
};
$080db41f888ab42c$export$7c73462e0d25e514 = function(a, b) {
    return {
        $$typeof: $080db41f888ab42c$var$u,
        type: a,
        compare: void 0 === b ? null : b
    };
};
$080db41f888ab42c$export$35808ee640e87ca7 = function(a, b) {
    return $080db41f888ab42c$var$S().useCallback(a, b);
};
$080db41f888ab42c$export$fae74005e78b1a27 = function(a, b) {
    return $080db41f888ab42c$var$S().useContext(a, b);
};
$080db41f888ab42c$export$dc8fbce3eb94dc1e = function() {};
$080db41f888ab42c$export$6d9c69b0de29b591 = function(a, b) {
    return $080db41f888ab42c$var$S().useEffect(a, b);
};
$080db41f888ab42c$export$d5a552a76deda3c2 = function(a, b, c) {
    return $080db41f888ab42c$var$S().useImperativeHandle(a, b, c);
};
$080db41f888ab42c$export$e5c5a5f917a5871c = function(a, b) {
    return $080db41f888ab42c$var$S().useLayoutEffect(a, b);
};
$080db41f888ab42c$export$1538c33de8887b59 = function(a, b) {
    return $080db41f888ab42c$var$S().useMemo(a, b);
};
$080db41f888ab42c$export$13e3392192263954 = function(a, b, c) {
    return $080db41f888ab42c$var$S().useReducer(a, b, c);
};
$080db41f888ab42c$export$b8f5890fc79d6aca = function(a) {
    return $080db41f888ab42c$var$S().useRef(a);
};
$080db41f888ab42c$export$60241385465d0a34 = function(a) {
    return $080db41f888ab42c$var$S().useState(a);
};
$080db41f888ab42c$export$83d89fbfd8236492 = "17.0.2";

});
parcelRegister("kQ0Dz", function(module, exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ "use strict";
/* eslint-disable no-unused-vars */ var $f2b9287de1533e86$var$getOwnPropertySymbols = Object.getOwnPropertySymbols;
var $f2b9287de1533e86$var$hasOwnProperty = Object.prototype.hasOwnProperty;
var $f2b9287de1533e86$var$propIsEnumerable = Object.prototype.propertyIsEnumerable;
function $f2b9287de1533e86$var$toObject(val) {
    if (val === null || val === undefined) throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(val);
}
function $f2b9287de1533e86$var$shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for(var i = 0; i < 10; i++)test2["_" + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join("") !== "0123456789") return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = $f2b9287de1533e86$var$shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = $f2b9287de1533e86$var$toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if ($f2b9287de1533e86$var$hasOwnProperty.call(from, key)) to[key] = from[key];
        if ($f2b9287de1533e86$var$getOwnPropertySymbols) {
            symbols = $f2b9287de1533e86$var$getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if ($f2b9287de1533e86$var$propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

});



parcelRegister("6mCXn", function(module, exports) {
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/ "use strict";

var $4rFIf = parcelRequire("4rFIf");

var $kQ0Dz = parcelRequire("kQ0Dz");

var $iFoNg = parcelRequire("iFoNg");
function y(a) {
    for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
if (!$4rFIf) throw Error(y(227));
var ba = new Set, ca = {};
function da(a, b) {
    ea(a, b);
    ea(a + "Capture", b);
}
function ea(a, b) {
    ca[a] = b;
    for(a = 0; a < b.length; a++)ba.add(b[a]);
}
var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia = Object.prototype.hasOwnProperty, ja = {}, ka = {};
function la(a) {
    if (ia.call(ka, a)) return !0;
    if (ia.call(ja, a)) return !1;
    if (ha.test(a)) return ka[a] = !0;
    ja[a] = !0;
    return !1;
}
function ma(a, b, c, d) {
    if (null !== c && 0 === c.type) return !1;
    switch(typeof b){
        case "function":
        case "symbol":
            return !0;
        case "boolean":
            if (d) return !1;
            if (null !== c) return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return "data-" !== a && "aria-" !== a;
        default:
            return !1;
    }
}
function na(a, b, c, d) {
    if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;
    if (d) return !1;
    if (null !== c) switch(c.type){
        case 3:
            return !b;
        case 4:
            return !1 === b;
        case 5:
            return isNaN(b);
        case 6:
            return isNaN(b) || 1 > b;
    }
    return !1;
}
function B(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
}
var D = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
    D[a] = new B(a, 0, !1, a, null, !1, !1);
});
[
    [
        "acceptCharset",
        "accept-charset"
    ],
    [
        "className",
        "class"
    ],
    [
        "htmlFor",
        "for"
    ],
    [
        "httpEquiv",
        "http-equiv"
    ]
].forEach(function(a) {
    var b = a[0];
    D[b] = new B(b, 1, !1, a[1], null, !1, !1);
});
[
    "contentEditable",
    "draggable",
    "spellCheck",
    "value"
].forEach(function(a) {
    D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
[
    "autoReverse",
    "externalResourcesRequired",
    "focusable",
    "preserveAlpha"
].forEach(function(a) {
    D[a] = new B(a, 2, !1, a, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
    D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
[
    "checked",
    "multiple",
    "muted",
    "selected"
].forEach(function(a) {
    D[a] = new B(a, 3, !0, a, null, !1, !1);
});
[
    "capture",
    "download"
].forEach(function(a) {
    D[a] = new B(a, 4, !1, a, null, !1, !1);
});
[
    "cols",
    "rows",
    "size",
    "span"
].forEach(function(a) {
    D[a] = new B(a, 6, !1, a, null, !1, !1);
});
[
    "rowSpan",
    "start"
].forEach(function(a) {
    D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var oa = /[\-:]([a-z])/g;
function pa(a) {
    return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
});
[
    "xml:base",
    "xml:lang",
    "xml:space"
].forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
[
    "tabIndex",
    "crossOrigin"
].forEach(function(a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
D.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
[
    "src",
    "href",
    "action",
    "formAction"
].forEach(function(a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);
});
function qa(a, b, c, d) {
    var e = D.hasOwnProperty(b) ? D[b] : null;
    var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
    f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}
var ra = $4rFIf.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = 60103, ta = 60106, ua = 60107, wa = 60108, xa = 60114, ya = 60109, za = 60110, Aa = 60112, Ba = 60113, Ca = 60120, Da = 60115, Ea = 60116, Fa = 60121, Ga = 60128, Ha = 60129, Ia = 60130, Ja = 60131;
if ("function" === typeof Symbol && Symbol.for) {
    var E = Symbol.for;
    sa = E("react.element");
    ta = E("react.portal");
    ua = E("react.fragment");
    wa = E("react.strict_mode");
    xa = E("react.profiler");
    ya = E("react.provider");
    za = E("react.context");
    Aa = E("react.forward_ref");
    Ba = E("react.suspense");
    Ca = E("react.suspense_list");
    Da = E("react.memo");
    Ea = E("react.lazy");
    Fa = E("react.block");
    E("react.scope");
    Ga = E("react.opaque.id");
    Ha = E("react.debug_trace_mode");
    Ia = E("react.offscreen");
    Ja = E("react.legacy_hidden");
}
var Ka = "function" === typeof Symbol && Symbol.iterator;
function La(a) {
    if (null === a || "object" !== typeof a) return null;
    a = Ka && a[Ka] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
var Ma;
function Na(a) {
    if (void 0 === Ma) try {
        throw Error();
    } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        Ma = b && b[1] || "";
    }
    return "\n" + Ma + a;
}
var Oa = !1;
function Pa(a, b) {
    if (!a || Oa) return "";
    Oa = !0;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        if (b) {
            if (b = function() {
                throw Error();
            }, Object.defineProperty(b.prototype, "props", {
                set: function() {
                    throw Error();
                }
            }), "object" === typeof Reflect && Reflect.construct) {
                try {
                    Reflect.construct(b, []);
                } catch (k) {
                    var d = k;
                }
                Reflect.construct(a, [], b);
            } else {
                try {
                    b.call();
                } catch (k) {
                    d = k;
                }
                a.call(b.prototype);
            }
        } else {
            try {
                throw Error();
            } catch (k) {
                d = k;
            }
            a();
        }
    } catch (k) {
        if (k && d && "string" === typeof k.stack) {
            for(var e = k.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];)h--;
            for(; 1 <= g && 0 <= h; g--, h--)if (e[g] !== f[h]) {
                if (1 !== g || 1 !== h) {
                    do if (g--, h--, 0 > h || e[g] !== f[h]) return "\n" + e[g].replace(" at new ", " at ");
                    while (1 <= g && 0 <= h);
                }
                break;
            }
        }
    } finally{
        Oa = !1, Error.prepareStackTrace = c;
    }
    return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
}
function Qa(a) {
    switch(a.tag){
        case 5:
            return Na(a.type);
        case 16:
            return Na("Lazy");
        case 13:
            return Na("Suspense");
        case 19:
            return Na("SuspenseList");
        case 0:
        case 2:
        case 15:
            return a = Pa(a.type, !1), a;
        case 11:
            return a = Pa(a.type.render, !1), a;
        case 22:
            return a = Pa(a.type._render, !1), a;
        case 1:
            return a = Pa(a.type, !0), a;
        default:
            return "";
    }
}
function Ra(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch(a){
        case ua:
            return "Fragment";
        case ta:
            return "Portal";
        case xa:
            return "Profiler";
        case wa:
            return "StrictMode";
        case Ba:
            return "Suspense";
        case Ca:
            return "SuspenseList";
    }
    if ("object" === typeof a) switch(a.$$typeof){
        case za:
            return (a.displayName || "Context") + ".Consumer";
        case ya:
            return (a._context.displayName || "Context") + ".Provider";
        case Aa:
            var b = a.render;
            b = b.displayName || b.name || "";
            return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");
        case Da:
            return Ra(a.type);
        case Fa:
            return Ra(a._render);
        case Ea:
            b = a._payload;
            a = a._init;
            try {
                return Ra(a(b));
            } catch (c) {}
    }
    return null;
}
function Sa(a) {
    switch(typeof a){
        case "boolean":
        case "number":
        case "object":
        case "string":
        case "undefined":
            return a;
        default:
            return "";
    }
}
function Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Ua(a) {
    var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
    if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f = c.set;
        Object.defineProperty(a, b, {
            configurable: !0,
            get: function() {
                return e.call(this);
            },
            set: function(a) {
                d = "" + a;
                f.call(this, a);
            }
        });
        Object.defineProperty(a, b, {
            enumerable: c.enumerable
        });
        return {
            getValue: function() {
                return d;
            },
            setValue: function(a) {
                d = "" + a;
            },
            stopTracking: function() {
                a._valueTracker = null;
                delete a[b];
            }
        };
    }
}
function Va(a) {
    a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
    if (!a) return !1;
    var b = a._valueTracker;
    if (!b) return !0;
    var c = b.getValue();
    var d = "";
    a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
    a = d;
    return a !== c ? (b.setValue(a), !0) : !1;
}
function Xa(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;
    try {
        return a.activeElement || a.body;
    } catch (b) {
        return a.body;
    }
}
function Ya(a, b) {
    var c = b.checked;
    return $kQ0Dz({}, b, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: null != c ? c : a._wrapperState.initialChecked
    });
}
function Za(a, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
    c = Sa(null != b.value ? b.value : c);
    a._wrapperState = {
        initialChecked: d,
        initialValue: c,
        controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
    };
}
function $a(a, b) {
    b = b.checked;
    null != b && qa(a, "checked", b, !1);
}
function ab(a, b) {
    $a(a, b);
    var c = Sa(b.value), d = b.type;
    if (null != c) {
        if ("number" === d) {
            if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
        } else a.value !== "" + c && (a.value = "" + c);
    } else if ("submit" === d || "reset" === d) {
        a.removeAttribute("value");
        return;
    }
    b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));
    null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function cb(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d = b.type;
        if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
        b = "" + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
    }
    c = a.name;
    "" !== c && (a.name = "");
    a.defaultChecked = !!a._wrapperState.initialChecked;
    "" !== c && (a.name = c);
}
function bb(a, b, c) {
    if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
function db(a) {
    var b = "";
    $4rFIf.Children.forEach(a, function(a) {
        null != a && (b += a);
    });
    return b;
}
function eb(a, b) {
    a = $kQ0Dz({
        children: void 0
    }, b);
    if (b = db(b.children)) a.children = b;
    return a;
}
function fb(a, b, c, d) {
    a = a.options;
    if (b) {
        b = {};
        for(var e = 0; e < c.length; e++)b["$" + c[e]] = !0;
        for(c = 0; c < a.length; c++)e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    } else {
        c = "" + Sa(c);
        b = null;
        for(e = 0; e < a.length; e++){
            if (a[e].value === c) {
                a[e].selected = !0;
                d && (a[e].defaultSelected = !0);
                return;
            }
            null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = !0);
    }
}
function gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error(y(91));
    return $kQ0Dz({}, b, {
        value: void 0,
        defaultValue: void 0,
        children: "" + a._wrapperState.initialValue
    });
}
function hb(a, b) {
    var c = b.value;
    if (null == c) {
        c = b.children;
        b = b.defaultValue;
        if (null != c) {
            if (null != b) throw Error(y(92));
            if (Array.isArray(c)) {
                if (!(1 >= c.length)) throw Error(y(93));
                c = c[0];
            }
            b = c;
        }
        null == b && (b = "");
        c = b;
    }
    a._wrapperState = {
        initialValue: Sa(c)
    };
}
function ib(a, b) {
    var c = Sa(b.value), d = Sa(b.defaultValue);
    null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = "" + d);
}
function jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}
var kb = {
    html: "http://www.w3.org/1999/xhtml",
    mathml: "http://www.w3.org/1998/Math/MathML",
    svg: "http://www.w3.org/2000/svg"
};
function lb(a) {
    switch(a){
        case "svg":
            return "http://www.w3.org/2000/svg";
        case "math":
            return "http://www.w3.org/1998/Math/MathML";
        default:
            return "http://www.w3.org/1999/xhtml";
    }
}
function mb(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var nb, ob = function(a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
            return a(b, c, d, e);
        });
    } : a;
}(function(a, b) {
    if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;
    else {
        nb = nb || document.createElement("div");
        nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for(b = nb.firstChild; a.firstChild;)a.removeChild(a.firstChild);
        for(; b.firstChild;)a.appendChild(b.firstChild);
    }
});
function pb(a, b) {
    if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b;
            return;
        }
    }
    a.textContent = b;
}
var qb = {
    animationIterationCount: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
}, rb = [
    "Webkit",
    "ms",
    "Moz",
    "O"
];
Object.keys(qb).forEach(function(a) {
    rb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        qb[b] = qb[a];
    });
});
function sb(a, b, c) {
    return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
}
function tb(a, b) {
    a = a.style;
    for(var c in b)if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = sb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
    }
}
var ub = $kQ0Dz({
    menuitem: !0
}, {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
});
function vb(a, b) {
    if (b) {
        if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));
        if (null != b.dangerouslySetInnerHTML) {
            if (null != b.children) throw Error(y(60));
            if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));
        }
        if (null != b.style && "object" !== typeof b.style) throw Error(y(62));
    }
}
function wb(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;
    switch(a){
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
            return !1;
        default:
            return !0;
    }
}
function xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
    if (a = Cb(a)) {
        if ("function" !== typeof yb) throw Error(y(280));
        var b = a.stateNode;
        b && (b = Db(b), yb(a.stateNode, a.type, b));
    }
}
function Eb(a) {
    zb ? Ab ? Ab.push(a) : Ab = [
        a
    ] : zb = a;
}
function Fb() {
    if (zb) {
        var a = zb, b = Ab;
        Ab = zb = null;
        Bb(a);
        if (b) for(a = 0; a < b.length; a++)Bb(b[a]);
    }
}
function Gb(a, b) {
    return a(b);
}
function Hb(a, b, c, d, e) {
    return a(b, c, d, e);
}
function Ib() {}
var Jb = Gb, Kb = !1, Lb = !1;
function Mb() {
    if (null !== zb || null !== Ab) Ib(), Fb();
}
function Nb(a, b, c) {
    if (Lb) return a(b, c);
    Lb = !0;
    try {
        return Jb(a, b, c);
    } finally{
        Lb = !1, Mb();
    }
}
function Ob(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = Db(c);
    if (null === d) return null;
    c = d[b];
    a: switch(b){
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
        default:
            a = !1;
    }
    if (a) return null;
    if (c && "function" !== typeof c) throw Error(y(231, b, typeof c));
    return c;
}
var Pb = !1;
if (fa) try {
    var Qb = {};
    Object.defineProperty(Qb, "passive", {
        get: function() {
            Pb = !0;
        }
    });
    window.addEventListener("test", Qb, Qb);
    window.removeEventListener("test", Qb, Qb);
} catch (a) {
    Pb = !1;
}
function Rb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
        b.apply(c, l);
    } catch (n) {
        this.onError(n);
    }
}
var Sb = !1, Tb = null, Ub = !1, Vb = null, Wb = {
    onError: function(a) {
        Sb = !0;
        Tb = a;
    }
};
function Xb(a, b, c, d, e, f, g, h, k) {
    Sb = !1;
    Tb = null;
    Rb.apply(Wb, arguments);
}
function Yb(a, b, c, d, e, f, g, h, k) {
    Xb.apply(this, arguments);
    if (Sb) {
        if (Sb) {
            var l = Tb;
            Sb = !1;
            Tb = null;
        } else throw Error(y(198));
        Ub || (Ub = !0, Vb = l);
    }
}
function Zb(a) {
    var b = a, c = a;
    if (a.alternate) for(; b.return;)b = b.return;
    else {
        a = b;
        do b = a, 0 !== (b.flags & 1026) && (c = b.return), a = b.return;
        while (a);
    }
    return 3 === b.tag ? c : null;
}
function $b(a) {
    if (13 === a.tag) {
        var b = a.memoizedState;
        null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
        if (null !== b) return b.dehydrated;
    }
    return null;
}
function ac(a) {
    if (Zb(a) !== a) throw Error(y(188));
}
function bc(a) {
    var b = a.alternate;
    if (!b) {
        b = Zb(a);
        if (null === b) throw Error(y(188));
        return b !== a ? null : a;
    }
    for(var c = a, d = b;;){
        var e = c.return;
        if (null === e) break;
        var f = e.alternate;
        if (null === f) {
            d = e.return;
            if (null !== d) {
                c = d;
                continue;
            }
            break;
        }
        if (e.child === f.child) {
            for(f = e.child; f;){
                if (f === c) return ac(e), a;
                if (f === d) return ac(e), b;
                f = f.sibling;
            }
            throw Error(y(188));
        }
        if (c.return !== d.return) c = e, d = f;
        else {
            for(var g = !1, h = e.child; h;){
                if (h === c) {
                    g = !0;
                    c = e;
                    d = f;
                    break;
                }
                if (h === d) {
                    g = !0;
                    d = e;
                    c = f;
                    break;
                }
                h = h.sibling;
            }
            if (!g) {
                for(h = f.child; h;){
                    if (h === c) {
                        g = !0;
                        c = f;
                        d = e;
                        break;
                    }
                    if (h === d) {
                        g = !0;
                        d = f;
                        c = e;
                        break;
                    }
                    h = h.sibling;
                }
                if (!g) throw Error(y(189));
            }
        }
        if (c.alternate !== d) throw Error(y(190));
    }
    if (3 !== c.tag) throw Error(y(188));
    return c.stateNode.current === c ? a : b;
}
function cc(a) {
    a = bc(a);
    if (!a) return null;
    for(var b = a;;){
        if (5 === b.tag || 6 === b.tag) return b;
        if (b.child) b.child.return = b, b = b.child;
        else {
            if (b === a) break;
            for(; !b.sibling;){
                if (!b.return || b.return === a) return null;
                b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
        }
    }
    return null;
}
function dc(a, b) {
    for(var c = a.alternate; null !== b;){
        if (b === a || b === c) return !0;
        b = b.return;
    }
    return !1;
}
var ec, fc, gc, hc, ic = !1, jc = [], kc = null, lc = null, mc = null, nc = new Map, oc = new Map, pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function rc(a, b, c, d, e) {
    return {
        blockedOn: a,
        domEventName: b,
        eventSystemFlags: c | 16,
        nativeEvent: e,
        targetContainers: [
            d
        ]
    };
}
function sc(a, b) {
    switch(a){
        case "focusin":
        case "focusout":
            kc = null;
            break;
        case "dragenter":
        case "dragleave":
            lc = null;
            break;
        case "mouseover":
        case "mouseout":
            mc = null;
            break;
        case "pointerover":
        case "pointerout":
            nc.delete(b.pointerId);
            break;
        case "gotpointercapture":
        case "lostpointercapture":
            oc.delete(b.pointerId);
    }
}
function tc(a, b, c, d, e, f) {
    if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;
    a.eventSystemFlags |= d;
    b = a.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a;
}
function uc(a, b, c, d, e) {
    switch(b){
        case "focusin":
            return kc = tc(kc, a, b, c, d, e), !0;
        case "dragenter":
            return lc = tc(lc, a, b, c, d, e), !0;
        case "mouseover":
            return mc = tc(mc, a, b, c, d, e), !0;
        case "pointerover":
            var f = e.pointerId;
            nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));
            return !0;
        case "gotpointercapture":
            return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;
    }
    return !1;
}
function vc(a) {
    var b = wc(a.target);
    if (null !== b) {
        var c = Zb(b);
        if (null !== c) {
            if (b = c.tag, 13 === b) {
                if (b = $b(c), null !== b) {
                    a.blockedOn = b;
                    hc(a.lanePriority, function() {
                        $iFoNg.unstable_runWithPriority(a.priority, function() {
                            gc(c);
                        });
                    });
                    return;
                }
            } else if (3 === b && c.stateNode.hydrate) {
                a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
                return;
            }
        }
    }
    a.blockedOn = null;
}
function xc(a) {
    if (null !== a.blockedOn) return !1;
    for(var b = a.targetContainers; 0 < b.length;){
        var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;
        b.shift();
    }
    return !0;
}
function zc(a, b, c) {
    xc(a) && c.delete(b);
}
function Ac() {
    for(ic = !1; 0 < jc.length;){
        var a = jc[0];
        if (null !== a.blockedOn) {
            a = Cb(a.blockedOn);
            null !== a && ec(a);
            break;
        }
        for(var b = a.targetContainers; 0 < b.length;){
            var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
            if (null !== c) {
                a.blockedOn = c;
                break;
            }
            b.shift();
        }
        null === a.blockedOn && jc.shift();
    }
    null !== kc && xc(kc) && (kc = null);
    null !== lc && xc(lc) && (lc = null);
    null !== mc && xc(mc) && (mc = null);
    nc.forEach(zc);
    oc.forEach(zc);
}
function Bc(a, b) {
    a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, $iFoNg.unstable_scheduleCallback($iFoNg.unstable_NormalPriority, Ac)));
}
function Cc(a) {
    function b(b) {
        return Bc(b, a);
    }
    if (0 < jc.length) {
        Bc(jc[0], a);
        for(var c = 1; c < jc.length; c++){
            var d = jc[c];
            d.blockedOn === a && (d.blockedOn = null);
        }
    }
    null !== kc && Bc(kc, a);
    null !== lc && Bc(lc, a);
    null !== mc && Bc(mc, a);
    nc.forEach(b);
    oc.forEach(b);
    for(c = 0; c < pc.length; c++)d = pc[c], d.blockedOn === a && (d.blockedOn = null);
    for(; 0 < pc.length && (c = pc[0], null === c.blockedOn);)vc(c), null === c.blockedOn && pc.shift();
}
function Dc(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a] = "webkit" + b;
    c["Moz" + a] = "moz" + b;
    return c;
}
var Ec = {
    animationend: Dc("Animation", "AnimationEnd"),
    animationiteration: Dc("Animation", "AnimationIteration"),
    animationstart: Dc("Animation", "AnimationStart"),
    transitionend: Dc("Transition", "TransitionEnd")
}, Fc = {}, Gc = {};
fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
function Hc(a) {
    if (Fc[a]) return Fc[a];
    if (!Ec[a]) return a;
    var b = Ec[a], c;
    for(c in b)if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];
    return a;
}
var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = new Map, Nc = new Map, Oc = [
    "abort",
    "abort",
    Ic,
    "animationEnd",
    Jc,
    "animationIteration",
    Kc,
    "animationStart",
    "canplay",
    "canPlay",
    "canplaythrough",
    "canPlayThrough",
    "durationchange",
    "durationChange",
    "emptied",
    "emptied",
    "encrypted",
    "encrypted",
    "ended",
    "ended",
    "error",
    "error",
    "gotpointercapture",
    "gotPointerCapture",
    "load",
    "load",
    "loadeddata",
    "loadedData",
    "loadedmetadata",
    "loadedMetadata",
    "loadstart",
    "loadStart",
    "lostpointercapture",
    "lostPointerCapture",
    "playing",
    "playing",
    "progress",
    "progress",
    "seeking",
    "seeking",
    "stalled",
    "stalled",
    "suspend",
    "suspend",
    "timeupdate",
    "timeUpdate",
    Lc,
    "transitionEnd",
    "waiting",
    "waiting"
];
function Pc(a, b) {
    for(var c = 0; c < a.length; c += 2){
        var d = a[c], e = a[c + 1];
        e = "on" + (e[0].toUpperCase() + e.slice(1));
        Nc.set(d, b);
        Mc.set(d, e);
        da(e, [
            d
        ]);
    }
}
var Qc = $iFoNg.unstable_now;
Qc();
var F = 8;
function Rc(a) {
    if (0 !== (1 & a)) return F = 15, 1;
    if (0 !== (2 & a)) return F = 14, 2;
    if (0 !== (4 & a)) return F = 13, 4;
    var b = 24 & a;
    if (0 !== b) return F = 12, b;
    if (0 !== (a & 32)) return F = 11, 32;
    b = 192 & a;
    if (0 !== b) return F = 10, b;
    if (0 !== (a & 256)) return F = 9, 256;
    b = 3584 & a;
    if (0 !== b) return F = 8, b;
    if (0 !== (a & 4096)) return F = 7, 4096;
    b = 4186112 & a;
    if (0 !== b) return F = 6, b;
    b = 62914560 & a;
    if (0 !== b) return F = 5, b;
    if (a & 67108864) return F = 4, 67108864;
    if (0 !== (a & 134217728)) return F = 3, 134217728;
    b = 805306368 & a;
    if (0 !== b) return F = 2, b;
    if (0 !== (1073741824 & a)) return F = 1, 1073741824;
    F = 8;
    return a;
}
function Sc(a) {
    switch(a){
        case 99:
            return 15;
        case 98:
            return 10;
        case 97:
        case 96:
            return 8;
        case 95:
            return 2;
        default:
            return 0;
    }
}
function Tc(a) {
    switch(a){
        case 15:
        case 14:
            return 99;
        case 13:
        case 12:
        case 11:
        case 10:
            return 98;
        case 9:
        case 8:
        case 7:
        case 6:
        case 4:
        case 5:
            return 97;
        case 3:
        case 2:
        case 1:
            return 95;
        case 0:
            return 90;
        default:
            throw Error(y(358, a));
    }
}
function Uc(a, b) {
    var c = a.pendingLanes;
    if (0 === c) return F = 0;
    var d = 0, e = 0, f = a.expiredLanes, g = a.suspendedLanes, h = a.pingedLanes;
    if (0 !== f) d = f, e = F = 15;
    else if (f = c & 134217727, 0 !== f) {
        var k = f & ~g;
        0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));
    } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);
    if (0 === d) return 0;
    d = 31 - Vc(d);
    d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;
    if (0 !== b && b !== d && 0 === (b & g)) {
        Rc(b);
        if (e <= F) return b;
        F = e;
    }
    b = a.entangledLanes;
    if (0 !== b) for(a = a.entanglements, b &= d; 0 < b;)c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;
    return d;
}
function Wc(a) {
    a = a.pendingLanes & -1073741825;
    return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function Xc(a, b) {
    switch(a){
        case 15:
            return 1;
        case 14:
            return 2;
        case 12:
            return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;
        case 10:
            return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;
        case 8:
            return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;
        case 2:
            return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;
    }
    throw Error(y(358, a));
}
function Yc(a) {
    return a & -a;
}
function Zc(a) {
    for(var b = [], c = 0; 31 > c; c++)b.push(a);
    return b;
}
function $c(a, b, c) {
    a.pendingLanes |= b;
    var d = b - 1;
    a.suspendedLanes &= d;
    a.pingedLanes &= d;
    a = a.eventTimes;
    b = 31 - Vc(b);
    a[b] = c;
}
var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
function ad(a) {
    return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;
}
var dd = $iFoNg.unstable_UserBlockingPriority, ed = $iFoNg.unstable_runWithPriority, fd = !0;
function gd(a, b, c, d) {
    Kb || Ib();
    var e = hd, f = Kb;
    Kb = !0;
    try {
        Hb(e, a, b, c, d);
    } finally{
        (Kb = f) || Mb();
    }
}
function id(a, b, c, d) {
    ed(dd, hd.bind(null, a, b, c, d));
}
function hd(a, b, c, d) {
    if (fd) {
        var e;
        if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);
        else {
            var f = yc(a, b, c, d);
            if (null === f) e && sc(a, d);
            else {
                if (e) {
                    if (-1 < qc.indexOf(a)) {
                        a = rc(f, a, b, c, d);
                        jc.push(a);
                        return;
                    }
                    if (uc(f, a, b, c, d)) return;
                    sc(a, d);
                }
                jd(a, b, d, null, c);
            }
        }
    }
}
function yc(a, b, c, d) {
    var e = xb(d);
    e = wc(e);
    if (null !== e) {
        var f = Zb(e);
        if (null === f) e = null;
        else {
            var g = f.tag;
            if (13 === g) {
                e = $b(f);
                if (null !== e) return e;
                e = null;
            } else if (3 === g) {
                if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;
                e = null;
            } else f !== e && (e = null);
        }
    }
    jd(a, b, d, e, c);
    return null;
}
var kd = null, ld = null, md = null;
function nd() {
    if (md) return md;
    var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
    for(a = 0; a < c && b[a] === e[a]; a++);
    var g = c - a;
    for(d = 1; d <= g && b[c - d] === e[f - d]; d++);
    return md = e.slice(a, 1 < d ? 1 - d : void 0);
}
function od(a) {
    var b = a.keyCode;
    "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
    10 === a && (a = 13);
    return 32 <= a || 13 === a ? a : 0;
}
function pd() {
    return !0;
}
function qd() {
    return !1;
}
function rd(a) {
    function b(b, d, e, f, g) {
        this._reactName = b;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for(var c in a)a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
        this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
    }
    $kQ0Dz(b.prototype, {
        preventDefault: function() {
            this.defaultPrevented = !0;
            var a = this.nativeEvent;
            a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
        },
        stopPropagation: function() {
            var a = this.nativeEvent;
            a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
        },
        persist: function() {},
        isPersistent: pd
    });
    return b;
}
var sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(a) {
        return a.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
}, td = rd(sd), ud = $kQ0Dz({}, sd, {
    view: 0,
    detail: 0
}), vd = rd(ud), wd, xd, yd, Ad = $kQ0Dz({}, ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: zd,
    button: 0,
    buttons: 0,
    relatedTarget: function(a) {
        return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    },
    movementX: function(a) {
        if ("movementX" in a) return a.movementX;
        a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
        return wd;
    },
    movementY: function(a) {
        return "movementY" in a ? a.movementY : xd;
    }
}), Bd = rd(Ad), Cd = $kQ0Dz({}, Ad, {
    dataTransfer: 0
}), Dd = rd(Cd), Ed = $kQ0Dz({}, ud, {
    relatedTarget: 0
}), Fd = rd(Ed), Gd = $kQ0Dz({}, sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), Hd = rd(Gd), Id = $kQ0Dz({}, sd, {
    clipboardData: function(a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
}), Jd = rd(Id), Kd = $kQ0Dz({}, sd, {
    data: 0
}), Ld = rd(Kd), Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
}, Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
}, Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
};
function Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
}
function zd() {
    return Pd;
}
var Qd = $kQ0Dz({}, ud, {
    key: function(a) {
        if (a.key) {
            var b = Md[a.key] || a.key;
            if ("Unidentified" !== b) return b;
        }
        return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: zd,
    charCode: function(a) {
        return "keypress" === a.type ? od(a) : 0;
    },
    keyCode: function(a) {
        return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    },
    which: function(a) {
        return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }
}), Rd = rd(Qd), Sd = $kQ0Dz({}, Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
}), Td = rd(Sd), Ud = $kQ0Dz({}, ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: zd
}), Vd = rd(Ud), Wd = $kQ0Dz({}, sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), Xd = rd(Wd), Yd = $kQ0Dz({}, Ad, {
    deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
}), Zd = rd(Yd), $d = [
    9,
    13,
    27,
    32
], ae = fa && "CompositionEvent" in window, be = null;
fa && "documentMode" in document && (be = document.documentMode);
var ce = fa && "TextEvent" in window && !be, de = fa && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = !1;
function ge(a, b) {
    switch(a){
        case "keyup":
            return -1 !== $d.indexOf(b.keyCode);
        case "keydown":
            return 229 !== b.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
            return !0;
        default:
            return !1;
    }
}
function he(a) {
    a = a.detail;
    return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = !1;
function je(a, b) {
    switch(a){
        case "compositionend":
            return he(b);
        case "keypress":
            if (32 !== b.which) return null;
            fe = !0;
            return ee;
        case "textInput":
            return a = b.data, a === ee && fe ? null : a;
        default:
            return null;
    }
}
function ke(a, b) {
    if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
    switch(a){
        case "paste":
            return null;
        case "keypress":
            if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                if (b.char && 1 < b.char.length) return b.char;
                if (b.which) return String.fromCharCode(b.which);
            }
            return null;
        case "compositionend":
            return de && "ko" !== b.locale ? null : b.data;
        default:
            return null;
    }
}
var le = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
};
function me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
}
function ne(a, b, c, d) {
    Eb(d);
    b = oe(b, "onChange");
    0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
        event: c,
        listeners: b
    }));
}
var pe = null, qe = null;
function re(a) {
    se(a, 0);
}
function te(a) {
    var b = ue(a);
    if (Wa(b)) return a;
}
function ve(a, b) {
    if ("change" === a) return b;
}
var we = !1;
if (fa) {
    var xe;
    if (fa) {
        var ye = "oninput" in document;
        if (!ye) {
            var ze = document.createElement("div");
            ze.setAttribute("oninput", "return;");
            ye = "function" === typeof ze.oninput;
        }
        xe = ye;
    } else xe = !1;
    we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
    if ("value" === a.propertyName && te(qe)) {
        var b = [];
        ne(b, qe, a, xb(a));
        a = re;
        if (Kb) a(b);
        else {
            Kb = !0;
            try {
                Gb(a, b);
            } finally{
                Kb = !1, Mb();
            }
        }
    }
}
function Ce(a, b, c) {
    "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
    if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
}
function Ee(a, b) {
    if ("click" === a) return te(b);
}
function Fe(a, b) {
    if ("input" === a || "change" === a) return te(b);
}
function Ge(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var He = "function" === typeof Object.is ? Object.is : Ge, Ie = Object.prototype.hasOwnProperty;
function Je(a, b) {
    if (He(a, b)) return !0;
    if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
    var c = Object.keys(a), d = Object.keys(b);
    if (c.length !== d.length) return !1;
    for(d = 0; d < c.length; d++)if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;
    return !0;
}
function Ke(a) {
    for(; a && a.firstChild;)a = a.firstChild;
    return a;
}
function Le(a, b) {
    var c = Ke(a);
    a = 0;
    for(var d; c;){
        if (3 === c.nodeType) {
            d = a + c.textContent.length;
            if (a <= b && d >= b) return {
                node: c,
                offset: b - a
            };
            a = d;
        }
        a: {
            for(; c;){
                if (c.nextSibling) {
                    c = c.nextSibling;
                    break a;
                }
                c = c.parentNode;
            }
            c = void 0;
        }
        c = Ke(c);
    }
}
function Me(a, b) {
    return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}
function Ne() {
    for(var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;){
        try {
            var c = "string" === typeof b.contentWindow.location.href;
        } catch (d) {
            c = !1;
        }
        if (c) a = b.contentWindow;
        else break;
        b = Xa(a.document);
    }
    return b;
}
function Oe(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
var Pe = fa && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = !1;
function Ue(a, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {
        start: d.selectionStart,
        end: d.selectionEnd
    } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
        anchorNode: d.anchorNode,
        anchorOffset: d.anchorOffset,
        focusNode: d.focusNode,
        focusOffset: d.focusOffset
    }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
        event: b,
        listeners: d
    }), b.target = Qe)));
}
Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
Pc(Oc, 2);
for(var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)Nc.set(Ve[We], 0);
ea("onMouseEnter", [
    "mouseout",
    "mouseover"
]);
ea("onMouseLeave", [
    "mouseout",
    "mouseover"
]);
ea("onPointerEnter", [
    "pointerout",
    "pointerover"
]);
ea("onPointerLeave", [
    "pointerout",
    "pointerover"
]);
da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
da("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
]);
da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
function Ze(a, b, c) {
    var d = a.type || "unknown-event";
    a.currentTarget = c;
    Yb(d, b, void 0, a);
    a.currentTarget = null;
}
function se(a, b) {
    b = 0 !== (b & 4);
    for(var c = 0; c < a.length; c++){
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
            var f = void 0;
            if (b) for(var g = d.length - 1; 0 <= g; g--){
                var h = d[g], k = h.instance, l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                Ze(e, h, l);
                f = k;
            }
            else for(g = 0; g < d.length; g++){
                h = d[g];
                k = h.instance;
                l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                Ze(e, h, l);
                f = k;
            }
        }
    }
    if (Ub) throw a = Vb, Ub = !1, Vb = null, a;
}
function G(a, b) {
    var c = $e(b), d = a + "__bubble";
    c.has(d) || (af(b, a, 2, !1), c.add(d));
}
var bf = "_reactListening" + Math.random().toString(36).slice(2);
function cf(a) {
    a[bf] || (a[bf] = !0, ba.forEach(function(b) {
        Ye.has(b) || df(b, !1, a, null);
        df(b, !0, a, null);
    }));
}
function df(a, b, c, d) {
    var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0, f = c;
    "selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);
    if (null !== d && !b && Ye.has(a)) {
        if ("scroll" !== a) return;
        e |= 2;
        f = d;
    }
    var g = $e(f), h = a + "__" + (b ? "capture" : "bubble");
    g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
}
function af(a, b, c, d) {
    var e = Nc.get(b);
    switch(void 0 === e ? 2 : e){
        case 0:
            e = gd;
            break;
        case 1:
            e = id;
            break;
        default:
            e = hd;
    }
    c = e.bind(null, b, c, a);
    e = void 0;
    !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
    d ? void 0 !== e ? a.addEventListener(b, c, {
        capture: !0,
        passive: e
    }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
        passive: e
    }) : a.addEventListener(b, c, !1);
}
function jd(a, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for(;;){
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
            var h = d.stateNode.containerInfo;
            if (h === e || 8 === h.nodeType && h.parentNode === e) break;
            if (4 === g) for(g = d.return; null !== g;){
                var k = g.tag;
                if (3 === k || 4 === k) {
                    if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
                }
                g = g.return;
            }
            for(; null !== h;){
                g = wc(h);
                if (null === g) return;
                k = g.tag;
                if (5 === k || 6 === k) {
                    d = f = g;
                    continue a;
                }
                h = h.parentNode;
            }
        }
        d = d.return;
    }
    Nb(function() {
        var d = f, e = xb(c), g = [];
        a: {
            var h = Mc.get(a);
            if (void 0 !== h) {
                var k = td, x = a;
                switch(a){
                    case "keypress":
                        if (0 === od(c)) break a;
                    case "keydown":
                    case "keyup":
                        k = Rd;
                        break;
                    case "focusin":
                        x = "focus";
                        k = Fd;
                        break;
                    case "focusout":
                        x = "blur";
                        k = Fd;
                        break;
                    case "beforeblur":
                    case "afterblur":
                        k = Fd;
                        break;
                    case "click":
                        if (2 === c.button) break a;
                    case "auxclick":
                    case "dblclick":
                    case "mousedown":
                    case "mousemove":
                    case "mouseup":
                    case "mouseout":
                    case "mouseover":
                    case "contextmenu":
                        k = Bd;
                        break;
                    case "drag":
                    case "dragend":
                    case "dragenter":
                    case "dragexit":
                    case "dragleave":
                    case "dragover":
                    case "dragstart":
                    case "drop":
                        k = Dd;
                        break;
                    case "touchcancel":
                    case "touchend":
                    case "touchmove":
                    case "touchstart":
                        k = Vd;
                        break;
                    case Ic:
                    case Jc:
                    case Kc:
                        k = Hd;
                        break;
                    case Lc:
                        k = Xd;
                        break;
                    case "scroll":
                        k = vd;
                        break;
                    case "wheel":
                        k = Zd;
                        break;
                    case "copy":
                    case "cut":
                    case "paste":
                        k = Jd;
                        break;
                    case "gotpointercapture":
                    case "lostpointercapture":
                    case "pointercancel":
                    case "pointerdown":
                    case "pointermove":
                    case "pointerout":
                    case "pointerover":
                    case "pointerup":
                        k = Td;
                }
                var w = 0 !== (b & 4), z = !w && "scroll" === a, u = w ? null !== h ? h + "Capture" : null : h;
                w = [];
                for(var t = d, q; null !== t;){
                    q = t;
                    var v = q.stateNode;
                    5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));
                    if (z) break;
                    t = t.return;
                }
                0 < w.length && (h = new k(h, x, null, c, e), g.push({
                    event: h,
                    listeners: w
                }));
            }
        }
        if (0 === (b & 7)) {
            a: {
                h = "mouseover" === a || "pointerover" === a;
                k = "mouseout" === a || "pointerout" === a;
                if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;
                if (k || h) {
                    h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
                    if (k) {
                        if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;
                    } else k = null, x = d;
                    if (k !== x) {
                        w = Bd;
                        v = "onMouseLeave";
                        u = "onMouseEnter";
                        t = "mouse";
                        if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";
                        z = null == k ? h : ue(k);
                        q = null == x ? h : ue(x);
                        h = new w(v, t + "leave", k, c, e);
                        h.target = z;
                        h.relatedTarget = q;
                        v = null;
                        wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);
                        z = v;
                        if (k && x) b: {
                            w = k;
                            u = x;
                            t = 0;
                            for(q = w; q; q = gf(q))t++;
                            q = 0;
                            for(v = u; v; v = gf(v))q++;
                            for(; 0 < t - q;)w = gf(w), t--;
                            for(; 0 < q - t;)u = gf(u), q--;
                            for(; t--;){
                                if (w === u || null !== u && w === u.alternate) break b;
                                w = gf(w);
                                u = gf(u);
                            }
                            w = null;
                        }
                        else w = null;
                        null !== k && hf(g, h, k, w, !1);
                        null !== x && null !== z && hf(g, z, x, w, !0);
                    }
                }
            }
            a: {
                h = d ? ue(d) : window;
                k = h.nodeName && h.nodeName.toLowerCase();
                if ("select" === k || "input" === k && "file" === h.type) var J = ve;
                else if (me(h)) {
                    if (we) J = Fe;
                    else {
                        J = De;
                        var K = Ce;
                    }
                } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);
                if (J && (J = J(a, d))) {
                    ne(g, J, c, e);
                    break a;
                }
                K && K(a, h, d);
                "focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);
            }
            K = d ? ue(d) : window;
            switch(a){
                case "focusin":
                    if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;
                    break;
                case "focusout":
                    Se = Re = Qe = null;
                    break;
                case "mousedown":
                    Te = !0;
                    break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                    Te = !1;
                    Ue(g, c, e);
                    break;
                case "selectionchange":
                    if (Pe) break;
                case "keydown":
                case "keyup":
                    Ue(g, c, e);
            }
            var Q;
            if (ae) b: {
                switch(a){
                    case "compositionstart":
                        var L = "onCompositionStart";
                        break b;
                    case "compositionend":
                        L = "onCompositionEnd";
                        break b;
                    case "compositionupdate":
                        L = "onCompositionUpdate";
                        break b;
                }
                L = void 0;
            }
            else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");
            L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({
                event: L,
                listeners: K
            }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));
            if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
                event: e,
                listeners: d
            }), e.data = Q);
        }
        se(g, b);
    });
}
function ef(a, b, c) {
    return {
        instance: a,
        listener: b,
        currentTarget: c
    };
}
function oe(a, b) {
    for(var c = b + "Capture", d = []; null !== a;){
        var e = a, f = e.stateNode;
        5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));
        a = a.return;
    }
    return d;
}
function gf(a) {
    if (null === a) return null;
    do a = a.return;
    while (a && 5 !== a.tag);
    return a ? a : null;
}
function hf(a, b, c, d, e) {
    for(var f = b._reactName, g = []; null !== c && c !== d;){
        var h = c, k = h.alternate, l = h.stateNode;
        if (null !== k && k === d) break;
        5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));
        c = c.return;
    }
    0 !== g.length && a.push({
        event: b,
        listeners: g
    });
}
function jf() {}
var kf = null, lf = null;
function mf(a, b) {
    switch(a){
        case "button":
        case "input":
        case "select":
        case "textarea":
            return !!b.autoFocus;
    }
    return !1;
}
function nf(a, b) {
    return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var of = "function" === typeof setTimeout ? setTimeout : void 0, pf = "function" === typeof clearTimeout ? clearTimeout : void 0;
function qf(a) {
    1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));
}
function rf(a) {
    for(; null != a; a = a.nextSibling){
        var b = a.nodeType;
        if (1 === b || 3 === b) break;
    }
    return a;
}
function sf(a) {
    a = a.previousSibling;
    for(var b = 0; a;){
        if (8 === a.nodeType) {
            var c = a.data;
            if ("$" === c || "$!" === c || "$?" === c) {
                if (0 === b) return a;
                b--;
            } else "/$" === c && b++;
        }
        a = a.previousSibling;
    }
    return null;
}
var tf = 0;
function uf(a) {
    return {
        $$typeof: Ga,
        toString: a,
        valueOf: a
    };
}
var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
function wc(a) {
    var b = a[wf];
    if (b) return b;
    for(var c = a.parentNode; c;){
        if (b = c[ff] || c[wf]) {
            c = b.alternate;
            if (null !== b.child || null !== c && null !== c.child) for(a = sf(a); null !== a;){
                if (c = a[wf]) return c;
                a = sf(a);
            }
            return b;
        }
        a = c;
        c = a.parentNode;
    }
    return null;
}
function Cb(a) {
    a = a[wf] || a[ff];
    return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    throw Error(y(33));
}
function Db(a) {
    return a[xf] || null;
}
function $e(a) {
    var b = a[yf];
    void 0 === b && (b = a[yf] = new Set);
    return b;
}
var zf = [], Af = -1;
function Bf(a) {
    return {
        current: a
    };
}
function H(a) {
    0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
}
function I(a, b) {
    Af++;
    zf[Af] = a.current;
    a.current = b;
}
var Cf = {}, M = Bf(Cf), N = Bf(!1), Df = Cf;
function Ef(a, b) {
    var c = a.type.contextTypes;
    if (!c) return Cf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {}, f;
    for(f in c)e[f] = b[f];
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
    return e;
}
function Ff(a) {
    a = a.childContextTypes;
    return null !== a && void 0 !== a;
}
function Gf() {
    H(N);
    H(M);
}
function Hf(a, b, c) {
    if (M.current !== Cf) throw Error(y(168));
    I(M, b);
    I(N, c);
}
function If(a, b, c) {
    var d = a.stateNode;
    a = b.childContextTypes;
    if ("function" !== typeof d.getChildContext) return c;
    d = d.getChildContext();
    for(var e in d)if (!(e in a)) throw Error(y(108, Ra(b) || "Unknown", e));
    return $kQ0Dz({}, c, d);
}
function Jf(a) {
    a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;
    Df = M.current;
    I(M, a);
    I(N, N.current);
    return !0;
}
function Kf(a, b, c) {
    var d = a.stateNode;
    if (!d) throw Error(y(169));
    c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);
    I(N, c);
}
var Lf = null, Mf = null, Nf = $iFoNg.unstable_runWithPriority, Of = $iFoNg.unstable_scheduleCallback, Pf = $iFoNg.unstable_cancelCallback, Qf = $iFoNg.unstable_shouldYield, Rf = $iFoNg.unstable_requestPaint, Sf = $iFoNg.unstable_now, Tf = $iFoNg.unstable_getCurrentPriorityLevel, Uf = $iFoNg.unstable_ImmediatePriority, Vf = $iFoNg.unstable_UserBlockingPriority, Wf = $iFoNg.unstable_NormalPriority, Xf = $iFoNg.unstable_LowPriority, Yf = $iFoNg.unstable_IdlePriority, Zf = {}, $f = void 0 !== Rf ? Rf : function() {}, ag = null, bg = null, cg = !1, dg = Sf(), O = 1E4 > dg ? Sf : function() {
    return Sf() - dg;
};
function eg() {
    switch(Tf()){
        case Uf:
            return 99;
        case Vf:
            return 98;
        case Wf:
            return 97;
        case Xf:
            return 96;
        case Yf:
            return 95;
        default:
            throw Error(y(332));
    }
}
function fg(a) {
    switch(a){
        case 99:
            return Uf;
        case 98:
            return Vf;
        case 97:
            return Wf;
        case 96:
            return Xf;
        case 95:
            return Yf;
        default:
            throw Error(y(332));
    }
}
function gg(a, b) {
    a = fg(a);
    return Nf(a, b);
}
function hg(a, b, c) {
    a = fg(a);
    return Of(a, b, c);
}
function ig() {
    if (null !== bg) {
        var a = bg;
        bg = null;
        Pf(a);
    }
    jg();
}
function jg() {
    if (!cg && null !== ag) {
        cg = !0;
        var a = 0;
        try {
            var b = ag;
            gg(99, function() {
                for(; a < b.length; a++){
                    var c = b[a];
                    do c = c(!0);
                    while (null !== c);
                }
            });
            ag = null;
        } catch (c) {
            throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
        } finally{
            cg = !1;
        }
    }
}
var kg = ra.ReactCurrentBatchConfig;
function lg(a, b) {
    if (a && a.defaultProps) {
        b = $kQ0Dz({}, b);
        a = a.defaultProps;
        for(var c in a)void 0 === b[c] && (b[c] = a[c]);
        return b;
    }
    return b;
}
var mg = Bf(null), ng = null, og = null, pg = null;
function qg() {
    pg = og = ng = null;
}
function rg(a) {
    var b = mg.current;
    H(mg);
    a.type._context._currentValue = b;
}
function sg(a, b) {
    for(; null !== a;){
        var c = a.alternate;
        if ((a.childLanes & b) === b) {
            if (null === c || (c.childLanes & b) === b) break;
            else c.childLanes |= b;
        } else a.childLanes |= b, null !== c && (c.childLanes |= b);
        a = a.return;
    }
}
function tg(a, b) {
    ng = a;
    pg = og = null;
    a = a.dependencies;
    null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);
}
function vg(a, b) {
    if (pg !== a && !1 !== b && 0 !== b) {
        if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;
        b = {
            context: a,
            observedBits: b,
            next: null
        };
        if (null === og) {
            if (null === ng) throw Error(y(308));
            og = b;
            ng.dependencies = {
                lanes: 0,
                firstContext: b,
                responders: null
            };
        } else og = og.next = b;
    }
    return a._currentValue;
}
var wg = !1;
function xg(a) {
    a.updateQueue = {
        baseState: a.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null
        },
        effects: null
    };
}
function yg(a, b) {
    a = a.updateQueue;
    b.updateQueue === a && (b.updateQueue = {
        baseState: a.baseState,
        firstBaseUpdate: a.firstBaseUpdate,
        lastBaseUpdate: a.lastBaseUpdate,
        shared: a.shared,
        effects: a.effects
    });
}
function zg(a, b) {
    return {
        eventTime: a,
        lane: b,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function Ag(a, b) {
    a = a.updateQueue;
    if (null !== a) {
        a = a.shared;
        var c = a.pending;
        null === c ? b.next = b : (b.next = c.next, c.next = b);
        a.pending = b;
    }
}
function Bg(a, b) {
    var c = a.updateQueue, d = a.alternate;
    if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
            do {
                var g = {
                    eventTime: c.eventTime,
                    lane: c.lane,
                    tag: c.tag,
                    payload: c.payload,
                    callback: c.callback,
                    next: null
                };
                null === f ? e = f = g : f = f.next = g;
                c = c.next;
            }while (null !== c);
            null === f ? e = f = b : f = f.next = b;
        } else e = f = b;
        c = {
            baseState: d.baseState,
            firstBaseUpdate: e,
            lastBaseUpdate: f,
            shared: d.shared,
            effects: d.effects
        };
        a.updateQueue = c;
        return;
    }
    a = c.lastBaseUpdate;
    null === a ? c.firstBaseUpdate = b : a.next = b;
    c.lastBaseUpdate = b;
}
function Cg(a, b, c, d) {
    var e = a.updateQueue;
    wg = !1;
    var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
    if (null !== h) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null;
        null === g ? f = l : g.next = l;
        g = k;
        var n = a.alternate;
        if (null !== n) {
            n = n.updateQueue;
            var A = n.lastBaseUpdate;
            A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
        }
    }
    if (null !== f) {
        A = e.baseState;
        g = 0;
        n = l = k = null;
        do {
            h = f.lane;
            var p = f.eventTime;
            if ((d & h) === h) {
                null !== n && (n = n.next = {
                    eventTime: p,
                    lane: 0,
                    tag: f.tag,
                    payload: f.payload,
                    callback: f.callback,
                    next: null
                });
                a: {
                    var C = a, x = f;
                    h = b;
                    p = c;
                    switch(x.tag){
                        case 1:
                            C = x.payload;
                            if ("function" === typeof C) {
                                A = C.call(p, A, h);
                                break a;
                            }
                            A = C;
                            break a;
                        case 3:
                            C.flags = C.flags & -4097 | 64;
                        case 0:
                            C = x.payload;
                            h = "function" === typeof C ? C.call(p, A, h) : C;
                            if (null === h || void 0 === h) break a;
                            A = $kQ0Dz({}, A, h);
                            break a;
                        case 2:
                            wg = !0;
                    }
                }
                null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [
                    f
                ] : h.push(f));
            } else p = {
                eventTime: p,
                lane: h,
                tag: f.tag,
                payload: f.payload,
                callback: f.callback,
                next: null
            }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;
            f = f.next;
            if (null === f) {
                if (h = e.shared.pending, null === h) break;
                else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
            }
        }while (1);
        null === n && (k = A);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = n;
        Dg |= g;
        a.lanes = g;
        a.memoizedState = A;
    }
}
function Eg(a, b, c) {
    a = b.effects;
    b.effects = null;
    if (null !== a) for(b = 0; b < a.length; b++){
        var d = a[b], e = d.callback;
        if (null !== e) {
            d.callback = null;
            d = c;
            if ("function" !== typeof e) throw Error(y(191, e));
            e.call(d);
        }
    }
}
var Fg = (new $4rFIf.Component).refs;
function Gg(a, b, c, d) {
    b = a.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : $kQ0Dz({}, b, c);
    a.memoizedState = c;
    0 === a.lanes && (a.updateQueue.baseState = c);
}
var Kg = {
    isMounted: function(a) {
        return (a = a._reactInternals) ? Zb(a) === a : !1;
    },
    enqueueSetState: function(a, b, c) {
        a = a._reactInternals;
        var d = Hg(), e = Ig(a), f = zg(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        Ag(a, f);
        Jg(a, e, d);
    },
    enqueueReplaceState: function(a, b, c) {
        a = a._reactInternals;
        var d = Hg(), e = Ig(a), f = zg(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        Ag(a, f);
        Jg(a, e, d);
    },
    enqueueForceUpdate: function(a, b) {
        a = a._reactInternals;
        var c = Hg(), d = Ig(a), e = zg(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        Ag(a, e);
        Jg(a, d, c);
    }
};
function Lg(a, b, c, d, e, f, g) {
    a = a.stateNode;
    return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
}
function Mg(a, b, c) {
    var d = !1, e = Cf;
    var f = b.contextType;
    "object" === typeof f && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);
    b = new b(c, f);
    a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = Kg;
    a.stateNode = b;
    b._reactInternals = a;
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
    return b;
}
function Ng(a, b, c, d) {
    a = b.state;
    "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
    "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
}
function Og(a, b, c, d) {
    var e = a.stateNode;
    e.props = c;
    e.state = a.memoizedState;
    e.refs = Fg;
    xg(a);
    var f = b.contextType;
    "object" === typeof f && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));
    Cg(a, c, e, d);
    e.state = a.memoizedState;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);
    "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);
    "function" === typeof e.componentDidMount && (a.flags |= 4);
}
var Pg = Array.isArray;
function Qg(a, b, c) {
    a = c.ref;
    if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
            c = c._owner;
            if (c) {
                if (1 !== c.tag) throw Error(y(309));
                var d = c.stateNode;
            }
            if (!d) throw Error(y(147, a));
            var e = "" + a;
            if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;
            b = function(a) {
                var b = d.refs;
                b === Fg && (b = d.refs = {});
                null === a ? delete b[e] : b[e] = a;
            };
            b._stringRef = e;
            return b;
        }
        if ("string" !== typeof a) throw Error(y(284));
        if (!c._owner) throw Error(y(290, a));
    }
    return a;
}
function Rg(a, b) {
    if ("textarea" !== a.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
}
function Sg(a) {
    function b(b, c) {
        if (a) {
            var d = b.lastEffect;
            null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
            c.nextEffect = null;
            c.flags = 8;
        }
    }
    function c(c, d) {
        if (!a) return null;
        for(; null !== d;)b(c, d), d = d.sibling;
        return null;
    }
    function d(a, b) {
        for(a = new Map; null !== b;)null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
        return a;
    }
    function e(a, b) {
        a = Tg(a, b);
        a.index = 0;
        a.sibling = null;
        return a;
    }
    function f(b, c, d) {
        b.index = d;
        if (!a) return c;
        d = b.alternate;
        if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;
        b.flags = 2;
        return c;
    }
    function g(b) {
        a && null === b.alternate && (b.flags = 2);
        return b;
    }
    function h(a, b, c, d) {
        if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b.return = a, b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function k(a, b, c, d) {
        if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d.return = a, d;
        d = Vg(c.type, c.key, c.props, null, a.mode, d);
        d.ref = Qg(a, b, c);
        d.return = a;
        return d;
    }
    function l(a, b, c, d) {
        if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b.return = a, b;
        b = e(b, c.children || []);
        b.return = a;
        return b;
    }
    function n(a, b, c, d, f) {
        if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b.return = a, b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function A(a, b, c) {
        if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b.return = a, b;
        if ("object" === typeof b && null !== b) {
            switch(b.$$typeof){
                case sa:
                    return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c.return = a, c;
                case ta:
                    return b = Wg(b, a.mode, c), b.return = a, b;
            }
            if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b.return = a, b;
            Rg(a, b);
        }
        return null;
    }
    function p(a, b, c, d) {
        var e = null !== b ? b.key : null;
        if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
        if ("object" === typeof c && null !== c) {
            switch(c.$$typeof){
                case sa:
                    return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;
                case ta:
                    return c.key === e ? l(a, b, c, d) : null;
            }
            if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);
            Rg(a, c);
        }
        return null;
    }
    function C(a, b, c, d, e) {
        if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
        if ("object" === typeof d && null !== d) {
            switch(d.$$typeof){
                case sa:
                    return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);
                case ta:
                    return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
            }
            if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);
            Rg(b, d);
        }
        return null;
    }
    function x(e, g, h, k) {
        for(var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++){
            u.index > z ? (q = u, u = null) : q = u.sibling;
            var n = p(e, u, h[z], k);
            if (null === n) {
                null === u && (u = q);
                break;
            }
            a && u && null === n.alternate && b(e, u);
            g = f(n, g, z);
            null === t ? l = n : t.sibling = n;
            t = n;
            u = q;
        }
        if (z === h.length) return c(e, u), l;
        if (null === u) {
            for(; z < h.length; z++)u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);
            return l;
        }
        for(u = d(e, u); z < h.length; z++)q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);
        a && u.forEach(function(a) {
            return b(e, a);
        });
        return l;
    }
    function w(e, g, h, k) {
        var l = La(h);
        if ("function" !== typeof l) throw Error(y(150));
        h = l.call(h);
        if (null == h) throw Error(y(151));
        for(var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()){
            u.index > z ? (q = u, u = null) : q = u.sibling;
            var w = p(e, u, n.value, k);
            if (null === w) {
                null === u && (u = q);
                break;
            }
            a && u && null === w.alternate && b(e, u);
            g = f(w, g, z);
            null === t ? l = w : t.sibling = w;
            t = w;
            u = q;
        }
        if (n.done) return c(e, u), l;
        if (null === u) {
            for(; !n.done; z++, n = h.next())n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);
            return l;
        }
        for(u = d(e, u); !n.done; z++, n = h.next())n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);
        a && u.forEach(function(a) {
            return b(e, a);
        });
        return l;
    }
    return function(a, d, f, h) {
        var k = "object" === typeof f && null !== f && f.type === ua && null === f.key;
        k && (f = f.props.children);
        var l = "object" === typeof f && null !== f;
        if (l) switch(f.$$typeof){
            case sa:
                a: {
                    l = f.key;
                    for(k = d; null !== k;){
                        if (k.key === l) {
                            switch(k.tag){
                                case 7:
                                    if (f.type === ua) {
                                        c(a, k.sibling);
                                        d = e(k, f.props.children);
                                        d.return = a;
                                        a = d;
                                        break a;
                                    }
                                    break;
                                default:
                                    if (k.elementType === f.type) {
                                        c(a, k.sibling);
                                        d = e(k, f.props);
                                        d.ref = Qg(a, k, f);
                                        d.return = a;
                                        a = d;
                                        break a;
                                    }
                            }
                            c(a, k);
                            break;
                        } else b(a, k);
                        k = k.sibling;
                    }
                    f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h.return = a, a = h);
                }
                return g(a);
            case ta:
                a: {
                    for(k = f.key; null !== d;){
                        if (d.key === k) {
                            if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                                c(a, d.sibling);
                                d = e(d, f.children || []);
                                d.return = a;
                                a = d;
                                break a;
                            } else {
                                c(a, d);
                                break;
                            }
                        } else b(a, d);
                        d = d.sibling;
                    }
                    d = Wg(f, a.mode, h);
                    d.return = a;
                    a = d;
                }
                return g(a);
        }
        if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d.return = a, a = d), g(a);
        if (Pg(f)) return x(a, d, f, h);
        if (La(f)) return w(a, d, f, h);
        l && Rg(a, f);
        if ("undefined" === typeof f && !k) switch(a.tag){
            case 1:
            case 22:
            case 0:
            case 11:
            case 15:
                throw Error(y(152, Ra(a.type) || "Component"));
        }
        return c(a, d);
    };
}
var Yg = Sg(!0), Zg = Sg(!1), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
function dh(a) {
    if (a === $g) throw Error(y(174));
    return a;
}
function eh(a, b) {
    I(ch, b);
    I(bh, a);
    I(ah, $g);
    a = b.nodeType;
    switch(a){
        case 9:
        case 11:
            b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
            break;
        default:
            a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);
    }
    H(ah);
    I(ah, b);
}
function fh() {
    H(ah);
    H(bh);
    H(ch);
}
function gh(a) {
    dh(ch.current);
    var b = dh(ah.current);
    var c = mb(b, a.type);
    b !== c && (I(bh, a), I(ah, c));
}
function hh(a) {
    bh.current === a && (H(ah), H(bh));
}
var P = Bf(0);
function ih(a) {
    for(var b = a; null !== b;){
        if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 64)) return b;
        } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
        }
        if (b === a) break;
        for(; null === b.sibling;){
            if (null === b.return || b.return === a) return null;
            b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
    }
    return null;
}
var jh = null, kh = null, lh = !1;
function mh(a, b) {
    var c = nh(5, null, null, 0);
    c.elementType = "DELETED";
    c.type = "DELETED";
    c.stateNode = b;
    c.return = a;
    c.flags = 8;
    null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}
function oh(a, b) {
    switch(a.tag){
        case 5:
            var c = a.type;
            b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
            return null !== b ? (a.stateNode = b, !0) : !1;
        case 6:
            return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;
        case 13:
            return !1;
        default:
            return !1;
    }
}
function ph(a) {
    if (lh) {
        var b = kh;
        if (b) {
            var c = b;
            if (!oh(a, b)) {
                b = rf(c.nextSibling);
                if (!b || !oh(a, b)) {
                    a.flags = a.flags & -1025 | 2;
                    lh = !1;
                    jh = a;
                    return;
                }
                mh(jh, c);
            }
            jh = a;
            kh = rf(b.firstChild);
        } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;
    }
}
function qh(a) {
    for(a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;)a = a.return;
    jh = a;
}
function rh(a) {
    if (a !== jh) return !1;
    if (!lh) return qh(a), lh = !0, !1;
    var b = a.type;
    if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for(b = kh; b;)mh(a, b), b = rf(b.nextSibling);
    qh(a);
    if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error(y(317));
        a: {
            a = a.nextSibling;
            for(b = 0; a;){
                if (8 === a.nodeType) {
                    var c = a.data;
                    if ("/$" === c) {
                        if (0 === b) {
                            kh = rf(a.nextSibling);
                            break a;
                        }
                        b--;
                    } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                }
                a = a.nextSibling;
            }
            kh = null;
        }
    } else kh = jh ? rf(a.stateNode.nextSibling) : null;
    return !0;
}
function sh() {
    kh = jh = null;
    lh = !1;
}
var th = [];
function uh() {
    for(var a = 0; a < th.length; a++)th[a]._workInProgressVersionPrimary = null;
    th.length = 0;
}
var vh = ra.ReactCurrentDispatcher, wh = ra.ReactCurrentBatchConfig, xh = 0, R = null, S = null, T = null, yh = !1, zh = !1;
function Ah() {
    throw Error(y(321));
}
function Bh(a, b) {
    if (null === b) return !1;
    for(var c = 0; c < b.length && c < a.length; c++)if (!He(a[c], b[c])) return !1;
    return !0;
}
function Ch(a, b, c, d, e, f) {
    xh = f;
    R = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    vh.current = null === a || null === a.memoizedState ? Dh : Eh;
    a = c(d, e);
    if (zh) {
        f = 0;
        do {
            zh = !1;
            if (!(25 > f)) throw Error(y(301));
            f += 1;
            T = S = null;
            b.updateQueue = null;
            vh.current = Fh;
            a = c(d, e);
        }while (zh);
    }
    vh.current = Gh;
    b = null !== S && null !== S.next;
    xh = 0;
    T = S = R = null;
    yh = !1;
    if (b) throw Error(y(300));
    return a;
}
function Hh() {
    var a = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === T ? R.memoizedState = T = a : T = T.next = a;
    return T;
}
function Ih() {
    if (null === S) {
        var a = R.alternate;
        a = null !== a ? a.memoizedState : null;
    } else a = S.next;
    var b = null === T ? R.memoizedState : T.next;
    if (null !== b) T = b, S = a;
    else {
        if (null === a) throw Error(y(310));
        S = a;
        a = {
            memoizedState: S.memoizedState,
            baseState: S.baseState,
            baseQueue: S.baseQueue,
            queue: S.queue,
            next: null
        };
        null === T ? R.memoizedState = T = a : T = T.next = a;
    }
    return T;
}
function Jh(a, b) {
    return "function" === typeof b ? b(a) : b;
}
function Kh(a) {
    var b = Ih(), c = b.queue;
    if (null === c) throw Error(y(311));
    c.lastRenderedReducer = a;
    var d = S, e = d.baseQueue, f = c.pending;
    if (null !== f) {
        if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
        }
        d.baseQueue = e = f;
        c.pending = null;
    }
    if (null !== e) {
        e = e.next;
        d = d.baseState;
        var h = g = f = null, k = e;
        do {
            var l = k.lane;
            if ((xh & l) === l) null !== h && (h = h.next = {
                lane: 0,
                action: k.action,
                eagerReducer: k.eagerReducer,
                eagerState: k.eagerState,
                next: null
            }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);
            else {
                var n = {
                    lane: l,
                    action: k.action,
                    eagerReducer: k.eagerReducer,
                    eagerState: k.eagerState,
                    next: null
                };
                null === h ? (g = h = n, f = d) : h = h.next = n;
                R.lanes |= l;
                Dg |= l;
            }
            k = k.next;
        }while (null !== k && k !== e);
        null === h ? f = d : h.next = g;
        He(d, b.memoizedState) || (ug = !0);
        b.memoizedState = d;
        b.baseState = f;
        b.baseQueue = h;
        c.lastRenderedState = d;
    }
    return [
        b.memoizedState,
        c.dispatch
    ];
}
function Lh(a) {
    var b = Ih(), c = b.queue;
    if (null === c) throw Error(y(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch, e = c.pending, f = b.memoizedState;
    if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do f = a(f, g.action), g = g.next;
        while (g !== e);
        He(f, b.memoizedState) || (ug = !0);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
    }
    return [
        f,
        d
    ];
}
function Mh(a, b, c) {
    var d = b._getVersion;
    d = d(b._source);
    var e = b._workInProgressVersionPrimary;
    if (null !== e) a = e === d;
    else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);
    if (a) return c(b._source);
    th.push(b);
    throw Error(y(350));
}
function Nh(a, b, c, d) {
    var e = U;
    if (null === e) throw Error(y(349));
    var f = b._getVersion, g = f(b._source), h = vh.current, k = h.useState(function() {
        return Mh(e, b, c);
    }), l = k[1], n = k[0];
    k = T;
    var A = a.memoizedState, p = A.refs, C = p.getSnapshot, x = A.source;
    A = A.subscribe;
    var w = R;
    a.memoizedState = {
        refs: p,
        source: b,
        subscribe: d
    };
    h.useEffect(function() {
        p.getSnapshot = c;
        p.setSnapshot = l;
        var a = f(b._source);
        if (!He(g, a)) {
            a = c(b._source);
            He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);
            a = e.mutableReadLanes;
            e.entangledLanes |= a;
            for(var d = e.entanglements, h = a; 0 < h;){
                var k = 31 - Vc(h), v = 1 << k;
                d[k] |= a;
                h &= ~v;
            }
        }
    }, [
        c,
        b,
        d
    ]);
    h.useEffect(function() {
        return d(b._source, function() {
            var a = p.getSnapshot, c = p.setSnapshot;
            try {
                c(a(b._source));
                var d = Ig(w);
                e.mutableReadLanes |= d & e.pendingLanes;
            } catch (q) {
                c(function() {
                    throw q;
                });
            }
        });
    }, [
        b,
        d
    ]);
    He(C, c) && He(x, b) && He(A, d) || (a = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: Jh,
        lastRenderedState: n
    }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);
    return n;
}
function Ph(a, b, c) {
    var d = Ih();
    return Nh(d, a, b, c);
}
function Qh(a) {
    var b = Hh();
    "function" === typeof a && (a = a());
    b.memoizedState = b.baseState = a;
    a = b.queue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: Jh,
        lastRenderedState: a
    };
    a = a.dispatch = Oh.bind(null, R, a);
    return [
        b.memoizedState,
        a
    ];
}
function Rh(a, b, c, d) {
    a = {
        tag: a,
        create: b,
        destroy: c,
        deps: d,
        next: null
    };
    b = R.updateQueue;
    null === b ? (b = {
        lastEffect: null
    }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
    return a;
}
function Sh(a) {
    var b = Hh();
    a = {
        current: a
    };
    return b.memoizedState = a;
}
function Th() {
    return Ih().memoizedState;
}
function Uh(a, b, c, d) {
    var e = Hh();
    R.flags |= a;
    e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);
}
function Vh(a, b, c, d) {
    var e = Ih();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== S) {
        var g = S.memoizedState;
        f = g.destroy;
        if (null !== d && Bh(d, g.deps)) {
            Rh(b, c, f, d);
            return;
        }
    }
    R.flags |= a;
    e.memoizedState = Rh(1 | b, c, f, d);
}
function Wh(a, b) {
    return Uh(516, 4, a, b);
}
function Xh(a, b) {
    return Vh(516, 4, a, b);
}
function Yh(a, b) {
    return Vh(4, 2, a, b);
}
function Zh(a, b) {
    if ("function" === typeof b) return a = a(), b(a), function() {
        b(null);
    };
    if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
        b.current = null;
    };
}
function $h(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([
        a
    ]) : null;
    return Vh(4, 2, Zh.bind(null, b, a), c);
}
function ai() {}
function bi(a, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    c.memoizedState = [
        a,
        b
    ];
    return a;
}
function ci(a, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [
        a,
        b
    ];
    return a;
}
function di(a, b) {
    var c = eg();
    gg(98 > c ? 98 : c, function() {
        a(!0);
    });
    gg(97 < c ? 97 : c, function() {
        var c = wh.transition;
        wh.transition = 1;
        try {
            a(!1), b();
        } finally{
            wh.transition = c;
        }
    });
}
function Oh(a, b, c) {
    var d = Hg(), e = Ig(a), f = {
        lane: e,
        action: c,
        eagerReducer: null,
        eagerState: null,
        next: null
    }, g = b.pending;
    null === g ? f.next = f : (f.next = g.next, g.next = f);
    b.pending = f;
    g = a.alternate;
    if (a === R || null !== g && g === R) zh = yh = !0;
    else {
        if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {
            var h = b.lastRenderedState, k = g(h, c);
            f.eagerReducer = g;
            f.eagerState = k;
            if (He(k, h)) return;
        } catch (l) {} finally{}
        Jg(a, e, d);
    }
}
var Gh = {
    readContext: vg,
    useCallback: Ah,
    useContext: Ah,
    useEffect: Ah,
    useImperativeHandle: Ah,
    useLayoutEffect: Ah,
    useMemo: Ah,
    useReducer: Ah,
    useRef: Ah,
    useState: Ah,
    useDebugValue: Ah,
    useDeferredValue: Ah,
    useTransition: Ah,
    useMutableSource: Ah,
    useOpaqueIdentifier: Ah,
    unstable_isNewReconciler: !1
}, Dh = {
    readContext: vg,
    useCallback: function(a, b) {
        Hh().memoizedState = [
            a,
            void 0 === b ? null : b
        ];
        return a;
    },
    useContext: vg,
    useEffect: Wh,
    useImperativeHandle: function(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([
            a
        ]) : null;
        return Uh(4, 2, Zh.bind(null, b, a), c);
    },
    useLayoutEffect: function(a, b) {
        return Uh(4, 2, a, b);
    },
    useMemo: function(a, b) {
        var c = Hh();
        b = void 0 === b ? null : b;
        a = a();
        c.memoizedState = [
            a,
            b
        ];
        return a;
    },
    useReducer: function(a, b, c) {
        var d = Hh();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a = d.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: a,
            lastRenderedState: b
        };
        a = a.dispatch = Oh.bind(null, R, a);
        return [
            d.memoizedState,
            a
        ];
    },
    useRef: Sh,
    useState: Qh,
    useDebugValue: ai,
    useDeferredValue: function(a) {
        var b = Qh(a), c = b[0], d = b[1];
        Wh(function() {
            var b = wh.transition;
            wh.transition = 1;
            try {
                d(a);
            } finally{
                wh.transition = b;
            }
        }, [
            a
        ]);
        return c;
    },
    useTransition: function() {
        var a = Qh(!1), b = a[0];
        a = di.bind(null, a[1]);
        Sh(a);
        return [
            a,
            b
        ];
    },
    useMutableSource: function(a, b, c) {
        var d = Hh();
        d.memoizedState = {
            refs: {
                getSnapshot: b,
                setSnapshot: null
            },
            source: a,
            subscribe: c
        };
        return Nh(d, a, b, c);
    },
    useOpaqueIdentifier: function() {
        if (lh) {
            var a = !1, b = uf(function() {
                a || (a = !0, c("r:" + (tf++).toString(36)));
                throw Error(y(355));
            }), c = Qh(b)[1];
            0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function() {
                c("r:" + (tf++).toString(36));
            }, void 0, null));
            return b;
        }
        b = "r:" + (tf++).toString(36);
        Qh(b);
        return b;
    },
    unstable_isNewReconciler: !1
}, Eh = {
    readContext: vg,
    useCallback: bi,
    useContext: vg,
    useEffect: Xh,
    useImperativeHandle: $h,
    useLayoutEffect: Yh,
    useMemo: ci,
    useReducer: Kh,
    useRef: Th,
    useState: function() {
        return Kh(Jh);
    },
    useDebugValue: ai,
    useDeferredValue: function(a) {
        var b = Kh(Jh), c = b[0], d = b[1];
        Xh(function() {
            var b = wh.transition;
            wh.transition = 1;
            try {
                d(a);
            } finally{
                wh.transition = b;
            }
        }, [
            a
        ]);
        return c;
    },
    useTransition: function() {
        var a = Kh(Jh)[0];
        return [
            Th().current,
            a
        ];
    },
    useMutableSource: Ph,
    useOpaqueIdentifier: function() {
        return Kh(Jh)[0];
    },
    unstable_isNewReconciler: !1
}, Fh = {
    readContext: vg,
    useCallback: bi,
    useContext: vg,
    useEffect: Xh,
    useImperativeHandle: $h,
    useLayoutEffect: Yh,
    useMemo: ci,
    useReducer: Lh,
    useRef: Th,
    useState: function() {
        return Lh(Jh);
    },
    useDebugValue: ai,
    useDeferredValue: function(a) {
        var b = Lh(Jh), c = b[0], d = b[1];
        Xh(function() {
            var b = wh.transition;
            wh.transition = 1;
            try {
                d(a);
            } finally{
                wh.transition = b;
            }
        }, [
            a
        ]);
        return c;
    },
    useTransition: function() {
        var a = Lh(Jh)[0];
        return [
            Th().current,
            a
        ];
    },
    useMutableSource: Ph,
    useOpaqueIdentifier: function() {
        return Lh(Jh)[0];
    },
    unstable_isNewReconciler: !1
}, ei = ra.ReactCurrentOwner, ug = !1;
function fi(a, b, c, d) {
    b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
}
function gi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    tg(b, e);
    d = Ch(a, b, c, d, f, e);
    if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
    b.flags |= 1;
    fi(a, b, d, e);
    return b.child;
}
function ii(a, b, c, d, e, f) {
    if (null === a) {
        var g = c.type;
        if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);
        a = Vg(c.type, null, d, b, b.mode, f);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
    }
    g = a.child;
    if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);
    b.flags |= 1;
    a = Tg(g, d);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
}
function ki(a, b, c, d, e, f) {
    if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) {
        if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);
        else return b.lanes = a.lanes, hi(a, b, f);
    }
    return li(a, b, c, d, f);
}
function mi(a, b, c) {
    var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
    if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {
        if (0 === (b.mode & 4)) b.memoizedState = {
            baseLanes: 0
        }, ni(b, c);
        else if (0 !== (c & 1073741824)) b.memoizedState = {
            baseLanes: 0
        }, ni(b, null !== f ? f.baseLanes : c);
        else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
            baseLanes: a
        }, ni(b, a), null;
    } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);
    fi(a, b, e, c);
    return b.child;
}
function oi(a, b) {
    var c = b.ref;
    if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;
}
function li(a, b, c, d, e) {
    var f = Ff(c) ? Df : M.current;
    f = Ef(b, f);
    tg(b, e);
    c = Ch(a, b, c, d, f, e);
    if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
    b.flags |= 1;
    fi(a, b, c, e);
    return b.child;
}
function pi(a, b, c, d, e) {
    if (Ff(c)) {
        var f = !0;
        Jf(b);
    } else f = !1;
    tg(b, e);
    if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;
    else if (null === a) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        "object" === typeof l && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));
        var n = c.getDerivedStateFromProps, A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;
        A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);
        wg = !1;
        var p = b.memoizedState;
        g.state = p;
        Cg(b, d, g, e);
        k = b.memoizedState;
        h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);
    } else {
        g = b.stateNode;
        yg(a, b);
        h = b.memoizedProps;
        l = b.type === b.elementType ? h : lg(b.type, h);
        g.props = l;
        A = b.pendingProps;
        p = g.context;
        k = c.contextType;
        "object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
        var C = c.getDerivedStateFromProps;
        (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);
        wg = !1;
        p = b.memoizedState;
        g.state = p;
        Cg(b, d, g, e);
        var x = b.memoizedState;
        h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);
    }
    return qi(a, b, c, d, f, e);
}
function qi(a, b, c, d, e, f) {
    oi(a, b);
    var g = 0 !== (b.flags & 64);
    if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);
    d = b.stateNode;
    ei.current = b;
    var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);
    b.memoizedState = d.state;
    e && Kf(b, c, !0);
    return b.child;
}
function ri(a) {
    var b = a.stateNode;
    b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);
    eh(a, b.containerInfo);
}
var si = {
    dehydrated: null,
    retryLane: 0
};
function ti(a, b, c) {
    var d = b.pendingProps, e = P.current, f = !1, g;
    (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
    g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);
    I(P, e & 1);
    if (null === a) {
        void 0 !== d.fallback && ph(b);
        a = d.children;
        e = d.fallback;
        if (f) return a = ui(b, a, e, c), b.child.memoizedState = {
            baseLanes: c
        }, b.memoizedState = si, a;
        if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = {
            baseLanes: c
        }, b.memoizedState = si, b.lanes = 33554432, a;
        c = vi({
            mode: "visible",
            children: a
        }, b.mode, c, null);
        c.return = b;
        return b.child = c;
    }
    if (null !== a.memoizedState) {
        if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
            baseLanes: c
        } : {
            baseLanes: e.baseLanes | c
        }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
        c = xi(a, b, d.children, c);
        b.memoizedState = null;
        return c;
    }
    if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
        baseLanes: c
    } : {
        baseLanes: e.baseLanes | c
    }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
    c = xi(a, b, d.children, c);
    b.memoizedState = null;
    return c;
}
function ui(a, b, c, d) {
    var e = a.mode, f = a.child;
    b = {
        mode: "hidden",
        children: b
    };
    0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);
    c = Xg(c, e, d, null);
    f.return = a;
    c.return = a;
    f.sibling = c;
    a.child = f;
    return c;
}
function xi(a, b, c, d) {
    var e = a.child;
    a = e.sibling;
    c = Tg(e, {
        mode: "visible",
        children: c
    });
    0 === (b.mode & 2) && (c.lanes = d);
    c.return = b;
    c.sibling = null;
    null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);
    return b.child = c;
}
function wi(a, b, c, d, e) {
    var f = b.mode, g = a.child;
    a = g.sibling;
    var h = {
        mode: "hidden",
        children: c
    };
    0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);
    null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);
    d.return = b;
    c.return = b;
    c.sibling = d;
    b.child = c;
    return d;
}
function yi(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    sg(a.return, b);
}
function zi(a, b, c, d, e, f) {
    var g = a.memoizedState;
    null === g ? a.memoizedState = {
        isBackwards: b,
        rendering: null,
        renderingStartTime: 0,
        last: d,
        tail: c,
        tailMode: e,
        lastEffect: f
    } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);
}
function Ai(a, b, c) {
    var d = b.pendingProps, e = d.revealOrder, f = d.tail;
    fi(a, b, d.children, c);
    d = P.current;
    if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;
    else {
        if (null !== a && 0 !== (a.flags & 64)) a: for(a = b.child; null !== a;){
            if (13 === a.tag) null !== a.memoizedState && yi(a, c);
            else if (19 === a.tag) yi(a, c);
            else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
            }
            if (a === b) break a;
            for(; null === a.sibling;){
                if (null === a.return || a.return === b) break a;
                a = a.return;
            }
            a.sibling.return = a.return;
            a = a.sibling;
        }
        d &= 1;
    }
    I(P, d);
    if (0 === (b.mode & 2)) b.memoizedState = null;
    else switch(e){
        case "forwards":
            c = b.child;
            for(e = null; null !== c;)a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            zi(b, !1, e, c, f, b.lastEffect);
            break;
        case "backwards":
            c = null;
            e = b.child;
            for(b.child = null; null !== e;){
                a = e.alternate;
                if (null !== a && null === ih(a)) {
                    b.child = e;
                    break;
                }
                a = e.sibling;
                e.sibling = c;
                c = e;
                e = a;
            }
            zi(b, !0, c, null, f, b.lastEffect);
            break;
        case "together":
            zi(b, !1, null, null, void 0, b.lastEffect);
            break;
        default:
            b.memoizedState = null;
    }
    return b.child;
}
function hi(a, b, c) {
    null !== a && (b.dependencies = a.dependencies);
    Dg |= b.lanes;
    if (0 !== (c & b.childLanes)) {
        if (null !== a && b.child !== a.child) throw Error(y(153));
        if (null !== b.child) {
            a = b.child;
            c = Tg(a, a.pendingProps);
            b.child = c;
            for(c.return = b; null !== a.sibling;)a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;
            c.sibling = null;
        }
        return b.child;
    }
    return null;
}
var Bi, Ci, Di, Ei;
Bi = function(a, b) {
    for(var c = b.child; null !== c;){
        if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === b) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
};
Ci = function() {};
Di = function(a, b, c, d) {
    var e = a.memoizedProps;
    if (e !== d) {
        a = b.stateNode;
        dh(ah.current);
        var f = null;
        switch(c){
            case "input":
                e = Ya(a, e);
                d = Ya(a, d);
                f = [];
                break;
            case "option":
                e = eb(a, e);
                d = eb(a, d);
                f = [];
                break;
            case "select":
                e = $kQ0Dz({}, e, {
                    value: void 0
                });
                d = $kQ0Dz({}, d, {
                    value: void 0
                });
                f = [];
                break;
            case "textarea":
                e = gb(a, e);
                d = gb(a, d);
                f = [];
                break;
            default:
                "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);
        }
        vb(c, d);
        var g;
        c = null;
        for(l in e)if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) {
            if ("style" === l) {
                var h = e[l];
                for(g in h)h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        }
        for(l in d){
            var k = d[l];
            h = null != e ? e[l] : void 0;
            if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) {
                if ("style" === l) {
                    if (h) {
                        for(g in h)!h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                        for(g in k)k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                    } else c || (f || (f = []), f.push(l, c)), c = k;
                } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a), f || h === k || (f = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
            }
        }
        c && (f = f || []).push("style", c);
        var l = f;
        if (b.updateQueue = l) b.flags |= 4;
    }
};
Ei = function(a, b, c, d) {
    c !== d && (b.flags |= 4);
};
function Fi(a, b) {
    if (!lh) switch(a.tailMode){
        case "hidden":
            b = a.tail;
            for(var c = null; null !== b;)null !== b.alternate && (c = b), b = b.sibling;
            null === c ? a.tail = null : c.sibling = null;
            break;
        case "collapsed":
            c = a.tail;
            for(var d = null; null !== c;)null !== c.alternate && (d = c), c = c.sibling;
            null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
    }
}
function Gi(a, b, c) {
    var d = b.pendingProps;
    switch(b.tag){
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return null;
        case 1:
            return Ff(b.type) && Gf(), null;
        case 3:
            fh();
            H(N);
            H(M);
            uh();
            d = b.stateNode;
            d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
            if (null === a || null === a.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);
            Ci(b);
            return null;
        case 5:
            hh(b);
            var e = dh(ch.current);
            c = b.type;
            if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);
            else {
                if (!d) {
                    if (null === b.stateNode) throw Error(y(166));
                    return null;
                }
                a = dh(ah.current);
                if (rh(b)) {
                    d = b.stateNode;
                    c = b.type;
                    var f = b.memoizedProps;
                    d[wf] = b;
                    d[xf] = f;
                    switch(c){
                        case "dialog":
                            G("cancel", d);
                            G("close", d);
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            G("load", d);
                            break;
                        case "video":
                        case "audio":
                            for(a = 0; a < Xe.length; a++)G(Xe[a], d);
                            break;
                        case "source":
                            G("error", d);
                            break;
                        case "img":
                        case "image":
                        case "link":
                            G("error", d);
                            G("load", d);
                            break;
                        case "details":
                            G("toggle", d);
                            break;
                        case "input":
                            Za(d, f);
                            G("invalid", d);
                            break;
                        case "select":
                            d._wrapperState = {
                                wasMultiple: !!f.multiple
                            };
                            G("invalid", d);
                            break;
                        case "textarea":
                            hb(d, f), G("invalid", d);
                    }
                    vb(c, f);
                    a = null;
                    for(var g in f)f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = [
                        "children",
                        e
                    ]) : "number" === typeof e && d.textContent !== "" + e && (a = [
                        "children",
                        "" + e
                    ]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));
                    switch(c){
                        case "input":
                            Va(d);
                            cb(d, f, !0);
                            break;
                        case "textarea":
                            Va(d);
                            jb(d);
                            break;
                        case "select":
                        case "option":
                            break;
                        default:
                            "function" === typeof f.onClick && (d.onclick = jf);
                    }
                    d = a;
                    b.updateQueue = d;
                    null !== d && (b.flags |= 4);
                } else {
                    g = 9 === e.nodeType ? e : e.ownerDocument;
                    a === kb.html && (a = lb(c));
                    a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
                        is: d.is
                    }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                    a[wf] = b;
                    a[xf] = d;
                    Bi(a, b, !1, !1);
                    b.stateNode = a;
                    g = wb(c, d);
                    switch(c){
                        case "dialog":
                            G("cancel", a);
                            G("close", a);
                            e = d;
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            G("load", a);
                            e = d;
                            break;
                        case "video":
                        case "audio":
                            for(e = 0; e < Xe.length; e++)G(Xe[e], a);
                            e = d;
                            break;
                        case "source":
                            G("error", a);
                            e = d;
                            break;
                        case "img":
                        case "image":
                        case "link":
                            G("error", a);
                            G("load", a);
                            e = d;
                            break;
                        case "details":
                            G("toggle", a);
                            e = d;
                            break;
                        case "input":
                            Za(a, d);
                            e = Ya(a, d);
                            G("invalid", a);
                            break;
                        case "option":
                            e = eb(a, d);
                            break;
                        case "select":
                            a._wrapperState = {
                                wasMultiple: !!d.multiple
                            };
                            e = $kQ0Dz({}, d, {
                                value: void 0
                            });
                            G("invalid", a);
                            break;
                        case "textarea":
                            hb(a, d);
                            e = gb(a, d);
                            G("invalid", a);
                            break;
                        default:
                            e = d;
                    }
                    vb(c, e);
                    var h = e;
                    for(f in h)if (h.hasOwnProperty(f)) {
                        var k = h[f];
                        "style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a) : null != k && qa(a, f, k, g));
                    }
                    switch(c){
                        case "input":
                            Va(a);
                            cb(a, d, !1);
                            break;
                        case "textarea":
                            Va(a);
                            jb(a);
                            break;
                        case "option":
                            null != d.value && a.setAttribute("value", "" + Sa(d.value));
                            break;
                        case "select":
                            a.multiple = !!d.multiple;
                            f = d.value;
                            null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
                            break;
                        default:
                            "function" === typeof e.onClick && (a.onclick = jf);
                    }
                    mf(c, d) && (b.flags |= 4);
                }
                null !== b.ref && (b.flags |= 128);
            }
            return null;
        case 6:
            if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);
            else {
                if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));
                c = dh(ch.current);
                dh(ah.current);
                rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
            }
            return null;
        case 13:
            H(P);
            d = b.memoizedState;
            if (0 !== (b.flags & 64)) return b.lanes = c, b;
            d = null !== d;
            c = !1;
            null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a.memoizedState;
            if (d && !c && 0 !== (b.mode & 2)) {
                if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);
                else {
                    if (0 === V || 3 === V) V = 4;
                    null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
                }
            }
            if (d || c) b.flags |= 4;
            return null;
        case 4:
            return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;
        case 10:
            return rg(b), null;
        case 17:
            return Ff(b.type) && Gf(), null;
        case 19:
            H(P);
            d = b.memoizedState;
            if (null === d) return null;
            f = 0 !== (b.flags & 64);
            g = d.rendering;
            if (null === g) {
                if (f) Fi(d, !1);
                else {
                    if (0 !== V || null !== a && 0 !== (a.flags & 64)) for(a = b.child; null !== a;){
                        g = ih(a);
                        if (null !== g) {
                            b.flags |= 64;
                            Fi(d, !1);
                            f = g.updateQueue;
                            null !== f && (b.updateQueue = f, b.flags |= 4);
                            null === d.lastEffect && (b.firstEffect = null);
                            b.lastEffect = d.lastEffect;
                            d = c;
                            for(c = b.child; null !== c;)f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                                lanes: a.lanes,
                                firstContext: a.firstContext
                            }), c = c.sibling;
                            I(P, P.current & 1 | 2);
                            return b.child;
                        }
                        a = a.sibling;
                    }
                    null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
                }
            } else {
                if (!f) {
                    if (a = ih(g), null !== a) {
                        if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
                    } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
                }
                d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);
            }
            return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;
        case 23:
        case 24:
            return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;
    }
    throw Error(y(156, b.tag));
}
function Li(a) {
    switch(a.tag){
        case 1:
            Ff(a.type) && Gf();
            var b = a.flags;
            return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
        case 3:
            fh();
            H(N);
            H(M);
            uh();
            b = a.flags;
            if (0 !== (b & 64)) throw Error(y(285));
            a.flags = b & -4097 | 64;
            return a;
        case 5:
            return hh(a), null;
        case 13:
            return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
        case 19:
            return H(P), null;
        case 4:
            return fh(), null;
        case 10:
            return rg(a), null;
        case 23:
        case 24:
            return Ki(), null;
        default:
            return null;
    }
}
function Mi(a, b) {
    try {
        var c = "", d = b;
        do c += Qa(d), d = d.return;
        while (d);
        var e = c;
    } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }
    return {
        value: a,
        source: b,
        stack: e
    };
}
function Ni(a, b) {
    try {
        console.error(b.value);
    } catch (c) {
        setTimeout(function() {
            throw c;
        });
    }
}
var Oi = "function" === typeof WeakMap ? WeakMap : Map;
function Pi(a, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    c.payload = {
        element: null
    };
    var d = b.value;
    c.callback = function() {
        Qi || (Qi = !0, Ri = d);
        Ni(a, b);
    };
    return c;
}
function Si(a, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    var d = a.type.getDerivedStateFromError;
    if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
            Ni(a, b);
            return d(e);
        };
    }
    var f = a.stateNode;
    null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
        "function" !== typeof d && (null === Ti ? Ti = new Set([
            this
        ]) : Ti.add(this), Ni(a, b));
        var c = b.stack;
        this.componentDidCatch(b.value, {
            componentStack: null !== c ? c : ""
        });
    });
    return c;
}
var Ui = "function" === typeof WeakSet ? WeakSet : Set;
function Vi(a) {
    var b = a.ref;
    if (null !== b) {
        if ("function" === typeof b) try {
            b(null);
        } catch (c) {
            Wi(a, c);
        }
        else b.current = null;
    }
}
function Xi(a, b) {
    switch(b.tag){
        case 0:
        case 11:
        case 15:
        case 22:
            return;
        case 1:
            if (b.flags & 256 && null !== a) {
                var c = a.memoizedProps, d = a.memoizedState;
                a = b.stateNode;
                b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);
                a.__reactInternalSnapshotBeforeUpdate = b;
            }
            return;
        case 3:
            b.flags & 256 && qf(b.stateNode.containerInfo);
            return;
        case 5:
        case 6:
        case 4:
        case 17:
            return;
    }
    throw Error(y(163));
}
function Yi(a, b, c) {
    switch(c.tag){
        case 0:
        case 11:
        case 15:
        case 22:
            b = c.updateQueue;
            b = null !== b ? b.lastEffect : null;
            if (null !== b) {
                a = b = b.next;
                do {
                    if (3 === (a.tag & 3)) {
                        var d = a.create;
                        a.destroy = d();
                    }
                    a = a.next;
                }while (a !== b);
            }
            b = c.updateQueue;
            b = null !== b ? b.lastEffect : null;
            if (null !== b) {
                a = b = b.next;
                do {
                    var e = a;
                    d = e.next;
                    e = e.tag;
                    0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));
                    a = d;
                }while (a !== b);
            }
            return;
        case 1:
            a = c.stateNode;
            c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));
            b = c.updateQueue;
            null !== b && Eg(c, b, a);
            return;
        case 3:
            b = c.updateQueue;
            if (null !== b) {
                a = null;
                if (null !== c.child) switch(c.child.tag){
                    case 5:
                        a = c.child.stateNode;
                        break;
                    case 1:
                        a = c.child.stateNode;
                }
                Eg(c, b, a);
            }
            return;
        case 5:
            a = c.stateNode;
            null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
            return;
        case 6:
            return;
        case 4:
            return;
        case 12:
            return;
        case 13:
            null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));
            return;
        case 19:
        case 17:
        case 20:
        case 21:
        case 23:
        case 24:
            return;
    }
    throw Error(y(163));
}
function aj(a, b) {
    for(var c = a;;){
        if (5 === c.tag) {
            var d = c.stateNode;
            if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";
            else {
                d = c.stateNode;
                var e = c.memoizedProps.style;
                e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;
                d.style.display = sb("display", e);
            }
        } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;
        else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === a) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === a) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
}
function bj(a, b) {
    if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {
        Mf.onCommitFiberUnmount(Lf, b);
    } catch (f) {}
    switch(b.tag){
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
            a = b.updateQueue;
            if (null !== a && (a = a.lastEffect, null !== a)) {
                var c = a = a.next;
                do {
                    var d = c, e = d.destroy;
                    d = d.tag;
                    if (void 0 !== e) {
                        if (0 !== (d & 4)) Zi(b, c);
                        else {
                            d = b;
                            try {
                                e();
                            } catch (f) {
                                Wi(d, f);
                            }
                        }
                    }
                    c = c.next;
                }while (c !== a);
            }
            break;
        case 1:
            Vi(b);
            a = b.stateNode;
            if ("function" === typeof a.componentWillUnmount) try {
                a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
            } catch (f) {
                Wi(b, f);
            }
            break;
        case 5:
            Vi(b);
            break;
        case 4:
            cj(a, b);
    }
}
function dj(a) {
    a.alternate = null;
    a.child = null;
    a.dependencies = null;
    a.firstEffect = null;
    a.lastEffect = null;
    a.memoizedProps = null;
    a.memoizedState = null;
    a.pendingProps = null;
    a.return = null;
    a.updateQueue = null;
}
function ej(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function fj(a) {
    a: {
        for(var b = a.return; null !== b;){
            if (ej(b)) break a;
            b = b.return;
        }
        throw Error(y(160));
    }
    var c = b;
    b = c.stateNode;
    switch(c.tag){
        case 5:
            var d = !1;
            break;
        case 3:
            b = b.containerInfo;
            d = !0;
            break;
        case 4:
            b = b.containerInfo;
            d = !0;
            break;
        default:
            throw Error(y(161));
    }
    c.flags & 16 && (pb(b, ""), c.flags &= -17);
    a: b: for(c = a;;){
        for(; null === c.sibling;){
            if (null === c.return || ej(c.return)) {
                c = null;
                break a;
            }
            c = c.return;
        }
        c.sibling.return = c.return;
        for(c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;){
            if (c.flags & 2) continue b;
            if (null === c.child || 4 === c.tag) continue b;
            else c.child.return = c, c = c.child;
        }
        if (!(c.flags & 2)) {
            c = c.stateNode;
            break a;
        }
    }
    d ? gj(a, c, b) : hj(a, c, b);
}
function gj(a, b, c) {
    var d = a.tag, e = 5 === d || 6 === d;
    if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));
    else if (4 !== d && (a = a.child, null !== a)) for(gj(a, b, c), a = a.sibling; null !== a;)gj(a, b, c), a = a.sibling;
}
function hj(a, b, c) {
    var d = a.tag, e = 5 === d || 6 === d;
    if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);
    else if (4 !== d && (a = a.child, null !== a)) for(hj(a, b, c), a = a.sibling; null !== a;)hj(a, b, c), a = a.sibling;
}
function cj(a, b) {
    for(var c = b, d = !1, e, f;;){
        if (!d) {
            d = c.return;
            a: for(;;){
                if (null === d) throw Error(y(160));
                e = d.stateNode;
                switch(d.tag){
                    case 5:
                        f = !1;
                        break a;
                    case 3:
                        e = e.containerInfo;
                        f = !0;
                        break a;
                    case 4:
                        e = e.containerInfo;
                        f = !0;
                        break a;
                }
                d = d.return;
            }
            d = !0;
        }
        if (5 === c.tag || 6 === c.tag) {
            a: for(var g = a, h = c, k = h;;)if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;
            else {
                if (k === h) break a;
                for(; null === k.sibling;){
                    if (null === k.return || k.return === h) break a;
                    k = k.return;
                }
                k.sibling.return = k.return;
                k = k.sibling;
            }
            f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
        } else if (4 === c.tag) {
            if (null !== c.child) {
                e = c.stateNode.containerInfo;
                f = !0;
                c.child.return = c;
                c = c.child;
                continue;
            }
        } else if (bj(a, c), null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === b) return;
            c = c.return;
            4 === c.tag && (d = !1);
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
}
function ij(a, b) {
    switch(b.tag){
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
            var c = b.updateQueue;
            c = null !== c ? c.lastEffect : null;
            if (null !== c) {
                var d = c = c.next;
                do 3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next;
                while (d !== c);
            }
            return;
        case 1:
            return;
        case 5:
            c = b.stateNode;
            if (null != c) {
                d = b.memoizedProps;
                var e = null !== a ? a.memoizedProps : d;
                a = b.type;
                var f = b.updateQueue;
                b.updateQueue = null;
                if (null !== f) {
                    c[xf] = d;
                    "input" === a && "radio" === d.type && null != d.name && $a(c, d);
                    wb(a, e);
                    b = wb(a, d);
                    for(e = 0; e < f.length; e += 2){
                        var g = f[e], h = f[e + 1];
                        "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);
                    }
                    switch(a){
                        case "input":
                            ab(c, d);
                            break;
                        case "textarea":
                            ib(c, d);
                            break;
                        case "select":
                            a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));
                    }
                }
            }
            return;
        case 6:
            if (null === b.stateNode) throw Error(y(162));
            b.stateNode.nodeValue = b.memoizedProps;
            return;
        case 3:
            c = b.stateNode;
            c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));
            return;
        case 12:
            return;
        case 13:
            null !== b.memoizedState && (jj = O(), aj(b.child, !0));
            kj(b);
            return;
        case 19:
            kj(b);
            return;
        case 17:
            return;
        case 23:
        case 24:
            aj(b, null !== b.memoizedState);
            return;
    }
    throw Error(y(163));
}
function kj(a) {
    var b = a.updateQueue;
    if (null !== b) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new Ui);
        b.forEach(function(b) {
            var d = lj.bind(null, a, b);
            c.has(b) || (c.add(b), b.then(d, d));
        });
    }
}
function mj(a, b) {
    return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;
}
var nj = Math.ceil, oj = ra.ReactCurrentDispatcher, pj = ra.ReactCurrentOwner, X = 0, U = null, Y = null, W = 0, qj = 0, rj = Bf(0), V = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
function wj() {
    Ji = O() + 500;
}
var Z = null, Qi = !1, Ri = null, Ti = null, xj = !1, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = !1;
function Hg() {
    return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
}
function Ig(a) {
    a = a.mode;
    if (0 === (a & 2)) return 1;
    if (0 === (a & 4)) return 99 === eg() ? 1 : 2;
    0 === Gj && (Gj = tj);
    if (0 !== kg.transition) {
        0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
        a = Gj;
        var b = 4186112 & ~Hj;
        b &= -b;
        0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));
        return b;
    }
    a = eg();
    0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));
    return a;
}
function Jg(a, b, c) {
    if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));
    a = Kj(a, b);
    if (null === a) return null;
    $c(a, b, c);
    a === U && (Hi |= b, 4 === V && Ii(a, W));
    var d = eg();
    1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([
        a
    ]) : Cj.add(a)), Mj(a, c));
    vj = a;
}
function Kj(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    c = a;
    for(a = a.return; null !== a;)a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
    return 3 === c.tag ? c.stateNode : null;
}
function Mj(a, b) {
    for(var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;){
        var h = 31 - Vc(g), k = 1 << h, l = f[h];
        if (-1 === l) {
            if (0 === (k & d) || 0 !== (k & e)) {
                l = b;
                Rc(k);
                var n = F;
                f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;
            }
        } else l <= b && (a.expiredLanes |= k);
        g &= ~k;
    }
    d = Uc(a, a === U ? W : 0);
    b = F;
    if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);
    else {
        if (null !== c) {
            if (a.callbackPriority === b) return;
            c !== Zf && Pf(c);
        }
        15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [
            c
        ], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));
        a.callbackPriority = b;
        a.callbackNode = c;
    }
}
function Nj(a) {
    Fj = -1;
    Hj = Gj = 0;
    if (0 !== (X & 48)) throw Error(y(327));
    var b = a.callbackNode;
    if (Oj() && a.callbackNode !== b) return null;
    var c = Uc(a, a === U ? W : 0);
    if (0 === c) return null;
    var d = c;
    var e = X;
    X |= 16;
    var f = Pj();
    if (U !== a || W !== d) wj(), Qj(a, d);
    for(;;)try {
        Rj();
        break;
    } catch (h) {
        Sj(a, h);
    }
    qg();
    oj.current = f;
    X = e;
    null !== Y ? d = 0 : (U = null, W = 0, d = V);
    if (0 !== (tj & Hi)) Qj(a, 0);
    else if (0 !== d) {
        2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));
        if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;
        a.finishedWork = a.current.alternate;
        a.finishedLanes = c;
        switch(d){
            case 0:
            case 1:
                throw Error(y(345));
            case 2:
                Uj(a);
                break;
            case 3:
                Ii(a, c);
                if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
                    if (0 !== Uc(a, 0)) break;
                    e = a.suspendedLanes;
                    if ((e & c) !== c) {
                        Hg();
                        a.pingedLanes |= a.suspendedLanes & e;
                        break;
                    }
                    a.timeoutHandle = of(Uj.bind(null, a), d);
                    break;
                }
                Uj(a);
                break;
            case 4:
                Ii(a, c);
                if ((c & 4186112) === c) break;
                d = a.eventTimes;
                for(e = -1; 0 < c;){
                    var g = 31 - Vc(c);
                    f = 1 << g;
                    g = d[g];
                    g > e && (e = g);
                    c &= ~f;
                }
                c = e;
                c = O() - c;
                c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;
                if (10 < c) {
                    a.timeoutHandle = of(Uj.bind(null, a), c);
                    break;
                }
                Uj(a);
                break;
            case 5:
                Uj(a);
                break;
            default:
                throw Error(y(329));
        }
    }
    Mj(a, O());
    return a.callbackNode === b ? Nj.bind(null, a) : null;
}
function Ii(a, b) {
    b &= ~uj;
    b &= ~Hi;
    a.suspendedLanes |= b;
    a.pingedLanes &= ~b;
    for(a = a.expirationTimes; 0 < b;){
        var c = 31 - Vc(b), d = 1 << c;
        a[c] = -1;
        b &= ~d;
    }
}
function Lj(a) {
    if (0 !== (X & 48)) throw Error(y(327));
    Oj();
    if (a === U && 0 !== (a.expiredLanes & W)) {
        var b = W;
        var c = Tj(a, b);
        0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));
    } else b = Uc(a, 0), c = Tj(a, b);
    0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));
    if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;
    a.finishedWork = a.current.alternate;
    a.finishedLanes = b;
    Uj(a);
    Mj(a, O());
    return null;
}
function Vj() {
    if (null !== Cj) {
        var a = Cj;
        Cj = null;
        a.forEach(function(a) {
            a.expiredLanes |= 24 & a.pendingLanes;
            Mj(a, O());
        });
    }
    ig();
}
function Wj(a, b) {
    var c = X;
    X |= 1;
    try {
        return a(b);
    } finally{
        X = c, 0 === X && (wj(), ig());
    }
}
function Xj(a, b) {
    var c = X;
    X &= -2;
    X |= 8;
    try {
        return a(b);
    } finally{
        X = c, 0 === X && (wj(), ig());
    }
}
function ni(a, b) {
    I(rj, qj);
    qj |= b;
    tj |= b;
}
function Ki() {
    qj = rj.current;
    H(rj);
}
function Qj(a, b) {
    a.finishedWork = null;
    a.finishedLanes = 0;
    var c = a.timeoutHandle;
    -1 !== c && (a.timeoutHandle = -1, pf(c));
    if (null !== Y) for(c = Y.return; null !== c;){
        var d = c;
        switch(d.tag){
            case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && Gf();
                break;
            case 3:
                fh();
                H(N);
                H(M);
                uh();
                break;
            case 5:
                hh(d);
                break;
            case 4:
                fh();
                break;
            case 13:
                H(P);
                break;
            case 19:
                H(P);
                break;
            case 10:
                rg(d);
                break;
            case 23:
            case 24:
                Ki();
        }
        c = c.return;
    }
    U = a;
    Y = Tg(a.current, null);
    W = qj = tj = b;
    V = 0;
    sj = null;
    uj = Hi = Dg = 0;
}
function Sj(a, b) {
    do {
        var c = Y;
        try {
            qg();
            vh.current = Gh;
            if (yh) {
                for(var d = R.memoizedState; null !== d;){
                    var e = d.queue;
                    null !== e && (e.pending = null);
                    d = d.next;
                }
                yh = !1;
            }
            xh = 0;
            T = S = R = null;
            zh = !1;
            pj.current = null;
            if (null === c || null === c.return) {
                V = 1;
                sj = b;
                Y = null;
                break;
            }
            a: {
                var f = a, g = c.return, h = c, k = b;
                b = W;
                h.flags |= 2048;
                h.firstEffect = h.lastEffect = null;
                if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                    var l = k;
                    if (0 === (h.mode & 2)) {
                        var n = h.alternate;
                        n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
                    }
                    var A = 0 !== (P.current & 1), p = g;
                    do {
                        var C;
                        if (C = 13 === p.tag) {
                            var x = p.memoizedState;
                            if (null !== x) C = null !== x.dehydrated ? !0 : !1;
                            else {
                                var w = p.memoizedProps;
                                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;
                            }
                        }
                        if (C) {
                            var z = p.updateQueue;
                            if (null === z) {
                                var u = new Set;
                                u.add(l);
                                p.updateQueue = u;
                            } else z.add(l);
                            if (0 === (p.mode & 2)) {
                                p.flags |= 64;
                                h.flags |= 16384;
                                h.flags &= -2981;
                                if (1 === h.tag) {
                                    if (null === h.alternate) h.tag = 17;
                                    else {
                                        var t = zg(-1, 1);
                                        t.tag = 2;
                                        Ag(h, t);
                                    }
                                }
                                h.lanes |= 1;
                                break a;
                            }
                            k = void 0;
                            h = b;
                            var q = f.pingCache;
                            null === q ? (q = f.pingCache = new Oi, k = new Set, q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set, q.set(l, k)));
                            if (!k.has(h)) {
                                k.add(h);
                                var v = Yj.bind(null, f, l, h);
                                l.then(v, v);
                            }
                            p.flags |= 4096;
                            p.lanes = b;
                            break a;
                        }
                        p = p.return;
                    }while (null !== p);
                    k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
                }
                5 !== V && (V = 2);
                k = Mi(k, h);
                p = g;
                do {
                    switch(p.tag){
                        case 3:
                            f = k;
                            p.flags |= 4096;
                            b &= -b;
                            p.lanes |= b;
                            var J = Pi(p, f, b);
                            Bg(p, J);
                            break a;
                        case 1:
                            f = k;
                            var K = p.type, Q = p.stateNode;
                            if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {
                                p.flags |= 4096;
                                b &= -b;
                                p.lanes |= b;
                                var L = Si(p, f, b);
                                Bg(p, L);
                                break a;
                            }
                    }
                    p = p.return;
                }while (null !== p);
            }
            Zj(c);
        } catch (va) {
            b = va;
            Y === c && null !== c && (Y = c = c.return);
            continue;
        }
        break;
    }while (1);
}
function Pj() {
    var a = oj.current;
    oj.current = Gh;
    return null === a ? Gh : a;
}
function Tj(a, b) {
    var c = X;
    X |= 16;
    var d = Pj();
    U === a && W === b || Qj(a, b);
    for(;;)try {
        ak();
        break;
    } catch (e) {
        Sj(a, e);
    }
    qg();
    X = c;
    oj.current = d;
    if (null !== Y) throw Error(y(261));
    U = null;
    W = 0;
    return V;
}
function ak() {
    for(; null !== Y;)bk(Y);
}
function Rj() {
    for(; null !== Y && !Qf();)bk(Y);
}
function bk(a) {
    var b = ck(a.alternate, a, qj);
    a.memoizedProps = a.pendingProps;
    null === b ? Zj(a) : Y = b;
    pj.current = null;
}
function Zj(a) {
    var b = a;
    do {
        var c = b.alternate;
        a = b.return;
        if (0 === (b.flags & 2048)) {
            c = Gi(c, b, qj);
            if (null !== c) {
                Y = c;
                return;
            }
            c = b;
            if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
                for(var d = 0, e = c.child; null !== e;)d |= e.lanes | e.childLanes, e = e.sibling;
                c.childLanes = d;
            }
            null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
        } else {
            c = Li(b);
            if (null !== c) {
                c.flags &= 2047;
                Y = c;
                return;
            }
            null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
        }
        b = b.sibling;
        if (null !== b) {
            Y = b;
            return;
        }
        Y = b = a;
    }while (null !== b);
    0 === V && (V = 5);
}
function Uj(a) {
    var b = eg();
    gg(99, dk.bind(null, a, b));
    return null;
}
function dk(a, b) {
    do Oj();
    while (null !== yj);
    if (0 !== (X & 48)) throw Error(y(327));
    var c = a.finishedWork;
    if (null === c) return null;
    a.finishedWork = null;
    a.finishedLanes = 0;
    if (c === a.current) throw Error(y(177));
    a.callbackNode = null;
    var d = c.lanes | c.childLanes, e = d, f = a.pendingLanes & ~e;
    a.pendingLanes = e;
    a.suspendedLanes = 0;
    a.pingedLanes = 0;
    a.expiredLanes &= e;
    a.mutableReadLanes &= e;
    a.entangledLanes &= e;
    e = a.entanglements;
    for(var g = a.eventTimes, h = a.expirationTimes; 0 < f;){
        var k = 31 - Vc(f), l = 1 << k;
        e[k] = 0;
        g[k] = -1;
        h[k] = -1;
        f &= ~l;
    }
    null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);
    a === U && (Y = U = null, W = 0);
    1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;
    if (null !== d) {
        e = X;
        X |= 32;
        pj.current = null;
        kf = fd;
        g = Ne();
        if (Oe(g)) {
            if ("selectionStart" in g) h = {
                start: g.selectionStart,
                end: g.selectionEnd
            };
            else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {
                h = l.anchorNode;
                f = l.anchorOffset;
                k = l.focusNode;
                l = l.focusOffset;
                try {
                    h.nodeType, k.nodeType;
                } catch (va) {
                    h = null;
                    break a;
                }
                var n = 0, A = -1, p = -1, C = 0, x = 0, w = g, z = null;
                b: for(;;){
                    for(var u;;){
                        w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);
                        w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);
                        3 === w.nodeType && (n += w.nodeValue.length);
                        if (null === (u = w.firstChild)) break;
                        z = w;
                        w = u;
                    }
                    for(;;){
                        if (w === g) break b;
                        z === h && ++C === f && (A = n);
                        z === k && ++x === l && (p = n);
                        if (null !== (u = w.nextSibling)) break;
                        w = z;
                        z = w.parentNode;
                    }
                    w = u;
                }
                h = -1 === A || -1 === p ? null : {
                    start: A,
                    end: p
                };
            } else h = null;
            h = h || {
                start: 0,
                end: 0
            };
        } else h = null;
        lf = {
            focusedElem: g,
            selectionRange: h
        };
        fd = !1;
        Ij = null;
        Jj = !1;
        Z = d;
        do try {
            ek();
        } catch (va) {
            if (null === Z) throw Error(y(330));
            Wi(Z, va);
            Z = Z.nextEffect;
        }
        while (null !== Z);
        Ij = null;
        Z = d;
        do try {
            for(g = a; null !== Z;){
                var t = Z.flags;
                t & 16 && pb(Z.stateNode, "");
                if (t & 128) {
                    var q = Z.alternate;
                    if (null !== q) {
                        var v = q.ref;
                        null !== v && ("function" === typeof v ? v(null) : v.current = null);
                    }
                }
                switch(t & 1038){
                    case 2:
                        fj(Z);
                        Z.flags &= -3;
                        break;
                    case 6:
                        fj(Z);
                        Z.flags &= -3;
                        ij(Z.alternate, Z);
                        break;
                    case 1024:
                        Z.flags &= -1025;
                        break;
                    case 1028:
                        Z.flags &= -1025;
                        ij(Z.alternate, Z);
                        break;
                    case 4:
                        ij(Z.alternate, Z);
                        break;
                    case 8:
                        h = Z;
                        cj(g, h);
                        var J = h.alternate;
                        dj(h);
                        null !== J && dj(J);
                }
                Z = Z.nextEffect;
            }
        } catch (va) {
            if (null === Z) throw Error(y(330));
            Wi(Z, va);
            Z = Z.nextEffect;
        }
        while (null !== Z);
        v = lf;
        q = Ne();
        t = v.focusedElem;
        g = v.selectionRange;
        if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
            null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));
            q = [];
            for(v = t; v = v.parentNode;)1 === v.nodeType && q.push({
                element: v,
                left: v.scrollLeft,
                top: v.scrollTop
            });
            "function" === typeof t.focus && t.focus();
            for(t = 0; t < q.length; t++)v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
        }
        fd = !!kf;
        lf = kf = null;
        a.current = c;
        Z = d;
        do try {
            for(t = a; null !== Z;){
                var K = Z.flags;
                K & 36 && Yi(t, Z.alternate, Z);
                if (K & 128) {
                    q = void 0;
                    var Q = Z.ref;
                    if (null !== Q) {
                        var L = Z.stateNode;
                        switch(Z.tag){
                            case 5:
                                q = L;
                                break;
                            default:
                                q = L;
                        }
                        "function" === typeof Q ? Q(q) : Q.current = q;
                    }
                }
                Z = Z.nextEffect;
            }
        } catch (va) {
            if (null === Z) throw Error(y(330));
            Wi(Z, va);
            Z = Z.nextEffect;
        }
        while (null !== Z);
        Z = null;
        $f();
        X = e;
    } else a.current = c;
    if (xj) xj = !1, yj = a, zj = b;
    else for(Z = d; null !== Z;)b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;
    d = a.pendingLanes;
    0 === d && (Ti = null);
    1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;
    c = c.stateNode;
    if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {
        Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
    } catch (va) {}
    Mj(a, O());
    if (Qi) throw Qi = !1, a = Ri, Ri = null, a;
    if (0 !== (X & 8)) return null;
    ig();
    return null;
}
function ek() {
    for(; null !== Z;){
        var a = Z.alternate;
        Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));
        var b = Z.flags;
        0 !== (b & 256) && Xi(a, Z);
        0 === (b & 512) || xj || (xj = !0, hg(97, function() {
            Oj();
            return null;
        }));
        Z = Z.nextEffect;
    }
}
function Oj() {
    if (90 !== zj) {
        var a = 97 < zj ? 97 : zj;
        zj = 90;
        return gg(a, fk);
    }
    return !1;
}
function $i(a, b) {
    Aj.push(b, a);
    xj || (xj = !0, hg(97, function() {
        Oj();
        return null;
    }));
}
function Zi(a, b) {
    Bj.push(b, a);
    xj || (xj = !0, hg(97, function() {
        Oj();
        return null;
    }));
}
function fk() {
    if (null === yj) return !1;
    var a = yj;
    yj = null;
    if (0 !== (X & 48)) throw Error(y(331));
    var b = X;
    X |= 32;
    var c = Bj;
    Bj = [];
    for(var d = 0; d < c.length; d += 2){
        var e = c[d], f = c[d + 1], g = e.destroy;
        e.destroy = void 0;
        if ("function" === typeof g) try {
            g();
        } catch (k) {
            if (null === f) throw Error(y(330));
            Wi(f, k);
        }
    }
    c = Aj;
    Aj = [];
    for(d = 0; d < c.length; d += 2){
        e = c[d];
        f = c[d + 1];
        try {
            var h = e.create;
            e.destroy = h();
        } catch (k) {
            if (null === f) throw Error(y(330));
            Wi(f, k);
        }
    }
    for(h = a.current.firstEffect; null !== h;)a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;
    X = b;
    ig();
    return !0;
}
function gk(a, b, c) {
    b = Mi(c, b);
    b = Pi(a, b, 1);
    Ag(a, b);
    b = Hg();
    a = Kj(a, 1);
    null !== a && ($c(a, 1, b), Mj(a, b));
}
function Wi(a, b) {
    if (3 === a.tag) gk(a, a, b);
    else for(var c = a.return; null !== c;){
        if (3 === c.tag) {
            gk(c, a, b);
            break;
        } else if (1 === c.tag) {
            var d = c.stateNode;
            if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {
                a = Mi(b, a);
                var e = Si(c, a, 1);
                Ag(c, e);
                e = Hg();
                c = Kj(c, 1);
                if (null !== c) $c(c, 1, e), Mj(c, e);
                else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {
                    d.componentDidCatch(b, a);
                } catch (f) {}
                break;
            }
        }
        c = c.return;
    }
}
function Yj(a, b, c) {
    var d = a.pingCache;
    null !== d && d.delete(b);
    b = Hg();
    a.pingedLanes |= a.suspendedLanes & c;
    U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);
    Mj(a, b);
}
function lj(a, b) {
    var c = a.stateNode;
    null !== c && c.delete(b);
    b = 0;
    0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));
    c = Hg();
    a = Kj(a, b);
    null !== a && ($c(a, b, c), Mj(a, c));
}
var ck;
ck = function(a, b, c) {
    var d = b.lanes;
    if (null !== a) {
        if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;
        else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;
        else {
            ug = !1;
            switch(b.tag){
                case 3:
                    ri(b);
                    sh();
                    break;
                case 5:
                    gh(b);
                    break;
                case 1:
                    Ff(b.type) && Jf(b);
                    break;
                case 4:
                    eh(b, b.stateNode.containerInfo);
                    break;
                case 10:
                    d = b.memoizedProps.value;
                    var e = b.type._context;
                    I(mg, e._currentValue);
                    e._currentValue = d;
                    break;
                case 13:
                    if (null !== b.memoizedState) {
                        if (0 !== (c & b.child.childLanes)) return ti(a, b, c);
                        I(P, P.current & 1);
                        b = hi(a, b, c);
                        return null !== b ? b.sibling : null;
                    }
                    I(P, P.current & 1);
                    break;
                case 19:
                    d = 0 !== (c & b.childLanes);
                    if (0 !== (a.flags & 64)) {
                        if (d) return Ai(a, b, c);
                        b.flags |= 64;
                    }
                    e = b.memoizedState;
                    null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
                    I(P, P.current);
                    if (d) break;
                    else return null;
                case 23:
                case 24:
                    return b.lanes = 0, mi(a, b, c);
            }
            return hi(a, b, c);
        }
    } else ug = !1;
    b.lanes = 0;
    switch(b.tag){
        case 2:
            d = b.type;
            null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
            a = b.pendingProps;
            e = Ef(b, M.current);
            tg(b, c);
            e = Ch(null, b, d, a, e, c);
            b.flags |= 1;
            if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
                b.tag = 1;
                b.memoizedState = null;
                b.updateQueue = null;
                if (Ff(d)) {
                    var f = !0;
                    Jf(b);
                } else f = !1;
                b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
                xg(b);
                var g = d.getDerivedStateFromProps;
                "function" === typeof g && Gg(b, d, g, a);
                e.updater = Kg;
                b.stateNode = e;
                e._reactInternals = b;
                Og(b, d, a, c);
                b = qi(null, b, d, !0, f, c);
            } else b.tag = 0, fi(null, b, e, c), b = b.child;
            return b;
        case 16:
            e = b.elementType;
            a: {
                null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
                a = b.pendingProps;
                f = e._init;
                e = f(e._payload);
                b.type = e;
                f = b.tag = hk(e);
                a = lg(e, a);
                switch(f){
                    case 0:
                        b = li(null, b, e, a, c);
                        break a;
                    case 1:
                        b = pi(null, b, e, a, c);
                        break a;
                    case 11:
                        b = gi(null, b, e, a, c);
                        break a;
                    case 14:
                        b = ii(null, b, e, lg(e.type, a), d, c);
                        break a;
                }
                throw Error(y(306, e, ""));
            }
            return b;
        case 0:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);
        case 1:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);
        case 3:
            ri(b);
            d = b.updateQueue;
            if (null === a || null === d) throw Error(y(282));
            d = b.pendingProps;
            e = b.memoizedState;
            e = null !== e ? e.element : null;
            yg(a, b);
            Cg(b, d, null, c);
            d = b.memoizedState.element;
            if (d === e) sh(), b = hi(a, b, c);
            else {
                e = b.stateNode;
                if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;
                if (f) {
                    a = e.mutableSourceEagerHydrationData;
                    if (null != a) for(e = 0; e < a.length; e += 2)f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);
                    c = Zg(b, null, d, c);
                    for(b.child = c; c;)c.flags = c.flags & -3 | 1024, c = c.sibling;
                } else fi(a, b, d, c), sh();
                b = b.child;
            }
            return b;
        case 5:
            return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;
        case 6:
            return null === a && ph(b), null;
        case 13:
            return ti(a, b, c);
        case 4:
            return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;
        case 11:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);
        case 7:
            return fi(a, b, b.pendingProps, c), b.child;
        case 8:
            return fi(a, b, b.pendingProps.children, c), b.child;
        case 12:
            return fi(a, b, b.pendingProps.children, c), b.child;
        case 10:
            a: {
                d = b.type._context;
                e = b.pendingProps;
                g = b.memoizedProps;
                f = e.value;
                var h = b.type._context;
                I(mg, h._currentValue);
                h._currentValue = f;
                if (null !== g) {
                    if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
                        if (g.children === e.children && !N.current) {
                            b = hi(a, b, c);
                            break a;
                        }
                    } else for(h = b.child, null !== h && (h.return = b); null !== h;){
                        var k = h.dependencies;
                        if (null !== k) {
                            g = h.child;
                            for(var l = k.firstContext; null !== l;){
                                if (l.context === d && 0 !== (l.observedBits & f)) {
                                    1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));
                                    h.lanes |= c;
                                    l = h.alternate;
                                    null !== l && (l.lanes |= c);
                                    sg(h.return, c);
                                    k.lanes |= c;
                                    break;
                                }
                                l = l.next;
                            }
                        } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;
                        if (null !== g) g.return = h;
                        else for(g = h; null !== g;){
                            if (g === b) {
                                g = null;
                                break;
                            }
                            h = g.sibling;
                            if (null !== h) {
                                h.return = g.return;
                                g = h;
                                break;
                            }
                            g = g.return;
                        }
                        h = g;
                    }
                }
                fi(a, b, e.children, c);
                b = b.child;
            }
            return b;
        case 9:
            return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;
        case 14:
            return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);
        case 15:
            return ki(a, b, b.type, b.pendingProps, d, c);
        case 17:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);
        case 19:
            return Ai(a, b, c);
        case 23:
            return mi(a, b, c);
        case 24:
            return mi(a, b, c);
    }
    throw Error(y(156, b.tag));
};
function ik(a, b, c, d) {
    this.tag = a;
    this.key = c;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d;
    this.flags = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function nh(a, b, c, d) {
    return new ik(a, b, c, d);
}
function ji(a) {
    a = a.prototype;
    return !(!a || !a.isReactComponent);
}
function hk(a) {
    if ("function" === typeof a) return ji(a) ? 1 : 0;
    if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === Aa) return 11;
        if (a === Da) return 14;
    }
    return 2;
}
function Tg(a, b) {
    var c = a.alternate;
    null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
    c.childLanes = a.childLanes;
    c.lanes = a.lanes;
    c.child = a.child;
    c.memoizedProps = a.memoizedProps;
    c.memoizedState = a.memoizedState;
    c.updateQueue = a.updateQueue;
    b = a.dependencies;
    c.dependencies = null === b ? null : {
        lanes: b.lanes,
        firstContext: b.firstContext
    };
    c.sibling = a.sibling;
    c.index = a.index;
    c.ref = a.ref;
    return c;
}
function Vg(a, b, c, d, e, f) {
    var g = 2;
    d = a;
    if ("function" === typeof a) ji(a) && (g = 1);
    else if ("string" === typeof a) g = 5;
    else a: switch(a){
        case ua:
            return Xg(c.children, e, f, b);
        case Ha:
            g = 8;
            e |= 16;
            break;
        case wa:
            g = 8;
            e |= 1;
            break;
        case xa:
            return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;
        case Ba:
            return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;
        case Ca:
            return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;
        case Ia:
            return vi(c, e, f, b);
        case Ja:
            return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;
        default:
            if ("object" === typeof a && null !== a) switch(a.$$typeof){
                case ya:
                    g = 10;
                    break a;
                case za:
                    g = 9;
                    break a;
                case Aa:
                    g = 11;
                    break a;
                case Da:
                    g = 14;
                    break a;
                case Ea:
                    g = 16;
                    d = null;
                    break a;
                case Fa:
                    g = 22;
                    break a;
            }
            throw Error(y(130, null == a ? a : typeof a, ""));
    }
    b = nh(g, c, b, e);
    b.elementType = a;
    b.type = d;
    b.lanes = f;
    return b;
}
function Xg(a, b, c, d) {
    a = nh(7, a, d, b);
    a.lanes = c;
    return a;
}
function vi(a, b, c, d) {
    a = nh(23, a, d, b);
    a.elementType = Ia;
    a.lanes = c;
    return a;
}
function Ug(a, b, c) {
    a = nh(6, a, null, b);
    a.lanes = c;
    return a;
}
function Wg(a, b, c) {
    b = nh(4, null !== a.children ? a.children : [], a.key, b);
    b.lanes = c;
    b.stateNode = {
        containerInfo: a.containerInfo,
        pendingChildren: null,
        implementation: a.implementation
    };
    return b;
}
function jk(a, b, c) {
    this.tag = b;
    this.containerInfo = a;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = c;
    this.callbackNode = null;
    this.callbackPriority = 0;
    this.eventTimes = Zc(0);
    this.expirationTimes = Zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = Zc(0);
    this.mutableSourceEagerHydrationData = null;
}
function kk(a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: ta,
        key: null == d ? null : "" + d,
        children: a,
        containerInfo: b,
        implementation: c
    };
}
function lk(a, b, c, d) {
    var e = b.current, f = Hg(), g = Ig(e);
    a: if (c) {
        c = c._reactInternals;
        b: {
            if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));
            var h = c;
            do {
                switch(h.tag){
                    case 3:
                        h = h.stateNode.context;
                        break b;
                    case 1:
                        if (Ff(h.type)) {
                            h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                            break b;
                        }
                }
                h = h.return;
            }while (null !== h);
            throw Error(y(171));
        }
        if (1 === c.tag) {
            var k = c.type;
            if (Ff(k)) {
                c = If(c, k, h);
                break a;
            }
        }
        c = h;
    } else c = Cf;
    null === b.context ? b.context = c : b.pendingContext = c;
    b = zg(f, g);
    b.payload = {
        element: a
    };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    Ag(e, b);
    Jg(e, g, f);
    return g;
}
function mk(a) {
    a = a.current;
    if (!a.child) return null;
    switch(a.child.tag){
        case 5:
            return a.child.stateNode;
        default:
            return a.child.stateNode;
    }
}
function nk(a, b) {
    a = a.memoizedState;
    if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b ? c : b;
    }
}
function ok(a, b) {
    nk(a, b);
    (a = a.alternate) && nk(a, b);
}
function pk() {
    return null;
}
function qk(a, b, c) {
    var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;
    c = new jk(a, b, null != c && !0 === c.hydrate);
    b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
    c.current = b;
    b.stateNode = c;
    xg(b);
    a[ff] = c.current;
    cf(8 === a.nodeType ? a.parentNode : a);
    if (d) for(a = 0; a < d.length; a++){
        b = d[a];
        var e = b._getVersion;
        e = e(b._source);
        null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [
            b,
            e
        ] : c.mutableSourceEagerHydrationData.push(b, e);
    }
    this._internalRoot = c;
}
qk.prototype.render = function(a) {
    lk(a, this._internalRoot, null, null);
};
qk.prototype.unmount = function() {
    var a = this._internalRoot, b = a.containerInfo;
    lk(null, a, null, function() {
        b[ff] = null;
    });
};
function rk(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function sk(a, b) {
    b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
    if (!b) for(var c; c = a.lastChild;)a.removeChild(c);
    return new qk(a, 0, b ? {
        hydrate: !0
    } : void 0);
}
function tk(a, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
        var g = f._internalRoot;
        if ("function" === typeof e) {
            var h = e;
            e = function() {
                var a = mk(g);
                h.call(a);
            };
        }
        lk(b, g, a, e);
    } else {
        f = c._reactRootContainer = sk(c, d);
        g = f._internalRoot;
        if ("function" === typeof e) {
            var k = e;
            e = function() {
                var a = mk(g);
                k.call(a);
            };
        }
        Xj(function() {
            lk(b, g, a, e);
        });
    }
    return mk(g);
}
ec = function(a) {
    if (13 === a.tag) {
        var b = Hg();
        Jg(a, 4, b);
        ok(a, 4);
    }
};
fc = function(a) {
    if (13 === a.tag) {
        var b = Hg();
        Jg(a, 67108864, b);
        ok(a, 67108864);
    }
};
gc = function(a) {
    if (13 === a.tag) {
        var b = Hg(), c = Ig(a);
        Jg(a, c, b);
        ok(a, c);
    }
};
hc = function(a, b) {
    return b();
};
yb = function(a, b, c) {
    switch(b){
        case "input":
            ab(a, c);
            b = c.name;
            if ("radio" === c.type && null != b) {
                for(c = a; c.parentNode;)c = c.parentNode;
                c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
                for(b = 0; b < c.length; b++){
                    var d = c[b];
                    if (d !== a && d.form === a.form) {
                        var e = Db(d);
                        if (!e) throw Error(y(90));
                        Wa(d);
                        ab(d, e);
                    }
                }
            }
            break;
        case "textarea":
            ib(a, c);
            break;
        case "select":
            b = c.value, null != b && fb(a, !!c.multiple, b, !1);
    }
};
Gb = Wj;
Hb = function(a, b, c, d, e) {
    var f = X;
    X |= 4;
    try {
        return gg(98, a.bind(null, b, c, d, e));
    } finally{
        X = f, 0 === X && (wj(), ig());
    }
};
Ib = function() {
    0 === (X & 49) && (Vj(), Oj());
};
Jb = function(a, b) {
    var c = X;
    X |= 2;
    try {
        return a(b);
    } finally{
        X = c, 0 === X && (wj(), ig());
    }
};
function uk(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!rk(b)) throw Error(y(200));
    return kk(a, b, null, c);
}
var vk = {
    Events: [
        Cb,
        ue,
        Db,
        Eb,
        Fb,
        Oj,
        {
            current: !1
        }
    ]
}, wk = {
    findFiberByHostInstance: wc,
    bundleType: 0,
    version: "17.0.2",
    rendererPackageName: "react-dom"
};
var xk = {
    bundleType: wk.bundleType,
    version: wk.version,
    rendererPackageName: wk.rendererPackageName,
    rendererConfig: wk.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ra.ReactCurrentDispatcher,
    findHostInstanceByFiber: function(a) {
        a = cc(a);
        return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: wk.findFiberByHostInstance || pk,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null
};
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!yk.isDisabled && yk.supportsFiber) try {
        Lf = yk.inject(xk), Mf = yk;
    } catch (a) {}
}
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
exports.createPortal = uk;
exports.findDOMNode = function(a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternals;
    if (void 0 === b) {
        if ("function" === typeof a.render) throw Error(y(188));
        throw Error(y(268, Object.keys(a)));
    }
    a = cc(b);
    a = null === a ? null : a.stateNode;
    return a;
};
exports.flushSync = function(a, b) {
    var c = X;
    if (0 !== (c & 48)) return a(b);
    X |= 1;
    try {
        if (a) return gg(99, a.bind(null, b));
    } finally{
        X = c, ig();
    }
};
exports.hydrate = function(a, b, c) {
    if (!rk(b)) throw Error(y(200));
    return tk(null, a, b, !0, c);
};
exports.render = function(a, b, c) {
    if (!rk(b)) throw Error(y(200));
    return tk(null, a, b, !1, c);
};
exports.unmountComponentAtNode = function(a) {
    if (!rk(a)) throw Error(y(40));
    return a._reactRootContainer ? (Xj(function() {
        tk(null, null, a, !1, function() {
            a._reactRootContainer = null;
            a[ff] = null;
        });
    }), !0) : !1;
};
exports.unstable_batchedUpdates = Wj;
exports.unstable_createPortal = function(a, b) {
    return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
    if (!rk(c)) throw Error(y(200));
    if (null == a || void 0 === a._reactInternals) throw Error(y(38));
    return tk(a, b, c, !1, d);
};
exports.version = "17.0.2";

});
parcelRegister("iFoNg", function(module, exports) {
"use strict";

module.exports = (parcelRequire("7VFnr"));

});
parcelRegister("7VFnr", function(module, exports) {

$parcel$export(module.exports, "unstable_now", () => $5c5df3e083288ef0$export$c4744153514ff05d, (v) => $5c5df3e083288ef0$export$c4744153514ff05d = v);
$parcel$export(module.exports, "unstable_shouldYield", () => $5c5df3e083288ef0$export$b5836b71941fa3ed, (v) => $5c5df3e083288ef0$export$b5836b71941fa3ed = v);
$parcel$export(module.exports, "unstable_forceFrameRate", () => $5c5df3e083288ef0$export$d66a1c1c77bd778b, (v) => $5c5df3e083288ef0$export$d66a1c1c77bd778b = v);
$parcel$export(module.exports, "unstable_IdlePriority", () => $5c5df3e083288ef0$export$3e506c1ccc9cc1a7, (v) => $5c5df3e083288ef0$export$3e506c1ccc9cc1a7 = v);
$parcel$export(module.exports, "unstable_ImmediatePriority", () => $5c5df3e083288ef0$export$e26fe2ed2fa76875, (v) => $5c5df3e083288ef0$export$e26fe2ed2fa76875 = v);
$parcel$export(module.exports, "unstable_LowPriority", () => $5c5df3e083288ef0$export$502329bbf4b505b1, (v) => $5c5df3e083288ef0$export$502329bbf4b505b1 = v);
$parcel$export(module.exports, "unstable_NormalPriority", () => $5c5df3e083288ef0$export$6e3807111c4874c4, (v) => $5c5df3e083288ef0$export$6e3807111c4874c4 = v);
$parcel$export(module.exports, "unstable_Profiling", () => $5c5df3e083288ef0$export$c27134553091fb3a, (v) => $5c5df3e083288ef0$export$c27134553091fb3a = v);
$parcel$export(module.exports, "unstable_UserBlockingPriority", () => $5c5df3e083288ef0$export$33ee1acdc04fd2a2, (v) => $5c5df3e083288ef0$export$33ee1acdc04fd2a2 = v);
$parcel$export(module.exports, "unstable_cancelCallback", () => $5c5df3e083288ef0$export$b00a404bbd5edef2, (v) => $5c5df3e083288ef0$export$b00a404bbd5edef2 = v);
$parcel$export(module.exports, "unstable_continueExecution", () => $5c5df3e083288ef0$export$8352ce38b91d0c62, (v) => $5c5df3e083288ef0$export$8352ce38b91d0c62 = v);
$parcel$export(module.exports, "unstable_getCurrentPriorityLevel", () => $5c5df3e083288ef0$export$d3dfb8e4810cb555, (v) => $5c5df3e083288ef0$export$d3dfb8e4810cb555 = v);
$parcel$export(module.exports, "unstable_getFirstCallbackNode", () => $5c5df3e083288ef0$export$839f9183b0465a69, (v) => $5c5df3e083288ef0$export$839f9183b0465a69 = v);
$parcel$export(module.exports, "unstable_next", () => $5c5df3e083288ef0$export$72fdf0e06517287b, (v) => $5c5df3e083288ef0$export$72fdf0e06517287b = v);
$parcel$export(module.exports, "unstable_pauseExecution", () => $5c5df3e083288ef0$export$4b844e58a3e414b4, (v) => $5c5df3e083288ef0$export$4b844e58a3e414b4 = v);
$parcel$export(module.exports, "unstable_requestPaint", () => $5c5df3e083288ef0$export$816d2913ae6b83b1, (v) => $5c5df3e083288ef0$export$816d2913ae6b83b1 = v);
$parcel$export(module.exports, "unstable_runWithPriority", () => $5c5df3e083288ef0$export$61bcfe829111a1d0, (v) => $5c5df3e083288ef0$export$61bcfe829111a1d0 = v);
$parcel$export(module.exports, "unstable_scheduleCallback", () => $5c5df3e083288ef0$export$7ee8c9beb337bc3f, (v) => $5c5df3e083288ef0$export$7ee8c9beb337bc3f = v);
$parcel$export(module.exports, "unstable_wrapCallback", () => $5c5df3e083288ef0$export$cf845f2c119da08a, (v) => $5c5df3e083288ef0$export$cf845f2c119da08a = v);
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $5c5df3e083288ef0$export$c4744153514ff05d;
var $5c5df3e083288ef0$export$b5836b71941fa3ed;
var $5c5df3e083288ef0$export$d66a1c1c77bd778b;
var $5c5df3e083288ef0$export$3e506c1ccc9cc1a7;
var $5c5df3e083288ef0$export$e26fe2ed2fa76875;
var $5c5df3e083288ef0$export$502329bbf4b505b1;
var $5c5df3e083288ef0$export$6e3807111c4874c4;
var $5c5df3e083288ef0$export$c27134553091fb3a;
var $5c5df3e083288ef0$export$33ee1acdc04fd2a2;
var $5c5df3e083288ef0$export$b00a404bbd5edef2;
var $5c5df3e083288ef0$export$8352ce38b91d0c62;
var $5c5df3e083288ef0$export$d3dfb8e4810cb555;
var $5c5df3e083288ef0$export$839f9183b0465a69;
var $5c5df3e083288ef0$export$72fdf0e06517287b;
var $5c5df3e083288ef0$export$4b844e58a3e414b4;
var $5c5df3e083288ef0$export$816d2913ae6b83b1;
var $5c5df3e083288ef0$export$61bcfe829111a1d0;
var $5c5df3e083288ef0$export$7ee8c9beb337bc3f;
var $5c5df3e083288ef0$export$cf845f2c119da08a;
"use strict";
var $5c5df3e083288ef0$var$f, $5c5df3e083288ef0$var$g, $5c5df3e083288ef0$var$h, $5c5df3e083288ef0$var$k;
if ("object" === typeof performance && "function" === typeof performance.now) {
    var $5c5df3e083288ef0$var$l = performance;
    $5c5df3e083288ef0$export$c4744153514ff05d = function() {
        return $5c5df3e083288ef0$var$l.now();
    };
} else {
    var $5c5df3e083288ef0$var$p = Date, $5c5df3e083288ef0$var$q = $5c5df3e083288ef0$var$p.now();
    $5c5df3e083288ef0$export$c4744153514ff05d = function() {
        return $5c5df3e083288ef0$var$p.now() - $5c5df3e083288ef0$var$q;
    };
}
if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var $5c5df3e083288ef0$var$t = null, $5c5df3e083288ef0$var$u = null, $5c5df3e083288ef0$var$w = function() {
        if (null !== $5c5df3e083288ef0$var$t) try {
            var a = $5c5df3e083288ef0$export$c4744153514ff05d();
            $5c5df3e083288ef0$var$t(!0, a);
            $5c5df3e083288ef0$var$t = null;
        } catch (b) {
            throw setTimeout($5c5df3e083288ef0$var$w, 0), b;
        }
    };
    $5c5df3e083288ef0$var$f = function(a) {
        null !== $5c5df3e083288ef0$var$t ? setTimeout($5c5df3e083288ef0$var$f, 0, a) : ($5c5df3e083288ef0$var$t = a, setTimeout($5c5df3e083288ef0$var$w, 0));
    };
    $5c5df3e083288ef0$var$g = function(a, b) {
        $5c5df3e083288ef0$var$u = setTimeout(a, b);
    };
    $5c5df3e083288ef0$var$h = function() {
        clearTimeout($5c5df3e083288ef0$var$u);
    };
    $5c5df3e083288ef0$export$b5836b71941fa3ed = function() {
        return !1;
    };
    $5c5df3e083288ef0$var$k = $5c5df3e083288ef0$export$d66a1c1c77bd778b = function() {};
} else {
    var $5c5df3e083288ef0$var$x = window.setTimeout, $5c5df3e083288ef0$var$y = window.clearTimeout;
    if ("undefined" !== typeof console) {
        var $5c5df3e083288ef0$var$z = window.cancelAnimationFrame;
        "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        "function" !== typeof $5c5df3e083288ef0$var$z && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    }
    var $5c5df3e083288ef0$var$A = !1, $5c5df3e083288ef0$var$B = null, $5c5df3e083288ef0$var$C = -1, $5c5df3e083288ef0$var$D = 5, $5c5df3e083288ef0$var$E = 0;
    $5c5df3e083288ef0$export$b5836b71941fa3ed = function() {
        return $5c5df3e083288ef0$export$c4744153514ff05d() >= $5c5df3e083288ef0$var$E;
    };
    $5c5df3e083288ef0$var$k = function() {};
    $5c5df3e083288ef0$export$d66a1c1c77bd778b = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : $5c5df3e083288ef0$var$D = 0 < a ? Math.floor(1E3 / a) : 5;
    };
    var $5c5df3e083288ef0$var$F = new MessageChannel, $5c5df3e083288ef0$var$G = $5c5df3e083288ef0$var$F.port2;
    $5c5df3e083288ef0$var$F.port1.onmessage = function() {
        if (null !== $5c5df3e083288ef0$var$B) {
            var a = $5c5df3e083288ef0$export$c4744153514ff05d();
            $5c5df3e083288ef0$var$E = a + $5c5df3e083288ef0$var$D;
            try {
                $5c5df3e083288ef0$var$B(!0, a) ? $5c5df3e083288ef0$var$G.postMessage(null) : ($5c5df3e083288ef0$var$A = !1, $5c5df3e083288ef0$var$B = null);
            } catch (b) {
                throw $5c5df3e083288ef0$var$G.postMessage(null), b;
            }
        } else $5c5df3e083288ef0$var$A = !1;
    };
    $5c5df3e083288ef0$var$f = function(a) {
        $5c5df3e083288ef0$var$B = a;
        $5c5df3e083288ef0$var$A || ($5c5df3e083288ef0$var$A = !0, $5c5df3e083288ef0$var$G.postMessage(null));
    };
    $5c5df3e083288ef0$var$g = function(a, b) {
        $5c5df3e083288ef0$var$C = $5c5df3e083288ef0$var$x(function() {
            a($5c5df3e083288ef0$export$c4744153514ff05d());
        }, b);
    };
    $5c5df3e083288ef0$var$h = function() {
        $5c5df3e083288ef0$var$y($5c5df3e083288ef0$var$C);
        $5c5df3e083288ef0$var$C = -1;
    };
}
function $5c5df3e083288ef0$var$H(a, b) {
    var c = a.length;
    a.push(b);
    a: for(;;){
        var d = c - 1 >>> 1, e = a[d];
        if (void 0 !== e && 0 < $5c5df3e083288ef0$var$I(e, b)) a[d] = b, a[c] = e, c = d;
        else break a;
    }
}
function $5c5df3e083288ef0$var$J(a) {
    a = a[0];
    return void 0 === a ? null : a;
}
function $5c5df3e083288ef0$var$K(a) {
    var b = a[0];
    if (void 0 !== b) {
        var c = a.pop();
        if (c !== b) {
            a[0] = c;
            a: for(var d = 0, e = a.length; d < e;){
                var m = 2 * (d + 1) - 1, n = a[m], v = m + 1, r = a[v];
                if (void 0 !== n && 0 > $5c5df3e083288ef0$var$I(n, c)) void 0 !== r && 0 > $5c5df3e083288ef0$var$I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);
                else if (void 0 !== r && 0 > $5c5df3e083288ef0$var$I(r, c)) a[d] = r, a[v] = c, d = v;
                else break a;
            }
        }
        return b;
    }
    return null;
}
function $5c5df3e083288ef0$var$I(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
}
var $5c5df3e083288ef0$var$L = [], $5c5df3e083288ef0$var$M = [], $5c5df3e083288ef0$var$N = 1, $5c5df3e083288ef0$var$O = null, $5c5df3e083288ef0$var$P = 3, $5c5df3e083288ef0$var$Q = !1, $5c5df3e083288ef0$var$R = !1, $5c5df3e083288ef0$var$S = !1;
function $5c5df3e083288ef0$var$T(a) {
    for(var b = $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$M); null !== b;){
        if (null === b.callback) $5c5df3e083288ef0$var$K($5c5df3e083288ef0$var$M);
        else if (b.startTime <= a) $5c5df3e083288ef0$var$K($5c5df3e083288ef0$var$M), b.sortIndex = b.expirationTime, $5c5df3e083288ef0$var$H($5c5df3e083288ef0$var$L, b);
        else break;
        b = $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$M);
    }
}
function $5c5df3e083288ef0$var$U(a) {
    $5c5df3e083288ef0$var$S = !1;
    $5c5df3e083288ef0$var$T(a);
    if (!$5c5df3e083288ef0$var$R) {
        if (null !== $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$L)) $5c5df3e083288ef0$var$R = !0, $5c5df3e083288ef0$var$f($5c5df3e083288ef0$var$V);
        else {
            var b = $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$M);
            null !== b && $5c5df3e083288ef0$var$g($5c5df3e083288ef0$var$U, b.startTime - a);
        }
    }
}
function $5c5df3e083288ef0$var$V(a, b) {
    $5c5df3e083288ef0$var$R = !1;
    $5c5df3e083288ef0$var$S && ($5c5df3e083288ef0$var$S = !1, $5c5df3e083288ef0$var$h());
    $5c5df3e083288ef0$var$Q = !0;
    var c = $5c5df3e083288ef0$var$P;
    try {
        $5c5df3e083288ef0$var$T(b);
        for($5c5df3e083288ef0$var$O = $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$L); null !== $5c5df3e083288ef0$var$O && (!($5c5df3e083288ef0$var$O.expirationTime > b) || a && !$5c5df3e083288ef0$export$b5836b71941fa3ed());){
            var d = $5c5df3e083288ef0$var$O.callback;
            if ("function" === typeof d) {
                $5c5df3e083288ef0$var$O.callback = null;
                $5c5df3e083288ef0$var$P = $5c5df3e083288ef0$var$O.priorityLevel;
                var e = d($5c5df3e083288ef0$var$O.expirationTime <= b);
                b = $5c5df3e083288ef0$export$c4744153514ff05d();
                "function" === typeof e ? $5c5df3e083288ef0$var$O.callback = e : $5c5df3e083288ef0$var$O === $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$L) && $5c5df3e083288ef0$var$K($5c5df3e083288ef0$var$L);
                $5c5df3e083288ef0$var$T(b);
            } else $5c5df3e083288ef0$var$K($5c5df3e083288ef0$var$L);
            $5c5df3e083288ef0$var$O = $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$L);
        }
        if (null !== $5c5df3e083288ef0$var$O) var m = !0;
        else {
            var n = $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$M);
            null !== n && $5c5df3e083288ef0$var$g($5c5df3e083288ef0$var$U, n.startTime - b);
            m = !1;
        }
        return m;
    } finally{
        $5c5df3e083288ef0$var$O = null, $5c5df3e083288ef0$var$P = c, $5c5df3e083288ef0$var$Q = !1;
    }
}
var $5c5df3e083288ef0$var$W = $5c5df3e083288ef0$var$k;
$5c5df3e083288ef0$export$3e506c1ccc9cc1a7 = 5;
$5c5df3e083288ef0$export$e26fe2ed2fa76875 = 1;
$5c5df3e083288ef0$export$502329bbf4b505b1 = 4;
$5c5df3e083288ef0$export$6e3807111c4874c4 = 3;
$5c5df3e083288ef0$export$c27134553091fb3a = null;
$5c5df3e083288ef0$export$33ee1acdc04fd2a2 = 2;
$5c5df3e083288ef0$export$b00a404bbd5edef2 = function(a) {
    a.callback = null;
};
$5c5df3e083288ef0$export$8352ce38b91d0c62 = function() {
    $5c5df3e083288ef0$var$R || $5c5df3e083288ef0$var$Q || ($5c5df3e083288ef0$var$R = !0, $5c5df3e083288ef0$var$f($5c5df3e083288ef0$var$V));
};
$5c5df3e083288ef0$export$d3dfb8e4810cb555 = function() {
    return $5c5df3e083288ef0$var$P;
};
$5c5df3e083288ef0$export$839f9183b0465a69 = function() {
    return $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$L);
};
$5c5df3e083288ef0$export$72fdf0e06517287b = function(a) {
    switch($5c5df3e083288ef0$var$P){
        case 1:
        case 2:
        case 3:
            var b = 3;
            break;
        default:
            b = $5c5df3e083288ef0$var$P;
    }
    var c = $5c5df3e083288ef0$var$P;
    $5c5df3e083288ef0$var$P = b;
    try {
        return a();
    } finally{
        $5c5df3e083288ef0$var$P = c;
    }
};
$5c5df3e083288ef0$export$4b844e58a3e414b4 = function() {};
$5c5df3e083288ef0$export$816d2913ae6b83b1 = $5c5df3e083288ef0$var$W;
$5c5df3e083288ef0$export$61bcfe829111a1d0 = function(a, b) {
    switch(a){
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            break;
        default:
            a = 3;
    }
    var c = $5c5df3e083288ef0$var$P;
    $5c5df3e083288ef0$var$P = a;
    try {
        return b();
    } finally{
        $5c5df3e083288ef0$var$P = c;
    }
};
$5c5df3e083288ef0$export$7ee8c9beb337bc3f = function(a, b, c) {
    var d = $5c5df3e083288ef0$export$c4744153514ff05d();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
    switch(a){
        case 1:
            var e = -1;
            break;
        case 2:
            e = 250;
            break;
        case 5:
            e = 1073741823;
            break;
        case 4:
            e = 1E4;
            break;
        default:
            e = 5E3;
    }
    e = c + e;
    a = {
        id: $5c5df3e083288ef0$var$N++,
        callback: b,
        priorityLevel: a,
        startTime: c,
        expirationTime: e,
        sortIndex: -1
    };
    c > d ? (a.sortIndex = c, $5c5df3e083288ef0$var$H($5c5df3e083288ef0$var$M, a), null === $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$L) && a === $5c5df3e083288ef0$var$J($5c5df3e083288ef0$var$M) && ($5c5df3e083288ef0$var$S ? $5c5df3e083288ef0$var$h() : $5c5df3e083288ef0$var$S = !0, $5c5df3e083288ef0$var$g($5c5df3e083288ef0$var$U, c - d))) : (a.sortIndex = e, $5c5df3e083288ef0$var$H($5c5df3e083288ef0$var$L, a), $5c5df3e083288ef0$var$R || $5c5df3e083288ef0$var$Q || ($5c5df3e083288ef0$var$R = !0, $5c5df3e083288ef0$var$f($5c5df3e083288ef0$var$V)));
    return a;
};
$5c5df3e083288ef0$export$cf845f2c119da08a = function(a) {
    var b = $5c5df3e083288ef0$var$P;
    return function() {
        var c = $5c5df3e083288ef0$var$P;
        $5c5df3e083288ef0$var$P = b;
        try {
            return a.apply(this, arguments);
        } finally{
            $5c5df3e083288ef0$var$P = c;
        }
    };
};

});



parcelRegister("c0nCP", function(module, exports) {

$parcel$export(module.exports, "FILINGS_BY_ZIP", () => $8bd7cf9b3b762f33$export$7e93796430feb5c0);
$parcel$export(module.exports, "FILINGS_BY_ZIP_EMPTY_ROW", () => $8bd7cf9b3b762f33$export$28240a552815b731);

var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $8bd7cf9b3b762f33$export$7e93796430feb5c0 = new (0, $ezVNZ.QueryFiles)(`filings-by-zip-since-0323`);
const $8bd7cf9b3b762f33$export$28240a552815b731 = {
    zipcode: "",
    filings_since_032320: 0,
    unitsres_total: null,
    unitsrental: null,
    filingsrate_2plus: null
};
function $8bd7cf9b3b762f33$export$d17b99d57204e704(row) {
    return {
        zipcode: (0, $dQEow.ensureString)(row.zipcode),
        filings_since_032320: (0, $dQEow.toInt)(row.filings_since_032320),
        unitsres_total: (0, $dQEow.toIntOrNull)(row.unitsres_total),
        unitsrental: (0, $dQEow.toIntOrNull)(row.unitsrental),
        filingsrate_2plus: (0, $dQEow.toIntOrNull)(row.filingsrate_2plus)
    };
}
function $8bd7cf9b3b762f33$var$getCsvHeader() {
    return [
        "zipcode",
        "filings_since_032320",
        "unitsres_total",
        "unitsrental",
        "filingsrate_2plus"
    ];
}
function $8bd7cf9b3b762f33$var$toCsvRow(row) {
    var _a, _b, _c, _d, _e, _f;
    return [
        row.zipcode,
        row.filings_since_032320.toString(),
        (_b = (_a = row.unitsres_total) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "",
        (_d = (_c = row.unitsrental) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : "",
        (_f = (_e = row.filingsrate_2plus) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : ""
    ];
}
const $8bd7cf9b3b762f33$export$b8aeddae4449323c = {
    files: $8bd7cf9b3b762f33$export$7e93796430feb5c0,
    sqlToRow: $8bd7cf9b3b762f33$export$d17b99d57204e704,
    csvHeader: $8bd7cf9b3b762f33$var$getCsvHeader(),
    toCsvRow: $8bd7cf9b3b762f33$var$toCsvRow
};

});
parcelRegister("dQEow", function(module, exports) {

$parcel$export(module.exports, "toInt", () => $a14f7734f2e34947$export$e7a1baa2fae31f0f);
$parcel$export(module.exports, "toIntOrNull", () => $a14f7734f2e34947$export$964846aa1705486f);
$parcel$export(module.exports, "ensureString", () => $a14f7734f2e34947$export$eb1f29ffd28794ef);
/**
 * Convert the given value to an integer, throwing an error if
 * the conversion doesn't work.
 */ function $a14f7734f2e34947$export$e7a1baa2fae31f0f(value) {
    const result = parseInt(value);
    if (isNaN(result)) throw new Error(`"${value}" is not an integer!`);
    return result;
}
function $a14f7734f2e34947$export$964846aa1705486f(value) {
    if (value === null) return null;
    return $a14f7734f2e34947$export$e7a1baa2fae31f0f(value);
}
function $a14f7734f2e34947$export$eb1f29ffd28794ef(value) {
    if (typeof value !== "string") throw new Error(`"${value}" is not a string!`);
    return value;
}

});

parcelRegister("ezVNZ", function(module, exports) {

$parcel$export(module.exports, "QueryFiles", () => $a9d12c8173265d38$export$824f9f29f965d177);
class $a9d12c8173265d38$export$824f9f29f965d177 {
    constructor(baseName){
        this.baseName = baseName;
        this.sql = `${baseName}.sql`;
        this.json = `${baseName}.json`;
        this.csv = `${baseName}.csv`;
    }
}

});


parcelRegister("1WhnP", function(module, exports) {

$parcel$export(module.exports, "JsonLoader", () => $1698b1308a5cb37f$export$e9eab7f1ea8c35fe);

var $4rFIf = parcelRequire("4rFIf");
/**
 * Global singleton to cache all our data requests.
 */ const $1698b1308a5cb37f$var$requests = new Map();
function $1698b1308a5cb37f$var$getRequest(url) {
    let request = $1698b1308a5cb37f$var$requests.get(url);
    if (!request) {
        request = fetch(url).then((res)=>{
            if (!res.ok) throw new Error(`Got HTTP ${res.status} when fetching ${url}`);
            return res.json();
        });
        $1698b1308a5cb37f$var$requests.set(url, request);
    }
    return request;
}
function $1698b1308a5cb37f$export$e9eab7f1ea8c35fe(props) {
    const { url: url } = props;
    const [data, setData] = (0, $4rFIf.useState)(null);
    (0, $4rFIf.useEffect)(()=>{
        $1698b1308a5cb37f$var$getRequest(url).then((data)=>{
            setData(data);
        });
    }, [
        url
    ]);
    if (data === null) return props.fallback;
    return props.children(data);
}

});

parcelRegister("f5z94", function(module, exports) {

$parcel$export(module.exports, "LazyVegaLite", () => $afc295c15502bdeb$export$f45589858b9b86e1);

var $4rFIf = parcelRequire("4rFIf");

var $5ayhH = parcelRequire("5ayhH");

const $afc295c15502bdeb$var$VegaLite = /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).lazy(()=>Promise.resolve((parcelRequire("kcdlB"))));
const $afc295c15502bdeb$export$f45589858b9b86e1 = (props)=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $4rFIf.Suspense), {
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: props.className || ""
        })
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($afc295c15502bdeb$var$VegaLite, {
        ...props
    }));
};

});
parcelRegister("5ayhH", function(module, exports) {

$parcel$export(module.exports, "VIZ_GEO_CLASS", () => $3c387b1b9bc68a8d$export$5eee8eed53469a93);
$parcel$export(module.exports, "VIZ_TIME_SERIES_CLASS", () => $3c387b1b9bc68a8d$export$72a233fbaf3c11fa);
$parcel$export(module.exports, "VIZ_TIME_SERIES_SHORT_CLASS", () => $3c387b1b9bc68a8d$export$27f708d8640d8379);
$parcel$export(module.exports, "VIZ_TABLE_CLASS", () => $3c387b1b9bc68a8d$export$edebbe00f3891cda);
$parcel$export(module.exports, "VizFallback", () => $3c387b1b9bc68a8d$export$ed218860cf898ee0);

var $4rFIf = parcelRequire("4rFIf");
const $3c387b1b9bc68a8d$export$5eee8eed53469a93 = "viz-geo";
const $3c387b1b9bc68a8d$export$72a233fbaf3c11fa = "viz-time-series";
const $3c387b1b9bc68a8d$export$27f708d8640d8379 = "viz-time-series-short";
const $3c387b1b9bc68a8d$export$edebbe00f3891cda = "viz-table";
// https://commons.wikimedia.org/wiki/File:Chromiumthrobber.svg
const $3c387b1b9bc68a8d$var$ChromiumThrobber = ()=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("svg", {
        width: "16",
        height: "16",
        viewBox: "0 0 300 300",
        xmlns: "http://www.w3.org/2000/svg",
        version: "1.1"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("path", {
        d: "M 150,0\n            a 150,150 0 0,1 106.066,256.066\n            l -35.355,-35.355\n            a -100,-100 0 0,0 -70.711,-170.711 z",
        fill: "#000000"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("animateTransform", {
        attributeName: "transform",
        attributeType: "XML",
        type: "rotate",
        from: "0 150 150",
        to: "360 150 150",
        begin: "0s",
        dur: "1s",
        fill: "freeze",
        repeatCount: "indefinite"
    })));
const $3c387b1b9bc68a8d$export$ed218860cf898ee0 = ({ className: className })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
        className: `${className} loading`
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($3c387b1b9bc68a8d$var$ChromiumThrobber, null));

});

parcelRegister("kcdlB", function(module, exports) {

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "numberWithCommas", () => $eb3f4824226f1b52$export$a2db1876938cd11d);
$parcel$export(module.exports, "default", () => $eb3f4824226f1b52$export$2e2bcd8739ae039);

var $4rFIf = parcelRequire("4rFIf");

var $8ThLT = parcelRequire("8ThLT");
parcelRequire("h0YPc");
var $Us6QS = parcelRequire("Us6QS");
function $eb3f4824226f1b52$export$a2db1876938cd11d(x) {
    var parts = x.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
}
$Us6QS.expressionFunction("numberWithCommas", $eb3f4824226f1b52$export$a2db1876938cd11d);
const $eb3f4824226f1b52$var$VegaLite = ({ spec: spec, className: className })=>{
    const ref = (0, $4rFIf.useRef)(null);
    (0, $4rFIf.useEffect)(()=>{
        const { current: current } = ref;
        if (!current) throw new Error("Expected ref for Vega container to exist!");
        const embedResult = (0, $8ThLT.default)(current, spec, {
            actions: false
        });
        return ()=>{
            embedResult.then((result)=>result.finalize());
        };
    }, [
        spec
    ]);
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
        ref: ref,
        className: className
    });
};
var $eb3f4824226f1b52$export$2e2bcd8739ae039 = $eb3f4824226f1b52$var$VegaLite;

});
parcelRegister("8ThLT", function(module, exports) {

$parcel$export(module.exports, "default", () => $67913ed2dbf54bbc$export$2e2bcd8739ae039);
parcelRequire("hEBUe");
var $a2rjX = parcelRequire("a2rjX");

var $foI6V = parcelRequire("foI6V");
parcelRequire("h0YPc");
var $4SWbq = parcelRequire("4SWbq");
var $h0YPc = parcelRequire("h0YPc");

var $fUe3S = parcelRequire("fUe3S");

var $1DNFM = parcelRequire("1DNFM");

var $cBP4R = parcelRequire("cBP4R");

var $kzC9m = parcelRequire("kzC9m");

var $agM7j = parcelRequire("agM7j");

var $5Nx9l = parcelRequire("5Nx9l");
function $67913ed2dbf54bbc$var$_typeof(obj) {
    "@babel/helpers - typeof";
    return $67913ed2dbf54bbc$var$_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, $67913ed2dbf54bbc$var$_typeof(obj);
}
function $67913ed2dbf54bbc$var$_toPrimitive(input, hint) {
    if ($67913ed2dbf54bbc$var$_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if ($67913ed2dbf54bbc$var$_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function $67913ed2dbf54bbc$var$_toPropertyKey(arg) {
    var key = $67913ed2dbf54bbc$var$_toPrimitive(arg, "string");
    return $67913ed2dbf54bbc$var$_typeof(key) === "symbol" ? key : String(key);
}
function $67913ed2dbf54bbc$var$_defineProperty(obj, key, value) {
    key = $67913ed2dbf54bbc$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $67913ed2dbf54bbc$var$getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var $67913ed2dbf54bbc$var$iterator;
var $67913ed2dbf54bbc$var$hasRequiredIterator;
function $67913ed2dbf54bbc$var$requireIterator() {
    if ($67913ed2dbf54bbc$var$hasRequiredIterator) return $67913ed2dbf54bbc$var$iterator;
    $67913ed2dbf54bbc$var$hasRequiredIterator = 1;
    $67913ed2dbf54bbc$var$iterator = function(Yallist) {
        Yallist.prototype[Symbol.iterator] = function*() {
            for(let walker = this.head; walker; walker = walker.next)yield walker.value;
        };
    };
    return $67913ed2dbf54bbc$var$iterator;
}
var $67913ed2dbf54bbc$var$yallist = $67913ed2dbf54bbc$var$Yallist$1;
$67913ed2dbf54bbc$var$Yallist$1.Node = $67913ed2dbf54bbc$var$Node;
$67913ed2dbf54bbc$var$Yallist$1.create = $67913ed2dbf54bbc$var$Yallist$1;
function $67913ed2dbf54bbc$var$Yallist$1(list) {
    var self = this;
    if (!(self instanceof $67913ed2dbf54bbc$var$Yallist$1)) self = new $67913ed2dbf54bbc$var$Yallist$1();
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === "function") list.forEach(function(item) {
        self.push(item);
    });
    else if (arguments.length > 0) for(var i = 0, l = arguments.length; i < l; i++)self.push(arguments[i]);
    return self;
}
$67913ed2dbf54bbc$var$Yallist$1.prototype.removeNode = function(node) {
    if (node.list !== this) throw new Error("removing node which does not belong to this list");
    var next = node.next;
    var prev = node.prev;
    if (next) next.prev = prev;
    if (prev) prev.next = next;
    if (node === this.head) this.head = next;
    if (node === this.tail) this.tail = prev;
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.unshiftNode = function(node) {
    if (node === this.head) return;
    if (node.list) node.list.removeNode(node);
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) head.prev = node;
    this.head = node;
    if (!this.tail) this.tail = node;
    this.length++;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.pushNode = function(node) {
    if (node === this.tail) return;
    if (node.list) node.list.removeNode(node);
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) tail.next = node;
    this.tail = node;
    if (!this.head) this.head = node;
    this.length++;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.push = function() {
    for(var i = 0, l = arguments.length; i < l; i++)$67913ed2dbf54bbc$var$push(this, arguments[i]);
    return this.length;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.unshift = function() {
    for(var i = 0, l = arguments.length; i < l; i++)$67913ed2dbf54bbc$var$unshift(this, arguments[i]);
    return this.length;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.pop = function() {
    if (!this.tail) return undefined;
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) this.tail.next = null;
    else this.head = null;
    this.length--;
    return res;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.shift = function() {
    if (!this.head) return undefined;
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) this.head.prev = null;
    else this.tail = null;
    this.length--;
    return res;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.head, i = 0; walker !== null; i++){
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
    }
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
    }
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.get = function(n) {
    for(var i = 0, walker = this.head; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.next;
    if (i === n && walker !== null) return walker.value;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.getReverse = function(n) {
    for(var i = 0, walker = this.tail; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.prev;
    if (i === n && walker !== null) return walker.value;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new $67913ed2dbf54bbc$var$Yallist$1();
    for(var walker = this.head; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
    }
    return res;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new $67913ed2dbf54bbc$var$Yallist$1();
    for(var walker = this.tail; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
    }
    return res;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) acc = initial;
    else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = 0; walker !== null; i++){
        acc = fn(acc, walker.value, i);
        walker = walker.next;
    }
    return acc;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) acc = initial;
    else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = this.length - 1; walker !== null; i--){
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
    }
    return acc;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.toArray = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.head; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.next;
    }
    return arr;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.tail; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.prev;
    }
    return arr;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new $67913ed2dbf54bbc$var$Yallist$1();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = 0, walker = this.head; walker !== null && i < from; i++)walker = walker.next;
    for(; walker !== null && i < to; i++, walker = walker.next)ret.push(walker.value);
    return ret;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new $67913ed2dbf54bbc$var$Yallist$1();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--)walker = walker.prev;
    for(; walker !== null && i > from; i--, walker = walker.prev)ret.push(walker.value);
    return ret;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.splice = function(start, deleteCount, ...nodes) {
    if (start > this.length) start = this.length - 1;
    if (start < 0) start = this.length + start;
    for(var i = 0, walker = this.head; walker !== null && i < start; i++)walker = walker.next;
    var ret = [];
    for(var i = 0; walker && i < deleteCount; i++){
        ret.push(walker.value);
        walker = this.removeNode(walker);
    }
    if (walker === null) walker = this.tail;
    if (walker !== this.head && walker !== this.tail) walker = walker.prev;
    for(var i = 0; i < nodes.length; i++)walker = $67913ed2dbf54bbc$var$insert(this, walker, nodes[i]);
    return ret;
};
$67913ed2dbf54bbc$var$Yallist$1.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for(var walker = head; walker !== null; walker = walker.prev){
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
};
function $67913ed2dbf54bbc$var$insert(self, node, value) {
    var inserted = node === self.head ? new $67913ed2dbf54bbc$var$Node(value, null, node, self) : new $67913ed2dbf54bbc$var$Node(value, node, node.next, self);
    if (inserted.next === null) self.tail = inserted;
    if (inserted.prev === null) self.head = inserted;
    self.length++;
    return inserted;
}
function $67913ed2dbf54bbc$var$push(self, item) {
    self.tail = new $67913ed2dbf54bbc$var$Node(item, self.tail, null, self);
    if (!self.head) self.head = self.tail;
    self.length++;
}
function $67913ed2dbf54bbc$var$unshift(self, item) {
    self.head = new $67913ed2dbf54bbc$var$Node(item, null, self.head, self);
    if (!self.tail) self.tail = self.head;
    self.length++;
}
function $67913ed2dbf54bbc$var$Node(value, prev, next, list) {
    if (!(this instanceof $67913ed2dbf54bbc$var$Node)) return new $67913ed2dbf54bbc$var$Node(value, prev, next, list);
    this.list = list;
    this.value = value;
    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else this.prev = null;
    if (next) {
        next.prev = this;
        this.next = next;
    } else this.next = null;
}
try {
    // add if support for Symbol.iterator is present
    $67913ed2dbf54bbc$var$requireIterator()($67913ed2dbf54bbc$var$Yallist$1);
} catch (er) {}
// A linked list to keep track of recently-used-ness
const $67913ed2dbf54bbc$var$Yallist = $67913ed2dbf54bbc$var$yallist;
const $67913ed2dbf54bbc$var$MAX = Symbol("max");
const $67913ed2dbf54bbc$var$LENGTH = Symbol("length");
const $67913ed2dbf54bbc$var$LENGTH_CALCULATOR = Symbol("lengthCalculator");
const $67913ed2dbf54bbc$var$ALLOW_STALE = Symbol("allowStale");
const $67913ed2dbf54bbc$var$MAX_AGE = Symbol("maxAge");
const $67913ed2dbf54bbc$var$DISPOSE = Symbol("dispose");
const $67913ed2dbf54bbc$var$NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
const $67913ed2dbf54bbc$var$LRU_LIST = Symbol("lruList");
const $67913ed2dbf54bbc$var$CACHE = Symbol("cache");
const $67913ed2dbf54bbc$var$UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
const $67913ed2dbf54bbc$var$naiveLength = ()=>1;
// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class $67913ed2dbf54bbc$var$LRUCache {
    constructor(options){
        if (typeof options === "number") options = {
            max: options
        };
        if (!options) options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
        // Kind of weird to have a default max of Infinity, but oh well.
        this[$67913ed2dbf54bbc$var$MAX] = options.max || Infinity;
        const lc = options.length || $67913ed2dbf54bbc$var$naiveLength;
        this[$67913ed2dbf54bbc$var$LENGTH_CALCULATOR] = typeof lc !== "function" ? $67913ed2dbf54bbc$var$naiveLength : lc;
        this[$67913ed2dbf54bbc$var$ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
        this[$67913ed2dbf54bbc$var$MAX_AGE] = options.maxAge || 0;
        this[$67913ed2dbf54bbc$var$DISPOSE] = options.dispose;
        this[$67913ed2dbf54bbc$var$NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[$67913ed2dbf54bbc$var$UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
        if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");
        this[$67913ed2dbf54bbc$var$MAX] = mL || Infinity;
        $67913ed2dbf54bbc$var$trim(this);
    }
    get max() {
        return this[$67913ed2dbf54bbc$var$MAX];
    }
    set allowStale(allowStale) {
        this[$67913ed2dbf54bbc$var$ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
        return this[$67913ed2dbf54bbc$var$ALLOW_STALE];
    }
    set maxAge(mA) {
        if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");
        this[$67913ed2dbf54bbc$var$MAX_AGE] = mA;
        $67913ed2dbf54bbc$var$trim(this);
    }
    get maxAge() {
        return this[$67913ed2dbf54bbc$var$MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
        if (typeof lC !== "function") lC = $67913ed2dbf54bbc$var$naiveLength;
        if (lC !== this[$67913ed2dbf54bbc$var$LENGTH_CALCULATOR]) {
            this[$67913ed2dbf54bbc$var$LENGTH_CALCULATOR] = lC;
            this[$67913ed2dbf54bbc$var$LENGTH] = 0;
            this[$67913ed2dbf54bbc$var$LRU_LIST].forEach((hit)=>{
                hit.length = this[$67913ed2dbf54bbc$var$LENGTH_CALCULATOR](hit.value, hit.key);
                this[$67913ed2dbf54bbc$var$LENGTH] += hit.length;
            });
        }
        $67913ed2dbf54bbc$var$trim(this);
    }
    get lengthCalculator() {
        return this[$67913ed2dbf54bbc$var$LENGTH_CALCULATOR];
    }
    get length() {
        return this[$67913ed2dbf54bbc$var$LENGTH];
    }
    get itemCount() {
        return this[$67913ed2dbf54bbc$var$LRU_LIST].length;
    }
    rforEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[$67913ed2dbf54bbc$var$LRU_LIST].tail; walker !== null;){
            const prev = walker.prev;
            $67913ed2dbf54bbc$var$forEachStep(this, fn, walker, thisp);
            walker = prev;
        }
    }
    forEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[$67913ed2dbf54bbc$var$LRU_LIST].head; walker !== null;){
            const next = walker.next;
            $67913ed2dbf54bbc$var$forEachStep(this, fn, walker, thisp);
            walker = next;
        }
    }
    keys() {
        return this[$67913ed2dbf54bbc$var$LRU_LIST].toArray().map((k)=>k.key);
    }
    values() {
        return this[$67913ed2dbf54bbc$var$LRU_LIST].toArray().map((k)=>k.value);
    }
    reset() {
        if (this[$67913ed2dbf54bbc$var$DISPOSE] && this[$67913ed2dbf54bbc$var$LRU_LIST] && this[$67913ed2dbf54bbc$var$LRU_LIST].length) this[$67913ed2dbf54bbc$var$LRU_LIST].forEach((hit)=>this[$67913ed2dbf54bbc$var$DISPOSE](hit.key, hit.value));
        this[$67913ed2dbf54bbc$var$CACHE] = new Map(); // hash of items by key
        this[$67913ed2dbf54bbc$var$LRU_LIST] = new $67913ed2dbf54bbc$var$Yallist(); // list of items in order of use recency
        this[$67913ed2dbf54bbc$var$LENGTH] = 0; // length of items in the list
    }
    dump() {
        return this[$67913ed2dbf54bbc$var$LRU_LIST].map((hit)=>$67913ed2dbf54bbc$var$isStale(this, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
            }).toArray().filter((h)=>h);
    }
    dumpLru() {
        return this[$67913ed2dbf54bbc$var$LRU_LIST];
    }
    set(key, value, maxAge) {
        maxAge = maxAge || this[$67913ed2dbf54bbc$var$MAX_AGE];
        if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[$67913ed2dbf54bbc$var$LENGTH_CALCULATOR](value, key);
        if (this[$67913ed2dbf54bbc$var$CACHE].has(key)) {
            if (len > this[$67913ed2dbf54bbc$var$MAX]) {
                $67913ed2dbf54bbc$var$del(this, this[$67913ed2dbf54bbc$var$CACHE].get(key));
                return false;
            }
            const node = this[$67913ed2dbf54bbc$var$CACHE].get(key);
            const item = node.value;
            // dispose of the old one before overwriting
            // split out into 2 ifs for better coverage tracking
            if (this[$67913ed2dbf54bbc$var$DISPOSE]) {
                if (!this[$67913ed2dbf54bbc$var$NO_DISPOSE_ON_SET]) this[$67913ed2dbf54bbc$var$DISPOSE](key, item.value);
            }
            item.now = now;
            item.maxAge = maxAge;
            item.value = value;
            this[$67913ed2dbf54bbc$var$LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            $67913ed2dbf54bbc$var$trim(this);
            return true;
        }
        const hit = new $67913ed2dbf54bbc$var$Entry(key, value, len, now, maxAge);
        // oversized objects fall out of cache automatically.
        if (hit.length > this[$67913ed2dbf54bbc$var$MAX]) {
            if (this[$67913ed2dbf54bbc$var$DISPOSE]) this[$67913ed2dbf54bbc$var$DISPOSE](key, value);
            return false;
        }
        this[$67913ed2dbf54bbc$var$LENGTH] += hit.length;
        this[$67913ed2dbf54bbc$var$LRU_LIST].unshift(hit);
        this[$67913ed2dbf54bbc$var$CACHE].set(key, this[$67913ed2dbf54bbc$var$LRU_LIST].head);
        $67913ed2dbf54bbc$var$trim(this);
        return true;
    }
    has(key) {
        if (!this[$67913ed2dbf54bbc$var$CACHE].has(key)) return false;
        const hit = this[$67913ed2dbf54bbc$var$CACHE].get(key).value;
        return !$67913ed2dbf54bbc$var$isStale(this, hit);
    }
    get(key) {
        return $67913ed2dbf54bbc$var$get(this, key, true);
    }
    peek(key) {
        return $67913ed2dbf54bbc$var$get(this, key, false);
    }
    pop() {
        const node = this[$67913ed2dbf54bbc$var$LRU_LIST].tail;
        if (!node) return null;
        $67913ed2dbf54bbc$var$del(this, node);
        return node.value;
    }
    del(key) {
        $67913ed2dbf54bbc$var$del(this, this[$67913ed2dbf54bbc$var$CACHE].get(key));
    }
    load(arr) {
        // reset the cache
        this.reset();
        const now = Date.now();
        // A previous serialized cache has the most recent items first
        for(let l = arr.length - 1; l >= 0; l--){
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0) // the item was created without expiration in a non aged cache
            this.set(hit.k, hit.v);
            else {
                const maxAge = expiresAt - now;
                // dont add already expired items
                if (maxAge > 0) this.set(hit.k, hit.v, maxAge);
            }
        }
    }
    prune() {
        this[$67913ed2dbf54bbc$var$CACHE].forEach((value, key)=>$67913ed2dbf54bbc$var$get(this, key, false));
    }
}
const $67913ed2dbf54bbc$var$get = (self, key, doUse)=>{
    const node = self[$67913ed2dbf54bbc$var$CACHE].get(key);
    if (node) {
        const hit = node.value;
        if ($67913ed2dbf54bbc$var$isStale(self, hit)) {
            $67913ed2dbf54bbc$var$del(self, node);
            if (!self[$67913ed2dbf54bbc$var$ALLOW_STALE]) return undefined;
        } else if (doUse) {
            if (self[$67913ed2dbf54bbc$var$UPDATE_AGE_ON_GET]) node.value.now = Date.now();
            self[$67913ed2dbf54bbc$var$LRU_LIST].unshiftNode(node);
        }
        return hit.value;
    }
};
const $67913ed2dbf54bbc$var$isStale = (self, hit)=>{
    if (!hit || !hit.maxAge && !self[$67913ed2dbf54bbc$var$MAX_AGE]) return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[$67913ed2dbf54bbc$var$MAX_AGE] && diff > self[$67913ed2dbf54bbc$var$MAX_AGE];
};
const $67913ed2dbf54bbc$var$trim = (self)=>{
    if (self[$67913ed2dbf54bbc$var$LENGTH] > self[$67913ed2dbf54bbc$var$MAX]) for(let walker = self[$67913ed2dbf54bbc$var$LRU_LIST].tail; self[$67913ed2dbf54bbc$var$LENGTH] > self[$67913ed2dbf54bbc$var$MAX] && walker !== null;){
        // We know that we're about to delete this one, and also
        // what the next least recently used key will be, so just
        // go ahead and set it now.
        const prev = walker.prev;
        $67913ed2dbf54bbc$var$del(self, walker);
        walker = prev;
    }
};
const $67913ed2dbf54bbc$var$del = (self, node)=>{
    if (node) {
        const hit = node.value;
        if (self[$67913ed2dbf54bbc$var$DISPOSE]) self[$67913ed2dbf54bbc$var$DISPOSE](hit.key, hit.value);
        self[$67913ed2dbf54bbc$var$LENGTH] -= hit.length;
        self[$67913ed2dbf54bbc$var$CACHE].delete(hit.key);
        self[$67913ed2dbf54bbc$var$LRU_LIST].removeNode(node);
    }
};
class $67913ed2dbf54bbc$var$Entry {
    constructor(key, value, length, now, maxAge){
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
    }
}
const $67913ed2dbf54bbc$var$forEachStep = (self, fn, node, thisp)=>{
    let hit = node.value;
    if ($67913ed2dbf54bbc$var$isStale(self, hit)) {
        $67913ed2dbf54bbc$var$del(self, node);
        if (!self[$67913ed2dbf54bbc$var$ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
};
var $67913ed2dbf54bbc$var$lruCache = $67913ed2dbf54bbc$var$LRUCache;
// parse out just the options we care about
const $67913ed2dbf54bbc$var$looseOption = Object.freeze({
    loose: true
});
const $67913ed2dbf54bbc$var$emptyOpts = Object.freeze({});
const $67913ed2dbf54bbc$var$parseOptions$1 = (options)=>{
    if (!options) return $67913ed2dbf54bbc$var$emptyOpts;
    if (typeof options !== "object") return $67913ed2dbf54bbc$var$looseOption;
    return options;
};
var $67913ed2dbf54bbc$var$parseOptions_1 = $67913ed2dbf54bbc$var$parseOptions$1;
var $67913ed2dbf54bbc$var$re$1 = {
    exports: {}
};
// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const $67913ed2dbf54bbc$var$SEMVER_SPEC_VERSION = "2.0.0";
const $67913ed2dbf54bbc$var$MAX_LENGTH$1 = 256;
const $67913ed2dbf54bbc$var$MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
// Max safe segment length for coercion.
const $67913ed2dbf54bbc$var$MAX_SAFE_COMPONENT_LENGTH = 16;
// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const $67913ed2dbf54bbc$var$MAX_SAFE_BUILD_LENGTH = $67913ed2dbf54bbc$var$MAX_LENGTH$1 - 6;
const $67913ed2dbf54bbc$var$RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
];
var $67913ed2dbf54bbc$var$constants = {
    MAX_LENGTH: $67913ed2dbf54bbc$var$MAX_LENGTH$1,
    MAX_SAFE_COMPONENT_LENGTH: $67913ed2dbf54bbc$var$MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH: $67913ed2dbf54bbc$var$MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER: $67913ed2dbf54bbc$var$MAX_SAFE_INTEGER$1,
    RELEASE_TYPES: $67913ed2dbf54bbc$var$RELEASE_TYPES,
    SEMVER_SPEC_VERSION: $67913ed2dbf54bbc$var$SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
};
const $67913ed2dbf54bbc$var$debug$1 = (typeof $5Nx9l === "object" && $5Nx9l.env && undefined, ()=>{});
var $67913ed2dbf54bbc$var$debug_1 = $67913ed2dbf54bbc$var$debug$1;
(function(module, exports) {
    const { MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH, MAX_LENGTH: MAX_LENGTH } = $67913ed2dbf54bbc$var$constants;
    const debug = $67913ed2dbf54bbc$var$debug_1;
    exports = module.exports = {};
    // The actual regexps go on exports.re
    const re = exports.re = [];
    const safeRe = exports.safeRe = [];
    const src = exports.src = [];
    const t = exports.t = {};
    let R = 0;
    const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    // Replace some greedy regex tokens to prevent regex dos issues. These regex are
    // used internally via the safeRe object since all inputs in this library get
    // normalized first to trim and collapse all extra whitespace. The original
    // regexes are exported for userland consumption and lower level usage. A
    // future breaking change could export the safer regex only with a note that
    // all input should have extra whitespace removed.
    const safeRegexReplacements = [
        [
            "\\s",
            1
        ],
        [
            "\\d",
            MAX_LENGTH
        ],
        [
            LETTERDASHNUMBER,
            MAX_SAFE_BUILD_LENGTH
        ]
    ];
    const makeSafeRegex = (value)=>{
        for (const [token, max] of safeRegexReplacements)value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
        return value;
    };
    const createToken = (name, value, isGlobal)=>{
        const safe = makeSafeRegex(value);
        const index = R++;
        debug(name, index, value);
        t[name] = index;
        src[index] = value;
        re[index] = new RegExp(value, isGlobal ? "g" : undefined);
        safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
    };
    // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.
    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    // ## Main Version
    // Three dot-separated numeric identifiers.
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.
    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    // Coercion.
    // Extract anything that could conceivably be a part of a valid semver
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    // Tilde ranges.
    // Meaning is "reasonably at or greater than"
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    // Caret ranges.
    // Meaning is "at least and backwards compatible with"
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    // A simple gt/lt/eq thing, or just "" to indicate "any version"
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
    // Star ranges basically just allow anything at all.
    createToken("STAR", "(<|>)?=?\\s*\\*");
    // >=0.0.0 is like a star
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
})($67913ed2dbf54bbc$var$re$1, $67913ed2dbf54bbc$var$re$1.exports);
var $67913ed2dbf54bbc$var$reExports = $67913ed2dbf54bbc$var$re$1.exports;
const $67913ed2dbf54bbc$var$numeric = /^[0-9]+$/;
const $67913ed2dbf54bbc$var$compareIdentifiers$1 = (a, b)=>{
    const anum = $67913ed2dbf54bbc$var$numeric.test(a);
    const bnum = $67913ed2dbf54bbc$var$numeric.test(b);
    if (anum && bnum) {
        a = +a;
        b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const $67913ed2dbf54bbc$var$rcompareIdentifiers = (a, b)=>$67913ed2dbf54bbc$var$compareIdentifiers$1(b, a);
var $67913ed2dbf54bbc$var$identifiers = {
    compareIdentifiers: $67913ed2dbf54bbc$var$compareIdentifiers$1,
    rcompareIdentifiers: $67913ed2dbf54bbc$var$rcompareIdentifiers
};
const $67913ed2dbf54bbc$var$debug = $67913ed2dbf54bbc$var$debug_1;
const { MAX_LENGTH: $67913ed2dbf54bbc$var$MAX_LENGTH, MAX_SAFE_INTEGER: $67913ed2dbf54bbc$var$MAX_SAFE_INTEGER } = $67913ed2dbf54bbc$var$constants;
const { safeRe: $67913ed2dbf54bbc$var$re, t: $67913ed2dbf54bbc$var$t } = $67913ed2dbf54bbc$var$reExports;
const $67913ed2dbf54bbc$var$parseOptions = $67913ed2dbf54bbc$var$parseOptions_1;
const { compareIdentifiers: $67913ed2dbf54bbc$var$compareIdentifiers } = $67913ed2dbf54bbc$var$identifiers;
let $67913ed2dbf54bbc$var$SemVer$1 = class SemVer {
    constructor(version, options){
        options = $67913ed2dbf54bbc$var$parseOptions(options);
        if (version instanceof SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
            else version = version.version;
        } else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        if (version.length > $67913ed2dbf54bbc$var$MAX_LENGTH) throw new TypeError(`version is longer than ${$67913ed2dbf54bbc$var$MAX_LENGTH} characters`);
        $67913ed2dbf54bbc$var$debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? $67913ed2dbf54bbc$var$re[$67913ed2dbf54bbc$var$t.LOOSE] : $67913ed2dbf54bbc$var$re[$67913ed2dbf54bbc$var$t.FULL]);
        if (!m) throw new TypeError(`Invalid Version: ${version}`);
        this.raw = version;
        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > $67913ed2dbf54bbc$var$MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > $67913ed2dbf54bbc$var$MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > $67913ed2dbf54bbc$var$MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
        // numberify any prerelease numeric ids
        if (!m[4]) this.prerelease = [];
        else this.prerelease = m[4].split(".").map((id)=>{
            if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < $67913ed2dbf54bbc$var$MAX_SAFE_INTEGER) return num;
            }
            return id;
        });
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
    }
    format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
        return this.version;
    }
    toString() {
        return this.version;
    }
    compare(other) {
        $67913ed2dbf54bbc$var$debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
            if (typeof other === "string" && other === this.version) return 0;
            other = new SemVer(other, this.options);
        }
        if (other.version === this.version) return 0;
        return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        return $67913ed2dbf54bbc$var$compareIdentifiers(this.major, other.major) || $67913ed2dbf54bbc$var$compareIdentifiers(this.minor, other.minor) || $67913ed2dbf54bbc$var$compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) return -1;
        else if (!this.prerelease.length && other.prerelease.length) return 1;
        else if (!this.prerelease.length && !other.prerelease.length) return 0;
        let i = 0;
        do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            $67913ed2dbf54bbc$var$debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return $67913ed2dbf54bbc$var$compareIdentifiers(a, b);
        }while (++i);
    }
    compareBuild(other) {
        if (!(other instanceof SemVer)) other = new SemVer(other, this.options);
        let i = 0;
        do {
            const a = this.build[i];
            const b = other.build[i];
            $67913ed2dbf54bbc$var$debug("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return $67913ed2dbf54bbc$var$compareIdentifiers(a, b);
        }while (++i);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
        switch(release){
            case "premajor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "preminor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "prepatch":
                // If this is already a prerelease, it will bump to the next version
                // drop any prereleases that might already exist, since they are not
                // relevant at this point.
                this.prerelease.length = 0;
                this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
                if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            case "major":
                // If this is a pre-major version, bump up to the same major version.
                // Otherwise increment major.
                // 1.0.0-5 bumps to 1.0.0
                // 1.1.0 bumps to 2.0.0
                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "minor":
                // If this is a pre-minor version, bump up to the same minor version.
                // Otherwise increment minor.
                // 1.2.0-5 bumps to 1.2.0
                // 1.2.1 bumps to 1.3.0
                if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "patch":
                // If this is not a pre-release version, it will increment the patch.
                // If it is a pre-release it will bump up to the same patch version.
                // 1.2.0-5 patches to 1.2.0
                // 1.2.0 patches to 1.2.1
                if (this.prerelease.length === 0) this.patch++;
                this.prerelease = [];
                break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre":
                {
                    const base = Number(identifierBase) ? 1 : 0;
                    if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
                    if (this.prerelease.length === 0) this.prerelease = [
                        base
                    ];
                    else {
                        let i = this.prerelease.length;
                        while(--i >= 0)if (typeof this.prerelease[i] === "number") {
                            this.prerelease[i]++;
                            i = -2;
                        }
                        if (i === -1) {
                            // didn't increment anything
                            if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
                            this.prerelease.push(base);
                        }
                    }
                    if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        let prerelease = [
                            identifier,
                            base
                        ];
                        if (identifierBase === false) prerelease = [
                            identifier
                        ];
                        if ($67913ed2dbf54bbc$var$compareIdentifiers(this.prerelease[0], identifier) === 0) {
                            if (isNaN(this.prerelease[1])) this.prerelease = prerelease;
                        } else this.prerelease = prerelease;
                    }
                    break;
                }
            default:
                throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) this.raw += `+${this.build.join(".")}`;
        return this;
    }
};
var $67913ed2dbf54bbc$var$semver = $67913ed2dbf54bbc$var$SemVer$1;
const $67913ed2dbf54bbc$var$SemVer = $67913ed2dbf54bbc$var$semver;
const $67913ed2dbf54bbc$var$compare$6 = (a, b, loose)=>new $67913ed2dbf54bbc$var$SemVer(a, loose).compare(new $67913ed2dbf54bbc$var$SemVer(b, loose));
var $67913ed2dbf54bbc$var$compare_1 = $67913ed2dbf54bbc$var$compare$6;
const $67913ed2dbf54bbc$var$compare$5 = $67913ed2dbf54bbc$var$compare_1;
const $67913ed2dbf54bbc$var$eq$1 = (a, b, loose)=>$67913ed2dbf54bbc$var$compare$5(a, b, loose) === 0;
var $67913ed2dbf54bbc$var$eq_1 = $67913ed2dbf54bbc$var$eq$1;
const $67913ed2dbf54bbc$var$compare$4 = $67913ed2dbf54bbc$var$compare_1;
const $67913ed2dbf54bbc$var$neq$1 = (a, b, loose)=>$67913ed2dbf54bbc$var$compare$4(a, b, loose) !== 0;
var $67913ed2dbf54bbc$var$neq_1 = $67913ed2dbf54bbc$var$neq$1;
const $67913ed2dbf54bbc$var$compare$3 = $67913ed2dbf54bbc$var$compare_1;
const $67913ed2dbf54bbc$var$gt$1 = (a, b, loose)=>$67913ed2dbf54bbc$var$compare$3(a, b, loose) > 0;
var $67913ed2dbf54bbc$var$gt_1 = $67913ed2dbf54bbc$var$gt$1;
const $67913ed2dbf54bbc$var$compare$2 = $67913ed2dbf54bbc$var$compare_1;
const $67913ed2dbf54bbc$var$gte$1 = (a, b, loose)=>$67913ed2dbf54bbc$var$compare$2(a, b, loose) >= 0;
var $67913ed2dbf54bbc$var$gte_1 = $67913ed2dbf54bbc$var$gte$1;
const $67913ed2dbf54bbc$var$compare$1 = $67913ed2dbf54bbc$var$compare_1;
const $67913ed2dbf54bbc$var$lt$1 = (a, b, loose)=>$67913ed2dbf54bbc$var$compare$1(a, b, loose) < 0;
var $67913ed2dbf54bbc$var$lt_1 = $67913ed2dbf54bbc$var$lt$1;
const $67913ed2dbf54bbc$var$compare = $67913ed2dbf54bbc$var$compare_1;
const $67913ed2dbf54bbc$var$lte$1 = (a, b, loose)=>$67913ed2dbf54bbc$var$compare(a, b, loose) <= 0;
var $67913ed2dbf54bbc$var$lte_1 = $67913ed2dbf54bbc$var$lte$1;
const $67913ed2dbf54bbc$var$eq = $67913ed2dbf54bbc$var$eq_1;
const $67913ed2dbf54bbc$var$neq = $67913ed2dbf54bbc$var$neq_1;
const $67913ed2dbf54bbc$var$gt = $67913ed2dbf54bbc$var$gt_1;
const $67913ed2dbf54bbc$var$gte = $67913ed2dbf54bbc$var$gte_1;
const $67913ed2dbf54bbc$var$lt = $67913ed2dbf54bbc$var$lt_1;
const $67913ed2dbf54bbc$var$lte = $67913ed2dbf54bbc$var$lte_1;
const $67913ed2dbf54bbc$var$cmp = (a, op, b, loose)=>{
    switch(op){
        case "===":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a === b;
        case "!==":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a !== b;
        case "":
        case "=":
        case "==":
            return $67913ed2dbf54bbc$var$eq(a, b, loose);
        case "!=":
            return $67913ed2dbf54bbc$var$neq(a, b, loose);
        case ">":
            return $67913ed2dbf54bbc$var$gt(a, b, loose);
        case ">=":
            return $67913ed2dbf54bbc$var$gte(a, b, loose);
        case "<":
            return $67913ed2dbf54bbc$var$lt(a, b, loose);
        case "<=":
            return $67913ed2dbf54bbc$var$lte(a, b, loose);
        default:
            throw new TypeError(`Invalid operator: ${op}`);
    }
};
var $67913ed2dbf54bbc$var$cmp_1 = $67913ed2dbf54bbc$var$cmp;
var $67913ed2dbf54bbc$var$comparator;
var $67913ed2dbf54bbc$var$hasRequiredComparator;
function $67913ed2dbf54bbc$var$requireComparator() {
    if ($67913ed2dbf54bbc$var$hasRequiredComparator) return $67913ed2dbf54bbc$var$comparator;
    $67913ed2dbf54bbc$var$hasRequiredComparator = 1;
    const ANY = Symbol("SemVer ANY");
    // hoisted class for cyclic dependency
    class Comparator {
        static get ANY() {
            return ANY;
        }
        constructor(comp, options){
            options = parseOptions(options);
            if (comp instanceof Comparator) {
                if (comp.loose === !!options.loose) return comp;
                else comp = comp.value;
            }
            comp = comp.trim().split(/\s+/).join(" ");
            debug("comparator", comp, options);
            this.options = options;
            this.loose = !!options.loose;
            this.parse(comp);
            if (this.semver === ANY) this.value = "";
            else this.value = this.operator + this.semver.version;
            debug("comp", this);
        }
        parse(comp) {
            const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
            const m = comp.match(r);
            if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
            this.operator = m[1] !== undefined ? m[1] : "";
            if (this.operator === "=") this.operator = "";
            // if it literally is just '>' or '' then allow anything.
            if (!m[2]) this.semver = ANY;
            else this.semver = new SemVer(m[2], this.options.loose);
        }
        toString() {
            return this.value;
        }
        test(version) {
            debug("Comparator.test", version, this.options.loose);
            if (this.semver === ANY || version === ANY) return true;
            if (typeof version === "string") try {
                version = new SemVer(version, this.options);
            } catch (er) {
                return false;
            }
            return cmp(version, this.operator, this.semver, this.options);
        }
        intersects(comp, options) {
            if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
            if (this.operator === "") {
                if (this.value === "") return true;
                return new Range(comp.value, options).test(this.value);
            } else if (comp.operator === "") {
                if (comp.value === "") return true;
                return new Range(this.value, options).test(comp.semver);
            }
            options = parseOptions(options);
            // Special cases where nothing can possibly be lower
            if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
            if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
            // Same direction increasing (> or >=)
            if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
            // Same direction decreasing (< or <=)
            if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
            // same SemVer and both sides are inclusive (<= or >=)
            if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
            // opposite directions less than
            if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
            // opposite directions greater than
            if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
            return false;
        }
    }
    $67913ed2dbf54bbc$var$comparator = Comparator;
    const parseOptions = $67913ed2dbf54bbc$var$parseOptions_1;
    const { safeRe: re, t: t } = $67913ed2dbf54bbc$var$reExports;
    const cmp = $67913ed2dbf54bbc$var$cmp_1;
    const debug = $67913ed2dbf54bbc$var$debug_1;
    const SemVer = $67913ed2dbf54bbc$var$semver;
    const Range = $67913ed2dbf54bbc$var$requireRange();
    return $67913ed2dbf54bbc$var$comparator;
}
var $67913ed2dbf54bbc$var$range;
var $67913ed2dbf54bbc$var$hasRequiredRange;
function $67913ed2dbf54bbc$var$requireRange() {
    if ($67913ed2dbf54bbc$var$hasRequiredRange) return $67913ed2dbf54bbc$var$range;
    $67913ed2dbf54bbc$var$hasRequiredRange = 1;
    // hoisted class for cyclic dependency
    class Range {
        constructor(range, options){
            options = parseOptions(options);
            if (range instanceof Range) {
                if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
                else return new Range(range.raw, options);
            }
            if (range instanceof Comparator) {
                // just put it in the set and return
                this.raw = range.value;
                this.set = [
                    [
                        range
                    ]
                ];
                this.format();
                return this;
            }
            this.options = options;
            this.loose = !!options.loose;
            this.includePrerelease = !!options.includePrerelease;
            // First reduce all whitespace as much as possible so we do not have to rely
            // on potentially slow regexes like \s*. This is then stored and used for
            // future error messages as well.
            this.raw = range.trim().split(/\s+/).join(" ");
            // First, split on ||
            this.set = this.raw.split("||")// map the range to a 2d array of comparators
            .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty
            // this generally means that it was not a valid range, which is allowed
            // in loose mode, but will still throw if the WHOLE range is invalid.
            .filter((c)=>c.length);
            if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
            // if we have any that are not the null set, throw out null sets.
            if (this.set.length > 1) {
                // keep the first one, in case they're all null sets
                const first = this.set[0];
                this.set = this.set.filter((c)=>!isNullSet(c[0]));
                if (this.set.length === 0) this.set = [
                    first
                ];
                else if (this.set.length > 1) {
                    // if we have any that are *, then the range is just *
                    for (const c of this.set)if (c.length === 1 && isAny(c[0])) {
                        this.set = [
                            c
                        ];
                        break;
                    }
                }
            }
            this.format();
        }
        format() {
            this.range = this.set.map((comps)=>comps.join(" ").trim()).join("||").trim();
            return this.range;
        }
        toString() {
            return this.range;
        }
        parseRange(range) {
            // memoize range parsing for performance.
            // this is a very hot path, and fully deterministic.
            const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
            const memoKey = memoOpts + ":" + range;
            const cached = cache.get(memoKey);
            if (cached) return cached;
            const loose = this.options.loose;
            // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
            const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
            range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
            debug("hyphen replace", range);
            // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
            range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
            debug("comparator trim", range);
            // `~ 1.2.3` => `~1.2.3`
            range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
            debug("tilde trim", range);
            // `^ 1.2.3` => `^1.2.3`
            range = range.replace(re[t.CARETTRIM], caretTrimReplace);
            debug("caret trim", range);
            // At this point, the range is completely trimmed and
            // ready to be split into comparators.
            let rangeList = range.split(" ").map((comp)=>parseComparator(comp, this.options)).join(" ").split(/\s+/)// >=0.0.0 is equivalent to *
            .map((comp)=>replaceGTE0(comp, this.options));
            if (loose) // in loose mode, throw out any that are not valid comparators
            rangeList = rangeList.filter((comp)=>{
                debug("loose invalid filter", comp, this.options);
                return !!comp.match(re[t.COMPARATORLOOSE]);
            });
            debug("range list", rangeList);
            // if any comparators are the null set, then replace with JUST null set
            // if more than one comparator, remove any * comparators
            // also, don't include the same comparator more than once
            const rangeMap = new Map();
            const comparators = rangeList.map((comp)=>new Comparator(comp, this.options));
            for (const comp of comparators){
                if (isNullSet(comp)) return [
                    comp
                ];
                rangeMap.set(comp.value, comp);
            }
            if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
            const result = [
                ...rangeMap.values()
            ];
            cache.set(memoKey, result);
            return result;
        }
        intersects(range, options) {
            if (!(range instanceof Range)) throw new TypeError("a Range is required");
            return this.set.some((thisComparators)=>{
                return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{
                    return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{
                        return rangeComparators.every((rangeComparator)=>{
                            return thisComparator.intersects(rangeComparator, options);
                        });
                    });
                });
            });
        }
        // if ANY of the sets match ALL of its comparators, then pass
        test(version) {
            if (!version) return false;
            if (typeof version === "string") try {
                version = new SemVer(version, this.options);
            } catch (er) {
                return false;
            }
            for(let i = 0; i < this.set.length; i++){
                if (testSet(this.set[i], version, this.options)) return true;
            }
            return false;
        }
    }
    $67913ed2dbf54bbc$var$range = Range;
    const LRU = $67913ed2dbf54bbc$var$lruCache;
    const cache = new LRU({
        max: 1000
    });
    const parseOptions = $67913ed2dbf54bbc$var$parseOptions_1;
    const Comparator = $67913ed2dbf54bbc$var$requireComparator();
    const debug = $67913ed2dbf54bbc$var$debug_1;
    const SemVer = $67913ed2dbf54bbc$var$semver;
    const { safeRe: re, t: t, comparatorTrimReplace: comparatorTrimReplace, tildeTrimReplace: tildeTrimReplace, caretTrimReplace: caretTrimReplace } = $67913ed2dbf54bbc$var$reExports;
    const { FLAG_INCLUDE_PRERELEASE: FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE: FLAG_LOOSE } = $67913ed2dbf54bbc$var$constants;
    const isNullSet = (c)=>c.value === "<0.0.0-0";
    const isAny = (c)=>c.value === "";
    // take a set of comparators and determine whether there
    // exists a version which can satisfy it
    const isSatisfiable = (comparators, options)=>{
        let result = true;
        const remainingComparators = comparators.slice();
        let testComparator = remainingComparators.pop();
        while(result && remainingComparators.length){
            result = remainingComparators.every((otherComparator)=>{
                return testComparator.intersects(otherComparator, options);
            });
            testComparator = remainingComparators.pop();
        }
        return result;
    };
    // comprised of xranges, tildes, stars, and gtlt's at this point.
    // already replaced the hyphen ranges
    // turn into a set of JUST comparators.
    const parseComparator = (comp, options)=>{
        debug("comp", comp, options);
        comp = replaceCarets(comp, options);
        debug("caret", comp);
        comp = replaceTildes(comp, options);
        debug("tildes", comp);
        comp = replaceXRanges(comp, options);
        debug("xrange", comp);
        comp = replaceStars(comp, options);
        debug("stars", comp);
        return comp;
    };
    const isX = (id)=>!id || id.toLowerCase() === "x" || id === "*";
    // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
    // ~0.0.1 --> >=0.0.1 <0.1.0-0
    const replaceTildes = (comp, options)=>{
        return comp.trim().split(/\s+/).map((c)=>replaceTilde(c, options)).join(" ");
    };
    const replaceTilde = (comp, options)=>{
        const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
        return comp.replace(r, (_, M, m, p, pr)=>{
            debug("tilde", comp, _, M, m, p, pr);
            let ret;
            if (isX(M)) ret = "";
            else if (isX(m)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
            else if (isX(p)) // ~1.2 == >=1.2.0 <1.3.0-0
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
            else if (pr) {
                debug("replaceTilde pr", pr);
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            } else // ~1.2.3 == >=1.2.3 <1.3.0-0
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
            debug("tilde return", ret);
            return ret;
        });
    };
    // ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
    // ^1.2.3 --> >=1.2.3 <2.0.0-0
    // ^1.2.0 --> >=1.2.0 <2.0.0-0
    // ^0.0.1 --> >=0.0.1 <0.0.2-0
    // ^0.1.0 --> >=0.1.0 <0.2.0-0
    const replaceCarets = (comp, options)=>{
        return comp.trim().split(/\s+/).map((c)=>replaceCaret(c, options)).join(" ");
    };
    const replaceCaret = (comp, options)=>{
        debug("caret", comp, options);
        const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
        const z = options.includePrerelease ? "-0" : "";
        return comp.replace(r, (_, M, m, p, pr)=>{
            debug("caret", comp, _, M, m, p, pr);
            let ret;
            if (isX(M)) ret = "";
            else if (isX(m)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
            else if (isX(p)) {
                if (M === "0") ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
                else ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
            } else if (pr) {
                debug("replaceCaret pr", pr);
                if (M === "0") {
                    if (m === "0") ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
                    else ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
                } else ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
            } else {
                debug("no pr");
                if (M === "0") {
                    if (m === "0") ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
                    else ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
                } else ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
            }
            debug("caret return", ret);
            return ret;
        });
    };
    const replaceXRanges = (comp, options)=>{
        debug("replaceXRanges", comp, options);
        return comp.split(/\s+/).map((c)=>replaceXRange(c, options)).join(" ");
    };
    const replaceXRange = (comp, options)=>{
        comp = comp.trim();
        const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
        return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{
            debug("xRange", comp, ret, gtlt, M, m, p, pr);
            const xM = isX(M);
            const xm = xM || isX(m);
            const xp = xm || isX(p);
            const anyX = xp;
            if (gtlt === "=" && anyX) gtlt = "";
            // if we're including prereleases in the match, then we need
            // to fix this to -0, the lowest possible prerelease value
            pr = options.includePrerelease ? "-0" : "";
            if (xM) {
                if (gtlt === ">" || gtlt === "<") // nothing is allowed
                ret = "<0.0.0-0";
                else // nothing is forbidden
                ret = "*";
            } else if (gtlt && anyX) {
                // we know patch is an x, because we have any x at all.
                // replace X with 0
                if (xm) m = 0;
                p = 0;
                if (gtlt === ">") {
                    // >1 => >=2.0.0
                    // >1.2 => >=1.3.0
                    gtlt = ">=";
                    if (xm) {
                        M = +M + 1;
                        m = 0;
                        p = 0;
                    } else {
                        m = +m + 1;
                        p = 0;
                    }
                } else if (gtlt === "<=") {
                    // <=0.7.x is actually <0.8.0, since any 0.7.x should
                    // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                    gtlt = "<";
                    if (xm) M = +M + 1;
                    else m = +m + 1;
                }
                if (gtlt === "<") pr = "-0";
                ret = `${gtlt + M}.${m}.${p}${pr}`;
            } else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
            else if (xp) ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
            debug("xRange return", ret);
            return ret;
        });
    };
    // Because * is AND-ed with everything else in the comparator,
    // and '' means "any version", just remove the *s entirely.
    const replaceStars = (comp, options)=>{
        debug("replaceStars", comp, options);
        // Looseness is ignored here.  star is always as loose as it gets!
        return comp.trim().replace(re[t.STAR], "");
    };
    const replaceGTE0 = (comp, options)=>{
        debug("replaceGTE0", comp, options);
        return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    // This function is passed to string.replace(re[t.HYPHENRANGE])
    // M, m, patch, prerelease, build
    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
    // 1.2 - 3.4 => >=1.2.0 <3.5.0-0
    const hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb)=>{
            if (isX(fM)) from = "";
            else if (isX(fm)) from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
            else if (isX(fp)) from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
            else if (fpr) from = `>=${from}`;
            else from = `>=${from}${incPr ? "-0" : ""}`;
            if (isX(tM)) to = "";
            else if (isX(tm)) to = `<${+tM + 1}.0.0-0`;
            else if (isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
            else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
            else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
            else to = `<=${to}`;
            return `${from} ${to}`.trim();
        };
    const testSet = (set, version, options)=>{
        for(let i = 0; i < set.length; i++){
            if (!set[i].test(version)) return false;
        }
        if (version.prerelease.length && !options.includePrerelease) {
            // Find the set of versions that are allowed to have prereleases
            // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
            // That should allow `1.2.3-pr.2` to pass.
            // However, `1.2.4-alpha.notready` should NOT be allowed,
            // even though it's within the range set by the comparators.
            for(let i = 0; i < set.length; i++){
                debug(set[i].semver);
                if (set[i].semver === Comparator.ANY) continue;
                if (set[i].semver.prerelease.length > 0) {
                    const allowed = set[i].semver;
                    if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
                }
            }
            // Version has a -pre, but it's not one of the ones we like.
            return false;
        }
        return true;
    };
    return $67913ed2dbf54bbc$var$range;
}
const $67913ed2dbf54bbc$var$Range = $67913ed2dbf54bbc$var$requireRange();
const $67913ed2dbf54bbc$var$satisfies = (version, range, options)=>{
    try {
        range = new $67913ed2dbf54bbc$var$Range(range, options);
    } catch (er) {
        return false;
    }
    return range.test(version);
};
var $67913ed2dbf54bbc$var$satisfies_1 = $67913ed2dbf54bbc$var$satisfies;
var $67913ed2dbf54bbc$var$satisfies$1 = /*@__PURE__*/ $67913ed2dbf54bbc$var$getDefaultExportFromCjs($67913ed2dbf54bbc$var$satisfies_1);
/**
 * Open editor url in a new window, and pass a message.
 */ function $67913ed2dbf54bbc$var$post(window1, url, data) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const editor = window1.open(url);
    const wait = 10000;
    const step = 250;
    const { origin: origin } = new URL(url);
    // eslint-disable-next-line no-bitwise
    let count = ~~(wait / step);
    function listen(evt) {
        if (evt.source === editor) {
            count = 0;
            window1.removeEventListener("message", listen, false);
        }
    }
    window1.addEventListener("message", listen, false);
    // send message
    // periodically resend until ack received or timeout
    function send() {
        if (count <= 0) return;
        editor.postMessage(data, origin);
        setTimeout(send, step);
        count -= 1;
    }
    setTimeout(send, step);
}
// generated with build-style.sh
var $67913ed2dbf54bbc$var$embedStyle = `.vega-embed {
  position: relative;
  display: inline-block;
  box-sizing: border-box;
}
.vega-embed.has-actions {
  padding-right: 38px;
}
.vega-embed details:not([open]) > :not(summary) {
  display: none !important;
}
.vega-embed summary {
  list-style: none;
  position: absolute;
  top: 0;
  right: 0;
  padding: 6px;
  z-index: 1000;
  background: white;
  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
  color: #1b1e23;
  border: 1px solid #aaa;
  border-radius: 999px;
  opacity: 0.2;
  transition: opacity 0.4s ease-in;
  cursor: pointer;
  line-height: 0px;
}
.vega-embed summary::-webkit-details-marker {
  display: none;
}
.vega-embed summary:active {
  box-shadow: #aaa 0px 0px 0px 1px inset;
}
.vega-embed summary svg {
  width: 14px;
  height: 14px;
}
.vega-embed details[open] summary {
  opacity: 0.7;
}
.vega-embed:hover summary, .vega-embed:focus-within summary {
  opacity: 1 !important;
  transition: opacity 0.2s ease;
}
.vega-embed .vega-actions {
  position: absolute;
  z-index: 1001;
  top: 35px;
  right: -9px;
  display: flex;
  flex-direction: column;
  padding-bottom: 8px;
  padding-top: 8px;
  border-radius: 4px;
  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);
  border: 1px solid #d9d9d9;
  background: white;
  animation-duration: 0.15s;
  animation-name: scale-in;
  animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);
  text-align: left;
}
.vega-embed .vega-actions a {
  padding: 8px 16px;
  font-family: sans-serif;
  font-size: 14px;
  font-weight: 600;
  white-space: nowrap;
  color: #434a56;
  text-decoration: none;
}
.vega-embed .vega-actions a:hover, .vega-embed .vega-actions a:focus {
  background-color: #f7f7f9;
  color: black;
}
.vega-embed .vega-actions::before, .vega-embed .vega-actions::after {
  content: "";
  display: inline-block;
  position: absolute;
}
.vega-embed .vega-actions::before {
  left: auto;
  right: 14px;
  top: -16px;
  border: 8px solid rgba(0, 0, 0, 0);
  border-bottom-color: #d9d9d9;
}
.vega-embed .vega-actions::after {
  left: auto;
  right: 15px;
  top: -14px;
  border: 7px solid rgba(0, 0, 0, 0);
  border-bottom-color: #fff;
}
.vega-embed .chart-wrapper.fit-x {
  width: 100%;
}
.vega-embed .chart-wrapper.fit-y {
  height: 100%;
}

.vega-embed-wrapper {
  max-width: 100%;
  overflow: auto;
  padding-right: 14px;
}

@keyframes scale-in {
  from {
    opacity: 0;
    transform: scale(0.6);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
`;
function $67913ed2dbf54bbc$var$mergeDeep(dest, ...src) {
    for (const s of src)$67913ed2dbf54bbc$var$deepMerge_(dest, s);
    return dest;
}
function $67913ed2dbf54bbc$var$deepMerge_(dest, src) {
    for (const property of Object.keys(src))(0, $4SWbq.writeConfig)(dest, property, src[property], true);
}
var $67913ed2dbf54bbc$var$name = "vega-embed";
var $67913ed2dbf54bbc$var$version$1 = "6.23.0";
var $67913ed2dbf54bbc$var$description = "Publish Vega visualizations as embedded web components.";
var $67913ed2dbf54bbc$var$keywords = [
    "vega",
    "data",
    "visualization",
    "component",
    "embed"
];
var $67913ed2dbf54bbc$var$repository = {
    type: "git",
    url: "http://github.com/vega/vega-embed.git"
};
var $67913ed2dbf54bbc$var$author = {
    name: "UW Interactive Data Lab",
    url: "http://idl.cs.washington.edu"
};
var $67913ed2dbf54bbc$var$contributors = [
    {
        name: "Dominik Moritz",
        url: "https://www.domoritz.de"
    }
];
var $67913ed2dbf54bbc$var$bugs = {
    url: "https://github.com/vega/vega-embed/issues"
};
var $67913ed2dbf54bbc$var$homepage = "https://github.com/vega/vega-embed#readme";
var $67913ed2dbf54bbc$var$license = "BSD-3-Clause";
var $67913ed2dbf54bbc$var$main = "build/vega-embed.js";
var $67913ed2dbf54bbc$var$module = "build/vega-embed.module.js";
var $67913ed2dbf54bbc$var$unpkg = "build/vega-embed.min.js";
var $67913ed2dbf54bbc$var$jsdelivr = "build/vega-embed.min.js";
var $67913ed2dbf54bbc$var$types = "build/vega-embed.module.d.ts";
var $67913ed2dbf54bbc$var$files = [
    "src",
    "build",
    "patches"
];
var $67913ed2dbf54bbc$var$devDependencies = {
    "@babel/core": "^7.22.9",
    "@babel/plugin-proposal-async-generator-functions": "^7.20.7",
    "@babel/plugin-proposal-json-strings": "^7.18.6",
    "@babel/plugin-proposal-object-rest-spread": "^7.20.7",
    "@babel/plugin-proposal-optional-catch-binding": "^7.18.6",
    "@babel/plugin-transform-runtime": "^7.22.9",
    "@babel/preset-env": "^7.22.9",
    "@babel/preset-typescript": "^7.22.5",
    "@release-it/conventional-changelog": "^7.0.0",
    "@rollup/plugin-commonjs": "25.0.4",
    "@rollup/plugin-json": "^6.0.0",
    "@rollup/plugin-node-resolve": "^15.1.0",
    "@rollup/plugin-terser": "^0.4.3",
    "@types/semver": "^7.5.0",
    "@typescript-eslint/eslint-plugin": "^6.2.0",
    "@typescript-eslint/parser": "^6.2.0",
    "browser-sync": "^2.29.3",
    concurrently: "^8.2.0",
    "del-cli": "^5.0.0",
    eslint: "^8.46.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-jest": "^27.2.3",
    "eslint-plugin-prettier": "^5.0.0",
    jest: "^29.6.2",
    "jest-canvas-mock": "^2.5.2",
    "jest-environment-jsdom": "^29.6.2",
    "patch-package": "^8.0.0",
    "postinstall-postinstall": "^2.1.0",
    prettier: "^3.0.0",
    "release-it": "^16.1.3",
    rollup: "3.29.1",
    "rollup-plugin-bundle-size": "^1.0.3",
    "rollup-plugin-ts": "^3.2.0",
    sass: "^1.64.1",
    typescript: "^5.1.6",
    vega: "^5.22.1",
    "vega-lite": "^5.2.0"
};
var $67913ed2dbf54bbc$var$peerDependencies = {
    vega: "^5.21.0",
    "vega-lite": "*"
};
var $67913ed2dbf54bbc$var$dependencies = {
    "fast-json-patch": "^3.1.1",
    "json-stringify-pretty-compact": "^3.0.0",
    semver: "^7.5.4",
    tslib: "^2.6.1",
    "vega-interpreter": "^1.0.5",
    "vega-schema-url-parser": "^2.2.0",
    "vega-themes": "^2.14.0",
    "vega-tooltip": "^0.33.0"
};
var $67913ed2dbf54bbc$var$bundledDependencies = [
    "yallist"
];
var $67913ed2dbf54bbc$var$scripts = {
    prebuild: "yarn clean && yarn build:style",
    build: "rollup -c",
    "build:style": "./build-style.sh",
    clean: "del-cli build src/style.ts",
    prepublishOnly: "yarn clean && yarn build",
    preversion: "yarn lint && yarn test",
    serve: "browser-sync start --directory -s -f build *.html",
    start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
    pretest: "yarn build:style",
    test: "jest",
    "test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand",
    prettierbase: "prettier '*.{css,scss,html}'",
    format: "eslint . --fix && yarn prettierbase --write",
    lint: "eslint . && yarn prettierbase --check",
    release: "release-it"
};
var $67913ed2dbf54bbc$var$pkg = {
    name: $67913ed2dbf54bbc$var$name,
    version: $67913ed2dbf54bbc$var$version$1,
    description: $67913ed2dbf54bbc$var$description,
    keywords: $67913ed2dbf54bbc$var$keywords,
    repository: $67913ed2dbf54bbc$var$repository,
    author: $67913ed2dbf54bbc$var$author,
    contributors: $67913ed2dbf54bbc$var$contributors,
    bugs: $67913ed2dbf54bbc$var$bugs,
    homepage: $67913ed2dbf54bbc$var$homepage,
    license: $67913ed2dbf54bbc$var$license,
    main: $67913ed2dbf54bbc$var$main,
    module: $67913ed2dbf54bbc$var$module,
    unpkg: $67913ed2dbf54bbc$var$unpkg,
    jsdelivr: $67913ed2dbf54bbc$var$jsdelivr,
    types: $67913ed2dbf54bbc$var$types,
    files: $67913ed2dbf54bbc$var$files,
    devDependencies: $67913ed2dbf54bbc$var$devDependencies,
    peerDependencies: $67913ed2dbf54bbc$var$peerDependencies,
    dependencies: $67913ed2dbf54bbc$var$dependencies,
    bundledDependencies: $67913ed2dbf54bbc$var$bundledDependencies,
    scripts: $67913ed2dbf54bbc$var$scripts
};
function $67913ed2dbf54bbc$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $67913ed2dbf54bbc$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $67913ed2dbf54bbc$var$ownKeys(Object(source), !0).forEach(function(key) {
            $67913ed2dbf54bbc$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $67913ed2dbf54bbc$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const $67913ed2dbf54bbc$export$83d89fbfd8236492 = $67913ed2dbf54bbc$var$pkg.version;
const $67913ed2dbf54bbc$export$307088f2ee717679 = $h0YPc;
let $67913ed2dbf54bbc$export$a3210a97478cdaf9 = $1DNFM;
// For backwards compatibility with Vega-Lite before v4.
const $67913ed2dbf54bbc$var$w = typeof window !== "undefined" ? window : undefined;
if ($67913ed2dbf54bbc$export$a3210a97478cdaf9 === undefined && $67913ed2dbf54bbc$var$w?.vl?.compile) $67913ed2dbf54bbc$export$a3210a97478cdaf9 = $67913ed2dbf54bbc$var$w.vl;
const $67913ed2dbf54bbc$export$b609d7ea4366c160 = {
    export: {
        svg: true,
        png: true
    },
    source: true,
    compiled: true,
    editor: true
};
const $67913ed2dbf54bbc$var$I18N = {
    CLICK_TO_VIEW_ACTIONS: "Click to view actions",
    COMPILED_ACTION: "View Compiled Vega",
    EDITOR_ACTION: "Open in Vega Editor",
    PNG_ACTION: "Save as PNG",
    SOURCE_ACTION: "View Source",
    SVG_ACTION: "Save as SVG"
};
const $67913ed2dbf54bbc$var$NAMES = {
    vega: "Vega",
    "vega-lite": "Vega-Lite"
};
const $67913ed2dbf54bbc$var$VERSION = {
    vega: $67913ed2dbf54bbc$export$307088f2ee717679.version,
    "vega-lite": $67913ed2dbf54bbc$export$a3210a97478cdaf9 ? $67913ed2dbf54bbc$export$a3210a97478cdaf9.version : "not available"
};
const $67913ed2dbf54bbc$var$PREPROCESSOR = {
    vega: (vgSpec)=>vgSpec,
    "vega-lite": (vlSpec, config)=>$67913ed2dbf54bbc$export$a3210a97478cdaf9.compile(vlSpec, {
            config: config
        }).spec
};
const $67913ed2dbf54bbc$var$SVG_CIRCLES = `
<svg viewBox="0 0 16 16" fill="currentColor" stroke="none" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
  <circle r="2" cy="8" cx="2"></circle>
  <circle r="2" cy="8" cx="8"></circle>
  <circle r="2" cy="8" cx="14"></circle>
</svg>`;
const $67913ed2dbf54bbc$var$CHART_WRAPPER_CLASS = "chart-wrapper";
function $67913ed2dbf54bbc$var$isTooltipHandler(h) {
    return typeof h === "function";
}
function $67913ed2dbf54bbc$var$viewSource(source, sourceHeader, sourceFooter, mode) {
    const header = `<html><head>${sourceHeader}</head><body><pre><code class="json">`;
    const footer = `</code></pre>${sourceFooter}</body></html>`;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const win = window.open("");
    win.document.write(header + source + footer);
    win.document.title = `${$67913ed2dbf54bbc$var$NAMES[mode]} JSON Source`;
}
/**
 * Try to guess the type of spec.
 *
 * @param spec Vega or Vega-Lite spec.
 */ function $67913ed2dbf54bbc$export$ede454f94a868fe8(spec, providedMode) {
    // Decide mode
    if (spec.$schema) {
        const parsed = (0, $cBP4R.default)(spec.$schema);
        if (providedMode && providedMode !== parsed.library) console.warn(`The given visualization spec is written in ${$67913ed2dbf54bbc$var$NAMES[parsed.library]}, but mode argument sets ${$67913ed2dbf54bbc$var$NAMES[providedMode] ?? providedMode}.`);
        const mode = parsed.library;
        if (!$67913ed2dbf54bbc$var$satisfies$1($67913ed2dbf54bbc$var$VERSION[mode], `^${parsed.version.slice(1)}`)) console.warn(`The input spec uses ${$67913ed2dbf54bbc$var$NAMES[mode]} ${parsed.version}, but the current version of ${$67913ed2dbf54bbc$var$NAMES[mode]} is v${$67913ed2dbf54bbc$var$VERSION[mode]}.`);
        return mode;
    }
    // try to guess from the provided spec
    if ("mark" in spec || "encoding" in spec || "layer" in spec || "hconcat" in spec || "vconcat" in spec || "facet" in spec || "repeat" in spec) return "vega-lite";
    if ("marks" in spec || "signals" in spec || "scales" in spec || "axes" in spec) return "vega";
    return providedMode ?? "vega";
}
function $67913ed2dbf54bbc$var$isLoader(o) {
    return !!(o && "load" in o);
}
function $67913ed2dbf54bbc$var$createLoader(opts) {
    return $67913ed2dbf54bbc$var$isLoader(opts) ? opts : $67913ed2dbf54bbc$export$307088f2ee717679.loader(opts);
}
function $67913ed2dbf54bbc$var$embedOptionsFromUsermeta(parsedSpec) {
    const opts = parsedSpec.usermeta?.embedOptions ?? {};
    if ((0, $4SWbq.isString)(opts.defaultStyle)) // we don't allow styles set via usermeta since it would allow injection of logic (we set the style via innerHTML)
    opts.defaultStyle = false;
    return opts;
}
/**
 * Embed a Vega visualization component in a web page. This function returns a promise.
 *
 * @param el        DOM element in which to place component (DOM node or CSS selector).
 * @param spec      String : A URL string from which to load the Vega specification.
 *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.
 * @param opts       A JavaScript object containing options for embedding.
 */ async function $67913ed2dbf54bbc$export$2e2bcd8739ae039(el, spec, opts = {}) {
    let parsedSpec;
    let loader;
    if ((0, $4SWbq.isString)(spec)) {
        loader = $67913ed2dbf54bbc$var$createLoader(opts.loader);
        parsedSpec = JSON.parse(await loader.load(spec));
    } else parsedSpec = spec;
    const loadedEmbedOptions = $67913ed2dbf54bbc$var$embedOptionsFromUsermeta(parsedSpec);
    const usermetaLoader = loadedEmbedOptions.loader;
    // either create the loader for the first time or create a new loader if the spec has new loader options
    if (!loader || usermetaLoader) loader = $67913ed2dbf54bbc$var$createLoader(opts.loader ?? usermetaLoader);
    const usermetaOpts = await $67913ed2dbf54bbc$var$loadOpts(loadedEmbedOptions, loader);
    const parsedOpts = await $67913ed2dbf54bbc$var$loadOpts(opts, loader);
    const mergedOpts = $67913ed2dbf54bbc$var$_objectSpread($67913ed2dbf54bbc$var$_objectSpread({}, $67913ed2dbf54bbc$var$mergeDeep(parsedOpts, usermetaOpts)), {}, {
        config: (0, $4SWbq.mergeConfig)(parsedOpts.config ?? {}, usermetaOpts.config ?? {})
    });
    return await $67913ed2dbf54bbc$var$_embed(el, parsedSpec, mergedOpts, loader);
}
async function $67913ed2dbf54bbc$var$loadOpts(opt, loader) {
    const config = (0, $4SWbq.isString)(opt.config) ? JSON.parse(await loader.load(opt.config)) : opt.config ?? {};
    const patch = (0, $4SWbq.isString)(opt.patch) ? JSON.parse(await loader.load(opt.patch)) : opt.patch;
    return $67913ed2dbf54bbc$var$_objectSpread($67913ed2dbf54bbc$var$_objectSpread($67913ed2dbf54bbc$var$_objectSpread({}, opt), patch ? {
        patch: patch
    } : {}), config ? {
        config: config
    } : {});
}
function $67913ed2dbf54bbc$var$getRoot(el) {
    const possibleRoot = el.getRootNode ? el.getRootNode() : document;
    return possibleRoot instanceof ShadowRoot ? {
        root: possibleRoot,
        rootContainer: possibleRoot
    } : {
        root: document,
        rootContainer: document.head ?? document.body
    };
}
async function $67913ed2dbf54bbc$var$_embed(el, spec, opts = {}, loader) {
    const config = opts.theme ? (0, $4SWbq.mergeConfig)($kzC9m[opts.theme], opts.config ?? {}) : opts.config;
    const actions = (0, $4SWbq.isBoolean)(opts.actions) ? opts.actions : $67913ed2dbf54bbc$var$mergeDeep({}, $67913ed2dbf54bbc$export$b609d7ea4366c160, opts.actions ?? {});
    const i18n = $67913ed2dbf54bbc$var$_objectSpread($67913ed2dbf54bbc$var$_objectSpread({}, $67913ed2dbf54bbc$var$I18N), opts.i18n);
    const renderer = opts.renderer ?? "canvas";
    const logLevel = opts.logLevel ?? $67913ed2dbf54bbc$export$307088f2ee717679.Warn;
    const downloadFileName = opts.downloadFileName ?? "visualization";
    const element = typeof el === "string" ? document.querySelector(el) : el;
    if (!element) throw new Error(`${el} does not exist`);
    if (opts.defaultStyle !== false) {
        const ID = "vega-embed-style";
        const { root: root, rootContainer: rootContainer } = $67913ed2dbf54bbc$var$getRoot(element);
        if (!root.getElementById(ID)) {
            const style = document.createElement("style");
            style.id = ID;
            style.innerHTML = opts.defaultStyle === undefined || opts.defaultStyle === true ? $67913ed2dbf54bbc$var$embedStyle.toString() : opts.defaultStyle;
            rootContainer.appendChild(style);
        }
    }
    const mode = $67913ed2dbf54bbc$export$ede454f94a868fe8(spec, opts.mode);
    let vgSpec = $67913ed2dbf54bbc$var$PREPROCESSOR[mode](spec, config);
    if (mode === "vega-lite") {
        if (vgSpec.$schema) {
            const parsed = (0, $cBP4R.default)(vgSpec.$schema);
            if (!$67913ed2dbf54bbc$var$satisfies$1($67913ed2dbf54bbc$var$VERSION.vega, `^${parsed.version.slice(1)}`)) console.warn(`The compiled spec uses Vega ${parsed.version}, but current version is v${$67913ed2dbf54bbc$var$VERSION.vega}.`);
        }
    }
    element.classList.add("vega-embed");
    if (actions) element.classList.add("has-actions");
    element.innerHTML = ""; // clear container
    let container = element;
    if (actions) {
        const chartWrapper = document.createElement("div");
        chartWrapper.classList.add($67913ed2dbf54bbc$var$CHART_WRAPPER_CLASS);
        element.appendChild(chartWrapper);
        container = chartWrapper;
    }
    const patch = opts.patch;
    if (patch) vgSpec = patch instanceof Function ? patch(vgSpec) : (0, $a2rjX.applyPatch)(vgSpec, patch, true, false).newDocument;
    // Set locale. Note that this is a global setting.
    if (opts.formatLocale) $67913ed2dbf54bbc$export$307088f2ee717679.formatLocale(opts.formatLocale);
    if (opts.timeFormatLocale) $67913ed2dbf54bbc$export$307088f2ee717679.timeFormatLocale(opts.timeFormatLocale);
    // Set custom expression functions
    if (opts.expressionFunctions) for(const name in opts.expressionFunctions){
        const expressionFunction = opts.expressionFunctions[name];
        if ("fn" in expressionFunction) $67913ed2dbf54bbc$export$307088f2ee717679.expressionFunction(name, expressionFunction.fn, expressionFunction["visitor"]);
        else if (expressionFunction instanceof Function) $67913ed2dbf54bbc$export$307088f2ee717679.expressionFunction(name, expressionFunction);
    }
    const { ast: ast } = opts;
    // Do not apply the config to Vega when we have already applied it to Vega-Lite.
    // This call may throw an Error if parsing fails.
    const runtime = $67913ed2dbf54bbc$export$307088f2ee717679.parse(vgSpec, mode === "vega-lite" ? {} : config, {
        ast: ast
    });
    const view = new (opts.viewClass || $67913ed2dbf54bbc$export$307088f2ee717679.View)(runtime, $67913ed2dbf54bbc$var$_objectSpread({
        loader: loader,
        logLevel: logLevel,
        renderer: renderer
    }, ast ? {
        expr: $67913ed2dbf54bbc$export$307088f2ee717679.expressionInterpreter ?? opts.expr ?? (0, $fUe3S.expressionInterpreter)
    } : {}));
    view.addSignalListener("autosize", (_, autosize)=>{
        const { type: type } = autosize;
        if (type == "fit-x") {
            container.classList.add("fit-x");
            container.classList.remove("fit-y");
        } else if (type == "fit-y") {
            container.classList.remove("fit-x");
            container.classList.add("fit-y");
        } else if (type == "fit") container.classList.add("fit-x", "fit-y");
        else container.classList.remove("fit-x", "fit-y");
    });
    if (opts.tooltip !== false) {
        const handler = $67913ed2dbf54bbc$var$isTooltipHandler(opts.tooltip) ? opts.tooltip : // user provided boolean true or tooltip options
        new (0, $agM7j.Handler)(opts.tooltip === true ? {} : opts.tooltip).call;
        view.tooltip(handler);
    }
    let { hover: hover } = opts;
    if (hover === undefined) hover = mode === "vega";
    if (hover) {
        const { hoverSet: hoverSet, updateSet: updateSet } = typeof hover === "boolean" ? {} : hover;
        view.hover(hoverSet, updateSet);
    }
    if (opts) {
        if (opts.width != null) view.width(opts.width);
        if (opts.height != null) view.height(opts.height);
        if (opts.padding != null) view.padding(opts.padding);
    }
    await view.initialize(container, opts.bind).runAsync();
    let documentClickHandler;
    if (actions !== false) {
        let wrapper = element;
        if (opts.defaultStyle !== false || opts.forceActionsMenu) {
            const details = document.createElement("details");
            details.title = i18n.CLICK_TO_VIEW_ACTIONS;
            element.append(details);
            wrapper = details;
            const summary = document.createElement("summary");
            summary.innerHTML = $67913ed2dbf54bbc$var$SVG_CIRCLES;
            details.append(summary);
            documentClickHandler = (ev)=>{
                if (!details.contains(ev.target)) details.removeAttribute("open");
            };
            document.addEventListener("click", documentClickHandler);
        }
        const ctrl = document.createElement("div");
        wrapper.append(ctrl);
        ctrl.classList.add("vega-actions");
        // add 'Export' action
        if (actions === true || actions.export !== false) {
            for (const ext of [
                "svg",
                "png"
            ])if (actions === true || actions.export === true || actions.export[ext]) {
                const i18nExportAction = i18n[`${ext.toUpperCase()}_ACTION`];
                const exportLink = document.createElement("a");
                const scaleFactor = (0, $4SWbq.isObject)(opts.scaleFactor) ? opts.scaleFactor[ext] : opts.scaleFactor;
                exportLink.text = i18nExportAction;
                exportLink.href = "#";
                exportLink.target = "_blank";
                exportLink.download = `${downloadFileName}.${ext}`;
                // add link on mousedown so that it's correct when the click happens
                exportLink.addEventListener("mousedown", async function(e) {
                    e.preventDefault();
                    const url = await view.toImageURL(ext, scaleFactor);
                    this.href = url;
                });
                ctrl.append(exportLink);
            }
        }
        // add 'View Source' action
        if (actions === true || actions.source !== false) {
            const viewSourceLink = document.createElement("a");
            viewSourceLink.text = i18n.SOURCE_ACTION;
            viewSourceLink.href = "#";
            viewSourceLink.addEventListener("click", function(e) {
                $67913ed2dbf54bbc$var$viewSource((0, (/*@__PURE__*/$parcel$interopDefault($foI6V)))(spec), opts.sourceHeader ?? "", opts.sourceFooter ?? "", mode);
                e.preventDefault();
            });
            ctrl.append(viewSourceLink);
        }
        // add 'View Compiled' action
        if (mode === "vega-lite" && (actions === true || actions.compiled !== false)) {
            const compileLink = document.createElement("a");
            compileLink.text = i18n.COMPILED_ACTION;
            compileLink.href = "#";
            compileLink.addEventListener("click", function(e) {
                $67913ed2dbf54bbc$var$viewSource((0, (/*@__PURE__*/$parcel$interopDefault($foI6V)))(vgSpec), opts.sourceHeader ?? "", opts.sourceFooter ?? "", "vega");
                e.preventDefault();
            });
            ctrl.append(compileLink);
        }
        // add 'Open in Vega Editor' action
        if (actions === true || actions.editor !== false) {
            const editorUrl = opts.editorUrl ?? "https://vega.github.io/editor/";
            const editorLink = document.createElement("a");
            editorLink.text = i18n.EDITOR_ACTION;
            editorLink.href = "#";
            editorLink.addEventListener("click", function(e) {
                $67913ed2dbf54bbc$var$post(window, editorUrl, {
                    config: config,
                    mode: mode,
                    renderer: renderer,
                    spec: (0, (/*@__PURE__*/$parcel$interopDefault($foI6V)))(spec)
                });
                e.preventDefault();
            });
            ctrl.append(editorLink);
        }
    }
    function finalize() {
        if (documentClickHandler) document.removeEventListener("click", documentClickHandler);
        view.finalize();
    }
    return {
        view: view,
        spec: spec,
        vgSpec: vgSpec,
        finalize: finalize,
        embedOptions: opts
    };
}

});
parcelRegister("hEBUe", function(module, exports) {
$parcel$export(module.exports, "applyPatch", () => (parcelRequire("a2rjX")).applyPatch);
parcelRequire("a2rjX");
parcelRequire("lXJAc");

var $kqYQj = parcelRequire("kqYQj");
var $0abd7d915f784765$export$2e2bcd8739ae039 = Object.assign({}, $0abd7d915f784765$import$5ecbb526cd5c0bbc, $0abd7d915f784765$import$4f1f131d5e9c7574, {
    JsonPatchError: $kqYQj.PatchError,
    deepClone: $kqYQj._deepClone,
    escapePathComponent: $kqYQj.escapePathComponent,
    unescapePathComponent: $kqYQj.unescapePathComponent
});

});
parcelRegister("a2rjX", function(module, exports) {

$parcel$export(module.exports, "applyPatch", () => $b529c12bbc8c5747$export$7383fd3fd73657b6);

var $kqYQj = parcelRequire("kqYQj");
var $b529c12bbc8c5747$export$b08003336606c830 = (0, $kqYQj.PatchError);
var $b529c12bbc8c5747$export$b7d58db314e0ac27 = (0, $kqYQj._deepClone);
/* We use a Javascript hash to store each
 function. Each hash entry (property) uses
 the operation identifiers specified in rfc6902.
 In this way, we can map each patch operation
 to its dedicated function in efficient way.
 */ /* The operations applicable to an object */ var $b529c12bbc8c5747$var$objOps = {
    add: function(obj, key, document) {
        obj[key] = this.value;
        return {
            newDocument: document
        };
    },
    remove: function(obj, key, document) {
        var removed = obj[key];
        delete obj[key];
        return {
            newDocument: document,
            removed: removed
        };
    },
    replace: function(obj, key, document) {
        var removed = obj[key];
        obj[key] = this.value;
        return {
            newDocument: document,
            removed: removed
        };
    },
    move: function(obj, key, document) {
        /* in case move target overwrites an existing value,
        return the removed value, this can be taxing performance-wise,
        and is potentially unneeded */ var removed = $b529c12bbc8c5747$export$76eb22daa3ab123e(document, this.path);
        if (removed) removed = (0, $kqYQj._deepClone)(removed);
        var originalValue = $b529c12bbc8c5747$export$c8dff1b83c22eaf2(document, {
            op: "remove",
            path: this.from
        }).removed;
        $b529c12bbc8c5747$export$c8dff1b83c22eaf2(document, {
            op: "add",
            path: this.path,
            value: originalValue
        });
        return {
            newDocument: document,
            removed: removed
        };
    },
    copy: function(obj, key, document) {
        var valueToCopy = $b529c12bbc8c5747$export$76eb22daa3ab123e(document, this.from);
        // enforce copy by value so further operations don't affect source (see issue #177)
        $b529c12bbc8c5747$export$c8dff1b83c22eaf2(document, {
            op: "add",
            path: this.path,
            value: (0, $kqYQj._deepClone)(valueToCopy)
        });
        return {
            newDocument: document
        };
    },
    test: function(obj, key, document) {
        return {
            newDocument: document,
            test: $b529c12bbc8c5747$export$6cabac8132d3b997(obj[key], this.value)
        };
    },
    _get: function(obj, key, document) {
        this.value = obj[key];
        return {
            newDocument: document
        };
    }
};
/* The operations applicable to an array. Many are the same as for the object */ var $b529c12bbc8c5747$var$arrOps = {
    add: function(arr, i, document) {
        if ((0, $kqYQj.isInteger)(i)) arr.splice(i, 0, this.value);
        else arr[i] = this.value;
        // this may be needed when using '-' in an array
        return {
            newDocument: document,
            index: i
        };
    },
    remove: function(arr, i, document) {
        var removedList = arr.splice(i, 1);
        return {
            newDocument: document,
            removed: removedList[0]
        };
    },
    replace: function(arr, i, document) {
        var removed = arr[i];
        arr[i] = this.value;
        return {
            newDocument: document,
            removed: removed
        };
    },
    move: $b529c12bbc8c5747$var$objOps.move,
    copy: $b529c12bbc8c5747$var$objOps.copy,
    test: $b529c12bbc8c5747$var$objOps.test,
    _get: $b529c12bbc8c5747$var$objOps._get
};
function $b529c12bbc8c5747$export$76eb22daa3ab123e(document, pointer) {
    if (pointer == "") return document;
    var getOriginalDestination = {
        op: "_get",
        path: pointer
    };
    $b529c12bbc8c5747$export$c8dff1b83c22eaf2(document, getOriginalDestination);
    return getOriginalDestination.value;
}
function $b529c12bbc8c5747$export$c8dff1b83c22eaf2(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
    if (validateOperation === void 0) validateOperation = false;
    if (mutateDocument === void 0) mutateDocument = true;
    if (banPrototypeModifications === void 0) banPrototypeModifications = true;
    if (index === void 0) index = 0;
    if (validateOperation) {
        if (typeof validateOperation == "function") validateOperation(operation, 0, document, operation.path);
        else $b529c12bbc8c5747$export$956325f45c5d174a(operation, 0);
    }
    /* ROOT OPERATIONS */ if (operation.path === "") {
        var returnValue = {
            newDocument: document
        };
        if (operation.op === "add") {
            returnValue.newDocument = operation.value;
            return returnValue;
        } else if (operation.op === "replace") {
            returnValue.newDocument = operation.value;
            returnValue.removed = document; //document we removed
            return returnValue;
        } else if (operation.op === "move" || operation.op === "copy") {
            returnValue.newDocument = $b529c12bbc8c5747$export$76eb22daa3ab123e(document, operation.from); // get the value by json-pointer in `from` field
            if (operation.op === "move") returnValue.removed = document;
            return returnValue;
        } else if (operation.op === "test") {
            returnValue.test = $b529c12bbc8c5747$export$6cabac8132d3b997(document, operation.value);
            if (returnValue.test === false) throw new $b529c12bbc8c5747$export$b08003336606c830("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document);
            returnValue.newDocument = document;
            return returnValue;
        } else if (operation.op === "remove") {
            returnValue.removed = document;
            returnValue.newDocument = null;
            return returnValue;
        } else if (operation.op === "_get") {
            operation.value = document;
            return returnValue;
        } else {
            if (validateOperation) throw new $b529c12bbc8c5747$export$b08003336606c830("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index, operation, document);
            else return returnValue;
        }
    } else {
        if (!mutateDocument) document = (0, $kqYQj._deepClone)(document);
        var path = operation.path || "";
        var keys = path.split("/");
        var obj = document;
        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift
        var len = keys.length;
        var existingPathFragment = undefined;
        var key = void 0;
        var validateFunction = void 0;
        if (typeof validateOperation == "function") validateFunction = validateOperation;
        else validateFunction = $b529c12bbc8c5747$export$956325f45c5d174a;
        while(true){
            key = keys[t];
            if (key && key.indexOf("~") != -1) key = (0, $kqYQj.unescapePathComponent)(key);
            if (banPrototypeModifications && (key == "__proto__" || key == "prototype" && t > 0 && keys[t - 1] == "constructor")) throw new TypeError("JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");
            if (validateOperation) {
                if (existingPathFragment === undefined) {
                    if (obj[key] === undefined) existingPathFragment = keys.slice(0, t).join("/");
                    else if (t == len - 1) existingPathFragment = operation.path;
                    if (existingPathFragment !== undefined) validateFunction(operation, 0, document, existingPathFragment);
                }
            }
            t++;
            if (Array.isArray(obj)) {
                if (key === "-") key = obj.length;
                else {
                    if (validateOperation && !(0, $kqYQj.isInteger)(key)) throw new $b529c12bbc8c5747$export$b08003336606c830("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document);
                    else if ((0, $kqYQj.isInteger)(key)) key = ~~key;
                }
                if (t >= len) {
                    if (validateOperation && operation.op === "add" && key > obj.length) throw new $b529c12bbc8c5747$export$b08003336606c830("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document);
                    var returnValue = $b529c12bbc8c5747$var$arrOps[operation.op].call(operation, obj, key, document); // Apply patch
                    if (returnValue.test === false) throw new $b529c12bbc8c5747$export$b08003336606c830("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document);
                    return returnValue;
                }
            } else if (t >= len) {
                var returnValue = $b529c12bbc8c5747$var$objOps[operation.op].call(operation, obj, key, document); // Apply patch
                if (returnValue.test === false) throw new $b529c12bbc8c5747$export$b08003336606c830("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document);
                return returnValue;
            }
            obj = obj[key];
            // If we have more keys in the path, but the next value isn't a non-null object,
            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.
            if (validateOperation && t < len && (!obj || typeof obj !== "object")) throw new $b529c12bbc8c5747$export$b08003336606c830("Cannot perform operation at the desired path", "OPERATION_PATH_UNRESOLVABLE", index, operation, document);
        }
    }
}
function $b529c12bbc8c5747$export$7383fd3fd73657b6(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {
    if (mutateDocument === void 0) mutateDocument = true;
    if (banPrototypeModifications === void 0) banPrototypeModifications = true;
    if (validateOperation) {
        if (!Array.isArray(patch)) throw new $b529c12bbc8c5747$export$b08003336606c830("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
    }
    if (!mutateDocument) document = (0, $kqYQj._deepClone)(document);
    var results = new Array(patch.length);
    for(var i = 0, length_1 = patch.length; i < length_1; i++){
        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`
        results[i] = $b529c12bbc8c5747$export$c8dff1b83c22eaf2(document, patch[i], validateOperation, true, banPrototypeModifications, i);
        document = results[i].newDocument; // in case root was replaced
    }
    results.newDocument = document;
    return results;
}
function $b529c12bbc8c5747$export$69915a94c4b58251(document, operation, index) {
    var operationResult = $b529c12bbc8c5747$export$c8dff1b83c22eaf2(document, operation);
    if (operationResult.test === false) throw new $b529c12bbc8c5747$export$b08003336606c830("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document);
    return operationResult.newDocument;
}
function $b529c12bbc8c5747$export$956325f45c5d174a(operation, index, document, existingPathFragment) {
    if (typeof operation !== "object" || operation === null || Array.isArray(operation)) throw new $b529c12bbc8c5747$export$b08003336606c830("Operation is not an object", "OPERATION_NOT_AN_OBJECT", index, operation, document);
    else if (!$b529c12bbc8c5747$var$objOps[operation.op]) throw new $b529c12bbc8c5747$export$b08003336606c830("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index, operation, document);
    else if (typeof operation.path !== "string") throw new $b529c12bbc8c5747$export$b08003336606c830("Operation `path` property is not a string", "OPERATION_PATH_INVALID", index, operation, document);
    else if (operation.path.indexOf("/") !== 0 && operation.path.length > 0) // paths that aren't empty string should start with "/"
    throw new $b529c12bbc8c5747$export$b08003336606c830('Operation `path` property must start with "/"', "OPERATION_PATH_INVALID", index, operation, document);
    else if ((operation.op === "move" || operation.op === "copy") && typeof operation.from !== "string") throw new $b529c12bbc8c5747$export$b08003336606c830("Operation `from` property is not present (applicable in `move` and `copy` operations)", "OPERATION_FROM_REQUIRED", index, operation, document);
    else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && operation.value === undefined) throw new $b529c12bbc8c5747$export$b08003336606c830("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_REQUIRED", index, operation, document);
    else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && (0, $kqYQj.hasUndefined)(operation.value)) throw new $b529c12bbc8c5747$export$b08003336606c830("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED", index, operation, document);
    else if (document) {
        if (operation.op == "add") {
            var pathLen = operation.path.split("/").length;
            var existingPathLen = existingPathFragment.split("/").length;
            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) throw new $b529c12bbc8c5747$export$b08003336606c830("Cannot perform an `add` operation at the desired path", "OPERATION_PATH_CANNOT_ADD", index, operation, document);
        } else if (operation.op === "replace" || operation.op === "remove" || operation.op === "_get") {
            if (operation.path !== existingPathFragment) throw new $b529c12bbc8c5747$export$b08003336606c830("Cannot perform the operation at a path that does not exist", "OPERATION_PATH_UNRESOLVABLE", index, operation, document);
        } else if (operation.op === "move" || operation.op === "copy") {
            var existingValue = {
                op: "_get",
                path: operation.from,
                value: undefined
            };
            var error = $b529c12bbc8c5747$export$a22775fa5e2eebd9([
                existingValue
            ], document);
            if (error && error.name === "OPERATION_PATH_UNRESOLVABLE") throw new $b529c12bbc8c5747$export$b08003336606c830("Cannot perform the operation from a path that does not exist", "OPERATION_FROM_UNRESOLVABLE", index, operation, document);
        }
    }
}
function $b529c12bbc8c5747$export$a22775fa5e2eebd9(sequence, document, externalValidator) {
    try {
        if (!Array.isArray(sequence)) throw new $b529c12bbc8c5747$export$b08003336606c830("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
        if (document) //clone document and sequence so that we can safely try applying operations
        $b529c12bbc8c5747$export$7383fd3fd73657b6((0, $kqYQj._deepClone)(document), (0, $kqYQj._deepClone)(sequence), externalValidator || true);
        else {
            externalValidator = externalValidator || $b529c12bbc8c5747$export$956325f45c5d174a;
            for(var i = 0; i < sequence.length; i++)externalValidator(sequence[i], i, document, undefined);
        }
    } catch (e) {
        if (e instanceof $b529c12bbc8c5747$export$b08003336606c830) return e;
        else throw e;
    }
}
function $b529c12bbc8c5747$export$6cabac8132d3b997(a, b) {
    if (a === b) return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;
        if (arrA && arrB) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; i-- !== 0;)if (!$b529c12bbc8c5747$export$6cabac8132d3b997(a[i], b[i])) return false;
            return true;
        }
        if (arrA != arrB) return false;
        var keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; i-- !== 0;)if (!b.hasOwnProperty(keys[i])) return false;
        for(i = length; i-- !== 0;){
            key = keys[i];
            if (!$b529c12bbc8c5747$export$6cabac8132d3b997(a[key], b[key])) return false;
        }
        return true;
    }
    return a !== a && b !== b;
}

});
parcelRegister("kqYQj", function(module, exports) {

$parcel$export(module.exports, "hasOwnProperty", () => $cd8c04cff1abcf15$export$5a15a386532a5ea4);
$parcel$export(module.exports, "_objectKeys", () => $cd8c04cff1abcf15$export$612729bc7b5af0e1);
$parcel$export(module.exports, "_deepClone", () => $cd8c04cff1abcf15$export$30e5c1af6b2bfcc9);
$parcel$export(module.exports, "isInteger", () => $cd8c04cff1abcf15$export$a287f47fed4544b8);
$parcel$export(module.exports, "escapePathComponent", () => $cd8c04cff1abcf15$export$12a12353f06097f4);
$parcel$export(module.exports, "unescapePathComponent", () => $cd8c04cff1abcf15$export$44050cece5779d54);
$parcel$export(module.exports, "hasUndefined", () => $cd8c04cff1abcf15$export$9156409884499467);
$parcel$export(module.exports, "PatchError", () => $cd8c04cff1abcf15$export$a87af518d936c0f);
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2022 Joachim Wester
 * MIT licensed
 */ var $cd8c04cff1abcf15$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $cd8c04cff1abcf15$var$_hasOwnProperty = Object.prototype.hasOwnProperty;
function $cd8c04cff1abcf15$export$5a15a386532a5ea4(obj, key) {
    return $cd8c04cff1abcf15$var$_hasOwnProperty.call(obj, key);
}
function $cd8c04cff1abcf15$export$612729bc7b5af0e1(obj) {
    if (Array.isArray(obj)) {
        var keys_1 = new Array(obj.length);
        for(var k = 0; k < keys_1.length; k++)keys_1[k] = "" + k;
        return keys_1;
    }
    if (Object.keys) return Object.keys(obj);
    var keys = [];
    for(var i in obj)if ($cd8c04cff1abcf15$export$5a15a386532a5ea4(obj, i)) keys.push(i);
    return keys;
}
function $cd8c04cff1abcf15$export$30e5c1af6b2bfcc9(obj) {
    switch(typeof obj){
        case "object":
            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
        case "undefined":
            return null; //this is how JSON.stringify behaves for array items
        default:
            return obj; //no need to clone primitives
    }
}
function $cd8c04cff1abcf15$export$a287f47fed4544b8(str) {
    var i = 0;
    var len = str.length;
    var charCode;
    while(i < len){
        charCode = str.charCodeAt(i);
        if (charCode >= 48 && charCode <= 57) {
            i++;
            continue;
        }
        return false;
    }
    return true;
}
function $cd8c04cff1abcf15$export$12a12353f06097f4(path) {
    if (path.indexOf("/") === -1 && path.indexOf("~") === -1) return path;
    return path.replace(/~/g, "~0").replace(/\//g, "~1");
}
function $cd8c04cff1abcf15$export$44050cece5779d54(path) {
    return path.replace(/~1/g, "/").replace(/~0/g, "~");
}
function $cd8c04cff1abcf15$export$8b88a033a1d9dadb(root, obj) {
    var found;
    for(var key in root)if ($cd8c04cff1abcf15$export$5a15a386532a5ea4(root, key)) {
        if (root[key] === obj) return $cd8c04cff1abcf15$export$12a12353f06097f4(key) + "/";
        else if (typeof root[key] === "object") {
            found = $cd8c04cff1abcf15$export$8b88a033a1d9dadb(root[key], obj);
            if (found != "") return $cd8c04cff1abcf15$export$12a12353f06097f4(key) + "/" + found;
        }
    }
    return "";
}
function $cd8c04cff1abcf15$export$2aa3fd96c49a84a8(root, obj) {
    if (root === obj) return "/";
    var path = $cd8c04cff1abcf15$export$8b88a033a1d9dadb(root, obj);
    if (path === "") throw new Error("Object not found in root");
    return "/" + path;
}
function $cd8c04cff1abcf15$export$9156409884499467(obj) {
    if (obj === undefined) return true;
    if (obj) {
        if (Array.isArray(obj)) for(var i_1 = 0, len = obj.length; i_1 < len; i_1++){
            if ($cd8c04cff1abcf15$export$9156409884499467(obj[i_1])) return true;
        }
        else if (typeof obj === "object") {
            var objKeys = $cd8c04cff1abcf15$export$612729bc7b5af0e1(obj);
            var objKeysLength = objKeys.length;
            for(var i = 0; i < objKeysLength; i++){
                if ($cd8c04cff1abcf15$export$9156409884499467(obj[objKeys[i]])) return true;
            }
        }
    }
    return false;
}
function $cd8c04cff1abcf15$var$patchErrorMessageFormatter(message, args) {
    var messageParts = [
        message
    ];
    for(var key in args){
        var value = typeof args[key] === "object" ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print
        if (typeof value !== "undefined") messageParts.push(key + ": " + value);
    }
    return messageParts.join("\n");
}
var $cd8c04cff1abcf15$export$a87af518d936c0f = /** @class */ function(_super) {
    $cd8c04cff1abcf15$var$__extends(PatchError, _super);
    function PatchError(message, name, index, operation, tree) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, $cd8c04cff1abcf15$var$patchErrorMessageFormatter(message, {
            name: name,
            index: index,
            operation: operation,
            tree: tree
        })) || this;
        _this.name = name;
        _this.index = index;
        _this.operation = operation;
        _this.tree = tree;
        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359
        _this.message = $cd8c04cff1abcf15$var$patchErrorMessageFormatter(message, {
            name: name,
            index: index,
            operation: operation,
            tree: tree
        });
        return _this;
    }
    return PatchError;
}(Error);

});


parcelRegister("lXJAc", function(module, exports) {
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2021 Joachim Wester
 * MIT license
 */ 
var $kqYQj = parcelRequire("kqYQj");

var $a2rjX = parcelRequire("a2rjX");
var $ff8f6a0d5442059e$var$beforeDict = new WeakMap();
var $ff8f6a0d5442059e$var$Mirror = /** @class */ function() {
    function Mirror(obj) {
        this.observers = new Map();
        this.obj = obj;
    }
    return Mirror;
}();
var $ff8f6a0d5442059e$var$ObserverInfo = /** @class */ function() {
    function ObserverInfo(callback, observer) {
        this.callback = callback;
        this.observer = observer;
    }
    return ObserverInfo;
}();
function $ff8f6a0d5442059e$var$getMirror(obj) {
    return $ff8f6a0d5442059e$var$beforeDict.get(obj);
}
function $ff8f6a0d5442059e$var$getObserverFromMirror(mirror, callback) {
    return mirror.observers.get(callback);
}
function $ff8f6a0d5442059e$var$removeObserverFromMirror(mirror, observer) {
    mirror.observers.delete(observer.callback);
}
function $ff8f6a0d5442059e$export$23a2283368c55ea2(root, observer) {
    observer.unobserve();
}
function $ff8f6a0d5442059e$export$d1203567a167490e(obj, callback) {
    var patches = [];
    var observer;
    var mirror = $ff8f6a0d5442059e$var$getMirror(obj);
    if (!mirror) {
        mirror = new $ff8f6a0d5442059e$var$Mirror(obj);
        $ff8f6a0d5442059e$var$beforeDict.set(obj, mirror);
    } else {
        var observerInfo = $ff8f6a0d5442059e$var$getObserverFromMirror(mirror, callback);
        observer = observerInfo && observerInfo.observer;
    }
    if (observer) return observer;
    observer = {};
    mirror.value = (0, $kqYQj._deepClone)(obj);
    if (callback) {
        observer.callback = callback;
        observer.next = null;
        var dirtyCheck = function() {
            $ff8f6a0d5442059e$export$80d376111cc09ad7(observer);
        };
        var fastCheck = function() {
            clearTimeout(observer.next);
            observer.next = setTimeout(dirtyCheck);
        };
        if (typeof window !== "undefined") {
            window.addEventListener("mouseup", fastCheck);
            window.addEventListener("keyup", fastCheck);
            window.addEventListener("mousedown", fastCheck);
            window.addEventListener("keydown", fastCheck);
            window.addEventListener("change", fastCheck);
        }
    }
    observer.patches = patches;
    observer.object = obj;
    observer.unobserve = function() {
        $ff8f6a0d5442059e$export$80d376111cc09ad7(observer);
        clearTimeout(observer.next);
        $ff8f6a0d5442059e$var$removeObserverFromMirror(mirror, observer);
        if (typeof window !== "undefined") {
            window.removeEventListener("mouseup", fastCheck);
            window.removeEventListener("keyup", fastCheck);
            window.removeEventListener("mousedown", fastCheck);
            window.removeEventListener("keydown", fastCheck);
            window.removeEventListener("change", fastCheck);
        }
    };
    mirror.observers.set(callback, new $ff8f6a0d5442059e$var$ObserverInfo(callback, observer));
    return observer;
}
function $ff8f6a0d5442059e$export$80d376111cc09ad7(observer, invertible) {
    if (invertible === void 0) invertible = false;
    var mirror = $ff8f6a0d5442059e$var$beforeDict.get(observer.object);
    $ff8f6a0d5442059e$var$_generate(mirror.value, observer.object, observer.patches, "", invertible);
    if (observer.patches.length) (0, $a2rjX.applyPatch)(mirror.value, observer.patches);
    var temp = observer.patches;
    if (temp.length > 0) {
        observer.patches = [];
        if (observer.callback) observer.callback(temp);
    }
    return temp;
}
// Dirty check if obj is different from mirror, generate patches and update mirror
function $ff8f6a0d5442059e$var$_generate(mirror, obj, patches, path, invertible) {
    if (obj === mirror) return;
    if (typeof obj.toJSON === "function") obj = obj.toJSON();
    var newKeys = (0, $kqYQj._objectKeys)(obj);
    var oldKeys = (0, $kqYQj._objectKeys)(mirror);
    var changed = false;
    var deleted = false;
    //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"
    for(var t = oldKeys.length - 1; t >= 0; t--){
        var key = oldKeys[t];
        var oldVal = mirror[key];
        if ((0, $kqYQj.hasOwnProperty)(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
            var newVal = obj[key];
            if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) $ff8f6a0d5442059e$var$_generate(oldVal, newVal, patches, path + "/" + (0, $kqYQj.escapePathComponent)(key), invertible);
            else if (oldVal !== newVal) {
                changed = true;
                if (invertible) patches.push({
                    op: "test",
                    path: path + "/" + (0, $kqYQj.escapePathComponent)(key),
                    value: (0, $kqYQj._deepClone)(oldVal)
                });
                patches.push({
                    op: "replace",
                    path: path + "/" + (0, $kqYQj.escapePathComponent)(key),
                    value: (0, $kqYQj._deepClone)(newVal)
                });
            }
        } else if (Array.isArray(mirror) === Array.isArray(obj)) {
            if (invertible) patches.push({
                op: "test",
                path: path + "/" + (0, $kqYQj.escapePathComponent)(key),
                value: (0, $kqYQj._deepClone)(oldVal)
            });
            patches.push({
                op: "remove",
                path: path + "/" + (0, $kqYQj.escapePathComponent)(key)
            });
            deleted = true; // property has been deleted
        } else {
            if (invertible) patches.push({
                op: "test",
                path: path,
                value: mirror
            });
            patches.push({
                op: "replace",
                path: path,
                value: obj
            });
            changed = true;
        }
    }
    if (!deleted && newKeys.length == oldKeys.length) return;
    for(var t = 0; t < newKeys.length; t++){
        var key = newKeys[t];
        if (!(0, $kqYQj.hasOwnProperty)(mirror, key) && obj[key] !== undefined) patches.push({
            op: "add",
            path: path + "/" + (0, $kqYQj.escapePathComponent)(key),
            value: (0, $kqYQj._deepClone)(obj[key])
        });
    }
}
function $ff8f6a0d5442059e$export$398604a469f7de9a(tree1, tree2, invertible) {
    if (invertible === void 0) invertible = false;
    var patches = [];
    $ff8f6a0d5442059e$var$_generate(tree1, tree2, patches, "", invertible);
    return patches;
}

});


parcelRegister("foI6V", function(module, exports) {
"use strict";
// Note: This regex matches even invalid JSON strings, but since we’re
// working on the output of `JSON.stringify` we know that only valid strings
// are present (unless the user supplied a weird `options.indent` but in
// that case we don’t care since the output would be invalid anyway).
var $b35b505cf8584885$var$stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;
module.exports = function stringify(passedObj, options) {
    var indent, maxLength, replacer;
    options = options || {};
    indent = JSON.stringify([
        1
    ], undefined, options.indent === undefined ? 2 : options.indent).slice(2, -3);
    maxLength = indent === "" ? Infinity : options.maxLength === undefined ? 80 : options.maxLength;
    replacer = options.replacer;
    return function _stringify(obj, currentIndent, reserved) {
        // prettier-ignore
        var end, index, items, key, keyPart, keys, length, nextIndent, prettified, start, string, value;
        if (obj && typeof obj.toJSON === "function") obj = obj.toJSON();
        string = JSON.stringify(obj, replacer);
        if (string === undefined) return string;
        length = maxLength - currentIndent.length - reserved;
        if (string.length <= length) {
            prettified = string.replace($b35b505cf8584885$var$stringOrChar, function(match, stringLiteral) {
                return stringLiteral || match + " ";
            });
            if (prettified.length <= length) return prettified;
        }
        if (replacer != null) {
            obj = JSON.parse(string);
            replacer = undefined;
        }
        if (typeof obj === "object" && obj !== null) {
            nextIndent = currentIndent + indent;
            items = [];
            index = 0;
            if (Array.isArray(obj)) {
                start = "[";
                end = "]";
                length = obj.length;
                for(; index < length; index++)items.push(_stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) || "null");
            } else {
                start = "{";
                end = "}";
                keys = Object.keys(obj);
                length = keys.length;
                for(; index < length; index++){
                    key = keys[index];
                    keyPart = JSON.stringify(key) + ": ";
                    value = _stringify(obj[key], nextIndent, keyPart.length + (index === length - 1 ? 0 : 1));
                    if (value !== undefined) items.push(keyPart + value);
                }
            }
            if (items.length > 0) return [
                start,
                indent + items.join(",\n" + nextIndent),
                end
            ].join("\n" + currentIndent);
        }
        return string;
    }(passedObj, "", 0);
};

});

parcelRegister("h0YPc", function(module, exports) {

$parcel$export(module.exports, "version", () => $c6319e4e678d76be$export$83d89fbfd8236492);
$parcel$export(module.exports, "Dataflow", () => (parcelRequire("4jOgW")).Dataflow);
$parcel$export(module.exports, "EventStream", () => (parcelRequire("4jOgW")).EventStream);
$parcel$export(module.exports, "MultiPulse", () => (parcelRequire("4jOgW")).MultiPulse);
$parcel$export(module.exports, "Operator", () => (parcelRequire("4jOgW")).Operator);
$parcel$export(module.exports, "Parameters", () => (parcelRequire("4jOgW")).Parameters);
$parcel$export(module.exports, "Pulse", () => (parcelRequire("4jOgW")).Pulse);
$parcel$export(module.exports, "Transform", () => (parcelRequire("4jOgW")).Transform);
$parcel$export(module.exports, "changeset", () => (parcelRequire("4jOgW")).changeset);
$parcel$export(module.exports, "definition", () => (parcelRequire("4jOgW")).definition);
$parcel$export(module.exports, "ingest", () => (parcelRequire("4jOgW")).ingest);
$parcel$export(module.exports, "isTuple", () => (parcelRequire("4jOgW")).isTuple);
$parcel$export(module.exports, "transform", () => (parcelRequire("4jOgW")).transform);
$parcel$export(module.exports, "transforms", () => (parcelRequire("4jOgW")).transforms);
$parcel$export(module.exports, "tupleid", () => (parcelRequire("4jOgW")).tupleid);
$parcel$export(module.exports, "interpolate", () => (parcelRequire("1UqgZ")).interpolate);
$parcel$export(module.exports, "interpolateColors", () => (parcelRequire("1UqgZ")).interpolateColors);
$parcel$export(module.exports, "interpolateRange", () => (parcelRequire("1UqgZ")).interpolateRange);
$parcel$export(module.exports, "quantizeInterpolator", () => (parcelRequire("1UqgZ")).quantizeInterpolator);
$parcel$export(module.exports, "scale", () => (parcelRequire("1UqgZ")).scale);
$parcel$export(module.exports, "scheme", () => (parcelRequire("1UqgZ")).scheme);
$parcel$export(module.exports, "projection", () => (parcelRequire("hepJ1")).projection);
$parcel$export(module.exports, "View", () => (parcelRequire("hd7ZC")).View);
$parcel$export(module.exports, "defaultLocale", () => (parcelRequire("dcUFF")).defaultLocale);
$parcel$export(module.exports, "formatLocale", () => (parcelRequire("dcUFF")).numberFormatDefaultLocale);
$parcel$export(module.exports, "locale", () => (parcelRequire("dcUFF")).locale);
$parcel$export(module.exports, "resetDefaultLocale", () => (parcelRequire("dcUFF")).resetDefaultLocale);
$parcel$export(module.exports, "timeFormatLocale", () => (parcelRequire("dcUFF")).timeFormatDefaultLocale);
$parcel$export(module.exports, "expressionFunction", () => (parcelRequire("Us6QS")).expressionFunction);
$parcel$export(module.exports, "parse", () => (parcelRequire("60tJ7")).parse);
$parcel$export(module.exports, "runtimeContext", () => (parcelRequire("gDxmt")).context);
$parcel$export(module.exports, "codegenExpression", () => (parcelRequire("60BEk")).codegenExpression);
$parcel$export(module.exports, "parseExpression", () => (parcelRequire("60BEk")).parseExpression);
$parcel$export(module.exports, "parseSelector", () => (parcelRequire("jOgxz")).parseSelector);

var $4SWbq = parcelRequire("4SWbq");

var $4jOgW = parcelRequire("4jOgW");

var $5iIW5 = parcelRequire("5iIW5");

var $31A4s = parcelRequire("31A4s");

var $frbSa = parcelRequire("frbSa");

var $fRw1v = parcelRequire("fRw1v");

var $krjdL = parcelRequire("krjdL");

var $812XD = parcelRequire("812XD");

var $4Ngm4 = parcelRequire("4Ngm4");

var $87Rtn = parcelRequire("87Rtn");

var $9oRV0 = parcelRequire("9oRV0");

var $7GfHa = parcelRequire("7GfHa");

var $hobCQ = parcelRequire("hobCQ");

var $7Par0 = parcelRequire("7Par0");

var $i7MAj = parcelRequire("i7MAj");

var $2ttvf = parcelRequire("2ttvf");

var $d6kNj = parcelRequire("d6kNj");

var $1UqgZ = parcelRequire("1UqgZ");

var $hepJ1 = parcelRequire("hepJ1");

var $hd7ZC = parcelRequire("hd7ZC");

var $dcUFF = parcelRequire("dcUFF");

var $Us6QS = parcelRequire("Us6QS");

var $60tJ7 = parcelRequire("60tJ7");

var $gDxmt = parcelRequire("gDxmt");

var $60BEk = parcelRequire("60BEk");

var $jOgxz = parcelRequire("jOgxz");
var $c6319e4e678d76be$export$83d89fbfd8236492 = "5.25.0";
// -- Transforms -----
(0, $4SWbq.extend)((0, $4jOgW.transforms), $5iIW5, $31A4s, $frbSa, $fRw1v, $krjdL, $4Ngm4, $812XD, $87Rtn, $9oRV0, $7GfHa, $hobCQ);
$parcel$exportWildcard(module.exports, $4SWbq);
$parcel$exportWildcard(module.exports, $7Par0);
$parcel$exportWildcard(module.exports, $i7MAj);
$parcel$exportWildcard(module.exports, $2ttvf);
$parcel$exportWildcard(module.exports, $d6kNj);

});
parcelRegister("4SWbq", function(module, exports) {

$parcel$export(module.exports, "accessor", () => $38e9568d82b422e1$export$db0b1f6ca4bf0c76);
$parcel$export(module.exports, "accessorName", () => $38e9568d82b422e1$export$1653da1e2ededc21);
$parcel$export(module.exports, "accessorFields", () => $38e9568d82b422e1$export$68502a055ebe78c2);
$parcel$export(module.exports, "error", () => $38e9568d82b422e1$export$a3bc9b8ed74fc);
$parcel$export(module.exports, "splitAccessPath", () => $38e9568d82b422e1$export$91fa45d315aa4370);
$parcel$export(module.exports, "field", () => $38e9568d82b422e1$export$e0f35d825088c098);
$parcel$export(module.exports, "id", () => $38e9568d82b422e1$export$d560c7e4a29451c2);
$parcel$export(module.exports, "identity", () => $38e9568d82b422e1$export$f0954fd7d5368655);
$parcel$export(module.exports, "zero", () => $38e9568d82b422e1$export$7f9972325ebfd559);
$parcel$export(module.exports, "one", () => $38e9568d82b422e1$export$80bf7733f1207381);
$parcel$export(module.exports, "truthy", () => $38e9568d82b422e1$export$b07e0827c17e3bee);
$parcel$export(module.exports, "falsy", () => $38e9568d82b422e1$export$74775dafe30d0d0a);
$parcel$export(module.exports, "None", () => $38e9568d82b422e1$export$57ca7e07b341709d);
$parcel$export(module.exports, "Error", () => $38e9568d82b422e1$export$edf27be85e5f6da0);
$parcel$export(module.exports, "Warn", () => $38e9568d82b422e1$export$6c2e13f7f67a7c09);
$parcel$export(module.exports, "Info", () => $38e9568d82b422e1$export$c4868e4a24d48fad);
$parcel$export(module.exports, "Debug", () => $38e9568d82b422e1$export$153e5dc2c098b35c);
$parcel$export(module.exports, "logger", () => $38e9568d82b422e1$export$af88d00dbe7f521);
$parcel$export(module.exports, "isArray", () => $38e9568d82b422e1$export$43bee75e5e14138e);
$parcel$export(module.exports, "isObject", () => $38e9568d82b422e1$export$a6cdc56e425d0d0a);
$parcel$export(module.exports, "mergeConfig", () => $38e9568d82b422e1$export$7ec1ebcfa9d8bd6a);
$parcel$export(module.exports, "writeConfig", () => $38e9568d82b422e1$export$62c85832a8c2c892);
$parcel$export(module.exports, "peek", () => $38e9568d82b422e1$export$4d3fb11e950abb9e);
$parcel$export(module.exports, "toNumber", () => $38e9568d82b422e1$export$a0a81dc3380ce7d3);
$parcel$export(module.exports, "panLinear", () => $38e9568d82b422e1$export$3df8aabe23053c01);
$parcel$export(module.exports, "panLog", () => $38e9568d82b422e1$export$7f25d74341d88ff6);
$parcel$export(module.exports, "panPow", () => $38e9568d82b422e1$export$a3d506d9803d02dc);
$parcel$export(module.exports, "panSymlog", () => $38e9568d82b422e1$export$b2c2ea35dd107bb6);
$parcel$export(module.exports, "zoomLinear", () => $38e9568d82b422e1$export$7e8a2f109f59f2ae);
$parcel$export(module.exports, "zoomLog", () => $38e9568d82b422e1$export$c0b18e310866ea9a);
$parcel$export(module.exports, "zoomPow", () => $38e9568d82b422e1$export$5f95cf1bf58f5b95);
$parcel$export(module.exports, "zoomSymlog", () => $38e9568d82b422e1$export$d68222fc4b6defa1);
$parcel$export(module.exports, "quarter", () => $38e9568d82b422e1$export$813f5834b9d5379d);
$parcel$export(module.exports, "utcquarter", () => $38e9568d82b422e1$export$db9b119ae18dbbed);
$parcel$export(module.exports, "array", () => $38e9568d82b422e1$export$2f23118c22fb2630);
$parcel$export(module.exports, "clampRange", () => $38e9568d82b422e1$export$e9d4863bcce07ce9);
$parcel$export(module.exports, "isFunction", () => $38e9568d82b422e1$export$f6e2535fb5126e54);
$parcel$export(module.exports, "compare", () => $38e9568d82b422e1$export$398604a469f7de9a);
$parcel$export(module.exports, "ascending", () => $38e9568d82b422e1$export$fcb633242ef15540);
$parcel$export(module.exports, "constant", () => $38e9568d82b422e1$export$c983f826f44ff86);
$parcel$export(module.exports, "debounce", () => $38e9568d82b422e1$export$61fc7d43ac8f84b0);
$parcel$export(module.exports, "extend", () => $38e9568d82b422e1$export$8b58be045bf06082);
$parcel$export(module.exports, "extent", () => $38e9568d82b422e1$export$6d28227ee394ab2a);
$parcel$export(module.exports, "extentIndex", () => $38e9568d82b422e1$export$c35a1b04c3b4912b);
$parcel$export(module.exports, "hasOwnProperty", () => $38e9568d82b422e1$export$5a15a386532a5ea4);
$parcel$export(module.exports, "fastmap", () => $38e9568d82b422e1$export$a9f822e144f35d84);
$parcel$export(module.exports, "flush", () => $38e9568d82b422e1$export$4909b86c8034bf73);
$parcel$export(module.exports, "inherits", () => $38e9568d82b422e1$export$69f1b2dcda23c5f8);
$parcel$export(module.exports, "inrange", () => $38e9568d82b422e1$export$ee19ee26d8849835);
$parcel$export(module.exports, "isBoolean", () => $38e9568d82b422e1$export$f9ce7b637dfbe238);
$parcel$export(module.exports, "isDate", () => $38e9568d82b422e1$export$871608497c498473);
$parcel$export(module.exports, "isIterable", () => $38e9568d82b422e1$export$9652023d9040757);
$parcel$export(module.exports, "isNumber", () => $38e9568d82b422e1$export$7e4aa119212bc614);
$parcel$export(module.exports, "isRegExp", () => $38e9568d82b422e1$export$49841c62b9eff15);
$parcel$export(module.exports, "isString", () => $38e9568d82b422e1$export$844ec244b1367d54);
$parcel$export(module.exports, "key", () => $38e9568d82b422e1$export$df61b30b684217c0);
$parcel$export(module.exports, "lerp", () => $38e9568d82b422e1$export$3a89f8d6f6bf6c9f);
$parcel$export(module.exports, "lruCache", () => $38e9568d82b422e1$export$441692190ec1da48);
$parcel$export(module.exports, "merge", () => $38e9568d82b422e1$export$4950aa0f605343fb);
$parcel$export(module.exports, "repeat", () => $38e9568d82b422e1$export$76d90c956114f2c2);
$parcel$export(module.exports, "pad", () => $38e9568d82b422e1$export$5d04458e2a6c373e);
$parcel$export(module.exports, "span", () => $38e9568d82b422e1$export$afc1bfabebaf28a2);
$parcel$export(module.exports, "stringValue", () => $38e9568d82b422e1$export$732844b3d45b53a1);
$parcel$export(module.exports, "toBoolean", () => $38e9568d82b422e1$export$3c2e6d1b7583eee6);
$parcel$export(module.exports, "toDate", () => $38e9568d82b422e1$export$e67a095c620b86fe);
$parcel$export(module.exports, "toString", () => $38e9568d82b422e1$export$f84e8e69fd4488a5);
$parcel$export(module.exports, "toSet", () => $38e9568d82b422e1$export$f416efe173c6901c);
$parcel$export(module.exports, "truncate", () => $38e9568d82b422e1$export$6a506b36fdea397d);
$parcel$export(module.exports, "visitArray", () => $38e9568d82b422e1$export$62940ad51e5012c2);
function $38e9568d82b422e1$export$db0b1f6ca4bf0c76(fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
}
function $38e9568d82b422e1$export$1653da1e2ededc21(fn) {
    return fn == null ? null : fn.fname;
}
function $38e9568d82b422e1$export$68502a055ebe78c2(fn) {
    return fn == null ? null : fn.fields;
}
function $38e9568d82b422e1$var$getter(path) {
    return path.length === 1 ? $38e9568d82b422e1$var$get1(path[0]) : $38e9568d82b422e1$var$getN(path);
}
const $38e9568d82b422e1$var$get1 = (field)=>function(obj) {
        return obj[field];
    };
const $38e9568d82b422e1$var$getN = (path)=>{
    const len = path.length;
    return function(obj) {
        for(let i = 0; i < len; ++i)obj = obj[path[i]];
        return obj;
    };
};
function $38e9568d82b422e1$export$a3bc9b8ed74fc(message) {
    throw Error(message);
}
function $38e9568d82b422e1$export$91fa45d315aa4370(p) {
    const path = [], n = p.length;
    let q = null, b = 0, s = "", i, j, c;
    p = p + "";
    function push() {
        path.push(s + p.substring(i, j));
        s = "";
        i = j + 1;
    }
    for(i = j = 0; j < n; ++j){
        c = p[j];
        if (c === "\\") {
            s += p.substring(i, j++);
            i = j;
        } else if (c === q) {
            push();
            q = null;
            b = -1;
        } else if (q) continue;
        else if (i === b && c === '"') {
            i = j + 1;
            q = c;
        } else if (i === b && c === "'") {
            i = j + 1;
            q = c;
        } else if (c === "." && !b) {
            if (j > i) push();
            else i = j + 1;
        } else if (c === "[") {
            if (j > i) push();
            b = i = j + 1;
        } else if (c === "]") {
            if (!b) $38e9568d82b422e1$export$a3bc9b8ed74fc("Access path missing open bracket: " + p);
            if (b > 0) push();
            b = 0;
            i = j + 1;
        }
    }
    if (b) $38e9568d82b422e1$export$a3bc9b8ed74fc("Access path missing closing bracket: " + p);
    if (q) $38e9568d82b422e1$export$a3bc9b8ed74fc("Access path missing closing quote: " + p);
    if (j > i) {
        j++;
        push();
    }
    return path;
}
function $38e9568d82b422e1$export$e0f35d825088c098(field, name, opt) {
    const path = $38e9568d82b422e1$export$91fa45d315aa4370(field);
    field = path.length === 1 ? path[0] : field;
    return $38e9568d82b422e1$export$db0b1f6ca4bf0c76((opt && opt.get || $38e9568d82b422e1$var$getter)(path), [
        field
    ], name || field);
}
const $38e9568d82b422e1$export$d560c7e4a29451c2 = $38e9568d82b422e1$export$e0f35d825088c098("id");
const $38e9568d82b422e1$export$f0954fd7d5368655 = $38e9568d82b422e1$export$db0b1f6ca4bf0c76((_)=>_, [], "identity");
const $38e9568d82b422e1$export$7f9972325ebfd559 = $38e9568d82b422e1$export$db0b1f6ca4bf0c76(()=>0, [], "zero");
const $38e9568d82b422e1$export$80bf7733f1207381 = $38e9568d82b422e1$export$db0b1f6ca4bf0c76(()=>1, [], "one");
const $38e9568d82b422e1$export$b07e0827c17e3bee = $38e9568d82b422e1$export$db0b1f6ca4bf0c76(()=>true, [], "true");
const $38e9568d82b422e1$export$74775dafe30d0d0a = $38e9568d82b422e1$export$db0b1f6ca4bf0c76(()=>false, [], "false");
function $38e9568d82b422e1$var$log$1(method, level, input) {
    const args = [
        level
    ].concat([].slice.call(input));
    console[method].apply(console, args); // eslint-disable-line no-console
}
const $38e9568d82b422e1$export$57ca7e07b341709d = 0;
const $38e9568d82b422e1$export$edf27be85e5f6da0 = 1;
const $38e9568d82b422e1$export$6c2e13f7f67a7c09 = 2;
const $38e9568d82b422e1$export$c4868e4a24d48fad = 3;
const $38e9568d82b422e1$export$153e5dc2c098b35c = 4;
function $38e9568d82b422e1$export$af88d00dbe7f521(_, method) {
    let handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $38e9568d82b422e1$var$log$1;
    let level = _ || $38e9568d82b422e1$export$57ca7e07b341709d;
    return {
        level (_) {
            if (arguments.length) {
                level = +_;
                return this;
            } else return level;
        },
        error () {
            if (level >= $38e9568d82b422e1$export$edf27be85e5f6da0) handler(method || "error", "ERROR", arguments);
            return this;
        },
        warn () {
            if (level >= $38e9568d82b422e1$export$6c2e13f7f67a7c09) handler(method || "warn", "WARN", arguments);
            return this;
        },
        info () {
            if (level >= $38e9568d82b422e1$export$c4868e4a24d48fad) handler(method || "log", "INFO", arguments);
            return this;
        },
        debug () {
            if (level >= $38e9568d82b422e1$export$153e5dc2c098b35c) handler(method || "log", "DEBUG", arguments);
            return this;
        }
    };
}
var $38e9568d82b422e1$export$43bee75e5e14138e = Array.isArray;
function $38e9568d82b422e1$export$a6cdc56e425d0d0a(_) {
    return _ === Object(_);
}
const $38e9568d82b422e1$var$isLegalKey = (key)=>key !== "__proto__";
function $38e9568d82b422e1$export$7ec1ebcfa9d8bd6a() {
    for(var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++)configs[_key] = arguments[_key];
    return configs.reduce((out, source)=>{
        for(const key in source)if (key === "signals") // for signals, we merge the signals arrays
        // source signals take precedence over
        // existing signals with the same name
        out.signals = $38e9568d82b422e1$var$mergeNamed(out.signals, source.signals);
        else {
            // otherwise, merge objects subject to recursion constraints
            // for legend block, recurse for the layout entry only
            // for style block, recurse for all properties
            // otherwise, no recursion: objects overwrite, no merging
            const r = key === "legend" ? {
                layout: 1
            } : key === "style" ? true : null;
            $38e9568d82b422e1$export$62c85832a8c2c892(out, key, source[key], r);
        }
        return out;
    }, {});
}
function $38e9568d82b422e1$export$62c85832a8c2c892(output, key, value, recurse) {
    if (!$38e9568d82b422e1$var$isLegalKey(key)) return;
    let k, o;
    if ($38e9568d82b422e1$export$a6cdc56e425d0d0a(value) && !$38e9568d82b422e1$export$43bee75e5e14138e(value)) {
        o = $38e9568d82b422e1$export$a6cdc56e425d0d0a(output[key]) ? output[key] : output[key] = {};
        for(k in value){
            if (recurse && (recurse === true || recurse[k])) $38e9568d82b422e1$export$62c85832a8c2c892(o, k, value[k]);
            else if ($38e9568d82b422e1$var$isLegalKey(k)) o[k] = value[k];
        }
    } else output[key] = value;
}
function $38e9568d82b422e1$var$mergeNamed(a, b) {
    if (a == null) return b;
    const map = {}, out = [];
    function add(_) {
        if (!map[_.name]) {
            map[_.name] = 1;
            out.push(_);
        }
    }
    b.forEach(add);
    a.forEach(add);
    return out;
}
function $38e9568d82b422e1$export$4d3fb11e950abb9e(array) {
    return array[array.length - 1];
}
function $38e9568d82b422e1$export$a0a81dc3380ce7d3(_) {
    return _ == null || _ === "" ? null : +_;
}
const $38e9568d82b422e1$var$exp = (sign)=>(x)=>sign * Math.exp(x);
const $38e9568d82b422e1$var$log = (sign)=>(x)=>Math.log(sign * x);
const $38e9568d82b422e1$var$symlog = (c)=>(x)=>Math.sign(x) * Math.log1p(Math.abs(x / c));
const $38e9568d82b422e1$var$symexp = (c)=>(x)=>Math.sign(x) * Math.expm1(Math.abs(x)) * c;
const $38e9568d82b422e1$var$pow = (exponent)=>(x)=>x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
function $38e9568d82b422e1$var$pan(domain, delta, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift($38e9568d82b422e1$export$4d3fb11e950abb9e(domain)), dd = (d1 - d0) * delta;
    return [
        ground(d0 - dd),
        ground(d1 - dd)
    ];
}
function $38e9568d82b422e1$export$3df8aabe23053c01(domain, delta) {
    return $38e9568d82b422e1$var$pan(domain, delta, $38e9568d82b422e1$export$a0a81dc3380ce7d3, $38e9568d82b422e1$export$f0954fd7d5368655);
}
function $38e9568d82b422e1$export$7f25d74341d88ff6(domain, delta) {
    var sign = Math.sign(domain[0]);
    return $38e9568d82b422e1$var$pan(domain, delta, $38e9568d82b422e1$var$log(sign), $38e9568d82b422e1$var$exp(sign));
}
function $38e9568d82b422e1$export$a3d506d9803d02dc(domain, delta, exponent) {
    return $38e9568d82b422e1$var$pan(domain, delta, $38e9568d82b422e1$var$pow(exponent), $38e9568d82b422e1$var$pow(1 / exponent));
}
function $38e9568d82b422e1$export$b2c2ea35dd107bb6(domain, delta, constant) {
    return $38e9568d82b422e1$var$pan(domain, delta, $38e9568d82b422e1$var$symlog(constant), $38e9568d82b422e1$var$symexp(constant));
}
function $38e9568d82b422e1$var$zoom(domain, anchor, scale, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift($38e9568d82b422e1$export$4d3fb11e950abb9e(domain)), da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
    return [
        ground(da + (d0 - da) * scale),
        ground(da + (d1 - da) * scale)
    ];
}
function $38e9568d82b422e1$export$7e8a2f109f59f2ae(domain, anchor, scale) {
    return $38e9568d82b422e1$var$zoom(domain, anchor, scale, $38e9568d82b422e1$export$a0a81dc3380ce7d3, $38e9568d82b422e1$export$f0954fd7d5368655);
}
function $38e9568d82b422e1$export$c0b18e310866ea9a(domain, anchor, scale) {
    const sign = Math.sign(domain[0]);
    return $38e9568d82b422e1$var$zoom(domain, anchor, scale, $38e9568d82b422e1$var$log(sign), $38e9568d82b422e1$var$exp(sign));
}
function $38e9568d82b422e1$export$5f95cf1bf58f5b95(domain, anchor, scale, exponent) {
    return $38e9568d82b422e1$var$zoom(domain, anchor, scale, $38e9568d82b422e1$var$pow(exponent), $38e9568d82b422e1$var$pow(1 / exponent));
}
function $38e9568d82b422e1$export$d68222fc4b6defa1(domain, anchor, scale, constant) {
    return $38e9568d82b422e1$var$zoom(domain, anchor, scale, $38e9568d82b422e1$var$symlog(constant), $38e9568d82b422e1$var$symexp(constant));
}
function $38e9568d82b422e1$export$813f5834b9d5379d(date) {
    return 1 + ~~(new Date(date).getMonth() / 3);
}
function $38e9568d82b422e1$export$db9b119ae18dbbed(date) {
    return 1 + ~~(new Date(date).getUTCMonth() / 3);
}
function $38e9568d82b422e1$export$2f23118c22fb2630(_) {
    return _ != null ? $38e9568d82b422e1$export$43bee75e5e14138e(_) ? _ : [
        _
    ] : [];
}
/**
 * Span-preserving range clamp. If the span of the input range is less
 * than (max - min) and an endpoint exceeds either the min or max value,
 * the range is translated such that the span is preserved and one
 * endpoint touches the boundary of the min/max range.
 * If the span exceeds (max - min), the range [min, max] is returned.
 */ function $38e9568d82b422e1$export$e9d4863bcce07ce9(range, min, max) {
    let lo = range[0], hi = range[1], span;
    if (hi < lo) {
        span = hi;
        hi = lo;
        lo = span;
    }
    span = hi - lo;
    return span >= max - min ? [
        min,
        max
    ] : [
        lo = Math.min(Math.max(lo, min), max - span),
        lo + span
    ];
}
function $38e9568d82b422e1$export$f6e2535fb5126e54(_) {
    return typeof _ === "function";
}
const $38e9568d82b422e1$var$DESCENDING = "descending";
function $38e9568d82b422e1$export$398604a469f7de9a(fields, orders, opt) {
    opt = opt || {};
    orders = $38e9568d82b422e1$export$2f23118c22fb2630(orders) || [];
    const ord = [], get = [], fmap = {}, gen = opt.comparator || $38e9568d82b422e1$var$comparator;
    $38e9568d82b422e1$export$2f23118c22fb2630(fields).forEach((f, i)=>{
        if (f == null) return;
        ord.push(orders[i] === $38e9568d82b422e1$var$DESCENDING ? -1 : 1);
        get.push(f = $38e9568d82b422e1$export$f6e2535fb5126e54(f) ? f : $38e9568d82b422e1$export$e0f35d825088c098(f, null, opt));
        ($38e9568d82b422e1$export$68502a055ebe78c2(f) || []).forEach((_)=>fmap[_] = 1);
    });
    return get.length === 0 ? null : $38e9568d82b422e1$export$db0b1f6ca4bf0c76(gen(get, ord), Object.keys(fmap));
}
const $38e9568d82b422e1$export$fcb633242ef15540 = (u, v)=>(u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
const $38e9568d82b422e1$var$comparator = (fields, orders)=>fields.length === 1 ? $38e9568d82b422e1$var$compare1(fields[0], orders[0]) : $38e9568d82b422e1$var$compareN(fields, orders, fields.length);
const $38e9568d82b422e1$var$compare1 = (field, order)=>function(a, b) {
        return $38e9568d82b422e1$export$fcb633242ef15540(field(a), field(b)) * order;
    };
const $38e9568d82b422e1$var$compareN = (fields, orders, n)=>{
    orders.push(0); // pad zero for convenient lookup
    return function(a, b) {
        let f, c = 0, i = -1;
        while(c === 0 && ++i < n){
            f = fields[i];
            c = $38e9568d82b422e1$export$fcb633242ef15540(f(a), f(b));
        }
        return c * orders[i];
    };
};
function $38e9568d82b422e1$export$c983f826f44ff86(_) {
    return $38e9568d82b422e1$export$f6e2535fb5126e54(_) ? _ : ()=>_;
}
function $38e9568d82b422e1$export$61fc7d43ac8f84b0(delay, handler) {
    let tid;
    return (e)=>{
        if (tid) clearTimeout(tid);
        tid = setTimeout(()=>(handler(e), tid = null), delay);
    };
}
function $38e9568d82b422e1$export$8b58be045bf06082(_) {
    for(let x, k, i = 1, len = arguments.length; i < len; ++i){
        x = arguments[i];
        for(k in x)_[k] = x[k];
    }
    return _;
}
/**
 * Return an array with minimum and maximum values, in the
 * form [min, max]. Ignores null, undefined, and NaN values.
 */ function $38e9568d82b422e1$export$6d28227ee394ab2a(array, f) {
    let i = 0, n, v, min, max;
    if (array && (n = array.length)) {
        if (f == null) {
            // find first valid value
            for(v = array[i]; i < n && (v == null || v !== v); v = array[++i]);
            min = max = v;
            // visit all other values
            for(; i < n; ++i){
                v = array[i];
                // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        } else {
            // find first valid value
            for(v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i]));
            min = max = v;
            // visit all other values
            for(; i < n; ++i){
                v = f(array[i]);
                // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        }
    }
    return [
        min,
        max
    ];
}
function $38e9568d82b422e1$export$c35a1b04c3b4912b(array, f) {
    const n = array.length;
    let i = -1, a, b, c, u, v;
    if (f == null) {
        while(++i < n){
            b = array[i];
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = array[i];
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    } else {
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    }
    return [
        u,
        v
    ];
}
const $38e9568d82b422e1$var$hop = Object.prototype.hasOwnProperty;
function $38e9568d82b422e1$export$5a15a386532a5ea4(object, property) {
    return $38e9568d82b422e1$var$hop.call(object, property);
}
const $38e9568d82b422e1$var$NULL = {};
function $38e9568d82b422e1$export$a9f822e144f35d84(input) {
    let obj = {}, test;
    function has$1(key) {
        return $38e9568d82b422e1$export$5a15a386532a5ea4(obj, key) && obj[key] !== $38e9568d82b422e1$var$NULL;
    }
    const map = {
        size: 0,
        empty: 0,
        object: obj,
        has: has$1,
        get (key) {
            return has$1(key) ? obj[key] : undefined;
        },
        set (key, value) {
            if (!has$1(key)) {
                ++map.size;
                if (obj[key] === $38e9568d82b422e1$var$NULL) --map.empty;
            }
            obj[key] = value;
            return this;
        },
        delete (key) {
            if (has$1(key)) {
                --map.size;
                ++map.empty;
                obj[key] = $38e9568d82b422e1$var$NULL;
            }
            return this;
        },
        clear () {
            map.size = map.empty = 0;
            map.object = obj = {};
        },
        test (_) {
            if (arguments.length) {
                test = _;
                return map;
            } else return test;
        },
        clean () {
            const next = {};
            let size = 0;
            for(const key in obj){
                const value = obj[key];
                if (value !== $38e9568d82b422e1$var$NULL && (!test || !test(value))) {
                    next[key] = value;
                    ++size;
                }
            }
            map.size = size;
            map.empty = 0;
            map.object = obj = next;
        }
    };
    if (input) Object.keys(input).forEach((key)=>{
        map.set(key, input[key]);
    });
    return map;
}
function $38e9568d82b422e1$export$4909b86c8034bf73(range, value, threshold, left, right, center) {
    if (!threshold && threshold !== 0) return center;
    const t = +threshold;
    let a = range[0], b = $38e9568d82b422e1$export$4d3fb11e950abb9e(range), l;
    // swap endpoints if range is reversed
    if (b < a) {
        l = a;
        a = b;
        b = l;
    }
    // compare value to endpoints
    l = Math.abs(value - a);
    const r = Math.abs(b - value);
    // adjust if value is within threshold distance of endpoint
    return l < r && l <= t ? left : r <= t ? right : center;
}
function $38e9568d82b422e1$export$69f1b2dcda23c5f8(child, parent, members) {
    const proto = child.prototype = Object.create(parent.prototype);
    Object.defineProperty(proto, "constructor", {
        value: child,
        writable: true,
        enumerable: true,
        configurable: true
    });
    return $38e9568d82b422e1$export$8b58be045bf06082(proto, members);
}
/**
 * Predicate that returns true if the value lies within the span
 * of the given range. The left and right flags control the use
 * of inclusive (true) or exclusive (false) comparisons.
 */ function $38e9568d82b422e1$export$ee19ee26d8849835(value, range, left, right) {
    let r0 = range[0], r1 = range[range.length - 1], t;
    if (r0 > r1) {
        t = r0;
        r0 = r1;
        r1 = t;
    }
    left = left === undefined || left;
    right = right === undefined || right;
    return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
}
function $38e9568d82b422e1$export$f9ce7b637dfbe238(_) {
    return typeof _ === "boolean";
}
function $38e9568d82b422e1$export$871608497c498473(_) {
    return Object.prototype.toString.call(_) === "[object Date]";
}
function $38e9568d82b422e1$export$9652023d9040757(_) {
    return _ && $38e9568d82b422e1$export$f6e2535fb5126e54(_[Symbol.iterator]);
}
function $38e9568d82b422e1$export$7e4aa119212bc614(_) {
    return typeof _ === "number";
}
function $38e9568d82b422e1$export$49841c62b9eff15(_) {
    return Object.prototype.toString.call(_) === "[object RegExp]";
}
function $38e9568d82b422e1$export$844ec244b1367d54(_) {
    return typeof _ === "string";
}
function $38e9568d82b422e1$export$df61b30b684217c0(fields, flat, opt) {
    if (fields) fields = flat ? $38e9568d82b422e1$export$2f23118c22fb2630(fields).map((f)=>f.replace(/\\(.)/g, "$1")) : $38e9568d82b422e1$export$2f23118c22fb2630(fields);
    const len = fields && fields.length, gen = opt && opt.get || $38e9568d82b422e1$var$getter, map = (f)=>gen(flat ? [
            f
        ] : $38e9568d82b422e1$export$91fa45d315aa4370(f));
    let fn;
    if (!len) fn = function() {
        return "";
    };
    else if (len === 1) {
        const get = map(fields[0]);
        fn = function(_) {
            return "" + get(_);
        };
    } else {
        const get = fields.map(map);
        fn = function(_) {
            let s = "" + get[0](_), i = 0;
            while(++i < len)s += "|" + get[i](_);
            return s;
        };
    }
    return $38e9568d82b422e1$export$db0b1f6ca4bf0c76(fn, fields, "key");
}
function $38e9568d82b422e1$export$3a89f8d6f6bf6c9f(array, frac) {
    const lo = array[0], hi = $38e9568d82b422e1$export$4d3fb11e950abb9e(array), f = +frac;
    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}
const $38e9568d82b422e1$var$DEFAULT_MAX_SIZE = 10000;
// adapted from https://github.com/dominictarr/hashlru/ (MIT License)
function $38e9568d82b422e1$export$441692190ec1da48(maxsize) {
    maxsize = +maxsize || $38e9568d82b422e1$var$DEFAULT_MAX_SIZE;
    let curr, prev, size;
    const clear = ()=>{
        curr = {};
        prev = {};
        size = 0;
    };
    const update = (key, value)=>{
        if (++size > maxsize) {
            prev = curr;
            curr = {};
            size = 1;
        }
        return curr[key] = value;
    };
    clear();
    return {
        clear: clear,
        has: (key)=>$38e9568d82b422e1$export$5a15a386532a5ea4(curr, key) || $38e9568d82b422e1$export$5a15a386532a5ea4(prev, key),
        get: (key)=>$38e9568d82b422e1$export$5a15a386532a5ea4(curr, key) ? curr[key] : $38e9568d82b422e1$export$5a15a386532a5ea4(prev, key) ? update(key, prev[key]) : undefined,
        set: (key, value)=>$38e9568d82b422e1$export$5a15a386532a5ea4(curr, key) ? curr[key] = value : update(key, value)
    };
}
function $38e9568d82b422e1$export$4950aa0f605343fb(compare, array0, array1, output) {
    const n0 = array0.length, n1 = array1.length;
    if (!n1) return array0;
    if (!n0) return array1;
    const merged = output || new array0.constructor(n0 + n1);
    let i0 = 0, i1 = 0, i = 0;
    for(; i0 < n0 && i1 < n1; ++i)merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
    for(; i0 < n0; ++i0, ++i)merged[i] = array0[i0];
    for(; i1 < n1; ++i1, ++i)merged[i] = array1[i1];
    return merged;
}
function $38e9568d82b422e1$export$76d90c956114f2c2(str, reps) {
    let s = "";
    while(--reps >= 0)s += str;
    return s;
}
function $38e9568d82b422e1$export$5d04458e2a6c373e(str, length, padchar, align) {
    const c = padchar || " ", s = str + "", n = length - s.length;
    return n <= 0 ? s : align === "left" ? $38e9568d82b422e1$export$76d90c956114f2c2(c, n) + s : align === "center" ? $38e9568d82b422e1$export$76d90c956114f2c2(c, ~~(n / 2)) + s + $38e9568d82b422e1$export$76d90c956114f2c2(c, Math.ceil(n / 2)) : s + $38e9568d82b422e1$export$76d90c956114f2c2(c, n);
}
/**
 * Return the numerical span of an array: the difference between
 * the last and first values.
 */ function $38e9568d82b422e1$export$afc1bfabebaf28a2(array) {
    return array && $38e9568d82b422e1$export$4d3fb11e950abb9e(array) - array[0] || 0;
}
function $38e9568d82b422e1$export$732844b3d45b53a1(x) {
    return $38e9568d82b422e1$export$43bee75e5e14138e(x) ? "[" + x.map($38e9568d82b422e1$export$732844b3d45b53a1) + "]" : $38e9568d82b422e1$export$a6cdc56e425d0d0a(x) || $38e9568d82b422e1$export$844ec244b1367d54(x) ? // Output valid JSON and JS source strings.
    // See http://timelessrepo.com/json-isnt-a-javascript-subset
    JSON.stringify(x).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029") : x;
}
function $38e9568d82b422e1$export$3c2e6d1b7583eee6(_) {
    return _ == null || _ === "" ? null : !_ || _ === "false" || _ === "0" ? false : !!_;
}
const $38e9568d82b422e1$var$defaultParser = (_)=>$38e9568d82b422e1$export$7e4aa119212bc614(_) ? _ : $38e9568d82b422e1$export$871608497c498473(_) ? _ : Date.parse(_);
function $38e9568d82b422e1$export$e67a095c620b86fe(_, parser) {
    parser = parser || $38e9568d82b422e1$var$defaultParser;
    return _ == null || _ === "" ? null : parser(_);
}
function $38e9568d82b422e1$export$f84e8e69fd4488a5(_) {
    return _ == null || _ === "" ? null : _ + "";
}
function $38e9568d82b422e1$export$f416efe173c6901c(_) {
    const s = {}, n = _.length;
    for(let i = 0; i < n; ++i)s[_[i]] = true;
    return s;
}
function $38e9568d82b422e1$export$6a506b36fdea397d(str, length, align, ellipsis) {
    const e = ellipsis != null ? ellipsis : "\u2026", s = str + "", n = s.length, l = Math.max(0, length - e.length);
    return n <= length ? s : align === "left" ? e + s.slice(n - l) : align === "center" ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
}
function $38e9568d82b422e1$export$62940ad51e5012c2(array, filter, visitor) {
    if (array) {
        if (filter) {
            const n = array.length;
            for(let i = 0; i < n; ++i){
                const t = filter(array[i]);
                if (t) visitor(t, i, array);
            }
        } else array.forEach(visitor);
    }
}

});

parcelRegister("4jOgW", function(module, exports) {

$parcel$export(module.exports, "asyncCallback", () => asyncCallback);
$parcel$export(module.exports, "isTuple", () => isTuple);
$parcel$export(module.exports, "tupleid", () => tupleid);
$parcel$export(module.exports, "ingest", () => ingest$1);
$parcel$export(module.exports, "derive", () => derive);
$parcel$export(module.exports, "rederive", () => rederive);
$parcel$export(module.exports, "replace", () => replace);
$parcel$export(module.exports, "stableCompare", () => stableCompare);
$parcel$export(module.exports, "isChangeSet", () => isChangeSet);
$parcel$export(module.exports, "changeset", () => changeset);
$parcel$export(module.exports, "Parameters", () => Parameters);
$parcel$export(module.exports, "Operator", () => Operator);
$parcel$export(module.exports, "EventStream", () => EventStream);
$parcel$export(module.exports, "Pulse", () => Pulse);
$parcel$export(module.exports, "MultiPulse", () => MultiPulse);
$parcel$export(module.exports, "Dataflow", () => Dataflow);
$parcel$export(module.exports, "Transform", () => Transform);
$parcel$export(module.exports, "transforms", () => transforms);
$parcel$export(module.exports, "definition", () => definition);
$parcel$export(module.exports, "transform", () => transform);

var $4SWbq = parcelRequire("4SWbq");

var $2ttvf = parcelRequire("2ttvf");

var $dcUFF = parcelRequire("dcUFF");
function UniqueList(idFunc) {
    const $ = idFunc || (0, $4SWbq.identity), list = [], ids = {};
    list.add = (_)=>{
        const id = $(_);
        if (!ids[id]) {
            ids[id] = 1;
            list.push(_);
        }
        return list;
    };
    list.remove = (_)=>{
        const id = $(_);
        if (ids[id]) {
            ids[id] = 0;
            const idx = list.indexOf(_);
            if (idx >= 0) list.splice(idx, 1);
        }
        return list;
    };
    return list;
}
/**
 * Invoke and await a potentially async callback function. If
 * an error occurs, trap it and route to Dataflow.error.
 * @param {Dataflow} df - The dataflow instance
 * @param {function} callback - A callback function to invoke
 *   and then await. The dataflow will be passed as the single
 *   argument to the function.
 */ async function asyncCallback(df, callback) {
    try {
        await callback(df);
    } catch (err) {
        df.error(err);
    }
}
const TUPLE_ID_KEY = Symbol("vega_id");
let TUPLE_ID = 1;
/**
 * Checks if an input value is a registered tuple.
 * @param {*} t - The value to check.
 * @return {boolean} True if the input is a tuple, false otherwise.
 */ function isTuple(t) {
    return !!(t && tupleid(t));
}
/**
 * Returns the id of a tuple.
 * @param {object} t - The input tuple.
 * @return {*} the tuple id.
 */ function tupleid(t) {
    return t[TUPLE_ID_KEY];
}
/**
 * Sets the id of a tuple.
 * @param {object} t - The input tuple.
 * @param {*} id - The id value to set.
 * @return {object} the input tuple.
 */ function setid(t, id) {
    t[TUPLE_ID_KEY] = id;
    return t;
}
/**
 * Ingest an object or value as a data tuple.
 * If the input value is an object, an id field will be added to it. For
 * efficiency, the input object is modified directly. A copy is not made.
 * If the input value is a literal, it will be wrapped in a new object
 * instance, with the value accessible as the 'data' property.
 * @param datum - The value to ingest.
 * @return {object} The ingested data tuple.
 */ function ingest$1(datum) {
    const t = datum === Object(datum) ? datum : {
        data: datum
    };
    return tupleid(t) ? t : setid(t, TUPLE_ID++);
}
/**
 * Given a source tuple, return a derived copy.
 * @param {object} t - The source tuple.
 * @return {object} The derived tuple.
 */ function derive(t) {
    return rederive(t, ingest$1({}));
}
/**
 * Rederive a derived tuple by copying values from the source tuple.
 * @param {object} t - The source tuple.
 * @param {object} d - The derived tuple.
 * @return {object} The derived tuple.
 */ function rederive(t, d) {
    for(const k in t)d[k] = t[k];
    return d;
}
/**
 * Replace an existing tuple with a new tuple.
 * @param {object} t - The existing data tuple.
 * @param {object} d - The new tuple that replaces the old.
 * @return {object} The new tuple.
 */ function replace(t, d) {
    return setid(d, tupleid(t));
}
/**
 * Generate an augmented comparator function that provides stable
 * sorting by tuple id when the given comparator produces ties.
 * @param {function} cmp - The comparator to augment.
 * @param {function} [f] - Optional tuple accessor function.
 * @return {function} An augmented comparator function.
 */ function stableCompare(cmp, f) {
    return !cmp ? null : f ? (a, b)=>cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b)=>cmp(a, b) || tupleid(a) - tupleid(b);
}
function isChangeSet(v) {
    return v && v.constructor === changeset;
}
function changeset() {
    const add = [], // insert tuples
    rem = [], // remove tuples
    mod = [], // modify tuples
    remp = [], // remove by predicate
    modp = []; // modify by predicate
    let clean = null, reflow = false;
    return {
        constructor: changeset,
        insert (t) {
            const d = (0, $4SWbq.array)(t), n = d.length;
            for(let i = 0; i < n; ++i)add.push(d[i]);
            return this;
        },
        remove (t) {
            const a = (0, $4SWbq.isFunction)(t) ? remp : rem, d = (0, $4SWbq.array)(t), n = d.length;
            for(let i = 0; i < n; ++i)a.push(d[i]);
            return this;
        },
        modify (t, field, value) {
            const m = {
                field: field,
                value: (0, $4SWbq.constant)(value)
            };
            if ((0, $4SWbq.isFunction)(t)) {
                m.filter = t;
                modp.push(m);
            } else {
                m.tuple = t;
                mod.push(m);
            }
            return this;
        },
        encode (t, set) {
            if ((0, $4SWbq.isFunction)(t)) modp.push({
                filter: t,
                field: set
            });
            else mod.push({
                tuple: t,
                field: set
            });
            return this;
        },
        clean (value) {
            clean = value;
            return this;
        },
        reflow () {
            reflow = true;
            return this;
        },
        pulse (pulse, tuples) {
            const cur = {}, out = {};
            let i, n, m, f, t, id;
            // build lookup table of current tuples
            for(i = 0, n = tuples.length; i < n; ++i)cur[tupleid(tuples[i])] = 1;
            // process individual tuples to remove
            for(i = 0, n = rem.length; i < n; ++i){
                t = rem[i];
                cur[tupleid(t)] = -1;
            }
            // process predicate-based removals
            for(i = 0, n = remp.length; i < n; ++i){
                f = remp[i];
                tuples.forEach((t)=>{
                    if (f(t)) cur[tupleid(t)] = -1;
                });
            }
            // process all add tuples
            for(i = 0, n = add.length; i < n; ++i){
                t = add[i];
                id = tupleid(t);
                if (cur[id]) // tuple already resides in dataset
                // if flagged for both add and remove, cancel
                cur[id] = 1;
                else // tuple does not reside in dataset, add
                pulse.add.push(ingest$1(add[i]));
            }
            // populate pulse rem list
            for(i = 0, n = tuples.length; i < n; ++i){
                t = tuples[i];
                if (cur[tupleid(t)] < 0) pulse.rem.push(t);
            }
            // modify helper method
            function modify(t, f, v) {
                if (v) t[f] = v(t);
                else pulse.encode = f;
                if (!reflow) out[tupleid(t)] = t;
            }
            // process individual tuples to modify
            for(i = 0, n = mod.length; i < n; ++i){
                m = mod[i];
                t = m.tuple;
                f = m.field;
                id = cur[tupleid(t)];
                if (id > 0) {
                    modify(t, f, m.value);
                    pulse.modifies(f);
                }
            }
            // process predicate-based modifications
            for(i = 0, n = modp.length; i < n; ++i){
                m = modp[i];
                f = m.filter;
                tuples.forEach((t)=>{
                    if (f(t) && cur[tupleid(t)] > 0) modify(t, m.field, m.value);
                });
                pulse.modifies(m.field);
            }
            // upon reflow request, populate mod with all non-removed tuples
            // otherwise, populate mod with modified tuples only
            if (reflow) pulse.mod = rem.length || remp.length ? tuples.filter((t)=>cur[tupleid(t)] > 0) : tuples.slice();
            else for(id in out)pulse.mod.push(out[id]);
            // set pulse garbage collection request
            if (clean || clean == null && (rem.length || remp.length)) pulse.clean(true);
            return pulse;
        }
    };
}
const CACHE = "_:mod:_";
/**
 * Hash that tracks modifications to assigned values.
 * Callers *must* use the set method to update values.
 */ function Parameters() {
    Object.defineProperty(this, CACHE, {
        writable: true,
        value: {}
    });
}
Parameters.prototype = {
    /**
   * Set a parameter value. If the parameter value changes, the parameter
   * will be recorded as modified.
   * @param {string} name - The parameter name.
   * @param {number} index - The index into an array-value parameter. Ignored if
   *   the argument is undefined, null or less than zero.
   * @param {*} value - The parameter value to set.
   * @param {boolean} [force=false] - If true, records the parameter as modified
   *   even if the value is unchanged.
   * @return {Parameters} - This parameter object.
   */ set (name, index, value, force) {
        const o = this, v = o[name], mod = o[CACHE];
        if (index != null && index >= 0) {
            if (v[index] !== value || force) {
                v[index] = value;
                mod[index + ":" + name] = -1;
                mod[name] = -1;
            }
        } else if (v !== value || force) {
            o[name] = value;
            mod[name] = (0, $4SWbq.isArray)(value) ? 1 + value.length : -1;
        }
        return o;
    },
    /**
   * Tests if one or more parameters has been modified. If invoked with no
   * arguments, returns true if any parameter value has changed. If the first
   * argument is array, returns trues if any parameter name in the array has
   * changed. Otherwise, tests if the given name and optional array index has
   * changed.
   * @param {string} name - The parameter name to test.
   * @param {number} [index=undefined] - The parameter array index to test.
   * @return {boolean} - Returns true if a queried parameter was modified.
   */ modified (name, index) {
        const mod = this[CACHE];
        if (!arguments.length) {
            for(const k in mod){
                if (mod[k]) return true;
            }
            return false;
        } else if ((0, $4SWbq.isArray)(name)) {
            for(let k = 0; k < name.length; ++k){
                if (mod[name[k]]) return true;
            }
            return false;
        }
        return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ":" + name] : !!mod[name];
    },
    /**
   * Clears the modification records. After calling this method,
   * all parameters are considered unmodified.
   */ clear () {
        this[CACHE] = {};
        return this;
    }
};
let OP_ID = 0;
const PULSE = "pulse", NO_PARAMS = new Parameters();
// Boolean Flags
const SKIP$1 = 1, MODIFIED = 2;
/**
 * An Operator is a processing node in a dataflow graph.
 * Each operator stores a value and an optional value update function.
 * Operators can accept a hash of named parameters. Parameter values can
 * either be direct (JavaScript literals, arrays, objects) or indirect
 * (other operators whose values will be pulled dynamically). Operators
 * included as parameters will have this operator added as a dependency.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {function(object, Pulse)} [update] - An update function. Upon
 *   evaluation of this operator, the update function will be invoked and the
 *   return value will be used as the new value of this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @see parameters
 */ function Operator(init, update, params, react) {
    this.id = ++OP_ID;
    this.value = init;
    this.stamp = -1;
    this.rank = -1;
    this.qrank = -1;
    this.flags = 0;
    if (update) this._update = update;
    if (params) this.parameters(params, react);
}
function flag(bit) {
    return function(state) {
        const f = this.flags;
        if (arguments.length === 0) return !!(f & bit);
        this.flags = state ? f | bit : f & ~bit;
        return this;
    };
}
Operator.prototype = {
    /**
   * Returns a list of target operators dependent on this operator.
   * If this list does not exist, it is created and then returned.
   * @return {UniqueList}
   */ targets () {
        return this._targets || (this._targets = UniqueList((0, $4SWbq.id)));
    },
    /**
   * Sets the value of this operator.
   * @param {*} value - the value to set.
   * @return {Number} Returns 1 if the operator value has changed
   *   according to strict equality, returns 0 otherwise.
   */ set (value) {
        if (this.value !== value) {
            this.value = value;
            return 1;
        } else return 0;
    },
    /**
   * Indicates that operator evaluation should be skipped on the next pulse.
   * This operator will still propagate incoming pulses, but its update function
   * will not be invoked. The skip flag is reset after every pulse, so calling
   * this method will affect processing of the next pulse only.
   */ skip: flag(SKIP$1),
    /**
   * Indicates that this operator's value has been modified on its most recent
   * pulse. Normally modification is checked via strict equality; however, in
   * some cases it is more efficient to update the internal state of an object.
   * In those cases, the modified flag can be used to trigger propagation. Once
   * set, the modification flag persists across pulses until unset. The flag can
   * be used with the last timestamp to test if a modification is recent.
   */ modified: flag(MODIFIED),
    /**
   * Sets the parameters for this operator. The parameter values are analyzed for
   * operator instances. If found, this operator will be added as a dependency
   * of the parameterizing operator. Operator values are dynamically marshalled
   * from each operator parameter prior to evaluation. If a parameter value is
   * an array, the array will also be searched for Operator instances. However,
   * the search does not recurse into sub-arrays or object properties.
   * @param {object} params - A hash of operator parameters.
   * @param {boolean} [react=true] - A flag indicating if this operator should
   *   automatically update (react) when parameter values change. In other words,
   *   this flag determines if the operator registers itself as a listener on
   *   any upstream operators included in the parameters.
   * @param {boolean} [initonly=false] - A flag indicating if this operator
   *   should calculate an update only upon its initial evaluation, then
   *   deregister dependencies and suppress all future update invocations.
   * @return {Operator[]} - An array of upstream dependencies.
   */ parameters (params, react, initonly) {
        react = react !== false;
        const argval = this._argval = this._argval || new Parameters(), argops = this._argops = this._argops || [], deps = [];
        let name, value, n, i;
        const add = (name, index, value)=>{
            if (value instanceof Operator) {
                if (value !== this) {
                    if (react) value.targets().add(this);
                    deps.push(value);
                }
                argops.push({
                    op: value,
                    name: name,
                    index: index
                });
            } else argval.set(name, index, value);
        };
        for(name in params){
            value = params[name];
            if (name === PULSE) {
                (0, $4SWbq.array)(value).forEach((op)=>{
                    if (!(op instanceof Operator)) (0, $4SWbq.error)("Pulse parameters must be operator instances.");
                    else if (op !== this) {
                        op.targets().add(this);
                        deps.push(op);
                    }
                });
                this.source = value;
            } else if ((0, $4SWbq.isArray)(value)) {
                argval.set(name, -1, Array(n = value.length));
                for(i = 0; i < n; ++i)add(name, i, value[i]);
            } else add(name, -1, value);
        }
        this.marshall().clear(); // initialize values
        if (initonly) argops.initonly = true;
        return deps;
    },
    /**
   * Internal method for marshalling parameter values.
   * Visits each operator dependency to pull the latest value.
   * @return {Parameters} A Parameters object to pass to the update function.
   */ marshall (stamp) {
        const argval = this._argval || NO_PARAMS, argops = this._argops;
        let item, i, op, mod;
        if (argops) {
            const n = argops.length;
            for(i = 0; i < n; ++i){
                item = argops[i];
                op = item.op;
                mod = op.modified() && op.stamp === stamp;
                argval.set(item.name, item.index, op.value, mod);
            }
            if (argops.initonly) {
                for(i = 0; i < n; ++i){
                    item = argops[i];
                    item.op.targets().remove(this);
                }
                this._argops = null;
                this._update = null;
            }
        }
        return argval;
    },
    /**
   * Detach this operator from the dataflow.
   * Unregisters listeners on upstream dependencies.
   */ detach () {
        const argops = this._argops;
        let i, n, item, op;
        if (argops) for(i = 0, n = argops.length; i < n; ++i){
            item = argops[i];
            op = item.op;
            if (op._targets) op._targets.remove(this);
        }
        // remove references to the source and pulse object,
        // if present, to prevent memory leaks of old data.
        this.pulse = null;
        this.source = null;
    },
    /**
   * Delegate method to perform operator processing.
   * Subclasses can override this method to perform custom processing.
   * By default, it marshalls parameters and calls the update function
   * if that function is defined. If the update function does not
   * change the operator value then StopPropagation is returned.
   * If no update function is defined, this method does nothing.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return The output pulse or StopPropagation. A falsy return value
   *   (including undefined) will let the input pulse pass through.
   */ evaluate (pulse) {
        const update = this._update;
        if (update) {
            const params = this.marshall(pulse.stamp), v = update.call(this, params, pulse);
            params.clear();
            if (v !== this.value) this.value = v;
            else if (!this.modified()) return pulse.StopPropagation;
        }
    },
    /**
   * Run this operator for the current pulse. If this operator has already
   * been run at (or after) the pulse timestamp, returns StopPropagation.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */ run (pulse) {
        if (pulse.stamp < this.stamp) return pulse.StopPropagation;
        let rv;
        if (this.skip()) {
            this.skip(false);
            rv = 0;
        } else rv = this.evaluate(pulse);
        return this.pulse = rv || pulse;
    }
};
/**
 * Add an operator to the dataflow graph. This function accepts a
 * variety of input argument types. The basic signature supports an
 * initial value, update function and parameters. If the first parameter
 * is an Operator instance, it will be added directly. If it is a
 * constructor for an Operator subclass, a new instance will be instantiated.
 * Otherwise, if the first parameter is a function instance, it will be used
 * as the update function and a null initial value is assumed.
 * @param {*} init - One of: the operator to add, the initial value of
 *   the operator, an operator class to instantiate, or an update function.
 * @param {function} [update] - The operator update function.
 * @param {object} [params] - The operator parameters.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @return {Operator} - The added operator.
 */ function add(init, update, params, react) {
    let shift = 1, op;
    if (init instanceof Operator) op = init;
    else if (init && init.prototype instanceof Operator) op = new init();
    else if ((0, $4SWbq.isFunction)(init)) op = new Operator(null, init);
    else {
        shift = 0;
        op = new Operator(init, update);
    }
    this.rank(op);
    if (shift) {
        react = params;
        params = update;
    }
    if (params) this.connect(op, op.parameters(params, react));
    this.touch(op);
    return op;
}
/**
 * Connect a target operator as a dependent of source operators.
 * If necessary, this method will rerank the target operator and its
 * dependents to ensure propagation proceeds in a topologically sorted order.
 * @param {Operator} target - The target operator.
 * @param {Array<Operator>} - The source operators that should propagate
 *   to the target operator.
 */ function connect(target, sources) {
    const targetRank = target.rank, n = sources.length;
    for(let i = 0; i < n; ++i)if (targetRank < sources[i].rank) {
        this.rerank(target);
        return;
    }
}
let STREAM_ID = 0;
/**
 * Models an event stream.
 * @constructor
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @param {function(Object)} [receive] - Event callback function to invoke
 *   upon receipt of a new event. Use to override standard event processing.
 */ function EventStream(filter, apply, receive) {
    this.id = ++STREAM_ID;
    this.value = null;
    if (receive) this.receive = receive;
    if (filter) this._filter = filter;
    if (apply) this._apply = apply;
}
/**
 * Creates a new event stream instance with the provided
 * (optional) filter, apply and receive functions.
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @see EventStream
 */ function stream(filter, apply, receive) {
    return new EventStream(filter, apply, receive);
}
EventStream.prototype = {
    _filter: (0, $4SWbq.truthy),
    _apply: (0, $4SWbq.identity),
    targets () {
        return this._targets || (this._targets = UniqueList((0, $4SWbq.id)));
    },
    consume (_) {
        if (!arguments.length) return !!this._consume;
        this._consume = !!_;
        return this;
    },
    receive (evt) {
        if (this._filter(evt)) {
            const val = this.value = this._apply(evt), trg = this._targets, n = trg ? trg.length : 0;
            for(let i = 0; i < n; ++i)trg[i].receive(val);
            if (this._consume) {
                evt.preventDefault();
                evt.stopPropagation();
            }
        }
    },
    filter (filter) {
        const s = stream(filter);
        this.targets().add(s);
        return s;
    },
    apply (apply) {
        const s = stream(null, apply);
        this.targets().add(s);
        return s;
    },
    merge () {
        const s = stream();
        this.targets().add(s);
        for(let i = 0, n = arguments.length; i < n; ++i)arguments[i].targets().add(s);
        return s;
    },
    throttle (pause) {
        let t = -1;
        return this.filter(()=>{
            const now = Date.now();
            if (now - t > pause) {
                t = now;
                return 1;
            } else return 0;
        });
    },
    debounce (delay) {
        const s = stream();
        this.targets().add(stream(null, null, (0, $4SWbq.debounce)(delay, (e)=>{
            const df = e.dataflow;
            s.receive(e);
            if (df && df.run) df.run();
        })));
        return s;
    },
    between (a, b) {
        let active = false;
        a.targets().add(stream(null, null, ()=>active = true));
        b.targets().add(stream(null, null, ()=>active = false));
        return this.filter(()=>active);
    },
    detach () {
        // ensures compatibility with operators (#2753)
        // remove references to other streams and filter functions that may
        // be bound to subcontexts that need to be garbage collected.
        this._filter = (0, $4SWbq.truthy);
        this._targets = null;
    }
};
/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor. The input must
 *  support the addEventListener method.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @param {function(object): *} [apply] - Event application function.
 *   If provided, this function will be invoked and the result will be
 *   used as the downstream event value.
 * @return {EventStream}
 */ function events(source, type, filter, apply) {
    const df = this, s = stream(filter, apply), send = function(e) {
        e.dataflow = df;
        try {
            s.receive(e);
        } catch (error) {
            df.error(error);
        } finally{
            df.run();
        }
    };
    let sources;
    if (typeof source === "string" && typeof document !== "undefined") sources = document.querySelectorAll(source);
    else sources = (0, $4SWbq.array)(source);
    const n = sources.length;
    for(let i = 0; i < n; ++i)sources[i].addEventListener(type, send);
    return s;
}
function parse(data, format) {
    const locale = this.locale();
    return (0, $2ttvf.read)(data, format, locale.timeParse, locale.utcParse);
}
/**
 * Ingests new data into the dataflow. First parses the data using the
 * vega-loader read method, then pulses a changeset to the target operator.
 * @param {Operator} target - The Operator to target with ingested data,
 *   typically a Collect transform instance.
 * @param {*} data - The input data, prior to parsing. For JSON this may
 *   be a string or an object. For CSV, TSV, etc should be a string.
 * @param {object} format - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @returns {Dataflow}
 */ function ingest(target, data, format) {
    data = this.parse(data, format);
    return this.pulse(target, this.changeset().insert(data));
}
/**
 * Request data from an external source, parse it, and return a Promise.
 * @param {string} url - The URL from which to load the data. This string
 *   is passed to the vega-loader load method.
 * @param {object} [format] - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @return {Promise} A Promise that resolves upon completion of the request.
 *   The resolved object contains the following properties:
 *   - data: an array of parsed data (or null upon error)
 *   - status: a code for success (0), load fail (-1), or parse fail (-2)
 */ async function request(url, format) {
    const df = this;
    let status = 0, data;
    try {
        data = await df.loader().load(url, {
            context: "dataflow",
            response: (0, $2ttvf.responseType)(format && format.type)
        });
        try {
            data = df.parse(data, format);
        } catch (err) {
            status = -2;
            df.warn("Data ingestion failed", url, err);
        }
    } catch (err) {
        status = -1;
        df.warn("Loading failed", url, err);
    }
    return {
        data: data,
        status: status
    };
}
async function preload(target, url, format) {
    const df = this, pending = df._pending || loadPending(df);
    pending.requests += 1;
    const res = await df.request(url, format);
    df.pulse(target, df.changeset().remove((0, $4SWbq.truthy)).insert(res.data || []));
    pending.done();
    return res;
}
function loadPending(df) {
    let accept;
    const pending = new Promise((a)=>accept = a);
    pending.requests = 0;
    pending.done = ()=>{
        if (--pending.requests === 0) {
            df._pending = null;
            accept(df);
        }
    };
    return df._pending = pending;
}
const SKIP = {
    skip: true
};
/**
 * Perform operator updates in response to events. Applies an
 * update function to compute a new operator value. If the update function
 * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
 * changes. Otherwise, the operator value will be updated to the return value.
 * @param {EventStream|Operator} source - The event source to react to.
 *   This argument can be either an EventStream or an Operator.
 * @param {Operator|function(object):Operator} target - The operator to update.
 *   This argument can either be an Operator instance or (if the source
 *   argument is an EventStream), a function that accepts an event object as
 *   input and returns an Operator to target.
 * @param {function(Parameters,Event): *} [update] - Optional update function
 *   to compute the new operator value, or a literal value to set. Update
 *   functions expect to receive a parameter object and event as arguments.
 *   This function can either return a new operator value or (if the source
 *   argument is an EventStream) a {@link ChangeSet} instance to pulse
 *   the target operator with tuple changes.
 * @param {object} [params] - The update function parameters.
 * @param {object} [options] - Additional options hash. If not overridden,
 *   updated operators will be skipped by default.
 * @param {boolean} [options.skip] - If true, the operator will
 *  be skipped: it will not be evaluated, but its dependents will be.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @return {Dataflow}
 */ function on(source, target, update, params, options) {
    const fn = source instanceof Operator ? onOperator : onStream;
    fn(this, source, target, update, params, options);
    return this;
}
function onStream(df, stream, target, update, params, options) {
    const opt = (0, $4SWbq.extend)({}, options, SKIP);
    let func, op;
    if (!(0, $4SWbq.isFunction)(target)) target = (0, $4SWbq.constant)(target);
    if (update === undefined) func = (e)=>df.touch(target(e));
    else if ((0, $4SWbq.isFunction)(update)) {
        op = new Operator(null, update, params, false);
        func = (e)=>{
            op.evaluate(e);
            const t = target(e), v = op.value;
            isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);
        };
    } else func = (e)=>df.update(target(e), update, opt);
    stream.apply(func);
}
function onOperator(df, source, target, update, params, options) {
    if (update === undefined) source.targets().add(target);
    else {
        const opt = options || {}, op = new Operator(null, updater(target, update), params, false);
        op.modified(opt.force);
        op.rank = source.rank; // immediately follow source
        source.targets().add(op); // add dependency
        if (target) {
            op.skip(true); // skip first invocation
            op.value = target.value; // initialize value
            op.targets().add(target); // chain dependencies
            df.connect(target, [
                op
            ]); // rerank as needed, #1672
        }
    }
}
function updater(target, update) {
    update = (0, $4SWbq.isFunction)(update) ? update : (0, $4SWbq.constant)(update);
    return target ? function(_, pulse) {
        const value = update(_, pulse);
        if (!target.skip()) target.skip(value !== this.value).value = value;
        return value;
    } : update;
}
/**
 * Assigns a rank to an operator. Ranks are assigned in increasing order
 * by incrementing an internal rank counter.
 * @param {Operator} op - The operator to assign a rank.
 */ function rank(op) {
    op.rank = ++this._rank;
}
/**
 * Re-ranks an operator and all downstream target dependencies. This
 * is necessary when upstream dependencies of higher rank are added to
 * a target operator.
 * @param {Operator} op - The operator to re-rank.
 */ function rerank(op) {
    const queue = [
        op
    ];
    let cur, list, i;
    while(queue.length){
        this.rank(cur = queue.pop());
        if (list = cur._targets) for(i = list.length; --i >= 0;){
            queue.push(cur = list[i]);
            if (cur === op) (0, $4SWbq.error)("Cycle detected in dataflow graph.");
        }
    }
}
/**
 * Sentinel value indicating pulse propagation should stop.
 */ const StopPropagation = {};
// Pulse visit type flags
const ADD = 1, REM = 2, MOD = 4, ADD_REM = ADD | REM, ADD_MOD = ADD | MOD, ALL = ADD | REM | MOD, REFLOW = 8, SOURCE = 16, NO_SOURCE = 32, NO_FIELDS = 64;
/**
 * A Pulse enables inter-operator communication during a run of the
 * dataflow graph. In addition to the current timestamp, a pulse may also
 * contain a change-set of added, removed or modified data tuples, as well as
 * a pointer to a full backing data source. Tuple change sets may not
 * be fully materialized; for example, to prevent needless array creation
 * a change set may include larger arrays and corresponding filter functions.
 * The pulse provides a {@link visit} method to enable proper and efficient
 * iteration over requested data tuples.
 *
 * In addition, each pulse can track modification flags for data tuple fields.
 * Responsible transform operators should call the {@link modifies} method to
 * indicate changes to data fields. The {@link modified} method enables
 * querying of this modification state.
 *
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The current propagation timestamp.
 * @param {string} [encode] - An optional encoding set name, which is then
 *   accessible as Pulse.encode. Operators can respond to (or ignore) this
 *   setting as appropriate. This parameter can be used in conjunction with
 *   the Encode transform in the vega-encode module.
 */ function Pulse(dataflow, stamp, encode) {
    this.dataflow = dataflow;
    this.stamp = stamp == null ? -1 : stamp;
    this.add = [];
    this.rem = [];
    this.mod = [];
    this.fields = null;
    this.encode = encode || null;
}
function materialize(data, filter) {
    const out = [];
    (0, $4SWbq.visitArray)(data, filter, (_)=>out.push(_));
    return out;
}
function filter(pulse, flags) {
    const map = {};
    pulse.visit(flags, (t)=>{
        map[tupleid(t)] = 1;
    });
    return (t)=>map[tupleid(t)] ? null : t;
}
function addFilter(a, b) {
    return a ? (t, i)=>a(t, i) && b(t, i) : b;
}
Pulse.prototype = {
    StopPropagation: /**
   * Sentinel value indicating pulse propagation should stop.
   */ StopPropagation,
    ADD: /**
   * Boolean flag indicating ADD (added) tuples.
   */ ADD,
    REM: /**
   * Boolean flag indicating REM (removed) tuples.
   */ REM,
    MOD: /**
   * Boolean flag indicating MOD (modified) tuples.
   */ MOD,
    ADD_REM: /**
   * Boolean flag indicating ADD (added) and REM (removed) tuples.
   */ ADD_REM,
    ADD_MOD: /**
   * Boolean flag indicating ADD (added) and MOD (modified) tuples.
   */ ADD_MOD,
    ALL: /**
   * Boolean flag indicating ADD, REM and MOD tuples.
   */ ALL,
    REFLOW: /**
   * Boolean flag indicating all tuples in a data source
   * except for the ADD, REM and MOD tuples.
   */ REFLOW,
    SOURCE: /**
   * Boolean flag indicating a 'pass-through' to a
   * backing data source, ignoring ADD, REM and MOD tuples.
   */ SOURCE,
    NO_SOURCE: /**
   * Boolean flag indicating that source data should be
   * suppressed when creating a forked pulse.
   */ NO_SOURCE,
    NO_FIELDS: /**
   * Boolean flag indicating that field modifications should be
   * suppressed when creating a forked pulse.
   */ NO_FIELDS,
    /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created.
   * @return {Pulse} - The forked pulse instance.
   * @see init
   */ fork (flags) {
        return new Pulse(this.dataflow).init(this, flags);
    },
    /**
   * Creates a copy of this pulse with new materialized array
   * instances for the ADD, REM, MOD, and SOURCE arrays.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse} - The cloned pulse instance.
   * @see init
   */ clone () {
        const p = this.fork(ALL);
        p.add = p.add.slice();
        p.rem = p.rem.slice();
        p.mod = p.mod.slice();
        if (p.source) p.source = p.source.slice();
        return p.materialize(ALL | SOURCE);
    },
    /**
   * Returns a pulse that adds all tuples from a backing source. This is
   * useful for cases where operators are added to a dataflow after an
   * upstream data pipeline has already been processed, ensuring that
   * new operators can observe all tuples within a stream.
   * @return {Pulse} - A pulse instance with all source tuples included
   *   in the add array. If the current pulse already has all source
   *   tuples in its add array, it is returned directly. If the current
   *   pulse does not have a backing source, it is returned directly.
   */ addAll () {
        let p = this;
        const reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)
         || !p.rem.length && p.source.length === p.add.length;
        if (reuse) return p;
        else {
            p = new Pulse(this.dataflow).init(this);
            p.add = p.source;
            p.rem = []; // new operators can ignore rem #2769
            return p;
        }
    },
    /**
   * Initialize this pulse based on the values of another pulse. This method
   * is used internally by {@link fork} to initialize a new forked tuple.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {Pulse} src - The source pulse to copy from.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created. By default, source data arrays are copied
   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
   * @return {Pulse} - Returns this Pulse instance.
   */ init (src, flags) {
        const p = this;
        p.stamp = src.stamp;
        p.encode = src.encode;
        if (src.fields && !(flags & NO_FIELDS)) p.fields = src.fields;
        if (flags & ADD) {
            p.addF = src.addF;
            p.add = src.add;
        } else {
            p.addF = null;
            p.add = [];
        }
        if (flags & REM) {
            p.remF = src.remF;
            p.rem = src.rem;
        } else {
            p.remF = null;
            p.rem = [];
        }
        if (flags & MOD) {
            p.modF = src.modF;
            p.mod = src.mod;
        } else {
            p.modF = null;
            p.mod = [];
        }
        if (flags & NO_SOURCE) {
            p.srcF = null;
            p.source = null;
        } else {
            p.srcF = src.srcF;
            p.source = src.source;
            if (src.cleans) p.cleans = src.cleans;
        }
        return p;
    },
    /**
   * Schedules a function to run after pulse propagation completes.
   * @param {function} func - The function to run.
   */ runAfter (func) {
        this.dataflow.runAfter(func);
    },
    /**
   * Indicates if tuples have been added, removed or modified.
   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
   *   Defaults to ALL, returning true if any tuple type has changed.
   * @return {boolean} - Returns true if one or more queried tuple types have
   *   changed, false otherwise.
   */ changed (flags) {
        const f = flags || ALL;
        return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;
    },
    /**
   * Forces a "reflow" of tuple values, such that all tuples in the backing
   * source are added to the MOD set, unless already present in the ADD set.
   * @param {boolean} [fork=false] - If true, returns a forked copy of this
   *   pulse, and invokes reflow on that derived pulse.
   * @return {Pulse} - The reflowed pulse instance.
   */ reflow (fork) {
        if (fork) return this.fork(ALL).reflow();
        const len = this.add.length, src = this.source && this.source.length;
        if (src && src !== len) {
            this.mod = this.source;
            if (len) this.filter(MOD, filter(this, ADD));
        }
        return this;
    },
    /**
   * Get/set metadata to pulse requesting garbage collection
   * to reclaim currently unused resources.
   */ clean (value) {
        if (arguments.length) {
            this.cleans = !!value;
            return this;
        } else return this.cleans;
    },
    /**
   * Marks one or more data field names as modified to assist dependency
   * tracking and incremental processing by transform operators.
   * @param {string|Array<string>} _ - The field(s) to mark as modified.
   * @return {Pulse} - This pulse instance.
   */ modifies (_) {
        const hash = this.fields || (this.fields = {});
        if ((0, $4SWbq.isArray)(_)) _.forEach((f)=>hash[f] = true);
        else hash[_] = true;
        return this;
    },
    /**
   * Checks if one or more data fields have been modified during this pulse
   * propagation timestamp.
   * @param {string|Array<string>} _ - The field(s) to check for modified.
   * @param {boolean} nomod - If true, will check the modified flag even if
   *   no mod tuples exist. If false (default), mod tuples must be present.
   * @return {boolean} - Returns true if any of the provided fields has been
   *   marked as modified, false otherwise.
   */ modified (_, nomod) {
        const fields = this.fields;
        return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : (0, $4SWbq.isArray)(_) ? _.some((f)=>fields[f]) : fields[_];
    },
    /**
   * Adds a filter function to one more tuple sets. Filters are applied to
   * backing tuple arrays, to determine the actual set of tuples considered
   * added, removed or modified. They can be used to delay materialization of
   * a tuple set in order to avoid expensive array copies. In addition, the
   * filter functions can serve as value transformers: unlike standard predicate
   * function (which return boolean values), Pulse filters should return the
   * actual tuple value to process. If a tuple set is already filtered, the
   * new filter function will be appended into a conjuntive ('and') query.
   * @param {number} flags - Flags indicating the tuple set(s) to filter.
   * @param {function(*):object} filter - Filter function that will be applied
   *   to the tuple set array, and should return a data tuple if the value
   *   should be included in the tuple set, and falsy (or null) otherwise.
   * @return {Pulse} - Returns this pulse instance.
   */ filter (flags, filter) {
        const p = this;
        if (flags & ADD) p.addF = addFilter(p.addF, filter);
        if (flags & REM) p.remF = addFilter(p.remF, filter);
        if (flags & MOD) p.modF = addFilter(p.modF, filter);
        if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);
        return p;
    },
    /**
   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
   * a registered filter function, it will be applied and the tuple set(s) will
   * be replaced with materialized tuple arrays.
   * @param {number} flags - Flags indicating the tuple set(s) to materialize.
   * @return {Pulse} - Returns this pulse instance.
   */ materialize (flags) {
        flags = flags || ALL;
        const p = this;
        if (flags & ADD && p.addF) {
            p.add = materialize(p.add, p.addF);
            p.addF = null;
        }
        if (flags & REM && p.remF) {
            p.rem = materialize(p.rem, p.remF);
            p.remF = null;
        }
        if (flags & MOD && p.modF) {
            p.mod = materialize(p.mod, p.modF);
            p.modF = null;
        }
        if (flags & SOURCE && p.srcF) {
            p.source = p.source.filter(p.srcF);
            p.srcF = null;
        }
        return p;
    },
    /**
   * Visit one or more tuple sets in this pulse.
   * @param {number} flags - Flags indicating the tuple set(s) to visit.
   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
   *   has been set).
   * @param {function(object):*} - Visitor function invoked per-tuple.
   * @return {Pulse} - Returns this pulse instance.
   */ visit (flags, visitor) {
        const p = this, v = visitor;
        if (flags & SOURCE) {
            (0, $4SWbq.visitArray)(p.source, p.srcF, v);
            return p;
        }
        if (flags & ADD) (0, $4SWbq.visitArray)(p.add, p.addF, v);
        if (flags & REM) (0, $4SWbq.visitArray)(p.rem, p.remF, v);
        if (flags & MOD) (0, $4SWbq.visitArray)(p.mod, p.modF, v);
        const src = p.source;
        if (flags & REFLOW && src) {
            const sum = p.add.length + p.mod.length;
            if (sum === src.length) ;
            else if (sum) (0, $4SWbq.visitArray)(src, filter(p, ADD_MOD), v);
            else // if no add/rem/mod tuples, visit source
            (0, $4SWbq.visitArray)(src, p.srcF, v);
        }
        return p;
    }
};
/**
 * Represents a set of multiple pulses. Used as input for operators
 * that accept multiple pulses at a time. Contained pulses are
 * accessible via the public "pulses" array property. This pulse doe
 * not carry added, removed or modified tuples directly. However,
 * the visit method can be used to traverse all such tuples contained
 * in sub-pulses with a timestamp matching this parent multi-pulse.
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The timestamp.
 * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
 */ function MultiPulse(dataflow, stamp, pulses, encode) {
    const p = this;
    let c = 0;
    this.dataflow = dataflow;
    this.stamp = stamp;
    this.fields = null;
    this.encode = encode || null;
    this.pulses = pulses;
    for (const pulse of pulses){
        if (pulse.stamp !== stamp) continue;
        if (pulse.fields) {
            const hash = p.fields || (p.fields = {});
            for(const f in pulse.fields)hash[f] = 1;
        }
        if (pulse.changed(p.ADD)) c |= p.ADD;
        if (pulse.changed(p.REM)) c |= p.REM;
        if (pulse.changed(p.MOD)) c |= p.MOD;
    }
    this.changes = c;
}
(0, $4SWbq.inherits)(MultiPulse, Pulse, {
    /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse}
   */ fork (flags) {
        const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);
        if (flags !== undefined) {
            if (flags & p.ADD) this.visit(p.ADD, (t)=>p.add.push(t));
            if (flags & p.REM) this.visit(p.REM, (t)=>p.rem.push(t));
            if (flags & p.MOD) this.visit(p.MOD, (t)=>p.mod.push(t));
        }
        return p;
    },
    changed (flags) {
        return this.changes & flags;
    },
    modified (_) {
        const p = this, fields = p.fields;
        return !(fields && p.changes & p.MOD) ? 0 : (0, $4SWbq.isArray)(_) ? _.some((f)=>fields[f]) : fields[_];
    },
    filter () {
        (0, $4SWbq.error)("MultiPulse does not support filtering.");
    },
    materialize () {
        (0, $4SWbq.error)("MultiPulse does not support materialization.");
    },
    visit (flags, visitor) {
        const p = this, pulses = p.pulses, n = pulses.length;
        let i = 0;
        if (flags & p.SOURCE) for(; i < n; ++i)pulses[i].visit(flags, visitor);
        else {
            for(; i < n; ++i)if (pulses[i].stamp === p.stamp) pulses[i].visit(flags, visitor);
        }
        return p;
    }
});
/* eslint-disable require-atomic-updates */ /**
 * Evaluates the dataflow and returns a Promise that resolves when pulse
 * propagation completes. This method will increment the current timestamp
 * and process all updated, pulsed and touched operators. When invoked for
 * the first time, all registered operators will be processed. This method
 * should not be invoked by third-party clients, use {@link runAsync} or
 * {@link run} instead.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */ async function evaluate(encode, prerun, postrun) {
    const df = this, async = [];
    // if the pulse value is set, this is a re-entrant call
    if (df._pulse) return reentrant(df);
    // wait for pending datasets to load
    if (df._pending) await df._pending;
    // invoke prerun function, if provided
    if (prerun) await asyncCallback(df, prerun);
    // exit early if there are no updates
    if (!df._touched.length) {
        df.debug("Dataflow invoked, but nothing to do.");
        return df;
    }
    // increment timestamp clock
    const stamp = ++df._clock;
    // set the current pulse
    df._pulse = new Pulse(df, stamp, encode);
    // initialize priority queue, reset touched operators
    df._touched.forEach((op)=>df._enqueue(op, true));
    df._touched = UniqueList((0, $4SWbq.id));
    let count = 0, op, next, error;
    try {
        while(df._heap.size() > 0){
            // dequeue operator with highest priority
            op = df._heap.pop();
            // re-queue if rank changed
            if (op.rank !== op.qrank) {
                df._enqueue(op, true);
                continue;
            }
            // otherwise, evaluate the operator
            next = op.run(df._getPulse(op, encode));
            if (next.then) // await if operator returns a promise directly
            next = await next;
            else if (next.async) {
                // queue parallel asynchronous execution
                async.push(next.async);
                next = StopPropagation;
            }
            // propagate evaluation, enqueue dependent operators
            if (next !== StopPropagation) {
                if (op._targets) op._targets.forEach((op)=>df._enqueue(op));
            }
            // increment visit counter
            ++count;
        }
    } catch (err) {
        df._heap.clear();
        error = err;
    }
    // reset pulse map
    df._input = {};
    df._pulse = null;
    df.debug(`Pulse ${stamp}: ${count} operators`);
    if (error) {
        df._postrun = [];
        df.error(error);
    }
    // invoke callbacks queued via runAfter
    if (df._postrun.length) {
        const pr = df._postrun.sort((a, b)=>b.priority - a.priority);
        df._postrun = [];
        for(let i = 0; i < pr.length; ++i)await asyncCallback(df, pr[i].callback);
    }
    // invoke postrun function, if provided
    if (postrun) await asyncCallback(df, postrun);
    // handle non-blocking asynchronous callbacks
    if (async.length) Promise.all(async).then((cb)=>df.runAsync(null, ()=>{
            cb.forEach((f)=>{
                try {
                    f(df);
                } catch (err) {
                    df.error(err);
                }
            });
        }));
    return df;
}
/**
 * Queues dataflow evaluation to run once any other queued evaluations have
 * completed and returns a Promise that resolves when the queued pulse
 * propagation completes. If provided, a callback function will be invoked
 * immediately before evaluation commences. This method will ensure a
 * separate evaluation is invoked for each time it is called.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */ async function runAsync(encode, prerun, postrun) {
    // await previously queued functions
    while(this._running)await this._running;
    // run dataflow, manage running promise
    const clear = ()=>this._running = null;
    (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);
    return this._running;
}
/**
 * Requests dataflow evaluation and the immediately returns this dataflow
 * instance. If there are pending data loading or other asynchronous
 * operations, the dataflow will evaluate asynchronously after this method
 * has been invoked. To track when dataflow evaluation completes, use the
 * {@link runAsync} method instead. This method will raise an error if
 * invoked while the dataflow is already in the midst of evaluation.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode module.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Dataflow} - This dataflow instance.
 */ function run(encode, prerun, postrun) {
    return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);
}
/**
 * Schedules a callback function to be invoked after the current pulse
 * propagation completes. If no propagation is currently occurring,
 * the function is invoked immediately. Callbacks scheduled via runAfter
 * are invoked immediately upon completion of the current cycle, before
 * any request queued via runAsync. This method is primarily intended for
 * internal use. Third-party callers using runAfter to schedule a callback
 * that invokes {@link run} or {@link runAsync} should not use this method,
 * but instead use {@link runAsync} with prerun or postrun arguments.
 * @param {function(Dataflow)} callback - The callback function to run.
 *   The callback will be invoked with this Dataflow instance as its
 *   sole argument.
 * @param {boolean} enqueue - A boolean flag indicating that the
 *   callback should be queued up to run after the next propagation
 *   cycle, suppressing immediate invocation when propagation is not
 *   currently occurring.
 * @param {number} [priority] - A priority value used to sort registered
 *   callbacks to determine execution order. This argument is intended
 *   for internal Vega use only.
 */ function runAfter(callback, enqueue, priority) {
    if (this._pulse || enqueue) // pulse propagation is currently running, queue to run after
    this._postrun.push({
        priority: priority || 0,
        callback: callback
    });
    else // pulse propagation already complete, invoke immediately
    try {
        callback(this);
    } catch (err) {
        this.error(err);
    }
}
/**
 * Raise an error for re-entrant dataflow evaluation.
 */ function reentrant(df) {
    df.error("Dataflow already running. Use runAsync() to chain invocations.");
    return df;
}
/**
 * Enqueue an operator into the priority queue for evaluation. The operator
 * will be enqueued if it has no registered pulse for the current cycle, or if
 * the force argument is true. Upon enqueue, this method also sets the
 * operator's qrank to the current rank value.
 * @param {Operator} op - The operator to enqueue.
 * @param {boolean} [force] - A flag indicating if the operator should be
 *   forceably added to the queue, even if it has already been previously
 *   enqueued during the current pulse propagation. This is useful when the
 *   dataflow graph is dynamically modified and the operator rank changes.
 */ function enqueue(op, force) {
    const q = op.stamp < this._clock;
    if (q) op.stamp = this._clock;
    if (q || force) {
        op.qrank = op.rank;
        this._heap.push(op);
    }
}
/**
 * Provide a correct pulse for evaluating an operator. If the operator has an
 * explicit source operator, we will try to pull the pulse(s) from it.
 * If there is an array of source operators, we build a multi-pulse.
 * Otherwise, we return a current pulse with correct source data.
 * If the pulse is the pulse map has an explicit target set, we use that.
 * Else if the pulse on the upstream source operator is current, we use that.
 * Else we use the pulse from the pulse map, but copy the source tuple array.
 * @param {Operator} op - The operator for which to get an input pulse.
 * @param {string} [encode] - An (optional) encoding set name with which to
 *   annotate the returned pulse. See {@link run} for more information.
 */ function getPulse(op, encode) {
    const s = op.source, stamp = this._clock;
    return s && (0, $4SWbq.isArray)(s) ? new MultiPulse(this, stamp, s.map((_)=>_.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);
}
function singlePulse(p, s) {
    if (s && s.stamp === p.stamp) return s;
    p = p.fork();
    if (s && s !== StopPropagation) p.source = s.source;
    return p;
}
const NO_OPT = {
    skip: false,
    force: false
};
/**
 * Touches an operator, scheduling it to be evaluated. If invoked outside of
 * a pulse propagation, the operator will be evaluated the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the operator
 * will be queued for evaluation if and only if the operator has not yet been
 * evaluated on the current propagation timestamp.
 * @param {Operator} op - The operator to touch.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */ function touch(op, options) {
    const opt = options || NO_OPT;
    if (this._pulse) // if in midst of propagation, add to priority queue
    this._enqueue(op);
    else // otherwise, queue for next propagation
    this._touched.add(op);
    if (opt.skip) op.skip(true);
    return this;
}
/**
 * Updates the value of the given operator.
 * @param {Operator} op - The operator to update.
 * @param {*} value - The value to set.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */ function update(op, value, options) {
    const opt = options || NO_OPT;
    if (op.set(value) || opt.force) this.touch(op, opt);
    return this;
}
/**
 * Pulses an operator with a changeset of tuples. If invoked outside of
 * a pulse propagation, the pulse will be applied the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the pulse
 * will be added to the set of active pulses and will be applied if and
 * only if the target operator has not yet been evaluated on the current
 * propagation timestamp.
 * @param {Operator} op - The operator to pulse.
 * @param {ChangeSet} value - The tuple changeset to apply.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */ function pulse(op, changeset, options) {
    this.touch(op, options || NO_OPT);
    const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)), t = op.pulse && op.pulse.source || [];
    p.target = op;
    this._input[op.id] = changeset.pulse(p, t);
    return this;
}
function Heap(cmp) {
    let nodes = [];
    return {
        clear: ()=>nodes = [],
        size: ()=>nodes.length,
        peek: ()=>nodes[0],
        push: (x)=>{
            nodes.push(x);
            return siftdown(nodes, 0, nodes.length - 1, cmp);
        },
        pop: ()=>{
            const last = nodes.pop();
            let item;
            if (nodes.length) {
                item = nodes[0];
                nodes[0] = last;
                siftup(nodes, 0, cmp);
            } else item = last;
            return item;
        }
    };
}
function siftdown(array, start, idx, cmp) {
    let parent, pidx;
    const item = array[idx];
    while(idx > start){
        pidx = idx - 1 >> 1;
        parent = array[pidx];
        if (cmp(item, parent) < 0) {
            array[idx] = parent;
            idx = pidx;
            continue;
        }
        break;
    }
    return array[idx] = item;
}
function siftup(array, idx, cmp) {
    const start = idx, end = array.length, item = array[idx];
    let cidx = (idx << 1) + 1, ridx;
    while(cidx < end){
        ridx = cidx + 1;
        if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) cidx = ridx;
        array[idx] = array[cidx];
        idx = cidx;
        cidx = (idx << 1) + 1;
    }
    array[idx] = item;
    return siftdown(array, start, idx, cmp);
}
/**
 * A dataflow graph for reactive processing of data streams.
 * @constructor
 */ function Dataflow() {
    this.logger((0, $4SWbq.logger)());
    this.logLevel((0, $4SWbq.Error));
    this._clock = 0;
    this._rank = 0;
    this._locale = (0, $dcUFF.defaultLocale)();
    try {
        this._loader = (0, $2ttvf.loader)();
    } catch (e) {
    // do nothing if loader module is unavailable
    }
    this._touched = UniqueList((0, $4SWbq.id));
    this._input = {};
    this._pulse = null;
    this._heap = Heap((a, b)=>a.qrank - b.qrank);
    this._postrun = [];
}
function logMethod(method) {
    return function() {
        return this._log[method].apply(this, arguments);
    };
}
Dataflow.prototype = {
    /**
   * The current timestamp of this dataflow. This value reflects the
   * timestamp of the previous dataflow run. The dataflow is initialized
   * with a stamp value of 0. The initial run of the dataflow will have
   * a timestap of 1, and so on. This value will match the
   * {@link Pulse.stamp} property.
   * @return {number} - The current timestamp value.
   */ stamp () {
        return this._clock;
    },
    /**
   * Gets or sets the loader instance to use for data file loading. A
   * loader object must provide a "load" method for loading files and a
   * "sanitize" method for checking URL/filename validity. Both methods
   * should accept a URI and options hash as arguments, and return a Promise
   * that resolves to the loaded file contents (load) or a hash containing
   * sanitized URI data with the sanitized url assigned to the "href" property
   * (sanitize).
   * @param {object} _ - The loader instance to use.
   * @return {object|Dataflow} - If no arguments are provided, returns
   *   the current loader instance. Otherwise returns this Dataflow instance.
   */ loader (_) {
        if (arguments.length) {
            this._loader = _;
            return this;
        } else return this._loader;
    },
    /**
   * Gets or sets the locale instance to use for formatting and parsing
   * string values. The locale object should be provided by the
   * vega-format library, and include methods such as format, timeFormat,
   * utcFormat, timeParse, and utcParse.
   * @param {object} _ - The locale instance to use.
   * @return {object|Dataflow} - If no arguments are provided, returns
   *   the current locale instance. Otherwise returns this Dataflow instance.
   */ locale (_) {
        if (arguments.length) {
            this._locale = _;
            return this;
        } else return this._locale;
    },
    /**
   * Get or set the logger instance used to log messages. If no arguments are
   * provided, returns the current logger instance. Otherwise, sets the logger
   * and return this Dataflow instance. Provided loggers must support the full
   * API of logger objects generated by the vega-util logger method. Note that
   * by default the log level of the new logger will be used; use the logLevel
   * method to adjust the log level as needed.
   */ logger (logger) {
        if (arguments.length) {
            this._log = logger;
            return this;
        } else return this._log;
    },
    /**
   * Logs an error message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit error messages.
   */ error: logMethod("error"),
    /**
   * Logs a warning message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit warning messages.
   */ warn: logMethod("warn"),
    /**
   * Logs a information message. By default, logged messages are written to
   * console output. The message will only be logged if the current log level is
   * high enough to permit information messages.
   */ info: logMethod("info"),
    /**
   * Logs a debug message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit debug messages.
   */ debug: logMethod("debug"),
    /**
   * Get or set the current log level. If an argument is provided, it
   * will be used as the new log level.
   * @param {number} [level] - Should be one of None, Warn, Info
   * @return {number} - The current log level.
   */ logLevel: logMethod("level"),
    /**
   * Empty entry threshold for garbage cleaning. Map data structures will
   * perform cleaning once the number of empty entries exceeds this value.
   */ cleanThreshold: 1e4,
    add: // OPERATOR REGISTRATION
    add,
    connect: connect,
    rank: rank,
    rerank: rerank,
    pulse: // OPERATOR UPDATES
    pulse,
    touch: touch,
    update: update,
    changeset: changeset,
    ingest: // DATA LOADING
    ingest,
    parse: parse,
    preload: preload,
    request: request,
    events: // EVENT HANDLING
    events,
    on: on,
    evaluate: // PULSE PROPAGATION
    evaluate,
    run: run,
    runAsync: runAsync,
    runAfter: runAfter,
    _enqueue: enqueue,
    _getPulse: getPulse
};
/**
 * Abstract class for operators that process data tuples.
 * Subclasses must provide a {@link transform} method for operator processing.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {Operator} [source] - The operator from which to receive pulses.
 */ function Transform(init, params) {
    Operator.call(this, init, null, params);
}
(0, $4SWbq.inherits)(Transform, Operator, {
    /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */ run (pulse) {
        if (pulse.stamp < this.stamp) return pulse.StopPropagation;
        let rv;
        if (this.skip()) this.skip(false);
        else rv = this.evaluate(pulse);
        rv = rv || pulse;
        if (rv.then) rv = rv.then((_)=>this.pulse = _);
        else if (rv !== pulse.StopPropagation) this.pulse = rv;
        return rv;
    },
    /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Marshalls parameter values and then invokes {@link transform}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
       value (including undefined) will let the input pulse pass through.
  */ evaluate (pulse) {
        const params = this.marshall(pulse.stamp), out = this.transform(params, pulse);
        params.clear();
        return out;
    },
    /**
   * Process incoming pulses.
   * Subclasses should override this method to implement transforms.
   * @param {Parameters} _ - The operator parameter values.
   * @param {Pulse} pulse - The current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
   *   value (including undefined) will let the input pulse pass through.
   */ transform () {}
});
const transforms = {};
function definition(type) {
    const t = transform(type);
    return t && t.Definition || null;
}
function transform(type) {
    type = type && type.toLowerCase();
    return (0, $4SWbq.hasOwnProperty)(transforms, type) ? transforms[type] : null;
}

});
parcelRegister("2ttvf", function(module, exports) {

$parcel$export(module.exports, "typeParsers", () => $1cd52cdd6a67f19d$export$ed663718969d9df);
$parcel$export(module.exports, "inferType", () => $1cd52cdd6a67f19d$export$8af023fe1de7a979);
$parcel$export(module.exports, "inferTypes", () => $1cd52cdd6a67f19d$export$d1f45bcb9b7e2743);
$parcel$export(module.exports, "format", () => $1cd52cdd6a67f19d$export$d9468344d3651243);
$parcel$export(module.exports, "formats", () => $1cd52cdd6a67f19d$export$55069460464ca7a9);
$parcel$export(module.exports, "responseType", () => $1cd52cdd6a67f19d$export$751187e9a25096f0);
$parcel$export(module.exports, "read", () => $1cd52cdd6a67f19d$export$aafa59e2e03f2942);
$parcel$export(module.exports, "loader", () => $1cd52cdd6a67f19d$export$f4c5de44377d2946);

var $4SWbq = parcelRequire("4SWbq");

var $c4nAJ = parcelRequire("c4nAJ");
parcelRequire("jB1Xl");
var $ac8kL = parcelRequire("ac8kL");
var $5Tq5i = parcelRequire("5Tq5i");

var $dcUFF = parcelRequire("dcUFF");

var $bI7tl = parcelRequire("bI7tl");
var $1cd52cdd6a67f19d$require$Buffer = $bI7tl.Buffer;
// Matches absolute URLs with optional protocol
//   https://...    file://...    //...
const $1cd52cdd6a67f19d$var$protocol_re = /^(data:|([A-Za-z]+:)?\/\/)/;
// Matches allowed URIs. From https://github.com/cure53/DOMPurify/blob/master/src/regexp.js with added file://
const $1cd52cdd6a67f19d$var$allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i; // eslint-disable-line no-useless-escape
const $1cd52cdd6a67f19d$var$whitespace_re = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g; // eslint-disable-line no-control-regex
// Special treatment in node.js for the file: protocol
const $1cd52cdd6a67f19d$var$fileProtocol = "file://";
/**
 * Factory for a loader constructor that provides methods for requesting
 * files from either the network or disk, and for sanitizing request URIs.
 * @param {function} fetch - The Fetch API for HTTP network requests.
 *   If null or undefined, HTTP loading will be disabled.
 * @param {object} fs - The file system interface for file loading.
 *   If null or undefined, local file loading will be disabled.
 * @return {function} A loader constructor with the following signature:
 *   param {object} [options] - Optional default loading options to use.
 *   return {object} - A new loader instance.
 */ function $1cd52cdd6a67f19d$var$loaderFactory(fetch1, fs) {
    return (options)=>({
            options: options || {},
            sanitize: $1cd52cdd6a67f19d$var$sanitize,
            load: $1cd52cdd6a67f19d$var$load,
            fileAccess: !!fs,
            file: $1cd52cdd6a67f19d$var$fileLoader(fs),
            http: $1cd52cdd6a67f19d$var$httpLoader(fetch1)
        });
}
/**
 * Load an external resource, typically either from the web or from the local
 * filesystem. This function uses {@link sanitize} to first sanitize the uri,
 * then calls either {@link http} (for web requests) or {@link file} (for
 * filesystem loading).
 * @param {string} uri - The resource indicator (e.g., URL or filename).
 * @param {object} [options] - Optional loading options. These options will
 *   override any existing default options.
 * @return {Promise} - A promise that resolves to the loaded content.
 */ async function $1cd52cdd6a67f19d$var$load(uri, options) {
    const opt = await this.sanitize(uri, options), url = opt.href;
    return opt.localFile ? this.file(url) : this.http(url, options);
}
/**
 * URI sanitizer function.
 * @param {string} uri - The uri (url or filename) to check.
 * @param {object} options - An options hash.
 * @return {Promise} - A promise that resolves to an object containing
 *  sanitized uri data, or rejects it the input uri is deemed invalid.
 *  The properties of the resolved object are assumed to be
 *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
 *  provided by the 'href' property of the returned object.
 */ async function $1cd52cdd6a67f19d$var$sanitize(uri, options) {
    options = (0, $4SWbq.extend)({}, this.options, options);
    const fileAccess = this.fileAccess, result = {
        href: null
    };
    let isFile, loadFile, base;
    const isAllowed = $1cd52cdd6a67f19d$var$allowed_re.test(uri.replace($1cd52cdd6a67f19d$var$whitespace_re, ""));
    if (uri == null || typeof uri !== "string" || !isAllowed) (0, $4SWbq.error)("Sanitize failure, invalid URI: " + (0, $4SWbq.stringValue)(uri));
    const hasProtocol = $1cd52cdd6a67f19d$var$protocol_re.test(uri);
    // if relative url (no protocol/host), prepend baseURL
    if ((base = options.baseURL) && !hasProtocol) {
        // Ensure that there is a slash between the baseURL (e.g. hostname) and url
        if (!uri.startsWith("/") && !base.endsWith("/")) uri = "/" + uri;
        uri = base + uri;
    }
    // should we load from file system?
    loadFile = (isFile = uri.startsWith($1cd52cdd6a67f19d$var$fileProtocol)) || options.mode === "file" || options.mode !== "http" && !hasProtocol && fileAccess;
    if (isFile) // strip file protocol
    uri = uri.slice($1cd52cdd6a67f19d$var$fileProtocol.length);
    else if (uri.startsWith("//")) {
        if (options.defaultProtocol === "file") {
            // if is file, strip protocol and set loadFile flag
            uri = uri.slice(2);
            loadFile = true;
        } else // if relative protocol (starts with '//'), prepend default protocol
        uri = (options.defaultProtocol || "http") + ":" + uri;
    }
    // set non-enumerable mode flag to indicate local file load
    Object.defineProperty(result, "localFile", {
        value: !!loadFile
    });
    // set uri
    result.href = uri;
    // set default result target, if specified
    if (options.target) result.target = options.target + "";
    // set default result rel, if specified (#1542)
    if (options.rel) result.rel = options.rel + "";
    // provide control over cross-origin image handling (#2238)
    // https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
    if (options.context === "image" && options.crossOrigin) result.crossOrigin = options.crossOrigin + "";
    // return
    return result;
}
/**
 * File system loader factory.
 * @param {object} fs - The file system interface.
 * @return {function} - A file loader with the following signature:
 *   param {string} filename - The file system path to load.
 *   param {string} filename - The file system path to load.
 *   return {Promise} A promise that resolves to the file contents.
 */ function $1cd52cdd6a67f19d$var$fileLoader(fs) {
    return fs ? (filename)=>new Promise((accept, reject)=>{
            fs.readFile(filename, (error, data)=>{
                if (error) reject(error);
                else accept(data);
            });
        }) : $1cd52cdd6a67f19d$var$fileReject;
}
/**
 * Default file system loader that simply rejects.
 */ async function $1cd52cdd6a67f19d$var$fileReject() {
    (0, $4SWbq.error)("No file system access.");
}
/**
 * HTTP request handler factory.
 * @param {function} fetch - The Fetch API method.
 * @return {function} - An http loader with the following signature:
 *   param {string} url - The url to request.
 *   param {object} options - An options hash.
 *   return {Promise} - A promise that resolves to the file contents.
 */ function $1cd52cdd6a67f19d$var$httpLoader(fetch1) {
    return fetch1 ? async function(url, options) {
        const opt = (0, $4SWbq.extend)({}, this.options.http, options), type = options && options.response, response = await fetch1(url, opt);
        return !response.ok ? (0, $4SWbq.error)(response.status + "" + response.statusText) : (0, $4SWbq.isFunction)(response[type]) ? response[type]() : response.text();
    } : $1cd52cdd6a67f19d$var$httpReject;
}
/**
 * Default http request handler that simply rejects.
 */ async function $1cd52cdd6a67f19d$var$httpReject() {
    (0, $4SWbq.error)("No HTTP fetch method available.");
}
const $1cd52cdd6a67f19d$var$isValid = (_)=>_ != null && _ === _;
const $1cd52cdd6a67f19d$var$isBoolean = (_)=>_ === "true" || _ === "false" || _ === true || _ === false;
const $1cd52cdd6a67f19d$var$isDate = (_)=>!Number.isNaN(Date.parse(_));
const $1cd52cdd6a67f19d$var$isNumber = (_)=>!Number.isNaN(+_) && !(_ instanceof Date);
const $1cd52cdd6a67f19d$var$isInteger = (_)=>$1cd52cdd6a67f19d$var$isNumber(_) && Number.isInteger(+_);
const $1cd52cdd6a67f19d$export$ed663718969d9df = {
    boolean: (0, $4SWbq.toBoolean),
    integer: (0, $4SWbq.toNumber),
    number: (0, $4SWbq.toNumber),
    date: (0, $4SWbq.toDate),
    string: (0, $4SWbq.toString),
    unknown: (0, $4SWbq.identity)
};
const $1cd52cdd6a67f19d$var$typeTests = [
    $1cd52cdd6a67f19d$var$isBoolean,
    $1cd52cdd6a67f19d$var$isInteger,
    $1cd52cdd6a67f19d$var$isNumber,
    $1cd52cdd6a67f19d$var$isDate
];
const $1cd52cdd6a67f19d$var$typeList = [
    "boolean",
    "integer",
    "number",
    "date"
];
function $1cd52cdd6a67f19d$export$8af023fe1de7a979(values, field) {
    if (!values || !values.length) return "unknown";
    const n = values.length, m = $1cd52cdd6a67f19d$var$typeTests.length, a = $1cd52cdd6a67f19d$var$typeTests.map((_, i)=>i + 1);
    for(let i = 0, t = 0, j, value; i < n; ++i){
        value = field ? values[i][field] : values[i];
        for(j = 0; j < m; ++j)if (a[j] && $1cd52cdd6a67f19d$var$isValid(value) && !$1cd52cdd6a67f19d$var$typeTests[j](value)) {
            a[j] = 0;
            ++t;
            if (t === $1cd52cdd6a67f19d$var$typeTests.length) return "string";
        }
    }
    return $1cd52cdd6a67f19d$var$typeList[a.reduce((u, v)=>u === 0 ? v : u, 0) - 1];
}
function $1cd52cdd6a67f19d$export$d1f45bcb9b7e2743(data, fields) {
    return fields.reduce((types, field)=>{
        types[field] = $1cd52cdd6a67f19d$export$8af023fe1de7a979(data, field);
        return types;
    }, {});
}
function $1cd52cdd6a67f19d$var$delimitedFormat(delimiter) {
    const parse = function(data, format) {
        const delim = {
            delimiter: delimiter
        };
        return $1cd52cdd6a67f19d$var$dsv(data, format ? (0, $4SWbq.extend)(format, delim) : delim);
    };
    parse.responseType = "text";
    return parse;
}
function $1cd52cdd6a67f19d$var$dsv(data, format) {
    if (format.header) data = format.header.map((0, $4SWbq.stringValue)).join(format.delimiter) + "\n" + data;
    return (0, $c4nAJ.default)(format.delimiter).parse(data + "");
}
$1cd52cdd6a67f19d$var$dsv.responseType = "text";
function $1cd52cdd6a67f19d$var$isBuffer(_) {
    return typeof $1cd52cdd6a67f19d$require$Buffer === "function" && (0, $4SWbq.isFunction)($1cd52cdd6a67f19d$require$Buffer.isBuffer) ? $1cd52cdd6a67f19d$require$Buffer.isBuffer(_) : false;
}
function $1cd52cdd6a67f19d$var$json(data, format) {
    const prop = format && format.property ? (0, $4SWbq.field)(format.property) : (0, $4SWbq.identity);
    return (0, $4SWbq.isObject)(data) && !$1cd52cdd6a67f19d$var$isBuffer(data) ? $1cd52cdd6a67f19d$var$parseJSON(prop(data), format) : prop(JSON.parse(data));
}
$1cd52cdd6a67f19d$var$json.responseType = "json";
function $1cd52cdd6a67f19d$var$parseJSON(data, format) {
    if (!(0, $4SWbq.isArray)(data) && (0, $4SWbq.isIterable)(data)) data = [
        ...data
    ];
    return format && format.copy ? JSON.parse(JSON.stringify(data)) : data;
}
const $1cd52cdd6a67f19d$var$filters = {
    interior: (a, b)=>a !== b,
    exterior: (a, b)=>a === b
};
function $1cd52cdd6a67f19d$var$topojson(data, format) {
    let method, object, property, filter;
    data = $1cd52cdd6a67f19d$var$json(data, format);
    if (format && format.feature) {
        method = (0, $ac8kL.default);
        property = format.feature;
    } else if (format && format.mesh) {
        method = (0, $5Tq5i.default);
        property = format.mesh;
        filter = $1cd52cdd6a67f19d$var$filters[format.filter];
    } else (0, $4SWbq.error)("Missing TopoJSON feature or mesh parameter.");
    object = (object = data.objects[property]) ? method(data, object, filter) : (0, $4SWbq.error)("Invalid TopoJSON object: " + property);
    return object && object.features || [
        object
    ];
}
$1cd52cdd6a67f19d$var$topojson.responseType = "json";
const $1cd52cdd6a67f19d$export$d9468344d3651243 = {
    dsv: $1cd52cdd6a67f19d$var$dsv,
    csv: $1cd52cdd6a67f19d$var$delimitedFormat(","),
    tsv: $1cd52cdd6a67f19d$var$delimitedFormat("	"),
    json: $1cd52cdd6a67f19d$var$json,
    topojson: $1cd52cdd6a67f19d$var$topojson
};
function $1cd52cdd6a67f19d$export$55069460464ca7a9(name, reader) {
    if (arguments.length > 1) {
        $1cd52cdd6a67f19d$export$d9468344d3651243[name] = reader;
        return this;
    } else return (0, $4SWbq.hasOwnProperty)($1cd52cdd6a67f19d$export$d9468344d3651243, name) ? $1cd52cdd6a67f19d$export$d9468344d3651243[name] : null;
}
function $1cd52cdd6a67f19d$export$751187e9a25096f0(type) {
    const f = $1cd52cdd6a67f19d$export$55069460464ca7a9(type);
    return f && f.responseType || "text";
}
function $1cd52cdd6a67f19d$export$aafa59e2e03f2942(data, schema, timeParser, utcParser) {
    schema = schema || {};
    const reader = $1cd52cdd6a67f19d$export$55069460464ca7a9(schema.type || "json");
    if (!reader) (0, $4SWbq.error)("Unknown data format type: " + schema.type);
    data = reader(data, schema);
    if (schema.parse) $1cd52cdd6a67f19d$var$parse(data, schema.parse, timeParser, utcParser);
    if ((0, $4SWbq.hasOwnProperty)(data, "columns")) delete data.columns;
    return data;
}
function $1cd52cdd6a67f19d$var$parse(data, types, timeParser, utcParser) {
    if (!data.length) return; // early exit for empty data
    const locale = (0, $dcUFF.timeFormatDefaultLocale)();
    timeParser = timeParser || locale.timeParse;
    utcParser = utcParser || locale.utcParse;
    let fields = data.columns || Object.keys(data[0]), datum, field, i, j, n, m;
    if (types === "auto") types = $1cd52cdd6a67f19d$export$d1f45bcb9b7e2743(data, fields);
    fields = Object.keys(types);
    const parsers = fields.map((field)=>{
        const type = types[field];
        let parts, pattern;
        if (type && (type.startsWith("date:") || type.startsWith("utc:"))) {
            parts = type.split(/:(.+)?/, 2); // split on first :
            pattern = parts[1];
            if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') pattern = pattern.slice(1, -1);
            const parse = parts[0] === "utc" ? utcParser : timeParser;
            return parse(pattern);
        }
        if (!$1cd52cdd6a67f19d$export$ed663718969d9df[type]) throw Error("Illegal format pattern: " + field + ":" + type);
        return $1cd52cdd6a67f19d$export$ed663718969d9df[type];
    });
    for(i = 0, n = data.length, m = fields.length; i < n; ++i){
        datum = data[i];
        for(j = 0; j < m; ++j){
            field = fields[j];
            datum[field] = parsers[j](datum[field]);
        }
    }
}
const $1cd52cdd6a67f19d$export$f4c5de44377d2946 = $1cd52cdd6a67f19d$var$loaderFactory(typeof fetch !== "undefined" && fetch, // use built-in fetch API
null // no file system access
);

});
parcelRegister("c4nAJ", function(module, exports) {

$parcel$export(module.exports, "default", () => $8c98288a3ab7ca82$export$2e2bcd8739ae039);
var $8c98288a3ab7ca82$var$EOL = {}, $8c98288a3ab7ca82$var$EOF = {}, $8c98288a3ab7ca82$var$QUOTE = 34, $8c98288a3ab7ca82$var$NEWLINE = 10, $8c98288a3ab7ca82$var$RETURN = 13;
function $8c98288a3ab7ca82$var$objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + '] || ""';
    }).join(",") + "}");
}
function $8c98288a3ab7ca82$var$customConverter(columns, f) {
    var object = $8c98288a3ab7ca82$var$objectConverter(columns);
    return function(row, i) {
        return f(object(row), i, columns);
    };
}
// Compute unique columns in order of discovery.
function $8c98288a3ab7ca82$var$inferColumns(rows) {
    var columnSet = Object.create(null), columns = [];
    rows.forEach(function(row) {
        for(var column in row)if (!(column in columnSet)) columns.push(columnSet[column] = column);
    });
    return columns;
}
function $8c98288a3ab7ca82$var$pad(value, width) {
    var s = value + "", length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
}
function $8c98288a3ab7ca82$var$formatYear(year) {
    return year < 0 ? "-" + $8c98288a3ab7ca82$var$pad(-year, 6) : year > 9999 ? "+" + $8c98288a3ab7ca82$var$pad(year, 6) : $8c98288a3ab7ca82$var$pad(year, 4);
}
function $8c98288a3ab7ca82$var$formatDate(date) {
    var hours = date.getUTCHours(), minutes = date.getUTCMinutes(), seconds = date.getUTCSeconds(), milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date" : $8c98288a3ab7ca82$var$formatYear(date.getUTCFullYear(), 4) + "-" + $8c98288a3ab7ca82$var$pad(date.getUTCMonth() + 1, 2) + "-" + $8c98288a3ab7ca82$var$pad(date.getUTCDate(), 2) + (milliseconds ? "T" + $8c98288a3ab7ca82$var$pad(hours, 2) + ":" + $8c98288a3ab7ca82$var$pad(minutes, 2) + ":" + $8c98288a3ab7ca82$var$pad(seconds, 2) + "." + $8c98288a3ab7ca82$var$pad(milliseconds, 3) + "Z" : seconds ? "T" + $8c98288a3ab7ca82$var$pad(hours, 2) + ":" + $8c98288a3ab7ca82$var$pad(minutes, 2) + ":" + $8c98288a3ab7ca82$var$pad(seconds, 2) + "Z" : minutes || hours ? "T" + $8c98288a3ab7ca82$var$pad(hours, 2) + ":" + $8c98288a3ab7ca82$var$pad(minutes, 2) + "Z" : "");
}
function $8c98288a3ab7ca82$export$2e2bcd8739ae039(delimiter) {
    var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
    function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
            if (convert) return convert(row, i - 1);
            columns = row, convert = f ? $8c98288a3ab7ca82$var$customConverter(row, f) : $8c98288a3ab7ca82$var$objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
    }
    function parseRows(text, f) {
        var rows = [], N = text.length, I = 0, n = 0, t, eof = N <= 0, eol = false; // current token followed by EOL?
        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === $8c98288a3ab7ca82$var$NEWLINE) --N;
        if (text.charCodeAt(N - 1) === $8c98288a3ab7ca82$var$RETURN) --N;
        function token() {
            if (eof) return $8c98288a3ab7ca82$var$EOF;
            if (eol) return eol = false, $8c98288a3ab7ca82$var$EOL;
            // Unescape quotes.
            var i, j = I, c;
            if (text.charCodeAt(j) === $8c98288a3ab7ca82$var$QUOTE) {
                while(I++ < N && text.charCodeAt(I) !== $8c98288a3ab7ca82$var$QUOTE || text.charCodeAt(++I) === $8c98288a3ab7ca82$var$QUOTE);
                if ((i = I) >= N) eof = true;
                else if ((c = text.charCodeAt(I++)) === $8c98288a3ab7ca82$var$NEWLINE) eol = true;
                else if (c === $8c98288a3ab7ca82$var$RETURN) {
                    eol = true;
                    if (text.charCodeAt(I) === $8c98288a3ab7ca82$var$NEWLINE) ++I;
                }
                return text.slice(j + 1, i - 1).replace(/""/g, '"');
            }
            // Find next delimiter or newline.
            while(I < N){
                if ((c = text.charCodeAt(i = I++)) === $8c98288a3ab7ca82$var$NEWLINE) eol = true;
                else if (c === $8c98288a3ab7ca82$var$RETURN) {
                    eol = true;
                    if (text.charCodeAt(I) === $8c98288a3ab7ca82$var$NEWLINE) ++I;
                } else if (c !== DELIMITER) continue;
                return text.slice(j, i);
            }
            // Return last token before EOF.
            return eof = true, text.slice(j, N);
        }
        while((t = token()) !== $8c98288a3ab7ca82$var$EOF){
            var row = [];
            while(t !== $8c98288a3ab7ca82$var$EOL && t !== $8c98288a3ab7ca82$var$EOF)row.push(t), t = token();
            if (f && (row = f(row, n++)) == null) continue;
            rows.push(row);
        }
        return rows;
    }
    function preformatBody(rows, columns) {
        return rows.map(function(row) {
            return columns.map(function(column) {
                return formatValue(row[column]);
            }).join(delimiter);
        });
    }
    function format(rows, columns) {
        if (columns == null) columns = $8c98288a3ab7ca82$var$inferColumns(rows);
        return [
            columns.map(formatValue).join(delimiter)
        ].concat(preformatBody(rows, columns)).join("\n");
    }
    function formatBody(rows, columns) {
        if (columns == null) columns = $8c98288a3ab7ca82$var$inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
    }
    function formatRows(rows) {
        return rows.map(formatRow).join("\n");
    }
    function formatRow(row) {
        return row.map(formatValue).join(delimiter);
    }
    function formatValue(value) {
        return value == null ? "" : value instanceof Date ? $8c98288a3ab7ca82$var$formatDate(value) : reFormat.test(value += "") ? '"' + value.replace(/"/g, '""') + '"' : value;
    }
    return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
    };
}

});

parcelRegister("jB1Xl", function(module, exports) {

$parcel$export(module.exports, "feature", () => (parcelRequire("ac8kL")).default);
$parcel$export(module.exports, "mesh", () => (parcelRequire("5Tq5i")).default);

var $eF19G = parcelRequire("eF19G");

var $ac8kL = parcelRequire("ac8kL");

var $5Tq5i = parcelRequire("5Tq5i");

var $9JFWC = parcelRequire("9JFWC");

var $iRwWn = parcelRequire("iRwWn");

var $fPhx7 = parcelRequire("fPhx7");

var $f3AB8 = parcelRequire("f3AB8");

var $hbbUg = parcelRequire("hbbUg");

});
parcelRegister("eF19G", function(module, exports) {

$parcel$export(module.exports, "default", () => $aac5ca6833ad17f4$export$2e2bcd8739ae039);

var $f3AB8 = parcelRequire("f3AB8");
function $aac5ca6833ad17f4$export$2e2bcd8739ae039(topology) {
    var t = (0, $f3AB8.default)(topology.transform), key, x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;
    function bboxPoint(p) {
        p = t(p);
        if (p[0] < x0) x0 = p[0];
        if (p[0] > x1) x1 = p[0];
        if (p[1] < y0) y0 = p[1];
        if (p[1] > y1) y1 = p[1];
    }
    function bboxGeometry(o) {
        switch(o.type){
            case "GeometryCollection":
                o.geometries.forEach(bboxGeometry);
                break;
            case "Point":
                bboxPoint(o.coordinates);
                break;
            case "MultiPoint":
                o.coordinates.forEach(bboxPoint);
                break;
        }
    }
    topology.arcs.forEach(function(arc) {
        var i = -1, n = arc.length, p;
        while(++i < n){
            p = t(arc[i], i);
            if (p[0] < x0) x0 = p[0];
            if (p[0] > x1) x1 = p[0];
            if (p[1] < y0) y0 = p[1];
            if (p[1] > y1) y1 = p[1];
        }
    });
    for(key in topology.objects)bboxGeometry(topology.objects[key]);
    return [
        x0,
        y0,
        x1,
        y1
    ];
}

});
parcelRegister("f3AB8", function(module, exports) {

$parcel$export(module.exports, "default", () => $af63866b17ea3b72$export$2e2bcd8739ae039);

var $esxmJ = parcelRequire("esxmJ");
function $af63866b17ea3b72$export$2e2bcd8739ae039(transform) {
    if (transform == null) return 0, $esxmJ.default;
    var x0, y0, kx = transform.scale[0], ky = transform.scale[1], dx = transform.translate[0], dy = transform.translate[1];
    return function(input, i) {
        if (!i) x0 = y0 = 0;
        var j = 2, n = input.length, output = new Array(n);
        output[0] = (x0 += input[0]) * kx + dx;
        output[1] = (y0 += input[1]) * ky + dy;
        while(j < n)output[j] = input[j], ++j;
        return output;
    };
}

});
parcelRegister("esxmJ", function(module, exports) {

$parcel$export(module.exports, "default", () => $a86d8feaa1739089$export$2e2bcd8739ae039);
function $a86d8feaa1739089$export$2e2bcd8739ae039(x) {
    return x;
}

});



parcelRegister("ac8kL", function(module, exports) {

$parcel$export(module.exports, "default", () => $76c17d4faea51f4c$export$2e2bcd8739ae039);
$parcel$export(module.exports, "object", () => $76c17d4faea51f4c$export$be5493f9613cbbe);

var $lR333 = parcelRequire("lR333");

var $f3AB8 = parcelRequire("f3AB8");
function $76c17d4faea51f4c$export$2e2bcd8739ae039(topology, o) {
    if (typeof o === "string") o = topology.objects[o];
    return o.type === "GeometryCollection" ? {
        type: "FeatureCollection",
        features: o.geometries.map(function(o) {
            return $76c17d4faea51f4c$var$feature(topology, o);
        })
    } : $76c17d4faea51f4c$var$feature(topology, o);
}
function $76c17d4faea51f4c$var$feature(topology, o) {
    var id = o.id, bbox = o.bbox, properties = o.properties == null ? {} : o.properties, geometry = $76c17d4faea51f4c$export$be5493f9613cbbe(topology, o);
    return id == null && bbox == null ? {
        type: "Feature",
        properties: properties,
        geometry: geometry
    } : bbox == null ? {
        type: "Feature",
        id: id,
        properties: properties,
        geometry: geometry
    } : {
        type: "Feature",
        id: id,
        bbox: bbox,
        properties: properties,
        geometry: geometry
    };
}
function $76c17d4faea51f4c$export$be5493f9613cbbe(topology, o) {
    var transformPoint = (0, $f3AB8.default)(topology.transform), arcs = topology.arcs;
    function arc(i, points) {
        if (points.length) points.pop();
        for(var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k)points.push(transformPoint(a[k], k));
        if (i < 0) (0, $lR333.default)(points, n);
    }
    function point(p) {
        return transformPoint(p);
    }
    function line(arcs) {
        var points = [];
        for(var i = 0, n = arcs.length; i < n; ++i)arc(arcs[i], points);
        if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
        return points;
    }
    function ring(arcs) {
        var points = line(arcs);
        while(points.length < 4)points.push(points[0]); // This may happen if an arc has only two points.
        return points;
    }
    function polygon(arcs) {
        return arcs.map(ring);
    }
    function geometry(o) {
        var type = o.type, coordinates;
        switch(type){
            case "GeometryCollection":
                return {
                    type: type,
                    geometries: o.geometries.map(geometry)
                };
            case "Point":
                coordinates = point(o.coordinates);
                break;
            case "MultiPoint":
                coordinates = o.coordinates.map(point);
                break;
            case "LineString":
                coordinates = line(o.arcs);
                break;
            case "MultiLineString":
                coordinates = o.arcs.map(line);
                break;
            case "Polygon":
                coordinates = polygon(o.arcs);
                break;
            case "MultiPolygon":
                coordinates = o.arcs.map(polygon);
                break;
            default:
                return null;
        }
        return {
            type: type,
            coordinates: coordinates
        };
    }
    return geometry(o);
}

});
parcelRegister("lR333", function(module, exports) {

$parcel$export(module.exports, "default", () => $fe90e9826ab78949$export$2e2bcd8739ae039);
function $fe90e9826ab78949$export$2e2bcd8739ae039(array, n) {
    var t, j = array.length, i = j - n;
    while(i < --j)t = array[i], array[i++] = array[j], array[j] = t;
}

});


parcelRegister("5Tq5i", function(module, exports) {

$parcel$export(module.exports, "default", () => $44a652a5c1a060b5$export$2e2bcd8739ae039);

var $ac8kL = parcelRequire("ac8kL");

var $cvjcL = parcelRequire("cvjcL");
function $44a652a5c1a060b5$export$2e2bcd8739ae039(topology) {
    return (0, $ac8kL.object)(topology, $44a652a5c1a060b5$export$fc3815c78e52e7d6.apply(this, arguments));
}
function $44a652a5c1a060b5$export$fc3815c78e52e7d6(topology, object, filter) {
    var arcs, i, n;
    if (arguments.length > 1) arcs = $44a652a5c1a060b5$var$extractArcs(topology, object, filter);
    else for(i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i)arcs[i] = i;
    return {
        type: "MultiLineString",
        arcs: (0, $cvjcL.default)(topology, arcs)
    };
}
function $44a652a5c1a060b5$var$extractArcs(topology, object, filter) {
    var arcs = [], geomsByArc = [], geom;
    function extract0(i) {
        var j = i < 0 ? ~i : i;
        (geomsByArc[j] || (geomsByArc[j] = [])).push({
            i: i,
            g: geom
        });
    }
    function extract1(arcs) {
        arcs.forEach(extract0);
    }
    function extract2(arcs) {
        arcs.forEach(extract1);
    }
    function extract3(arcs) {
        arcs.forEach(extract2);
    }
    function geometry(o) {
        switch(geom = o, o.type){
            case "GeometryCollection":
                o.geometries.forEach(geometry);
                break;
            case "LineString":
                extract1(o.arcs);
                break;
            case "MultiLineString":
            case "Polygon":
                extract2(o.arcs);
                break;
            case "MultiPolygon":
                extract3(o.arcs);
                break;
        }
    }
    geometry(object);
    geomsByArc.forEach(filter == null ? function(geoms) {
        arcs.push(geoms[0].i);
    } : function(geoms) {
        if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
    });
    return arcs;
}

});
parcelRegister("cvjcL", function(module, exports) {

$parcel$export(module.exports, "default", () => $91a746feada99eca$export$2e2bcd8739ae039);
function $91a746feada99eca$export$2e2bcd8739ae039(topology, arcs) {
    var stitchedArcs = {}, fragmentByStart = {}, fragmentByEnd = {}, fragments = [], emptyIndex = -1;
    // Stitch empty arcs first, since they may be subsumed by other arcs.
    arcs.forEach(function(i, j) {
        var arc = topology.arcs[i < 0 ? ~i : i], t;
        if (arc.length < 3 && !arc[1][0] && !arc[1][1]) t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    });
    arcs.forEach(function(i) {
        var e = ends(i), start = e[0], end = e[1], f, g;
        if (f = fragmentByEnd[start]) {
            delete fragmentByEnd[f.end];
            f.push(i);
            f.end = end;
            if (g = fragmentByStart[end]) {
                delete fragmentByStart[g.start];
                var fg = g === f ? f : f.concat(g);
                fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
            } else fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        } else if (f = fragmentByStart[end]) {
            delete fragmentByStart[f.start];
            f.unshift(i);
            f.start = start;
            if (g = fragmentByEnd[start]) {
                delete fragmentByEnd[g.end];
                var gf = g === f ? f : g.concat(f);
                fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
            } else fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        } else {
            f = [
                i
            ];
            fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
        }
    });
    function ends(i) {
        var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
        if (topology.transform) p1 = [
            0,
            0
        ], arc.forEach(function(dp) {
            p1[0] += dp[0], p1[1] += dp[1];
        });
        else p1 = arc[arc.length - 1];
        return i < 0 ? [
            p1,
            p0
        ] : [
            p0,
            p1
        ];
    }
    function flush(fragmentByEnd, fragmentByStart) {
        for(var k in fragmentByEnd){
            var f = fragmentByEnd[k];
            delete fragmentByStart[f.start];
            delete f.start;
            delete f.end;
            f.forEach(function(i) {
                stitchedArcs[i < 0 ? ~i : i] = 1;
            });
            fragments.push(f);
        }
    }
    flush(fragmentByEnd, fragmentByStart);
    flush(fragmentByStart, fragmentByEnd);
    arcs.forEach(function(i) {
        if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([
            i
        ]);
    });
    return fragments;
}

});


parcelRegister("9JFWC", function(module, exports) {

var $ac8kL = parcelRequire("ac8kL");

var $cvjcL = parcelRequire("cvjcL");
function $7168da50ad5421e2$var$planarRingArea(ring) {
    var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
    while(++i < n)a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
    return Math.abs(area); // Note: doubled area!
}
function $7168da50ad5421e2$export$2e2bcd8739ae039(topology) {
    return (0, $ac8kL.object)(topology, $7168da50ad5421e2$export$fa52272cf7935962.apply(this, arguments));
}
function $7168da50ad5421e2$export$fa52272cf7935962(topology, objects) {
    var polygonsByArc = {}, polygons = [], groups = [];
    objects.forEach(geometry);
    function geometry(o) {
        switch(o.type){
            case "GeometryCollection":
                o.geometries.forEach(geometry);
                break;
            case "Polygon":
                extract(o.arcs);
                break;
            case "MultiPolygon":
                o.arcs.forEach(extract);
                break;
        }
    }
    function extract(polygon) {
        polygon.forEach(function(ring) {
            ring.forEach(function(arc) {
                (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
            });
        });
        polygons.push(polygon);
    }
    function area(ring) {
        return $7168da50ad5421e2$var$planarRingArea((0, $ac8kL.object)(topology, {
            type: "Polygon",
            arcs: [
                ring
            ]
        }).coordinates[0]);
    }
    polygons.forEach(function(polygon) {
        if (!polygon._) {
            var group = [], neighbors = [
                polygon
            ];
            polygon._ = 1;
            groups.push(group);
            while(polygon = neighbors.pop()){
                group.push(polygon);
                polygon.forEach(function(ring) {
                    ring.forEach(function(arc) {
                        polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
                            if (!polygon._) {
                                polygon._ = 1;
                                neighbors.push(polygon);
                            }
                        });
                    });
                });
            }
        }
    });
    polygons.forEach(function(polygon) {
        delete polygon._;
    });
    return {
        type: "MultiPolygon",
        arcs: groups.map(function(polygons) {
            var arcs = [], n;
            // Extract the exterior (unique) arcs.
            polygons.forEach(function(polygon) {
                polygon.forEach(function(ring) {
                    ring.forEach(function(arc) {
                        if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) arcs.push(arc);
                    });
                });
            });
            // Stitch the arcs into one or more rings.
            arcs = (0, $cvjcL.default)(topology, arcs);
            // If more than one ring is returned,
            // at most one of these rings can be the exterior;
            // choose the one with the greatest absolute area.
            if ((n = arcs.length) > 1) {
                for(var i = 1, k = area(arcs[0]), ki, t; i < n; ++i)if ((ki = area(arcs[i])) > k) t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
            }
            return arcs;
        }).filter(function(arcs) {
            return arcs.length > 0;
        })
    };
}

});

parcelRegister("iRwWn", function(module, exports) {

var $04pjx = parcelRequire("04pjx");
function $dbb6ba8e0b0bdb88$export$2e2bcd8739ae039(objects) {
    var indexesByArc = {}, neighbors = objects.map(function() {
        return [];
    });
    function line(arcs, i) {
        arcs.forEach(function(a) {
            if (a < 0) a = ~a;
            var o = indexesByArc[a];
            if (o) o.push(i);
            else indexesByArc[a] = [
                i
            ];
        });
    }
    function polygon(arcs, i) {
        arcs.forEach(function(arc) {
            line(arc, i);
        });
    }
    function geometry(o, i) {
        if (o.type === "GeometryCollection") o.geometries.forEach(function(o) {
            geometry(o, i);
        });
        else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
    }
    var geometryType = {
        LineString: line,
        MultiLineString: polygon,
        Polygon: polygon,
        MultiPolygon: function(arcs, i) {
            arcs.forEach(function(arc) {
                polygon(arc, i);
            });
        }
    };
    objects.forEach(geometry);
    for(var i in indexesByArc){
        for(var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j)for(var k = j + 1; k < m; ++k){
            var ij = indexes[j], ik = indexes[k], n;
            if ((n = neighbors[ij])[i = (0, $04pjx.default)(n, ik)] !== ik) n.splice(i, 0, ik);
            if ((n = neighbors[ik])[i = (0, $04pjx.default)(n, ij)] !== ij) n.splice(i, 0, ij);
        }
    }
    return neighbors;
}

});
parcelRegister("04pjx", function(module, exports) {

$parcel$export(module.exports, "default", () => $00d402b6bdbb01da$export$2e2bcd8739ae039);
function $00d402b6bdbb01da$export$2e2bcd8739ae039(a, x) {
    var lo = 0, hi = a.length;
    while(lo < hi){
        var mid = lo + hi >>> 1;
        if (a[mid] < x) lo = mid + 1;
        else hi = mid;
    }
    return lo;
}

});


parcelRegister("fPhx7", function(module, exports) {

var $eF19G = parcelRequire("eF19G");

var $hbbUg = parcelRequire("hbbUg");
function $b8593823621cb323$export$2e2bcd8739ae039(topology, transform) {
    if (topology.transform) throw new Error("already quantized");
    if (!transform || !transform.scale) {
        if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be \u22652");
        box = topology.bbox || (0, $eF19G.default)(topology);
        var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;
        transform = {
            scale: [
                x1 - x0 ? (x1 - x0) / (n - 1) : 1,
                y1 - y0 ? (y1 - y0) / (n - 1) : 1
            ],
            translate: [
                x0,
                y0
            ]
        };
    } else box = topology.bbox;
    var t = (0, $hbbUg.default)(transform), box, key, inputs = topology.objects, outputs = {};
    function quantizePoint(point) {
        return t(point);
    }
    function quantizeGeometry(input) {
        var output;
        switch(input.type){
            case "GeometryCollection":
                output = {
                    type: "GeometryCollection",
                    geometries: input.geometries.map(quantizeGeometry)
                };
                break;
            case "Point":
                output = {
                    type: "Point",
                    coordinates: quantizePoint(input.coordinates)
                };
                break;
            case "MultiPoint":
                output = {
                    type: "MultiPoint",
                    coordinates: input.coordinates.map(quantizePoint)
                };
                break;
            default:
                return input;
        }
        if (input.id != null) output.id = input.id;
        if (input.bbox != null) output.bbox = input.bbox;
        if (input.properties != null) output.properties = input.properties;
        return output;
    }
    function quantizeArc(input) {
        var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic
        output[0] = t(input[0], 0);
        while(++i < n)if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points
        if (j === 1) output[j++] = [
            0,
            0
        ]; // an arc must have at least two points
        output.length = j;
        return output;
    }
    for(key in inputs)outputs[key] = quantizeGeometry(inputs[key]);
    return {
        type: "Topology",
        bbox: box,
        transform: transform,
        objects: outputs,
        arcs: topology.arcs.map(quantizeArc)
    };
}

});
parcelRegister("hbbUg", function(module, exports) {

$parcel$export(module.exports, "default", () => $c81cb320c90fef75$export$2e2bcd8739ae039);

var $esxmJ = parcelRequire("esxmJ");
function $c81cb320c90fef75$export$2e2bcd8739ae039(transform) {
    if (transform == null) return 0, $esxmJ.default;
    var x0, y0, kx = transform.scale[0], ky = transform.scale[1], dx = transform.translate[0], dy = transform.translate[1];
    return function(input, i) {
        if (!i) x0 = y0 = 0;
        var j = 2, n = input.length, output = new Array(n), x1 = Math.round((input[0] - dx) / kx), y1 = Math.round((input[1] - dy) / ky);
        output[0] = x1 - x0, x0 = x1;
        output[1] = y1 - y0, y0 = y1;
        while(j < n)output[j] = input[j], ++j;
        return output;
    };
}

});



parcelRegister("dcUFF", function(module, exports) {

$parcel$export(module.exports, "numberFormatDefaultLocale", () => $99d85b1145b86876$export$508b93b51654e419);
$parcel$export(module.exports, "timeFormatDefaultLocale", () => $99d85b1145b86876$export$2afaba13b95950b7);
$parcel$export(module.exports, "locale", () => $99d85b1145b86876$export$162ce11d62a1ca51);
$parcel$export(module.exports, "defaultLocale", () => $99d85b1145b86876$export$d7f512c98c859244);
$parcel$export(module.exports, "resetDefaultLocale", () => $99d85b1145b86876$export$dd6c57399d2ff170);

var $5kZgp = parcelRequire("5kZgp");

var $4Ozsi = parcelRequire("4Ozsi");
var $csdUS = parcelRequire("csdUS");
var $2LshM = parcelRequire("2LshM");
var $f9Zgf = parcelRequire("f9Zgf");
var $6zcjZ = parcelRequire("6zcjZ");
var $cFc6l = parcelRequire("cFc6l");

var $i7MAj = parcelRequire("i7MAj");

var $4SWbq = parcelRequire("4SWbq");

var $eCxzE = parcelRequire("eCxzE");
var $5QKtt = parcelRequire("5QKtt");
function $99d85b1145b86876$var$memoize(method) {
    const cache = {};
    return (spec)=>cache[spec] || (cache[spec] = method(spec));
}
function $99d85b1145b86876$var$trimZeroes(numberFormat, decimalChar) {
    return (x)=>{
        const str = numberFormat(x), dec = str.indexOf(decimalChar);
        if (dec < 0) return str;
        let idx = $99d85b1145b86876$var$rightmostDigit(str, dec);
        const end = idx < str.length ? str.slice(idx) : "";
        while(--idx > dec)if (str[idx] !== "0") {
            ++idx;
            break;
        }
        return str.slice(0, idx) + end;
    };
}
function $99d85b1145b86876$var$rightmostDigit(str, dec) {
    let i = str.lastIndexOf("e"), c;
    if (i > 0) return i;
    for(i = str.length; --i > dec;){
        c = str.charCodeAt(i);
        if (c >= 48 && c <= 57) return i + 1; // is digit
    }
}
function $99d85b1145b86876$var$numberLocale(locale) {
    const format = $99d85b1145b86876$var$memoize(locale.format), formatPrefix = locale.formatPrefix;
    return {
        format: format,
        formatPrefix: formatPrefix,
        formatFloat (spec) {
            const s = (0, $2LshM.default)(spec || ",");
            if (s.precision == null) {
                s.precision = 12;
                switch(s.type){
                    case "%":
                        s.precision -= 2;
                        break;
                    case "e":
                        s.precision -= 1;
                        break;
                }
                return $99d85b1145b86876$var$trimZeroes(format(s), // number format
                format(".1f")(1)[1] // decimal point character
                );
            } else return format(s);
        },
        formatSpan (start, stop, count, specifier) {
            specifier = (0, $2LshM.default)(specifier == null ? ",f" : specifier);
            const step = (0, $5kZgp.tickStep)(start, stop, count), value = Math.max(Math.abs(start), Math.abs(stop));
            let precision;
            if (specifier.precision == null) switch(specifier.type){
                case "s":
                    if (!isNaN(precision = (0, $6zcjZ.default)(step, value))) specifier.precision = precision;
                    return formatPrefix(specifier, value);
                case "":
                case "e":
                case "g":
                case "p":
                case "r":
                    if (!isNaN(precision = (0, $cFc6l.default)(step, value))) specifier.precision = precision - (specifier.type === "e");
                    break;
                case "f":
                case "%":
                    if (!isNaN(precision = (0, $f9Zgf.default)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
                    break;
            }
            return format(specifier);
        }
    };
}
let $99d85b1145b86876$var$defaultNumberLocale;
$99d85b1145b86876$export$e239bb0c0a12dc9b();
function $99d85b1145b86876$export$e239bb0c0a12dc9b() {
    return $99d85b1145b86876$var$defaultNumberLocale = $99d85b1145b86876$var$numberLocale({
        format: (0, $4Ozsi.format),
        formatPrefix: (0, $4Ozsi.formatPrefix)
    });
}
function $99d85b1145b86876$export$c8181446945c05d9(definition) {
    return $99d85b1145b86876$var$numberLocale((0, $csdUS.default)(definition));
}
function $99d85b1145b86876$export$508b93b51654e419(definition) {
    return arguments.length ? $99d85b1145b86876$var$defaultNumberLocale = $99d85b1145b86876$export$c8181446945c05d9(definition) : $99d85b1145b86876$var$defaultNumberLocale;
}
function $99d85b1145b86876$var$timeMultiFormat(format, interval, spec) {
    spec = spec || {};
    if (!(0, $4SWbq.isObject)(spec)) (0, $4SWbq.error)(`Invalid time multi-format specifier: ${spec}`);
    const second = interval((0, $i7MAj.SECONDS)), minute = interval((0, $i7MAj.MINUTES)), hour = interval((0, $i7MAj.HOURS)), day = interval((0, $i7MAj.DATE)), week = interval((0, $i7MAj.WEEK)), month = interval((0, $i7MAj.MONTH)), quarter = interval((0, $i7MAj.QUARTER)), year = interval((0, $i7MAj.YEAR)), L = format(spec[0, $i7MAj.MILLISECONDS] || ".%L"), S = format(spec[0, $i7MAj.SECONDS] || ":%S"), M = format(spec[0, $i7MAj.MINUTES] || "%I:%M"), H = format(spec[0, $i7MAj.HOURS] || "%I %p"), d = format(spec[0, $i7MAj.DATE] || spec[0, $i7MAj.DAY] || "%a %d"), w = format(spec[0, $i7MAj.WEEK] || "%b %d"), m = format(spec[0, $i7MAj.MONTH] || "%B"), q = format(spec[0, $i7MAj.QUARTER] || "%B"), y = format(spec[0, $i7MAj.YEAR] || "%Y");
    return (date)=>(second(date) < date ? L : minute(date) < date ? S : hour(date) < date ? M : day(date) < date ? H : month(date) < date ? week(date) < date ? d : w : year(date) < date ? quarter(date) < date ? m : q : y)(date);
}
function $99d85b1145b86876$var$timeLocale(locale) {
    const timeFormat = $99d85b1145b86876$var$memoize(locale.format), utcFormat = $99d85b1145b86876$var$memoize(locale.utcFormat);
    return {
        timeFormat: (spec)=>(0, $4SWbq.isString)(spec) ? timeFormat(spec) : $99d85b1145b86876$var$timeMultiFormat(timeFormat, (0, $i7MAj.timeInterval), spec),
        utcFormat: (spec)=>(0, $4SWbq.isString)(spec) ? utcFormat(spec) : $99d85b1145b86876$var$timeMultiFormat(utcFormat, (0, $i7MAj.utcInterval), spec),
        timeParse: $99d85b1145b86876$var$memoize(locale.parse),
        utcParse: $99d85b1145b86876$var$memoize(locale.utcParse)
    };
}
let $99d85b1145b86876$var$defaultTimeLocale;
$99d85b1145b86876$export$e70f9e2ac7d5ef01();
function $99d85b1145b86876$export$e70f9e2ac7d5ef01() {
    return $99d85b1145b86876$var$defaultTimeLocale = $99d85b1145b86876$var$timeLocale({
        format: (0, $eCxzE.timeFormat),
        parse: (0, $eCxzE.timeParse),
        utcFormat: (0, $eCxzE.utcFormat),
        utcParse: (0, $eCxzE.utcParse)
    });
}
function $99d85b1145b86876$export$4de28bfaab4eb734(definition) {
    return $99d85b1145b86876$var$timeLocale((0, $5QKtt.default)(definition));
}
function $99d85b1145b86876$export$2afaba13b95950b7(definition) {
    return arguments.length ? $99d85b1145b86876$var$defaultTimeLocale = $99d85b1145b86876$export$4de28bfaab4eb734(definition) : $99d85b1145b86876$var$defaultTimeLocale;
}
const $99d85b1145b86876$var$createLocale = (number, time)=>(0, $4SWbq.extend)({}, number, time);
function $99d85b1145b86876$export$162ce11d62a1ca51(numberSpec, timeSpec) {
    const number = numberSpec ? $99d85b1145b86876$export$c8181446945c05d9(numberSpec) : $99d85b1145b86876$export$508b93b51654e419();
    const time = timeSpec ? $99d85b1145b86876$export$4de28bfaab4eb734(timeSpec) : $99d85b1145b86876$export$2afaba13b95950b7();
    return $99d85b1145b86876$var$createLocale(number, time);
}
function $99d85b1145b86876$export$d7f512c98c859244(numberSpec, timeSpec) {
    const args = arguments.length;
    if (args && args !== 2) (0, $4SWbq.error)("defaultLocale expects either zero or two arguments.");
    return args ? $99d85b1145b86876$var$createLocale($99d85b1145b86876$export$508b93b51654e419(numberSpec), $99d85b1145b86876$export$2afaba13b95950b7(timeSpec)) : $99d85b1145b86876$var$createLocale($99d85b1145b86876$export$508b93b51654e419(), $99d85b1145b86876$export$2afaba13b95950b7());
}
function $99d85b1145b86876$export$dd6c57399d2ff170() {
    $99d85b1145b86876$export$e239bb0c0a12dc9b();
    $99d85b1145b86876$export$e70f9e2ac7d5ef01();
    return $99d85b1145b86876$export$d7f512c98c859244();
}

});
parcelRegister("5kZgp", function(module, exports) {

$parcel$export(module.exports, "default", () => $3e2e57b2fc00f6e9$export$2e2bcd8739ae039);
$parcel$export(module.exports, "tickIncrement", () => $3e2e57b2fc00f6e9$export$bc64d00cc98e7e95);
$parcel$export(module.exports, "tickStep", () => $3e2e57b2fc00f6e9$export$81087d9b915d4ede);
const $3e2e57b2fc00f6e9$var$e10 = Math.sqrt(50), $3e2e57b2fc00f6e9$var$e5 = Math.sqrt(10), $3e2e57b2fc00f6e9$var$e2 = Math.sqrt(2);
function $3e2e57b2fc00f6e9$var$tickSpec(start, stop, count) {
    const step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= $3e2e57b2fc00f6e9$var$e10 ? 10 : error >= $3e2e57b2fc00f6e9$var$e5 ? 5 : error >= $3e2e57b2fc00f6e9$var$e2 ? 2 : 1;
    let i1, i2, inc;
    if (power < 0) {
        inc = Math.pow(10, -power) / factor;
        i1 = Math.round(start * inc);
        i2 = Math.round(stop * inc);
        if (i1 / inc < start) ++i1;
        if (i2 / inc > stop) --i2;
        inc = -inc;
    } else {
        inc = Math.pow(10, power) * factor;
        i1 = Math.round(start / inc);
        i2 = Math.round(stop / inc);
        if (i1 * inc < start) ++i1;
        if (i2 * inc > stop) --i2;
    }
    if (i2 < i1 && 0.5 <= count && count < 2) return $3e2e57b2fc00f6e9$var$tickSpec(start, stop, count * 2);
    return [
        i1,
        i2,
        inc
    ];
}
function $3e2e57b2fc00f6e9$export$2e2bcd8739ae039(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    if (!(count > 0)) return [];
    if (start === stop) return [
        start
    ];
    const reverse = stop < start, [i1, i2, inc] = reverse ? $3e2e57b2fc00f6e9$var$tickSpec(stop, start, count) : $3e2e57b2fc00f6e9$var$tickSpec(start, stop, count);
    if (!(i2 >= i1)) return [];
    const n = i2 - i1 + 1, ticks = new Array(n);
    if (reverse) {
        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) / -inc;
        else for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) * inc;
    } else {
        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) / -inc;
        else for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) * inc;
    }
    return ticks;
}
function $3e2e57b2fc00f6e9$export$bc64d00cc98e7e95(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    return $3e2e57b2fc00f6e9$var$tickSpec(start, stop, count)[2];
}
function $3e2e57b2fc00f6e9$export$81087d9b915d4ede(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    const reverse = stop < start, inc = reverse ? $3e2e57b2fc00f6e9$export$bc64d00cc98e7e95(stop, start, count) : $3e2e57b2fc00f6e9$export$bc64d00cc98e7e95(start, stop, count);
    return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

});

parcelRegister("4Ozsi", function(module, exports) {

$parcel$export(module.exports, "format", () => $381755a80c5e2f93$export$d9468344d3651243);
$parcel$export(module.exports, "formatPrefix", () => $381755a80c5e2f93$export$8d85692a469dde6f);

var $csdUS = parcelRequire("csdUS");
var $381755a80c5e2f93$var$locale;
var $381755a80c5e2f93$export$d9468344d3651243;
var $381755a80c5e2f93$export$8d85692a469dde6f;
$381755a80c5e2f93$export$2e2bcd8739ae039({
    thousands: ",",
    grouping: [
        3
    ],
    currency: [
        "$",
        ""
    ]
});
function $381755a80c5e2f93$export$2e2bcd8739ae039(definition) {
    $381755a80c5e2f93$var$locale = (0, $csdUS.default)(definition);
    $381755a80c5e2f93$export$d9468344d3651243 = $381755a80c5e2f93$var$locale.format;
    $381755a80c5e2f93$export$8d85692a469dde6f = $381755a80c5e2f93$var$locale.formatPrefix;
    return $381755a80c5e2f93$var$locale;
}

});
parcelRegister("csdUS", function(module, exports) {

$parcel$export(module.exports, "default", () => $9112e511ab767458$export$2e2bcd8739ae039);

var $2BoBQ = parcelRequire("2BoBQ");

var $9cuKj = parcelRequire("9cuKj");

var $8cr7G = parcelRequire("8cr7G");

var $2LshM = parcelRequire("2LshM");

var $gbJS5 = parcelRequire("gbJS5");

var $h6Y0w = parcelRequire("h6Y0w");

var $4huZd = parcelRequire("4huZd");

var $2G0YB = parcelRequire("2G0YB");
var $9112e511ab767458$var$map = Array.prototype.map, $9112e511ab767458$var$prefixes = [
    "y",
    "z",
    "a",
    "f",
    "p",
    "n",
    "\xb5",
    "m",
    "",
    "k",
    "M",
    "G",
    "T",
    "P",
    "E",
    "Z",
    "Y"
];
function $9112e511ab767458$export$2e2bcd8739ae039(locale) {
    var group = locale.grouping === undefined || locale.thousands === undefined ? (0, $2G0YB.default) : (0, $9cuKj.default)($9112e511ab767458$var$map.call(locale.grouping, Number), locale.thousands + ""), currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "", currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "", decimal = locale.decimal === undefined ? "." : locale.decimal + "", numerals = locale.numerals === undefined ? (0, $2G0YB.default) : (0, $8cr7G.default)($9112e511ab767458$var$map.call(locale.numerals, String)), percent = locale.percent === undefined ? "%" : locale.percent + "", minus = locale.minus === undefined ? "\u2212" : locale.minus + "", nan = locale.nan === undefined ? "NaN" : locale.nan + "";
    function newFormat(specifier) {
        specifier = (0, $2LshM.default)(specifier);
        var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";
        else if (!(0, $h6Y0w.default)[type]) precision === undefined && (precision = 12), trim = true, type = "g";
        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = (0, $h6Y0w.default)[type], maybeSuffix = /[defgprs%]/.test(type);
        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format(value) {
            var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
            if (type === "c") {
                valueSuffix = formatType(value) + valueSuffix;
                value = "";
            } else {
                value = +value;
                // Determine the sign. -0 is not less than 0, but 1 / -0 is!
                var valueNegative = value < 0 || 1 / value < 0;
                // Perform the initial formatting.
                value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
                // Trim insignificant zeros.
                if (trim) value = (0, $gbJS5.default)(value);
                // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
                if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;
                // Compute the prefix and suffix.
                valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                valueSuffix = (type === "s" ? $9112e511ab767458$var$prefixes[8 + (0, $4huZd.prefixExponent) / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
                // Break the formatted value into the integer “value” part that can be
                // grouped, and fractional or exponential “suffix” part that is not.
                if (maybeSuffix) {
                    i = -1, n = value.length;
                    while(++i < n)if (c = value.charCodeAt(i), 48 > c || c > 57) {
                        valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                        value = value.slice(0, i);
                        break;
                    }
                }
            }
            // If the fill character is not "0", grouping is applied before padding.
            if (comma && !zero) value = group(value, Infinity);
            // Compute the padding.
            var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
            // If the fill character is "0", grouping is applied after padding.
            if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
            // Reconstruct the final output based on the desired alignment.
            switch(align){
                case "<":
                    value = valuePrefix + value + valueSuffix + padding;
                    break;
                case "=":
                    value = valuePrefix + padding + value + valueSuffix;
                    break;
                case "^":
                    value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                    break;
                default:
                    value = padding + valuePrefix + value + valueSuffix;
                    break;
            }
            return numerals(value);
        }
        format.toString = function() {
            return specifier + "";
        };
        return format;
    }
    function formatPrefix(specifier, value) {
        var f = newFormat((specifier = (0, $2LshM.default)(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor((0, $2BoBQ.default)(value) / 3))) * 3, k = Math.pow(10, -e), prefix = $9112e511ab767458$var$prefixes[8 + e / 3];
        return function(value) {
            return f(k * value) + prefix;
        };
    }
    return {
        format: newFormat,
        formatPrefix: formatPrefix
    };
}

});
parcelRegister("2BoBQ", function(module, exports) {

$parcel$export(module.exports, "default", () => $1e52205d66a6fae7$export$2e2bcd8739ae039);

var $9vLXN = parcelRequire("9vLXN");
function $1e52205d66a6fae7$export$2e2bcd8739ae039(x) {
    return x = (0, $9vLXN.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
}

});
parcelRegister("9vLXN", function(module, exports) {

$parcel$export(module.exports, "default", () => $6ecc36d6335fb1e3$export$2e2bcd8739ae039);
$parcel$export(module.exports, "formatDecimalParts", () => $6ecc36d6335fb1e3$export$8f8e23dd27dc19f5);
function $6ecc36d6335fb1e3$export$2e2bcd8739ae039(x) {
    return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function $6ecc36d6335fb1e3$export$8f8e23dd27dc19f5(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);
    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
    ];
}

});


parcelRegister("9cuKj", function(module, exports) {

$parcel$export(module.exports, "default", () => $6b2d15894f5a780d$export$2e2bcd8739ae039);
function $6b2d15894f5a780d$export$2e2bcd8739ae039(grouping, thousands) {
    return function(value, width) {
        var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
        while(i > 0 && g > 0){
            if (length + g + 1 > width) g = Math.max(1, width - length);
            t.push(value.substring(i -= g, i + g));
            if ((length += g + 1) > width) break;
            g = grouping[j = (j + 1) % grouping.length];
        }
        return t.reverse().join(thousands);
    };
}

});

parcelRegister("8cr7G", function(module, exports) {

$parcel$export(module.exports, "default", () => $5f847bca24ea1e9c$export$2e2bcd8739ae039);
function $5f847bca24ea1e9c$export$2e2bcd8739ae039(numerals) {
    return function(value) {
        return value.replace(/[0-9]/g, function(i) {
            return numerals[+i];
        });
    };
}

});

parcelRegister("2LshM", function(module, exports) {

$parcel$export(module.exports, "default", () => $2035e9828e95903d$export$2e2bcd8739ae039);
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var $2035e9828e95903d$var$re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function $2035e9828e95903d$export$2e2bcd8739ae039(specifier) {
    if (!(match = $2035e9828e95903d$var$re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new $2035e9828e95903d$export$963aac351db36ed4({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
    });
}
$2035e9828e95903d$export$2e2bcd8739ae039.prototype = $2035e9828e95903d$export$963aac351db36ed4.prototype; // instanceof
function $2035e9828e95903d$export$963aac351db36ed4(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
}
$2035e9828e95903d$export$963aac351db36ed4.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

});

parcelRegister("gbJS5", function(module, exports) {

$parcel$export(module.exports, "default", () => $bc91418b2f2ddf92$export$2e2bcd8739ae039);
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function $bc91418b2f2ddf92$export$2e2bcd8739ae039(s) {
    out: for(var n = s.length, i = 1, i0 = -1, i1; i < n; ++i)switch(s[i]){
        case ".":
            i0 = i1 = i;
            break;
        case "0":
            if (i0 === 0) i0 = i;
            i1 = i;
            break;
        default:
            if (!+s[i]) break out;
            if (i0 > 0) i0 = 0;
            break;
    }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

});

parcelRegister("h6Y0w", function(module, exports) {

$parcel$export(module.exports, "default", () => $c7518b6993e0760b$export$2e2bcd8739ae039);

var $9vLXN = parcelRequire("9vLXN");

var $4huZd = parcelRequire("4huZd");

var $1rDFY = parcelRequire("1rDFY");
var $c7518b6993e0760b$export$2e2bcd8739ae039 = {
    "%": (x, p)=>(x * 100).toFixed(p),
    "b": (x)=>Math.round(x).toString(2),
    "c": (x)=>x + "",
    "d": (0, $9vLXN.default),
    "e": (x, p)=>x.toExponential(p),
    "f": (x, p)=>x.toFixed(p),
    "g": (x, p)=>x.toPrecision(p),
    "o": (x)=>Math.round(x).toString(8),
    "p": (x, p)=>(0, $1rDFY.default)(x * 100, p),
    "r": (0, $1rDFY.default),
    "s": (0, $4huZd.default),
    "X": (x)=>Math.round(x).toString(16).toUpperCase(),
    "x": (x)=>Math.round(x).toString(16)
};

});
parcelRegister("4huZd", function(module, exports) {

$parcel$export(module.exports, "prefixExponent", () => $31e0c92efeb9ee36$export$6863724d9a42263);
$parcel$export(module.exports, "default", () => $31e0c92efeb9ee36$export$2e2bcd8739ae039);

var $9vLXN = parcelRequire("9vLXN");
var $31e0c92efeb9ee36$export$6863724d9a42263;
function $31e0c92efeb9ee36$export$2e2bcd8739ae039(x, p) {
    var d = (0, $9vLXN.formatDecimalParts)(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1], i = exponent - ($31e0c92efeb9ee36$export$6863724d9a42263 = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, $9vLXN.formatDecimalParts)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

});

parcelRegister("1rDFY", function(module, exports) {

$parcel$export(module.exports, "default", () => $10d716e20685b095$export$2e2bcd8739ae039);

var $9vLXN = parcelRequire("9vLXN");
function $10d716e20685b095$export$2e2bcd8739ae039(x, p) {
    var d = (0, $9vLXN.formatDecimalParts)(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

});


parcelRegister("2G0YB", function(module, exports) {

$parcel$export(module.exports, "default", () => $1f3042ecc46f1557$export$2e2bcd8739ae039);
function $1f3042ecc46f1557$export$2e2bcd8739ae039(x) {
    return x;
}

});



parcelRegister("f9Zgf", function(module, exports) {

$parcel$export(module.exports, "default", () => $b097376cf7de10ef$export$2e2bcd8739ae039);

var $2BoBQ = parcelRequire("2BoBQ");
function $b097376cf7de10ef$export$2e2bcd8739ae039(step) {
    return Math.max(0, -(0, $2BoBQ.default)(Math.abs(step)));
}

});

parcelRegister("6zcjZ", function(module, exports) {

$parcel$export(module.exports, "default", () => $4c7f91c149a4617e$export$2e2bcd8739ae039);

var $2BoBQ = parcelRequire("2BoBQ");
function $4c7f91c149a4617e$export$2e2bcd8739ae039(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, $2BoBQ.default)(value) / 3))) * 3 - (0, $2BoBQ.default)(Math.abs(step)));
}

});

parcelRegister("cFc6l", function(module, exports) {

$parcel$export(module.exports, "default", () => $9382b372d4fa2eb9$export$2e2bcd8739ae039);

var $2BoBQ = parcelRequire("2BoBQ");
function $9382b372d4fa2eb9$export$2e2bcd8739ae039(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, (0, $2BoBQ.default)(max) - (0, $2BoBQ.default)(step)) + 1;
}

});

parcelRegister("i7MAj", function(module, exports) {

$parcel$export(module.exports, "YEAR", () => $d31e9154f3f2cac2$export$90b88dc425a06a95);
$parcel$export(module.exports, "QUARTER", () => $d31e9154f3f2cac2$export$b470e30983f4a62f);
$parcel$export(module.exports, "MONTH", () => $d31e9154f3f2cac2$export$fa5253a4540f3e3a);
$parcel$export(module.exports, "WEEK", () => $d31e9154f3f2cac2$export$3241045aa1844a20);
$parcel$export(module.exports, "DATE", () => $d31e9154f3f2cac2$export$501a7fac1df67a49);
$parcel$export(module.exports, "DAY", () => $d31e9154f3f2cac2$export$1a58b8d7f494dd72);
$parcel$export(module.exports, "DAYOFYEAR", () => $d31e9154f3f2cac2$export$c6000b488d671fd3);
$parcel$export(module.exports, "HOURS", () => $d31e9154f3f2cac2$export$f25ebc73c10ad2c);
$parcel$export(module.exports, "MINUTES", () => $d31e9154f3f2cac2$export$4e1246fc5e978af9);
$parcel$export(module.exports, "SECONDS", () => $d31e9154f3f2cac2$export$8fa5d88ee8e453e2);
$parcel$export(module.exports, "MILLISECONDS", () => $d31e9154f3f2cac2$export$137e956cd70314cf);
$parcel$export(module.exports, "TIME_UNITS", () => $d31e9154f3f2cac2$export$1b482a152398bafa);
$parcel$export(module.exports, "timeUnits", () => $d31e9154f3f2cac2$export$833c398a55654bb7);
$parcel$export(module.exports, "timeUnitSpecifier", () => $d31e9154f3f2cac2$export$5dffe16f9290bdf);
$parcel$export(module.exports, "dayofyear", () => $d31e9154f3f2cac2$export$8519dd5db6651f36);
$parcel$export(module.exports, "week", () => $d31e9154f3f2cac2$export$36cb58223e61606e);
$parcel$export(module.exports, "utcdayofyear", () => $d31e9154f3f2cac2$export$7a13dbdf10ea1c5c);
$parcel$export(module.exports, "utcweek", () => $d31e9154f3f2cac2$export$fd9682e28a60cc56);
$parcel$export(module.exports, "timeFloor", () => $d31e9154f3f2cac2$export$775ee1dc2c26551e);
$parcel$export(module.exports, "utcFloor", () => $d31e9154f3f2cac2$export$557b60a0700d7d85);
$parcel$export(module.exports, "timeInterval", () => $d31e9154f3f2cac2$export$1a539c8b2950ab40);
$parcel$export(module.exports, "utcInterval", () => $d31e9154f3f2cac2$export$e1d09836890453eb);
$parcel$export(module.exports, "timeOffset", () => $d31e9154f3f2cac2$export$6fe62eff68e2871d);
$parcel$export(module.exports, "utcOffset", () => $d31e9154f3f2cac2$export$c6b13dc6551dbb4);
$parcel$export(module.exports, "timeSequence", () => $d31e9154f3f2cac2$export$f64ca6c70315e3b3);
$parcel$export(module.exports, "utcSequence", () => $d31e9154f3f2cac2$export$f6e075a62ef0f434);
$parcel$export(module.exports, "timeBin", () => $d31e9154f3f2cac2$export$367a1854e359b6b2);

var $4SWbq = parcelRequire("4SWbq");

var $fFQQk = parcelRequire("fFQQk");
var $deUco = parcelRequire("deUco");
var $4gydF = parcelRequire("4gydF");
var $egcOq = parcelRequire("egcOq");
var $9CdPb = parcelRequire("9CdPb");
var $4uq9w = parcelRequire("4uq9w");
var $8BRD5 = parcelRequire("8BRD5");
var $lnDWe = parcelRequire("lnDWe");

var $bytjh = parcelRequire("bytjh");
var $5kZgp = parcelRequire("5kZgp");
const $d31e9154f3f2cac2$export$90b88dc425a06a95 = "year";
const $d31e9154f3f2cac2$export$b470e30983f4a62f = "quarter";
const $d31e9154f3f2cac2$export$fa5253a4540f3e3a = "month";
const $d31e9154f3f2cac2$export$3241045aa1844a20 = "week";
const $d31e9154f3f2cac2$export$501a7fac1df67a49 = "date";
const $d31e9154f3f2cac2$export$1a58b8d7f494dd72 = "day";
const $d31e9154f3f2cac2$export$c6000b488d671fd3 = "dayofyear";
const $d31e9154f3f2cac2$export$f25ebc73c10ad2c = "hours";
const $d31e9154f3f2cac2$export$4e1246fc5e978af9 = "minutes";
const $d31e9154f3f2cac2$export$8fa5d88ee8e453e2 = "seconds";
const $d31e9154f3f2cac2$export$137e956cd70314cf = "milliseconds";
const $d31e9154f3f2cac2$export$1b482a152398bafa = [
    $d31e9154f3f2cac2$export$90b88dc425a06a95,
    $d31e9154f3f2cac2$export$b470e30983f4a62f,
    $d31e9154f3f2cac2$export$fa5253a4540f3e3a,
    $d31e9154f3f2cac2$export$3241045aa1844a20,
    $d31e9154f3f2cac2$export$501a7fac1df67a49,
    $d31e9154f3f2cac2$export$1a58b8d7f494dd72,
    $d31e9154f3f2cac2$export$c6000b488d671fd3,
    $d31e9154f3f2cac2$export$f25ebc73c10ad2c,
    $d31e9154f3f2cac2$export$4e1246fc5e978af9,
    $d31e9154f3f2cac2$export$8fa5d88ee8e453e2,
    $d31e9154f3f2cac2$export$137e956cd70314cf
];
const $d31e9154f3f2cac2$var$UNITS = $d31e9154f3f2cac2$export$1b482a152398bafa.reduce((o, u, i)=>(o[u] = 1 + i, o), {});
function $d31e9154f3f2cac2$export$833c398a55654bb7(units) {
    const u = (0, $4SWbq.array)(units).slice(), m = {};
    // check validity
    if (!u.length) (0, $4SWbq.error)("Missing time unit.");
    u.forEach((unit)=>{
        if ((0, $4SWbq.hasOwnProperty)($d31e9154f3f2cac2$var$UNITS, unit)) m[unit] = 1;
        else (0, $4SWbq.error)(`Invalid time unit: ${unit}.`);
    });
    const numTypes = (m[$d31e9154f3f2cac2$export$3241045aa1844a20] || m[$d31e9154f3f2cac2$export$1a58b8d7f494dd72] ? 1 : 0) + (m[$d31e9154f3f2cac2$export$b470e30983f4a62f] || m[$d31e9154f3f2cac2$export$fa5253a4540f3e3a] || m[$d31e9154f3f2cac2$export$501a7fac1df67a49] ? 1 : 0) + (m[$d31e9154f3f2cac2$export$c6000b488d671fd3] ? 1 : 0);
    if (numTypes > 1) (0, $4SWbq.error)(`Incompatible time units: ${units}`);
    // ensure proper sort order
    u.sort((a, b)=>$d31e9154f3f2cac2$var$UNITS[a] - $d31e9154f3f2cac2$var$UNITS[b]);
    return u;
}
const $d31e9154f3f2cac2$var$defaultSpecifiers = {
    [$d31e9154f3f2cac2$export$90b88dc425a06a95]: "%Y ",
    [$d31e9154f3f2cac2$export$b470e30983f4a62f]: "Q%q ",
    [$d31e9154f3f2cac2$export$fa5253a4540f3e3a]: "%b ",
    [$d31e9154f3f2cac2$export$501a7fac1df67a49]: "%d ",
    [$d31e9154f3f2cac2$export$3241045aa1844a20]: "W%U ",
    [$d31e9154f3f2cac2$export$1a58b8d7f494dd72]: "%a ",
    [$d31e9154f3f2cac2$export$c6000b488d671fd3]: "%j ",
    [$d31e9154f3f2cac2$export$f25ebc73c10ad2c]: "%H:00",
    [$d31e9154f3f2cac2$export$4e1246fc5e978af9]: "00:%M",
    [$d31e9154f3f2cac2$export$8fa5d88ee8e453e2]: ":%S",
    [$d31e9154f3f2cac2$export$137e956cd70314cf]: ".%L",
    [`${$d31e9154f3f2cac2$export$90b88dc425a06a95}-${$d31e9154f3f2cac2$export$fa5253a4540f3e3a}`]: "%Y-%m ",
    [`${$d31e9154f3f2cac2$export$90b88dc425a06a95}-${$d31e9154f3f2cac2$export$fa5253a4540f3e3a}-${$d31e9154f3f2cac2$export$501a7fac1df67a49}`]: "%Y-%m-%d ",
    [`${$d31e9154f3f2cac2$export$f25ebc73c10ad2c}-${$d31e9154f3f2cac2$export$4e1246fc5e978af9}`]: "%H:%M"
};
function $d31e9154f3f2cac2$export$5dffe16f9290bdf(units, specifiers) {
    const s = (0, $4SWbq.extend)({}, $d31e9154f3f2cac2$var$defaultSpecifiers, specifiers), u = $d31e9154f3f2cac2$export$833c398a55654bb7(units), n = u.length;
    let fmt = "", start = 0, end, key;
    for(start = 0; start < n;)for(end = u.length; end > start; --end){
        key = u.slice(start, end).join("-");
        if (s[key] != null) {
            fmt += s[key];
            start = end;
            break;
        }
    }
    return fmt.trim();
}
const $d31e9154f3f2cac2$var$t0 = new Date();
function $d31e9154f3f2cac2$var$localYear(y) {
    $d31e9154f3f2cac2$var$t0.setFullYear(y);
    $d31e9154f3f2cac2$var$t0.setMonth(0);
    $d31e9154f3f2cac2$var$t0.setDate(1);
    $d31e9154f3f2cac2$var$t0.setHours(0, 0, 0, 0);
    return $d31e9154f3f2cac2$var$t0;
}
function $d31e9154f3f2cac2$export$8519dd5db6651f36(d) {
    return $d31e9154f3f2cac2$var$localDayOfYear(new Date(d));
}
function $d31e9154f3f2cac2$export$36cb58223e61606e(d) {
    return $d31e9154f3f2cac2$var$localWeekNum(new Date(d));
}
function $d31e9154f3f2cac2$var$localDayOfYear(d) {
    return (0, $fFQQk.timeDay).count($d31e9154f3f2cac2$var$localYear(d.getFullYear()) - 1, d);
}
function $d31e9154f3f2cac2$var$localWeekNum(d) {
    return (0, $deUco.timeSunday).count($d31e9154f3f2cac2$var$localYear(d.getFullYear()) - 1, d);
}
function $d31e9154f3f2cac2$var$localFirst(y) {
    return $d31e9154f3f2cac2$var$localYear(y).getDay();
}
function $d31e9154f3f2cac2$var$localDate(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
        const date = new Date(-1, m, d, H, M, S, L);
        date.setFullYear(y);
        return date;
    }
    return new Date(y, m, d, H, M, S, L);
}
function $d31e9154f3f2cac2$export$7a13dbdf10ea1c5c(d) {
    return $d31e9154f3f2cac2$var$utcDayOfYear(new Date(d));
}
function $d31e9154f3f2cac2$export$fd9682e28a60cc56(d) {
    return $d31e9154f3f2cac2$var$utcWeekNum(new Date(d));
}
function $d31e9154f3f2cac2$var$utcDayOfYear(d) {
    const y = Date.UTC(d.getUTCFullYear(), 0, 1);
    return (0, $fFQQk.utcDay).count(y - 1, d);
}
function $d31e9154f3f2cac2$var$utcWeekNum(d) {
    const y = Date.UTC(d.getUTCFullYear(), 0, 1);
    return (0, $deUco.utcSunday).count(y - 1, d);
}
function $d31e9154f3f2cac2$var$utcFirst(y) {
    $d31e9154f3f2cac2$var$t0.setTime(Date.UTC(y, 0, 1));
    return $d31e9154f3f2cac2$var$t0.getUTCDay();
}
function $d31e9154f3f2cac2$var$utcDate(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
        const date = new Date(Date.UTC(-1, m, d, H, M, S, L));
        date.setUTCFullYear(d.y);
        return date;
    }
    return new Date(Date.UTC(y, m, d, H, M, S, L));
}
function $d31e9154f3f2cac2$var$floor(units, step, get, inv, newDate) {
    const s = step || 1, b = (0, $4SWbq.peek)(units), _ = (unit, p, key)=>{
        key = key || unit;
        return $d31e9154f3f2cac2$var$getUnit(get[key], inv[key], unit === b && s, p);
    };
    const t = new Date(), u = (0, $4SWbq.toSet)(units), y = u[$d31e9154f3f2cac2$export$90b88dc425a06a95] ? _($d31e9154f3f2cac2$export$90b88dc425a06a95) : (0, $4SWbq.constant)(2012), m = u[$d31e9154f3f2cac2$export$fa5253a4540f3e3a] ? _($d31e9154f3f2cac2$export$fa5253a4540f3e3a) : u[$d31e9154f3f2cac2$export$b470e30983f4a62f] ? _($d31e9154f3f2cac2$export$b470e30983f4a62f) : (0, $4SWbq.zero), d = u[$d31e9154f3f2cac2$export$3241045aa1844a20] && u[$d31e9154f3f2cac2$export$1a58b8d7f494dd72] ? _($d31e9154f3f2cac2$export$1a58b8d7f494dd72, 1, $d31e9154f3f2cac2$export$3241045aa1844a20 + $d31e9154f3f2cac2$export$1a58b8d7f494dd72) : u[$d31e9154f3f2cac2$export$3241045aa1844a20] ? _($d31e9154f3f2cac2$export$3241045aa1844a20, 1) : u[$d31e9154f3f2cac2$export$1a58b8d7f494dd72] ? _($d31e9154f3f2cac2$export$1a58b8d7f494dd72, 1) : u[$d31e9154f3f2cac2$export$501a7fac1df67a49] ? _($d31e9154f3f2cac2$export$501a7fac1df67a49, 1) : u[$d31e9154f3f2cac2$export$c6000b488d671fd3] ? _($d31e9154f3f2cac2$export$c6000b488d671fd3, 1) : (0, $4SWbq.one), H = u[$d31e9154f3f2cac2$export$f25ebc73c10ad2c] ? _($d31e9154f3f2cac2$export$f25ebc73c10ad2c) : (0, $4SWbq.zero), M = u[$d31e9154f3f2cac2$export$4e1246fc5e978af9] ? _($d31e9154f3f2cac2$export$4e1246fc5e978af9) : (0, $4SWbq.zero), S = u[$d31e9154f3f2cac2$export$8fa5d88ee8e453e2] ? _($d31e9154f3f2cac2$export$8fa5d88ee8e453e2) : (0, $4SWbq.zero), L = u[$d31e9154f3f2cac2$export$137e956cd70314cf] ? _($d31e9154f3f2cac2$export$137e956cd70314cf) : (0, $4SWbq.zero);
    return function(v) {
        t.setTime(+v);
        const year = y(t);
        return newDate(year, m(t), d(t, year), H(t), M(t), S(t), L(t));
    };
}
function $d31e9154f3f2cac2$var$getUnit(f, inv, step, phase) {
    const u = step <= 1 ? f : phase ? (d, y)=>phase + step * Math.floor((f(d, y) - phase) / step) : (d, y)=>step * Math.floor(f(d, y) / step);
    return inv ? (d, y)=>inv(u(d, y), y) : u;
}
// returns the day of the year based on week number, day of week,
// and the day of the week for the first day of the year
function $d31e9154f3f2cac2$var$weekday(week, day, firstDay) {
    return day + week * 7 - (firstDay + 6) % 7;
}
// -- LOCAL TIME --
const $d31e9154f3f2cac2$var$localGet = {
    [$d31e9154f3f2cac2$export$90b88dc425a06a95]: (d)=>d.getFullYear(),
    [$d31e9154f3f2cac2$export$b470e30983f4a62f]: (d)=>Math.floor(d.getMonth() / 3),
    [$d31e9154f3f2cac2$export$fa5253a4540f3e3a]: (d)=>d.getMonth(),
    [$d31e9154f3f2cac2$export$501a7fac1df67a49]: (d)=>d.getDate(),
    [$d31e9154f3f2cac2$export$f25ebc73c10ad2c]: (d)=>d.getHours(),
    [$d31e9154f3f2cac2$export$4e1246fc5e978af9]: (d)=>d.getMinutes(),
    [$d31e9154f3f2cac2$export$8fa5d88ee8e453e2]: (d)=>d.getSeconds(),
    [$d31e9154f3f2cac2$export$137e956cd70314cf]: (d)=>d.getMilliseconds(),
    [$d31e9154f3f2cac2$export$c6000b488d671fd3]: (d)=>$d31e9154f3f2cac2$var$localDayOfYear(d),
    [$d31e9154f3f2cac2$export$3241045aa1844a20]: (d)=>$d31e9154f3f2cac2$var$localWeekNum(d),
    [$d31e9154f3f2cac2$export$3241045aa1844a20 + $d31e9154f3f2cac2$export$1a58b8d7f494dd72]: (d, y)=>$d31e9154f3f2cac2$var$weekday($d31e9154f3f2cac2$var$localWeekNum(d), d.getDay(), $d31e9154f3f2cac2$var$localFirst(y)),
    [$d31e9154f3f2cac2$export$1a58b8d7f494dd72]: (d, y)=>$d31e9154f3f2cac2$var$weekday(1, d.getDay(), $d31e9154f3f2cac2$var$localFirst(y))
};
const $d31e9154f3f2cac2$var$localInv = {
    [$d31e9154f3f2cac2$export$b470e30983f4a62f]: (q)=>3 * q,
    [$d31e9154f3f2cac2$export$3241045aa1844a20]: (w, y)=>$d31e9154f3f2cac2$var$weekday(w, 0, $d31e9154f3f2cac2$var$localFirst(y))
};
function $d31e9154f3f2cac2$export$775ee1dc2c26551e(units, step) {
    return $d31e9154f3f2cac2$var$floor(units, step || 1, $d31e9154f3f2cac2$var$localGet, $d31e9154f3f2cac2$var$localInv, $d31e9154f3f2cac2$var$localDate);
}
// -- UTC TIME --
const $d31e9154f3f2cac2$var$utcGet = {
    [$d31e9154f3f2cac2$export$90b88dc425a06a95]: (d)=>d.getUTCFullYear(),
    [$d31e9154f3f2cac2$export$b470e30983f4a62f]: (d)=>Math.floor(d.getUTCMonth() / 3),
    [$d31e9154f3f2cac2$export$fa5253a4540f3e3a]: (d)=>d.getUTCMonth(),
    [$d31e9154f3f2cac2$export$501a7fac1df67a49]: (d)=>d.getUTCDate(),
    [$d31e9154f3f2cac2$export$f25ebc73c10ad2c]: (d)=>d.getUTCHours(),
    [$d31e9154f3f2cac2$export$4e1246fc5e978af9]: (d)=>d.getUTCMinutes(),
    [$d31e9154f3f2cac2$export$8fa5d88ee8e453e2]: (d)=>d.getUTCSeconds(),
    [$d31e9154f3f2cac2$export$137e956cd70314cf]: (d)=>d.getUTCMilliseconds(),
    [$d31e9154f3f2cac2$export$c6000b488d671fd3]: (d)=>$d31e9154f3f2cac2$var$utcDayOfYear(d),
    [$d31e9154f3f2cac2$export$3241045aa1844a20]: (d)=>$d31e9154f3f2cac2$var$utcWeekNum(d),
    [$d31e9154f3f2cac2$export$1a58b8d7f494dd72]: (d, y)=>$d31e9154f3f2cac2$var$weekday(1, d.getUTCDay(), $d31e9154f3f2cac2$var$utcFirst(y)),
    [$d31e9154f3f2cac2$export$3241045aa1844a20 + $d31e9154f3f2cac2$export$1a58b8d7f494dd72]: (d, y)=>$d31e9154f3f2cac2$var$weekday($d31e9154f3f2cac2$var$utcWeekNum(d), d.getUTCDay(), $d31e9154f3f2cac2$var$utcFirst(y))
};
const $d31e9154f3f2cac2$var$utcInv = {
    [$d31e9154f3f2cac2$export$b470e30983f4a62f]: (q)=>3 * q,
    [$d31e9154f3f2cac2$export$3241045aa1844a20]: (w, y)=>$d31e9154f3f2cac2$var$weekday(w, 0, $d31e9154f3f2cac2$var$utcFirst(y))
};
function $d31e9154f3f2cac2$export$557b60a0700d7d85(units, step) {
    return $d31e9154f3f2cac2$var$floor(units, step || 1, $d31e9154f3f2cac2$var$utcGet, $d31e9154f3f2cac2$var$utcInv, $d31e9154f3f2cac2$var$utcDate);
}
const $d31e9154f3f2cac2$var$timeIntervals = {
    [$d31e9154f3f2cac2$export$90b88dc425a06a95]: (0, $4gydF.timeYear),
    [$d31e9154f3f2cac2$export$b470e30983f4a62f]: (0, $egcOq.timeMonth).every(3),
    [$d31e9154f3f2cac2$export$fa5253a4540f3e3a]: (0, $egcOq.timeMonth),
    [$d31e9154f3f2cac2$export$3241045aa1844a20]: (0, $deUco.timeSunday),
    [$d31e9154f3f2cac2$export$501a7fac1df67a49]: (0, $fFQQk.timeDay),
    [$d31e9154f3f2cac2$export$1a58b8d7f494dd72]: (0, $fFQQk.timeDay),
    [$d31e9154f3f2cac2$export$c6000b488d671fd3]: (0, $fFQQk.timeDay),
    [$d31e9154f3f2cac2$export$f25ebc73c10ad2c]: (0, $9CdPb.timeHour),
    [$d31e9154f3f2cac2$export$4e1246fc5e978af9]: (0, $4uq9w.timeMinute),
    [$d31e9154f3f2cac2$export$8fa5d88ee8e453e2]: (0, $8BRD5.second),
    [$d31e9154f3f2cac2$export$137e956cd70314cf]: (0, $lnDWe.millisecond)
};
const $d31e9154f3f2cac2$var$utcIntervals = {
    [$d31e9154f3f2cac2$export$90b88dc425a06a95]: (0, $4gydF.utcYear),
    [$d31e9154f3f2cac2$export$b470e30983f4a62f]: (0, $egcOq.utcMonth).every(3),
    [$d31e9154f3f2cac2$export$fa5253a4540f3e3a]: (0, $egcOq.utcMonth),
    [$d31e9154f3f2cac2$export$3241045aa1844a20]: (0, $deUco.utcSunday),
    [$d31e9154f3f2cac2$export$501a7fac1df67a49]: (0, $fFQQk.utcDay),
    [$d31e9154f3f2cac2$export$1a58b8d7f494dd72]: (0, $fFQQk.utcDay),
    [$d31e9154f3f2cac2$export$c6000b488d671fd3]: (0, $fFQQk.utcDay),
    [$d31e9154f3f2cac2$export$f25ebc73c10ad2c]: (0, $9CdPb.utcHour),
    [$d31e9154f3f2cac2$export$4e1246fc5e978af9]: (0, $4uq9w.utcMinute),
    [$d31e9154f3f2cac2$export$8fa5d88ee8e453e2]: (0, $8BRD5.second),
    [$d31e9154f3f2cac2$export$137e956cd70314cf]: (0, $lnDWe.millisecond)
};
function $d31e9154f3f2cac2$export$1a539c8b2950ab40(unit) {
    return $d31e9154f3f2cac2$var$timeIntervals[unit];
}
function $d31e9154f3f2cac2$export$e1d09836890453eb(unit) {
    return $d31e9154f3f2cac2$var$utcIntervals[unit];
}
function $d31e9154f3f2cac2$var$offset(ival, date, step) {
    return ival ? ival.offset(date, step) : undefined;
}
function $d31e9154f3f2cac2$export$6fe62eff68e2871d(unit, date, step) {
    return $d31e9154f3f2cac2$var$offset($d31e9154f3f2cac2$export$1a539c8b2950ab40(unit), date, step);
}
function $d31e9154f3f2cac2$export$c6b13dc6551dbb4(unit, date, step) {
    return $d31e9154f3f2cac2$var$offset($d31e9154f3f2cac2$export$e1d09836890453eb(unit), date, step);
}
function $d31e9154f3f2cac2$var$sequence(ival, start, stop, step) {
    return ival ? ival.range(start, stop, step) : undefined;
}
function $d31e9154f3f2cac2$export$f64ca6c70315e3b3(unit, start, stop, step) {
    return $d31e9154f3f2cac2$var$sequence($d31e9154f3f2cac2$export$1a539c8b2950ab40(unit), start, stop, step);
}
function $d31e9154f3f2cac2$export$f6e075a62ef0f434(unit, start, stop, step) {
    return $d31e9154f3f2cac2$var$sequence($d31e9154f3f2cac2$export$e1d09836890453eb(unit), start, stop, step);
}
const $d31e9154f3f2cac2$var$durationSecond = 1000, $d31e9154f3f2cac2$var$durationMinute = $d31e9154f3f2cac2$var$durationSecond * 60, $d31e9154f3f2cac2$var$durationHour = $d31e9154f3f2cac2$var$durationMinute * 60, $d31e9154f3f2cac2$var$durationDay = $d31e9154f3f2cac2$var$durationHour * 24, $d31e9154f3f2cac2$var$durationWeek = $d31e9154f3f2cac2$var$durationDay * 7, $d31e9154f3f2cac2$var$durationMonth = $d31e9154f3f2cac2$var$durationDay * 30, $d31e9154f3f2cac2$var$durationYear = $d31e9154f3f2cac2$var$durationDay * 365;
const $d31e9154f3f2cac2$var$Milli = [
    $d31e9154f3f2cac2$export$90b88dc425a06a95,
    $d31e9154f3f2cac2$export$fa5253a4540f3e3a,
    $d31e9154f3f2cac2$export$501a7fac1df67a49,
    $d31e9154f3f2cac2$export$f25ebc73c10ad2c,
    $d31e9154f3f2cac2$export$4e1246fc5e978af9,
    $d31e9154f3f2cac2$export$8fa5d88ee8e453e2,
    $d31e9154f3f2cac2$export$137e956cd70314cf
], $d31e9154f3f2cac2$var$Seconds = $d31e9154f3f2cac2$var$Milli.slice(0, -1), $d31e9154f3f2cac2$var$Minutes = $d31e9154f3f2cac2$var$Seconds.slice(0, -1), $d31e9154f3f2cac2$var$Hours = $d31e9154f3f2cac2$var$Minutes.slice(0, -1), $d31e9154f3f2cac2$var$Day = $d31e9154f3f2cac2$var$Hours.slice(0, -1), $d31e9154f3f2cac2$var$Week = [
    $d31e9154f3f2cac2$export$90b88dc425a06a95,
    $d31e9154f3f2cac2$export$3241045aa1844a20
], $d31e9154f3f2cac2$var$Month = [
    $d31e9154f3f2cac2$export$90b88dc425a06a95,
    $d31e9154f3f2cac2$export$fa5253a4540f3e3a
], $d31e9154f3f2cac2$var$Year = [
    $d31e9154f3f2cac2$export$90b88dc425a06a95
];
const $d31e9154f3f2cac2$var$intervals = [
    [
        $d31e9154f3f2cac2$var$Seconds,
        1,
        $d31e9154f3f2cac2$var$durationSecond
    ],
    [
        $d31e9154f3f2cac2$var$Seconds,
        5,
        5 * $d31e9154f3f2cac2$var$durationSecond
    ],
    [
        $d31e9154f3f2cac2$var$Seconds,
        15,
        15 * $d31e9154f3f2cac2$var$durationSecond
    ],
    [
        $d31e9154f3f2cac2$var$Seconds,
        30,
        30 * $d31e9154f3f2cac2$var$durationSecond
    ],
    [
        $d31e9154f3f2cac2$var$Minutes,
        1,
        $d31e9154f3f2cac2$var$durationMinute
    ],
    [
        $d31e9154f3f2cac2$var$Minutes,
        5,
        5 * $d31e9154f3f2cac2$var$durationMinute
    ],
    [
        $d31e9154f3f2cac2$var$Minutes,
        15,
        15 * $d31e9154f3f2cac2$var$durationMinute
    ],
    [
        $d31e9154f3f2cac2$var$Minutes,
        30,
        30 * $d31e9154f3f2cac2$var$durationMinute
    ],
    [
        $d31e9154f3f2cac2$var$Hours,
        1,
        $d31e9154f3f2cac2$var$durationHour
    ],
    [
        $d31e9154f3f2cac2$var$Hours,
        3,
        3 * $d31e9154f3f2cac2$var$durationHour
    ],
    [
        $d31e9154f3f2cac2$var$Hours,
        6,
        6 * $d31e9154f3f2cac2$var$durationHour
    ],
    [
        $d31e9154f3f2cac2$var$Hours,
        12,
        12 * $d31e9154f3f2cac2$var$durationHour
    ],
    [
        $d31e9154f3f2cac2$var$Day,
        1,
        $d31e9154f3f2cac2$var$durationDay
    ],
    [
        $d31e9154f3f2cac2$var$Week,
        1,
        $d31e9154f3f2cac2$var$durationWeek
    ],
    [
        $d31e9154f3f2cac2$var$Month,
        1,
        $d31e9154f3f2cac2$var$durationMonth
    ],
    [
        $d31e9154f3f2cac2$var$Month,
        3,
        3 * $d31e9154f3f2cac2$var$durationMonth
    ],
    [
        $d31e9154f3f2cac2$var$Year,
        1,
        $d31e9154f3f2cac2$var$durationYear
    ]
];
function $d31e9154f3f2cac2$export$367a1854e359b6b2(opt) {
    const ext = opt.extent, max = opt.maxbins || 40, target = Math.abs((0, $4SWbq.span)(ext)) / max;
    let i = (0, $bytjh.default)((i)=>i[2]).right($d31e9154f3f2cac2$var$intervals, target), units, step;
    if (i === $d31e9154f3f2cac2$var$intervals.length) units = $d31e9154f3f2cac2$var$Year, step = (0, $5kZgp.tickStep)(ext[0] / $d31e9154f3f2cac2$var$durationYear, ext[1] / $d31e9154f3f2cac2$var$durationYear, max);
    else if (i) {
        i = $d31e9154f3f2cac2$var$intervals[target / $d31e9154f3f2cac2$var$intervals[i - 1][2] < $d31e9154f3f2cac2$var$intervals[i][2] / target ? i - 1 : i];
        units = i[0];
        step = i[1];
    } else {
        units = $d31e9154f3f2cac2$var$Milli;
        step = Math.max((0, $5kZgp.tickStep)(ext[0], ext[1], max), 1);
    }
    return {
        units: units,
        step: step
    };
}

});
parcelRegister("lnDWe", function(module, exports) {

$parcel$export(module.exports, "millisecond", () => $f90ab9d85bcc6e29$export$edc5e5cb87280477);

var $jZFJR = parcelRequire("jZFJR");
const $f90ab9d85bcc6e29$export$edc5e5cb87280477 = (0, $jZFJR.timeInterval)(()=>{
// noop
}, (date, step)=>{
    date.setTime(+date + step);
}, (start, end)=>{
    return end - start;
});
// An optimized implementation for this simple case.
$f90ab9d85bcc6e29$export$edc5e5cb87280477.every = (k)=>{
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return $f90ab9d85bcc6e29$export$edc5e5cb87280477;
    return (0, $jZFJR.timeInterval)((date)=>{
        date.setTime(Math.floor(date / k) * k);
    }, (date, step)=>{
        date.setTime(+date + step * k);
    }, (start, end)=>{
        return (end - start) / k;
    });
};
const $f90ab9d85bcc6e29$export$9a27fac83d67afd3 = $f90ab9d85bcc6e29$export$edc5e5cb87280477.range;

});
parcelRegister("jZFJR", function(module, exports) {

$parcel$export(module.exports, "timeInterval", () => $e8e4173d22f6c786$export$1a539c8b2950ab40);
const $e8e4173d22f6c786$var$t0 = new Date, $e8e4173d22f6c786$var$t1 = new Date;
function $e8e4173d22f6c786$export$1a539c8b2950ab40(floori, offseti, count, field) {
    function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
    }
    interval.floor = (date)=>{
        return floori(date = new Date(+date)), date;
    };
    interval.ceil = (date)=>{
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };
    interval.round = (date)=>{
        const d0 = interval(date), d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = (date, step)=>{
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };
    interval.range = (start, stop, step)=>{
        const range = [];
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        let previous;
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
    };
    interval.filter = (test)=>{
        return $e8e4173d22f6c786$export$1a539c8b2950ab40((date)=>{
            if (date >= date) while(floori(date), !test(date))date.setTime(date - 1);
        }, (date, step)=>{
            if (date >= date) {
                if (step < 0) while(++step <= 0){
                    while(offseti(date, -1), !test(date)); // eslint-disable-line no-empty
                }
                else while(--step >= 0){
                    while(offseti(date, 1), !test(date)); // eslint-disable-line no-empty
                }
            }
        });
    };
    if (count) {
        interval.count = (start, end)=>{
            $e8e4173d22f6c786$var$t0.setTime(+start), $e8e4173d22f6c786$var$t1.setTime(+end);
            floori($e8e4173d22f6c786$var$t0), floori($e8e4173d22f6c786$var$t1);
            return Math.floor(count($e8e4173d22f6c786$var$t0, $e8e4173d22f6c786$var$t1));
        };
        interval.every = (step)=>{
            step = Math.floor(step);
            return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d)=>field(d) % step === 0 : (d)=>interval.count(0, d) % step === 0);
        };
    }
    return interval;
}

});


parcelRegister("8BRD5", function(module, exports) {

$parcel$export(module.exports, "second", () => $644b611abcda8112$export$3d3c77ce7df7d30d);

var $jZFJR = parcelRequire("jZFJR");

var $7IgMo = parcelRequire("7IgMo");
const $644b611abcda8112$export$3d3c77ce7df7d30d = (0, $jZFJR.timeInterval)((date)=>{
    date.setTime(date - date.getMilliseconds());
}, (date, step)=>{
    date.setTime(+date + step * (0, $7IgMo.durationSecond));
}, (start, end)=>{
    return (end - start) / (0, $7IgMo.durationSecond);
}, (date)=>{
    return date.getUTCSeconds();
});
const $644b611abcda8112$export$4792e48abc550fa1 = $644b611abcda8112$export$3d3c77ce7df7d30d.range;

});
parcelRegister("7IgMo", function(module, exports) {

$parcel$export(module.exports, "durationSecond", () => $59d9a88c68c408fa$export$79ef0e34099623dc);
$parcel$export(module.exports, "durationMinute", () => $59d9a88c68c408fa$export$683905d551c33fa9);
$parcel$export(module.exports, "durationHour", () => $59d9a88c68c408fa$export$4157bf0c8e241659);
$parcel$export(module.exports, "durationDay", () => $59d9a88c68c408fa$export$353686095f4fbf45);
$parcel$export(module.exports, "durationWeek", () => $59d9a88c68c408fa$export$c241eb88520d5016);
$parcel$export(module.exports, "durationMonth", () => $59d9a88c68c408fa$export$ab95684df7020b26);
$parcel$export(module.exports, "durationYear", () => $59d9a88c68c408fa$export$61f8ee2d834c6959);
const $59d9a88c68c408fa$export$79ef0e34099623dc = 1000;
const $59d9a88c68c408fa$export$683905d551c33fa9 = $59d9a88c68c408fa$export$79ef0e34099623dc * 60;
const $59d9a88c68c408fa$export$4157bf0c8e241659 = $59d9a88c68c408fa$export$683905d551c33fa9 * 60;
const $59d9a88c68c408fa$export$353686095f4fbf45 = $59d9a88c68c408fa$export$4157bf0c8e241659 * 24;
const $59d9a88c68c408fa$export$c241eb88520d5016 = $59d9a88c68c408fa$export$353686095f4fbf45 * 7;
const $59d9a88c68c408fa$export$ab95684df7020b26 = $59d9a88c68c408fa$export$353686095f4fbf45 * 30;
const $59d9a88c68c408fa$export$61f8ee2d834c6959 = $59d9a88c68c408fa$export$353686095f4fbf45 * 365;

});


parcelRegister("4uq9w", function(module, exports) {

$parcel$export(module.exports, "timeMinute", () => $344e4020d743b29f$export$a7e4c34a52f0576);
$parcel$export(module.exports, "utcMinute", () => $344e4020d743b29f$export$efe6712d6003761b);

var $jZFJR = parcelRequire("jZFJR");

var $7IgMo = parcelRequire("7IgMo");
const $344e4020d743b29f$export$a7e4c34a52f0576 = (0, $jZFJR.timeInterval)((date)=>{
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * (0, $7IgMo.durationSecond));
}, (date, step)=>{
    date.setTime(+date + step * (0, $7IgMo.durationMinute));
}, (start, end)=>{
    return (end - start) / (0, $7IgMo.durationMinute);
}, (date)=>{
    return date.getMinutes();
});
const $344e4020d743b29f$export$186d65358374c0a2 = $344e4020d743b29f$export$a7e4c34a52f0576.range;
const $344e4020d743b29f$export$efe6712d6003761b = (0, $jZFJR.timeInterval)((date)=>{
    date.setUTCSeconds(0, 0);
}, (date, step)=>{
    date.setTime(+date + step * (0, $7IgMo.durationMinute));
}, (start, end)=>{
    return (end - start) / (0, $7IgMo.durationMinute);
}, (date)=>{
    return date.getUTCMinutes();
});
const $344e4020d743b29f$export$cedd563624e8ee50 = $344e4020d743b29f$export$efe6712d6003761b.range;

});

parcelRegister("9CdPb", function(module, exports) {

$parcel$export(module.exports, "timeHour", () => $700262ef02f167b7$export$46c68a5833bc315b);
$parcel$export(module.exports, "utcHour", () => $700262ef02f167b7$export$31f6f2b3c63ac75e);

var $jZFJR = parcelRequire("jZFJR");

var $7IgMo = parcelRequire("7IgMo");
const $700262ef02f167b7$export$46c68a5833bc315b = (0, $jZFJR.timeInterval)((date)=>{
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * (0, $7IgMo.durationSecond) - date.getMinutes() * (0, $7IgMo.durationMinute));
}, (date, step)=>{
    date.setTime(+date + step * (0, $7IgMo.durationHour));
}, (start, end)=>{
    return (end - start) / (0, $7IgMo.durationHour);
}, (date)=>{
    return date.getHours();
});
const $700262ef02f167b7$export$fb843f9087cd5235 = $700262ef02f167b7$export$46c68a5833bc315b.range;
const $700262ef02f167b7$export$31f6f2b3c63ac75e = (0, $jZFJR.timeInterval)((date)=>{
    date.setUTCMinutes(0, 0, 0);
}, (date, step)=>{
    date.setTime(+date + step * (0, $7IgMo.durationHour));
}, (start, end)=>{
    return (end - start) / (0, $7IgMo.durationHour);
}, (date)=>{
    return date.getUTCHours();
});
const $700262ef02f167b7$export$6e7a76cd5f50b719 = $700262ef02f167b7$export$31f6f2b3c63ac75e.range;

});

parcelRegister("fFQQk", function(module, exports) {

$parcel$export(module.exports, "timeDay", () => $b693ace125b16ea8$export$8888529b966033e5);
$parcel$export(module.exports, "utcDay", () => $b693ace125b16ea8$export$c8cbc42cefd47140);
$parcel$export(module.exports, "unixDay", () => $b693ace125b16ea8$export$fb065be2d7ea4a71);

var $jZFJR = parcelRequire("jZFJR");

var $7IgMo = parcelRequire("7IgMo");
const $b693ace125b16ea8$export$8888529b966033e5 = (0, $jZFJR.timeInterval)((date)=>date.setHours(0, 0, 0, 0), (date, step)=>date.setDate(date.getDate() + step), (start, end)=>(end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * (0, $7IgMo.durationMinute)) / (0, $7IgMo.durationDay), (date)=>date.getDate() - 1);
const $b693ace125b16ea8$export$6657a54f3034cf45 = $b693ace125b16ea8$export$8888529b966033e5.range;
const $b693ace125b16ea8$export$c8cbc42cefd47140 = (0, $jZFJR.timeInterval)((date)=>{
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCDate(date.getUTCDate() + step);
}, (start, end)=>{
    return (end - start) / (0, $7IgMo.durationDay);
}, (date)=>{
    return date.getUTCDate() - 1;
});
const $b693ace125b16ea8$export$d277e198508549a1 = $b693ace125b16ea8$export$c8cbc42cefd47140.range;
const $b693ace125b16ea8$export$fb065be2d7ea4a71 = (0, $jZFJR.timeInterval)((date)=>{
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCDate(date.getUTCDate() + step);
}, (start, end)=>{
    return (end - start) / (0, $7IgMo.durationDay);
}, (date)=>{
    return Math.floor(date / (0, $7IgMo.durationDay));
});
const $b693ace125b16ea8$export$a491caaf5e9481aa = $b693ace125b16ea8$export$fb065be2d7ea4a71.range;

});

parcelRegister("deUco", function(module, exports) {

$parcel$export(module.exports, "timeSunday", () => $9a382d1d0d82cc52$export$22ee6205b762968c);
$parcel$export(module.exports, "timeMonday", () => $9a382d1d0d82cc52$export$e79bbe0177cf1b01);
$parcel$export(module.exports, "timeThursday", () => $9a382d1d0d82cc52$export$608689422d5cf9f4);
$parcel$export(module.exports, "utcSunday", () => $9a382d1d0d82cc52$export$4898b06303a92011);
$parcel$export(module.exports, "utcMonday", () => $9a382d1d0d82cc52$export$9cfc53b9cfafd080);
$parcel$export(module.exports, "utcThursday", () => $9a382d1d0d82cc52$export$1db08111baec2f53);

var $jZFJR = parcelRequire("jZFJR");

var $7IgMo = parcelRequire("7IgMo");
function $9a382d1d0d82cc52$var$timeWeekday(i) {
    return (0, $jZFJR.timeInterval)((date)=>{
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setDate(date.getDate() + step * 7);
    }, (start, end)=>{
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * (0, $7IgMo.durationMinute)) / (0, $7IgMo.durationWeek);
    });
}
const $9a382d1d0d82cc52$export$22ee6205b762968c = $9a382d1d0d82cc52$var$timeWeekday(0);
const $9a382d1d0d82cc52$export$e79bbe0177cf1b01 = $9a382d1d0d82cc52$var$timeWeekday(1);
const $9a382d1d0d82cc52$export$57c0658c29f77708 = $9a382d1d0d82cc52$var$timeWeekday(2);
const $9a382d1d0d82cc52$export$3fbeef226c256e43 = $9a382d1d0d82cc52$var$timeWeekday(3);
const $9a382d1d0d82cc52$export$608689422d5cf9f4 = $9a382d1d0d82cc52$var$timeWeekday(4);
const $9a382d1d0d82cc52$export$548e5227aa183dca = $9a382d1d0d82cc52$var$timeWeekday(5);
const $9a382d1d0d82cc52$export$c56a3ad248908e19 = $9a382d1d0d82cc52$var$timeWeekday(6);
const $9a382d1d0d82cc52$export$eac514c8a8674eba = $9a382d1d0d82cc52$export$22ee6205b762968c.range;
const $9a382d1d0d82cc52$export$f7219b1481948356 = $9a382d1d0d82cc52$export$e79bbe0177cf1b01.range;
const $9a382d1d0d82cc52$export$77e22b12c5bed05b = $9a382d1d0d82cc52$export$57c0658c29f77708.range;
const $9a382d1d0d82cc52$export$b85d407a471809e8 = $9a382d1d0d82cc52$export$3fbeef226c256e43.range;
const $9a382d1d0d82cc52$export$c1bc1c49254c8855 = $9a382d1d0d82cc52$export$608689422d5cf9f4.range;
const $9a382d1d0d82cc52$export$3691a1557fff46f1 = $9a382d1d0d82cc52$export$548e5227aa183dca.range;
const $9a382d1d0d82cc52$export$b755452d02cba8d2 = $9a382d1d0d82cc52$export$c56a3ad248908e19.range;
function $9a382d1d0d82cc52$var$utcWeekday(i) {
    return (0, $jZFJR.timeInterval)((date)=>{
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setUTCDate(date.getUTCDate() + step * 7);
    }, (start, end)=>{
        return (end - start) / (0, $7IgMo.durationWeek);
    });
}
const $9a382d1d0d82cc52$export$4898b06303a92011 = $9a382d1d0d82cc52$var$utcWeekday(0);
const $9a382d1d0d82cc52$export$9cfc53b9cfafd080 = $9a382d1d0d82cc52$var$utcWeekday(1);
const $9a382d1d0d82cc52$export$2a6d545f77eceb15 = $9a382d1d0d82cc52$var$utcWeekday(2);
const $9a382d1d0d82cc52$export$a5c25d8ed64433c4 = $9a382d1d0d82cc52$var$utcWeekday(3);
const $9a382d1d0d82cc52$export$1db08111baec2f53 = $9a382d1d0d82cc52$var$utcWeekday(4);
const $9a382d1d0d82cc52$export$29265e34dd5921f7 = $9a382d1d0d82cc52$var$utcWeekday(5);
const $9a382d1d0d82cc52$export$85b74dad05049604 = $9a382d1d0d82cc52$var$utcWeekday(6);
const $9a382d1d0d82cc52$export$6f3e1c2b0f7d7880 = $9a382d1d0d82cc52$export$4898b06303a92011.range;
const $9a382d1d0d82cc52$export$1d2d8b858bb366f9 = $9a382d1d0d82cc52$export$9cfc53b9cfafd080.range;
const $9a382d1d0d82cc52$export$1d5f6785fc7f30f8 = $9a382d1d0d82cc52$export$2a6d545f77eceb15.range;
const $9a382d1d0d82cc52$export$7a75faf0e37ef4af = $9a382d1d0d82cc52$export$a5c25d8ed64433c4.range;
const $9a382d1d0d82cc52$export$417eb959611b2f2f = $9a382d1d0d82cc52$export$1db08111baec2f53.range;
const $9a382d1d0d82cc52$export$59d308db7af08c64 = $9a382d1d0d82cc52$export$29265e34dd5921f7.range;
const $9a382d1d0d82cc52$export$a124108a0a7f34c8 = $9a382d1d0d82cc52$export$85b74dad05049604.range;

});

parcelRegister("egcOq", function(module, exports) {

$parcel$export(module.exports, "timeMonth", () => $a61c7f9746e5a30d$export$7e1084fb688591c1);
$parcel$export(module.exports, "utcMonth", () => $a61c7f9746e5a30d$export$cd49b3d2bcfe50d5);

var $jZFJR = parcelRequire("jZFJR");
const $a61c7f9746e5a30d$export$7e1084fb688591c1 = (0, $jZFJR.timeInterval)((date)=>{
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setMonth(date.getMonth() + step);
}, (start, end)=>{
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date)=>{
    return date.getMonth();
});
const $a61c7f9746e5a30d$export$3e24aa839cd0f1c4 = $a61c7f9746e5a30d$export$7e1084fb688591c1.range;
const $a61c7f9746e5a30d$export$cd49b3d2bcfe50d5 = (0, $jZFJR.timeInterval)((date)=>{
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCMonth(date.getUTCMonth() + step);
}, (start, end)=>{
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date)=>{
    return date.getUTCMonth();
});
const $a61c7f9746e5a30d$export$49159f585997498 = $a61c7f9746e5a30d$export$cd49b3d2bcfe50d5.range;

});

parcelRegister("4gydF", function(module, exports) {

$parcel$export(module.exports, "timeYear", () => $31b3334e6e4f5548$export$cd17cfe45df0c046);
$parcel$export(module.exports, "utcYear", () => $31b3334e6e4f5548$export$d5c3802e389714c4);

var $jZFJR = parcelRequire("jZFJR");
const $31b3334e6e4f5548$export$cd17cfe45df0c046 = (0, $jZFJR.timeInterval)((date)=>{
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setFullYear(date.getFullYear() + step);
}, (start, end)=>{
    return end.getFullYear() - start.getFullYear();
}, (date)=>{
    return date.getFullYear();
});
// An optimized implementation for this simple case.
$31b3334e6e4f5548$export$cd17cfe45df0c046.every = (k)=>{
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, $jZFJR.timeInterval)((date)=>{
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setFullYear(date.getFullYear() + step * k);
    });
};
const $31b3334e6e4f5548$export$69a4e90dd2cc3bd1 = $31b3334e6e4f5548$export$cd17cfe45df0c046.range;
const $31b3334e6e4f5548$export$d5c3802e389714c4 = (0, $jZFJR.timeInterval)((date)=>{
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCFullYear(date.getUTCFullYear() + step);
}, (start, end)=>{
    return end.getUTCFullYear() - start.getUTCFullYear();
}, (date)=>{
    return date.getUTCFullYear();
});
// An optimized implementation for this simple case.
$31b3334e6e4f5548$export$d5c3802e389714c4.every = (k)=>{
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, $jZFJR.timeInterval)((date)=>{
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
};
const $31b3334e6e4f5548$export$3e24d311e17f5802 = $31b3334e6e4f5548$export$d5c3802e389714c4.range;

});

parcelRegister("72TYE", function(module, exports) {

$parcel$export(module.exports, "utcTicks", () => $52142433c72bebce$export$826ba5ae907e9767);
$parcel$export(module.exports, "utcTickInterval", () => $52142433c72bebce$export$6262d8d056ea44c4);
$parcel$export(module.exports, "timeTicks", () => $52142433c72bebce$export$60c76498552d28a6);
$parcel$export(module.exports, "timeTickInterval", () => $52142433c72bebce$export$69511150134dd174);

var $bytjh = parcelRequire("bytjh");
var $5kZgp = parcelRequire("5kZgp");

var $7IgMo = parcelRequire("7IgMo");

var $lnDWe = parcelRequire("lnDWe");

var $8BRD5 = parcelRequire("8BRD5");

var $4uq9w = parcelRequire("4uq9w");

var $9CdPb = parcelRequire("9CdPb");

var $fFQQk = parcelRequire("fFQQk");

var $deUco = parcelRequire("deUco");

var $egcOq = parcelRequire("egcOq");

var $4gydF = parcelRequire("4gydF");
function $52142433c72bebce$var$ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [
        [
            (0, $8BRD5.second),
            1,
            (0, $7IgMo.durationSecond)
        ],
        [
            (0, $8BRD5.second),
            5,
            5 * (0, $7IgMo.durationSecond)
        ],
        [
            (0, $8BRD5.second),
            15,
            15 * (0, $7IgMo.durationSecond)
        ],
        [
            (0, $8BRD5.second),
            30,
            30 * (0, $7IgMo.durationSecond)
        ],
        [
            minute,
            1,
            (0, $7IgMo.durationMinute)
        ],
        [
            minute,
            5,
            5 * (0, $7IgMo.durationMinute)
        ],
        [
            minute,
            15,
            15 * (0, $7IgMo.durationMinute)
        ],
        [
            minute,
            30,
            30 * (0, $7IgMo.durationMinute)
        ],
        [
            hour,
            1,
            (0, $7IgMo.durationHour)
        ],
        [
            hour,
            3,
            3 * (0, $7IgMo.durationHour)
        ],
        [
            hour,
            6,
            6 * (0, $7IgMo.durationHour)
        ],
        [
            hour,
            12,
            12 * (0, $7IgMo.durationHour)
        ],
        [
            day,
            1,
            (0, $7IgMo.durationDay)
        ],
        [
            day,
            2,
            2 * (0, $7IgMo.durationDay)
        ],
        [
            week,
            1,
            (0, $7IgMo.durationWeek)
        ],
        [
            month,
            1,
            (0, $7IgMo.durationMonth)
        ],
        [
            month,
            3,
            3 * (0, $7IgMo.durationMonth)
        ],
        [
            year,
            1,
            (0, $7IgMo.durationYear)
        ]
    ];
    function ticks(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [
            stop,
            start
        ];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
    }
    function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = (0, $bytjh.default)(([, , step])=>step).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every((0, $5kZgp.tickStep)(start / (0, $7IgMo.durationYear), stop / (0, $7IgMo.durationYear), count));
        if (i === 0) return (0, $lnDWe.millisecond).every(Math.max((0, $5kZgp.tickStep)(start, stop, count), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step);
    }
    return [
        ticks,
        tickInterval
    ];
}
const [$52142433c72bebce$export$826ba5ae907e9767, $52142433c72bebce$export$6262d8d056ea44c4] = $52142433c72bebce$var$ticker((0, $4gydF.utcYear), (0, $egcOq.utcMonth), (0, $deUco.utcSunday), (0, $fFQQk.unixDay), (0, $9CdPb.utcHour), (0, $4uq9w.utcMinute));
const [$52142433c72bebce$export$60c76498552d28a6, $52142433c72bebce$export$69511150134dd174] = $52142433c72bebce$var$ticker((0, $4gydF.timeYear), (0, $egcOq.timeMonth), (0, $deUco.timeSunday), (0, $fFQQk.timeDay), (0, $9CdPb.timeHour), (0, $4uq9w.timeMinute));

});
parcelRegister("bytjh", function(module, exports) {

$parcel$export(module.exports, "default", () => $86999b051cb7897a$export$2e2bcd8739ae039);

var $fAbgM = parcelRequire("fAbgM");

var $eFiAl = parcelRequire("eFiAl");
function $86999b051cb7897a$export$2e2bcd8739ae039(f) {
    let compare1, compare2, delta;
    // If an accessor is specified, promote it to a comparator. In this case we
    // can test whether the search value is (self-) comparable. We can’t do this
    // for a comparator (except for specific, known comparators) because we can’t
    // tell if the comparator is symmetric, and an asymmetric comparator can’t be
    // used to test whether a single value is comparable.
    if (f.length !== 2) {
        compare1 = (0, $fAbgM.default);
        compare2 = (d, x)=>(0, $fAbgM.default)(f(d), x);
        delta = (d, x)=>f(d) - x;
    } else {
        compare1 = f === (0, $fAbgM.default) || f === (0, $eFiAl.default) ? f : $86999b051cb7897a$var$zero;
        compare2 = f;
        delta = f;
    }
    function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) < 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) <= 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
        left: left,
        center: center,
        right: right
    };
}
function $86999b051cb7897a$var$zero() {
    return 0;
}

});
parcelRegister("fAbgM", function(module, exports) {

$parcel$export(module.exports, "default", () => $b582f5b5f237f183$export$2e2bcd8739ae039);
function $b582f5b5f237f183$export$2e2bcd8739ae039(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

});

parcelRegister("eFiAl", function(module, exports) {

$parcel$export(module.exports, "default", () => $aad34fa8688dd126$export$2e2bcd8739ae039);
function $aad34fa8688dd126$export$2e2bcd8739ae039(a, b) {
    return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

});





parcelRegister("eCxzE", function(module, exports) {

$parcel$export(module.exports, "timeFormat", () => $aa4ea86779d94bd6$export$94f4d87fad5dcf9a);
$parcel$export(module.exports, "timeParse", () => $aa4ea86779d94bd6$export$32b9cd16e1b8c8d2);
$parcel$export(module.exports, "utcFormat", () => $aa4ea86779d94bd6$export$1a08fe38f63ebbbb);
$parcel$export(module.exports, "utcParse", () => $aa4ea86779d94bd6$export$3edae9cf8e233729);

var $5QKtt = parcelRequire("5QKtt");
var $aa4ea86779d94bd6$var$locale;
var $aa4ea86779d94bd6$export$94f4d87fad5dcf9a;
var $aa4ea86779d94bd6$export$32b9cd16e1b8c8d2;
var $aa4ea86779d94bd6$export$1a08fe38f63ebbbb;
var $aa4ea86779d94bd6$export$3edae9cf8e233729;
$aa4ea86779d94bd6$export$2e2bcd8739ae039({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: [
        "AM",
        "PM"
    ],
    days: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ],
    shortDays: [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
    ],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ],
    shortMonths: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ]
});
function $aa4ea86779d94bd6$export$2e2bcd8739ae039(definition) {
    $aa4ea86779d94bd6$var$locale = (0, $5QKtt.default)(definition);
    $aa4ea86779d94bd6$export$94f4d87fad5dcf9a = $aa4ea86779d94bd6$var$locale.format;
    $aa4ea86779d94bd6$export$32b9cd16e1b8c8d2 = $aa4ea86779d94bd6$var$locale.parse;
    $aa4ea86779d94bd6$export$1a08fe38f63ebbbb = $aa4ea86779d94bd6$var$locale.utcFormat;
    $aa4ea86779d94bd6$export$3edae9cf8e233729 = $aa4ea86779d94bd6$var$locale.utcParse;
    return $aa4ea86779d94bd6$var$locale;
}

});
parcelRegister("5QKtt", function(module, exports) {

$parcel$export(module.exports, "default", () => $4425dbeeebb7e41e$export$2e2bcd8739ae039);

var $fFQQk = parcelRequire("fFQQk");
var $deUco = parcelRequire("deUco");
var $4gydF = parcelRequire("4gydF");
function $4425dbeeebb7e41e$var$localDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function $4425dbeeebb7e41e$var$utcDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function $4425dbeeebb7e41e$var$newDate(y, m, d) {
    return {
        y: y,
        m: m,
        d: d,
        H: 0,
        M: 0,
        S: 0,
        L: 0
    };
}
function $4425dbeeebb7e41e$export$2e2bcd8739ae039(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    var periodRe = $4425dbeeebb7e41e$var$formatRe(locale_periods), periodLookup = $4425dbeeebb7e41e$var$formatLookup(locale_periods), weekdayRe = $4425dbeeebb7e41e$var$formatRe(locale_weekdays), weekdayLookup = $4425dbeeebb7e41e$var$formatLookup(locale_weekdays), shortWeekdayRe = $4425dbeeebb7e41e$var$formatRe(locale_shortWeekdays), shortWeekdayLookup = $4425dbeeebb7e41e$var$formatLookup(locale_shortWeekdays), monthRe = $4425dbeeebb7e41e$var$formatRe(locale_months), monthLookup = $4425dbeeebb7e41e$var$formatLookup(locale_months), shortMonthRe = $4425dbeeebb7e41e$var$formatRe(locale_shortMonths), shortMonthLookup = $4425dbeeebb7e41e$var$formatLookup(locale_shortMonths);
    var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": $4425dbeeebb7e41e$var$formatDayOfMonth,
        "e": $4425dbeeebb7e41e$var$formatDayOfMonth,
        "f": $4425dbeeebb7e41e$var$formatMicroseconds,
        "g": $4425dbeeebb7e41e$var$formatYearISO,
        "G": $4425dbeeebb7e41e$var$formatFullYearISO,
        "H": $4425dbeeebb7e41e$var$formatHour24,
        "I": $4425dbeeebb7e41e$var$formatHour12,
        "j": $4425dbeeebb7e41e$var$formatDayOfYear,
        "L": $4425dbeeebb7e41e$var$formatMilliseconds,
        "m": $4425dbeeebb7e41e$var$formatMonthNumber,
        "M": $4425dbeeebb7e41e$var$formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": $4425dbeeebb7e41e$var$formatUnixTimestamp,
        "s": $4425dbeeebb7e41e$var$formatUnixTimestampSeconds,
        "S": $4425dbeeebb7e41e$var$formatSeconds,
        "u": $4425dbeeebb7e41e$var$formatWeekdayNumberMonday,
        "U": $4425dbeeebb7e41e$var$formatWeekNumberSunday,
        "V": $4425dbeeebb7e41e$var$formatWeekNumberISO,
        "w": $4425dbeeebb7e41e$var$formatWeekdayNumberSunday,
        "W": $4425dbeeebb7e41e$var$formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": $4425dbeeebb7e41e$var$formatYear,
        "Y": $4425dbeeebb7e41e$var$formatFullYear,
        "Z": $4425dbeeebb7e41e$var$formatZone,
        "%": $4425dbeeebb7e41e$var$formatLiteralPercent
    };
    var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": $4425dbeeebb7e41e$var$formatUTCDayOfMonth,
        "e": $4425dbeeebb7e41e$var$formatUTCDayOfMonth,
        "f": $4425dbeeebb7e41e$var$formatUTCMicroseconds,
        "g": $4425dbeeebb7e41e$var$formatUTCYearISO,
        "G": $4425dbeeebb7e41e$var$formatUTCFullYearISO,
        "H": $4425dbeeebb7e41e$var$formatUTCHour24,
        "I": $4425dbeeebb7e41e$var$formatUTCHour12,
        "j": $4425dbeeebb7e41e$var$formatUTCDayOfYear,
        "L": $4425dbeeebb7e41e$var$formatUTCMilliseconds,
        "m": $4425dbeeebb7e41e$var$formatUTCMonthNumber,
        "M": $4425dbeeebb7e41e$var$formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": $4425dbeeebb7e41e$var$formatUnixTimestamp,
        "s": $4425dbeeebb7e41e$var$formatUnixTimestampSeconds,
        "S": $4425dbeeebb7e41e$var$formatUTCSeconds,
        "u": $4425dbeeebb7e41e$var$formatUTCWeekdayNumberMonday,
        "U": $4425dbeeebb7e41e$var$formatUTCWeekNumberSunday,
        "V": $4425dbeeebb7e41e$var$formatUTCWeekNumberISO,
        "w": $4425dbeeebb7e41e$var$formatUTCWeekdayNumberSunday,
        "W": $4425dbeeebb7e41e$var$formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": $4425dbeeebb7e41e$var$formatUTCYear,
        "Y": $4425dbeeebb7e41e$var$formatUTCFullYear,
        "Z": $4425dbeeebb7e41e$var$formatUTCZone,
        "%": $4425dbeeebb7e41e$var$formatLiteralPercent
    };
    var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": $4425dbeeebb7e41e$var$parseDayOfMonth,
        "e": $4425dbeeebb7e41e$var$parseDayOfMonth,
        "f": $4425dbeeebb7e41e$var$parseMicroseconds,
        "g": $4425dbeeebb7e41e$var$parseYear,
        "G": $4425dbeeebb7e41e$var$parseFullYear,
        "H": $4425dbeeebb7e41e$var$parseHour24,
        "I": $4425dbeeebb7e41e$var$parseHour24,
        "j": $4425dbeeebb7e41e$var$parseDayOfYear,
        "L": $4425dbeeebb7e41e$var$parseMilliseconds,
        "m": $4425dbeeebb7e41e$var$parseMonthNumber,
        "M": $4425dbeeebb7e41e$var$parseMinutes,
        "p": parsePeriod,
        "q": $4425dbeeebb7e41e$var$parseQuarter,
        "Q": $4425dbeeebb7e41e$var$parseUnixTimestamp,
        "s": $4425dbeeebb7e41e$var$parseUnixTimestampSeconds,
        "S": $4425dbeeebb7e41e$var$parseSeconds,
        "u": $4425dbeeebb7e41e$var$parseWeekdayNumberMonday,
        "U": $4425dbeeebb7e41e$var$parseWeekNumberSunday,
        "V": $4425dbeeebb7e41e$var$parseWeekNumberISO,
        "w": $4425dbeeebb7e41e$var$parseWeekdayNumberSunday,
        "W": $4425dbeeebb7e41e$var$parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": $4425dbeeebb7e41e$var$parseYear,
        "Y": $4425dbeeebb7e41e$var$parseFullYear,
        "Z": $4425dbeeebb7e41e$var$parseZone,
        "%": $4425dbeeebb7e41e$var$parseLiteralPercent
    };
    // These recursive directive definitions must be deferred.
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats) {
        return function(date) {
            var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
            if (!(date instanceof Date)) date = new Date(+date);
            while(++i < n)if (specifier.charCodeAt(i) === 37) {
                string.push(specifier.slice(j, i));
                if ((pad = $4425dbeeebb7e41e$var$pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
                else pad = c === "e" ? " " : "0";
                if (format = formats[c]) c = format(date, pad);
                string.push(c);
                j = i + 1;
            }
            string.push(specifier.slice(j, i));
            return string.join("");
        };
    }
    function newParse(specifier, Z) {
        return function(string) {
            var d = $4425dbeeebb7e41e$var$newDate(1900, undefined, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
            if (i != string.length) return null;
            // If a UNIX timestamp is specified, return it.
            if ("Q" in d) return new Date(d.Q);
            if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));
            // If this is utcParse, never use the local timezone.
            if (Z && !("Z" in d)) d.Z = 0;
            // The am-pm flag is 0 for AM, and 1 for PM.
            if ("p" in d) d.H = d.H % 12 + d.p * 12;
            // If the month was not specified, inherit from the quarter.
            if (d.m === undefined) d.m = "q" in d ? d.q : 0;
            // Convert day-of-week and week-of-year to day-of-year.
            if ("V" in d) {
                if (d.V < 1 || d.V > 53) return null;
                if (!("w" in d)) d.w = 1;
                if ("Z" in d) {
                    week = $4425dbeeebb7e41e$var$utcDate($4425dbeeebb7e41e$var$newDate(d.y, 0, 1)), day = week.getUTCDay();
                    week = day > 4 || day === 0 ? (0, $deUco.utcMonday).ceil(week) : (0, $deUco.utcMonday)(week);
                    week = (0, $fFQQk.utcDay).offset(week, (d.V - 1) * 7);
                    d.y = week.getUTCFullYear();
                    d.m = week.getUTCMonth();
                    d.d = week.getUTCDate() + (d.w + 6) % 7;
                } else {
                    week = $4425dbeeebb7e41e$var$localDate($4425dbeeebb7e41e$var$newDate(d.y, 0, 1)), day = week.getDay();
                    week = day > 4 || day === 0 ? (0, $deUco.timeMonday).ceil(week) : (0, $deUco.timeMonday)(week);
                    week = (0, $fFQQk.timeDay).offset(week, (d.V - 1) * 7);
                    d.y = week.getFullYear();
                    d.m = week.getMonth();
                    d.d = week.getDate() + (d.w + 6) % 7;
                }
            } else if ("W" in d || "U" in d) {
                if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
                day = "Z" in d ? $4425dbeeebb7e41e$var$utcDate($4425dbeeebb7e41e$var$newDate(d.y, 0, 1)).getUTCDay() : $4425dbeeebb7e41e$var$localDate($4425dbeeebb7e41e$var$newDate(d.y, 0, 1)).getDay();
                d.m = 0;
                d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
            }
            // If a time zone is specified, all fields are interpreted as UTC and then
            // offset according to the specified time zone.
            if ("Z" in d) {
                d.H += d.Z / 100 | 0;
                d.M += d.Z % 100;
                return $4425dbeeebb7e41e$var$utcDate(d);
            }
            // Otherwise, all fields are in local time.
            return $4425dbeeebb7e41e$var$localDate(d);
        };
    }
    function parseSpecifier(d, specifier, string, j) {
        var i = 0, n = specifier.length, m = string.length, c, parse;
        while(i < n){
            if (j >= m) return -1;
            c = specifier.charCodeAt(i++);
            if (c === 37) {
                c = specifier.charAt(i++);
                parse = parses[c in $4425dbeeebb7e41e$var$pads ? specifier.charAt(i++) : c];
                if (!parse || (j = parse(d, string, j)) < 0) return -1;
            } else if (c != string.charCodeAt(j++)) return -1;
        }
        return j;
    }
    function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
        return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
        format: function(specifier) {
            var f = newFormat(specifier += "", formats);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        parse: function(specifier) {
            var p = newParse(specifier += "", false);
            p.toString = function() {
                return specifier;
            };
            return p;
        },
        utcFormat: function(specifier) {
            var f = newFormat(specifier += "", utcFormats);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        utcParse: function(specifier) {
            var p = newParse(specifier += "", true);
            p.toString = function() {
                return specifier;
            };
            return p;
        }
    };
}
var $4425dbeeebb7e41e$var$pads = {
    "-": "",
    "_": " ",
    "0": "0"
}, $4425dbeeebb7e41e$var$numberRe = /^\s*\d+/, $4425dbeeebb7e41e$var$percentRe = /^%/, $4425dbeeebb7e41e$var$requoteRe = /[\\^$*+?|[\]().{}]/g;
function $4425dbeeebb7e41e$var$pad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function $4425dbeeebb7e41e$var$requote(s) {
    return s.replace($4425dbeeebb7e41e$var$requoteRe, "\\$&");
}
function $4425dbeeebb7e41e$var$formatRe(names) {
    return new RegExp("^(?:" + names.map($4425dbeeebb7e41e$var$requote).join("|") + ")", "i");
}
function $4425dbeeebb7e41e$var$formatLookup(names) {
    return new Map(names.map((name, i)=>[
            name.toLowerCase(),
            i
        ]));
}
function $4425dbeeebb7e41e$var$parseWeekdayNumberSunday(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseWeekdayNumberMonday(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseWeekNumberSunday(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseWeekNumberISO(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseWeekNumberMonday(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseFullYear(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseYear(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseQuarter(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseMonthNumber(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseDayOfMonth(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseDayOfYear(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseHour24(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseMinutes(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseSeconds(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseMilliseconds(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseMicroseconds(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseLiteralPercent(d, string, i) {
    var n = $4425dbeeebb7e41e$var$percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
}
function $4425dbeeebb7e41e$var$parseUnixTimestamp(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$parseUnixTimestampSeconds(d, string, i) {
    var n = $4425dbeeebb7e41e$var$numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function $4425dbeeebb7e41e$var$formatDayOfMonth(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getDate(), p, 2);
}
function $4425dbeeebb7e41e$var$formatHour24(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getHours(), p, 2);
}
function $4425dbeeebb7e41e$var$formatHour12(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getHours() % 12 || 12, p, 2);
}
function $4425dbeeebb7e41e$var$formatDayOfYear(d, p) {
    return $4425dbeeebb7e41e$var$pad(1 + (0, $fFQQk.timeDay).count((0, $4gydF.timeYear)(d), d), p, 3);
}
function $4425dbeeebb7e41e$var$formatMilliseconds(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getMilliseconds(), p, 3);
}
function $4425dbeeebb7e41e$var$formatMicroseconds(d, p) {
    return $4425dbeeebb7e41e$var$formatMilliseconds(d, p) + "000";
}
function $4425dbeeebb7e41e$var$formatMonthNumber(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getMonth() + 1, p, 2);
}
function $4425dbeeebb7e41e$var$formatMinutes(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getMinutes(), p, 2);
}
function $4425dbeeebb7e41e$var$formatSeconds(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getSeconds(), p, 2);
}
function $4425dbeeebb7e41e$var$formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
}
function $4425dbeeebb7e41e$var$formatWeekNumberSunday(d, p) {
    return $4425dbeeebb7e41e$var$pad((0, $deUco.timeSunday).count((0, $4gydF.timeYear)(d) - 1, d), p, 2);
}
function $4425dbeeebb7e41e$var$dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? (0, $deUco.timeThursday)(d) : (0, $deUco.timeThursday).ceil(d);
}
function $4425dbeeebb7e41e$var$formatWeekNumberISO(d, p) {
    d = $4425dbeeebb7e41e$var$dISO(d);
    return $4425dbeeebb7e41e$var$pad((0, $deUco.timeThursday).count((0, $4gydF.timeYear)(d), d) + ((0, $4gydF.timeYear)(d).getDay() === 4), p, 2);
}
function $4425dbeeebb7e41e$var$formatWeekdayNumberSunday(d) {
    return d.getDay();
}
function $4425dbeeebb7e41e$var$formatWeekNumberMonday(d, p) {
    return $4425dbeeebb7e41e$var$pad((0, $deUco.timeMonday).count((0, $4gydF.timeYear)(d) - 1, d), p, 2);
}
function $4425dbeeebb7e41e$var$formatYear(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getFullYear() % 100, p, 2);
}
function $4425dbeeebb7e41e$var$formatYearISO(d, p) {
    d = $4425dbeeebb7e41e$var$dISO(d);
    return $4425dbeeebb7e41e$var$pad(d.getFullYear() % 100, p, 2);
}
function $4425dbeeebb7e41e$var$formatFullYear(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getFullYear() % 10000, p, 4);
}
function $4425dbeeebb7e41e$var$formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? (0, $deUco.timeThursday)(d) : (0, $deUco.timeThursday).ceil(d);
    return $4425dbeeebb7e41e$var$pad(d.getFullYear() % 10000, p, 4);
}
function $4425dbeeebb7e41e$var$formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + $4425dbeeebb7e41e$var$pad(z / 60 | 0, "0", 2) + $4425dbeeebb7e41e$var$pad(z % 60, "0", 2);
}
function $4425dbeeebb7e41e$var$formatUTCDayOfMonth(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCDate(), p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCHour24(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCHours(), p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCHour12(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCHours() % 12 || 12, p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCDayOfYear(d, p) {
    return $4425dbeeebb7e41e$var$pad(1 + (0, $fFQQk.utcDay).count((0, $4gydF.utcYear)(d), d), p, 3);
}
function $4425dbeeebb7e41e$var$formatUTCMilliseconds(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCMilliseconds(), p, 3);
}
function $4425dbeeebb7e41e$var$formatUTCMicroseconds(d, p) {
    return $4425dbeeebb7e41e$var$formatUTCMilliseconds(d, p) + "000";
}
function $4425dbeeebb7e41e$var$formatUTCMonthNumber(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCMonth() + 1, p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCMinutes(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCMinutes(), p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCSeconds(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCSeconds(), p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
}
function $4425dbeeebb7e41e$var$formatUTCWeekNumberSunday(d, p) {
    return $4425dbeeebb7e41e$var$pad((0, $deUco.utcSunday).count((0, $4gydF.utcYear)(d) - 1, d), p, 2);
}
function $4425dbeeebb7e41e$var$UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? (0, $deUco.utcThursday)(d) : (0, $deUco.utcThursday).ceil(d);
}
function $4425dbeeebb7e41e$var$formatUTCWeekNumberISO(d, p) {
    d = $4425dbeeebb7e41e$var$UTCdISO(d);
    return $4425dbeeebb7e41e$var$pad((0, $deUco.utcThursday).count((0, $4gydF.utcYear)(d), d) + ((0, $4gydF.utcYear)(d).getUTCDay() === 4), p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
}
function $4425dbeeebb7e41e$var$formatUTCWeekNumberMonday(d, p) {
    return $4425dbeeebb7e41e$var$pad((0, $deUco.utcMonday).count((0, $4gydF.utcYear)(d) - 1, d), p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCYear(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCFullYear() % 100, p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCYearISO(d, p) {
    d = $4425dbeeebb7e41e$var$UTCdISO(d);
    return $4425dbeeebb7e41e$var$pad(d.getUTCFullYear() % 100, p, 2);
}
function $4425dbeeebb7e41e$var$formatUTCFullYear(d, p) {
    return $4425dbeeebb7e41e$var$pad(d.getUTCFullYear() % 10000, p, 4);
}
function $4425dbeeebb7e41e$var$formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? (0, $deUco.utcThursday)(d) : (0, $deUco.utcThursday).ceil(d);
    return $4425dbeeebb7e41e$var$pad(d.getUTCFullYear() % 10000, p, 4);
}
function $4425dbeeebb7e41e$var$formatUTCZone() {
    return "+0000";
}
function $4425dbeeebb7e41e$var$formatLiteralPercent() {
    return "%";
}
function $4425dbeeebb7e41e$var$formatUnixTimestamp(d) {
    return +d;
}
function $4425dbeeebb7e41e$var$formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000);
}

});



parcelRegister("bI7tl", function(module, exports) {

$parcel$export(module.exports, "Buffer", () => $8869999d0b4c2cc1$export$a143d493d941bafc, (v) => $8869999d0b4c2cc1$export$a143d493d941bafc = v);
$parcel$export(module.exports, "INSPECT_MAX_BYTES", () => $8869999d0b4c2cc1$export$f99ded8fe4b79145, (v) => $8869999d0b4c2cc1$export$f99ded8fe4b79145 = v);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ var $8869999d0b4c2cc1$export$a143d493d941bafc;
var $8869999d0b4c2cc1$export$e4cf37d7f6fb9e0a;
var $8869999d0b4c2cc1$export$f99ded8fe4b79145;
var $8869999d0b4c2cc1$export$599f31c3813fae4d;
"use strict";

var $fZRgt = parcelRequire("fZRgt");

var $lLBE5 = parcelRequire("lLBE5");
const $8869999d0b4c2cc1$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$8869999d0b4c2cc1$export$a143d493d941bafc = $8869999d0b4c2cc1$var$Buffer;
$8869999d0b4c2cc1$export$e4cf37d7f6fb9e0a = $8869999d0b4c2cc1$var$SlowBuffer;
$8869999d0b4c2cc1$export$f99ded8fe4b79145 = 50;
const $8869999d0b4c2cc1$var$K_MAX_LENGTH = 0x7fffffff;
$8869999d0b4c2cc1$export$599f31c3813fae4d = $8869999d0b4c2cc1$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $8869999d0b4c2cc1$var$Buffer.TYPED_ARRAY_SUPPORT = $8869999d0b4c2cc1$var$typedArraySupport();
if (!$8869999d0b4c2cc1$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $8869999d0b4c2cc1$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($8869999d0b4c2cc1$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($8869999d0b4c2cc1$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $8869999d0b4c2cc1$var$createBuffer(length) {
    if (length > $8869999d0b4c2cc1$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $8869999d0b4c2cc1$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $8869999d0b4c2cc1$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $8869999d0b4c2cc1$var$allocUnsafe(arg);
    }
    return $8869999d0b4c2cc1$var$from(arg, encodingOrOffset, length);
}
$8869999d0b4c2cc1$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $8869999d0b4c2cc1$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $8869999d0b4c2cc1$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $8869999d0b4c2cc1$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($8869999d0b4c2cc1$var$isInstance(value, ArrayBuffer) || value && $8869999d0b4c2cc1$var$isInstance(value.buffer, ArrayBuffer)) return $8869999d0b4c2cc1$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($8869999d0b4c2cc1$var$isInstance(value, SharedArrayBuffer) || value && $8869999d0b4c2cc1$var$isInstance(value.buffer, SharedArrayBuffer))) return $8869999d0b4c2cc1$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $8869999d0b4c2cc1$var$Buffer.from(valueOf, encodingOrOffset, length);
    const b = $8869999d0b4c2cc1$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $8869999d0b4c2cc1$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $8869999d0b4c2cc1$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $8869999d0b4c2cc1$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($8869999d0b4c2cc1$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($8869999d0b4c2cc1$var$Buffer, Uint8Array);
function $8869999d0b4c2cc1$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $8869999d0b4c2cc1$var$alloc(size, fill, encoding) {
    $8869999d0b4c2cc1$var$assertSize(size);
    if (size <= 0) return $8869999d0b4c2cc1$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $8869999d0b4c2cc1$var$createBuffer(size).fill(fill, encoding) : $8869999d0b4c2cc1$var$createBuffer(size).fill(fill);
    return $8869999d0b4c2cc1$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $8869999d0b4c2cc1$var$Buffer.alloc = function(size, fill, encoding) {
    return $8869999d0b4c2cc1$var$alloc(size, fill, encoding);
};
function $8869999d0b4c2cc1$var$allocUnsafe(size) {
    $8869999d0b4c2cc1$var$assertSize(size);
    return $8869999d0b4c2cc1$var$createBuffer(size < 0 ? 0 : $8869999d0b4c2cc1$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $8869999d0b4c2cc1$var$Buffer.allocUnsafe = function(size) {
    return $8869999d0b4c2cc1$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $8869999d0b4c2cc1$var$Buffer.allocUnsafeSlow = function(size) {
    return $8869999d0b4c2cc1$var$allocUnsafe(size);
};
function $8869999d0b4c2cc1$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$8869999d0b4c2cc1$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = $8869999d0b4c2cc1$var$byteLength(string, encoding) | 0;
    let buf = $8869999d0b4c2cc1$var$createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $8869999d0b4c2cc1$var$fromArrayLike(array) {
    const length = array.length < 0 ? 0 : $8869999d0b4c2cc1$var$checked(array.length) | 0;
    const buf = $8869999d0b4c2cc1$var$createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $8869999d0b4c2cc1$var$fromArrayView(arrayView) {
    if ($8869999d0b4c2cc1$var$isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return $8869999d0b4c2cc1$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $8869999d0b4c2cc1$var$fromArrayLike(arrayView);
}
function $8869999d0b4c2cc1$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $8869999d0b4c2cc1$var$Buffer.prototype);
    return buf;
}
function $8869999d0b4c2cc1$var$fromObject(obj) {
    if ($8869999d0b4c2cc1$var$Buffer.isBuffer(obj)) {
        const len = $8869999d0b4c2cc1$var$checked(obj.length) | 0;
        const buf = $8869999d0b4c2cc1$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $8869999d0b4c2cc1$var$numberIsNaN(obj.length)) return $8869999d0b4c2cc1$var$createBuffer(0);
        return $8869999d0b4c2cc1$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $8869999d0b4c2cc1$var$fromArrayLike(obj.data);
}
function $8869999d0b4c2cc1$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $8869999d0b4c2cc1$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $8869999d0b4c2cc1$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $8869999d0b4c2cc1$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $8869999d0b4c2cc1$var$Buffer.alloc(+length);
}
$8869999d0b4c2cc1$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $8869999d0b4c2cc1$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$8869999d0b4c2cc1$var$Buffer.compare = function compare(a, b) {
    if ($8869999d0b4c2cc1$var$isInstance(a, Uint8Array)) a = $8869999d0b4c2cc1$var$Buffer.from(a, a.offset, a.byteLength);
    if ($8869999d0b4c2cc1$var$isInstance(b, Uint8Array)) b = $8869999d0b4c2cc1$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(a) || !$8869999d0b4c2cc1$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$8869999d0b4c2cc1$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$8869999d0b4c2cc1$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $8869999d0b4c2cc1$var$Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = $8869999d0b4c2cc1$var$Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if ($8869999d0b4c2cc1$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(buf)) buf = $8869999d0b4c2cc1$var$Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $8869999d0b4c2cc1$var$byteLength(string, encoding) {
    if ($8869999d0b4c2cc1$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $8869999d0b4c2cc1$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $8869999d0b4c2cc1$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $8869999d0b4c2cc1$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $8869999d0b4c2cc1$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$8869999d0b4c2cc1$var$Buffer.byteLength = $8869999d0b4c2cc1$var$byteLength;
function $8869999d0b4c2cc1$var$slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $8869999d0b4c2cc1$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $8869999d0b4c2cc1$var$utf8Slice(this, start, end);
        case "ascii":
            return $8869999d0b4c2cc1$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $8869999d0b4c2cc1$var$latin1Slice(this, start, end);
        case "base64":
            return $8869999d0b4c2cc1$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $8869999d0b4c2cc1$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$8869999d0b4c2cc1$var$Buffer.prototype._isBuffer = true;
function $8869999d0b4c2cc1$var$swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$8869999d0b4c2cc1$var$Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)$8869999d0b4c2cc1$var$swap(this, i, i + 1);
    return this;
};
$8869999d0b4c2cc1$var$Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        $8869999d0b4c2cc1$var$swap(this, i, i + 3);
        $8869999d0b4c2cc1$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$8869999d0b4c2cc1$var$Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        $8869999d0b4c2cc1$var$swap(this, i, i + 7);
        $8869999d0b4c2cc1$var$swap(this, i + 1, i + 6);
        $8869999d0b4c2cc1$var$swap(this, i + 2, i + 5);
        $8869999d0b4c2cc1$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$8869999d0b4c2cc1$var$Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $8869999d0b4c2cc1$var$utf8Slice(this, 0, length);
    return $8869999d0b4c2cc1$var$slowToString.apply(this, arguments);
};
$8869999d0b4c2cc1$var$Buffer.prototype.toLocaleString = $8869999d0b4c2cc1$var$Buffer.prototype.toString;
$8869999d0b4c2cc1$var$Buffer.prototype.equals = function equals(b) {
    if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $8869999d0b4c2cc1$var$Buffer.compare(this, b) === 0;
};
$8869999d0b4c2cc1$var$Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = $8869999d0b4c2cc1$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($8869999d0b4c2cc1$var$customInspectSymbol) $8869999d0b4c2cc1$var$Buffer.prototype[$8869999d0b4c2cc1$var$customInspectSymbol] = $8869999d0b4c2cc1$var$Buffer.prototype.inspect;
$8869999d0b4c2cc1$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($8869999d0b4c2cc1$var$isInstance(target, Uint8Array)) target = $8869999d0b4c2cc1$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $8869999d0b4c2cc1$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($8869999d0b4c2cc1$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $8869999d0b4c2cc1$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($8869999d0b4c2cc1$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $8869999d0b4c2cc1$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $8869999d0b4c2cc1$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $8869999d0b4c2cc1$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$8869999d0b4c2cc1$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$8869999d0b4c2cc1$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $8869999d0b4c2cc1$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$8869999d0b4c2cc1$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $8869999d0b4c2cc1$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $8869999d0b4c2cc1$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($8869999d0b4c2cc1$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $8869999d0b4c2cc1$var$utf8Write(buf, string, offset, length) {
    return $8869999d0b4c2cc1$var$blitBuffer($8869999d0b4c2cc1$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $8869999d0b4c2cc1$var$asciiWrite(buf, string, offset, length) {
    return $8869999d0b4c2cc1$var$blitBuffer($8869999d0b4c2cc1$var$asciiToBytes(string), buf, offset, length);
}
function $8869999d0b4c2cc1$var$base64Write(buf, string, offset, length) {
    return $8869999d0b4c2cc1$var$blitBuffer($8869999d0b4c2cc1$var$base64ToBytes(string), buf, offset, length);
}
function $8869999d0b4c2cc1$var$ucs2Write(buf, string, offset, length) {
    return $8869999d0b4c2cc1$var$blitBuffer($8869999d0b4c2cc1$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$8869999d0b4c2cc1$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $8869999d0b4c2cc1$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $8869999d0b4c2cc1$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $8869999d0b4c2cc1$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $8869999d0b4c2cc1$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $8869999d0b4c2cc1$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$8869999d0b4c2cc1$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $8869999d0b4c2cc1$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $fZRgt.fromByteArray(buf);
    else return $fZRgt.fromByteArray(buf.slice(start, end));
}
function $8869999d0b4c2cc1$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $8869999d0b4c2cc1$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const $8869999d0b4c2cc1$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $8869999d0b4c2cc1$var$decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= $8869999d0b4c2cc1$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $8869999d0b4c2cc1$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $8869999d0b4c2cc1$var$asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $8869999d0b4c2cc1$var$latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $8869999d0b4c2cc1$var$hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += $8869999d0b4c2cc1$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $8869999d0b4c2cc1$var$utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$8869999d0b4c2cc1$var$Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $8869999d0b4c2cc1$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $8869999d0b4c2cc1$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$8869999d0b4c2cc1$var$Buffer.prototype.readUintLE = $8869999d0b4c2cc1$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readUintBE = $8869999d0b4c2cc1$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readUint8 = $8869999d0b4c2cc1$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$8869999d0b4c2cc1$var$Buffer.prototype.readUint16LE = $8869999d0b4c2cc1$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readUint16BE = $8869999d0b4c2cc1$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$8869999d0b4c2cc1$var$Buffer.prototype.readUint32LE = $8869999d0b4c2cc1$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readUint32BE = $8869999d0b4c2cc1$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$8869999d0b4c2cc1$var$Buffer.prototype.readBigUInt64LE = $8869999d0b4c2cc1$var$defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    $8869999d0b4c2cc1$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $8869999d0b4c2cc1$var$boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
$8869999d0b4c2cc1$var$Buffer.prototype.readBigUInt64BE = $8869999d0b4c2cc1$var$defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    $8869999d0b4c2cc1$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $8869999d0b4c2cc1$var$boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
$8869999d0b4c2cc1$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$8869999d0b4c2cc1$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$8869999d0b4c2cc1$var$Buffer.prototype.readBigInt64LE = $8869999d0b4c2cc1$var$defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    $8869999d0b4c2cc1$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $8869999d0b4c2cc1$var$boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
$8869999d0b4c2cc1$var$Buffer.prototype.readBigInt64BE = $8869999d0b4c2cc1$var$defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    $8869999d0b4c2cc1$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $8869999d0b4c2cc1$var$boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
$8869999d0b4c2cc1$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 4, this.length);
    return $lLBE5.read(this, offset, true, 23, 4);
};
$8869999d0b4c2cc1$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 4, this.length);
    return $lLBE5.read(this, offset, false, 23, 4);
};
$8869999d0b4c2cc1$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 8, this.length);
    return $lLBE5.read(this, offset, true, 52, 8);
};
$8869999d0b4c2cc1$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkOffset(offset, 8, this.length);
    return $lLBE5.read(this, offset, false, 52, 8);
};
function $8869999d0b4c2cc1$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$8869999d0b4c2cc1$var$Buffer.prototype.writeUintLE = $8869999d0b4c2cc1$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $8869999d0b4c2cc1$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeUintBE = $8869999d0b4c2cc1$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $8869999d0b4c2cc1$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeUint8 = $8869999d0b4c2cc1$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeUint16LE = $8869999d0b4c2cc1$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeUint16BE = $8869999d0b4c2cc1$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeUint32LE = $8869999d0b4c2cc1$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeUint32BE = $8869999d0b4c2cc1$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $8869999d0b4c2cc1$var$wrtBigUInt64LE(buf, value, offset, min, max) {
    $8869999d0b4c2cc1$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function $8869999d0b4c2cc1$var$wrtBigUInt64BE(buf, value, offset, min, max) {
    $8869999d0b4c2cc1$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
$8869999d0b4c2cc1$var$Buffer.prototype.writeBigUInt64LE = $8869999d0b4c2cc1$var$defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return $8869999d0b4c2cc1$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$8869999d0b4c2cc1$var$Buffer.prototype.writeBigUInt64BE = $8869999d0b4c2cc1$var$defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return $8869999d0b4c2cc1$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$8869999d0b4c2cc1$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $8869999d0b4c2cc1$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $8869999d0b4c2cc1$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeBigInt64LE = $8869999d0b4c2cc1$var$defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return $8869999d0b4c2cc1$var$wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
$8869999d0b4c2cc1$var$Buffer.prototype.writeBigInt64BE = $8869999d0b4c2cc1$var$defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return $8869999d0b4c2cc1$var$wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function $8869999d0b4c2cc1$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $8869999d0b4c2cc1$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $lLBE5.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$8869999d0b4c2cc1$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $8869999d0b4c2cc1$var$writeFloat(this, value, offset, true, noAssert);
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $8869999d0b4c2cc1$var$writeFloat(this, value, offset, false, noAssert);
};
function $8869999d0b4c2cc1$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $8869999d0b4c2cc1$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $lLBE5.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$8869999d0b4c2cc1$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $8869999d0b4c2cc1$var$writeDouble(this, value, offset, true, noAssert);
};
$8869999d0b4c2cc1$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $8869999d0b4c2cc1$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$8869999d0b4c2cc1$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$8869999d0b4c2cc1$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$8869999d0b4c2cc1$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$8869999d0b4c2cc1$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = $8869999d0b4c2cc1$var$Buffer.isBuffer(val) ? val : $8869999d0b4c2cc1$var$Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const $8869999d0b4c2cc1$var$errors = {};
function $8869999d0b4c2cc1$var$E(sym, getMessage, Base) {
    $8869999d0b4c2cc1$var$errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
$8869999d0b4c2cc1$var$E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
$8869999d0b4c2cc1$var$E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
$8869999d0b4c2cc1$var$E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = $8869999d0b4c2cc1$var$addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = $8869999d0b4c2cc1$var$addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function $8869999d0b4c2cc1$var$addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function $8869999d0b4c2cc1$var$checkBounds(buf, offset, byteLength) {
    $8869999d0b4c2cc1$var$validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $8869999d0b4c2cc1$var$boundsError(offset, buf.length - (byteLength + 1));
}
function $8869999d0b4c2cc1$var$checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new $8869999d0b4c2cc1$var$errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    $8869999d0b4c2cc1$var$checkBounds(buf, offset, byteLength);
}
function $8869999d0b4c2cc1$var$validateNumber(value, name) {
    if (typeof value !== "number") throw new $8869999d0b4c2cc1$var$errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function $8869999d0b4c2cc1$var$boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        $8869999d0b4c2cc1$var$validateNumber(value, type);
        throw new $8869999d0b4c2cc1$var$errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new $8869999d0b4c2cc1$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new $8869999d0b4c2cc1$var$errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const $8869999d0b4c2cc1$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $8869999d0b4c2cc1$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($8869999d0b4c2cc1$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $8869999d0b4c2cc1$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $8869999d0b4c2cc1$var$asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $8869999d0b4c2cc1$var$utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $8869999d0b4c2cc1$var$base64ToBytes(str) {
    return $fZRgt.toByteArray($8869999d0b4c2cc1$var$base64clean(str));
}
function $8869999d0b4c2cc1$var$blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $8869999d0b4c2cc1$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $8869999d0b4c2cc1$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const $8869999d0b4c2cc1$var$hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function $8869999d0b4c2cc1$var$defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? $8869999d0b4c2cc1$var$BufferBigIntNotDefined : fn;
}
function $8869999d0b4c2cc1$var$BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

});
parcelRegister("fZRgt", function(module, exports) {

$parcel$export(module.exports, "toByteArray", () => $ba55dece202cf433$export$d622b2ad8d90c771, (v) => $ba55dece202cf433$export$d622b2ad8d90c771 = v);
$parcel$export(module.exports, "fromByteArray", () => $ba55dece202cf433$export$6100ba28696e12de, (v) => $ba55dece202cf433$export$6100ba28696e12de = v);
var $ba55dece202cf433$export$a48f0734ac7c2329;
var $ba55dece202cf433$export$d622b2ad8d90c771;
var $ba55dece202cf433$export$6100ba28696e12de;
"use strict";
$ba55dece202cf433$export$a48f0734ac7c2329 = $ba55dece202cf433$var$byteLength;
$ba55dece202cf433$export$d622b2ad8d90c771 = $ba55dece202cf433$var$toByteArray;
$ba55dece202cf433$export$6100ba28696e12de = $ba55dece202cf433$var$fromByteArray;
var $ba55dece202cf433$var$lookup = [];
var $ba55dece202cf433$var$revLookup = [];
var $ba55dece202cf433$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $ba55dece202cf433$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $ba55dece202cf433$var$i = 0, $ba55dece202cf433$var$len = $ba55dece202cf433$var$code.length; $ba55dece202cf433$var$i < $ba55dece202cf433$var$len; ++$ba55dece202cf433$var$i){
    $ba55dece202cf433$var$lookup[$ba55dece202cf433$var$i] = $ba55dece202cf433$var$code[$ba55dece202cf433$var$i];
    $ba55dece202cf433$var$revLookup[$ba55dece202cf433$var$code.charCodeAt($ba55dece202cf433$var$i)] = $ba55dece202cf433$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$ba55dece202cf433$var$revLookup["-".charCodeAt(0)] = 62;
$ba55dece202cf433$var$revLookup["_".charCodeAt(0)] = 63;
function $ba55dece202cf433$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $ba55dece202cf433$var$byteLength(b64) {
    var lens = $ba55dece202cf433$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $ba55dece202cf433$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $ba55dece202cf433$var$toByteArray(b64) {
    var tmp;
    var lens = $ba55dece202cf433$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $ba55dece202cf433$var$Arr($ba55dece202cf433$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $ba55dece202cf433$var$revLookup[b64.charCodeAt(i)] << 18 | $ba55dece202cf433$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $ba55dece202cf433$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $ba55dece202cf433$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $ba55dece202cf433$var$revLookup[b64.charCodeAt(i)] << 2 | $ba55dece202cf433$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $ba55dece202cf433$var$revLookup[b64.charCodeAt(i)] << 10 | $ba55dece202cf433$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $ba55dece202cf433$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $ba55dece202cf433$var$tripletToBase64(num) {
    return $ba55dece202cf433$var$lookup[num >> 18 & 0x3F] + $ba55dece202cf433$var$lookup[num >> 12 & 0x3F] + $ba55dece202cf433$var$lookup[num >> 6 & 0x3F] + $ba55dece202cf433$var$lookup[num & 0x3F];
}
function $ba55dece202cf433$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($ba55dece202cf433$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $ba55dece202cf433$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($ba55dece202cf433$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($ba55dece202cf433$var$lookup[tmp >> 2] + $ba55dece202cf433$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($ba55dece202cf433$var$lookup[tmp >> 10] + $ba55dece202cf433$var$lookup[tmp >> 4 & 0x3F] + $ba55dece202cf433$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

});

parcelRegister("lLBE5", function(module, exports) {

$parcel$export(module.exports, "read", () => $fd8b3063e0d948eb$export$aafa59e2e03f2942, (v) => $fd8b3063e0d948eb$export$aafa59e2e03f2942 = v);
$parcel$export(module.exports, "write", () => $fd8b3063e0d948eb$export$68d8715fc104d294, (v) => $fd8b3063e0d948eb$export$68d8715fc104d294 = v);
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $fd8b3063e0d948eb$export$aafa59e2e03f2942;
var $fd8b3063e0d948eb$export$68d8715fc104d294;
$fd8b3063e0d948eb$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$fd8b3063e0d948eb$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});




parcelRegister("5iIW5", function(module, exports) {

$parcel$export(module.exports, "aggregate", () => Aggregate);
$parcel$export(module.exports, "bin", () => Bin);
$parcel$export(module.exports, "collect", () => Collect);
$parcel$export(module.exports, "compare", () => Compare);
$parcel$export(module.exports, "countpattern", () => CountPattern);
$parcel$export(module.exports, "cross", () => Cross);
$parcel$export(module.exports, "density", () => Density);
$parcel$export(module.exports, "dotbin", () => DotBin);
$parcel$export(module.exports, "expression", () => Expression);
$parcel$export(module.exports, "extent", () => Extent);
$parcel$export(module.exports, "subflow", () => Subflow);
$parcel$export(module.exports, "facet", () => Facet);
$parcel$export(module.exports, "field", () => Field);
$parcel$export(module.exports, "filter", () => Filter);
$parcel$export(module.exports, "flatten", () => Flatten);
$parcel$export(module.exports, "fold", () => Fold);
$parcel$export(module.exports, "formula", () => Formula);
$parcel$export(module.exports, "generate", () => Generate);
$parcel$export(module.exports, "impute", () => Impute);
$parcel$export(module.exports, "joinaggregate", () => JoinAggregate);
$parcel$export(module.exports, "kde", () => KDE);
$parcel$export(module.exports, "key", () => Key);
$parcel$export(module.exports, "load", () => Load);
$parcel$export(module.exports, "lookup", () => Lookup);
$parcel$export(module.exports, "multiextent", () => MultiExtent);
$parcel$export(module.exports, "multivalues", () => MultiValues);
$parcel$export(module.exports, "params", () => Params);
$parcel$export(module.exports, "pivot", () => Pivot);
$parcel$export(module.exports, "prefacet", () => PreFacet);
$parcel$export(module.exports, "project", () => Project);
$parcel$export(module.exports, "proxy", () => Proxy);
$parcel$export(module.exports, "quantile", () => Quantile);
$parcel$export(module.exports, "relay", () => Relay);
$parcel$export(module.exports, "sample", () => Sample);
$parcel$export(module.exports, "sequence", () => Sequence);
$parcel$export(module.exports, "sieve", () => Sieve);
$parcel$export(module.exports, "timeunit", () => TimeUnit);
$parcel$export(module.exports, "tupleindex", () => TupleIndex);
$parcel$export(module.exports, "values", () => Values);
$parcel$export(module.exports, "window", () => Window);

var $4SWbq = parcelRequire("4SWbq");

var $4jOgW = parcelRequire("4jOgW");

var $7Par0 = parcelRequire("7Par0");

var $bytjh = parcelRequire("bytjh");
var $cgvXK = parcelRequire("cgvXK");
var $6ZzLU = parcelRequire("6ZzLU");
var $fExah = parcelRequire("fExah");
var $iUsSy = parcelRequire("iUsSy");
var $apu36 = parcelRequire("apu36");

var $i7MAj = parcelRequire("i7MAj");
function multikey(f) {
    return (x)=>{
        const n = f.length;
        let i = 1, k = String(f[0](x));
        for(; i < n; ++i)k += "|" + f[i](x);
        return k;
    };
}
function groupkey(fields) {
    return !fields || !fields.length ? function() {
        return "";
    } : fields.length === 1 ? fields[0] : multikey(fields);
}
function measureName(op, field, as) {
    return as || op + (!field ? "" : "_" + field);
}
const noop = ()=>{};
const base_op = {
    init: noop,
    add: noop,
    rem: noop,
    idx: 0
};
const AggregateOps = {
    values: {
        init: (m)=>m.cell.store = true,
        value: (m)=>m.cell.data.values(),
        idx: -1
    },
    count: {
        value: (m)=>m.cell.num
    },
    __count__: {
        value: (m)=>m.missing + m.valid
    },
    missing: {
        value: (m)=>m.missing
    },
    valid: {
        value: (m)=>m.valid
    },
    sum: {
        init: (m)=>m.sum = 0,
        value: (m)=>m.sum,
        add: (m, v)=>m.sum += +v,
        rem: (m, v)=>m.sum -= v
    },
    product: {
        init: (m)=>m.product = 1,
        value: (m)=>m.valid ? m.product : undefined,
        add: (m, v)=>m.product *= v,
        rem: (m, v)=>m.product /= v
    },
    mean: {
        init: (m)=>m.mean = 0,
        value: (m)=>m.valid ? m.mean : undefined,
        add: (m, v)=>(m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),
        rem: (m, v)=>(m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)
    },
    average: {
        value: (m)=>m.valid ? m.mean : undefined,
        req: [
            "mean"
        ],
        idx: 1
    },
    variance: {
        init: (m)=>m.dev = 0,
        value: (m)=>m.valid > 1 ? m.dev / (m.valid - 1) : undefined,
        add: (m, v)=>m.dev += m.mean_d * (v - m.mean),
        rem: (m, v)=>m.dev -= m.mean_d * (v - m.mean),
        req: [
            "mean"
        ],
        idx: 1
    },
    variancep: {
        value: (m)=>m.valid > 1 ? m.dev / m.valid : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    stdev: {
        value: (m)=>m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    stdevp: {
        value: (m)=>m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    stderr: {
        value: (m)=>m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,
        req: [
            "variance"
        ],
        idx: 2
    },
    distinct: {
        value: (m)=>m.cell.data.distinct(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    ci0: {
        value: (m)=>m.cell.data.ci0(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    ci1: {
        value: (m)=>m.cell.data.ci1(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    median: {
        value: (m)=>m.cell.data.q2(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    q1: {
        value: (m)=>m.cell.data.q1(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    q3: {
        value: (m)=>m.cell.data.q3(m.get),
        req: [
            "values"
        ],
        idx: 3
    },
    min: {
        init: (m)=>m.min = undefined,
        value: (m)=>m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,
        add: (m, v)=>{
            if (v < m.min || m.min === undefined) m.min = v;
        },
        rem: (m, v)=>{
            if (v <= m.min) m.min = NaN;
        },
        req: [
            "values"
        ],
        idx: 4
    },
    max: {
        init: (m)=>m.max = undefined,
        value: (m)=>m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,
        add: (m, v)=>{
            if (v > m.max || m.max === undefined) m.max = v;
        },
        rem: (m, v)=>{
            if (v >= m.max) m.max = NaN;
        },
        req: [
            "values"
        ],
        idx: 4
    },
    argmin: {
        init: (m)=>m.argmin = undefined,
        value: (m)=>m.argmin || m.cell.data.argmin(m.get),
        add: (m, v, t)=>{
            if (v < m.min) m.argmin = t;
        },
        rem: (m, v)=>{
            if (v <= m.min) m.argmin = undefined;
        },
        req: [
            "min",
            "values"
        ],
        idx: 3
    },
    argmax: {
        init: (m)=>m.argmax = undefined,
        value: (m)=>m.argmax || m.cell.data.argmax(m.get),
        add: (m, v, t)=>{
            if (v > m.max) m.argmax = t;
        },
        rem: (m, v)=>{
            if (v >= m.max) m.argmax = undefined;
        },
        req: [
            "max",
            "values"
        ],
        idx: 3
    }
};
const ValidAggregateOps = Object.keys(AggregateOps).filter((d)=>d !== "__count__");
function measure(key, value) {
    return (out)=>(0, $4SWbq.extend)({
            name: key,
            out: out || key
        }, base_op, value);
}
[
    ...ValidAggregateOps,
    "__count__"
].forEach((key)=>{
    AggregateOps[key] = measure(key, AggregateOps[key]);
});
function createMeasure(op, name) {
    return AggregateOps[op](name);
}
function compareIndex(a, b) {
    return a.idx - b.idx;
}
function resolve(agg) {
    const map = {};
    agg.forEach((a)=>map[a.name] = a);
    const getreqs = (a)=>{
        if (!a.req) return;
        a.req.forEach((key)=>{
            if (!map[key]) getreqs(map[key] = AggregateOps[key]());
        });
    };
    agg.forEach(getreqs);
    return Object.values(map).sort(compareIndex);
}
function init() {
    this.valid = 0;
    this.missing = 0;
    this._ops.forEach((op)=>op.init(this));
}
function add(v, t) {
    if (v == null || v === "") {
        ++this.missing;
        return;
    }
    if (v !== v) return;
    ++this.valid;
    this._ops.forEach((op)=>op.add(this, v, t));
}
function rem(v, t) {
    if (v == null || v === "") {
        --this.missing;
        return;
    }
    if (v !== v) return;
    --this.valid;
    this._ops.forEach((op)=>op.rem(this, v, t));
}
function set(t) {
    this._out.forEach((op)=>t[op.out] = op.value(this));
    return t;
}
function compileMeasures(agg, field) {
    const get = field || (0, $4SWbq.identity), ops = resolve(agg), out = agg.slice().sort(compareIndex);
    function ctr(cell) {
        this._ops = ops;
        this._out = out;
        this.cell = cell;
        this.init();
    }
    ctr.prototype.init = init;
    ctr.prototype.add = add;
    ctr.prototype.rem = rem;
    ctr.prototype.set = set;
    ctr.prototype.get = get;
    ctr.fields = agg.map((op)=>op.out);
    return ctr;
}
function TupleStore(key) {
    this._key = key ? (0, $4SWbq.field)(key) : (0, $4jOgW.tupleid);
    this.reset();
}
const prototype$1 = TupleStore.prototype;
prototype$1.reset = function() {
    this._add = [];
    this._rem = [];
    this._ext = null;
    this._get = null;
    this._q = null;
};
prototype$1.add = function(v) {
    this._add.push(v);
};
prototype$1.rem = function(v) {
    this._rem.push(v);
};
prototype$1.values = function() {
    this._get = null;
    if (this._rem.length === 0) return this._add;
    const a = this._add, r = this._rem, k = this._key, n = a.length, m = r.length, x = Array(n - m), map = {};
    let i, j, v;
    // use unique key field to clear removed values
    for(i = 0; i < m; ++i)map[k(r[i])] = 1;
    for(i = 0, j = 0; i < n; ++i)if (map[k(v = a[i])]) map[k(v)] = 0;
    else x[j++] = v;
    this._rem = [];
    return this._add = x;
};
// memoizing statistics methods
prototype$1.distinct = function(get) {
    const v = this.values(), map = {};
    let n = v.length, count = 0, s;
    while(--n >= 0){
        s = get(v[n]) + "";
        if (!(0, $4SWbq.hasOwnProperty)(map, s)) {
            map[s] = 1;
            ++count;
        }
    }
    return count;
};
prototype$1.extent = function(get) {
    if (this._get !== get || !this._ext) {
        const v = this.values(), i = (0, $4SWbq.extentIndex)(v, get);
        this._ext = [
            v[i[0]],
            v[i[1]]
        ];
        this._get = get;
    }
    return this._ext;
};
prototype$1.argmin = function(get) {
    return this.extent(get)[0] || {};
};
prototype$1.argmax = function(get) {
    return this.extent(get)[1] || {};
};
prototype$1.min = function(get) {
    const m = this.extent(get)[0];
    return m != null ? get(m) : undefined;
};
prototype$1.max = function(get) {
    const m = this.extent(get)[1];
    return m != null ? get(m) : undefined;
};
prototype$1.quartile = function(get) {
    if (this._get !== get || !this._q) {
        this._q = (0, $7Par0.quartiles)(this.values(), get);
        this._get = get;
    }
    return this._q;
};
prototype$1.q1 = function(get) {
    return this.quartile(get)[0];
};
prototype$1.q2 = function(get) {
    return this.quartile(get)[1];
};
prototype$1.q3 = function(get) {
    return this.quartile(get)[2];
};
prototype$1.ci = function(get) {
    if (this._get !== get || !this._ci) {
        this._ci = (0, $7Par0.bootstrapCI)(this.values(), 1000, 0.05, get);
        this._get = get;
    }
    return this._ci;
};
prototype$1.ci0 = function(get) {
    return this.ci(get)[0];
};
prototype$1.ci1 = function(get) {
    return this.ci(get)[1];
};
/**
 * Group-by aggregation operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
 * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
 * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
 * @param {boolean} [params.cross=false] - A flag indicating that the full
 *   cross-product of groupby values should be generated, including empty cells.
 *   If true, the drop parameter is ignored and empty cells are retained.
 * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
 */ function Aggregate(params) {
    (0, $4jOgW.Transform).call(this, null, params);
    this._adds = []; // array of added output tuples
    this._mods = []; // array of modified output tuples
    this._alen = 0; // number of active added tuples
    this._mlen = 0; // number of active modified tuples
    this._drop = true; // should empty aggregation cells be removed
    this._cross = false; // produce full cross-product of group-by values
    this._dims = []; // group-by dimension accessors
    this._dnames = []; // group-by dimension names
    this._measures = []; // collection of aggregation monoids
    this._countOnly = false; // flag indicating only count aggregation
    this._counts = null; // collection of count fields
    this._prev = null; // previous aggregation cells
    this._inputs = null; // array of dependent input tuple field names
    this._outputs = null; // array of output tuple field names
}
Aggregate.Definition = {
    "type": "Aggregate",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "ops",
            "type": "enum",
            "array": true,
            "values": ValidAggregateOps
        },
        {
            "name": "fields",
            "type": "field",
            "null": true,
            "array": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        },
        {
            "name": "drop",
            "type": "boolean",
            "default": true
        },
        {
            "name": "cross",
            "type": "boolean",
            "default": false
        },
        {
            "name": "key",
            "type": "field"
        }
    ]
};
(0, $4SWbq.inherits)(Aggregate, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const aggr = this, out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), mod = _.modified();
        aggr.stamp = out.stamp;
        if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
            aggr._prev = aggr.value;
            aggr.value = mod ? aggr.init(_) : Object.create(null);
            pulse.visit(pulse.SOURCE, (t)=>aggr.add(t));
        } else {
            aggr.value = aggr.value || aggr.init(_);
            pulse.visit(pulse.REM, (t)=>aggr.rem(t));
            pulse.visit(pulse.ADD, (t)=>aggr.add(t));
        }
        // Indicate output fields and return aggregate tuples.
        out.modifies(aggr._outputs);
        // Should empty cells be dropped?
        aggr._drop = _.drop !== false;
        // If domain cross-product requested, generate empty cells as needed
        // and ensure that empty cells are not dropped
        if (_.cross && aggr._dims.length > 1) {
            aggr._drop = false;
            aggr.cross();
        }
        if (pulse.clean() && aggr._drop) out.clean(true).runAfter(()=>this.clean());
        return aggr.changes(out);
    },
    cross () {
        const aggr = this, curr = aggr.value, dims = aggr._dnames, vals = dims.map(()=>({})), n = dims.length;
        // collect all group-by domain values
        function collect(cells) {
            let key, i, t, v;
            for(key in cells){
                t = cells[key].tuple;
                for(i = 0; i < n; ++i)vals[i][v = t[dims[i]]] = v;
            }
        }
        collect(aggr._prev);
        collect(curr);
        // iterate over key cross-product, create cells as needed
        function generate(base, tuple, index) {
            const name = dims[index], v = vals[index++];
            for(const k in v){
                const key = base ? base + "|" + k : k;
                tuple[name] = v[k];
                if (index < n) generate(key, tuple, index);
                else if (!curr[key]) aggr.cell(key, tuple);
            }
        }
        generate("", {}, 0);
    },
    init (_) {
        // initialize input and output fields
        const inputs = this._inputs = [], outputs = this._outputs = [], inputMap = {};
        function inputVisit(get) {
            const fields = (0, $4SWbq.array)((0, $4SWbq.accessorFields)(get)), n = fields.length;
            let i = 0, f;
            for(; i < n; ++i)if (!inputMap[f = fields[i]]) {
                inputMap[f] = 1;
                inputs.push(f);
            }
        }
        // initialize group-by dimensions
        this._dims = (0, $4SWbq.array)(_.groupby);
        this._dnames = this._dims.map((d)=>{
            const dname = (0, $4SWbq.accessorName)(d);
            inputVisit(d);
            outputs.push(dname);
            return dname;
        });
        this.cellkey = _.key ? _.key : groupkey(this._dims);
        // initialize aggregate measures
        this._countOnly = true;
        this._counts = [];
        this._measures = [];
        const fields = _.fields || [
            null
        ], ops = _.ops || [
            "count"
        ], as = _.as || [], n = fields.length, map = {};
        let field, op, m, mname, outname, i;
        if (n !== ops.length) (0, $4SWbq.error)("Unmatched number of fields and aggregate ops.");
        for(i = 0; i < n; ++i){
            field = fields[i];
            op = ops[i];
            if (field == null && op !== "count") (0, $4SWbq.error)("Null aggregate field specified.");
            mname = (0, $4SWbq.accessorName)(field);
            outname = measureName(op, mname, as[i]);
            outputs.push(outname);
            if (op === "count") {
                this._counts.push(outname);
                continue;
            }
            m = map[mname];
            if (!m) {
                inputVisit(field);
                m = map[mname] = [];
                m.field = field;
                this._measures.push(m);
            }
            if (op !== "count") this._countOnly = false;
            m.push(createMeasure(op, outname));
        }
        this._measures = this._measures.map((m)=>compileMeasures(m, m.field));
        return Object.create(null); // aggregation cells (this.value)
    },
    // -- Cell Management -----
    cellkey: groupkey(),
    cell (key, t) {
        let cell = this.value[key];
        if (!cell) {
            cell = this.value[key] = this.newcell(key, t);
            this._adds[this._alen++] = cell;
        } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
            cell.stamp = this.stamp;
            this._adds[this._alen++] = cell;
        } else if (cell.stamp < this.stamp) {
            cell.stamp = this.stamp;
            this._mods[this._mlen++] = cell;
        }
        return cell;
    },
    newcell (key, t) {
        const cell = {
            key: key,
            num: 0,
            agg: null,
            tuple: this.newtuple(t, this._prev && this._prev[key]),
            stamp: this.stamp,
            store: false
        };
        if (!this._countOnly) {
            const measures = this._measures, n = measures.length;
            cell.agg = Array(n);
            for(let i = 0; i < n; ++i)cell.agg[i] = new measures[i](cell);
        }
        if (cell.store) cell.data = new TupleStore();
        return cell;
    },
    newtuple (t, p) {
        const names = this._dnames, dims = this._dims, n = dims.length, x = {};
        for(let i = 0; i < n; ++i)x[names[i]] = dims[i](t);
        return p ? (0, $4jOgW.replace)(p.tuple, x) : (0, $4jOgW.ingest)(x);
    },
    clean () {
        const cells = this.value;
        for(const key in cells)if (cells[key].num === 0) delete cells[key];
    },
    // -- Process Tuples -----
    add (t) {
        const key = this.cellkey(t), cell = this.cell(key, t);
        cell.num += 1;
        if (this._countOnly) return;
        if (cell.store) cell.data.add(t);
        const agg = cell.agg;
        for(let i = 0, n = agg.length; i < n; ++i)agg[i].add(agg[i].get(t), t);
    },
    rem (t) {
        const key = this.cellkey(t), cell = this.cell(key, t);
        cell.num -= 1;
        if (this._countOnly) return;
        if (cell.store) cell.data.rem(t);
        const agg = cell.agg;
        for(let i = 0, n = agg.length; i < n; ++i)agg[i].rem(agg[i].get(t), t);
    },
    celltuple (cell) {
        const tuple = cell.tuple, counts = this._counts;
        // consolidate stored values
        if (cell.store) cell.data.values();
        // update tuple properties
        for(let i = 0, n = counts.length; i < n; ++i)tuple[counts[i]] = cell.num;
        if (!this._countOnly) {
            const agg = cell.agg;
            for(let i = 0, n = agg.length; i < n; ++i)agg[i].set(tuple);
        }
        return tuple;
    },
    changes (out) {
        const adds = this._adds, mods = this._mods, prev = this._prev, drop = this._drop, add = out.add, rem = out.rem, mod = out.mod;
        let cell, key, i, n;
        if (prev) for(key in prev){
            cell = prev[key];
            if (!drop || cell.num) rem.push(cell.tuple);
        }
        for(i = 0, n = this._alen; i < n; ++i){
            add.push(this.celltuple(adds[i]));
            adds[i] = null; // for garbage collection
        }
        for(i = 0, n = this._mlen; i < n; ++i){
            cell = mods[i];
            (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
            mods[i] = null; // for garbage collection
        }
        this._alen = this._mlen = 0; // reset list of active cells
        this._prev = null;
        return out;
    }
});
// epsilon bias to offset floating point error (#1737)
const EPSILON$1 = 1e-14;
/**
 * Generates a binning function for discretizing data.
 * @constructor
 * @param {object} params - The parameters for this operator. The
 *   provided values should be valid options for the {@link bin} function.
 * @param {function(object): *} params.field - The data field to bin.
 */ function Bin(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
Bin.Definition = {
    "type": "Bin",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "interval",
            "type": "boolean",
            "default": true
        },
        {
            "name": "anchor",
            "type": "number"
        },
        {
            "name": "maxbins",
            "type": "number",
            "default": 20
        },
        {
            "name": "base",
            "type": "number",
            "default": 10
        },
        {
            "name": "divide",
            "type": "number",
            "array": true,
            "default": [
                5,
                2
            ]
        },
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2,
            "required": true
        },
        {
            "name": "span",
            "type": "number"
        },
        {
            "name": "step",
            "type": "number"
        },
        {
            "name": "steps",
            "type": "number",
            "array": true
        },
        {
            "name": "minstep",
            "type": "number",
            "default": 0
        },
        {
            "name": "nice",
            "type": "boolean",
            "default": true
        },
        {
            "name": "name",
            "type": "string"
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "bin0",
                "bin1"
            ]
        }
    ]
};
(0, $4SWbq.inherits)(Bin, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const band = _.interval !== false, bins = this._bins(_), start = bins.start, step = bins.step, as = _.as || [
            "bin0",
            "bin1"
        ], b0 = as[0], b1 = as[1];
        let flag;
        if (_.modified()) {
            pulse = pulse.reflow(true);
            flag = pulse.SOURCE;
        } else flag = pulse.modified((0, $4SWbq.accessorFields)(_.field)) ? pulse.ADD_MOD : pulse.ADD;
        pulse.visit(flag, band ? (t)=>{
            const v = bins(t);
            // minimum bin value (inclusive)
            t[b0] = v;
            // maximum bin value (exclusive)
            // use convoluted math for better floating point agreement
            // see https://github.com/vega/vega/issues/830
            // infinite values propagate through this formula! #2227
            t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
        } : (t)=>t[b0] = bins(t));
        return pulse.modifies(band ? as : b0);
    },
    _bins (_) {
        if (this.value && !_.modified()) return this.value;
        const field = _.field, bins = (0, $7Par0.bin)(_), step = bins.step;
        let start = bins.start, stop = start + Math.ceil((bins.stop - start) / step) * step, a, d;
        if ((a = _.anchor) != null) {
            d = a - (start + step * Math.floor((a - start) / step));
            start += d;
            stop += d;
        }
        const f = function(t) {
            let v = (0, $4SWbq.toNumber)(field(t));
            return v == null ? null : v < start ? -Infinity : v > stop ? Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));
        };
        f.start = start;
        f.stop = bins.stop;
        f.step = step;
        return this.value = (0, $4SWbq.accessor)(f, (0, $4SWbq.accessorFields)(field), _.name || "bin_" + (0, $4SWbq.accessorName)(field));
    }
});
function SortedList(idFunc, source, input) {
    const $ = idFunc;
    let data = source || [], add = input || [], rem = {}, cnt = 0;
    return {
        add: (t)=>add.push(t),
        remove: (t)=>rem[$(t)] = ++cnt,
        size: ()=>data.length,
        data: (compare, resort)=>{
            if (cnt) {
                data = data.filter((t)=>!rem[$(t)]);
                rem = {};
                cnt = 0;
            }
            if (resort && compare) data.sort(compare);
            if (add.length) {
                data = compare ? (0, $4SWbq.merge)(compare, data, add.sort(compare)) : data.concat(add);
                add = [];
            }
            return data;
        }
    };
}
/**
 * Collects all data tuples that pass through this operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for additionally sorting the collected tuples.
 */ function Collect(params) {
    (0, $4jOgW.Transform).call(this, [], params);
}
Collect.Definition = {
    "type": "Collect",
    "metadata": {
        "source": true
    },
    "params": [
        {
            "name": "sort",
            "type": "compare"
        }
    ]
};
(0, $4SWbq.inherits)(Collect, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.ALL), list = SortedList((0, $4jOgW.tupleid), this.value, out.materialize(out.ADD).add), sort = _.sort, mod = pulse.changed() || sort && (_.modified("sort") || pulse.modified(sort.fields));
        out.visit(out.REM, list.remove);
        this.modified(mod);
        this.value = out.source = list.data((0, $4jOgW.stableCompare)(sort), mod);
        // propagate tree root if defined
        if (pulse.source && pulse.source.root) this.value.root = pulse.source.root;
        return out;
    }
});
/**
 * Generates a comparator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string|function>} params.fields - The fields to compare.
 * @param {Array<string>} [params.orders] - The sort orders.
 *   Each entry should be one of "ascending" (default) or "descending".
 */ function Compare(params) {
    (0, $4jOgW.Operator).call(this, null, update$5, params);
}
(0, $4SWbq.inherits)(Compare, (0, $4jOgW.Operator));
function update$5(_) {
    return this.value && !_.modified() ? this.value : (0, $4SWbq.compare)(_.fields, _.orders);
}
/**
 * Count regexp-defined pattern occurrences in a text field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - An accessor for the text field.
 * @param {string} [params.pattern] - RegExp string defining the text pattern.
 * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
 * @param {string} [params.stopwords] - RegExp string of words to ignore.
 */ function CountPattern(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
CountPattern.Definition = {
    "type": "CountPattern",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "case",
            "type": "enum",
            "values": [
                "upper",
                "lower",
                "mixed"
            ],
            "default": "mixed"
        },
        {
            "name": "pattern",
            "type": "string",
            "default": '[\\w"]+'
        },
        {
            "name": "stopwords",
            "type": "string",
            "default": ""
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "text",
                "count"
            ]
        }
    ]
};
function tokenize(text, tcase, match) {
    switch(tcase){
        case "upper":
            text = text.toUpperCase();
            break;
        case "lower":
            text = text.toLowerCase();
            break;
    }
    return text.match(match);
}
(0, $4SWbq.inherits)(CountPattern, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const process = (update)=>(tuple)=>{
                var tokens = tokenize(get(tuple), _.case, match) || [], t;
                for(var i = 0, n = tokens.length; i < n; ++i)if (!stop.test(t = tokens[i])) update(t);
            };
        const init = this._parameterCheck(_, pulse), counts = this._counts, match = this._match, stop = this._stop, get = _.field, as = _.as || [
            "text",
            "count"
        ], add = process((t)=>counts[t] = 1 + (counts[t] || 0)), rem = process((t)=>counts[t] -= 1);
        if (init) pulse.visit(pulse.SOURCE, add);
        else {
            pulse.visit(pulse.ADD, add);
            pulse.visit(pulse.REM, rem);
        }
        return this._finish(pulse, as); // generate output tuples
    },
    _parameterCheck (_, pulse) {
        let init = false;
        if (_.modified("stopwords") || !this._stop) {
            this._stop = new RegExp("^" + (_.stopwords || "") + "$", "i");
            init = true;
        }
        if (_.modified("pattern") || !this._match) {
            this._match = new RegExp(_.pattern || "[\\w']+", "g");
            init = true;
        }
        if (_.modified("field") || pulse.modified(_.field.fields)) init = true;
        if (init) this._counts = {};
        return init;
    },
    _finish (pulse, as) {
        const counts = this._counts, tuples = this._tuples || (this._tuples = {}), text = as[0], count = as[1], out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        let w, t, c;
        for(w in counts){
            t = tuples[w];
            c = counts[w] || 0;
            if (!t && c) {
                tuples[w] = t = (0, $4jOgW.ingest)({});
                t[text] = w;
                t[count] = c;
                out.add.push(t);
            } else if (c === 0) {
                if (t) out.rem.push(t);
                counts[w] = null;
                tuples[w] = null;
            } else if (t[count] !== c) {
                t[count] = c;
                out.mod.push(t);
            }
        }
        return out.modifies(as);
    }
});
/**
 * Perform a cross-product of a tuple stream with itself.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object):boolean} [params.filter] - An optional filter
 *   function for selectively including tuples in the cross product.
 * @param {Array<string>} [params.as] - The names of the output fields.
 */ function Cross(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
Cross.Definition = {
    "type": "Cross",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "filter",
            "type": "expr"
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "a",
                "b"
            ]
        }
    ]
};
(0, $4SWbq.inherits)(Cross, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), as = _.as || [
            "a",
            "b"
        ], a = as[0], b = as[1], reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified("as") || _.modified("filter");
        let data = this.value;
        if (reset) {
            if (data) out.rem = data;
            data = pulse.materialize(pulse.SOURCE).source;
            out.add = this.value = cross(data, a, b, _.filter || (0, $4SWbq.truthy));
        } else out.mod = data;
        out.source = this.value;
        return out.modifies(as);
    }
});
function cross(input, a, b, filter) {
    var data = [], t = {}, n = input.length, i = 0, j, left;
    for(; i < n; ++i){
        t[a] = left = input[i];
        for(j = 0; j < n; ++j){
            t[b] = input[j];
            if (filter(t)) {
                data.push((0, $4jOgW.ingest)(t));
                t = {};
                t[a] = left;
            }
        }
    }
    return data;
}
const Distributions = {
    kde: (0, $7Par0.randomKDE),
    mixture: (0, $7Par0.randomMixture),
    normal: (0, $7Par0.randomNormal),
    lognormal: (0, $7Par0.randomLogNormal),
    uniform: (0, $7Par0.randomUniform)
};
const DISTRIBUTIONS = "distributions", FUNCTION = "function", FIELD = "field";
/**
 * Parse a parameter object for a probability distribution.
 * @param {object} def - The distribution parameter object.
 * @param {function():Array<object>} - A method for requesting
 *   source data. Used for distributions (such as KDE) that
 *   require sample data points. This method will only be
 *   invoked if the 'from' parameter for a target data source
 *   is not provided. Typically this method returns backing
 *   source data for a Pulse object.
 * @return {object} - The output distribution object.
 */ function parse(def, data) {
    const func = def[FUNCTION];
    if (!(0, $4SWbq.hasOwnProperty)(Distributions, func)) (0, $4SWbq.error)("Unknown distribution function: " + func);
    const d = Distributions[func]();
    for(const name in def){
        // if data field, extract values
        if (name === FIELD) d.data((def.from || data()).map(def[name]));
        else if (name === DISTRIBUTIONS) d[name](def[name].map((_)=>parse(_, data)));
        else if (typeof d[name] === FUNCTION) d[name](def[name]);
    }
    return d;
}
/**
 * Grid sample points for a probability density. Given a distribution and
 * a sampling extent, will generate points suitable for plotting either
 * PDF (probability density function) or CDF (cumulative distribution
 * function) curves.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.distribution - The probability distribution. This
 *   is an object parameter dependent on the distribution type.
 * @param {string} [params.method='pdf'] - The distribution method to sample.
 *   One of 'pdf' or 'cdf'.
 * @param {Array<number>} [params.extent] - The [min, max] extent over which
 *   to sample the distribution. This argument is required in most cases, but
 *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
 *   that returns numerical sample points from which the extent can be deduced.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */ function Density(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
const distributions = [
    {
        "key": {
            "function": "normal"
        },
        "params": [
            {
                "name": "mean",
                "type": "number",
                "default": 0
            },
            {
                "name": "stdev",
                "type": "number",
                "default": 1
            }
        ]
    },
    {
        "key": {
            "function": "lognormal"
        },
        "params": [
            {
                "name": "mean",
                "type": "number",
                "default": 0
            },
            {
                "name": "stdev",
                "type": "number",
                "default": 1
            }
        ]
    },
    {
        "key": {
            "function": "uniform"
        },
        "params": [
            {
                "name": "min",
                "type": "number",
                "default": 0
            },
            {
                "name": "max",
                "type": "number",
                "default": 1
            }
        ]
    },
    {
        "key": {
            "function": "kde"
        },
        "params": [
            {
                "name": "field",
                "type": "field",
                "required": true
            },
            {
                "name": "from",
                "type": "data"
            },
            {
                "name": "bandwidth",
                "type": "number",
                "default": 0
            }
        ]
    }
];
const mixture = {
    "key": {
        "function": "mixture"
    },
    "params": [
        {
            "name": "distributions",
            "type": "param",
            "array": true,
            "params": distributions
        },
        {
            "name": "weights",
            "type": "number",
            "array": true
        }
    ]
};
Density.Definition = {
    "type": "Density",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "steps",
            "type": "number"
        },
        {
            "name": "minsteps",
            "type": "number",
            "default": 25
        },
        {
            "name": "maxsteps",
            "type": "number",
            "default": 200
        },
        {
            "name": "method",
            "type": "string",
            "default": "pdf",
            "values": [
                "pdf",
                "cdf"
            ]
        },
        {
            "name": "distribution",
            "type": "param",
            "params": distributions.concat(mixture)
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "default": [
                "value",
                "density"
            ]
        }
    ]
};
(0, $4SWbq.inherits)(Density, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const dist = parse(_.distribution, source(pulse)), minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
            let method = _.method || "pdf";
            if (method !== "pdf" && method !== "cdf") (0, $4SWbq.error)("Invalid density method: " + method);
            if (!_.extent && !dist.data) (0, $4SWbq.error)("Missing density extent parameter.");
            method = dist[method];
            const as = _.as || [
                "value",
                "density"
            ], domain = _.extent || (0, $4SWbq.extent)(dist.data()), values = (0, $7Par0.sampleCurve)(method, domain, minsteps, maxsteps).map((v)=>{
                const tuple = {};
                tuple[as[0]] = v[0];
                tuple[as[1]] = v[1];
                return (0, $4jOgW.ingest)(tuple);
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});
function source(pulse) {
    return ()=>pulse.materialize(pulse.SOURCE).source;
}
// use either provided alias or accessor field name
function fieldNames(fields, as) {
    if (!fields) return null;
    return fields.map((f, i)=>as[i] || (0, $4SWbq.accessorName)(f));
}
function partition$1(data, groupby, field) {
    const groups = [], get = (f)=>f(t);
    let map, i, n, t, k, g;
    // partition data points into groups
    if (groupby == null) groups.push(data.map(field));
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            g.dims = k;
            groups.push(g);
        }
        g.push(field(t));
    }
    return groups;
}
const Output = "bin";
/**
 * Dot density binning for dot plot construction.
 * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
 * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to bin.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {number} [params.step] - The step size (bin width) within which dots should be
 *   stacked. Defaults to 1/30 of the extent of the data *field*.
 * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density
 *   stacks should be smoothed to reduce variance.
 */ function DotBin(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
DotBin.Definition = {
    "type": "DotBin",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "step",
            "type": "number"
        },
        {
            "name": "smooth",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "default": Output
        }
    ]
};
const autostep = (data, field)=>(0, $4SWbq.span)((0, $4SWbq.extent)(data, field)) / 30;
(0, $4SWbq.inherits)(DotBin, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (this.value && !(_.modified() || pulse.changed())) return pulse; // early exit
        const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(pulse.source, _.groupby, (0, $4SWbq.identity)), smooth = _.smooth || false, field = _.field, step = _.step || autostep(source, field), sort = (0, $4jOgW.stableCompare)((a, b)=>field(a) - field(b)), as = _.as || Output, n = groups.length;
        // compute dotplot bins per group
        let min = Infinity, max = -Infinity, i = 0, j;
        for(; i < n; ++i){
            const g = groups[i].sort(sort);
            j = -1;
            for (const v of (0, $7Par0.dotbin)(g, step, smooth, field)){
                if (v < min) min = v;
                if (v > max) max = v;
                g[++j][as] = v;
            }
        }
        this.value = {
            start: min,
            stop: max,
            step: step
        };
        return pulse.reflow(true).modifies(as);
    }
});
/**
 * Wraps an expression function with access to external parameters.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function} params.expr - The expression function. The
 *  function should accept both a datum and a parameter object.
 *  This operator's value will be a new function that wraps the
 *  expression function with access to this operator's parameters.
 */ function Expression(params) {
    (0, $4jOgW.Operator).call(this, null, update$4, params);
    this.modified(true);
}
(0, $4SWbq.inherits)(Expression, (0, $4jOgW.Operator));
function update$4(_) {
    const expr = _.expr;
    return this.value && !_.modified("expr") ? this.value : (0, $4SWbq.accessor)((datum)=>expr(datum, _), (0, $4SWbq.accessorFields)(expr), (0, $4SWbq.accessorName)(expr));
}
/**
 * Computes extents (min/max) for a data field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field over which to compute extends.
 */ function Extent(params) {
    (0, $4jOgW.Transform).call(this, [
        undefined,
        undefined
    ], params);
}
Extent.Definition = {
    "type": "Extent",
    "metadata": {},
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        }
    ]
};
(0, $4SWbq.inherits)(Extent, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const extent = this.value, field = _.field, mod = pulse.changed() || pulse.modified(field.fields) || _.modified("field");
        let min = extent[0], max = extent[1];
        if (mod || min == null) {
            min = Infinity;
            max = -Infinity;
        }
        pulse.visit(mod ? pulse.SOURCE : pulse.ADD, (t)=>{
            const v = (0, $4SWbq.toNumber)(field(t));
            if (v != null) {
                // NaNs will fail all comparisons!
                if (v < min) min = v;
                if (v > max) max = v;
            }
        });
        if (!Number.isFinite(min) || !Number.isFinite(max)) {
            let name = (0, $4SWbq.accessorName)(field);
            if (name) name = ` for field "${name}"`;
            pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);
            min = max = undefined;
        }
        this.value = [
            min,
            max
        ];
    }
});
/**
 * Provides a bridge between a parent transform and a target subflow that
 * consumes only a subset of the tuples that pass through the parent.
 * @constructor
 * @param {Pulse} pulse - A pulse to use as the value of this operator.
 * @param {Transform} parent - The parent transform (typically a Facet instance).
 */ function Subflow(pulse, parent) {
    (0, $4jOgW.Operator).call(this, pulse);
    this.parent = parent;
    this.count = 0;
}
(0, $4SWbq.inherits)(Subflow, (0, $4jOgW.Operator), {
    /**
   * Routes pulses from this subflow to a target transform.
   * @param {Transform} target - A transform that receives the subflow of tuples.
   */ connect (target) {
        this.detachSubflow = target.detachSubflow;
        this.targets().add(target);
        return target.source = this;
    },
    /**
   * Add an 'add' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being added.
   */ add (t) {
        this.count += 1;
        this.value.add.push(t);
    },
    /**
   * Add a 'rem' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being removed.
   */ rem (t) {
        this.count -= 1;
        this.value.rem.push(t);
    },
    /**
   * Add a 'mod' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being modified.
   */ mod (t) {
        this.value.mod.push(t);
    },
    /**
   * Re-initialize this operator's pulse value.
   * @param {Pulse} pulse - The pulse to copy from.
   * @see Pulse.init
   */ init (pulse) {
        this.value.init(pulse, pulse.NO_SOURCE);
    },
    /**
   * Evaluate this operator. This method overrides the
   * default behavior to simply return the contained pulse value.
   * @return {Pulse}
   */ evaluate () {
        // assert: this.value.stamp === pulse.stamp
        return this.value;
    }
});
/**
 * Facets a dataflow into a set of subflows based on a key.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): *} params.key - The key field to facet by.
 */ function Facet(params) {
    (0, $4jOgW.Transform).call(this, {}, params);
    this._keys = (0, $4SWbq.fastmap)(); // cache previously calculated key values
    // keep track of active subflows, use as targets array for listeners
    // this allows us to limit propagation to only updated subflows
    const a = this._targets = [];
    a.active = 0;
    a.forEach = (f)=>{
        for(let i = 0, n = a.active; i < n; ++i)f(a[i], i, a);
    };
}
(0, $4SWbq.inherits)(Facet, (0, $4jOgW.Transform), {
    activate (flow) {
        this._targets[this._targets.active++] = flow;
    },
    // parent argument provided by PreFacet subclass
    subflow (key, flow, pulse, parent) {
        const flows = this.value;
        let sf = (0, $4SWbq.hasOwnProperty)(flows, key) && flows[key], df, p;
        if (!sf) {
            p = parent || (p = this._group[key]) && p.tuple;
            df = pulse.dataflow;
            sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);
            df.add(sf).connect(flow(df, key, p));
            flows[key] = sf;
            this.activate(sf);
        } else if (sf.value.stamp < pulse.stamp) {
            sf.init(pulse);
            this.activate(sf);
        }
        return sf;
    },
    clean () {
        const flows = this.value;
        let detached = 0;
        for(const key in flows)if (flows[key].count === 0) {
            const detach = flows[key].detachSubflow;
            if (detach) detach();
            delete flows[key];
            ++detached;
        }
        // remove inactive targets from the active targets array
        if (detached) {
            const active = this._targets.filter((sf)=>sf && sf.count > 0);
            this.initTargets(active);
        }
    },
    initTargets (act) {
        const a = this._targets, n = a.length, m = act ? act.length : 0;
        let i = 0;
        for(; i < m; ++i)a[i] = act[i];
        for(; i < n && a[i] != null; ++i)a[i] = null; // ensure old flows can be garbage collected
        a.active = m;
    },
    transform (_, pulse) {
        const df = pulse.dataflow, key = _.key, flow = _.subflow, cache = this._keys, rekey = _.modified("key"), subflow = (key)=>this.subflow(key, flow, pulse);
        this._group = _.group || {};
        this.initTargets(); // reset list of active subflows
        pulse.visit(pulse.REM, (t)=>{
            const id = (0, $4jOgW.tupleid)(t), k = cache.get(id);
            if (k !== undefined) {
                cache.delete(id);
                subflow(k).rem(t);
            }
        });
        pulse.visit(pulse.ADD, (t)=>{
            const k = key(t);
            cache.set((0, $4jOgW.tupleid)(t), k);
            subflow(k).add(t);
        });
        if (rekey || pulse.modified(key.fields)) pulse.visit(pulse.MOD, (t)=>{
            const id = (0, $4jOgW.tupleid)(t), k0 = cache.get(id), k1 = key(t);
            if (k0 === k1) subflow(k1).mod(t);
            else {
                cache.set(id, k1);
                subflow(k0).rem(t);
                subflow(k1).add(t);
            }
        });
        else if (pulse.changed(pulse.MOD)) pulse.visit(pulse.MOD, (t)=>{
            subflow(cache.get((0, $4jOgW.tupleid)(t))).mod(t);
        });
        if (rekey) pulse.visit(pulse.REFLOW, (t)=>{
            const id = (0, $4jOgW.tupleid)(t), k0 = cache.get(id), k1 = key(t);
            if (k0 !== k1) {
                cache.set(id, k1);
                subflow(k0).rem(t);
                subflow(k1).add(t);
            }
        });
        if (pulse.clean()) df.runAfter(()=>{
            this.clean();
            cache.clean();
        });
        else if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
        return pulse;
    }
});
/**
 * Generates one or more field accessor functions.
 * If the 'name' parameter is an array, an array of field accessors
 * will be created and the 'as' parameter will be ignored.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.name - The field name(s) to access.
 * @param {string} params.as - The accessor function name.
 */ function Field(params) {
    (0, $4jOgW.Operator).call(this, null, update$3, params);
}
(0, $4SWbq.inherits)(Field, (0, $4jOgW.Operator));
function update$3(_) {
    return this.value && !_.modified() ? this.value : (0, $4SWbq.isArray)(_.name) ? (0, $4SWbq.array)(_.name).map((f)=>(0, $4SWbq.field)(f)) : (0, $4SWbq.field)(_.name, _.as);
}
/**
 * Filters data tuples according to a predicate function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The predicate expression function
 *   that determines a tuple's filter status. Truthy values pass the filter.
 */ function Filter(params) {
    (0, $4jOgW.Transform).call(this, (0, $4SWbq.fastmap)(), params);
}
Filter.Definition = {
    "type": "Filter",
    "metadata": {
        "changes": true
    },
    "params": [
        {
            "name": "expr",
            "type": "expr",
            "required": true
        }
    ]
};
(0, $4SWbq.inherits)(Filter, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const df = pulse.dataflow, cache = this.value, // cache ids of filtered tuples
        output = pulse.fork(), add = output.add, rem = output.rem, mod = output.mod, test = _.expr;
        let isMod = true;
        pulse.visit(pulse.REM, (t)=>{
            const id = (0, $4jOgW.tupleid)(t);
            if (!cache.has(id)) rem.push(t);
            else cache.delete(id);
        });
        pulse.visit(pulse.ADD, (t)=>{
            if (test(t, _)) add.push(t);
            else cache.set((0, $4jOgW.tupleid)(t), 1);
        });
        function revisit(t) {
            const id = (0, $4jOgW.tupleid)(t), b = test(t, _), s = cache.get(id);
            if (b && s) {
                cache.delete(id);
                add.push(t);
            } else if (!b && !s) {
                cache.set(id, 1);
                rem.push(t);
            } else if (isMod && b && !s) mod.push(t);
        }
        pulse.visit(pulse.MOD, revisit);
        if (_.modified()) {
            isMod = false;
            pulse.visit(pulse.REFLOW, revisit);
        }
        if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
        return output;
    }
});
/**
 * Flattens array-typed field values into new data objects.
 * If multiple fields are specified, they are treated as parallel arrays,
 * with output values included for each matching index (or null if missing).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of field
 *   accessors for the tuple fields that should be flattened.
 * @param {string} [params.index] - Optional output field name for index
 *   value. If unspecified, no index field is included in the output.
 * @param {Array<string>} [params.as] - Output field names for flattened
 *   array fields. Any unspecified fields will use the field name provided
 *   by the fields accessors.
 */ function Flatten(params) {
    (0, $4jOgW.Transform).call(this, [], params);
}
Flatten.Definition = {
    "type": "Flatten",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "index",
            "type": "string"
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        }
    ]
};
(0, $4SWbq.inherits)(Flatten, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, as = fieldNames(fields, _.as || []), index = _.index || null, m = as.length;
        // remove any previous results
        out.rem = this.value;
        // generate flattened tuples
        pulse.visit(pulse.SOURCE, (t)=>{
            const arrays = fields.map((f)=>f(t)), maxlen = arrays.reduce((l, a)=>Math.max(l, a.length), 0);
            let i = 0, j, d, v;
            for(; i < maxlen; ++i){
                d = (0, $4jOgW.derive)(t);
                for(j = 0; j < m; ++j)d[as[j]] = (v = arrays[j][i]) == null ? null : v;
                if (index) d[index] = i;
                out.add.push(d);
            }
        });
        this.value = out.source = out.add;
        if (index) out.modifies(index);
        return out.modifies(as);
    }
});
/**
 * Folds one more tuple fields into multiple tuples in which the field
 * name and values are available under new 'key' and 'value' fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.fields - An array of field accessors
 *   for the tuple fields that should be folded.
 * @param {Array<string>} [params.as] - Output field names for folded key
 *   and value fields, defaults to ['key', 'value'].
 */ function Fold(params) {
    (0, $4jOgW.Transform).call(this, [], params);
}
Fold.Definition = {
    "type": "Fold",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "key",
                "value"
            ]
        }
    ]
};
(0, $4SWbq.inherits)(Fold, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, fnames = fields.map((0, $4SWbq.accessorName)), as = _.as || [
            "key",
            "value"
        ], k = as[0], v = as[1], n = fields.length;
        out.rem = this.value;
        pulse.visit(pulse.SOURCE, (t)=>{
            for(let i = 0, d; i < n; ++i){
                d = (0, $4jOgW.derive)(t);
                d[k] = fnames[i];
                d[v] = fields[i](t);
                out.add.push(d);
            }
        });
        this.value = out.source = out.add;
        return out.modifies(as);
    }
});
/**
 * Invokes a function for each data tuple and saves the results as a new field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
 * @param {string} params.as - The field name under which to save the result.
 * @param {boolean} [params.initonly=false] - If true, the formula is applied to
 *   added tuples only, and does not update in response to modifications.
 */ function Formula(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
Formula.Definition = {
    "type": "Formula",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "expr",
            "type": "expr",
            "required": true
        },
        {
            "name": "as",
            "type": "string",
            "required": true
        },
        {
            "name": "initonly",
            "type": "boolean"
        }
    ]
};
(0, $4SWbq.inherits)(Formula, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const func = _.expr, as = _.as, mod = _.modified(), flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;
        if (mod) // parameters updated, need to reflow
        pulse = pulse.materialize().reflow(true);
        if (!_.initonly) pulse.modifies(as);
        return pulse.visit(flag, (t)=>t[as] = func(t, _));
    }
});
/**
 * Generates data tuples using a provided generator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Parameters): object} params.generator - A tuple generator
 *   function. This function is given the operator parameters as input.
 *   Changes to any additional parameters will not trigger re-calculation
 *   of previously generated tuples. Only future tuples are affected.
 * @param {number} params.size - The number of tuples to produce.
 */ function Generate(params) {
    (0, $4jOgW.Transform).call(this, [], params);
}
(0, $4SWbq.inherits)(Generate, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.ALL), gen = _.generator;
        let data = this.value, num = _.size - data.length, add, rem, t;
        if (num > 0) {
            // need more tuples, generate and add
            for(add = []; --num >= 0;){
                add.push(t = (0, $4jOgW.ingest)(gen(_)));
                data.push(t);
            }
            out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;
        } else {
            // need fewer tuples, remove
            rem = data.slice(0, -num);
            out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;
            data = data.slice(-num);
        }
        out.source = this.value = data;
        return out;
    }
});
const Methods = {
    value: "value",
    median: (0, $fExah.default),
    mean: (0, $6ZzLU.default),
    min: (0, $iUsSy.default),
    max: (0, $cgvXK.default)
};
const Empty = [];
/**
 * Impute missing values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to impute.
 * @param {Array<function(object): *>} [params.groupby] - An array of
 *   accessors to determine series within which to perform imputation.
 * @param {function(object): *} params.key - An accessor for a key value.
 *   Each key value should be unique within a group. New tuples will be
 *   imputed for any key values that are not found within a group.
 * @param {Array<*>} [params.keyvals] - Optional array of required key
 *   values. New tuples will be imputed for any key values that are not
 *   found within a group. In addition, these values will be automatically
 *   augmented with the key values observed in the input data.
 * @param {string} [method='value'] - The imputation method to use. One of
 *   'value', 'mean', 'median', 'max', 'min'.
 * @param {*} [value=0] - The constant value to use for imputation
 *   when using method 'value'.
 */ function Impute(params) {
    (0, $4jOgW.Transform).call(this, [], params);
}
Impute.Definition = {
    "type": "Impute",
    "metadata": {
        "changes": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "key",
            "type": "field",
            "required": true
        },
        {
            "name": "keyvals",
            "array": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "method",
            "type": "enum",
            "default": "value",
            "values": [
                "value",
                "mean",
                "median",
                "max",
                "min"
            ]
        },
        {
            "name": "value",
            "default": 0
        }
    ]
};
function getValue(_) {
    var m = _.method || Methods.value, v;
    if (Methods[m] == null) (0, $4SWbq.error)("Unrecognized imputation method: " + m);
    else if (m === Methods.value) {
        v = _.value !== undefined ? _.value : 0;
        return ()=>v;
    } else return Methods[m];
}
function getField(_) {
    const f = _.field;
    return (t)=>t ? f(t) : NaN;
}
(0, $4SWbq.inherits)(Impute, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ALL), impute = getValue(_), field = getField(_), fName = (0, $4SWbq.accessorName)(_.field), kName = (0, $4SWbq.accessorName)(_.key), gNames = (_.groupby || []).map((0, $4SWbq.accessorName)), groups = partition(pulse.source, _.groupby, _.key, _.keyvals), curr = [], prev = this.value, m = groups.domain.length, group, value, gVals, kVal, g, i, j, l, n, t;
        for(g = 0, l = groups.length; g < l; ++g){
            group = groups[g];
            gVals = group.values;
            value = NaN;
            // add tuples for missing values
            for(j = 0; j < m; ++j){
                if (group[j] != null) continue;
                kVal = groups.domain[j];
                t = {
                    _impute: true
                };
                for(i = 0, n = gVals.length; i < n; ++i)t[gNames[i]] = gVals[i];
                t[kName] = kVal;
                t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;
                curr.push((0, $4jOgW.ingest)(t));
            }
        }
        // update pulse with imputed tuples
        if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
        if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
        this.value = curr;
        return out;
    }
});
function partition(data, groupby, key, keyvals) {
    var get = (f)=>f(t), groups = [], domain = keyvals ? keyvals.slice() : [], kMap = {}, gMap = {}, gVals, gKey, group, i, j, k, n, t;
    domain.forEach((k, i)=>kMap[k] = i + 1);
    for(i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = key(t);
        j = kMap[k] || (kMap[k] = domain.push(k));
        gKey = (gVals = groupby ? groupby.map(get) : Empty) + "";
        if (!(group = gMap[gKey])) {
            group = gMap[gKey] = [];
            groups.push(group);
            group.values = gVals;
        }
        group[j - 1] = t;
    }
    groups.domain = domain;
    return groups;
}
/**
 * Extend input tuples with aggregate values.
 * Calcuates aggregate values and joins them with the input stream.
 * @constructor
 */ function JoinAggregate(params) {
    Aggregate.call(this, params);
}
JoinAggregate.Definition = {
    "type": "JoinAggregate",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "fields",
            "type": "field",
            "null": true,
            "array": true
        },
        {
            "name": "ops",
            "type": "enum",
            "array": true,
            "values": ValidAggregateOps
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        },
        {
            "name": "key",
            "type": "field"
        }
    ]
};
(0, $4SWbq.inherits)(JoinAggregate, Aggregate, {
    transform (_, pulse) {
        const aggr = this, mod = _.modified();
        let cells;
        // process all input tuples to calculate aggregates
        if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
            cells = aggr.value = mod ? aggr.init(_) : {};
            pulse.visit(pulse.SOURCE, (t)=>aggr.add(t));
        } else {
            cells = aggr.value = aggr.value || this.init(_);
            pulse.visit(pulse.REM, (t)=>aggr.rem(t));
            pulse.visit(pulse.ADD, (t)=>aggr.add(t));
        }
        // update aggregation cells
        aggr.changes();
        // write aggregate values to input tuples
        pulse.visit(pulse.SOURCE, (t)=>{
            (0, $4SWbq.extend)(t, cells[aggr.cellkey(t)].tuple);
        });
        return pulse.reflow(mod).modifies(this._outputs);
    },
    changes () {
        const adds = this._adds, mods = this._mods;
        let i, n;
        for(i = 0, n = this._alen; i < n; ++i){
            this.celltuple(adds[i]);
            adds[i] = null; // for garbage collection
        }
        for(i = 0, n = this._mlen; i < n; ++i){
            this.celltuple(mods[i]);
            mods[i] = null; // for garbage collection
        }
        this._alen = this._mlen = 0; // reset list of active cells
    }
});
/**
 * Compute kernel density estimates (KDE) for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {function(object): *} params.field - An accessor for the data field
 *   to estimate.
 * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.
 *   If zero or unspecified, the bandwidth is automatically determined.
 * @param {boolean} [params.counts=false] - A boolean flag indicating if the
 *   output values should be probability estimates (false, default) or
 *   smoothed counts (true).
 * @param {string} [params.cumulative=false] - A boolean flag indicating if a
 *   density (false) or cumulative distribution (true) should be generated.
 * @param {Array<number>} [params.extent] - The domain extent over which to
 *   plot the density. If unspecified, the [min, max] data extent is used.
 * @param {string} [params.resolve='independent'] - Indicates how parameters for
 *   multiple densities should be resolved. If "independent" (the default), each
 *   density may have its own domain extent and dynamic number of curve sample
 *   steps. If "shared", the KDE transform will ensure that all densities are
 *   defined over a shared domain and curve steps, enabling stacking.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */ function KDE(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
KDE.Definition = {
    "type": "KDE",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "cumulative",
            "type": "boolean",
            "default": false
        },
        {
            "name": "counts",
            "type": "boolean",
            "default": false
        },
        {
            "name": "bandwidth",
            "type": "number",
            "default": 0
        },
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "resolve",
            "type": "enum",
            "values": [
                "shared",
                "independent"
            ],
            "default": "independent"
        },
        {
            "name": "steps",
            "type": "number"
        },
        {
            "name": "minsteps",
            "type": "number",
            "default": 25
        },
        {
            "name": "maxsteps",
            "type": "number",
            "default": 200
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "default": [
                "value",
                "density"
            ]
        }
    ]
};
(0, $4SWbq.inherits)(KDE, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(source, _.groupby, _.field), names = (_.groupby || []).map((0, $4SWbq.accessorName)), bandwidth = _.bandwidth, method = _.cumulative ? "cdf" : "pdf", as = _.as || [
                "value",
                "density"
            ], values = [];
            let domain = _.extent, minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
            if (method !== "pdf" && method !== "cdf") (0, $4SWbq.error)("Invalid density method: " + method);
            if (_.resolve === "shared") {
                if (!domain) domain = (0, $4SWbq.extent)(source, _.field);
                minsteps = maxsteps = _.steps || maxsteps;
            }
            groups.forEach((g)=>{
                const density = (0, $7Par0.randomKDE)(g, bandwidth)[method], scale = _.counts ? g.length : 1, local = domain || (0, $4SWbq.extent)(g);
                (0, $7Par0.sampleCurve)(density, local, minsteps, maxsteps).forEach((v)=>{
                    const t = {};
                    for(let i = 0; i < names.length; ++i)t[names[i]] = g.dims[i];
                    t[as[0]] = v[0];
                    t[as[1]] = v[1] * scale;
                    values.push((0, $4jOgW.ingest)(t));
                });
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});
/**
 * Generates a key function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string>} params.fields - The field name(s) for the key function.
 * @param {boolean} params.flat - A boolean flag indicating if the field names
 *  should be treated as flat property names, side-stepping nested field
 *  lookups normally indicated by dot or bracket notation.
 */ function Key(params) {
    (0, $4jOgW.Operator).call(this, null, update$2, params);
}
(0, $4SWbq.inherits)(Key, (0, $4jOgW.Operator));
function update$2(_) {
    return this.value && !_.modified() ? this.value : (0, $4SWbq.key)(_.fields, _.flat);
}
/**
 * Load and parse data from an external source. Marshalls parameter
 * values and then invokes the Dataflow request method.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.url - The URL to load from.
 * @param {object} params.format - The data format options.
 */ function Load(params) {
    (0, $4jOgW.Transform).call(this, [], params);
    this._pending = null;
}
(0, $4SWbq.inherits)(Load, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const df = pulse.dataflow;
        if (this._pending) // update state and return pulse
        return output(this, pulse, this._pending);
        if (stop(_)) return pulse.StopPropagation;
        if (_.values) // parse and ingest values, return output pulse
        return output(this, pulse, df.parse(_.values, _.format));
        else if (_.async) {
            // return promise for non-blocking async loading
            const p = df.request(_.url, _.format).then((res)=>{
                this._pending = (0, $4SWbq.array)(res.data);
                return (df)=>df.touch(this);
            });
            return {
                async: p
            };
        } else // return promise for synchronous loading
        return df.request(_.url, _.format).then((res)=>output(this, pulse, (0, $4SWbq.array)(res.data)));
    }
});
function stop(_) {
    return _.modified("async") && !(_.modified("values") || _.modified("url") || _.modified("format"));
}
function output(op, pulse, data) {
    data.forEach((0, $4jOgW.ingest));
    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);
    out.rem = op.value;
    op.value = out.source = out.add = data;
    op._pending = null;
    if (out.rem.length) out.clean(true);
    return out;
}
/**
 * Extend tuples by joining them with values from a lookup table.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Map} params.index - The lookup table map.
 * @param {Array<function(object): *} params.fields - The fields to lookup.
 * @param {Array<string>} params.as - Output field names for each lookup value.
 * @param {*} [params.default] - A default value to use if lookup fails.
 */ function Lookup(params) {
    (0, $4jOgW.Transform).call(this, {}, params);
}
Lookup.Definition = {
    "type": "Lookup",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "index",
            "type": "index",
            "params": [
                {
                    "name": "from",
                    "type": "data",
                    "required": true
                },
                {
                    "name": "key",
                    "type": "field",
                    "required": true
                }
            ]
        },
        {
            "name": "values",
            "type": "field",
            "array": true
        },
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        },
        {
            "name": "default",
            "default": null
        }
    ]
};
(0, $4SWbq.inherits)(Lookup, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const keys = _.fields, index = _.index, values = _.values, defaultValue = _.default == null ? null : _.default, reset = _.modified(), n = keys.length;
        let flag = reset ? pulse.SOURCE : pulse.ADD, out = pulse, as = _.as, set, m, mods;
        if (values) {
            m = values.length;
            if (n > 1 && !as) (0, $4SWbq.error)('Multi-field lookup requires explicit "as" parameter.');
            if (as && as.length !== n * m) (0, $4SWbq.error)('The "as" parameter has too few output field names.');
            as = as || values.map((0, $4SWbq.accessorName));
            set = function(t) {
                for(var i = 0, k = 0, j, v; i < n; ++i){
                    v = index.get(keys[i](t));
                    if (v == null) for(j = 0; j < m; ++j, ++k)t[as[k]] = defaultValue;
                    else for(j = 0; j < m; ++j, ++k)t[as[k]] = values[j](v);
                }
            };
        } else {
            if (!as) (0, $4SWbq.error)("Missing output field names.");
            set = function(t) {
                for(var i = 0, v; i < n; ++i){
                    v = index.get(keys[i](t));
                    t[as[i]] = v == null ? defaultValue : v;
                }
            };
        }
        if (reset) out = pulse.reflow(true);
        else {
            mods = keys.some((k)=>pulse.modified(k.fields));
            flag |= mods ? pulse.MOD : 0;
        }
        pulse.visit(flag, set);
        return out.modifies(as);
    }
});
/**
 * Computes global min/max extents over a collection of extents.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<number>>} params.extents - The input extents.
 */ function MultiExtent(params) {
    (0, $4jOgW.Operator).call(this, null, update$1, params);
}
(0, $4SWbq.inherits)(MultiExtent, (0, $4jOgW.Operator));
function update$1(_) {
    if (this.value && !_.modified()) return this.value;
    const ext = _.extents, n = ext.length;
    let min = Infinity, max = -Infinity, i, e;
    for(i = 0; i < n; ++i){
        e = ext[i];
        if (e[0] < min) min = e[0];
        if (e[1] > max) max = e[1];
    }
    return [
        min,
        max
    ];
}
/**
 * Merge a collection of value arrays.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<*>>} params.values - The input value arrrays.
 */ function MultiValues(params) {
    (0, $4jOgW.Operator).call(this, null, update, params);
}
(0, $4SWbq.inherits)(MultiValues, (0, $4jOgW.Operator));
function update(_) {
    return this.value && !_.modified() ? this.value : _.values.reduce((data, _)=>data.concat(_), []);
}
/**
 * Operator whose value is simply its parameter hash. This operator is
 * useful for enabling reactive updates to values of nested objects.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function Params(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)(Params, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        this.modified(_.modified());
        this.value = _;
        return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples
    }
});
/**
 * Aggregate and pivot selected field values to become new fields.
 * This operator is useful to construction cross-tabulations.
 * @constructor
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *  to groupby. These fields act just like groupby fields of an Aggregate transform.
 * @param {function(object): *} params.field - The field to pivot on. The unique
 *  values of this field become new field names in the output stream.
 * @param {function(object): *} params.value - The field to populate pivoted fields.
 *  The aggregate values of this field become the values of the new pivoted fields.
 * @param {string} [params.op] - The aggregation operation for the value field,
 *  applied per cell in the output stream. The default is "sum".
 * @param {number} [params.limit] - An optional parameter indicating the maximum
 *  number of pivoted fields to generate. The pivoted field names are sorted in
 *  ascending order prior to enforcing the limit.
 */ function Pivot(params) {
    Aggregate.call(this, params);
}
Pivot.Definition = {
    "type": "Pivot",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "value",
            "type": "field",
            "required": true
        },
        {
            "name": "op",
            "type": "enum",
            "values": ValidAggregateOps,
            "default": "sum"
        },
        {
            "name": "limit",
            "type": "number",
            "default": 0
        },
        {
            "name": "key",
            "type": "field"
        }
    ]
};
(0, $4SWbq.inherits)(Pivot, Aggregate, {
    _transform: Aggregate.prototype.transform,
    transform (_, pulse) {
        return this._transform(aggregateParams(_, pulse), pulse);
    }
});
// Shoehorn a pivot transform into an aggregate transform!
// First collect all unique pivot field values.
// Then generate aggregate fields for each output pivot field.
function aggregateParams(_, pulse) {
    const key = _.field, value = _.value, op = (_.op === "count" ? "__count__" : _.op) || "sum", fields = (0, $4SWbq.accessorFields)(key).concat((0, $4SWbq.accessorFields)(value)), keys = pivotKeys(key, _.limit || 0, pulse);
    // if data stream content changes, pivot fields may change
    // flag parameter modification to ensure re-initialization
    if (pulse.changed()) _.set("__pivot__", null, null, true);
    return {
        key: _.key,
        groupby: _.groupby,
        ops: keys.map(()=>op),
        fields: keys.map((k)=>get(k, key, value, fields)),
        as: keys.map((k)=>k + ""),
        modified: _.modified.bind(_)
    };
}
// Generate aggregate field accessor.
// Output NaN for non-existent values; aggregator will ignore!
function get(k, key, value, fields) {
    return (0, $4SWbq.accessor)((d)=>key(d) === k ? value(d) : NaN, fields, k + "");
}
// Collect (and optionally limit) all unique pivot values.
function pivotKeys(key, limit, pulse) {
    const map = {}, list = [];
    pulse.visit(pulse.SOURCE, (t)=>{
        const k = key(t);
        if (!map[k]) {
            map[k] = 1;
            list.push(k);
        }
    });
    list.sort((0, $4SWbq.ascending));
    return limit ? list.slice(0, limit) : list;
}
/**
 * Partitions pre-faceted data into tuple subflows.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): Array<object>} params.field - The field
 *   accessor for an array of subflow tuple objects.
 */ function PreFacet(params) {
    Facet.call(this, params);
}
(0, $4SWbq.inherits)(PreFacet, Facet, {
    transform (_, pulse) {
        const flow = _.subflow, field = _.field, subflow = (t)=>this.subflow((0, $4jOgW.tupleid)(t), flow, pulse, t);
        if (_.modified("field") || field && pulse.modified((0, $4SWbq.accessorFields)(field))) (0, $4SWbq.error)("PreFacet does not support field modification.");
        this.initTargets(); // reset list of active subflows
        if (field) {
            pulse.visit(pulse.MOD, (t)=>{
                const sf = subflow(t);
                field(t).forEach((_)=>sf.mod(_));
            });
            pulse.visit(pulse.ADD, (t)=>{
                const sf = subflow(t);
                field(t).forEach((_)=>sf.add((0, $4jOgW.ingest)(_)));
            });
            pulse.visit(pulse.REM, (t)=>{
                const sf = subflow(t);
                field(t).forEach((_)=>sf.rem(_));
            });
        } else {
            pulse.visit(pulse.MOD, (t)=>subflow(t).mod(t));
            pulse.visit(pulse.ADD, (t)=>subflow(t).add(t));
            pulse.visit(pulse.REM, (t)=>subflow(t).rem(t));
        }
        if (pulse.clean()) pulse.runAfter(()=>this.clean());
        return pulse;
    }
});
/**
 * Performs a relational projection, copying selected fields from source
 * tuples to a new set of derived tuples.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *} params.fields - The fields to project,
 *   as an array of field accessors. If unspecified, all fields will be
 *   copied with names unchanged.
 * @param {Array<string>} [params.as] - Output field names for each projected
 *   field. Any unspecified fields will use the field name provided by
 *   the field accessor.
 */ function Project(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
Project.Definition = {
    "type": "Project",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        }
    ]
};
(0, $4SWbq.inherits)(Project, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), fields = _.fields, as = fieldNames(_.fields, _.as || []), derive = fields ? (s, t)=>project(s, t, fields, as) : (0, $4jOgW.rederive);
        let lut;
        if (this.value) lut = this.value;
        else {
            pulse = pulse.addAll();
            lut = this.value = {};
        }
        pulse.visit(pulse.REM, (t)=>{
            const id = (0, $4jOgW.tupleid)(t);
            out.rem.push(lut[id]);
            lut[id] = null;
        });
        pulse.visit(pulse.ADD, (t)=>{
            const dt = derive(t, (0, $4jOgW.ingest)({}));
            lut[(0, $4jOgW.tupleid)(t)] = dt;
            out.add.push(dt);
        });
        pulse.visit(pulse.MOD, (t)=>{
            out.mod.push(derive(t, lut[(0, $4jOgW.tupleid)(t)]));
        });
        return out;
    }
});
function project(s, t, fields, as) {
    for(let i = 0, n = fields.length; i < n; ++i)t[as[i]] = fields[i](s);
    return t;
}
/**
 * Proxy the value of another operator as a pure signal value.
 * Ensures no tuples are propagated.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {*} params.value - The value to proxy, becomes the value of this operator.
 */ function Proxy(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)(Proxy, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        this.value = _.value;
        return _.modified("value") ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
    }
});
/**
 * Generates sample quantile values from an input data stream.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - An accessor for the data field
 *   over which to calculate quantile values.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {Array<number>} [params.probs] - An array of probabilities in
 *   the range (0, 1) for which to compute quantile values. If not specified,
 *   the *step* parameter will be used.
 * @param {Array<number>} [params.step=0.01] - A probability step size for
 *   sampling quantile values. All values from one-half the step size up to
 *   1 (exclusive) will be sampled. This parameter is only used if the
 *   *quantiles* parameter is not provided.
 */ function Quantile(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
Quantile.Definition = {
    "type": "Quantile",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "probs",
            "type": "number",
            "array": true
        },
        {
            "name": "step",
            "type": "number",
            "default": 0.01
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "default": [
                "prob",
                "value"
            ]
        }
    ]
};
const EPSILON = 1e-14;
(0, $4SWbq.inherits)(Quantile, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), as = _.as || [
            "prob",
            "value"
        ];
        if (this.value && !_.modified() && !pulse.changed()) {
            out.source = this.value;
            return out;
        }
        const source = pulse.materialize(pulse.SOURCE).source, groups = partition$1(source, _.groupby, _.field), names = (_.groupby || []).map((0, $4SWbq.accessorName)), values = [], step = _.step || 0.01, p = _.probs || (0, $apu36.default)(step / 2, 1 - EPSILON, step), n = p.length;
        groups.forEach((g)=>{
            const q = (0, $7Par0.quantiles)(g, p);
            for(let i = 0; i < n; ++i){
                const t = {};
                for(let i = 0; i < names.length; ++i)t[names[i]] = g.dims[i];
                t[as[0]] = p[i];
                t[as[1]] = q[i];
                values.push((0, $4jOgW.ingest)(t));
            }
        });
        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values;
        return out;
    }
});
/**
 * Relays a data stream between data processing pipelines.
 * If the derive parameter is set, this transform will create derived
 * copies of observed tuples. This provides derived data streams in which
 * modifications to the tuples do not pollute an upstream data source.
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.derive=false] - Boolean flag indicating if
 *   the transform should make derived copies of incoming tuples.
 * @constructor
 */ function Relay(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)(Relay, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        let out, lut;
        if (this.value) lut = this.value;
        else {
            out = pulse = pulse.addAll();
            lut = this.value = {};
        }
        if (_.derive) {
            out = pulse.fork(pulse.NO_SOURCE);
            pulse.visit(pulse.REM, (t)=>{
                const id = (0, $4jOgW.tupleid)(t);
                out.rem.push(lut[id]);
                lut[id] = null;
            });
            pulse.visit(pulse.ADD, (t)=>{
                const dt = (0, $4jOgW.derive)(t);
                lut[(0, $4jOgW.tupleid)(t)] = dt;
                out.add.push(dt);
            });
            pulse.visit(pulse.MOD, (t)=>{
                const dt = lut[(0, $4jOgW.tupleid)(t)];
                for(const k in t){
                    dt[k] = t[k];
                    // down stream writes may overwrite re-derived tuples
                    // conservatively mark all source fields as modified
                    out.modifies(k);
                }
                out.mod.push(dt);
            });
        }
        return out;
    }
});
/**
 * Samples tuples passing through this operator.
 * Uses reservoir sampling to maintain a representative sample.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.size=1000] - The maximum number of samples.
 */ function Sample(params) {
    (0, $4jOgW.Transform).call(this, [], params);
    this.count = 0;
}
Sample.Definition = {
    "type": "Sample",
    "metadata": {},
    "params": [
        {
            "name": "size",
            "type": "number",
            "default": 1000
        }
    ]
};
(0, $4SWbq.inherits)(Sample, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE), mod = _.modified("size"), num = _.size, map = this.value.reduce((m, t)=>(m[(0, $4jOgW.tupleid)(t)] = 1, m), {});
        let res = this.value, cnt = this.count, cap = 0;
        // sample reservoir update function
        function update(t) {
            let p, idx;
            if (res.length < num) res.push(t);
            else {
                idx = ~~((cnt + 1) * (0, $7Par0.random)());
                if (idx < res.length && idx >= cap) {
                    p = res[idx];
                    if (map[(0, $4jOgW.tupleid)(p)]) out.rem.push(p); // eviction
                    res[idx] = t;
                }
            }
            ++cnt;
        }
        if (pulse.rem.length) {
            // find all tuples that should be removed, add to output
            pulse.visit(pulse.REM, (t)=>{
                const id = (0, $4jOgW.tupleid)(t);
                if (map[id]) {
                    map[id] = -1;
                    out.rem.push(t);
                }
                --cnt;
            });
            // filter removed tuples out of the sample reservoir
            res = res.filter((t)=>map[(0, $4jOgW.tupleid)(t)] !== -1);
        }
        if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
            // replenish sample if backing data source is available
            cap = cnt = res.length;
            pulse.visit(pulse.SOURCE, (t)=>{
                // update, but skip previously sampled tuples
                if (!map[(0, $4jOgW.tupleid)(t)]) update(t);
            });
            cap = -1;
        }
        if (mod && res.length > num) {
            const n = res.length - num;
            for(let i = 0; i < n; ++i){
                map[(0, $4jOgW.tupleid)(res[i])] = -1;
                out.rem.push(res[i]);
            }
            res = res.slice(n);
        }
        if (pulse.mod.length) // propagate modified tuples in the sample reservoir
        pulse.visit(pulse.MOD, (t)=>{
            if (map[(0, $4jOgW.tupleid)(t)]) out.mod.push(t);
        });
        if (pulse.add.length) // update sample reservoir
        pulse.visit(pulse.ADD, update);
        if (pulse.add.length || cap < 0) // output newly added tuples
        out.add = res.filter((t)=>!map[(0, $4jOgW.tupleid)(t)]);
        this.count = cnt;
        this.value = out.source = res;
        return out;
    }
});
/**
 * Generates data tuples for a specified sequence range of numbers.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} params.start - The first number in the sequence.
 * @param {number} params.stop - The last number (exclusive) in the sequence.
 * @param {number} [params.step=1] - The step size between numbers in the sequence.
 */ function Sequence(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
Sequence.Definition = {
    "type": "Sequence",
    "metadata": {
        "generates": true,
        "changes": true
    },
    "params": [
        {
            "name": "start",
            "type": "number",
            "required": true
        },
        {
            "name": "stop",
            "type": "number",
            "required": true
        },
        {
            "name": "step",
            "type": "number",
            "default": 1
        },
        {
            "name": "as",
            "type": "string",
            "default": "data"
        }
    ]
};
(0, $4SWbq.inherits)(Sequence, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (this.value && !_.modified()) return;
        const out = pulse.materialize().fork(pulse.MOD), as = _.as || "data";
        out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;
        this.value = (0, $apu36.default)(_.start, _.stop, _.step || 1).map((v)=>{
            const t = {};
            t[as] = v;
            return (0, $4jOgW.ingest)(t);
        });
        out.add = pulse.add.concat(this.value);
        return out;
    }
});
/**
 * Propagates a new pulse without any tuples so long as the input
 * pulse contains some added, removed or modified tuples.
 * @param {object} params - The parameters for this operator.
 * @constructor
 */ function Sieve(params) {
    (0, $4jOgW.Transform).call(this, null, params);
    this.modified(true); // always treat as modified
}
(0, $4SWbq.inherits)(Sieve, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        this.value = pulse.source;
        return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
    }
});
/**
 * Discretize dates to specific time units.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The data field containing date/time values.
 */ function TimeUnit(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
const OUTPUT = [
    "unit0",
    "unit1"
];
TimeUnit.Definition = {
    "type": "TimeUnit",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field",
            "required": true
        },
        {
            "name": "interval",
            "type": "boolean",
            "default": true
        },
        {
            "name": "units",
            "type": "enum",
            "values": (0, $i7MAj.TIME_UNITS),
            "array": true
        },
        {
            "name": "step",
            "type": "number",
            "default": 1
        },
        {
            "name": "maxbins",
            "type": "number",
            "default": 40
        },
        {
            "name": "extent",
            "type": "date",
            "array": true
        },
        {
            "name": "timezone",
            "type": "enum",
            "default": "local",
            "values": [
                "local",
                "utc"
            ]
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": OUTPUT
        }
    ]
};
(0, $4SWbq.inherits)(TimeUnit, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const field = _.field, band = _.interval !== false, utc = _.timezone === "utc", floor = this._floor(_, pulse), offset = (utc ? (0, $i7MAj.utcInterval) : (0, $i7MAj.timeInterval))(floor.unit).offset, as = _.as || OUTPUT, u0 = as[0], u1 = as[1], step = floor.step;
        let min = floor.start || Infinity, max = floor.stop || -Infinity, flag = pulse.ADD;
        if (_.modified() || pulse.changed(pulse.REM) || pulse.modified((0, $4SWbq.accessorFields)(field))) {
            pulse = pulse.reflow(true);
            flag = pulse.SOURCE;
            min = Infinity;
            max = -Infinity;
        }
        pulse.visit(flag, (t)=>{
            const v = field(t);
            let a, b;
            if (v == null) {
                t[u0] = null;
                if (band) t[u1] = null;
            } else {
                t[u0] = a = b = floor(v);
                if (band) t[u1] = b = offset(a, step);
                if (a < min) min = a;
                if (b > max) max = b;
            }
        });
        floor.start = min;
        floor.stop = max;
        return pulse.modifies(band ? as : u0);
    },
    _floor (_, pulse) {
        const utc = _.timezone === "utc";
        // get parameters
        const { units, step } = _.units ? {
            units: _.units,
            step: _.step || 1
        } : (0, $i7MAj.timeBin)({
            extent: _.extent || (0, $4SWbq.extent)(pulse.materialize(pulse.SOURCE).source, _.field),
            maxbins: _.maxbins
        });
        // check / standardize time units
        const tunits = (0, $i7MAj.timeUnits)(units), prev = this.value || {}, floor = (utc ? (0, $i7MAj.utcFloor) : (0, $i7MAj.timeFloor))(tunits, step);
        floor.unit = (0, $4SWbq.peek)(tunits);
        floor.units = tunits;
        floor.step = step;
        floor.start = prev.start;
        floor.stop = prev.stop;
        return this.value = floor;
    }
});
/**
 * An index that maps from unique, string-coerced, field values to tuples.
 * Assumes that the field serves as a unique key with no duplicate values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field accessor to index.
 */ function TupleIndex(params) {
    (0, $4jOgW.Transform).call(this, (0, $4SWbq.fastmap)(), params);
}
(0, $4SWbq.inherits)(TupleIndex, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const df = pulse.dataflow, field = _.field, index = this.value, set = (t)=>index.set(field(t), t);
        let mod = true;
        if (_.modified("field") || pulse.modified(field.fields)) {
            index.clear();
            pulse.visit(pulse.SOURCE, set);
        } else if (pulse.changed()) {
            pulse.visit(pulse.REM, (t)=>index.delete(field(t)));
            pulse.visit(pulse.ADD, set);
        } else mod = false;
        this.modified(mod);
        if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
        return pulse.fork();
    }
});
/**
 * Extracts an array of values. Assumes the source data has already been
 * reduced as needed (e.g., by an upstream Aggregate transform).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The domain field to extract.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for sorting the values. The comparator will be
 *   applied to backing tuples prior to value extraction.
 */ function Values(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)(Values, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const run = !this.value || _.modified("field") || _.modified("sort") || pulse.changed() || _.sort && pulse.modified(_.sort.fields);
        if (run) this.value = (_.sort ? pulse.source.slice().sort((0, $4jOgW.stableCompare)(_.sort)) : pulse.source).map(_.field);
    }
});
function WindowOp(op, field, param, as) {
    const fn = WindowOps[op](field, param);
    return {
        init: fn.init || (0, $4SWbq.zero),
        update: function(w, t) {
            t[as] = fn.next(w);
        }
    };
}
const WindowOps = {
    row_number: function() {
        return {
            next: (w)=>w.index + 1
        };
    },
    rank: function() {
        let rank;
        return {
            init: ()=>rank = 1,
            next: (w)=>{
                const i = w.index, data = w.data;
                return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;
            }
        };
    },
    dense_rank: function() {
        let drank;
        return {
            init: ()=>drank = 1,
            next: (w)=>{
                const i = w.index, d = w.data;
                return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;
            }
        };
    },
    percent_rank: function() {
        const rank = WindowOps.rank(), next = rank.next;
        return {
            init: rank.init,
            next: (w)=>(next(w) - 1) / (w.data.length - 1)
        };
    },
    cume_dist: function() {
        let cume;
        return {
            init: ()=>cume = 0,
            next: (w)=>{
                const d = w.data, c = w.compare;
                let i = w.index;
                if (cume < i) {
                    while(i + 1 < d.length && !c(d[i], d[i + 1]))++i;
                    cume = i;
                }
                return (1 + cume) / d.length;
            }
        };
    },
    ntile: function(field, num) {
        num = +num;
        if (!(num > 0)) (0, $4SWbq.error)("ntile num must be greater than zero.");
        const cume = WindowOps.cume_dist(), next = cume.next;
        return {
            init: cume.init,
            next: (w)=>Math.ceil(num * next(w))
        };
    },
    lag: function(field, offset) {
        offset = +offset || 1;
        return {
            next: (w)=>{
                const i = w.index - offset;
                return i >= 0 ? field(w.data[i]) : null;
            }
        };
    },
    lead: function(field, offset) {
        offset = +offset || 1;
        return {
            next: (w)=>{
                const i = w.index + offset, d = w.data;
                return i < d.length ? field(d[i]) : null;
            }
        };
    },
    first_value: function(field) {
        return {
            next: (w)=>field(w.data[w.i0])
        };
    },
    last_value: function(field) {
        return {
            next: (w)=>field(w.data[w.i1 - 1])
        };
    },
    nth_value: function(field, nth) {
        nth = +nth;
        if (!(nth > 0)) (0, $4SWbq.error)("nth_value nth must be greater than zero.");
        return {
            next: (w)=>{
                const i = w.i0 + (nth - 1);
                return i < w.i1 ? field(w.data[i]) : null;
            }
        };
    },
    prev_value: function(field) {
        let prev;
        return {
            init: ()=>prev = null,
            next: (w)=>{
                const v = field(w.data[w.index]);
                return v != null ? prev = v : prev;
            }
        };
    },
    next_value: function(field) {
        let v, i;
        return {
            init: ()=>(v = null, i = -1),
            next: (w)=>{
                const d = w.data;
                return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);
            }
        };
    }
};
function find(field, data, index) {
    for(let n = data.length; index < n; ++index){
        const v = field(data[index]);
        if (v != null) return index;
    }
    return -1;
}
const ValidWindowOps = Object.keys(WindowOps);
function WindowState(_) {
    const ops = (0, $4SWbq.array)(_.ops), fields = (0, $4SWbq.array)(_.fields), params = (0, $4SWbq.array)(_.params), as = (0, $4SWbq.array)(_.as), outputs = this.outputs = [], windows = this.windows = [], inputs = {}, map = {}, counts = [], measures = [];
    let countOnly = true;
    function visitInputs(f) {
        (0, $4SWbq.array)((0, $4SWbq.accessorFields)(f)).forEach((_)=>inputs[_] = 1);
    }
    visitInputs(_.sort);
    ops.forEach((op, i)=>{
        const field = fields[i], mname = (0, $4SWbq.accessorName)(field), name = measureName(op, mname, as[i]);
        visitInputs(field);
        outputs.push(name);
        // Window operation
        if ((0, $4SWbq.hasOwnProperty)(WindowOps, op)) windows.push(WindowOp(op, fields[i], params[i], name));
        else {
            if (field == null && op !== "count") (0, $4SWbq.error)("Null aggregate field specified.");
            if (op === "count") {
                counts.push(name);
                return;
            }
            countOnly = false;
            let m = map[mname];
            if (!m) {
                m = map[mname] = [];
                m.field = field;
                measures.push(m);
            }
            m.push(createMeasure(op, name));
        }
    });
    if (counts.length || measures.length) this.cell = cell(measures, counts, countOnly);
    this.inputs = Object.keys(inputs);
}
const prototype = WindowState.prototype;
prototype.init = function() {
    this.windows.forEach((_)=>_.init());
    if (this.cell) this.cell.init();
};
prototype.update = function(w, t) {
    const cell = this.cell, wind = this.windows, data = w.data, m = wind && wind.length;
    let j;
    if (cell) {
        for(j = w.p0; j < w.i0; ++j)cell.rem(data[j]);
        for(j = w.p1; j < w.i1; ++j)cell.add(data[j]);
        cell.set(t);
    }
    for(j = 0; j < m; ++j)wind[j].update(w, t);
};
function cell(measures, counts, countOnly) {
    measures = measures.map((m)=>compileMeasures(m, m.field));
    const cell = {
        num: 0,
        agg: null,
        store: false,
        count: counts
    };
    if (!countOnly) {
        var n = measures.length, a = cell.agg = Array(n), i = 0;
        for(; i < n; ++i)a[i] = new measures[i](cell);
    }
    if (cell.store) var store = cell.data = new TupleStore();
    cell.add = function(t) {
        cell.num += 1;
        if (countOnly) return;
        if (store) store.add(t);
        for(let i = 0; i < n; ++i)a[i].add(a[i].get(t), t);
    };
    cell.rem = function(t) {
        cell.num -= 1;
        if (countOnly) return;
        if (store) store.rem(t);
        for(let i = 0; i < n; ++i)a[i].rem(a[i].get(t), t);
    };
    cell.set = function(t) {
        let i, n;
        // consolidate stored values
        if (store) store.values();
        // update tuple properties
        for(i = 0, n = counts.length; i < n; ++i)t[counts[i]] = cell.num;
        if (!countOnly) for(i = 0, n = a.length; i < n; ++i)a[i].set(t);
    };
    cell.init = function() {
        cell.num = 0;
        if (store) store.reset();
        for(let i = 0; i < n; ++i)a[i].init();
    };
    return cell;
}
/**
 * Perform window calculations and write results to the input stream.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
 * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors
 *   for data fields to use as inputs to window operations.
 * @param {Array<*>} [params.params] - An array of parameter values for window operations.
 * @param {Array<string>} [params.as] - An array of output field names for window operations.
 * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
 * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
 *   number alone, ignoring peers with identical sort values. If false (default),
 *   the window boundaries will be adjusted to include peer values.
 */ function Window(params) {
    (0, $4jOgW.Transform).call(this, {}, params);
    this._mlen = 0;
    this._mods = [];
}
Window.Definition = {
    "type": "Window",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "ops",
            "type": "enum",
            "array": true,
            "values": ValidWindowOps.concat(ValidAggregateOps)
        },
        {
            "name": "params",
            "type": "number",
            "null": true,
            "array": true
        },
        {
            "name": "fields",
            "type": "field",
            "null": true,
            "array": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "array": true
        },
        {
            "name": "frame",
            "type": "number",
            "null": true,
            "array": true,
            "length": 2,
            "default": [
                null,
                0
            ]
        },
        {
            "name": "ignorePeers",
            "type": "boolean",
            "default": false
        }
    ]
};
(0, $4SWbq.inherits)(Window, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        this.stamp = pulse.stamp;
        const mod = _.modified(), cmp = (0, $4jOgW.stableCompare)(_.sort), key = groupkey(_.groupby), group = (t)=>this.group(key(t));
        // initialize window state
        let state = this.state;
        if (!state || mod) state = this.state = new WindowState(_);
        // partition input tuples
        if (mod || pulse.modified(state.inputs)) {
            this.value = {};
            pulse.visit(pulse.SOURCE, (t)=>group(t).add(t));
        } else {
            pulse.visit(pulse.REM, (t)=>group(t).remove(t));
            pulse.visit(pulse.ADD, (t)=>group(t).add(t));
        }
        // perform window calculations for each modified partition
        for(let i = 0, n = this._mlen; i < n; ++i)processPartition(this._mods[i], state, cmp, _);
        this._mlen = 0;
        this._mods = [];
        // TODO don't reflow everything?
        return pulse.reflow(mod).modifies(state.outputs);
    },
    group (key) {
        let group = this.value[key];
        if (!group) {
            group = this.value[key] = SortedList((0, $4jOgW.tupleid));
            group.stamp = -1;
        }
        if (group.stamp < this.stamp) {
            group.stamp = this.stamp;
            this._mods[this._mlen++] = group;
        }
        return group;
    }
});
function processPartition(list, state, cmp, _) {
    const sort = _.sort, range = sort && !_.ignorePeers, frame = _.frame || [
        null,
        0
    ], data = list.data(cmp), // use cmp for stable sort
    n = data.length, b = range ? (0, $bytjh.default)(sort) : null, w = {
        i0: 0,
        i1: 0,
        p0: 0,
        p1: 0,
        index: 0,
        data: data,
        compare: sort || (0, $4SWbq.constant)(-1)
    };
    state.init();
    for(let i = 0; i < n; ++i){
        setWindow(w, frame, i, n);
        if (range) adjustRange(w, b);
        state.update(w, data[i]);
    }
}
function setWindow(w, f, i, n) {
    w.p0 = w.i0;
    w.p1 = w.i1;
    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
    w.index = i;
}
// if frame type is 'range', adjust window for peer values
function adjustRange(w, bisect) {
    const r0 = w.i0, r1 = w.i1 - 1, c = w.compare, d = w.data, n = d.length - 1;
    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);
    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);
}

});
parcelRegister("7Par0", function(module, exports) {

$parcel$export(module.exports, "quantiles", () => $5b2563ee1702b79d$export$4f22ff13861e6176);
$parcel$export(module.exports, "quartiles", () => $5b2563ee1702b79d$export$b830f8ccba5f9973);
$parcel$export(module.exports, "bandwidthNRD", () => $5b2563ee1702b79d$export$4841885e12882196);
$parcel$export(module.exports, "bin", () => $5b2563ee1702b79d$export$f03e751d9cddb7a);
$parcel$export(module.exports, "random", () => $5b2563ee1702b79d$export$4385e60b38654f68);
$parcel$export(module.exports, "setRandom", () => $5b2563ee1702b79d$export$3ba5cb2c014ef7d5);
$parcel$export(module.exports, "bootstrapCI", () => $5b2563ee1702b79d$export$a8d9c22f793f1a56);
$parcel$export(module.exports, "dotbin", () => $5b2563ee1702b79d$export$e2c5c1d6d6dd3c84);
$parcel$export(module.exports, "randomLCG", () => $5b2563ee1702b79d$export$3adaf7a2cec043a3);
$parcel$export(module.exports, "randomInteger", () => $5b2563ee1702b79d$export$3f522a9c938dfb72);
$parcel$export(module.exports, "sampleNormal", () => $5b2563ee1702b79d$export$d71f73833adfb960);
$parcel$export(module.exports, "densityNormal", () => $5b2563ee1702b79d$export$2cebfd6e519fccd6);
$parcel$export(module.exports, "cumulativeNormal", () => $5b2563ee1702b79d$export$a1b398a68ce33c9f);
$parcel$export(module.exports, "quantileNormal", () => $5b2563ee1702b79d$export$44a3dd5ce9acee67);
$parcel$export(module.exports, "randomNormal", () => $5b2563ee1702b79d$export$a0ac5549a8bec918);
$parcel$export(module.exports, "randomKDE", () => $5b2563ee1702b79d$export$33a5a65a6fdc29c0);
$parcel$export(module.exports, "sampleLogNormal", () => $5b2563ee1702b79d$export$b41a4ccd7a5351d8);
$parcel$export(module.exports, "densityLogNormal", () => $5b2563ee1702b79d$export$e50ab9352329aab3);
$parcel$export(module.exports, "cumulativeLogNormal", () => $5b2563ee1702b79d$export$1e361521ada22cb6);
$parcel$export(module.exports, "quantileLogNormal", () => $5b2563ee1702b79d$export$c67156fe6ab06259);
$parcel$export(module.exports, "randomLogNormal", () => $5b2563ee1702b79d$export$380583ba968187a);
$parcel$export(module.exports, "randomMixture", () => $5b2563ee1702b79d$export$c6e35f31bf46fdb1);
$parcel$export(module.exports, "sampleUniform", () => $5b2563ee1702b79d$export$856792c6103b1431);
$parcel$export(module.exports, "densityUniform", () => $5b2563ee1702b79d$export$3e41073eeaa2d6e0);
$parcel$export(module.exports, "cumulativeUniform", () => $5b2563ee1702b79d$export$8fb31259f62c7713);
$parcel$export(module.exports, "quantileUniform", () => $5b2563ee1702b79d$export$c747639047428f74);
$parcel$export(module.exports, "randomUniform", () => $5b2563ee1702b79d$export$bd6fd37822e292fa);
$parcel$export(module.exports, "regressionConstant", () => $5b2563ee1702b79d$export$ce148c5d8bdde96d);
$parcel$export(module.exports, "regressionLinear", () => $5b2563ee1702b79d$export$8581f169d7064433);
$parcel$export(module.exports, "regressionLog", () => $5b2563ee1702b79d$export$f299a437098fc12e);
$parcel$export(module.exports, "regressionExp", () => $5b2563ee1702b79d$export$86fc9f1e70fe5288);
$parcel$export(module.exports, "regressionPow", () => $5b2563ee1702b79d$export$520be39c84bef16f);
$parcel$export(module.exports, "regressionQuad", () => $5b2563ee1702b79d$export$1f680e2407d6074f);
$parcel$export(module.exports, "regressionPoly", () => $5b2563ee1702b79d$export$4d65ad0f5e9f038d);
$parcel$export(module.exports, "regressionLoess", () => $5b2563ee1702b79d$export$7579225e0d8dc13b);
$parcel$export(module.exports, "sampleCurve", () => $5b2563ee1702b79d$export$c05e4c3efcc8e38a);

var $fAbgM = parcelRequire("fAbgM");
var $9Fnr7 = parcelRequire("9Fnr7");
var $fExah = parcelRequire("fExah");
var $5aVPC = parcelRequire("5aVPC");
function* $5b2563ee1702b79d$var$numbers(values, valueof) {
    if (valueof == null) {
        for (let value of values)if (value != null && value !== "" && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value of values){
            value = valueof(value, ++index, values);
            if (value != null && value !== "" && (value = +value) >= value) yield value;
        }
    }
}
function $5b2563ee1702b79d$export$4f22ff13861e6176(array, p, f) {
    const values = Float64Array.from($5b2563ee1702b79d$var$numbers(array, f));
    // don't depend on return value from typed array sort call
    // protects against undefined sort results in Safari (vega/vega-lite#4964)
    values.sort((0, $fAbgM.default));
    return p.map((_)=>(0, $5aVPC.quantileSorted)(values, _));
}
function $5b2563ee1702b79d$export$b830f8ccba5f9973(array, f) {
    return $5b2563ee1702b79d$export$4f22ff13861e6176(array, [
        0.25,
        0.50,
        0.75
    ], f);
}
// Scott, D. W. (1992) Multivariate Density Estimation:
// Theory, Practice, and Visualization. Wiley.
function $5b2563ee1702b79d$export$4841885e12882196(array, f) {
    const n = array.length, d = (0, $9Fnr7.default)(array, f), q = $5b2563ee1702b79d$export$b830f8ccba5f9973(array, f), h = (q[2] - q[0]) / 1.34, v = Math.min(d, h) || d || Math.abs(q[0]) || 1;
    return 1.06 * v * Math.pow(n, -0.2);
}
function $5b2563ee1702b79d$export$f03e751d9cddb7a(_) {
    // determine range
    const maxb = _.maxbins || 20, base = _.base || 10, logb = Math.log(base), div = _.divide || [
        5,
        2
    ];
    let min = _.extent[0], max = _.extent[1], step, level, minstep, v, i, n;
    const span = _.span || max - min || Math.abs(min) || 1;
    if (_.step) // if step size is explicitly given, use that
    step = _.step;
    else if (_.steps) {
        // if provided, limit choice to acceptable step sizes
        v = span / maxb;
        for(i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);
        step = _.steps[Math.max(0, i - 1)];
    } else {
        // else use span to determine step size
        level = Math.ceil(Math.log(maxb) / logb);
        minstep = _.minstep || 0;
        step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level));
        // increase step size if too many bins
        while(Math.ceil(span / step) > maxb)step *= base;
        // decrease step size if allowed
        for(i = 0, n = div.length; i < n; ++i){
            v = step / div[i];
            if (v >= minstep && span / v <= maxb) step = v;
        }
    }
    // update precision, min and max
    v = Math.log(step);
    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1, eps = Math.pow(base, -precision - 1);
    if (_.nice || _.nice === undefined) {
        v = Math.floor(min / step + eps) * step;
        min = min < v ? v - step : v;
        max = Math.ceil(max / step) * step;
    }
    return {
        start: min,
        stop: max === min ? min + step : max,
        step: step
    };
}
var $5b2563ee1702b79d$export$4385e60b38654f68 = Math.random;
function $5b2563ee1702b79d$export$3ba5cb2c014ef7d5(r) {
    $5b2563ee1702b79d$export$4385e60b38654f68 = r;
}
function $5b2563ee1702b79d$export$a8d9c22f793f1a56(array, samples, alpha, f) {
    if (!array.length) return [
        undefined,
        undefined
    ];
    const values = Float64Array.from($5b2563ee1702b79d$var$numbers(array, f)), n = values.length, m = samples;
    let a, i, j, mu;
    for(j = 0, mu = Array(m); j < m; ++j){
        for(a = 0, i = 0; i < n; ++i)a += values[~~($5b2563ee1702b79d$export$4385e60b38654f68() * n)];
        mu[j] = a / n;
    }
    mu.sort((0, $fAbgM.default));
    return [
        (0, $5aVPC.default)(mu, alpha / 2),
        (0, $5aVPC.default)(mu, 1 - alpha / 2)
    ];
}
// Dot density binning for dot plot construction.
// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
function $5b2563ee1702b79d$export$e2c5c1d6d6dd3c84(array, step, smooth, f) {
    f = f || ((_)=>_);
    const n = array.length, v = new Float64Array(n);
    let i = 0, j = 1, a = f(array[0]), b = a, w = a + step, x;
    for(; j < n; ++j){
        x = f(array[j]);
        if (x >= w) {
            b = (a + b) / 2;
            for(; i < j; ++i)v[i] = b;
            w = x + step;
            a = x;
        }
        b = x;
    }
    b = (a + b) / 2;
    for(; i < j; ++i)v[i] = b;
    return smooth ? $5b2563ee1702b79d$var$smoothing(v, step + step / 4) : v;
}
// perform smoothing to reduce variance
// swap points between "adjacent" stacks
// Wilkinson defines adjacent as within step/4 units
function $5b2563ee1702b79d$var$smoothing(v, thresh) {
    const n = v.length;
    let a = 0, b = 1, c, d;
    // get left stack
    while(v[a] === v[b])++b;
    while(b < n){
        // get right stack
        c = b + 1;
        while(v[b] === v[c])++c;
        // are stacks adjacent?
        // if so, compare sizes and swap as needed
        if (v[b] - v[b - 1] < thresh) {
            d = b + (a + c - b - b >> 1);
            while(d < b)v[d++] = v[b];
            while(d > b)v[d--] = v[a];
        }
        // update left stack indices
        a = b;
        b = c;
    }
    return v;
}
function $5b2563ee1702b79d$export$3adaf7a2cec043a3(seed) {
    // Random numbers using a Linear Congruential Generator with seed value
    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator
    return function() {
        seed = (1103515245 * seed + 12345) % 2147483647;
        return seed / 2147483647;
    };
}
function $5b2563ee1702b79d$export$3f522a9c938dfb72(min, max) {
    if (max == null) {
        max = min;
        min = 0;
    }
    let a, b, d;
    const dist = {
        min (_) {
            if (arguments.length) {
                a = _ || 0;
                d = b - a;
                return dist;
            } else return a;
        },
        max (_) {
            if (arguments.length) {
                b = _ || 0;
                d = b - a;
                return dist;
            } else return b;
        },
        sample () {
            return a + Math.floor(d * $5b2563ee1702b79d$export$4385e60b38654f68());
        },
        pdf (x) {
            return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;
        },
        cdf (x) {
            const v = Math.floor(x);
            return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;
        },
        icdf (p) {
            return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;
        }
    };
    return dist.min(min).max(max);
}
const $5b2563ee1702b79d$var$SQRT2PI = Math.sqrt(2 * Math.PI);
const $5b2563ee1702b79d$var$SQRT2 = Math.SQRT2;
let $5b2563ee1702b79d$var$nextSample = NaN;
function $5b2563ee1702b79d$export$d71f73833adfb960(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    let x = 0, y = 0, rds, c;
    if ($5b2563ee1702b79d$var$nextSample === $5b2563ee1702b79d$var$nextSample) {
        x = $5b2563ee1702b79d$var$nextSample;
        $5b2563ee1702b79d$var$nextSample = NaN;
    } else {
        do {
            x = $5b2563ee1702b79d$export$4385e60b38654f68() * 2 - 1;
            y = $5b2563ee1702b79d$export$4385e60b38654f68() * 2 - 1;
            rds = x * x + y * y;
        }while (rds === 0 || rds > 1);
        c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform
        x *= c;
        $5b2563ee1702b79d$var$nextSample = y * c;
    }
    return mean + x * stdev;
}
function $5b2563ee1702b79d$export$2cebfd6e519fccd6(value, mean, stdev) {
    stdev = stdev == null ? 1 : stdev;
    const z = (value - (mean || 0)) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * $5b2563ee1702b79d$var$SQRT2PI);
}
// Approximation from West (2009)
// Better Approximations to Cumulative Normal Functions
function $5b2563ee1702b79d$export$a1b398a68ce33c9f(value, mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (value - mean) / stdev, Z = Math.abs(z);
    let cd;
    if (Z > 37) cd = 0;
    else {
        const exp = Math.exp(-Z * Z / 2);
        let sum;
        if (Z < 7.07106781186547) {
            sum = 3.52624965998911e-02 * Z + 0.700383064443688;
            sum = sum * Z + 6.37396220353165;
            sum = sum * Z + 33.912866078383;
            sum = sum * Z + 112.079291497871;
            sum = sum * Z + 221.213596169931;
            sum = sum * Z + 220.206867912376;
            cd = exp * sum;
            sum = 8.83883476483184e-02 * Z + 1.75566716318264;
            sum = sum * Z + 16.064177579207;
            sum = sum * Z + 86.7807322029461;
            sum = sum * Z + 296.564248779674;
            sum = sum * Z + 637.333633378831;
            sum = sum * Z + 793.826512519948;
            sum = sum * Z + 440.413735824752;
            cd = cd / sum;
        } else {
            sum = Z + 0.65;
            sum = Z + 4 / sum;
            sum = Z + 3 / sum;
            sum = Z + 2 / sum;
            sum = Z + 1 / sum;
            cd = exp / sum / 2.506628274631;
        }
    }
    return z > 0 ? 1 - cd : cd;
}
// Approximation of Probit function using inverse error function.
function $5b2563ee1702b79d$export$44a3dd5ce9acee67(p, mean, stdev) {
    if (p < 0 || p > 1) return NaN;
    return (mean || 0) + (stdev == null ? 1 : stdev) * $5b2563ee1702b79d$var$SQRT2 * $5b2563ee1702b79d$var$erfinv(2 * p - 1);
}
// Approximate inverse error function. Implementation from "Approximating
// the erfinv function" by Mike Giles, GPU Computing Gems, volume 2, 2010.
// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0
function $5b2563ee1702b79d$var$erfinv(x) {
    // beware that the logarithm argument must be
    // commputed as (1.0 - x) * (1.0 + x),
    // it must NOT be simplified as 1.0 - x * x as this
    // would induce rounding errors near the boundaries +/-1
    let w = -Math.log((1 - x) * (1 + x)), p;
    if (w < 6.25) {
        w -= 3.125;
        p = -0.00000000000000000000364441206401782;
        p = -0.00000000000000000016850591381820166 + p * w;
        p = 1.2858480715256400167e-18 + p * w;
        p = 1.115787767802518096e-17 + p * w;
        p = -0.0000000000000001333171662854621 + p * w;
        p = 2.0972767875968561637e-17 + p * w;
        p = 6.6376381343583238325e-15 + p * w;
        p = -0.00000000000004054566272975207 + p * w;
        p = -0.00000000000008151934197605472 + p * w;
        p = 2.6335093153082322977e-12 + p * w;
        p = -0.000000000012975133253453532 + p * w;
        p = -0.00000000005415412054294628 + p * w;
        p = 1.051212273321532285e-09 + p * w;
        p = -0.000000004112633980346984 + p * w;
        p = -0.000000029070369957882005 + p * w;
        p = 4.2347877827932403518e-07 + p * w;
        p = -0.0000013654692000834679 + p * w;
        p = -0.000013882523362786469 + p * w;
        p = 0.0001867342080340571352 + p * w;
        p = -0.000740702534166267 + p * w;
        p = -0.006033670871430149 + p * w;
        p = 0.24015818242558961693 + p * w;
        p = 1.6536545626831027356 + p * w;
    } else if (w < 16.0) {
        w = Math.sqrt(w) - 3.25;
        p = 2.2137376921775787049e-09;
        p = 9.0756561938885390979e-08 + p * w;
        p = -0.00000027517406297064545 + p * w;
        p = 1.8239629214389227755e-08 + p * w;
        p = 1.5027403968909827627e-06 + p * w;
        p = -0.000004013867526981546 + p * w;
        p = 2.9234449089955446044e-06 + p * w;
        p = 1.2475304481671778723e-05 + p * w;
        p = -0.000047318229009055734 + p * w;
        p = 6.8284851459573175448e-05 + p * w;
        p = 2.4031110387097893999e-05 + p * w;
        p = -0.0003550375203628475 + p * w;
        p = 0.00095328937973738049703 + p * w;
        p = -0.0016882755560235047 + p * w;
        p = 0.0024914420961078508066 + p * w;
        p = -0.003751208507569241 + p * w;
        p = 0.005370914553590063617 + p * w;
        p = 1.0052589676941592334 + p * w;
        p = 3.0838856104922207635 + p * w;
    } else if (Number.isFinite(w)) {
        w = Math.sqrt(w) - 5.0;
        p = -0.000000000027109920616438573;
        p = -0.0000000002555641816996525 + p * w;
        p = 1.5076572693500548083e-09 + p * w;
        p = -0.000000003789465440126737 + p * w;
        p = 7.6157012080783393804e-09 + p * w;
        p = -0.00000001496002662714924 + p * w;
        p = 2.9147953450901080826e-08 + p * w;
        p = -0.00000006771199775845234 + p * w;
        p = 2.2900482228026654717e-07 + p * w;
        p = -0.00000099298272942317 + p * w;
        p = 4.5260625972231537039e-06 + p * w;
        p = -0.00001968177810553167 + p * w;
        p = 7.5995277030017761139e-05 + p * w;
        p = -0.00021503011930044477 + p * w;
        p = -0.00013871931833623122 + p * w;
        p = 1.0103004648645343977 + p * w;
        p = 4.8499064014085844221 + p * w;
    } else p = Infinity;
    return p * x;
}
function $5b2563ee1702b79d$export$a0ac5549a8bec918(mean, stdev) {
    let mu, sigma;
    const dist = {
        mean (_) {
            if (arguments.length) {
                mu = _ || 0;
                return dist;
            } else return mu;
        },
        stdev (_) {
            if (arguments.length) {
                sigma = _ == null ? 1 : _;
                return dist;
            } else return sigma;
        },
        sample: ()=>$5b2563ee1702b79d$export$d71f73833adfb960(mu, sigma),
        pdf: (value)=>$5b2563ee1702b79d$export$2cebfd6e519fccd6(value, mu, sigma),
        cdf: (value)=>$5b2563ee1702b79d$export$a1b398a68ce33c9f(value, mu, sigma),
        icdf: (p)=>$5b2563ee1702b79d$export$44a3dd5ce9acee67(p, mu, sigma)
    };
    return dist.mean(mean).stdev(stdev);
}
function $5b2563ee1702b79d$export$33a5a65a6fdc29c0(support, bandwidth) {
    const kernel = $5b2563ee1702b79d$export$a0ac5549a8bec918();
    let n = 0;
    const dist = {
        data (_) {
            if (arguments.length) {
                support = _;
                n = _ ? _.length : 0;
                return dist.bandwidth(bandwidth);
            } else return support;
        },
        bandwidth (_) {
            if (!arguments.length) return bandwidth;
            bandwidth = _;
            if (!bandwidth && support) bandwidth = $5b2563ee1702b79d$export$4841885e12882196(support);
            return dist;
        },
        sample () {
            return support[~~($5b2563ee1702b79d$export$4385e60b38654f68() * n)] + bandwidth * kernel.sample();
        },
        pdf (x) {
            let y = 0, i = 0;
            for(; i < n; ++i)y += kernel.pdf((x - support[i]) / bandwidth);
            return y / bandwidth / n;
        },
        cdf (x) {
            let y = 0, i = 0;
            for(; i < n; ++i)y += kernel.cdf((x - support[i]) / bandwidth);
            return y / n;
        },
        icdf () {
            throw Error("KDE icdf not supported.");
        }
    };
    return dist.data(support);
}
function $5b2563ee1702b79d$export$b41a4ccd7a5351d8(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    return Math.exp(mean + $5b2563ee1702b79d$export$d71f73833adfb960() * stdev);
}
function $5b2563ee1702b79d$export$e50ab9352329aab3(value, mean, stdev) {
    if (value <= 0) return 0;
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    const z = (Math.log(value) - mean) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * $5b2563ee1702b79d$var$SQRT2PI * value);
}
function $5b2563ee1702b79d$export$1e361521ada22cb6(value, mean, stdev) {
    return $5b2563ee1702b79d$export$a1b398a68ce33c9f(Math.log(value), mean, stdev);
}
function $5b2563ee1702b79d$export$c67156fe6ab06259(p, mean, stdev) {
    return Math.exp($5b2563ee1702b79d$export$44a3dd5ce9acee67(p, mean, stdev));
}
function $5b2563ee1702b79d$export$380583ba968187a(mean, stdev) {
    let mu, sigma;
    const dist = {
        mean (_) {
            if (arguments.length) {
                mu = _ || 0;
                return dist;
            } else return mu;
        },
        stdev (_) {
            if (arguments.length) {
                sigma = _ == null ? 1 : _;
                return dist;
            } else return sigma;
        },
        sample: ()=>$5b2563ee1702b79d$export$b41a4ccd7a5351d8(mu, sigma),
        pdf: (value)=>$5b2563ee1702b79d$export$e50ab9352329aab3(value, mu, sigma),
        cdf: (value)=>$5b2563ee1702b79d$export$1e361521ada22cb6(value, mu, sigma),
        icdf: (p)=>$5b2563ee1702b79d$export$c67156fe6ab06259(p, mu, sigma)
    };
    return dist.mean(mean).stdev(stdev);
}
function $5b2563ee1702b79d$export$c6e35f31bf46fdb1(dists, weights) {
    let m = 0, w;
    function normalize(x) {
        const w = [];
        let sum = 0, i;
        for(i = 0; i < m; ++i)sum += w[i] = x[i] == null ? 1 : +x[i];
        for(i = 0; i < m; ++i)w[i] /= sum;
        return w;
    }
    const dist = {
        weights (_) {
            if (arguments.length) {
                w = normalize(weights = _ || []);
                return dist;
            }
            return weights;
        },
        distributions (_) {
            if (arguments.length) {
                if (_) {
                    m = _.length;
                    dists = _;
                } else {
                    m = 0;
                    dists = [];
                }
                return dist.weights(weights);
            }
            return dists;
        },
        sample () {
            const r = $5b2563ee1702b79d$export$4385e60b38654f68();
            let d = dists[m - 1], v = w[0], i = 0;
            // first select distribution
            for(; i < m - 1; v += w[++i])if (r < v) {
                d = dists[i];
                break;
            }
            // then sample from it
            return d.sample();
        },
        pdf (x) {
            let p = 0, i = 0;
            for(; i < m; ++i)p += w[i] * dists[i].pdf(x);
            return p;
        },
        cdf (x) {
            let p = 0, i = 0;
            for(; i < m; ++i)p += w[i] * dists[i].cdf(x);
            return p;
        },
        icdf () {
            throw Error("Mixture icdf not supported.");
        }
    };
    return dist.distributions(dists).weights(weights);
}
function $5b2563ee1702b79d$export$856792c6103b1431(min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return min + (max - min) * $5b2563ee1702b79d$export$4385e60b38654f68();
}
function $5b2563ee1702b79d$export$3e41073eeaa2d6e0(value, min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return value >= min && value <= max ? 1 / (max - min) : 0;
}
function $5b2563ee1702b79d$export$8fb31259f62c7713(value, min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);
}
function $5b2563ee1702b79d$export$c747639047428f74(p, min, max) {
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;
}
function $5b2563ee1702b79d$export$bd6fd37822e292fa(min, max) {
    let a, b;
    const dist = {
        min (_) {
            if (arguments.length) {
                a = _ || 0;
                return dist;
            } else return a;
        },
        max (_) {
            if (arguments.length) {
                b = _ == null ? 1 : _;
                return dist;
            } else return b;
        },
        sample: ()=>$5b2563ee1702b79d$export$856792c6103b1431(a, b),
        pdf: (value)=>$5b2563ee1702b79d$export$3e41073eeaa2d6e0(value, a, b),
        cdf: (value)=>$5b2563ee1702b79d$export$8fb31259f62c7713(value, a, b),
        icdf: (p)=>$5b2563ee1702b79d$export$c747639047428f74(p, a, b)
    };
    if (max == null) {
        max = min == null ? 1 : min;
        min = 0;
    }
    return dist.min(min).max(max);
}
function $5b2563ee1702b79d$export$ce148c5d8bdde96d(data, x, y) {
    let mean = 0, n = 0;
    for (const d of data){
        const val = y(d);
        if (x(d) == null || val == null || isNaN(val)) continue;
        mean += (val - mean) / ++n;
    }
    return {
        coef: [
            mean
        ],
        predict: ()=>mean,
        rSquared: 0
    };
}
// Ordinary Least Squares
function $5b2563ee1702b79d$var$ols(uX, uY, uXY, uX2) {
    const delta = uX2 - uX * uX, slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta, intercept = uY - slope * uX;
    return [
        intercept,
        slope
    ];
}
function $5b2563ee1702b79d$var$points(data, x, y, sort) {
    data = data.filter((d)=>{
        let u = x(d), v = y(d);
        return u != null && (u = +u) >= u && v != null && (v = +v) >= v;
    });
    if (sort) data.sort((a, b)=>x(a) - x(b));
    const n = data.length, X = new Float64Array(n), Y = new Float64Array(n);
    // extract values, calculate means
    let i = 0, ux = 0, uy = 0, xv, yv, d;
    for (d of data){
        X[i] = xv = +x(d);
        Y[i] = yv = +y(d);
        ++i;
        ux += (xv - ux) / i;
        uy += (yv - uy) / i;
    }
    // mean center the data
    for(i = 0; i < n; ++i){
        X[i] -= ux;
        Y[i] -= uy;
    }
    return [
        X,
        Y,
        ux,
        uy
    ];
}
function $5b2563ee1702b79d$var$visitPoints(data, x, y, callback) {
    let i = -1, u, v;
    for (const d of data){
        u = x(d);
        v = y(d);
        if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) callback(u, v, ++i);
    }
}
// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function $5b2563ee1702b79d$var$rSquared(data, x, y, uY, predict) {
    let SSE = 0, SST = 0;
    $5b2563ee1702b79d$var$visitPoints(data, x, y, (dx, dy)=>{
        const sse = dy - predict(dx), sst = dy - uY;
        SSE += sse * sse;
        SST += sst * sst;
    });
    return 1 - SSE / SST;
}
// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function $5b2563ee1702b79d$export$8581f169d7064433(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;
    $5b2563ee1702b79d$var$visitPoints(data, x, y, (dx, dy)=>{
        ++n;
        X += (dx - X) / n;
        Y += (dy - Y) / n;
        XY += (dx * dy - XY) / n;
        X2 += (dx * dx - X2) / n;
    });
    const coef = $5b2563ee1702b79d$var$ols(X, Y, XY, X2), predict = (x)=>coef[0] + coef[1] * x;
    return {
        coef: coef,
        predict: predict,
        rSquared: $5b2563ee1702b79d$var$rSquared(data, x, y, Y, predict)
    };
}
// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function $5b2563ee1702b79d$export$f299a437098fc12e(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;
    $5b2563ee1702b79d$var$visitPoints(data, x, y, (dx, dy)=>{
        ++n;
        dx = Math.log(dx);
        X += (dx - X) / n;
        Y += (dy - Y) / n;
        XY += (dx * dy - XY) / n;
        X2 += (dx * dx - X2) / n;
    });
    const coef = $5b2563ee1702b79d$var$ols(X, Y, XY, X2), predict = (x)=>coef[0] + coef[1] * Math.log(x);
    return {
        coef: coef,
        predict: predict,
        rSquared: $5b2563ee1702b79d$var$rSquared(data, x, y, Y, predict)
    };
}
function $5b2563ee1702b79d$export$86fc9f1e70fe5288(data, x, y) {
    // eslint-disable-next-line no-unused-vars
    const [xv, yv, ux, uy] = $5b2563ee1702b79d$var$points(data, x, y);
    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;
    $5b2563ee1702b79d$var$visitPoints(data, x, y, (_, dy)=>{
        dx = xv[n++];
        ly = Math.log(dy);
        xy = dx * dy;
        YL += (dy * ly - YL) / n;
        XY += (xy - XY) / n;
        XYL += (xy * ly - XYL) / n;
        X2Y += (dx * xy - X2Y) / n;
    });
    const [c0, c1] = $5b2563ee1702b79d$var$ols(XY / uy, YL / uy, XYL / uy, X2Y / uy), predict = (x)=>Math.exp(c0 + c1 * (x - ux));
    return {
        coef: [
            Math.exp(c0 - c1 * ux),
            c1
        ],
        predict: predict,
        rSquared: $5b2563ee1702b79d$var$rSquared(data, x, y, uy, predict)
    };
}
// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
function $5b2563ee1702b79d$export$520be39c84bef16f(data, x, y) {
    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;
    $5b2563ee1702b79d$var$visitPoints(data, x, y, (dx, dy)=>{
        const lx = Math.log(dx), ly = Math.log(dy);
        ++n;
        X += (lx - X) / n;
        Y += (ly - Y) / n;
        XY += (lx * ly - XY) / n;
        X2 += (lx * lx - X2) / n;
        YS += (dy - YS) / n;
    });
    const coef = $5b2563ee1702b79d$var$ols(X, Y, XY, X2), predict = (x)=>coef[0] * Math.pow(x, coef[1]);
    coef[0] = Math.exp(coef[0]);
    return {
        coef: coef,
        predict: predict,
        rSquared: $5b2563ee1702b79d$var$rSquared(data, x, y, YS, predict)
    };
}
function $5b2563ee1702b79d$export$1f680e2407d6074f(data, x, y) {
    const [xv, yv, ux, uy] = $5b2563ee1702b79d$var$points(data, x, y), n = xv.length;
    let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0, i, dx, dy, x2;
    for(i = 0; i < n;){
        dx = xv[i];
        dy = yv[i++];
        x2 = dx * dx;
        X2 += (x2 - X2) / i;
        X3 += (x2 * dx - X3) / i;
        X4 += (x2 * x2 - X4) / i;
        XY += (dx * dy - XY) / i;
        X2Y += (x2 * dy - X2Y) / i;
    }
    const X2X2 = X4 - X2 * X2, d = X2 * X2X2 - X3 * X3, a = (X2Y * X2 - XY * X3) / d, b = (XY * X2X2 - X2Y * X3) / d, c = -a * X2, predict = (x)=>{
        x = x - ux;
        return a * x * x + b * x + c + uy;
    };
    // transform coefficients back from mean-centered space
    return {
        coef: [
            c - b * ux + a * ux * ux + uy,
            b - 2 * a * ux,
            a
        ],
        predict: predict,
        rSquared: $5b2563ee1702b79d$var$rSquared(data, x, y, uy, predict)
    };
}
// Adapted from d3-regression by Harry Stevens
// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
// ... which was adapted from regression-js by Tom Alexander
// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246
// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE
function $5b2563ee1702b79d$export$4d65ad0f5e9f038d(data, x, y, order) {
    // use more efficient methods for lower orders
    if (order === 0) return $5b2563ee1702b79d$export$ce148c5d8bdde96d(data, x, y);
    if (order === 1) return $5b2563ee1702b79d$export$8581f169d7064433(data, x, y);
    if (order === 2) return $5b2563ee1702b79d$export$1f680e2407d6074f(data, x, y);
    const [xv, yv, ux, uy] = $5b2563ee1702b79d$var$points(data, x, y), n = xv.length, lhs = [], rhs = [], k = order + 1;
    let i, j, l, v, c;
    for(i = 0; i < k; ++i){
        for(l = 0, v = 0; l < n; ++l)v += Math.pow(xv[l], i) * yv[l];
        lhs.push(v);
        c = new Float64Array(k);
        for(j = 0; j < k; ++j){
            for(l = 0, v = 0; l < n; ++l)v += Math.pow(xv[l], i + j);
            c[j] = v;
        }
        rhs.push(c);
    }
    rhs.push(lhs);
    const coef = $5b2563ee1702b79d$var$gaussianElimination(rhs), predict = (x)=>{
        x -= ux;
        let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;
        for(i = 3; i < k; ++i)y += coef[i] * Math.pow(x, i);
        return y;
    };
    return {
        coef: $5b2563ee1702b79d$var$uncenter(k, coef, -ux, uy),
        predict: predict,
        rSquared: $5b2563ee1702b79d$var$rSquared(data, x, y, uy, predict)
    };
}
function $5b2563ee1702b79d$var$uncenter(k, a, x, y) {
    const z = Array(k);
    let i, j, v, c;
    // initialize to zero
    for(i = 0; i < k; ++i)z[i] = 0;
    // polynomial expansion
    for(i = k - 1; i >= 0; --i){
        v = a[i];
        c = 1;
        z[i] += v;
        for(j = 1; j <= i; ++j){
            c *= (i + 1 - j) / j; // binomial coefficent
            z[i - j] += v * Math.pow(x, j) * c;
        }
    }
    // bias term
    z[0] += y;
    return z;
}
// Given an array for a two-dimensional matrix and the polynomial order,
// solve A * x = b using Gaussian elimination.
function $5b2563ee1702b79d$var$gaussianElimination(matrix) {
    const n = matrix.length - 1, coef = [];
    let i, j, k, r, t;
    for(i = 0; i < n; ++i){
        r = i; // max row
        for(j = i + 1; j < n; ++j)if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) r = j;
        for(k = i; k < n + 1; ++k){
            t = matrix[k][i];
            matrix[k][i] = matrix[k][r];
            matrix[k][r] = t;
        }
        for(j = i + 1; j < n; ++j)for(k = n; k >= i; k--)matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];
    }
    for(j = n - 1; j >= 0; --j){
        t = 0;
        for(k = j + 1; k < n; ++k)t += matrix[k][j] * coef[k];
        coef[j] = (matrix[n][j] - t) / matrix[j][j];
    }
    return coef;
}
const $5b2563ee1702b79d$var$maxiters = 2, $5b2563ee1702b79d$var$epsilon = 1e-12;
// Adapted from science.js by Jason Davies
// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js
// License: https://github.com/jasondavies/science.js/blob/master/LICENSE
function $5b2563ee1702b79d$export$7579225e0d8dc13b(data, x, y, bandwidth) {
    const [xv, yv, ux, uy] = $5b2563ee1702b79d$var$points(data, x, y, true), n = xv.length, bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors
    yhat = new Float64Array(n), residuals = new Float64Array(n), robustWeights = new Float64Array(n).fill(1);
    for(let iter = -1; ++iter <= $5b2563ee1702b79d$var$maxiters;){
        const interval = [
            0,
            bw - 1
        ];
        for(let i = 0; i < n; ++i){
            const dx = xv[i], i0 = interval[0], i1 = interval[1], edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
            let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;
            const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!
            for(let k = i0; k <= i1; ++k){
                const xk = xv[k], yk = yv[k], w = $5b2563ee1702b79d$var$tricube(Math.abs(dx - xk) * denom) * robustWeights[k], xkw = xk * w;
                W += w;
                X += xkw;
                Y += yk * w;
                XY += yk * xkw;
                X2 += xk * xkw;
            }
            // linear regression fit
            const [a, b] = $5b2563ee1702b79d$var$ols(X / W, Y / W, XY / W, X2 / W);
            yhat[i] = a + b * dx;
            residuals[i] = Math.abs(yv[i] - yhat[i]);
            $5b2563ee1702b79d$var$updateInterval(xv, i + 1, interval);
        }
        if (iter === $5b2563ee1702b79d$var$maxiters) break;
        const medianResidual = (0, $fExah.default)(residuals);
        if (Math.abs(medianResidual) < $5b2563ee1702b79d$var$epsilon) break;
        for(let i = 0, arg, w; i < n; ++i){
            arg = residuals[i] / (6 * medianResidual);
            // default to epsilon (rather than zero) for large deviations
            // keeping weights tiny but non-zero prevents singularites
            robustWeights[i] = arg >= 1 ? $5b2563ee1702b79d$var$epsilon : (w = 1 - arg * arg) * w;
        }
    }
    return $5b2563ee1702b79d$var$output(xv, yhat, ux, uy);
}
// weighting kernel for local regression
function $5b2563ee1702b79d$var$tricube(x) {
    return (x = 1 - x * x * x) * x * x;
}
// advance sliding window interval of nearest neighbors
function $5b2563ee1702b79d$var$updateInterval(xv, i, interval) {
    const val = xv[i];
    let left = interval[0], right = interval[1] + 1;
    if (right >= xv.length) return;
    // step right if distance to new right edge is <= distance to old left edge
    // step when distance is equal to ensure movement over duplicate x values
    while(i > left && xv[right] - val <= val - xv[left]){
        interval[0] = ++left;
        interval[1] = right;
        ++right;
    }
}
// generate smoothed output points
// average points with repeated x values
function $5b2563ee1702b79d$var$output(xv, yhat, ux, uy) {
    const n = xv.length, out = [];
    let i = 0, cnt = 0, prev = [], v;
    for(; i < n; ++i){
        v = xv[i] + ux;
        if (prev[0] === v) // average output values via online update
        prev[1] += (yhat[i] - prev[1]) / ++cnt;
        else {
            // add new output point
            cnt = 0;
            prev[1] += uy;
            prev = [
                v,
                yhat[i]
            ];
            out.push(prev);
        }
    }
    prev[1] += uy;
    return out;
}
// subdivide up to accuracy of 0.5 degrees
const $5b2563ee1702b79d$var$MIN_RADIANS = 0.5 * Math.PI / 180;
// Adaptively sample an interpolated function over a domain extent
function $5b2563ee1702b79d$export$c05e4c3efcc8e38a(f, extent, minSteps, maxSteps) {
    minSteps = minSteps || 25;
    maxSteps = Math.max(minSteps, maxSteps || 200);
    const point = (x)=>[
            x,
            f(x)
        ], minX = extent[0], maxX = extent[1], span = maxX - minX, stop = span / maxSteps, prev = [
        point(minX)
    ], next = [];
    if (minSteps === maxSteps) {
        // no adaptation, sample uniform grid directly and return
        for(let i = 1; i < maxSteps; ++i)prev.push(point(minX + i / minSteps * span));
        prev.push(point(maxX));
        return prev;
    } else {
        // sample minimum points on uniform grid
        // then move on to perform adaptive refinement
        next.push(point(maxX));
        for(let i = minSteps; --i > 0;)next.push(point(minX + i / minSteps * span));
    }
    let p0 = prev[0];
    let p1 = next[next.length - 1];
    const sx = 1 / span;
    const sy = $5b2563ee1702b79d$var$scaleY(p0[1], next);
    while(p1){
        // midpoint for potential curve subdivision
        const pm = point((p0[0] + p1[0]) / 2);
        const dx = pm[0] - p0[0] >= stop;
        if (dx && $5b2563ee1702b79d$var$angleDelta(p0, pm, p1, sx, sy) > $5b2563ee1702b79d$var$MIN_RADIANS) // maximum resolution has not yet been met, and
        // subdivision midpoint is sufficiently different from endpoint
        // save subdivision, push midpoint onto the visitation stack
        next.push(pm);
        else {
            // subdivision midpoint sufficiently similar to endpoint
            // skip subdivision, store endpoint, move to next point on the stack
            p0 = p1;
            prev.push(p1);
            next.pop();
        }
        p1 = next[next.length - 1];
    }
    return prev;
}
function $5b2563ee1702b79d$var$scaleY(init, points) {
    let ymin = init;
    let ymax = init;
    const n = points.length;
    for(let i = 0; i < n; ++i){
        const y = points[i][1];
        if (y < ymin) ymin = y;
        if (y > ymax) ymax = y;
    }
    return 1 / (ymax - ymin);
}
function $5b2563ee1702b79d$var$angleDelta(p, q, r, sx, sy) {
    const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])), a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));
    return Math.abs(a0 - a1);
}

});
parcelRegister("9Fnr7", function(module, exports) {

$parcel$export(module.exports, "default", () => $709a1f610f8066c9$export$2e2bcd8739ae039);

var $WnTf0 = parcelRequire("WnTf0");
function $709a1f610f8066c9$export$2e2bcd8739ae039(values, valueof) {
    const v = (0, $WnTf0.default)(values, valueof);
    return v ? Math.sqrt(v) : v;
}

});
parcelRegister("WnTf0", function(module, exports) {

$parcel$export(module.exports, "default", () => $0af7f2f29daaf6b2$export$2e2bcd8739ae039);
function $0af7f2f29daaf6b2$export$2e2bcd8739ae039(values, valueof) {
    let count = 0;
    let delta;
    let mean = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    }
    if (count > 1) return sum / (count - 1);
}

});


parcelRegister("fExah", function(module, exports) {

$parcel$export(module.exports, "default", () => $b65451426dd86d63$export$2e2bcd8739ae039);

var $5aVPC = parcelRequire("5aVPC");
function $b65451426dd86d63$export$2e2bcd8739ae039(values, valueof) {
    return (0, $5aVPC.default)(values, 0.5, valueof);
}
function $b65451426dd86d63$export$57546ab4fd3c7a5e(values, valueof) {
    return (0, $5aVPC.quantileIndex)(values, 0.5, valueof);
}

});
parcelRegister("5aVPC", function(module, exports) {

$parcel$export(module.exports, "default", () => $3c4abf10a308b07f$export$2e2bcd8739ae039);
$parcel$export(module.exports, "quantileSorted", () => $3c4abf10a308b07f$export$f924a6cad778dddb);
$parcel$export(module.exports, "quantileIndex", () => $3c4abf10a308b07f$export$f1fcc854ecc6ce55);

var $cgvXK = parcelRequire("cgvXK");

var $c7cJx = parcelRequire("c7cJx");

var $iUsSy = parcelRequire("iUsSy");

var $3gLaZ = parcelRequire("3gLaZ");

var $gJk8x = parcelRequire("gJk8x");

var $8pAlt = parcelRequire("8pAlt");

var $jYirr = parcelRequire("jYirr");

var $4TCQH = parcelRequire("4TCQH");
function $3c4abf10a308b07f$export$2e2bcd8739ae039(values, p, valueof) {
    values = Float64Array.from((0, $8pAlt.numbers)(values, valueof));
    if (!(n = values.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return (0, $iUsSy.default)(values);
    if (p >= 1) return (0, $cgvXK.default)(values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = (0, $cgvXK.default)((0, $gJk8x.default)(values, i0).subarray(0, i0 + 1)), value1 = (0, $iUsSy.default)(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
}
function $3c4abf10a308b07f$export$f924a6cad778dddb(values, p, valueof = (0, $8pAlt.default)) {
    if (!(n = values.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
}
function $3c4abf10a308b07f$export$f1fcc854ecc6ce55(values, p, valueof = (0, $8pAlt.default)) {
    if (isNaN(p = +p)) return;
    numbers = Float64Array.from(values, (_, i)=>(0, $8pAlt.default)(valueof(values[i], i, values)));
    if (p <= 0) return (0, $3gLaZ.default)(numbers);
    if (p >= 1) return (0, $c7cJx.default)(numbers);
    var numbers, index = Uint32Array.from(values, (_, i)=>i), j = numbers.length - 1, i = Math.floor(j * p);
    (0, $gJk8x.default)(index, i, 0, j, (i, j)=>(0, $jYirr.ascendingDefined)(numbers[i], numbers[j]));
    i = (0, $4TCQH.default)(index.subarray(0, i + 1), (i)=>numbers[i]);
    return i >= 0 ? i : -1;
}

});
parcelRegister("cgvXK", function(module, exports) {

$parcel$export(module.exports, "default", () => $8edfc5ca6ad779da$export$2e2bcd8739ae039);
function $8edfc5ca6ad779da$export$2e2bcd8739ae039(values, valueof) {
    let max;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (max < value || max === undefined && value >= value)) max = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) max = value;
    }
    return max;
}

});

parcelRegister("c7cJx", function(module, exports) {

$parcel$export(module.exports, "default", () => $8d20041106eb5eb5$export$2e2bcd8739ae039);
function $8d20041106eb5eb5$export$2e2bcd8739ae039(values, valueof) {
    let max;
    let maxIndex = -1;
    let index = -1;
    if (valueof === undefined) for (const value of values){
        ++index;
        if (value != null && (max < value || max === undefined && value >= value)) max = value, maxIndex = index;
    }
    else {
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) max = value, maxIndex = index;
    }
    return maxIndex;
}

});

parcelRegister("iUsSy", function(module, exports) {

$parcel$export(module.exports, "default", () => $dc43dbb18120e47c$export$2e2bcd8739ae039);
function $dc43dbb18120e47c$export$2e2bcd8739ae039(values, valueof) {
    let min;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (min > value || min === undefined && value >= value)) min = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) min = value;
    }
    return min;
}

});

parcelRegister("3gLaZ", function(module, exports) {

$parcel$export(module.exports, "default", () => $261775f2a02e1415$export$2e2bcd8739ae039);
function $261775f2a02e1415$export$2e2bcd8739ae039(values, valueof) {
    let min;
    let minIndex = -1;
    let index = -1;
    if (valueof === undefined) for (const value of values){
        ++index;
        if (value != null && (min > value || min === undefined && value >= value)) min = value, minIndex = index;
    }
    else {
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) min = value, minIndex = index;
    }
    return minIndex;
}

});

parcelRegister("gJk8x", function(module, exports) {

$parcel$export(module.exports, "default", () => $c2e0780bdd5bc756$export$2e2bcd8739ae039);

var $jYirr = parcelRequire("jYirr");
function $c2e0780bdd5bc756$export$2e2bcd8739ae039(array, k, left = 0, right = Infinity, compare) {
    k = Math.floor(k);
    left = Math.floor(Math.max(0, left));
    right = Math.floor(Math.min(array.length - 1, right));
    if (!(left <= k && k <= right)) return array;
    compare = compare === undefined ? (0, $jYirr.ascendingDefined) : (0, $jYirr.compareDefined)(compare);
    while(right > left){
        if (right - left > 600) {
            const n = right - left + 1;
            const m = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            $c2e0780bdd5bc756$export$2e2bcd8739ae039(array, k, newLeft, newRight, compare);
        }
        const t = array[k];
        let i = left;
        let j = right;
        $c2e0780bdd5bc756$var$swap(array, left, k);
        if (compare(array[right], t) > 0) $c2e0780bdd5bc756$var$swap(array, left, right);
        while(i < j){
            $c2e0780bdd5bc756$var$swap(array, i, j), ++i, --j;
            while(compare(array[i], t) < 0)++i;
            while(compare(array[j], t) > 0)--j;
        }
        if (compare(array[left], t) === 0) $c2e0780bdd5bc756$var$swap(array, left, j);
        else ++j, $c2e0780bdd5bc756$var$swap(array, j, right);
        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
    return array;
}
function $c2e0780bdd5bc756$var$swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
}

});
parcelRegister("jYirr", function(module, exports) {

$parcel$export(module.exports, "ascendingDefined", () => $e8a1ed073ee9b6e5$export$686e14b8469efec4);
$parcel$export(module.exports, "compareDefined", () => $e8a1ed073ee9b6e5$export$5708b2c031939e56);

var $fAbgM = parcelRequire("fAbgM");

var $fkgRy = parcelRequire("fkgRy");
function $e8a1ed073ee9b6e5$export$2e2bcd8739ae039(values, ...F) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    values = Array.from(values);
    let [f] = F;
    if (f && f.length !== 2 || F.length > 1) {
        const index = Uint32Array.from(values, (d, i)=>i);
        if (F.length > 1) {
            F = F.map((f)=>values.map(f));
            index.sort((i, j)=>{
                for (const f of F){
                    const c = $e8a1ed073ee9b6e5$export$686e14b8469efec4(f[i], f[j]);
                    if (c) return c;
                }
            });
        } else {
            f = values.map(f);
            index.sort((i, j)=>$e8a1ed073ee9b6e5$export$686e14b8469efec4(f[i], f[j]));
        }
        return (0, $fkgRy.default)(values, index);
    }
    return values.sort($e8a1ed073ee9b6e5$export$5708b2c031939e56(f));
}
function $e8a1ed073ee9b6e5$export$5708b2c031939e56(compare = (0, $fAbgM.default)) {
    if (compare === (0, $fAbgM.default)) return $e8a1ed073ee9b6e5$export$686e14b8469efec4;
    if (typeof compare !== "function") throw new TypeError("compare is not a function");
    return (a, b)=>{
        const x = compare(a, b);
        if (x || x === 0) return x;
        return (compare(b, b) === 0) - (compare(a, a) === 0);
    };
}
function $e8a1ed073ee9b6e5$export$686e14b8469efec4(a, b) {
    return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
}

});
parcelRegister("fkgRy", function(module, exports) {

$parcel$export(module.exports, "default", () => $b285cde4c2282a62$export$2e2bcd8739ae039);
function $b285cde4c2282a62$export$2e2bcd8739ae039(source, keys) {
    return Array.from(keys, (key)=>source[key]);
}

});



parcelRegister("8pAlt", function(module, exports) {

$parcel$export(module.exports, "default", () => $61fcd9f1a8132cc2$export$2e2bcd8739ae039);
$parcel$export(module.exports, "numbers", () => $61fcd9f1a8132cc2$export$1f6c9cc012ebacae);
function $61fcd9f1a8132cc2$export$2e2bcd8739ae039(x) {
    return x === null ? NaN : +x;
}
function* $61fcd9f1a8132cc2$export$1f6c9cc012ebacae(values, valueof) {
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) yield value;
    }
}

});

parcelRegister("4TCQH", function(module, exports) {

$parcel$export(module.exports, "default", () => $390a6f1156ae71e1$export$2e2bcd8739ae039);

var $fAbgM = parcelRequire("fAbgM");
function $390a6f1156ae71e1$export$2e2bcd8739ae039(values, compare = (0, $fAbgM.default)) {
    let max;
    let defined = false;
    if (compare.length === 1) {
        let maxValue;
        for (const element of values){
            const value = compare(element);
            if (defined ? (0, $fAbgM.default)(value, maxValue) > 0 : (0, $fAbgM.default)(value, value) === 0) {
                max = element;
                maxValue = value;
                defined = true;
            }
        }
    } else {
        for (const value of values)if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
            max = value;
            defined = true;
        }
    }
    return max;
}

});




parcelRegister("6ZzLU", function(module, exports) {

$parcel$export(module.exports, "default", () => $5174301d44e5f2a6$export$2e2bcd8739ae039);
function $5174301d44e5f2a6$export$2e2bcd8739ae039(values, valueof) {
    let count = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) ++count, sum += value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) ++count, sum += value;
    }
    if (count) return sum / count;
}

});

parcelRegister("apu36", function(module, exports) {

$parcel$export(module.exports, "default", () => $79438c4eebd2f300$export$2e2bcd8739ae039);
function $79438c4eebd2f300$export$2e2bcd8739ae039(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
    while(++i < n)range[i] = start + i * step;
    return range;
}

});


parcelRegister("31A4s", function(module, exports) {

$parcel$export(module.exports, "bound", () => $233d72095e4c228d$export$adf7c0fe6059d774);
$parcel$export(module.exports, "identifier", () => $233d72095e4c228d$export$c2ab62c7bf24634);
$parcel$export(module.exports, "mark", () => $233d72095e4c228d$export$bf7f2fce5c1cf636);
$parcel$export(module.exports, "overlap", () => $233d72095e4c228d$export$923fe2085dc4a98c);
$parcel$export(module.exports, "render", () => $233d72095e4c228d$export$b3890eb0ae9dca99);
$parcel$export(module.exports, "viewlayout", () => $233d72095e4c228d$export$cb54c266030d4746);

var $4jOgW = parcelRequire("4jOgW");

var $d6kNj = parcelRequire("d6kNj");

var $4SWbq = parcelRequire("4SWbq");
const $233d72095e4c228d$var$Top = "top";
const $233d72095e4c228d$var$Left = "left";
const $233d72095e4c228d$var$Right = "right";
const $233d72095e4c228d$var$Bottom = "bottom";
const $233d72095e4c228d$var$TopLeft = "top-left";
const $233d72095e4c228d$var$TopRight = "top-right";
const $233d72095e4c228d$var$BottomLeft = "bottom-left";
const $233d72095e4c228d$var$BottomRight = "bottom-right";
const $233d72095e4c228d$var$Start = "start";
const $233d72095e4c228d$var$Middle = "middle";
const $233d72095e4c228d$var$End = "end";
const $233d72095e4c228d$var$X = "x";
const $233d72095e4c228d$var$Y = "y";
const $233d72095e4c228d$var$Group = "group";
const $233d72095e4c228d$var$AxisRole = "axis";
const $233d72095e4c228d$var$TitleRole = "title";
const $233d72095e4c228d$var$FrameRole = "frame";
const $233d72095e4c228d$var$ScopeRole = "scope";
const $233d72095e4c228d$var$LegendRole = "legend";
const $233d72095e4c228d$var$RowHeader = "row-header";
const $233d72095e4c228d$var$RowFooter = "row-footer";
const $233d72095e4c228d$var$RowTitle = "row-title";
const $233d72095e4c228d$var$ColHeader = "column-header";
const $233d72095e4c228d$var$ColFooter = "column-footer";
const $233d72095e4c228d$var$ColTitle = "column-title";
const $233d72095e4c228d$var$Padding = "padding";
const $233d72095e4c228d$var$Symbols = "symbol";
const $233d72095e4c228d$var$Fit = "fit";
const $233d72095e4c228d$var$FitX = "fit-x";
const $233d72095e4c228d$var$FitY = "fit-y";
const $233d72095e4c228d$var$Pad = "pad";
const $233d72095e4c228d$var$None = "none";
const $233d72095e4c228d$var$All = "all";
const $233d72095e4c228d$var$Each = "each";
const $233d72095e4c228d$var$Flush = "flush";
const $233d72095e4c228d$var$Column = "column";
const $233d72095e4c228d$var$Row = "row";
/**
 * Calculate bounding boxes for scenegraph items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - The scenegraph mark instance to bound.
 */ function $233d72095e4c228d$export$adf7c0fe6059d774(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)($233d72095e4c228d$export$adf7c0fe6059d774, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const view = pulse.dataflow, mark = _.mark, type = mark.marktype, entry = (0, $d6kNj.Marks)[type], bound = entry.bound;
        let markBounds = mark.bounds, rebound;
        if (entry.nested) {
            // multi-item marks have a single bounds instance
            if (mark.items.length) view.dirty(mark.items[0]);
            markBounds = $233d72095e4c228d$var$boundItem(mark, bound);
            mark.items.forEach((item)=>{
                item.bounds.clear().union(markBounds);
            });
        } else if (type === $233d72095e4c228d$var$Group || _.modified()) {
            // operator parameters modified -> re-bound all items
            // updates group bounds in response to modified group content
            pulse.visit(pulse.MOD, (item)=>view.dirty(item));
            markBounds.clear();
            mark.items.forEach((item)=>markBounds.union($233d72095e4c228d$var$boundItem(item, bound)));
            // force reflow for axes/legends/titles to propagate any layout changes
            switch(mark.role){
                case $233d72095e4c228d$var$AxisRole:
                case $233d72095e4c228d$var$LegendRole:
                case $233d72095e4c228d$var$TitleRole:
                    pulse.reflow();
            }
        } else {
            // incrementally update bounds, re-bound mark as needed
            rebound = pulse.changed(pulse.REM);
            pulse.visit(pulse.ADD, (item)=>{
                markBounds.union($233d72095e4c228d$var$boundItem(item, bound));
            });
            pulse.visit(pulse.MOD, (item)=>{
                rebound = rebound || markBounds.alignsWith(item.bounds);
                view.dirty(item);
                markBounds.union($233d72095e4c228d$var$boundItem(item, bound));
            });
            if (rebound) {
                markBounds.clear();
                mark.items.forEach((item)=>markBounds.union(item.bounds));
            }
        }
        // ensure mark bounds do not exceed any clipping region
        (0, $d6kNj.boundClip)(mark);
        return pulse.modifies("bounds");
    }
});
function $233d72095e4c228d$var$boundItem(item, bound, opt) {
    return bound(item.bounds.clear(), item, opt);
}
const $233d72095e4c228d$var$COUNTER_NAME = ":vega_identifier:";
/**
 * Adds a unique identifier to all added tuples.
 * This transform creates a new signal that serves as an id counter.
 * As a result, the id counter is shared across all instances of this
 * transform, generating unique ids across multiple data streams. In
 * addition, this signal value can be included in a snapshot of the
 * dataflow state, enabling correct resumption of id allocation.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.as - The field name for the generated identifier.
 */ function $233d72095e4c228d$export$c2ab62c7bf24634(params) {
    (0, $4jOgW.Transform).call(this, 0, params);
}
$233d72095e4c228d$export$c2ab62c7bf24634.Definition = {
    "type": "Identifier",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "as",
            "type": "string",
            "required": true
        }
    ]
};
(0, $4SWbq.inherits)($233d72095e4c228d$export$c2ab62c7bf24634, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const counter = $233d72095e4c228d$var$getCounter(pulse.dataflow), as = _.as;
        let id = counter.value;
        pulse.visit(pulse.ADD, (t)=>t[as] = t[as] || ++id);
        counter.set(this.value = id);
        return pulse;
    }
});
function $233d72095e4c228d$var$getCounter(view) {
    return view._signals[$233d72095e4c228d$var$COUNTER_NAME] || (view._signals[$233d72095e4c228d$var$COUNTER_NAME] = view.add(0));
}
/**
 * Bind scenegraph items to a scenegraph mark instance.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.markdef - The mark definition for creating the mark.
 *   This is an object of legal scenegraph mark properties which *must* include
 *   the 'marktype' property.
 */ function $233d72095e4c228d$export$bf7f2fce5c1cf636(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)($233d72095e4c228d$export$bf7f2fce5c1cf636, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        let mark = this.value;
        // acquire mark on first invocation, bind context and group
        if (!mark) {
            mark = pulse.dataflow.scenegraph().mark(_.markdef, $233d72095e4c228d$var$lookup$1(_), _.index);
            mark.group.context = _.context;
            if (!_.context.group) _.context.group = mark.group;
            mark.source = this.source; // point to upstream collector
            mark.clip = _.clip;
            mark.interactive = _.interactive;
            this.value = mark;
        }
        // initialize entering items
        const Init = mark.marktype === $233d72095e4c228d$var$Group ? (0, $d6kNj.GroupItem) : (0, $d6kNj.Item);
        pulse.visit(pulse.ADD, (item)=>Init.call(item, mark));
        // update clipping and/or interactive status
        if (_.modified("clip") || _.modified("interactive")) {
            mark.clip = _.clip;
            mark.interactive = !!_.interactive;
            mark.zdirty = true; // force scenegraph re-eval
            pulse.reflow();
        }
        // bind items array to scenegraph mark
        mark.items = pulse.source;
        return pulse;
    }
});
function $233d72095e4c228d$var$lookup$1(_) {
    const g = _.groups, p = _.parent;
    return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
}
/**
 * Analyze items for overlap, changing opacity to hide items with
 * overlapping bounding boxes. This transform will preserve at least
 * two items (e.g., first and last) even if overlap persists.
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting items.
 * @param {object} [params.method] - The overlap removal method to apply.
 *   One of 'parity' (default, hide every other item until there is no
 *   more overlap) or 'greedy' (sequentially scan and hide and items that
 *   overlap with the last visible item).
 * @param {object} [params.boundScale] - A scale whose range should be used
 *   to bound the items. Items exceeding the bounds of the scale range
 *   will be treated as overlapping. If null or undefined, no bounds check
 *   will be applied.
 * @param {object} [params.boundOrient] - The orientation of the scale
 *   (top, bottom, left, or right) used to bound items. This parameter is
 *   ignored if boundScale is null or undefined.
 * @param {object} [params.boundTolerance] - The tolerance in pixels for
 *   bound inclusion testing (default 1). This specifies by how many pixels
 *   an item's bounds may exceed the scale range bounds and not be culled.
 * @constructor
 */ function $233d72095e4c228d$export$923fe2085dc4a98c(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
const $233d72095e4c228d$var$methods = {
    parity: (items)=>items.filter((item, i)=>i % 2 ? item.opacity = 0 : 1),
    greedy: (items, sep)=>{
        let a;
        return items.filter((b, i)=>!i || !$233d72095e4c228d$var$intersect(a.bounds, b.bounds, sep) ? (a = b, 1) : b.opacity = 0);
    }
};
// compute bounding box intersection
// including padding pixels of separation
const $233d72095e4c228d$var$intersect = (a, b, sep)=>sep > Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);
const $233d72095e4c228d$var$hasOverlap = (items, pad)=>{
    for(var i = 1, n = items.length, a = items[0].bounds, b; i < n; a = b, ++i){
        if ($233d72095e4c228d$var$intersect(a, b = items[i].bounds, pad)) return true;
    }
};
const $233d72095e4c228d$var$hasBounds = (item)=>{
    const b = item.bounds;
    return b.width() > 1 && b.height() > 1;
};
const $233d72095e4c228d$var$boundTest = (scale, orient, tolerance)=>{
    var range = scale.range(), b = new (0, $d6kNj.Bounds)();
    if (orient === $233d72095e4c228d$var$Top || orient === $233d72095e4c228d$var$Bottom) b.set(range[0], -Infinity, range[1], Infinity);
    else b.set(-Infinity, range[0], Infinity, range[1]);
    b.expand(tolerance || 1);
    return (item)=>b.encloses(item.bounds);
};
// reset all items to be fully opaque
const $233d72095e4c228d$var$reset = (source)=>{
    source.forEach((item)=>item.opacity = 1);
    return source;
};
// add all tuples to mod, fork pulse if parameters were modified
// fork prevents cross-stream tuple pollution (e.g., pulse from scale)
const $233d72095e4c228d$var$reflow = (pulse, _)=>pulse.reflow(_.modified()).modifies("opacity");
(0, $4SWbq.inherits)($233d72095e4c228d$export$923fe2085dc4a98c, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const reduce = $233d72095e4c228d$var$methods[_.method] || $233d72095e4c228d$var$methods.parity, sep = _.separation || 0;
        let source = pulse.materialize(pulse.SOURCE).source, items, test;
        if (!source || !source.length) return;
        if (!_.method) {
            // early exit if method is falsy
            if (_.modified("method")) {
                $233d72095e4c228d$var$reset(source);
                pulse = $233d72095e4c228d$var$reflow(pulse, _);
            }
            return pulse;
        }
        // skip labels with no content
        source = source.filter($233d72095e4c228d$var$hasBounds);
        // early exit, nothing to do
        if (!source.length) return;
        if (_.sort) source = source.slice().sort(_.sort);
        items = $233d72095e4c228d$var$reset(source);
        pulse = $233d72095e4c228d$var$reflow(pulse, _);
        if (items.length >= 3 && $233d72095e4c228d$var$hasOverlap(items, sep)) {
            do items = reduce(items, sep);
            while (items.length >= 3 && $233d72095e4c228d$var$hasOverlap(items, sep));
            if (items.length < 3 && !(0, $4SWbq.peek)(source).opacity) {
                if (items.length > 1) (0, $4SWbq.peek)(items).opacity = 0;
                (0, $4SWbq.peek)(source).opacity = 1;
            }
        }
        if (_.boundScale && _.boundTolerance >= 0) {
            test = $233d72095e4c228d$var$boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
            source.forEach((item)=>{
                if (!test(item)) item.opacity = 0;
            });
        }
        // re-calculate mark bounds
        const bounds = items[0].mark.bounds.clear();
        source.forEach((item)=>{
            if (item.opacity) bounds.union(item.bounds);
        });
        return pulse;
    }
});
/**
 * Queue modified scenegraph items for rendering.
 * @constructor
 */ function $233d72095e4c228d$export$b3890eb0ae9dca99(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)($233d72095e4c228d$export$b3890eb0ae9dca99, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const view = pulse.dataflow;
        pulse.visit(pulse.ALL, (item)=>view.dirty(item));
        // set z-index dirty flag as needed
        if (pulse.fields && pulse.fields["zindex"]) {
            const item = pulse.source && pulse.source[0];
            if (item) item.mark.zdirty = true;
        }
    }
});
const $233d72095e4c228d$var$tempBounds = new (0, $d6kNj.Bounds)();
function $233d72095e4c228d$var$set(item, property, value) {
    return item[property] === value ? 0 : (item[property] = value, 1);
}
function $233d72095e4c228d$var$isYAxis(mark) {
    var orient = mark.items[0].orient;
    return orient === $233d72095e4c228d$var$Left || orient === $233d72095e4c228d$var$Right;
}
function $233d72095e4c228d$var$axisIndices(datum) {
    let index = +datum.grid;
    return [
        datum.ticks ? index++ : -1,
        // ticks index
        datum.labels ? index++ : -1,
        // labels index
        index + +datum.domain // title index
    ];
}
function $233d72095e4c228d$var$axisLayout(view, axis, width, height) {
    var item = axis.items[0], datum = item.datum, delta = item.translate != null ? item.translate : 0.5, orient = item.orient, indices = $233d72095e4c228d$var$axisIndices(datum), range = item.range, offset = item.offset, position = item.position, minExtent = item.minExtent, maxExtent = item.maxExtent, title = datum.title && item.items[indices[2]].items[0], titlePadding = item.titlePadding, bounds = item.bounds, dl = title && (0, $d6kNj.multiLineOffset)(title), x = 0, y = 0, i, s;
    $233d72095e4c228d$var$tempBounds.clear().union(bounds);
    bounds.clear();
    if ((i = indices[0]) > -1) bounds.union(item.items[i].bounds);
    if ((i = indices[1]) > -1) bounds.union(item.items[i].bounds);
    // position axis group and title
    switch(orient){
        case $233d72095e4c228d$var$Top:
            x = position || 0;
            y = -offset;
            s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
            bounds.add(0, -s).add(range, 0);
            if (title) $233d72095e4c228d$var$axisTitleLayout(view, title, s, titlePadding, dl, 0, -1, bounds);
            break;
        case $233d72095e4c228d$var$Left:
            x = -offset;
            y = position || 0;
            s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
            bounds.add(-s, 0).add(0, range);
            if (title) $233d72095e4c228d$var$axisTitleLayout(view, title, s, titlePadding, dl, 1, -1, bounds);
            break;
        case $233d72095e4c228d$var$Right:
            x = width + offset;
            y = position || 0;
            s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
            bounds.add(0, 0).add(s, range);
            if (title) $233d72095e4c228d$var$axisTitleLayout(view, title, s, titlePadding, dl, 1, 1, bounds);
            break;
        case $233d72095e4c228d$var$Bottom:
            x = position || 0;
            y = height + offset;
            s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
            bounds.add(0, 0).add(range, s);
            if (title) $233d72095e4c228d$var$axisTitleLayout(view, title, s, titlePadding, 0, 0, 1, bounds);
            break;
        default:
            x = item.x;
            y = item.y;
    }
    // update bounds
    (0, $d6kNj.boundStroke)(bounds.translate(x, y), item);
    if ($233d72095e4c228d$var$set(item, "x", x + delta) | $233d72095e4c228d$var$set(item, "y", y + delta)) {
        item.bounds = $233d72095e4c228d$var$tempBounds;
        view.dirty(item);
        item.bounds = bounds;
        view.dirty(item);
    }
    return item.mark.bounds.clear().union(bounds);
}
function $233d72095e4c228d$var$axisTitleLayout(view, title, offset, pad, dl, isYAxis, sign, bounds) {
    const b = title.bounds;
    if (title.auto) {
        const v = sign * (offset + dl + pad);
        let dx = 0, dy = 0;
        view.dirty(title);
        isYAxis ? dx = (title.x || 0) - (title.x = v) : dy = (title.y || 0) - (title.y = v);
        title.mark.bounds.clear().union(b.translate(-dx, -dy));
        view.dirty(title);
    }
    bounds.union(b);
}
// aggregation functions for grid margin determination
const $233d72095e4c228d$var$min = (a, b)=>Math.floor(Math.min(a, b));
const $233d72095e4c228d$var$max = (a, b)=>Math.ceil(Math.max(a, b));
function $233d72095e4c228d$var$gridLayoutGroups(group) {
    var groups = group.items, n = groups.length, i = 0, mark, items;
    const views = {
        marks: [],
        rowheaders: [],
        rowfooters: [],
        colheaders: [],
        colfooters: [],
        rowtitle: null,
        coltitle: null
    };
    // layout axes, gather legends, collect bounds
    for(; i < n; ++i){
        mark = groups[i];
        items = mark.items;
        if (mark.marktype === $233d72095e4c228d$var$Group) switch(mark.role){
            case $233d72095e4c228d$var$AxisRole:
            case $233d72095e4c228d$var$LegendRole:
            case $233d72095e4c228d$var$TitleRole:
                break;
            case $233d72095e4c228d$var$RowHeader:
                views.rowheaders.push(...items);
                break;
            case $233d72095e4c228d$var$RowFooter:
                views.rowfooters.push(...items);
                break;
            case $233d72095e4c228d$var$ColHeader:
                views.colheaders.push(...items);
                break;
            case $233d72095e4c228d$var$ColFooter:
                views.colfooters.push(...items);
                break;
            case $233d72095e4c228d$var$RowTitle:
                views.rowtitle = items[0];
                break;
            case $233d72095e4c228d$var$ColTitle:
                views.coltitle = items[0];
                break;
            default:
                views.marks.push(...items);
        }
    }
    return views;
}
function $233d72095e4c228d$var$bboxFlush(item) {
    return new (0, $d6kNj.Bounds)().set(0, 0, item.width || 0, item.height || 0);
}
function $233d72095e4c228d$var$bboxFull(item) {
    const b = item.bounds.clone();
    return b.empty() ? b.set(0, 0, 0, 0) : b.translate(-(item.x || 0), -(item.y || 0));
}
function $233d72095e4c228d$var$get(opt, key, d) {
    const v = (0, $4SWbq.isObject)(opt) ? opt[key] : opt;
    return v != null ? v : d !== undefined ? d : 0;
}
function $233d72095e4c228d$var$offsetValue(v) {
    return v < 0 ? Math.ceil(-v) : 0;
}
function $233d72095e4c228d$var$gridLayout(view, groups, opt) {
    var dirty = !opt.nodirty, bbox = opt.bounds === $233d72095e4c228d$var$Flush ? $233d72095e4c228d$var$bboxFlush : $233d72095e4c228d$var$bboxFull, bounds = $233d72095e4c228d$var$tempBounds.set(0, 0, 0, 0), alignCol = $233d72095e4c228d$var$get(opt.align, $233d72095e4c228d$var$Column), alignRow = $233d72095e4c228d$var$get(opt.align, $233d72095e4c228d$var$Row), padCol = $233d72095e4c228d$var$get(opt.padding, $233d72095e4c228d$var$Column), padRow = $233d72095e4c228d$var$get(opt.padding, $233d72095e4c228d$var$Row), ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), n = groups.length, xOffset = Array(n), xExtent = Array(ncols), xMax = 0, yOffset = Array(n), yExtent = Array(nrows), yMax = 0, dx = Array(n), dy = Array(n), boxes = Array(n), m, i, c, r, b, g, px, py, x, y, offset;
    for(i = 0; i < ncols; ++i)xExtent[i] = 0;
    for(i = 0; i < nrows; ++i)yExtent[i] = 0;
    // determine offsets for each group
    for(i = 0; i < n; ++i){
        g = groups[i];
        b = boxes[i] = bbox(g);
        g.x = g.x || 0;
        dx[i] = 0;
        g.y = g.y || 0;
        dy[i] = 0;
        c = i % ncols;
        r = ~~(i / ncols);
        xMax = Math.max(xMax, px = Math.ceil(b.x2));
        yMax = Math.max(yMax, py = Math.ceil(b.y2));
        xExtent[c] = Math.max(xExtent[c], px);
        yExtent[r] = Math.max(yExtent[r], py);
        xOffset[i] = padCol + $233d72095e4c228d$var$offsetValue(b.x1);
        yOffset[i] = padRow + $233d72095e4c228d$var$offsetValue(b.y1);
        if (dirty) view.dirty(groups[i]);
    }
    // set initial alignment offsets
    for(i = 0; i < n; ++i){
        if (i % ncols === 0) xOffset[i] = 0;
        if (i < ncols) yOffset[i] = 0;
    }
    // enforce column alignment constraints
    if (alignCol === $233d72095e4c228d$var$Each) for(c = 1; c < ncols; ++c){
        for(offset = 0, i = c; i < n; i += ncols)if (offset < xOffset[i]) offset = xOffset[i];
        for(i = c; i < n; i += ncols)xOffset[i] = offset + xExtent[c - 1];
    }
    else if (alignCol === $233d72095e4c228d$var$All) {
        for(offset = 0, i = 0; i < n; ++i)if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
        for(i = 0; i < n; ++i)if (i % ncols) xOffset[i] = offset + xMax;
    } else {
        for(alignCol = false, c = 1; c < ncols; ++c)for(i = c; i < n; i += ncols)xOffset[i] += xExtent[c - 1];
    }
    // enforce row alignment constraints
    if (alignRow === $233d72095e4c228d$var$Each) for(r = 1; r < nrows; ++r){
        for(offset = 0, i = r * ncols, m = i + ncols; i < m; ++i)if (offset < yOffset[i]) offset = yOffset[i];
        for(i = r * ncols; i < m; ++i)yOffset[i] = offset + yExtent[r - 1];
    }
    else if (alignRow === $233d72095e4c228d$var$All) {
        for(offset = 0, i = ncols; i < n; ++i)if (offset < yOffset[i]) offset = yOffset[i];
        for(i = ncols; i < n; ++i)yOffset[i] = offset + yMax;
    } else {
        for(alignRow = false, r = 1; r < nrows; ++r)for(i = r * ncols, m = i + ncols; i < m; ++i)yOffset[i] += yExtent[r - 1];
    }
    // perform horizontal grid layout
    for(x = 0, i = 0; i < n; ++i){
        x = xOffset[i] + (i % ncols ? x : 0);
        dx[i] += x - groups[i].x;
    }
    // perform vertical grid layout
    for(c = 0; c < ncols; ++c)for(y = 0, i = c; i < n; i += ncols){
        y += yOffset[i];
        dy[i] += y - groups[i].y;
    }
    // perform horizontal centering
    if (alignCol && $233d72095e4c228d$var$get(opt.center, $233d72095e4c228d$var$Column) && nrows > 1) for(i = 0; i < n; ++i){
        b = alignCol === $233d72095e4c228d$var$All ? xMax : xExtent[i % ncols];
        x = b - boxes[i].x2 - groups[i].x - dx[i];
        if (x > 0) dx[i] += x / 2;
    }
    // perform vertical centering
    if (alignRow && $233d72095e4c228d$var$get(opt.center, $233d72095e4c228d$var$Row) && ncols !== 1) for(i = 0; i < n; ++i){
        b = alignRow === $233d72095e4c228d$var$All ? yMax : yExtent[~~(i / ncols)];
        y = b - boxes[i].y2 - groups[i].y - dy[i];
        if (y > 0) dy[i] += y / 2;
    }
    // position grid relative to anchor
    for(i = 0; i < n; ++i)bounds.union(boxes[i].translate(dx[i], dy[i]));
    x = $233d72095e4c228d$var$get(opt.anchor, $233d72095e4c228d$var$X);
    y = $233d72095e4c228d$var$get(opt.anchor, $233d72095e4c228d$var$Y);
    switch($233d72095e4c228d$var$get(opt.anchor, $233d72095e4c228d$var$Column)){
        case $233d72095e4c228d$var$End:
            x -= bounds.width();
            break;
        case $233d72095e4c228d$var$Middle:
            x -= bounds.width() / 2;
    }
    switch($233d72095e4c228d$var$get(opt.anchor, $233d72095e4c228d$var$Row)){
        case $233d72095e4c228d$var$End:
            y -= bounds.height();
            break;
        case $233d72095e4c228d$var$Middle:
            y -= bounds.height() / 2;
    }
    x = Math.round(x);
    y = Math.round(y);
    // update mark positions, bounds, dirty
    bounds.clear();
    for(i = 0; i < n; ++i)groups[i].mark.bounds.clear();
    for(i = 0; i < n; ++i){
        g = groups[i];
        g.x += dx[i] += x;
        g.y += dy[i] += y;
        bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
        if (dirty) view.dirty(g);
    }
    return bounds;
}
function $233d72095e4c228d$var$trellisLayout(view, group, opt) {
    var views = $233d72095e4c228d$var$gridLayoutGroups(group), groups = views.marks, bbox = opt.bounds === $233d72095e4c228d$var$Flush ? $233d72095e4c228d$var$boundFlush : $233d72095e4c228d$var$boundFull, off = opt.offset, ncols = opt.columns || groups.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols), cells = nrows * ncols, x, y, x2, y2, anchor, band, offset;
    // -- initial grid layout
    const bounds = $233d72095e4c228d$var$gridLayout(view, groups, opt);
    if (bounds.empty()) bounds.set(0, 0, 0, 0); // empty grid
    // -- layout grid headers and footers --
    // perform row header layout
    if (views.rowheaders) {
        band = $233d72095e4c228d$var$get(opt.headerBand, $233d72095e4c228d$var$Row, null);
        x = $233d72095e4c228d$var$layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -$233d72095e4c228d$var$get(off, "rowHeader"), $233d72095e4c228d$var$min, 0, bbox, "x1", 0, ncols, 1, band);
    }
    // perform column header layout
    if (views.colheaders) {
        band = $233d72095e4c228d$var$get(opt.headerBand, $233d72095e4c228d$var$Column, null);
        y = $233d72095e4c228d$var$layoutHeaders(view, views.colheaders, groups, ncols, ncols, -$233d72095e4c228d$var$get(off, "columnHeader"), $233d72095e4c228d$var$min, 1, bbox, "y1", 0, 1, ncols, band);
    }
    // perform row footer layout
    if (views.rowfooters) {
        band = $233d72095e4c228d$var$get(opt.footerBand, $233d72095e4c228d$var$Row, null);
        x2 = $233d72095e4c228d$var$layoutHeaders(view, views.rowfooters, groups, ncols, nrows, $233d72095e4c228d$var$get(off, "rowFooter"), $233d72095e4c228d$var$max, 0, bbox, "x2", ncols - 1, ncols, 1, band);
    }
    // perform column footer layout
    if (views.colfooters) {
        band = $233d72095e4c228d$var$get(opt.footerBand, $233d72095e4c228d$var$Column, null);
        y2 = $233d72095e4c228d$var$layoutHeaders(view, views.colfooters, groups, ncols, ncols, $233d72095e4c228d$var$get(off, "columnFooter"), $233d72095e4c228d$var$max, 1, bbox, "y2", cells - ncols, 1, ncols, band);
    }
    // perform row title layout
    if (views.rowtitle) {
        anchor = $233d72095e4c228d$var$get(opt.titleAnchor, $233d72095e4c228d$var$Row);
        offset = $233d72095e4c228d$var$get(off, "rowTitle");
        offset = anchor === $233d72095e4c228d$var$End ? x2 + offset : x - offset;
        band = $233d72095e4c228d$var$get(opt.titleBand, $233d72095e4c228d$var$Row, 0.5);
        $233d72095e4c228d$var$layoutTitle(view, views.rowtitle, offset, 0, bounds, band);
    }
    // perform column title layout
    if (views.coltitle) {
        anchor = $233d72095e4c228d$var$get(opt.titleAnchor, $233d72095e4c228d$var$Column);
        offset = $233d72095e4c228d$var$get(off, "columnTitle");
        offset = anchor === $233d72095e4c228d$var$End ? y2 + offset : y - offset;
        band = $233d72095e4c228d$var$get(opt.titleBand, $233d72095e4c228d$var$Column, 0.5);
        $233d72095e4c228d$var$layoutTitle(view, views.coltitle, offset, 1, bounds, band);
    }
}
function $233d72095e4c228d$var$boundFlush(item, field) {
    return field === "x1" ? item.x || 0 : field === "y1" ? item.y || 0 : field === "x2" ? (item.x || 0) + (item.width || 0) : field === "y2" ? (item.y || 0) + (item.height || 0) : undefined;
}
function $233d72095e4c228d$var$boundFull(item, field) {
    return item.bounds[field];
}
function $233d72095e4c228d$var$layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
    var n = groups.length, init = 0, edge = 0, i, j, k, m, b, h, g, x, y;
    // if no groups, early exit and return 0
    if (!n) return init;
    // compute margin
    for(i = start; i < n; i += stride)if (groups[i]) init = agg(init, bound(groups[i], bf));
    // if no headers, return margin calculation
    if (!headers.length) return init;
    // check if number of headers exceeds number of rows or columns
    if (headers.length > limit) {
        view.warn("Grid headers exceed limit: " + limit);
        headers = headers.slice(0, limit);
    }
    // apply offset
    init += offset;
    // clear mark bounds for all headers
    for(j = 0, m = headers.length; j < m; ++j){
        view.dirty(headers[j]);
        headers[j].mark.bounds.clear();
    }
    // layout each header
    for(i = start, j = 0, m = headers.length; j < m; ++j, i += stride){
        h = headers[j];
        b = h.mark.bounds;
        // search for nearest group to align to
        // necessary if table has empty cells
        for(k = i; k >= 0 && (g = groups[k]) == null; k -= back);
        // assign coordinates and update bounds
        if (isX) {
            x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
            y = init;
        } else {
            x = init;
            y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
        }
        b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
        h.x = x;
        h.y = y;
        view.dirty(h);
        // update current edge of layout bounds
        edge = agg(edge, b[bf]);
    }
    return edge;
}
function $233d72095e4c228d$var$layoutTitle(view, g, offset, isX, bounds, band) {
    if (!g) return;
    view.dirty(g);
    // compute title coordinates
    var x = offset, y = offset;
    isX ? x = Math.round(bounds.x1 + band * bounds.width()) : y = Math.round(bounds.y1 + band * bounds.height());
    // assign coordinates and update bounds
    g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
    g.mark.bounds.clear().union(g.bounds);
    g.x = x;
    g.y = y;
    // queue title for redraw
    view.dirty(g);
}
// utility for looking up legend layout configuration
function $233d72095e4c228d$var$lookup(config, orient) {
    const opt = config[orient] || {};
    return (key, d)=>opt[key] != null ? opt[key] : config[key] != null ? config[key] : d;
}
// if legends specify offset directly, use the maximum specified value
function $233d72095e4c228d$var$offsets(legends, value) {
    let max = -Infinity;
    legends.forEach((item)=>{
        if (item.offset != null) max = Math.max(max, item.offset);
    });
    return max > -Infinity ? max : value;
}
function $233d72095e4c228d$var$legendParams(g, orient, config, xb, yb, w, h) {
    const _ = $233d72095e4c228d$var$lookup(config, orient), offset = $233d72095e4c228d$var$offsets(g, _("offset", 0)), anchor = _("anchor", $233d72095e4c228d$var$Start), mult = anchor === $233d72095e4c228d$var$End ? 1 : anchor === $233d72095e4c228d$var$Middle ? 0.5 : 0;
    const p = {
        align: $233d72095e4c228d$var$Each,
        bounds: _("bounds", $233d72095e4c228d$var$Flush),
        columns: _("direction") === "vertical" ? 1 : g.length,
        padding: _("margin", 8),
        center: _("center"),
        nodirty: true
    };
    switch(orient){
        case $233d72095e4c228d$var$Left:
            p.anchor = {
                x: Math.floor(xb.x1) - offset,
                column: $233d72095e4c228d$var$End,
                y: mult * (h || xb.height() + 2 * xb.y1),
                row: anchor
            };
            break;
        case $233d72095e4c228d$var$Right:
            p.anchor = {
                x: Math.ceil(xb.x2) + offset,
                y: mult * (h || xb.height() + 2 * xb.y1),
                row: anchor
            };
            break;
        case $233d72095e4c228d$var$Top:
            p.anchor = {
                y: Math.floor(yb.y1) - offset,
                row: $233d72095e4c228d$var$End,
                x: mult * (w || yb.width() + 2 * yb.x1),
                column: anchor
            };
            break;
        case $233d72095e4c228d$var$Bottom:
            p.anchor = {
                y: Math.ceil(yb.y2) + offset,
                x: mult * (w || yb.width() + 2 * yb.x1),
                column: anchor
            };
            break;
        case $233d72095e4c228d$var$TopLeft:
            p.anchor = {
                x: offset,
                y: offset
            };
            break;
        case $233d72095e4c228d$var$TopRight:
            p.anchor = {
                x: w - offset,
                y: offset,
                column: $233d72095e4c228d$var$End
            };
            break;
        case $233d72095e4c228d$var$BottomLeft:
            p.anchor = {
                x: offset,
                y: h - offset,
                row: $233d72095e4c228d$var$End
            };
            break;
        case $233d72095e4c228d$var$BottomRight:
            p.anchor = {
                x: w - offset,
                y: h - offset,
                column: $233d72095e4c228d$var$End,
                row: $233d72095e4c228d$var$End
            };
            break;
    }
    return p;
}
function $233d72095e4c228d$var$legendLayout(view, legend) {
    var item = legend.items[0], datum = item.datum, orient = item.orient, bounds = item.bounds, x = item.x, y = item.y, w, h;
    // cache current bounds for later comparison
    item._bounds ? item._bounds.clear().union(bounds) : item._bounds = bounds.clone();
    bounds.clear();
    // adjust legend to accommodate padding and title
    $233d72095e4c228d$var$legendGroupLayout(view, item, item.items[0].items[0]);
    // aggregate bounds to determine size, and include origin
    bounds = $233d72095e4c228d$var$legendBounds(item, bounds);
    w = 2 * item.padding;
    h = 2 * item.padding;
    if (!bounds.empty()) {
        w = Math.ceil(bounds.width() + w);
        h = Math.ceil(bounds.height() + h);
    }
    if (datum.type === $233d72095e4c228d$var$Symbols) $233d72095e4c228d$var$legendEntryLayout(item.items[0].items[0].items[0].items);
    if (orient !== $233d72095e4c228d$var$None) {
        item.x = x = 0;
        item.y = y = 0;
    }
    item.width = w;
    item.height = h;
    (0, $d6kNj.boundStroke)(bounds.set(x, y, x + w, y + h), item);
    item.mark.bounds.clear().union(bounds);
    return item;
}
function $233d72095e4c228d$var$legendBounds(item, b) {
    // aggregate item bounds
    item.items.forEach((_)=>b.union(_.bounds));
    // anchor to legend origin
    b.x1 = item.padding;
    b.y1 = item.padding;
    return b;
}
function $233d72095e4c228d$var$legendGroupLayout(view, item, entry) {
    var pad = item.padding, ex = pad - entry.x, ey = pad - entry.y;
    if (!item.datum.title) {
        if (ex || ey) $233d72095e4c228d$var$translate(view, entry, ex, ey);
    } else {
        var title = item.items[1].items[0], anchor = title.anchor, tpad = item.titlePadding || 0, tx = pad - title.x, ty = pad - title.y;
        switch(title.orient){
            case $233d72095e4c228d$var$Left:
                ex += Math.ceil(title.bounds.width()) + tpad;
                break;
            case $233d72095e4c228d$var$Right:
            case $233d72095e4c228d$var$Bottom:
                break;
            default:
                ey += title.bounds.height() + tpad;
        }
        if (ex || ey) $233d72095e4c228d$var$translate(view, entry, ex, ey);
        switch(title.orient){
            case $233d72095e4c228d$var$Left:
                ty += $233d72095e4c228d$var$legendTitleOffset(item, entry, title, anchor, 1, 1);
                break;
            case $233d72095e4c228d$var$Right:
                tx += $233d72095e4c228d$var$legendTitleOffset(item, entry, title, $233d72095e4c228d$var$End, 0, 0) + tpad;
                ty += $233d72095e4c228d$var$legendTitleOffset(item, entry, title, anchor, 1, 1);
                break;
            case $233d72095e4c228d$var$Bottom:
                tx += $233d72095e4c228d$var$legendTitleOffset(item, entry, title, anchor, 0, 0);
                ty += $233d72095e4c228d$var$legendTitleOffset(item, entry, title, $233d72095e4c228d$var$End, -1, 0, 1) + tpad;
                break;
            default:
                tx += $233d72095e4c228d$var$legendTitleOffset(item, entry, title, anchor, 0, 0);
        }
        if (tx || ty) $233d72095e4c228d$var$translate(view, title, tx, ty);
        // translate legend if title pushes into negative coordinates
        if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {
            $233d72095e4c228d$var$translate(view, entry, -tx, 0);
            $233d72095e4c228d$var$translate(view, title, -tx, 0);
        }
    }
}
function $233d72095e4c228d$var$legendTitleOffset(item, entry, title, anchor, y, lr, noBar) {
    const grad = item.datum.type !== "symbol", vgrad = title.datum.vgrad, e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry, s = e.bounds[y ? "y2" : "x2"] - item.padding, u = vgrad && lr ? s : 0, v = vgrad && lr ? 0 : s, o = y <= 0 ? 0 : (0, $d6kNj.multiLineOffset)(title);
    return Math.round(anchor === $233d72095e4c228d$var$Start ? u : anchor === $233d72095e4c228d$var$End ? v - o : 0.5 * (s - o));
}
function $233d72095e4c228d$var$translate(view, item, dx, dy) {
    item.x += dx;
    item.y += dy;
    item.bounds.translate(dx, dy);
    item.mark.bounds.translate(dx, dy);
    view.dirty(item);
}
function $233d72095e4c228d$var$legendEntryLayout(entries) {
    // get max widths for each column
    const widths = entries.reduce((w, g)=>{
        w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);
        return w;
    }, {});
    // set dimensions of legend entry groups
    entries.forEach((g)=>{
        g.width = widths[g.column];
        g.height = g.bounds.y2 - g.y;
    });
}
function $233d72095e4c228d$var$titleLayout(view, mark, width, height, viewBounds) {
    var group = mark.items[0], frame = group.frame, orient = group.orient, anchor = group.anchor, offset = group.offset, padding = group.padding, title = group.items[0].items[0], subtitle = group.items[1] && group.items[1].items[0], end = orient === $233d72095e4c228d$var$Left || orient === $233d72095e4c228d$var$Right ? height : width, start = 0, x = 0, y = 0, sx = 0, sy = 0, pos;
    if (frame !== $233d72095e4c228d$var$Group) orient === $233d72095e4c228d$var$Left ? (start = viewBounds.y2, end = viewBounds.y1) : orient === $233d72095e4c228d$var$Right ? (start = viewBounds.y1, end = viewBounds.y2) : (start = viewBounds.x1, end = viewBounds.x2);
    else if (orient === $233d72095e4c228d$var$Left) start = height, end = 0;
    pos = anchor === $233d72095e4c228d$var$Start ? start : anchor === $233d72095e4c228d$var$End ? end : (start + end) / 2;
    if (subtitle && subtitle.text) {
        // position subtitle
        switch(orient){
            case $233d72095e4c228d$var$Top:
            case $233d72095e4c228d$var$Bottom:
                sy = title.bounds.height() + padding;
                break;
            case $233d72095e4c228d$var$Left:
                sx = title.bounds.width() + padding;
                break;
            case $233d72095e4c228d$var$Right:
                sx = -title.bounds.width() - padding;
                break;
        }
        $233d72095e4c228d$var$tempBounds.clear().union(subtitle.bounds);
        $233d72095e4c228d$var$tempBounds.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));
        if ($233d72095e4c228d$var$set(subtitle, "x", sx) | $233d72095e4c228d$var$set(subtitle, "y", sy)) {
            view.dirty(subtitle);
            subtitle.bounds.clear().union($233d72095e4c228d$var$tempBounds);
            subtitle.mark.bounds.clear().union($233d72095e4c228d$var$tempBounds);
            view.dirty(subtitle);
        }
        $233d72095e4c228d$var$tempBounds.clear().union(subtitle.bounds);
    } else $233d72095e4c228d$var$tempBounds.clear();
    $233d72095e4c228d$var$tempBounds.union(title.bounds);
    // position title group
    switch(orient){
        case $233d72095e4c228d$var$Top:
            x = pos;
            y = viewBounds.y1 - $233d72095e4c228d$var$tempBounds.height() - offset;
            break;
        case $233d72095e4c228d$var$Left:
            x = viewBounds.x1 - $233d72095e4c228d$var$tempBounds.width() - offset;
            y = pos;
            break;
        case $233d72095e4c228d$var$Right:
            x = viewBounds.x2 + $233d72095e4c228d$var$tempBounds.width() + offset;
            y = pos;
            break;
        case $233d72095e4c228d$var$Bottom:
            x = pos;
            y = viewBounds.y2 + offset;
            break;
        default:
            x = group.x;
            y = group.y;
    }
    if ($233d72095e4c228d$var$set(group, "x", x) | $233d72095e4c228d$var$set(group, "y", y)) {
        $233d72095e4c228d$var$tempBounds.translate(x, y);
        view.dirty(group);
        group.bounds.clear().union($233d72095e4c228d$var$tempBounds);
        mark.bounds.clear().union($233d72095e4c228d$var$tempBounds);
        view.dirty(group);
    }
    return group.bounds;
}
/**
 * Layout view elements such as axes and legends.
 * Also performs size adjustments.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - Scenegraph mark of groups to layout.
 */ function $233d72095e4c228d$export$cb54c266030d4746(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)($233d72095e4c228d$export$cb54c266030d4746, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const view = pulse.dataflow;
        _.mark.items.forEach((group)=>{
            if (_.layout) $233d72095e4c228d$var$trellisLayout(view, group, _.layout);
            $233d72095e4c228d$var$layoutGroup(view, group, _);
        });
        return $233d72095e4c228d$var$shouldReflow(_.mark.group) ? pulse.reflow() : pulse;
    }
});
function $233d72095e4c228d$var$shouldReflow(group) {
    // We typically should reflow if layout is invoked (#2568), as child items
    // may have resized and reflow ensures group bounds are re-calculated.
    // However, legend entries have a special exception to avoid instability.
    // For example, if a selected legend symbol gains a stroke on hover,
    // we don't want to re-position subsequent elements in the legend.
    return group && group.mark.role !== "legend-entry";
}
function $233d72095e4c228d$var$layoutGroup(view, group, _) {
    var items = group.items, width = Math.max(0, group.width || 0), height = Math.max(0, group.height || 0), viewBounds = new (0, $d6kNj.Bounds)().set(0, 0, width, height), xBounds = viewBounds.clone(), yBounds = viewBounds.clone(), legends = [], title, mark, orient, b, i, n;
    // layout axes, gather legends, collect bounds
    for(i = 0, n = items.length; i < n; ++i){
        mark = items[i];
        switch(mark.role){
            case $233d72095e4c228d$var$AxisRole:
                b = $233d72095e4c228d$var$isYAxis(mark) ? xBounds : yBounds;
                b.union($233d72095e4c228d$var$axisLayout(view, mark, width, height));
                break;
            case $233d72095e4c228d$var$TitleRole:
                title = mark;
                break;
            case $233d72095e4c228d$var$LegendRole:
                legends.push($233d72095e4c228d$var$legendLayout(view, mark));
                break;
            case $233d72095e4c228d$var$FrameRole:
            case $233d72095e4c228d$var$ScopeRole:
            case $233d72095e4c228d$var$RowHeader:
            case $233d72095e4c228d$var$RowFooter:
            case $233d72095e4c228d$var$RowTitle:
            case $233d72095e4c228d$var$ColHeader:
            case $233d72095e4c228d$var$ColFooter:
            case $233d72095e4c228d$var$ColTitle:
                xBounds.union(mark.bounds);
                yBounds.union(mark.bounds);
                break;
            default:
                viewBounds.union(mark.bounds);
        }
    }
    // layout legends, adjust viewBounds
    if (legends.length) {
        // group legends by orient
        const l = {};
        legends.forEach((item)=>{
            orient = item.orient || $233d72095e4c228d$var$Right;
            if (orient !== $233d72095e4c228d$var$None) (l[orient] || (l[orient] = [])).push(item);
        });
        // perform grid layout for each orient group
        for(const orient in l){
            const g = l[orient];
            $233d72095e4c228d$var$gridLayout(view, g, $233d72095e4c228d$var$legendParams(g, orient, _.legends, xBounds, yBounds, width, height));
        }
        // update view bounds
        legends.forEach((item)=>{
            const b = item.bounds;
            if (!b.equals(item._bounds)) {
                item.bounds = item._bounds;
                view.dirty(item); // dirty previous location
                item.bounds = b;
                view.dirty(item);
            }
            if (_.autosize && (_.autosize.type === $233d72095e4c228d$var$Fit || _.autosize.type === $233d72095e4c228d$var$FitX || _.autosize.type === $233d72095e4c228d$var$FitY)) // For autosize fit, incorporate the orthogonal dimension only.
            // Legends that overrun the chart area will then be clipped;
            // otherwise the chart area gets reduced to nothing!
            switch(item.orient){
                case $233d72095e4c228d$var$Left:
                case $233d72095e4c228d$var$Right:
                    viewBounds.add(b.x1, 0).add(b.x2, 0);
                    break;
                case $233d72095e4c228d$var$Top:
                case $233d72095e4c228d$var$Bottom:
                    viewBounds.add(0, b.y1).add(0, b.y2);
            }
            else viewBounds.union(b);
        });
    }
    // combine bounding boxes
    viewBounds.union(xBounds).union(yBounds);
    // layout title, adjust bounds
    if (title) viewBounds.union($233d72095e4c228d$var$titleLayout(view, title, width, height, viewBounds));
    // override aggregated view bounds if content is clipped
    if (group.clip) viewBounds.set(0, 0, group.width || 0, group.height || 0);
    // perform size adjustment
    $233d72095e4c228d$var$viewSizeLayout(view, group, viewBounds, _);
}
function $233d72095e4c228d$var$viewSizeLayout(view, group, viewBounds, _) {
    const auto = _.autosize || {}, type = auto.type;
    if (view._autosize < 1 || !type) return;
    let viewWidth = view._width, viewHeight = view._height, width = Math.max(0, group.width || 0), left = Math.max(0, Math.ceil(-viewBounds.x1)), height = Math.max(0, group.height || 0), top = Math.max(0, Math.ceil(-viewBounds.y1));
    const right = Math.max(0, Math.ceil(viewBounds.x2 - width)), bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));
    if (auto.contains === $233d72095e4c228d$var$Padding) {
        const padding = view.padding();
        viewWidth -= padding.left + padding.right;
        viewHeight -= padding.top + padding.bottom;
    }
    if (type === $233d72095e4c228d$var$None) {
        left = 0;
        top = 0;
        width = viewWidth;
        height = viewHeight;
    } else if (type === $233d72095e4c228d$var$Fit) {
        width = Math.max(0, viewWidth - left - right);
        height = Math.max(0, viewHeight - top - bottom);
    } else if (type === $233d72095e4c228d$var$FitX) {
        width = Math.max(0, viewWidth - left - right);
        viewHeight = height + top + bottom;
    } else if (type === $233d72095e4c228d$var$FitY) {
        viewWidth = width + left + right;
        height = Math.max(0, viewHeight - top - bottom);
    } else if (type === $233d72095e4c228d$var$Pad) {
        viewWidth = width + left + right;
        viewHeight = height + top + bottom;
    }
    view._resizeView(viewWidth, viewHeight, width, height, [
        left,
        top
    ], auto.resize);
}

});
parcelRegister("d6kNj", function(module, exports) {

$parcel$export(module.exports, "Gradient", () => $989bf735d0693be2$export$3d3dd8f63ff0f876);
$parcel$export(module.exports, "pathCurves", () => $989bf735d0693be2$export$1dcbee2c4632714f);
$parcel$export(module.exports, "pathParse", () => $989bf735d0693be2$export$f072bacea2bdc7f4);
$parcel$export(module.exports, "pathRender", () => $989bf735d0693be2$export$910e4b65963299c9);
$parcel$export(module.exports, "pathSymbols", () => $989bf735d0693be2$export$6b81ed7c1e48fcf1);
$parcel$export(module.exports, "pathRectangle", () => $989bf735d0693be2$export$de03e561ed519b8d);
$parcel$export(module.exports, "pathTrail", () => $989bf735d0693be2$export$fc51f727bf70959d);
$parcel$export(module.exports, "resetSVGClipId", () => $989bf735d0693be2$export$d3e53d7a30a67902);
$parcel$export(module.exports, "Bounds", () => $989bf735d0693be2$export$c4e9d269599ab4b4);
$parcel$export(module.exports, "Item", () => $989bf735d0693be2$export$6d08773d2e66f8f2);
$parcel$export(module.exports, "GroupItem", () => $989bf735d0693be2$export$3142cb2f1b79aeb9);
$parcel$export(module.exports, "ResourceLoader", () => $989bf735d0693be2$export$84bade0bc2a1e1);
$parcel$export(module.exports, "boundStroke", () => $989bf735d0693be2$export$f56ddbf1a28ee2d5);
$parcel$export(module.exports, "boundContext", () => $989bf735d0693be2$export$bd2ae2eff0a0032c);
$parcel$export(module.exports, "intersectPath", () => $989bf735d0693be2$export$9c6f6f4ce95536f3);
$parcel$export(module.exports, "intersectPoint", () => $989bf735d0693be2$export$922770df9a960df2);
$parcel$export(module.exports, "intersectRule", () => $989bf735d0693be2$export$b9a71256e53be83d);
$parcel$export(module.exports, "intersectBoxLine", () => $989bf735d0693be2$export$880a79940296e85d);
$parcel$export(module.exports, "sceneZOrder", () => $989bf735d0693be2$export$990580f29c847381);
$parcel$export(module.exports, "sceneVisit", () => $989bf735d0693be2$export$35dcb66345c6f823);
$parcel$export(module.exports, "scenePickVisit", () => $989bf735d0693be2$export$cd28c9751452c4ee);
$parcel$export(module.exports, "textMetrics", () => $989bf735d0693be2$export$e06c1f209ff0a915);
$parcel$export(module.exports, "fontSize", () => $989bf735d0693be2$export$85e3c3ca0c6fb93);
$parcel$export(module.exports, "font", () => $989bf735d0693be2$export$a74e2025f5286b02);
$parcel$export(module.exports, "lineHeight", () => $989bf735d0693be2$export$c9b91427b594e14);
$parcel$export(module.exports, "multiLineOffset", () => $989bf735d0693be2$export$3bcd7f3bdac987b9);
$parcel$export(module.exports, "fontFamily", () => $989bf735d0693be2$export$a5975749f0374264);
$parcel$export(module.exports, "Marks", () => $989bf735d0693be2$export$3f7130ac478166a9);
$parcel$export(module.exports, "boundItem", () => $989bf735d0693be2$export$c9a40a04ca8b57d1);
$parcel$export(module.exports, "boundMark", () => $989bf735d0693be2$export$7914223fc296453c);
$parcel$export(module.exports, "sceneToJSON", () => $989bf735d0693be2$export$a8d0dfba0ca46592);
$parcel$export(module.exports, "sceneFromJSON", () => $989bf735d0693be2$export$80a53a9eaa9e210f);
$parcel$export(module.exports, "Scenegraph", () => $989bf735d0693be2$export$b6b863436f679f05);
$parcel$export(module.exports, "domCreate", () => $989bf735d0693be2$export$5ab7f8f1ec85df50);
$parcel$export(module.exports, "domFind", () => $989bf735d0693be2$export$ad068160678b9939);
$parcel$export(module.exports, "domChild", () => $989bf735d0693be2$export$2df02f10bc8f7721);
$parcel$export(module.exports, "domClear", () => $989bf735d0693be2$export$5a8f314b385c1b7f);
$parcel$export(module.exports, "point", () => $989bf735d0693be2$export$105684a3041cb6f3);
$parcel$export(module.exports, "Handler", () => $989bf735d0693be2$export$a428cd33b25d5283);
$parcel$export(module.exports, "Renderer", () => $989bf735d0693be2$export$88530751e3977073);
$parcel$export(module.exports, "CanvasHandler", () => $989bf735d0693be2$export$7919a88d62c5dd21);
$parcel$export(module.exports, "CanvasRenderer", () => $989bf735d0693be2$export$7adc20298958481a);
$parcel$export(module.exports, "SVGHandler", () => $989bf735d0693be2$export$a7f388b81ee313d);
$parcel$export(module.exports, "markup", () => $989bf735d0693be2$export$7b40ce885114f0a6);
$parcel$export(module.exports, "serializeXML", () => $989bf735d0693be2$export$7f35992b425f3d74);
$parcel$export(module.exports, "SVGRenderer", () => $989bf735d0693be2$export$42e42f98ac770ce0);
$parcel$export(module.exports, "SVGStringRenderer", () => $989bf735d0693be2$export$65081d0fa4234322);
$parcel$export(module.exports, "RenderType", () => $989bf735d0693be2$export$ed706b0a66efb05c);
$parcel$export(module.exports, "renderModule", () => $989bf735d0693be2$export$acb676c58df771a8);
$parcel$export(module.exports, "intersect", () => $989bf735d0693be2$export$1f4807a235930d45);
$parcel$export(module.exports, "boundClip", () => $989bf735d0693be2$export$e897555080ed19bd);
$parcel$export(module.exports, "sceneEqual", () => $989bf735d0693be2$export$379826fa8a0c0902);
$parcel$export(module.exports, "pathEqual", () => $989bf735d0693be2$export$7918a440c1c2f74d);
$parcel$export(module.exports, "resetSVGDefIds", () => $989bf735d0693be2$export$2233ee574a3d108a);
$parcel$export(module.exports, "path", () => (parcelRequire("7Mfuj")).path);

var $4SWbq = parcelRequire("4SWbq");

var $liNHG = parcelRequire("liNHG");
var $2081n = parcelRequire("2081n");
var $lznsn = parcelRequire("lznsn");
var $aC7ZC = parcelRequire("aC7ZC");
var $4FvMl = parcelRequire("4FvMl");
var $8nLW2 = parcelRequire("8nLW2");
var $kPEVv = parcelRequire("kPEVv");
var $9I2ao = parcelRequire("9I2ao");
var $itwiD = parcelRequire("itwiD");
var $dzNHg = parcelRequire("dzNHg");
var $lYtjn = parcelRequire("lYtjn");
var $8bB7b = parcelRequire("8bB7b");
var $9MgPM = parcelRequire("9MgPM");
var $7mZGw = parcelRequire("7mZGw");
var $hTFpl = parcelRequire("hTFpl");
var $mkxF5 = parcelRequire("mkxF5");
var $awYk7 = parcelRequire("awYk7");
var $kGuq7 = parcelRequire("kGuq7");
var $gvKAS = parcelRequire("gvKAS");

var $7Mfuj = parcelRequire("7Mfuj");

var $bWlF6 = parcelRequire("bWlF6");

var $2ttvf = parcelRequire("2ttvf");

var $1UqgZ = parcelRequire("1UqgZ");
let $989bf735d0693be2$var$gradient_id = 0;
function $989bf735d0693be2$var$resetSVGGradientId() {
    $989bf735d0693be2$var$gradient_id = 0;
}
const $989bf735d0693be2$var$patternPrefix = "p_";
function $989bf735d0693be2$var$isGradient(value) {
    return value && value.gradient;
}
function $989bf735d0693be2$var$gradientRef(g, defs, base) {
    const type = g.gradient;
    let id = g.id, prefix = type === "radial" ? $989bf735d0693be2$var$patternPrefix : "";
    // check id, assign default values as needed
    if (!id) {
        id = g.id = "gradient_" + $989bf735d0693be2$var$gradient_id++;
        if (type === "radial") {
            g.x1 = $989bf735d0693be2$var$get(g.x1, 0.5);
            g.y1 = $989bf735d0693be2$var$get(g.y1, 0.5);
            g.r1 = $989bf735d0693be2$var$get(g.r1, 0);
            g.x2 = $989bf735d0693be2$var$get(g.x2, 0.5);
            g.y2 = $989bf735d0693be2$var$get(g.y2, 0.5);
            g.r2 = $989bf735d0693be2$var$get(g.r2, 0.5);
            prefix = $989bf735d0693be2$var$patternPrefix;
        } else {
            g.x1 = $989bf735d0693be2$var$get(g.x1, 0);
            g.y1 = $989bf735d0693be2$var$get(g.y1, 0);
            g.x2 = $989bf735d0693be2$var$get(g.x2, 1);
            g.y2 = $989bf735d0693be2$var$get(g.y2, 0);
        }
    }
    // register definition
    defs[id] = g;
    // return url reference
    return "url(" + (base || "") + "#" + prefix + id + ")";
}
function $989bf735d0693be2$var$get(val, def) {
    return val != null ? val : def;
}
function $989bf735d0693be2$export$3d3dd8f63ff0f876(p0, p1) {
    var stops = [], gradient;
    return gradient = {
        gradient: "linear",
        x1: p0 ? p0[0] : 0,
        y1: p0 ? p0[1] : 0,
        x2: p1 ? p1[0] : 1,
        y2: p1 ? p1[1] : 0,
        stops: stops,
        stop: function(offset, color) {
            stops.push({
                offset: offset,
                color: color
            });
            return gradient;
        }
    };
}
const $989bf735d0693be2$var$lookup = {
    "basis": {
        curve: (0, $lznsn.default)
    },
    "basis-closed": {
        curve: (0, $aC7ZC.default)
    },
    "basis-open": {
        curve: (0, $4FvMl.default)
    },
    "bundle": {
        curve: (0, $8nLW2.default),
        tension: "beta",
        value: 0.85
    },
    "cardinal": {
        curve: (0, $kPEVv.default),
        tension: "tension",
        value: 0
    },
    "cardinal-open": {
        curve: (0, $itwiD.default),
        tension: "tension",
        value: 0
    },
    "cardinal-closed": {
        curve: (0, $9I2ao.default),
        tension: "tension",
        value: 0
    },
    "catmull-rom": {
        curve: (0, $dzNHg.default),
        tension: "alpha",
        value: 0.5
    },
    "catmull-rom-closed": {
        curve: (0, $lYtjn.default),
        tension: "alpha",
        value: 0.5
    },
    "catmull-rom-open": {
        curve: (0, $8bB7b.default),
        tension: "alpha",
        value: 0.5
    },
    "linear": {
        curve: (0, $9MgPM.default)
    },
    "linear-closed": {
        curve: (0, $7mZGw.default)
    },
    "monotone": {
        horizontal: (0, $hTFpl.monotoneY),
        vertical: (0, $hTFpl.monotoneX)
    },
    "natural": {
        curve: (0, $mkxF5.default)
    },
    "step": {
        curve: (0, $awYk7.default)
    },
    "step-after": {
        curve: (0, $awYk7.stepAfter)
    },
    "step-before": {
        curve: (0, $awYk7.stepBefore)
    }
};
function $989bf735d0693be2$export$1dcbee2c4632714f(type, orientation, tension) {
    var entry = (0, $4SWbq.hasOwnProperty)($989bf735d0693be2$var$lookup, type) && $989bf735d0693be2$var$lookup[type], curve = null;
    if (entry) {
        curve = entry.curve || entry[orientation || "vertical"];
        if (entry.tension && tension != null) curve = curve[entry.tension](tension);
    }
    return curve;
}
const $989bf735d0693be2$var$paramCounts = {
    m: 2,
    l: 2,
    h: 1,
    v: 1,
    z: 0,
    c: 6,
    s: 4,
    q: 4,
    t: 2,
    a: 7
};
const $989bf735d0693be2$var$commandPattern = /[mlhvzcsqta]([^mlhvzcsqta]+|$)/gi;
const $989bf735d0693be2$var$numberPattern = /^[+-]?(([0-9]*\.[0-9]+)|([0-9]+\.)|([0-9]+))([eE][+-]?[0-9]+)?/;
const $989bf735d0693be2$var$spacePattern = /^((\s+,?\s*)|(,\s*))/;
const $989bf735d0693be2$var$flagPattern = /^[01]/;
function $989bf735d0693be2$export$f072bacea2bdc7f4(path) {
    const commands = [];
    const matches = path.match($989bf735d0693be2$var$commandPattern) || [];
    matches.forEach((str)=>{
        let cmd = str[0];
        const type = cmd.toLowerCase();
        // parse parameters
        const paramCount = $989bf735d0693be2$var$paramCounts[type];
        const params = $989bf735d0693be2$var$parseParams(type, paramCount, str.slice(1).trim());
        const count = params.length;
        // error checking based on parameter count
        if (count < paramCount || count && count % paramCount !== 0) throw Error("Invalid SVG path, incorrect parameter count");
        // register the command
        commands.push([
            cmd,
            ...params.slice(0, paramCount)
        ]);
        // exit now if we're done, also handles zero-param 'z'
        if (count === paramCount) return;
        // handle implicit line-to
        if (type === "m") cmd = cmd === "M" ? "L" : "l";
        // repeat command when given extended param list
        for(let i = paramCount; i < count; i += paramCount)commands.push([
            cmd,
            ...params.slice(i, i + paramCount)
        ]);
    });
    return commands;
}
function $989bf735d0693be2$var$parseParams(type, paramCount, segment) {
    const params = [];
    for(let index = 0; paramCount && index < segment.length;)for(let i = 0; i < paramCount; ++i){
        const pattern = type === "a" && (i === 3 || i === 4) ? $989bf735d0693be2$var$flagPattern : $989bf735d0693be2$var$numberPattern;
        const match = segment.slice(index).match(pattern);
        if (match === null) throw Error("Invalid SVG path, incorrect parameter type");
        index += match[0].length;
        params.push(+match[0]);
        const ws = segment.slice(index).match($989bf735d0693be2$var$spacePattern);
        if (ws !== null) index += ws[0].length;
    }
    return params;
}
const $989bf735d0693be2$var$DegToRad = Math.PI / 180;
const $989bf735d0693be2$var$Epsilon = 1e-14;
const $989bf735d0693be2$var$HalfPi = Math.PI / 2;
const $989bf735d0693be2$var$Tau = Math.PI * 2;
const $989bf735d0693be2$var$HalfSqrt3 = Math.sqrt(3) / 2;
var $989bf735d0693be2$var$segmentCache = {};
var $989bf735d0693be2$var$bezierCache = {};
var $989bf735d0693be2$var$join = [].join;
// Copied from Inkscape svgtopdf, thanks!
function $989bf735d0693be2$var$segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
    const key = $989bf735d0693be2$var$join.call(arguments);
    if ($989bf735d0693be2$var$segmentCache[key]) return $989bf735d0693be2$var$segmentCache[key];
    const th = rotateX * $989bf735d0693be2$var$DegToRad;
    const sin_th = Math.sin(th);
    const cos_th = Math.cos(th);
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    const px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
    const py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
    let pl = px * px / (rx * rx) + py * py / (ry * ry);
    if (pl > 1) {
        pl = Math.sqrt(pl);
        rx *= pl;
        ry *= pl;
    }
    const a00 = cos_th / rx;
    const a01 = sin_th / rx;
    const a10 = -sin_th / ry;
    const a11 = cos_th / ry;
    const x0 = a00 * ox + a01 * oy;
    const y0 = a10 * ox + a11 * oy;
    const x1 = a00 * x + a01 * y;
    const y1 = a10 * x + a11 * y;
    const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
    let sfactor_sq = 1 / d - 0.25;
    if (sfactor_sq < 0) sfactor_sq = 0;
    let sfactor = Math.sqrt(sfactor_sq);
    if (sweep == large) sfactor = -sfactor;
    const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
    const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
    const th0 = Math.atan2(y0 - yc, x0 - xc);
    const th1 = Math.atan2(y1 - yc, x1 - xc);
    let th_arc = th1 - th0;
    if (th_arc < 0 && sweep === 1) th_arc += $989bf735d0693be2$var$Tau;
    else if (th_arc > 0 && sweep === 0) th_arc -= $989bf735d0693be2$var$Tau;
    const segs = Math.ceil(Math.abs(th_arc / ($989bf735d0693be2$var$HalfPi + 0.001)));
    const result = [];
    for(let i = 0; i < segs; ++i){
        const th2 = th0 + i * th_arc / segs;
        const th3 = th0 + (i + 1) * th_arc / segs;
        result[i] = [
            xc,
            yc,
            th2,
            th3,
            rx,
            ry,
            sin_th,
            cos_th
        ];
    }
    return $989bf735d0693be2$var$segmentCache[key] = result;
}
function $989bf735d0693be2$var$bezier(params) {
    const key = $989bf735d0693be2$var$join.call(params);
    if ($989bf735d0693be2$var$bezierCache[key]) return $989bf735d0693be2$var$bezierCache[key];
    var cx = params[0], cy = params[1], th0 = params[2], th1 = params[3], rx = params[4], ry = params[5], sin_th = params[6], cos_th = params[7];
    const a00 = cos_th * rx;
    const a01 = -sin_th * ry;
    const a10 = sin_th * rx;
    const a11 = cos_th * ry;
    const cos_th0 = Math.cos(th0);
    const sin_th0 = Math.sin(th0);
    const cos_th1 = Math.cos(th1);
    const sin_th1 = Math.sin(th1);
    const th_half = 0.5 * (th1 - th0);
    const sin_th_h2 = Math.sin(th_half * 0.5);
    const t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
    const x1 = cx + cos_th0 - t * sin_th0;
    const y1 = cy + sin_th0 + t * cos_th0;
    const x3 = cx + cos_th1;
    const y3 = cy + sin_th1;
    const x2 = x3 + t * sin_th1;
    const y2 = y3 - t * cos_th1;
    return $989bf735d0693be2$var$bezierCache[key] = [
        a00 * x1 + a01 * y1,
        a10 * x1 + a11 * y1,
        a00 * x2 + a01 * y2,
        a10 * x2 + a11 * y2,
        a00 * x3 + a01 * y3,
        a10 * x3 + a11 * y3
    ];
}
const $989bf735d0693be2$var$temp = [
    "l",
    0,
    0,
    0,
    0,
    0,
    0,
    0
];
function $989bf735d0693be2$var$scale$1(current, sX, sY) {
    const c = $989bf735d0693be2$var$temp[0] = current[0];
    if (c === "a" || c === "A") {
        $989bf735d0693be2$var$temp[1] = sX * current[1];
        $989bf735d0693be2$var$temp[2] = sY * current[2];
        $989bf735d0693be2$var$temp[3] = current[3];
        $989bf735d0693be2$var$temp[4] = current[4];
        $989bf735d0693be2$var$temp[5] = current[5];
        $989bf735d0693be2$var$temp[6] = sX * current[6];
        $989bf735d0693be2$var$temp[7] = sY * current[7];
    } else if (c === "h" || c === "H") $989bf735d0693be2$var$temp[1] = sX * current[1];
    else if (c === "v" || c === "V") $989bf735d0693be2$var$temp[1] = sY * current[1];
    else for(var i = 1, n = current.length; i < n; ++i)$989bf735d0693be2$var$temp[i] = (i % 2 == 1 ? sX : sY) * current[i];
    return $989bf735d0693be2$var$temp;
}
function $989bf735d0693be2$export$910e4b65963299c9(context, path, l, t, sX, sY) {
    var current, // current instruction
    previous = null, x = 0, // current x
    y = 0, // current y
    controlX = 0, // current control point x
    controlY = 0, // current control point y
    tempX, tempY, tempControlX, tempControlY, anchorX = 0, anchorY = 0;
    if (l == null) l = 0;
    if (t == null) t = 0;
    if (sX == null) sX = 1;
    if (sY == null) sY = sX;
    if (context.beginPath) context.beginPath();
    for(var i = 0, len = path.length; i < len; ++i){
        current = path[i];
        if (sX !== 1 || sY !== 1) current = $989bf735d0693be2$var$scale$1(current, sX, sY);
        switch(current[0]){
            // first letter
            case "l":
                // lineto, relative
                x += current[1];
                y += current[2];
                context.lineTo(x + l, y + t);
                break;
            case "L":
                // lineto, absolute
                x = current[1];
                y = current[2];
                context.lineTo(x + l, y + t);
                break;
            case "h":
                // horizontal lineto, relative
                x += current[1];
                context.lineTo(x + l, y + t);
                break;
            case "H":
                // horizontal lineto, absolute
                x = current[1];
                context.lineTo(x + l, y + t);
                break;
            case "v":
                // vertical lineto, relative
                y += current[1];
                context.lineTo(x + l, y + t);
                break;
            case "V":
                // verical lineto, absolute
                y = current[1];
                context.lineTo(x + l, y + t);
                break;
            case "m":
                // moveTo, relative
                x += current[1];
                y += current[2];
                anchorX = x;
                anchorY = y;
                context.moveTo(x + l, y + t);
                break;
            case "M":
                // moveTo, absolute
                x = current[1];
                y = current[2];
                anchorX = x;
                anchorY = y;
                context.moveTo(x + l, y + t);
                break;
            case "c":
                // bezierCurveTo, relative
                tempX = x + current[5];
                tempY = y + current[6];
                controlX = x + current[3];
                controlY = y + current[4];
                context.bezierCurveTo(x + current[1] + l, // x1
                y + current[2] + t, // y1
                controlX + l, // x2
                controlY + t, // y2
                tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                break;
            case "C":
                // bezierCurveTo, absolute
                x = current[5];
                y = current[6];
                controlX = current[3];
                controlY = current[4];
                context.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
                break;
            case "s":
                // shorthand cubic bezierCurveTo, relative
                // transform to absolute x,y
                tempX = x + current[3];
                tempY = y + current[4];
                // calculate reflection of previous control points
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
                context.bezierCurveTo(controlX + l, controlY + t, x + current[1] + l, y + current[2] + t, tempX + l, tempY + t);
                // set control point to 2nd one of this command
                // the first control point is assumed to be the reflection of
                // the second control point on the previous command relative
                // to the current point.
                controlX = x + current[1];
                controlY = y + current[2];
                x = tempX;
                y = tempY;
                break;
            case "S":
                // shorthand cubic bezierCurveTo, absolute
                tempX = current[3];
                tempY = current[4];
                // calculate reflection of previous control points
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
                context.bezierCurveTo(controlX + l, controlY + t, current[1] + l, current[2] + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                // set control point to 2nd one of this command
                // the first control point is assumed to be the reflection of
                // the second control point on the previous command relative
                // to the current point.
                controlX = current[1];
                controlY = current[2];
                break;
            case "q":
                // quadraticCurveTo, relative
                // transform to absolute x,y
                tempX = x + current[3];
                tempY = y + current[4];
                controlX = x + current[1];
                controlY = y + current[2];
                context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                break;
            case "Q":
                // quadraticCurveTo, absolute
                tempX = current[3];
                tempY = current[4];
                context.quadraticCurveTo(current[1] + l, current[2] + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                controlX = current[1];
                controlY = current[2];
                break;
            case "t":
                // shorthand quadraticCurveTo, relative
                // transform to absolute x,y
                tempX = x + current[1];
                tempY = y + current[2];
                if (previous[0].match(/[QqTt]/) === null) {
                    // If there is no previous command or if the previous command was not a Q, q, T or t,
                    // assume the control point is coincident with the current point
                    controlX = x;
                    controlY = y;
                } else if (previous[0] === "t") {
                    // calculate reflection of previous control points for t
                    controlX = 2 * x - tempControlX;
                    controlY = 2 * y - tempControlY;
                } else if (previous[0] === "q") {
                    // calculate reflection of previous control points for q
                    controlX = 2 * x - controlX;
                    controlY = 2 * y - controlY;
                }
                tempControlX = controlX;
                tempControlY = controlY;
                context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                controlX = x + current[1];
                controlY = y + current[2];
                break;
            case "T":
                tempX = current[1];
                tempY = current[2];
                // calculate reflection of previous control points
                controlX = 2 * x - controlX;
                controlY = 2 * y - controlY;
                context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
                x = tempX;
                y = tempY;
                break;
            case "a":
                $989bf735d0693be2$var$drawArc(context, x + l, y + t, [
                    current[1],
                    current[2],
                    current[3],
                    current[4],
                    current[5],
                    current[6] + x + l,
                    current[7] + y + t
                ]);
                x += current[6];
                y += current[7];
                break;
            case "A":
                $989bf735d0693be2$var$drawArc(context, x + l, y + t, [
                    current[1],
                    current[2],
                    current[3],
                    current[4],
                    current[5],
                    current[6] + l,
                    current[7] + t
                ]);
                x = current[6];
                y = current[7];
                break;
            case "z":
            case "Z":
                x = anchorX;
                y = anchorY;
                context.closePath();
                break;
        }
        previous = current;
    }
}
function $989bf735d0693be2$var$drawArc(context, x, y, coords) {
    const seg = $989bf735d0693be2$var$segments(coords[5], // end x
    coords[6], // end y
    coords[0], // radius x
    coords[1], // radius y
    coords[3], // large flag
    coords[4], // sweep flag
    coords[2], // rotation
    x, y);
    for(let i = 0; i < seg.length; ++i){
        const bez = $989bf735d0693be2$var$bezier(seg[i]);
        context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
    }
}
const $989bf735d0693be2$var$Tan30 = 0.5773502691896257;
const $989bf735d0693be2$var$builtins = {
    "circle": {
        draw: function(context, size) {
            const r = Math.sqrt(size) / 2;
            context.moveTo(r, 0);
            context.arc(0, 0, r, 0, $989bf735d0693be2$var$Tau);
        }
    },
    "cross": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, s = r / 2.5;
            context.moveTo(-r, -s);
            context.lineTo(-r, s);
            context.lineTo(-s, s);
            context.lineTo(-s, r);
            context.lineTo(s, r);
            context.lineTo(s, s);
            context.lineTo(r, s);
            context.lineTo(r, -s);
            context.lineTo(s, -s);
            context.lineTo(s, -r);
            context.lineTo(-s, -r);
            context.lineTo(-s, -s);
            context.closePath();
        }
    },
    "diamond": {
        draw: function(context, size) {
            const r = Math.sqrt(size) / 2;
            context.moveTo(-r, 0);
            context.lineTo(0, -r);
            context.lineTo(r, 0);
            context.lineTo(0, r);
            context.closePath();
        }
    },
    "square": {
        draw: function(context, size) {
            var w = Math.sqrt(size), x = -w / 2;
            context.rect(x, x, w, w);
        }
    },
    "arrow": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, s = r / 7, t = r / 2.5, v = r / 8;
            context.moveTo(-s, r);
            context.lineTo(s, r);
            context.lineTo(s, -v);
            context.lineTo(t, -v);
            context.lineTo(0, -r);
            context.lineTo(-t, -v);
            context.lineTo(-s, -v);
            context.closePath();
        }
    },
    "wedge": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = $989bf735d0693be2$var$HalfSqrt3 * r, o = h - r * $989bf735d0693be2$var$Tan30, b = r / 4;
            context.moveTo(0, -h - o);
            context.lineTo(-b, h - o);
            context.lineTo(b, h - o);
            context.closePath();
        }
    },
    "triangle": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = $989bf735d0693be2$var$HalfSqrt3 * r, o = h - r * $989bf735d0693be2$var$Tan30;
            context.moveTo(0, -h - o);
            context.lineTo(-r, h - o);
            context.lineTo(r, h - o);
            context.closePath();
        }
    },
    "triangle-up": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = $989bf735d0693be2$var$HalfSqrt3 * r;
            context.moveTo(0, -h);
            context.lineTo(-r, h);
            context.lineTo(r, h);
            context.closePath();
        }
    },
    "triangle-down": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = $989bf735d0693be2$var$HalfSqrt3 * r;
            context.moveTo(0, h);
            context.lineTo(-r, -h);
            context.lineTo(r, -h);
            context.closePath();
        }
    },
    "triangle-right": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = $989bf735d0693be2$var$HalfSqrt3 * r;
            context.moveTo(h, 0);
            context.lineTo(-h, -r);
            context.lineTo(-h, r);
            context.closePath();
        }
    },
    "triangle-left": {
        draw: function(context, size) {
            var r = Math.sqrt(size) / 2, h = $989bf735d0693be2$var$HalfSqrt3 * r;
            context.moveTo(-h, 0);
            context.lineTo(h, -r);
            context.lineTo(h, r);
            context.closePath();
        }
    },
    "stroke": {
        draw: function(context, size) {
            const r = Math.sqrt(size) / 2;
            context.moveTo(-r, 0);
            context.lineTo(r, 0);
        }
    }
};
function $989bf735d0693be2$export$6b81ed7c1e48fcf1(_) {
    return (0, $4SWbq.hasOwnProperty)($989bf735d0693be2$var$builtins, _) ? $989bf735d0693be2$var$builtins[_] : $989bf735d0693be2$var$customSymbol(_);
}
var $989bf735d0693be2$var$custom = {};
function $989bf735d0693be2$var$customSymbol(path) {
    if (!(0, $4SWbq.hasOwnProperty)($989bf735d0693be2$var$custom, path)) {
        const parsed = $989bf735d0693be2$export$f072bacea2bdc7f4(path);
        $989bf735d0693be2$var$custom[path] = {
            draw: function(context, size) {
                $989bf735d0693be2$export$910e4b65963299c9(context, parsed, 0, 0, Math.sqrt(size) / 2);
            }
        };
    }
    return $989bf735d0693be2$var$custom[path];
}
// See http://spencermortensen.com/articles/bezier-circle/
const $989bf735d0693be2$var$C = 0.448084975506; // C = 1 - c
function $989bf735d0693be2$var$rectangleX(d) {
    return d.x;
}
function $989bf735d0693be2$var$rectangleY(d) {
    return d.y;
}
function $989bf735d0693be2$var$rectangleWidth(d) {
    return d.width;
}
function $989bf735d0693be2$var$rectangleHeight(d) {
    return d.height;
}
function $989bf735d0693be2$var$number(_) {
    return typeof _ === "function" ? _ : ()=>+_;
}
function $989bf735d0693be2$var$clamp(value, min, max) {
    return Math.max(min, Math.min(value, max));
}
function $989bf735d0693be2$export$de03e561ed519b8d() {
    var x = $989bf735d0693be2$var$rectangleX, y = $989bf735d0693be2$var$rectangleY, width = $989bf735d0693be2$var$rectangleWidth, height = $989bf735d0693be2$var$rectangleHeight, crTL = $989bf735d0693be2$var$number(0), crTR = crTL, crBL = crTL, crBR = crTL, context = null;
    function rectangle(_, x0, y0) {
        var buffer, x1 = x0 != null ? x0 : +x.call(this, _), y1 = y0 != null ? y0 : +y.call(this, _), w = +width.call(this, _), h = +height.call(this, _), s = Math.min(w, h) / 2, tl = $989bf735d0693be2$var$clamp(+crTL.call(this, _), 0, s), tr = $989bf735d0693be2$var$clamp(+crTR.call(this, _), 0, s), bl = $989bf735d0693be2$var$clamp(+crBL.call(this, _), 0, s), br = $989bf735d0693be2$var$clamp(+crBR.call(this, _), 0, s);
        if (!context) context = buffer = (0, $7Mfuj.path)();
        if (tl <= 0 && tr <= 0 && bl <= 0 && br <= 0) context.rect(x1, y1, w, h);
        else {
            var x2 = x1 + w, y2 = y1 + h;
            context.moveTo(x1 + tl, y1);
            context.lineTo(x2 - tr, y1);
            context.bezierCurveTo(x2 - $989bf735d0693be2$var$C * tr, y1, x2, y1 + $989bf735d0693be2$var$C * tr, x2, y1 + tr);
            context.lineTo(x2, y2 - br);
            context.bezierCurveTo(x2, y2 - $989bf735d0693be2$var$C * br, x2 - $989bf735d0693be2$var$C * br, y2, x2 - br, y2);
            context.lineTo(x1 + bl, y2);
            context.bezierCurveTo(x1 + $989bf735d0693be2$var$C * bl, y2, x1, y2 - $989bf735d0693be2$var$C * bl, x1, y2 - bl);
            context.lineTo(x1, y1 + tl);
            context.bezierCurveTo(x1, y1 + $989bf735d0693be2$var$C * tl, x1 + $989bf735d0693be2$var$C * tl, y1, x1 + tl, y1);
            context.closePath();
        }
        if (buffer) {
            context = null;
            return buffer + "" || null;
        }
    }
    rectangle.x = function(_) {
        if (arguments.length) {
            x = $989bf735d0693be2$var$number(_);
            return rectangle;
        } else return x;
    };
    rectangle.y = function(_) {
        if (arguments.length) {
            y = $989bf735d0693be2$var$number(_);
            return rectangle;
        } else return y;
    };
    rectangle.width = function(_) {
        if (arguments.length) {
            width = $989bf735d0693be2$var$number(_);
            return rectangle;
        } else return width;
    };
    rectangle.height = function(_) {
        if (arguments.length) {
            height = $989bf735d0693be2$var$number(_);
            return rectangle;
        } else return height;
    };
    rectangle.cornerRadius = function(tl, tr, br, bl) {
        if (arguments.length) {
            crTL = $989bf735d0693be2$var$number(tl);
            crTR = tr != null ? $989bf735d0693be2$var$number(tr) : crTL;
            crBR = br != null ? $989bf735d0693be2$var$number(br) : crTL;
            crBL = bl != null ? $989bf735d0693be2$var$number(bl) : crTR;
            return rectangle;
        } else return crTL;
    };
    rectangle.context = function(_) {
        if (arguments.length) {
            context = _ == null ? null : _;
            return rectangle;
        } else return context;
    };
    return rectangle;
}
function $989bf735d0693be2$export$fc51f727bf70959d() {
    var x, y, size, defined, context = null, ready, x1, y1, r1;
    function point(x2, y2, w2) {
        const r2 = w2 / 2;
        if (ready) {
            var ux = y1 - y2, uy = x2 - x1;
            if (ux || uy) {
                // get normal vector
                var ud = Math.sqrt(ux * ux + uy * uy), rx = (ux /= ud) * r1, ry = (uy /= ud) * r1, t = Math.atan2(uy, ux);
                // draw segment
                context.moveTo(x1 - rx, y1 - ry);
                context.lineTo(x2 - ux * r2, y2 - uy * r2);
                context.arc(x2, y2, r2, t - Math.PI, t);
                context.lineTo(x1 + rx, y1 + ry);
                context.arc(x1, y1, r1, t, t + Math.PI);
            } else context.arc(x2, y2, r2, 0, $989bf735d0693be2$var$Tau);
            context.closePath();
        } else ready = 1;
        x1 = x2;
        y1 = y2;
        r1 = r2;
    }
    function trail(data) {
        var i, n = data.length, d, defined0 = false, buffer;
        if (context == null) context = buffer = (0, $7Mfuj.path)();
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) ready = 0;
            }
            if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
        }
        if (buffer) {
            context = null;
            return buffer + "" || null;
        }
    }
    trail.x = function(_) {
        if (arguments.length) {
            x = _;
            return trail;
        } else return x;
    };
    trail.y = function(_) {
        if (arguments.length) {
            y = _;
            return trail;
        } else return y;
    };
    trail.size = function(_) {
        if (arguments.length) {
            size = _;
            return trail;
        } else return size;
    };
    trail.defined = function(_) {
        if (arguments.length) {
            defined = _;
            return trail;
        } else return defined;
    };
    trail.context = function(_) {
        if (arguments.length) {
            if (_ == null) context = null;
            else context = _;
            return trail;
        } else return context;
    };
    return trail;
}
function $989bf735d0693be2$var$value$1(a, b) {
    return a != null ? a : b;
}
const $989bf735d0693be2$var$x = (item)=>item.x || 0, $989bf735d0693be2$var$y = (item)=>item.y || 0, $989bf735d0693be2$var$w = (item)=>item.width || 0, $989bf735d0693be2$var$h = (item)=>item.height || 0, $989bf735d0693be2$var$xw = (item)=>(item.x || 0) + (item.width || 0), $989bf735d0693be2$var$yh = (item)=>(item.y || 0) + (item.height || 0), $989bf735d0693be2$var$sa = (item)=>item.startAngle || 0, $989bf735d0693be2$var$ea = (item)=>item.endAngle || 0, $989bf735d0693be2$var$pa = (item)=>item.padAngle || 0, $989bf735d0693be2$var$ir = (item)=>item.innerRadius || 0, $989bf735d0693be2$var$or = (item)=>item.outerRadius || 0, $989bf735d0693be2$var$cr = (item)=>item.cornerRadius || 0, $989bf735d0693be2$var$tl = (item)=>$989bf735d0693be2$var$value$1(item.cornerRadiusTopLeft, item.cornerRadius) || 0, $989bf735d0693be2$var$tr = (item)=>$989bf735d0693be2$var$value$1(item.cornerRadiusTopRight, item.cornerRadius) || 0, $989bf735d0693be2$var$br = (item)=>$989bf735d0693be2$var$value$1(item.cornerRadiusBottomRight, item.cornerRadius) || 0, $989bf735d0693be2$var$bl = (item)=>$989bf735d0693be2$var$value$1(item.cornerRadiusBottomLeft, item.cornerRadius) || 0, $989bf735d0693be2$var$sz = (item)=>$989bf735d0693be2$var$value$1(item.size, 64), $989bf735d0693be2$var$ts = (item)=>item.size || 1, $989bf735d0693be2$var$def = (item)=>!(item.defined === false), $989bf735d0693be2$var$type = (item)=>$989bf735d0693be2$export$6b81ed7c1e48fcf1(item.shape || "circle");
const $989bf735d0693be2$var$arcShape = (0, $liNHG.default)().startAngle($989bf735d0693be2$var$sa).endAngle($989bf735d0693be2$var$ea).padAngle($989bf735d0693be2$var$pa).innerRadius($989bf735d0693be2$var$ir).outerRadius($989bf735d0693be2$var$or).cornerRadius($989bf735d0693be2$var$cr), $989bf735d0693be2$var$areavShape = (0, $2081n.default)().x($989bf735d0693be2$var$x).y1($989bf735d0693be2$var$y).y0($989bf735d0693be2$var$yh).defined($989bf735d0693be2$var$def), $989bf735d0693be2$var$areahShape = (0, $2081n.default)().y($989bf735d0693be2$var$y).x1($989bf735d0693be2$var$x).x0($989bf735d0693be2$var$xw).defined($989bf735d0693be2$var$def), $989bf735d0693be2$var$lineShape = (0, $kGuq7.default)().x($989bf735d0693be2$var$x).y($989bf735d0693be2$var$y).defined($989bf735d0693be2$var$def), $989bf735d0693be2$var$rectShape = $989bf735d0693be2$export$de03e561ed519b8d().x($989bf735d0693be2$var$x).y($989bf735d0693be2$var$y).width($989bf735d0693be2$var$w).height($989bf735d0693be2$var$h).cornerRadius($989bf735d0693be2$var$tl, $989bf735d0693be2$var$tr, $989bf735d0693be2$var$br, $989bf735d0693be2$var$bl), $989bf735d0693be2$var$symbolShape = (0, $gvKAS.default)().type($989bf735d0693be2$var$type).size($989bf735d0693be2$var$sz), $989bf735d0693be2$var$trailShape = $989bf735d0693be2$export$fc51f727bf70959d().x($989bf735d0693be2$var$x).y($989bf735d0693be2$var$y).defined($989bf735d0693be2$var$def).size($989bf735d0693be2$var$ts);
function $989bf735d0693be2$var$hasCornerRadius(item) {
    return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;
}
function $989bf735d0693be2$var$arc$1(context, item) {
    return $989bf735d0693be2$var$arcShape.context(context)(item);
}
function $989bf735d0693be2$var$area$1(context, items) {
    const item = items[0], interp = item.interpolate || "linear";
    return (item.orient === "horizontal" ? $989bf735d0693be2$var$areahShape : $989bf735d0693be2$var$areavShape).curve($989bf735d0693be2$export$1dcbee2c4632714f(interp, item.orient, item.tension)).context(context)(items);
}
function $989bf735d0693be2$var$line$1(context, items) {
    const item = items[0], interp = item.interpolate || "linear";
    return $989bf735d0693be2$var$lineShape.curve($989bf735d0693be2$export$1dcbee2c4632714f(interp, item.orient, item.tension)).context(context)(items);
}
function $989bf735d0693be2$var$rectangle(context, item, x, y) {
    return $989bf735d0693be2$var$rectShape.context(context)(item, x, y);
}
function $989bf735d0693be2$var$shape$1(context, item) {
    return (item.mark.shape || item.shape).context(context)(item);
}
function $989bf735d0693be2$var$symbol$1(context, item) {
    return $989bf735d0693be2$var$symbolShape.context(context)(item);
}
function $989bf735d0693be2$var$trail$1(context, items) {
    return $989bf735d0693be2$var$trailShape.context(context)(items);
}
var $989bf735d0693be2$var$clip_id = 1;
function $989bf735d0693be2$export$d3e53d7a30a67902() {
    $989bf735d0693be2$var$clip_id = 1;
}
function $989bf735d0693be2$var$clip$1(renderer, item, size) {
    var clip = item.clip, defs = renderer._defs, id = item.clip_id || (item.clip_id = "clip" + $989bf735d0693be2$var$clip_id++), c = defs.clipping[id] || (defs.clipping[id] = {
        id: id
    });
    if ((0, $4SWbq.isFunction)(clip)) c.path = clip(null);
    else if ($989bf735d0693be2$var$hasCornerRadius(size)) c.path = $989bf735d0693be2$var$rectangle(null, size, 0, 0);
    else {
        c.width = size.width || 0;
        c.height = size.height || 0;
    }
    return "url(#" + id + ")";
}
function $989bf735d0693be2$export$c4e9d269599ab4b4(b) {
    this.clear();
    if (b) this.union(b);
}
$989bf735d0693be2$export$c4e9d269599ab4b4.prototype = {
    clone () {
        return new $989bf735d0693be2$export$c4e9d269599ab4b4(this);
    },
    clear () {
        this.x1 = +Number.MAX_VALUE;
        this.y1 = +Number.MAX_VALUE;
        this.x2 = -Number.MAX_VALUE;
        this.y2 = -Number.MAX_VALUE;
        return this;
    },
    empty () {
        return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
    },
    equals (b) {
        return this.x1 === b.x1 && this.y1 === b.y1 && this.x2 === b.x2 && this.y2 === b.y2;
    },
    set (x1, y1, x2, y2) {
        if (x2 < x1) {
            this.x2 = x1;
            this.x1 = x2;
        } else {
            this.x1 = x1;
            this.x2 = x2;
        }
        if (y2 < y1) {
            this.y2 = y1;
            this.y1 = y2;
        } else {
            this.y1 = y1;
            this.y2 = y2;
        }
        return this;
    },
    add (x, y) {
        if (x < this.x1) this.x1 = x;
        if (y < this.y1) this.y1 = y;
        if (x > this.x2) this.x2 = x;
        if (y > this.y2) this.y2 = y;
        return this;
    },
    expand (d) {
        this.x1 -= d;
        this.y1 -= d;
        this.x2 += d;
        this.y2 += d;
        return this;
    },
    round () {
        this.x1 = Math.floor(this.x1);
        this.y1 = Math.floor(this.y1);
        this.x2 = Math.ceil(this.x2);
        this.y2 = Math.ceil(this.y2);
        return this;
    },
    scale (s) {
        this.x1 *= s;
        this.y1 *= s;
        this.x2 *= s;
        this.y2 *= s;
        return this;
    },
    translate (dx, dy) {
        this.x1 += dx;
        this.x2 += dx;
        this.y1 += dy;
        this.y2 += dy;
        return this;
    },
    rotate (angle, x, y) {
        const p = this.rotatedPoints(angle, x, y);
        return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
    },
    rotatedPoints (angle, x, y) {
        var { x1: x1, y1: y1, x2: x2, y2: y2 } = this, cos = Math.cos(angle), sin = Math.sin(angle), cx = x - x * cos + y * sin, cy = y - x * sin - y * cos;
        return [
            cos * x1 - sin * y1 + cx,
            sin * x1 + cos * y1 + cy,
            cos * x1 - sin * y2 + cx,
            sin * x1 + cos * y2 + cy,
            cos * x2 - sin * y1 + cx,
            sin * x2 + cos * y1 + cy,
            cos * x2 - sin * y2 + cx,
            sin * x2 + cos * y2 + cy
        ];
    },
    union (b) {
        if (b.x1 < this.x1) this.x1 = b.x1;
        if (b.y1 < this.y1) this.y1 = b.y1;
        if (b.x2 > this.x2) this.x2 = b.x2;
        if (b.y2 > this.y2) this.y2 = b.y2;
        return this;
    },
    intersect (b) {
        if (b.x1 > this.x1) this.x1 = b.x1;
        if (b.y1 > this.y1) this.y1 = b.y1;
        if (b.x2 < this.x2) this.x2 = b.x2;
        if (b.y2 < this.y2) this.y2 = b.y2;
        return this;
    },
    encloses (b) {
        return b && this.x1 <= b.x1 && this.x2 >= b.x2 && this.y1 <= b.y1 && this.y2 >= b.y2;
    },
    alignsWith (b) {
        return b && (this.x1 == b.x1 || this.x2 == b.x2 || this.y1 == b.y1 || this.y2 == b.y2);
    },
    intersects (b) {
        return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);
    },
    contains (x, y) {
        return !(x < this.x1 || x > this.x2 || y < this.y1 || y > this.y2);
    },
    width () {
        return this.x2 - this.x1;
    },
    height () {
        return this.y2 - this.y1;
    }
};
function $989bf735d0693be2$export$6d08773d2e66f8f2(mark) {
    this.mark = mark;
    this.bounds = this.bounds || new $989bf735d0693be2$export$c4e9d269599ab4b4();
}
function $989bf735d0693be2$export$3142cb2f1b79aeb9(mark) {
    $989bf735d0693be2$export$6d08773d2e66f8f2.call(this, mark);
    this.items = this.items || [];
}
(0, $4SWbq.inherits)($989bf735d0693be2$export$3142cb2f1b79aeb9, $989bf735d0693be2$export$6d08773d2e66f8f2);
function $989bf735d0693be2$export$84bade0bc2a1e1(customLoader) {
    this._pending = 0;
    this._loader = customLoader || (0, $2ttvf.loader)();
}
function $989bf735d0693be2$var$increment(loader) {
    loader._pending += 1;
}
function $989bf735d0693be2$var$decrement(loader) {
    loader._pending -= 1;
}
$989bf735d0693be2$export$84bade0bc2a1e1.prototype = {
    pending () {
        return this._pending;
    },
    sanitizeURL (uri) {
        const loader = this;
        $989bf735d0693be2$var$increment(loader);
        return loader._loader.sanitize(uri, {
            context: "href"
        }).then((opt)=>{
            $989bf735d0693be2$var$decrement(loader);
            return opt;
        }).catch(()=>{
            $989bf735d0693be2$var$decrement(loader);
            return null;
        });
    },
    loadImage (uri) {
        const loader = this, Image = (0, $bWlF6.image)();
        $989bf735d0693be2$var$increment(loader);
        return loader._loader.sanitize(uri, {
            context: "image"
        }).then((opt)=>{
            const url = opt.href;
            if (!url || !Image) throw {
                url: url
            };
            const img = new Image();
            // set crossOrigin only if cors is defined; empty string sets anonymous mode
            // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin
            const cors = (0, $4SWbq.hasOwnProperty)(opt, "crossOrigin") ? opt.crossOrigin : "anonymous";
            if (cors != null) img.crossOrigin = cors;
            // attempt to load image resource
            img.onload = ()=>$989bf735d0693be2$var$decrement(loader);
            img.onerror = ()=>$989bf735d0693be2$var$decrement(loader);
            img.src = url;
            return img;
        }).catch((e)=>{
            $989bf735d0693be2$var$decrement(loader);
            return {
                complete: false,
                width: 0,
                height: 0,
                src: e && e.url || ""
            };
        });
    },
    ready () {
        const loader = this;
        return new Promise((accept)=>{
            function poll(value) {
                if (!loader.pending()) accept(value);
                else setTimeout(()=>{
                    poll(true);
                }, 10);
            }
            poll(false);
        });
    }
};
function $989bf735d0693be2$export$f56ddbf1a28ee2d5(bounds, item, miter) {
    if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
        const sw = item.strokeWidth != null ? +item.strokeWidth : 1;
        bounds.expand(sw + (miter ? $989bf735d0693be2$var$miterAdjustment(item, sw) : 0));
    }
    return bounds;
}
function $989bf735d0693be2$var$miterAdjustment(item, strokeWidth) {
    // TODO: more sophisticated adjustment? Or miter support in boundContext?
    return item.strokeJoin && item.strokeJoin !== "miter" ? 0 : strokeWidth;
}
const $989bf735d0693be2$var$circleThreshold = $989bf735d0693be2$var$Tau - 1e-8;
let $989bf735d0693be2$var$bounds, $989bf735d0693be2$var$lx, $989bf735d0693be2$var$ly, $989bf735d0693be2$var$rot, $989bf735d0693be2$var$ma, $989bf735d0693be2$var$mb, $989bf735d0693be2$var$mc, $989bf735d0693be2$var$md;
const $989bf735d0693be2$var$add = (x, y)=>$989bf735d0693be2$var$bounds.add(x, y);
const $989bf735d0693be2$var$addL = (x, y)=>$989bf735d0693be2$var$add($989bf735d0693be2$var$lx = x, $989bf735d0693be2$var$ly = y);
const $989bf735d0693be2$var$addX = (x)=>$989bf735d0693be2$var$add(x, $989bf735d0693be2$var$bounds.y1);
const $989bf735d0693be2$var$addY = (y)=>$989bf735d0693be2$var$add($989bf735d0693be2$var$bounds.x1, y);
const $989bf735d0693be2$var$px = (x, y)=>$989bf735d0693be2$var$ma * x + $989bf735d0693be2$var$mc * y;
const $989bf735d0693be2$var$py = (x, y)=>$989bf735d0693be2$var$mb * x + $989bf735d0693be2$var$md * y;
const $989bf735d0693be2$var$addp = (x, y)=>$989bf735d0693be2$var$add($989bf735d0693be2$var$px(x, y), $989bf735d0693be2$var$py(x, y));
const $989bf735d0693be2$var$addpL = (x, y)=>$989bf735d0693be2$var$addL($989bf735d0693be2$var$px(x, y), $989bf735d0693be2$var$py(x, y));
function $989bf735d0693be2$export$bd2ae2eff0a0032c(_, deg) {
    $989bf735d0693be2$var$bounds = _;
    if (deg) {
        $989bf735d0693be2$var$rot = deg * $989bf735d0693be2$var$DegToRad;
        $989bf735d0693be2$var$ma = $989bf735d0693be2$var$md = Math.cos($989bf735d0693be2$var$rot);
        $989bf735d0693be2$var$mb = Math.sin($989bf735d0693be2$var$rot);
        $989bf735d0693be2$var$mc = -$989bf735d0693be2$var$mb;
    } else {
        $989bf735d0693be2$var$ma = $989bf735d0693be2$var$md = 1;
        $989bf735d0693be2$var$rot = $989bf735d0693be2$var$mb = $989bf735d0693be2$var$mc = 0;
    }
    return $989bf735d0693be2$var$context$1;
}
const $989bf735d0693be2$var$context$1 = {
    beginPath () {},
    closePath () {},
    moveTo: $989bf735d0693be2$var$addpL,
    lineTo: $989bf735d0693be2$var$addpL,
    rect (x, y, w, h) {
        if ($989bf735d0693be2$var$rot) {
            $989bf735d0693be2$var$addp(x + w, y);
            $989bf735d0693be2$var$addp(x + w, y + h);
            $989bf735d0693be2$var$addp(x, y + h);
            $989bf735d0693be2$var$addpL(x, y);
        } else {
            $989bf735d0693be2$var$add(x + w, y + h);
            $989bf735d0693be2$var$addL(x, y);
        }
    },
    quadraticCurveTo (x1, y1, x2, y2) {
        const px1 = $989bf735d0693be2$var$px(x1, y1), py1 = $989bf735d0693be2$var$py(x1, y1), px2 = $989bf735d0693be2$var$px(x2, y2), py2 = $989bf735d0693be2$var$py(x2, y2);
        $989bf735d0693be2$var$quadExtrema($989bf735d0693be2$var$lx, px1, px2, $989bf735d0693be2$var$addX);
        $989bf735d0693be2$var$quadExtrema($989bf735d0693be2$var$ly, py1, py2, $989bf735d0693be2$var$addY);
        $989bf735d0693be2$var$addL(px2, py2);
    },
    bezierCurveTo (x1, y1, x2, y2, x3, y3) {
        const px1 = $989bf735d0693be2$var$px(x1, y1), py1 = $989bf735d0693be2$var$py(x1, y1), px2 = $989bf735d0693be2$var$px(x2, y2), py2 = $989bf735d0693be2$var$py(x2, y2), px3 = $989bf735d0693be2$var$px(x3, y3), py3 = $989bf735d0693be2$var$py(x3, y3);
        $989bf735d0693be2$var$cubicExtrema($989bf735d0693be2$var$lx, px1, px2, px3, $989bf735d0693be2$var$addX);
        $989bf735d0693be2$var$cubicExtrema($989bf735d0693be2$var$ly, py1, py2, py3, $989bf735d0693be2$var$addY);
        $989bf735d0693be2$var$addL(px3, py3);
    },
    arc (cx, cy, r, sa, ea, ccw) {
        sa += $989bf735d0693be2$var$rot;
        ea += $989bf735d0693be2$var$rot;
        // store last point on path
        $989bf735d0693be2$var$lx = r * Math.cos(ea) + cx;
        $989bf735d0693be2$var$ly = r * Math.sin(ea) + cy;
        if (Math.abs(ea - sa) > $989bf735d0693be2$var$circleThreshold) {
            // treat as full circle
            $989bf735d0693be2$var$add(cx - r, cy - r);
            $989bf735d0693be2$var$add(cx + r, cy + r);
        } else {
            const update = (a)=>$989bf735d0693be2$var$add(r * Math.cos(a) + cx, r * Math.sin(a) + cy);
            let s, i;
            // sample end points
            update(sa);
            update(ea);
            // sample interior points aligned with 90 degrees
            if (ea !== sa) {
                sa = sa % $989bf735d0693be2$var$Tau;
                if (sa < 0) sa += $989bf735d0693be2$var$Tau;
                ea = ea % $989bf735d0693be2$var$Tau;
                if (ea < 0) ea += $989bf735d0693be2$var$Tau;
                if (ea < sa) {
                    ccw = !ccw; // flip direction
                    s = sa;
                    sa = ea;
                    ea = s; // swap end-points
                }
                if (ccw) {
                    ea -= $989bf735d0693be2$var$Tau;
                    s = sa - sa % $989bf735d0693be2$var$HalfPi;
                    for(i = 0; i < 4 && s > ea; ++i, s -= $989bf735d0693be2$var$HalfPi)update(s);
                } else {
                    s = sa - sa % $989bf735d0693be2$var$HalfPi + $989bf735d0693be2$var$HalfPi;
                    for(i = 0; i < 4 && s < ea; ++i, s = s + $989bf735d0693be2$var$HalfPi)update(s);
                }
            }
        }
    }
};
function $989bf735d0693be2$var$quadExtrema(x0, x1, x2, cb) {
    const t = (x0 - x1) / (x0 + x2 - 2 * x1);
    if (0 < t && t < 1) cb(x0 + (x1 - x0) * t);
}
function $989bf735d0693be2$var$cubicExtrema(x0, x1, x2, x3, cb) {
    const a = x3 - x0 + 3 * x1 - 3 * x2, b = x0 + x2 - 2 * x1, c = x0 - x1;
    let t0 = 0, t1 = 0, r;
    // solve for parameter t
    if (Math.abs(a) > $989bf735d0693be2$var$Epsilon) {
        // quadratic equation
        r = b * b + c * a;
        if (r >= 0) {
            r = Math.sqrt(r);
            t0 = (-b + r) / a;
            t1 = (-b - r) / a;
        }
    } else // linear equation
    t0 = 0.5 * c / b;
    // calculate position
    if (0 < t0 && t0 < 1) cb($989bf735d0693be2$var$cubic(t0, x0, x1, x2, x3));
    if (0 < t1 && t1 < 1) cb($989bf735d0693be2$var$cubic(t1, x0, x1, x2, x3));
}
function $989bf735d0693be2$var$cubic(t, x0, x1, x2, x3) {
    const s = 1 - t, s2 = s * s, t2 = t * t;
    return s2 * s * x0 + 3 * s2 * t * x1 + 3 * s * t2 * x2 + t2 * t * x3;
}
var $989bf735d0693be2$var$context = ($989bf735d0693be2$var$context = (0, $bWlF6.canvas)(1, 1)) ? $989bf735d0693be2$var$context.getContext("2d") : null;
const $989bf735d0693be2$var$b = new $989bf735d0693be2$export$c4e9d269599ab4b4();
function $989bf735d0693be2$export$9c6f6f4ce95536f3(draw) {
    return function(item, brush) {
        // rely on (inaccurate) bounds intersection if no context
        if (!$989bf735d0693be2$var$context) return true;
        // add path to offscreen graphics context
        draw($989bf735d0693be2$var$context, item);
        // get bounds intersection region
        $989bf735d0693be2$var$b.clear().union(item.bounds).intersect(brush).round();
        const { x1: x1, y1: y1, x2: x2, y2: y2 } = $989bf735d0693be2$var$b;
        // iterate over intersection region
        // perform fine grained inclusion test
        for(let y = y1; y <= y2; ++y)for(let x = x1; x <= x2; ++x){
            if ($989bf735d0693be2$var$context.isPointInPath(x, y)) return true;
        }
        // false if no hits in intersection region
        return false;
    };
}
function $989bf735d0693be2$export$922770df9a960df2(item, box) {
    return box.contains(item.x || 0, item.y || 0);
}
function $989bf735d0693be2$var$intersectRect(item, box) {
    const x = item.x || 0, y = item.y || 0, w = item.width || 0, h = item.height || 0;
    return box.intersects($989bf735d0693be2$var$b.set(x, y, x + w, y + h));
}
function $989bf735d0693be2$export$b9a71256e53be83d(item, box) {
    const x = item.x || 0, y = item.y || 0, x2 = item.x2 != null ? item.x2 : x, y2 = item.y2 != null ? item.y2 : y;
    return $989bf735d0693be2$export$880a79940296e85d(box, x, y, x2, y2);
}
function $989bf735d0693be2$export$880a79940296e85d(box, x, y, u, v) {
    const { x1: x1, y1: y1, x2: x2, y2: y2 } = box, dx = u - x, dy = v - y;
    let t0 = 0, t1 = 1, p, q, r, e;
    for(e = 0; e < 4; ++e){
        if (e === 0) {
            p = -dx;
            q = -(x1 - x);
        }
        if (e === 1) {
            p = dx;
            q = x2 - x;
        }
        if (e === 2) {
            p = -dy;
            q = -(y1 - y);
        }
        if (e === 3) {
            p = dy;
            q = y2 - y;
        }
        if (Math.abs(p) < 1e-10 && q < 0) return false;
        r = q / p;
        if (p < 0) {
            if (r > t1) return false;
            else if (r > t0) t0 = r;
        } else if (p > 0) {
            if (r < t0) return false;
            else if (r < t1) t1 = r;
        }
    }
    return true;
}
function $989bf735d0693be2$var$blend(context, item) {
    context.globalCompositeOperation = item.blend || "source-over";
}
function $989bf735d0693be2$var$value(value, dflt) {
    return value == null ? dflt : value;
}
function $989bf735d0693be2$var$addStops(gradient, stops) {
    const n = stops.length;
    for(let i = 0; i < n; ++i)gradient.addColorStop(stops[i].offset, stops[i].color);
    return gradient;
}
function $989bf735d0693be2$var$gradient(context, spec, bounds) {
    const w = bounds.width(), h = bounds.height();
    let gradient;
    if (spec.gradient === "radial") gradient = context.createRadialGradient(bounds.x1 + $989bf735d0693be2$var$value(spec.x1, 0.5) * w, bounds.y1 + $989bf735d0693be2$var$value(spec.y1, 0.5) * h, Math.max(w, h) * $989bf735d0693be2$var$value(spec.r1, 0), bounds.x1 + $989bf735d0693be2$var$value(spec.x2, 0.5) * w, bounds.y1 + $989bf735d0693be2$var$value(spec.y2, 0.5) * h, Math.max(w, h) * $989bf735d0693be2$var$value(spec.r2, 0.5));
    else {
        // linear gradient
        const x1 = $989bf735d0693be2$var$value(spec.x1, 0), y1 = $989bf735d0693be2$var$value(spec.y1, 0), x2 = $989bf735d0693be2$var$value(spec.x2, 1), y2 = $989bf735d0693be2$var$value(spec.y2, 0);
        if (x1 === x2 || y1 === y2 || w === h) // axis aligned: use normal gradient
        gradient = context.createLinearGradient(bounds.x1 + x1 * w, bounds.y1 + y1 * h, bounds.x1 + x2 * w, bounds.y1 + y2 * h);
        else {
            // not axis aligned: render gradient into a pattern (#2365)
            // this allows us to use normalized bounding box coordinates
            const image = (0, $bWlF6.canvas)(Math.ceil(w), Math.ceil(h)), ictx = image.getContext("2d");
            ictx.scale(w, h);
            ictx.fillStyle = $989bf735d0693be2$var$addStops(ictx.createLinearGradient(x1, y1, x2, y2), spec.stops);
            ictx.fillRect(0, 0, w, h);
            return context.createPattern(image, "no-repeat");
        }
    }
    return $989bf735d0693be2$var$addStops(gradient, spec.stops);
}
function $989bf735d0693be2$var$color(context, item, value) {
    return $989bf735d0693be2$var$isGradient(value) ? $989bf735d0693be2$var$gradient(context, value, item.bounds) : value;
}
function $989bf735d0693be2$var$fill(context, item, opacity) {
    opacity *= item.fillOpacity == null ? 1 : item.fillOpacity;
    if (opacity > 0) {
        context.globalAlpha = opacity;
        context.fillStyle = $989bf735d0693be2$var$color(context, item, item.fill);
        return true;
    } else return false;
}
var $989bf735d0693be2$var$Empty = [];
function $989bf735d0693be2$var$stroke(context, item, opacity) {
    var lw = (lw = item.strokeWidth) != null ? lw : 1;
    if (lw <= 0) return false;
    opacity *= item.strokeOpacity == null ? 1 : item.strokeOpacity;
    if (opacity > 0) {
        context.globalAlpha = opacity;
        context.strokeStyle = $989bf735d0693be2$var$color(context, item, item.stroke);
        context.lineWidth = lw;
        context.lineCap = item.strokeCap || "butt";
        context.lineJoin = item.strokeJoin || "miter";
        context.miterLimit = item.strokeMiterLimit || 10;
        if (context.setLineDash) {
            context.setLineDash(item.strokeDash || $989bf735d0693be2$var$Empty);
            context.lineDashOffset = item.strokeDashOffset || 0;
        }
        return true;
    } else return false;
}
function $989bf735d0693be2$var$compare(a, b) {
    return a.zindex - b.zindex || a.index - b.index;
}
function $989bf735d0693be2$export$990580f29c847381(scene) {
    if (!scene.zdirty) return scene.zitems;
    var items = scene.items, output = [], item, i, n;
    for(i = 0, n = items.length; i < n; ++i){
        item = items[i];
        item.index = i;
        if (item.zindex) output.push(item);
    }
    scene.zdirty = false;
    return scene.zitems = output.sort($989bf735d0693be2$var$compare);
}
function $989bf735d0693be2$export$35dcb66345c6f823(scene, visitor) {
    var items = scene.items, i, n;
    if (!items || !items.length) return;
    const zitems = $989bf735d0693be2$export$990580f29c847381(scene);
    if (zitems && zitems.length) {
        for(i = 0, n = items.length; i < n; ++i)if (!items[i].zindex) visitor(items[i]);
        items = zitems;
    }
    for(i = 0, n = items.length; i < n; ++i)visitor(items[i]);
}
function $989bf735d0693be2$export$cd28c9751452c4ee(scene, visitor) {
    var items = scene.items, hit, i;
    if (!items || !items.length) return null;
    const zitems = $989bf735d0693be2$export$990580f29c847381(scene);
    if (zitems && zitems.length) items = zitems;
    for(i = items.length; --i >= 0;){
        if (hit = visitor(items[i])) return hit;
    }
    if (items === zitems) {
        for(items = scene.items, i = items.length; --i >= 0;)if (!items[i].zindex) {
            if (hit = visitor(items[i])) return hit;
        }
    }
    return null;
}
function $989bf735d0693be2$var$drawAll(path) {
    return function(context, scene, bounds) {
        $989bf735d0693be2$export$35dcb66345c6f823(scene, (item)=>{
            if (!bounds || bounds.intersects(item.bounds)) $989bf735d0693be2$var$drawPath(path, context, item, item);
        });
    };
}
function $989bf735d0693be2$var$drawOne(path) {
    return function(context, scene, bounds) {
        if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) $989bf735d0693be2$var$drawPath(path, context, scene.items[0], scene.items);
    };
}
function $989bf735d0693be2$var$drawPath(path, context, item, items) {
    var opacity = item.opacity == null ? 1 : item.opacity;
    if (opacity === 0) return;
    if (path(context, items)) return;
    $989bf735d0693be2$var$blend(context, item);
    if (item.fill && $989bf735d0693be2$var$fill(context, item, opacity)) context.fill();
    if (item.stroke && $989bf735d0693be2$var$stroke(context, item, opacity)) context.stroke();
}
function $989bf735d0693be2$var$pick$1(test) {
    test = test || (0, $4SWbq.truthy);
    return function(context, scene, x, y, gx, gy) {
        x *= context.pixelRatio;
        y *= context.pixelRatio;
        return $989bf735d0693be2$export$cd28c9751452c4ee(scene, (item)=>{
            const b = item.bounds;
            // first hit test against bounding box
            if (b && !b.contains(gx, gy) || !b) return;
            // if in bounding box, perform more careful test
            if (test(context, item, x, y, gx, gy)) return item;
        });
    };
}
function $989bf735d0693be2$var$hitPath(path, filled) {
    return function(context, o, x, y) {
        var item = Array.isArray(o) ? o[0] : o, fill = filled == null ? item.fill : filled, stroke = item.stroke && context.isPointInStroke, lw, lc;
        if (stroke) {
            lw = item.strokeWidth;
            lc = item.strokeCap;
            context.lineWidth = lw != null ? lw : 1;
            context.lineCap = lc != null ? lc : "butt";
        }
        return path(context, o) ? false : fill && context.isPointInPath(x, y) || stroke && context.isPointInStroke(x, y);
    };
}
function $989bf735d0693be2$var$pickPath(path) {
    return $989bf735d0693be2$var$pick$1($989bf735d0693be2$var$hitPath(path));
}
function $989bf735d0693be2$var$translate(x, y) {
    return "translate(" + x + "," + y + ")";
}
function $989bf735d0693be2$var$rotate(a) {
    return "rotate(" + a + ")";
}
function $989bf735d0693be2$var$scale(scaleX, scaleY) {
    return "scale(" + scaleX + "," + scaleY + ")";
}
function $989bf735d0693be2$var$translateItem(item) {
    return $989bf735d0693be2$var$translate(item.x || 0, item.y || 0);
}
function $989bf735d0693be2$var$rotateItem(item) {
    return $989bf735d0693be2$var$translate(item.x || 0, item.y || 0) + (item.angle ? " " + $989bf735d0693be2$var$rotate(item.angle) : "");
}
function $989bf735d0693be2$var$transformItem(item) {
    return $989bf735d0693be2$var$translate(item.x || 0, item.y || 0) + (item.angle ? " " + $989bf735d0693be2$var$rotate(item.angle) : "") + (item.scaleX || item.scaleY ? " " + $989bf735d0693be2$var$scale(item.scaleX || 1, item.scaleY || 1) : "");
}
function $989bf735d0693be2$var$markItemPath(type, shape, isect) {
    function attr(emit, item) {
        emit("transform", $989bf735d0693be2$var$rotateItem(item));
        emit("d", shape(null, item));
    }
    function bound(bounds, item) {
        shape($989bf735d0693be2$export$bd2ae2eff0a0032c(bounds, item.angle), item);
        return $989bf735d0693be2$export$f56ddbf1a28ee2d5(bounds, item).translate(item.x || 0, item.y || 0);
    }
    function draw(context, item) {
        var x = item.x || 0, y = item.y || 0, a = item.angle || 0;
        context.translate(x, y);
        if (a) context.rotate(a *= $989bf735d0693be2$var$DegToRad);
        context.beginPath();
        shape(context, item);
        if (a) context.rotate(-a);
        context.translate(-x, -y);
    }
    return {
        type: type,
        tag: "path",
        nested: false,
        attr: attr,
        bound: bound,
        draw: $989bf735d0693be2$var$drawAll(draw),
        pick: $989bf735d0693be2$var$pickPath(draw),
        isect: isect || $989bf735d0693be2$export$9c6f6f4ce95536f3(draw)
    };
}
var $989bf735d0693be2$var$arc = $989bf735d0693be2$var$markItemPath("arc", $989bf735d0693be2$var$arc$1);
function $989bf735d0693be2$var$pickArea(a, p) {
    var v = a[0].orient === "horizontal" ? p[1] : p[0], z = a[0].orient === "horizontal" ? "y" : "x", i = a.length, min = Infinity, hit, d;
    while(--i >= 0){
        if (a[i].defined === false) continue;
        d = Math.abs(a[i][z] - v);
        if (d < min) {
            min = d;
            hit = a[i];
        }
    }
    return hit;
}
function $989bf735d0693be2$var$pickLine(a, p) {
    var t = Math.pow(a[0].strokeWidth || 1, 2), i = a.length, dx, dy, dd;
    while(--i >= 0){
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        if (dd < t) return a[i];
    }
    return null;
}
function $989bf735d0693be2$var$pickTrail(a, p) {
    var i = a.length, dx, dy, dd;
    while(--i >= 0){
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        dx = a[i].size || 1;
        if (dd < dx * dx) return a[i];
    }
    return null;
}
function $989bf735d0693be2$var$markMultiItemPath(type, shape, tip) {
    function attr(emit, item) {
        var items = item.mark.items;
        if (items.length) emit("d", shape(null, items));
    }
    function bound(bounds, mark) {
        var items = mark.items;
        if (items.length === 0) return bounds;
        else {
            shape($989bf735d0693be2$export$bd2ae2eff0a0032c(bounds), items);
            return $989bf735d0693be2$export$f56ddbf1a28ee2d5(bounds, items[0]);
        }
    }
    function draw(context, items) {
        context.beginPath();
        shape(context, items);
    }
    const hit = $989bf735d0693be2$var$hitPath(draw);
    function pick(context, scene, x, y, gx, gy) {
        var items = scene.items, b = scene.bounds;
        if (!items || !items.length || b && !b.contains(gx, gy)) return null;
        x *= context.pixelRatio;
        y *= context.pixelRatio;
        return hit(context, items, x, y) ? items[0] : null;
    }
    return {
        type: type,
        tag: "path",
        nested: true,
        attr: attr,
        bound: bound,
        draw: $989bf735d0693be2$var$drawOne(draw),
        pick: pick,
        isect: $989bf735d0693be2$export$922770df9a960df2,
        tip: tip
    };
}
var $989bf735d0693be2$var$area = $989bf735d0693be2$var$markMultiItemPath("area", $989bf735d0693be2$var$area$1, $989bf735d0693be2$var$pickArea);
function $989bf735d0693be2$var$clip(context, scene) {
    var clip = scene.clip;
    context.save();
    if ((0, $4SWbq.isFunction)(clip)) {
        context.beginPath();
        clip(context);
        context.clip();
    } else $989bf735d0693be2$var$clipGroup(context, scene.group);
}
function $989bf735d0693be2$var$clipGroup(context, group) {
    context.beginPath();
    $989bf735d0693be2$var$hasCornerRadius(group) ? $989bf735d0693be2$var$rectangle(context, group, 0, 0) : context.rect(0, 0, group.width || 0, group.height || 0);
    context.clip();
}
function $989bf735d0693be2$var$offset$1(item) {
    const sw = $989bf735d0693be2$var$value(item.strokeWidth, 1);
    return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;
}
function $989bf735d0693be2$var$attr$5(emit, item) {
    emit("transform", $989bf735d0693be2$var$translateItem(item));
}
function $989bf735d0693be2$var$emitRectangle(emit, item) {
    const off = $989bf735d0693be2$var$offset$1(item);
    emit("d", $989bf735d0693be2$var$rectangle(null, item, off, off));
}
function $989bf735d0693be2$var$background(emit, item) {
    emit("class", "background");
    emit("aria-hidden", true);
    $989bf735d0693be2$var$emitRectangle(emit, item);
}
function $989bf735d0693be2$var$foreground(emit, item) {
    emit("class", "foreground");
    emit("aria-hidden", true);
    if (item.strokeForeground) $989bf735d0693be2$var$emitRectangle(emit, item);
    else emit("d", "");
}
function $989bf735d0693be2$var$content(emit, item, renderer) {
    const url = item.clip ? $989bf735d0693be2$var$clip$1(renderer, item, item) : null;
    emit("clip-path", url);
}
function $989bf735d0693be2$var$bound$5(bounds, group) {
    if (!group.clip && group.items) {
        const items = group.items, m = items.length;
        for(let j = 0; j < m; ++j)bounds.union(items[j].bounds);
    }
    if ((group.clip || group.width || group.height) && !group.noBound) bounds.add(0, 0).add(group.width || 0, group.height || 0);
    $989bf735d0693be2$export$f56ddbf1a28ee2d5(bounds, group);
    return bounds.translate(group.x || 0, group.y || 0);
}
function $989bf735d0693be2$var$rectanglePath(context, group, x, y) {
    const off = $989bf735d0693be2$var$offset$1(group);
    context.beginPath();
    $989bf735d0693be2$var$rectangle(context, group, (x || 0) + off, (y || 0) + off);
}
const $989bf735d0693be2$var$hitBackground = $989bf735d0693be2$var$hitPath($989bf735d0693be2$var$rectanglePath);
const $989bf735d0693be2$var$hitForeground = $989bf735d0693be2$var$hitPath($989bf735d0693be2$var$rectanglePath, false);
const $989bf735d0693be2$var$hitCorner = $989bf735d0693be2$var$hitPath($989bf735d0693be2$var$rectanglePath, true);
function $989bf735d0693be2$var$draw$4(context, scene, bounds) {
    $989bf735d0693be2$export$35dcb66345c6f823(scene, (group)=>{
        const gx = group.x || 0, gy = group.y || 0, fore = group.strokeForeground, opacity = group.opacity == null ? 1 : group.opacity;
        // draw group background
        if ((group.stroke || group.fill) && opacity) {
            $989bf735d0693be2$var$rectanglePath(context, group, gx, gy);
            $989bf735d0693be2$var$blend(context, group);
            if (group.fill && $989bf735d0693be2$var$fill(context, group, opacity)) context.fill();
            if (group.stroke && !fore && $989bf735d0693be2$var$stroke(context, group, opacity)) context.stroke();
        }
        // setup graphics context, set clip and bounds
        context.save();
        context.translate(gx, gy);
        if (group.clip) $989bf735d0693be2$var$clipGroup(context, group);
        if (bounds) bounds.translate(-gx, -gy);
        // draw group contents
        $989bf735d0693be2$export$35dcb66345c6f823(group, (item)=>{
            this.draw(context, item, bounds);
        });
        // restore graphics context
        if (bounds) bounds.translate(gx, gy);
        context.restore();
        // draw group foreground
        if (fore && group.stroke && opacity) {
            $989bf735d0693be2$var$rectanglePath(context, group, gx, gy);
            $989bf735d0693be2$var$blend(context, group);
            if ($989bf735d0693be2$var$stroke(context, group, opacity)) context.stroke();
        }
    });
}
function $989bf735d0693be2$var$pick(context, scene, x, y, gx, gy) {
    if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) return null;
    const cx = x * context.pixelRatio, cy = y * context.pixelRatio;
    return $989bf735d0693be2$export$cd28c9751452c4ee(scene, (group)=>{
        let hit, dx, dy;
        // first hit test bounding box
        const b = group.bounds;
        if (b && !b.contains(gx, gy)) return;
        // passed bounds check, test rectangular clip
        dx = group.x || 0;
        dy = group.y || 0;
        const dw = dx + (group.width || 0), dh = dy + (group.height || 0), c = group.clip;
        if (c && (gx < dx || gx > dw || gy < dy || gy > dh)) return;
        // adjust coordinate system
        context.save();
        context.translate(dx, dy);
        dx = gx - dx;
        dy = gy - dy;
        // test background for rounded corner clip
        if (c && $989bf735d0693be2$var$hasCornerRadius(group) && !$989bf735d0693be2$var$hitCorner(context, group, cx, cy)) {
            context.restore();
            return null;
        }
        const fore = group.strokeForeground, ix = scene.interactive !== false;
        // hit test against group foreground
        if (ix && fore && group.stroke && $989bf735d0693be2$var$hitForeground(context, group, cx, cy)) {
            context.restore();
            return group;
        }
        // hit test against contained marks
        hit = $989bf735d0693be2$export$cd28c9751452c4ee(group, (mark)=>$989bf735d0693be2$var$pickMark(mark, dx, dy) ? this.pick(mark, x, y, dx, dy) : null);
        // hit test against group background
        if (!hit && ix && (group.fill || !fore && group.stroke) && $989bf735d0693be2$var$hitBackground(context, group, cx, cy)) hit = group;
        // restore state and return
        context.restore();
        return hit || null;
    });
}
function $989bf735d0693be2$var$pickMark(mark, x, y) {
    return (mark.interactive !== false || mark.marktype === "group") && mark.bounds && mark.bounds.contains(x, y);
}
var $989bf735d0693be2$var$group = {
    type: "group",
    tag: "g",
    nested: false,
    attr: $989bf735d0693be2$var$attr$5,
    bound: $989bf735d0693be2$var$bound$5,
    draw: $989bf735d0693be2$var$draw$4,
    pick: $989bf735d0693be2$var$pick,
    isect: $989bf735d0693be2$var$intersectRect,
    content: $989bf735d0693be2$var$content,
    background: $989bf735d0693be2$var$background,
    foreground: $989bf735d0693be2$var$foreground
};
var $989bf735d0693be2$var$metadata = {
    "xmlns": "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink",
    "version": "1.1"
};
function $989bf735d0693be2$var$getImage(item, renderer) {
    var image = item.image;
    if (!image || item.url && item.url !== image.url) {
        image = {
            complete: false,
            width: 0,
            height: 0
        };
        renderer.loadImage(item.url).then((image)=>{
            item.image = image;
            item.image.url = item.url;
        });
    }
    return image;
}
function $989bf735d0693be2$var$imageWidth(item, image) {
    return item.width != null ? item.width : !image || !image.width ? 0 : item.aspect !== false && item.height ? item.height * image.width / image.height : image.width;
}
function $989bf735d0693be2$var$imageHeight(item, image) {
    return item.height != null ? item.height : !image || !image.height ? 0 : item.aspect !== false && item.width ? item.width * image.height / image.width : image.height;
}
function $989bf735d0693be2$var$imageXOffset(align, w) {
    return align === "center" ? w / 2 : align === "right" ? w : 0;
}
function $989bf735d0693be2$var$imageYOffset(baseline, h) {
    return baseline === "middle" ? h / 2 : baseline === "bottom" ? h : 0;
}
function $989bf735d0693be2$var$attr$4(emit, item, renderer) {
    const img = $989bf735d0693be2$var$getImage(item, renderer), w = $989bf735d0693be2$var$imageWidth(item, img), h = $989bf735d0693be2$var$imageHeight(item, img), x = (item.x || 0) - $989bf735d0693be2$var$imageXOffset(item.align, w), y = (item.y || 0) - $989bf735d0693be2$var$imageYOffset(item.baseline, h), i = !img.src && img.toDataURL ? img.toDataURL() : img.src || "";
    emit("href", i, $989bf735d0693be2$var$metadata["xmlns:xlink"], "xlink:href");
    emit("transform", $989bf735d0693be2$var$translate(x, y));
    emit("width", w);
    emit("height", h);
    emit("preserveAspectRatio", item.aspect === false ? "none" : "xMidYMid");
}
function $989bf735d0693be2$var$bound$4(bounds, item) {
    const img = item.image, w = $989bf735d0693be2$var$imageWidth(item, img), h = $989bf735d0693be2$var$imageHeight(item, img), x = (item.x || 0) - $989bf735d0693be2$var$imageXOffset(item.align, w), y = (item.y || 0) - $989bf735d0693be2$var$imageYOffset(item.baseline, h);
    return bounds.set(x, y, x + w, y + h);
}
function $989bf735d0693be2$var$draw$3(context, scene, bounds) {
    $989bf735d0693be2$export$35dcb66345c6f823(scene, (item)=>{
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        const img = $989bf735d0693be2$var$getImage(item, this);
        let w = $989bf735d0693be2$var$imageWidth(item, img);
        let h = $989bf735d0693be2$var$imageHeight(item, img);
        if (w === 0 || h === 0) return; // early exit
        let x = (item.x || 0) - $989bf735d0693be2$var$imageXOffset(item.align, w), y = (item.y || 0) - $989bf735d0693be2$var$imageYOffset(item.baseline, h), opacity, ar0, ar1, t;
        if (item.aspect !== false) {
            ar0 = img.width / img.height;
            ar1 = item.width / item.height;
            if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
                if (ar1 < ar0) {
                    t = w / ar0;
                    y += (h - t) / 2;
                    h = t;
                } else {
                    t = h * ar0;
                    x += (w - t) / 2;
                    w = t;
                }
            }
        }
        if (img.complete || img.toDataURL) {
            $989bf735d0693be2$var$blend(context, item);
            context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
            context.imageSmoothingEnabled = item.smooth !== false;
            context.drawImage(img, x, y, w, h);
        }
    });
}
var $989bf735d0693be2$var$image = {
    type: "image",
    tag: "image",
    nested: false,
    attr: $989bf735d0693be2$var$attr$4,
    bound: $989bf735d0693be2$var$bound$4,
    draw: $989bf735d0693be2$var$draw$3,
    pick: $989bf735d0693be2$var$pick$1(),
    isect: (0, $4SWbq.truthy),
    // bounds check is sufficient
    get: $989bf735d0693be2$var$getImage,
    xOffset: $989bf735d0693be2$var$imageXOffset,
    yOffset: $989bf735d0693be2$var$imageYOffset
};
var $989bf735d0693be2$var$line = $989bf735d0693be2$var$markMultiItemPath("line", $989bf735d0693be2$var$line$1, $989bf735d0693be2$var$pickLine);
function $989bf735d0693be2$var$attr$3(emit, item) {
    var sx = item.scaleX || 1, sy = item.scaleY || 1;
    if (sx !== 1 || sy !== 1) emit("vector-effect", "non-scaling-stroke");
    emit("transform", $989bf735d0693be2$var$transformItem(item));
    emit("d", item.path);
}
function $989bf735d0693be2$var$path$1(context, item) {
    var path = item.path;
    if (path == null) return true;
    var x = item.x || 0, y = item.y || 0, sx = item.scaleX || 1, sy = item.scaleY || 1, a = (item.angle || 0) * $989bf735d0693be2$var$DegToRad, cache = item.pathCache;
    if (!cache || cache.path !== path) (item.pathCache = cache = $989bf735d0693be2$export$f072bacea2bdc7f4(path)).path = path;
    if (a && context.rotate && context.translate) {
        context.translate(x, y);
        context.rotate(a);
        $989bf735d0693be2$export$910e4b65963299c9(context, cache, 0, 0, sx, sy);
        context.rotate(-a);
        context.translate(-x, -y);
    } else $989bf735d0693be2$export$910e4b65963299c9(context, cache, x, y, sx, sy);
}
function $989bf735d0693be2$var$bound$3(bounds, item) {
    return $989bf735d0693be2$var$path$1($989bf735d0693be2$export$bd2ae2eff0a0032c(bounds, item.angle), item) ? bounds.set(0, 0, 0, 0) : $989bf735d0693be2$export$f56ddbf1a28ee2d5(bounds, item, true);
}
var $989bf735d0693be2$var$path$2 = {
    type: "path",
    tag: "path",
    nested: false,
    attr: $989bf735d0693be2$var$attr$3,
    bound: $989bf735d0693be2$var$bound$3,
    draw: $989bf735d0693be2$var$drawAll($989bf735d0693be2$var$path$1),
    pick: $989bf735d0693be2$var$pickPath($989bf735d0693be2$var$path$1),
    isect: $989bf735d0693be2$export$9c6f6f4ce95536f3($989bf735d0693be2$var$path$1)
};
function $989bf735d0693be2$var$attr$2(emit, item) {
    emit("d", $989bf735d0693be2$var$rectangle(null, item));
}
function $989bf735d0693be2$var$bound$2(bounds, item) {
    var x, y;
    return $989bf735d0693be2$export$f56ddbf1a28ee2d5(bounds.set(x = item.x || 0, y = item.y || 0, x + item.width || 0, y + item.height || 0), item);
}
function $989bf735d0693be2$var$draw$2(context, item) {
    context.beginPath();
    $989bf735d0693be2$var$rectangle(context, item);
}
var $989bf735d0693be2$var$rect = {
    type: "rect",
    tag: "path",
    nested: false,
    attr: $989bf735d0693be2$var$attr$2,
    bound: $989bf735d0693be2$var$bound$2,
    draw: $989bf735d0693be2$var$drawAll($989bf735d0693be2$var$draw$2),
    pick: $989bf735d0693be2$var$pickPath($989bf735d0693be2$var$draw$2),
    isect: $989bf735d0693be2$var$intersectRect
};
function $989bf735d0693be2$var$attr$1(emit, item) {
    emit("transform", $989bf735d0693be2$var$translateItem(item));
    emit("x2", item.x2 != null ? item.x2 - (item.x || 0) : 0);
    emit("y2", item.y2 != null ? item.y2 - (item.y || 0) : 0);
}
function $989bf735d0693be2$var$bound$1(bounds, item) {
    var x1, y1;
    return $989bf735d0693be2$export$f56ddbf1a28ee2d5(bounds.set(x1 = item.x || 0, y1 = item.y || 0, item.x2 != null ? item.x2 : x1, item.y2 != null ? item.y2 : y1), item);
}
function $989bf735d0693be2$var$path(context, item, opacity) {
    var x1, y1, x2, y2;
    if (item.stroke && $989bf735d0693be2$var$stroke(context, item, opacity)) {
        x1 = item.x || 0;
        y1 = item.y || 0;
        x2 = item.x2 != null ? item.x2 : x1;
        y2 = item.y2 != null ? item.y2 : y1;
        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        return true;
    }
    return false;
}
function $989bf735d0693be2$var$draw$1(context, scene, bounds) {
    $989bf735d0693be2$export$35dcb66345c6f823(scene, (item)=>{
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        var opacity = item.opacity == null ? 1 : item.opacity;
        if (opacity && $989bf735d0693be2$var$path(context, item, opacity)) {
            $989bf735d0693be2$var$blend(context, item);
            context.stroke();
        }
    });
}
function $989bf735d0693be2$var$hit$1(context, item, x, y) {
    if (!context.isPointInStroke) return false;
    return $989bf735d0693be2$var$path(context, item, 1) && context.isPointInStroke(x, y);
}
var $989bf735d0693be2$var$rule = {
    type: "rule",
    tag: "line",
    nested: false,
    attr: $989bf735d0693be2$var$attr$1,
    bound: $989bf735d0693be2$var$bound$1,
    draw: $989bf735d0693be2$var$draw$1,
    pick: $989bf735d0693be2$var$pick$1($989bf735d0693be2$var$hit$1),
    isect: $989bf735d0693be2$export$b9a71256e53be83d
};
var $989bf735d0693be2$var$shape = $989bf735d0693be2$var$markItemPath("shape", $989bf735d0693be2$var$shape$1);
var $989bf735d0693be2$var$symbol = $989bf735d0693be2$var$markItemPath("symbol", $989bf735d0693be2$var$symbol$1, $989bf735d0693be2$export$922770df9a960df2);
// memoize text width measurement
const $989bf735d0693be2$var$widthCache = (0, $4SWbq.lruCache)();
var $989bf735d0693be2$export$e06c1f209ff0a915 = {
    height: $989bf735d0693be2$export$85e3c3ca0c6fb93,
    measureWidth: $989bf735d0693be2$var$measureWidth,
    estimateWidth: $989bf735d0693be2$var$estimateWidth,
    width: $989bf735d0693be2$var$estimateWidth,
    canvas: $989bf735d0693be2$var$useCanvas
};
$989bf735d0693be2$var$useCanvas(true);
function $989bf735d0693be2$var$useCanvas(use) {
    $989bf735d0693be2$export$e06c1f209ff0a915.width = use && $989bf735d0693be2$var$context ? $989bf735d0693be2$var$measureWidth : $989bf735d0693be2$var$estimateWidth;
}
// make simple estimate if no canvas is available
function $989bf735d0693be2$var$estimateWidth(item, text) {
    return $989bf735d0693be2$var$_estimateWidth($989bf735d0693be2$var$textValue(item, text), $989bf735d0693be2$export$85e3c3ca0c6fb93(item));
}
function $989bf735d0693be2$var$_estimateWidth(text, currentFontHeight) {
    return ~~(0.8 * text.length * currentFontHeight);
}
// measure text width if canvas is available
function $989bf735d0693be2$var$measureWidth(item, text) {
    return $989bf735d0693be2$export$85e3c3ca0c6fb93(item) <= 0 || !(text = $989bf735d0693be2$var$textValue(item, text)) ? 0 : $989bf735d0693be2$var$_measureWidth(text, $989bf735d0693be2$export$a74e2025f5286b02(item));
}
function $989bf735d0693be2$var$_measureWidth(text, currentFont) {
    const key = `(${currentFont}) ${text}`;
    let width = $989bf735d0693be2$var$widthCache.get(key);
    if (width === undefined) {
        $989bf735d0693be2$var$context.font = currentFont;
        width = $989bf735d0693be2$var$context.measureText(text).width;
        $989bf735d0693be2$var$widthCache.set(key, width);
    }
    return width;
}
function $989bf735d0693be2$export$85e3c3ca0c6fb93(item) {
    return item.fontSize != null ? +item.fontSize || 0 : 11;
}
function $989bf735d0693be2$export$c9b91427b594e14(item) {
    return item.lineHeight != null ? item.lineHeight : $989bf735d0693be2$export$85e3c3ca0c6fb93(item) + 2;
}
function $989bf735d0693be2$var$lineArray(_) {
    return (0, $4SWbq.isArray)(_) ? _.length > 1 ? _ : _[0] : _;
}
function $989bf735d0693be2$var$textLines(item) {
    return $989bf735d0693be2$var$lineArray(item.lineBreak && item.text && !(0, $4SWbq.isArray)(item.text) ? item.text.split(item.lineBreak) : item.text);
}
function $989bf735d0693be2$export$3bcd7f3bdac987b9(item) {
    const tl = $989bf735d0693be2$var$textLines(item);
    return ((0, $4SWbq.isArray)(tl) ? tl.length - 1 : 0) * $989bf735d0693be2$export$c9b91427b594e14(item);
}
function $989bf735d0693be2$var$textValue(item, line) {
    const text = line == null ? "" : (line + "").trim();
    return item.limit > 0 && text.length ? $989bf735d0693be2$var$truncate(item, text) : text;
}
function $989bf735d0693be2$var$widthGetter(item) {
    if ($989bf735d0693be2$export$e06c1f209ff0a915.width === $989bf735d0693be2$var$measureWidth) {
        // we are using canvas
        const currentFont = $989bf735d0693be2$export$a74e2025f5286b02(item);
        return (text)=>$989bf735d0693be2$var$_measureWidth(text, currentFont);
    } else {
        // we are relying on estimates
        const currentFontHeight = $989bf735d0693be2$export$85e3c3ca0c6fb93(item);
        return (text)=>$989bf735d0693be2$var$_estimateWidth(text, currentFontHeight);
    }
}
function $989bf735d0693be2$var$truncate(item, text) {
    var limit = +item.limit, width = $989bf735d0693be2$var$widthGetter(item);
    if (width(text) < limit) return text;
    var ellipsis = item.ellipsis || "\u2026", rtl = item.dir === "rtl", lo = 0, hi = text.length, mid;
    limit -= width(ellipsis);
    if (rtl) {
        while(lo < hi){
            mid = lo + hi >>> 1;
            if (width(text.slice(mid)) > limit) lo = mid + 1;
            else hi = mid;
        }
        return ellipsis + text.slice(lo);
    } else {
        while(lo < hi){
            mid = 1 + (lo + hi >>> 1);
            if (width(text.slice(0, mid)) < limit) lo = mid;
            else hi = mid - 1;
        }
        return text.slice(0, lo) + ellipsis;
    }
}
function $989bf735d0693be2$export$a5975749f0374264(item, quote) {
    var font = item.font;
    return (quote && font ? String(font).replace(/"/g, "'") : font) || "sans-serif";
}
function $989bf735d0693be2$export$a74e2025f5286b02(item, quote) {
    return "" + (item.fontStyle ? item.fontStyle + " " : "") + (item.fontVariant ? item.fontVariant + " " : "") + (item.fontWeight ? item.fontWeight + " " : "") + $989bf735d0693be2$export$85e3c3ca0c6fb93(item) + "px " + $989bf735d0693be2$export$a5975749f0374264(item, quote);
}
function $989bf735d0693be2$var$offset(item) {
    // perform our own font baseline calculation
    // why? not all browsers support SVG 1.1 'alignment-baseline' :(
    // this also ensures consistent layout across renderers
    var baseline = item.baseline, h = $989bf735d0693be2$export$85e3c3ca0c6fb93(item);
    return Math.round(baseline === "top" ? 0.79 * h : baseline === "middle" ? 0.30 * h : baseline === "bottom" ? -0.21 * h : baseline === "line-top" ? 0.29 * h + 0.5 * $989bf735d0693be2$export$c9b91427b594e14(item) : baseline === "line-bottom" ? 0.29 * h - 0.5 * $989bf735d0693be2$export$c9b91427b594e14(item) : 0);
}
const $989bf735d0693be2$var$textAlign = {
    "left": "start",
    "center": "middle",
    "right": "end"
};
const $989bf735d0693be2$var$tempBounds = new $989bf735d0693be2$export$c4e9d269599ab4b4();
function $989bf735d0693be2$var$anchorPoint(item) {
    var x = item.x || 0, y = item.y || 0, r = item.radius || 0, t;
    if (r) {
        t = (item.theta || 0) - $989bf735d0693be2$var$HalfPi;
        x += r * Math.cos(t);
        y += r * Math.sin(t);
    }
    $989bf735d0693be2$var$tempBounds.x1 = x;
    $989bf735d0693be2$var$tempBounds.y1 = y;
    return $989bf735d0693be2$var$tempBounds;
}
function $989bf735d0693be2$var$attr(emit, item) {
    var dx = item.dx || 0, dy = (item.dy || 0) + $989bf735d0693be2$var$offset(item), p = $989bf735d0693be2$var$anchorPoint(item), x = p.x1, y = p.y1, a = item.angle || 0, t;
    emit("text-anchor", $989bf735d0693be2$var$textAlign[item.align] || "start");
    if (a) {
        t = $989bf735d0693be2$var$translate(x, y) + " " + $989bf735d0693be2$var$rotate(a);
        if (dx || dy) t += " " + $989bf735d0693be2$var$translate(dx, dy);
    } else t = $989bf735d0693be2$var$translate(x + dx, y + dy);
    emit("transform", t);
}
function $989bf735d0693be2$var$bound(bounds, item, mode) {
    var h = $989bf735d0693be2$export$e06c1f209ff0a915.height(item), a = item.align, p = $989bf735d0693be2$var$anchorPoint(item), x = p.x1, y = p.y1, dx = item.dx || 0, dy = (item.dy || 0) + $989bf735d0693be2$var$offset(item) - Math.round(0.8 * h), // use 4/5 offset
    tl = $989bf735d0693be2$var$textLines(item), w;
    // get dimensions
    if ((0, $4SWbq.isArray)(tl)) {
        // multi-line text
        h += $989bf735d0693be2$export$c9b91427b594e14(item) * (tl.length - 1);
        w = tl.reduce((w, t)=>Math.max(w, $989bf735d0693be2$export$e06c1f209ff0a915.width(item, t)), 0);
    } else // single-line text
    w = $989bf735d0693be2$export$e06c1f209ff0a915.width(item, tl);
    // horizontal alignment
    if (a === "center") dx -= w / 2;
    else if (a === "right") dx -= w;
    bounds.set(dx += x, dy += y, dx + w, dy + h);
    if (item.angle && !mode) bounds.rotate(item.angle * $989bf735d0693be2$var$DegToRad, x, y);
    else if (mode === 2) return bounds.rotatedPoints(item.angle * $989bf735d0693be2$var$DegToRad, x, y);
    return bounds;
}
function $989bf735d0693be2$var$draw(context, scene, bounds) {
    $989bf735d0693be2$export$35dcb66345c6f823(scene, (item)=>{
        var opacity = item.opacity == null ? 1 : item.opacity, p, x, y, i, lh, tl, str;
        if (bounds && !bounds.intersects(item.bounds) || // bounds check
        opacity === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0) return;
        context.font = $989bf735d0693be2$export$a74e2025f5286b02(item);
        context.textAlign = item.align || "left";
        p = $989bf735d0693be2$var$anchorPoint(item);
        x = p.x1, y = p.y1;
        if (item.angle) {
            context.save();
            context.translate(x, y);
            context.rotate(item.angle * $989bf735d0693be2$var$DegToRad);
            x = y = 0; // reset x, y
        }
        x += item.dx || 0;
        y += (item.dy || 0) + $989bf735d0693be2$var$offset(item);
        tl = $989bf735d0693be2$var$textLines(item);
        $989bf735d0693be2$var$blend(context, item);
        if ((0, $4SWbq.isArray)(tl)) {
            lh = $989bf735d0693be2$export$c9b91427b594e14(item);
            for(i = 0; i < tl.length; ++i){
                str = $989bf735d0693be2$var$textValue(item, tl[i]);
                if (item.fill && $989bf735d0693be2$var$fill(context, item, opacity)) context.fillText(str, x, y);
                if (item.stroke && $989bf735d0693be2$var$stroke(context, item, opacity)) context.strokeText(str, x, y);
                y += lh;
            }
        } else {
            str = $989bf735d0693be2$var$textValue(item, tl);
            if (item.fill && $989bf735d0693be2$var$fill(context, item, opacity)) context.fillText(str, x, y);
            if (item.stroke && $989bf735d0693be2$var$stroke(context, item, opacity)) context.strokeText(str, x, y);
        }
        if (item.angle) context.restore();
    });
}
function $989bf735d0693be2$var$hit(context, item, x, y, gx, gy) {
    if (item.fontSize <= 0) return false;
    if (!item.angle) return true; // bounds sufficient if no rotation
    // project point into space of unrotated bounds
    var p = $989bf735d0693be2$var$anchorPoint(item), ax = p.x1, ay = p.y1, b = $989bf735d0693be2$var$bound($989bf735d0693be2$var$tempBounds, item, 1), a = -item.angle * $989bf735d0693be2$var$DegToRad, cos = Math.cos(a), sin = Math.sin(a), px = cos * gx - sin * gy + (ax - cos * ax + sin * ay), py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);
    return b.contains(px, py);
}
function $989bf735d0693be2$var$intersectText(item, box) {
    const p = $989bf735d0693be2$var$bound($989bf735d0693be2$var$tempBounds, item, 2);
    return $989bf735d0693be2$export$880a79940296e85d(box, p[0], p[1], p[2], p[3]) || $989bf735d0693be2$export$880a79940296e85d(box, p[0], p[1], p[4], p[5]) || $989bf735d0693be2$export$880a79940296e85d(box, p[4], p[5], p[6], p[7]) || $989bf735d0693be2$export$880a79940296e85d(box, p[2], p[3], p[6], p[7]);
}
var $989bf735d0693be2$var$text = {
    type: "text",
    tag: "text",
    nested: false,
    attr: $989bf735d0693be2$var$attr,
    bound: $989bf735d0693be2$var$bound,
    draw: $989bf735d0693be2$var$draw,
    pick: $989bf735d0693be2$var$pick$1($989bf735d0693be2$var$hit),
    isect: $989bf735d0693be2$var$intersectText
};
var $989bf735d0693be2$var$trail = $989bf735d0693be2$var$markMultiItemPath("trail", $989bf735d0693be2$var$trail$1, $989bf735d0693be2$var$pickTrail);
var $989bf735d0693be2$export$3f7130ac478166a9 = {
    arc: $989bf735d0693be2$var$arc,
    area: $989bf735d0693be2$var$area,
    group: $989bf735d0693be2$var$group,
    image: $989bf735d0693be2$var$image,
    line: $989bf735d0693be2$var$line,
    path: $989bf735d0693be2$var$path$2,
    rect: $989bf735d0693be2$var$rect,
    rule: $989bf735d0693be2$var$rule,
    shape: $989bf735d0693be2$var$shape,
    symbol: $989bf735d0693be2$var$symbol,
    text: $989bf735d0693be2$var$text,
    trail: $989bf735d0693be2$var$trail
};
function $989bf735d0693be2$export$c9a40a04ca8b57d1(item, func, opt) {
    var type = $989bf735d0693be2$export$3f7130ac478166a9[item.mark.marktype], bound = func || type.bound;
    if (type.nested) item = item.mark;
    return bound(item.bounds || (item.bounds = new $989bf735d0693be2$export$c4e9d269599ab4b4()), item, opt);
}
var $989bf735d0693be2$var$DUMMY = {
    mark: null
};
function $989bf735d0693be2$export$7914223fc296453c(mark, bounds, opt) {
    var type = $989bf735d0693be2$export$3f7130ac478166a9[mark.marktype], bound = type.bound, items = mark.items, hasItems = items && items.length, i, n, item, b;
    if (type.nested) {
        if (hasItems) item = items[0];
        else {
            // no items, fake it
            $989bf735d0693be2$var$DUMMY.mark = mark;
            item = $989bf735d0693be2$var$DUMMY;
        }
        b = $989bf735d0693be2$export$c9a40a04ca8b57d1(item, bound, opt);
        bounds = bounds && bounds.union(b) || b;
        return bounds;
    }
    bounds = bounds || mark.bounds && mark.bounds.clear() || new $989bf735d0693be2$export$c4e9d269599ab4b4();
    if (hasItems) for(i = 0, n = items.length; i < n; ++i)bounds.union($989bf735d0693be2$export$c9a40a04ca8b57d1(items[i], bound, opt));
    return mark.bounds = bounds;
}
const $989bf735d0693be2$var$keys = [
    "marktype",
    "name",
    "role",
    "interactive",
    "clip",
    "items",
    "zindex",
    "x",
    "y",
    "width",
    "height",
    "align",
    "baseline",
    // layout
    "fill",
    "fillOpacity",
    "opacity",
    "blend",
    // fill
    "stroke",
    "strokeOpacity",
    "strokeWidth",
    "strokeCap",
    // stroke
    "strokeDash",
    "strokeDashOffset",
    // stroke dash
    "strokeForeground",
    "strokeOffset",
    // group
    "startAngle",
    "endAngle",
    "innerRadius",
    "outerRadius",
    // arc
    "cornerRadius",
    "padAngle",
    // arc, rect
    "cornerRadiusTopLeft",
    "cornerRadiusTopRight",
    // rect, group
    "cornerRadiusBottomLeft",
    "cornerRadiusBottomRight",
    "interpolate",
    "tension",
    "orient",
    "defined",
    // area, line
    "url",
    "aspect",
    "smooth",
    // image
    "path",
    "scaleX",
    "scaleY",
    // path
    "x2",
    "y2",
    // rule
    "size",
    "shape",
    // symbol
    "text",
    "angle",
    "theta",
    "radius",
    "dir",
    "dx",
    "dy",
    // text
    "ellipsis",
    "limit",
    "lineBreak",
    "lineHeight",
    "font",
    "fontSize",
    "fontWeight",
    "fontStyle",
    "fontVariant",
    // font
    "description",
    "aria",
    "ariaRole",
    "ariaRoleDescription" // aria
];
function $989bf735d0693be2$export$a8d0dfba0ca46592(scene, indent) {
    return JSON.stringify(scene, $989bf735d0693be2$var$keys, indent);
}
function $989bf735d0693be2$export$80a53a9eaa9e210f(json) {
    const scene = typeof json === "string" ? JSON.parse(json) : json;
    return $989bf735d0693be2$var$initialize(scene);
}
function $989bf735d0693be2$var$initialize(scene) {
    var type = scene.marktype, items = scene.items, parent, i, n;
    if (items) for(i = 0, n = items.length; i < n; ++i){
        parent = type ? "mark" : "group";
        items[i][parent] = scene;
        if (items[i].zindex) items[i][parent].zdirty = true;
        if ("group" === (type || parent)) $989bf735d0693be2$var$initialize(items[i]);
    }
    if (type) $989bf735d0693be2$export$7914223fc296453c(scene);
    return scene;
}
function $989bf735d0693be2$export$b6b863436f679f05(scene) {
    if (arguments.length) this.root = $989bf735d0693be2$export$80a53a9eaa9e210f(scene);
    else {
        this.root = $989bf735d0693be2$var$createMark({
            marktype: "group",
            name: "root",
            role: "frame"
        });
        this.root.items = [
            new $989bf735d0693be2$export$3142cb2f1b79aeb9(this.root)
        ];
    }
}
$989bf735d0693be2$export$b6b863436f679f05.prototype = {
    toJSON (indent) {
        return $989bf735d0693be2$export$a8d0dfba0ca46592(this.root, indent || 0);
    },
    mark (markdef, group, index) {
        group = group || this.root.items[0];
        const mark = $989bf735d0693be2$var$createMark(markdef, group);
        group.items[index] = mark;
        if (mark.zindex) mark.group.zdirty = true;
        return mark;
    }
};
function $989bf735d0693be2$var$createMark(def, group) {
    const mark = {
        bounds: new $989bf735d0693be2$export$c4e9d269599ab4b4(),
        clip: !!def.clip,
        group: group,
        interactive: def.interactive === false ? false : true,
        items: [],
        marktype: def.marktype,
        name: def.name || undefined,
        role: def.role || undefined,
        zindex: def.zindex || 0
    };
    // add accessibility properties if defined
    if (def.aria != null) mark.aria = def.aria;
    if (def.description) mark.description = def.description;
    return mark;
}
// create a new DOM element
function $989bf735d0693be2$export$5ab7f8f1ec85df50(doc, tag, ns) {
    if (!doc && typeof document !== "undefined" && document.createElement) doc = document;
    return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
}
// find first child element with matching tag
function $989bf735d0693be2$export$ad068160678b9939(el, tag) {
    tag = tag.toLowerCase();
    var nodes = el.childNodes, i = 0, n = nodes.length;
    for(; i < n; ++i)if (nodes[i].tagName.toLowerCase() === tag) return nodes[i];
}
// retrieve child element at given index
// create & insert if doesn't exist or if tags do not match
function $989bf735d0693be2$export$2df02f10bc8f7721(el, index, tag, ns) {
    var a = el.childNodes[index], b;
    if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
        b = a || null;
        a = $989bf735d0693be2$export$5ab7f8f1ec85df50(el.ownerDocument, tag, ns);
        el.insertBefore(a, b);
    }
    return a;
}
// remove all child elements at or above the given index
function $989bf735d0693be2$export$5a8f314b385c1b7f(el, index) {
    var nodes = el.childNodes, curr = nodes.length;
    while(curr > index)el.removeChild(nodes[--curr]);
    return el;
}
// generate css class name for mark
function $989bf735d0693be2$var$cssClass(mark) {
    return "mark-" + mark.marktype + (mark.role ? " role-" + mark.role : "") + (mark.name ? " " + mark.name : "");
}
function $989bf735d0693be2$export$105684a3041cb6f3(event, el) {
    const rect = el.getBoundingClientRect();
    return [
        event.clientX - rect.left - (el.clientLeft || 0),
        event.clientY - rect.top - (el.clientTop || 0)
    ];
}
function $989bf735d0693be2$var$resolveItem(item, event, el, origin) {
    var mark = item && item.mark, mdef, p;
    if (mark && (mdef = $989bf735d0693be2$export$3f7130ac478166a9[mark.marktype]).tip) {
        p = $989bf735d0693be2$export$105684a3041cb6f3(event, el);
        p[0] -= origin[0];
        p[1] -= origin[1];
        while(item = item.mark.group){
            p[0] -= item.x || 0;
            p[1] -= item.y || 0;
        }
        item = mdef.tip(mark.items, p);
    }
    return item;
}
/**
 * Create a new Handler instance.
 * @param {object} [customLoader] - Optional loader instance for
 *   href URL sanitization. If not specified, a standard loader
 *   instance will be generated.
 * @param {function} [customTooltip] - Optional tooltip handler
 *   function for custom tooltip display.
 * @constructor
 */ function $989bf735d0693be2$export$a428cd33b25d5283(customLoader, customTooltip) {
    this._active = null;
    this._handlers = {};
    this._loader = customLoader || (0, $2ttvf.loader)();
    this._tooltip = customTooltip || $989bf735d0693be2$var$defaultTooltip;
}
// The default tooltip display handler.
// Sets the HTML title attribute on the visualization container.
function $989bf735d0693be2$var$defaultTooltip(handler, event, item, value) {
    handler.element().setAttribute("title", value || "");
}
$989bf735d0693be2$export$a428cd33b25d5283.prototype = {
    /**
   * Initialize a new Handler instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {object} [obj] - Optional context object that should serve as
   *   the "this" context for event callbacks.
   * @return {Handler} - This handler instance.
   */ initialize (el, origin, obj) {
        this._el = el;
        this._obj = obj || null;
        return this.origin(origin);
    },
    /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */ element () {
        return this._el;
    },
    /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */ canvas () {
        return this._el && this._el.firstChild;
    },
    /**
   * Get / set the origin coordinates of the visualization.
   */ origin (origin) {
        if (arguments.length) {
            this._origin = origin || [
                0,
                0
            ];
            return this;
        } else return this._origin.slice();
    },
    /**
   * Get / set the scenegraph root.
   */ scene (scene) {
        if (!arguments.length) return this._scene;
        this._scene = scene;
        return this;
    },
    /**
   * Add an event handler. Subclasses should override this method.
   */ on () {},
    /**
   * Remove an event handler. Subclasses should override this method.
   */ off () {},
    /**
   * Utility method for finding the array index of an event handler.
   * @param {Array} h - An array of registered event handlers.
   * @param {string} type - The event type.
   * @param {function} handler - The event handler instance to find.
   * @return {number} - The handler's array index or -1 if not registered.
   */ _handlerIndex (h, type, handler) {
        for(let i = h ? h.length : 0; --i >= 0;){
            if (h[i].type === type && (!handler || h[i].handler === handler)) return i;
        }
        return -1;
    },
    /**
   * Returns an array with registered event handlers.
   * @param {string} [type] - The event type to query. Any annotations
   *   are ignored; for example, for the argument "click.foo", ".foo" will
   *   be ignored and the method returns all "click" handlers. If type is
   *   null or unspecified, this method returns handlers for all types.
   * @return {Array} - A new array containing all registered event handlers.
   */ handlers (type) {
        const h = this._handlers, a = [];
        if (type) a.push(...h[this.eventName(type)]);
        else for(const k in h)a.push(...h[k]);
        return a;
    },
    /**
   * Parses an event name string to return the specific event type.
   * For example, given "click.foo" returns "click"
   * @param {string} name - The input event type string.
   * @return {string} - A string with the event type only.
   */ eventName (name) {
        const i = name.indexOf(".");
        return i < 0 ? name : name.slice(0, i);
    },
    /**
   * Handle hyperlink navigation in response to an item.href value.
   * @param {Event} event - The event triggering hyperlink navigation.
   * @param {Item} item - The scenegraph item.
   * @param {string} href - The URL to navigate to.
   */ handleHref (event, item, href) {
        this._loader.sanitize(href, {
            context: "href"
        }).then((opt)=>{
            const e = new MouseEvent(event.type, event), a = $989bf735d0693be2$export$5ab7f8f1ec85df50(null, "a");
            for(const name in opt)a.setAttribute(name, opt[name]);
            a.dispatchEvent(e);
        }).catch(()=>{});
    },
    /**
   * Handle tooltip display in response to an item.tooltip value.
   * @param {Event} event - The event triggering tooltip display.
   * @param {Item} item - The scenegraph item.
   * @param {boolean} show - A boolean flag indicating whether
   *   to show or hide a tooltip for the given item.
   */ handleTooltip (event, item, show) {
        if (item && item.tooltip != null) {
            item = $989bf735d0693be2$var$resolveItem(item, event, this.canvas(), this._origin);
            const value = show && item && item.tooltip || null;
            this._tooltip.call(this._obj, this, event, item, value);
        }
    },
    /**
   * Returns the size of a scenegraph item and its position relative
   * to the viewport.
   * @param {Item} item - The scenegraph item.
   * @return {object} - A bounding box object (compatible with the
   *   DOMRect type) consisting of x, y, width, heigh, top, left,
   *   right, and bottom properties.
   */ getItemBoundingClientRect (item) {
        const el = this.canvas();
        if (!el) return;
        const rect = el.getBoundingClientRect(), origin = this._origin, bounds = item.bounds, width = bounds.width(), height = bounds.height();
        let x = bounds.x1 + origin[0] + rect.left, y = bounds.y1 + origin[1] + rect.top;
        // translate coordinate for each parent group
        while(item.mark && (item = item.mark.group)){
            x += item.x || 0;
            y += item.y || 0;
        }
        // return DOMRect-compatible bounding box
        return {
            x: x,
            y: y,
            width: width,
            height: height,
            left: x,
            top: y,
            right: x + width,
            bottom: y + height
        };
    }
};
/**
 * Create a new Renderer instance.
 * @param {object} [loader] - Optional loader instance for
 *   image and href URL sanitization. If not specified, a
 *   standard loader instance will be generated.
 * @constructor
 */ function $989bf735d0693be2$export$88530751e3977073(loader) {
    this._el = null;
    this._bgcolor = null;
    this._loader = new $989bf735d0693be2$export$84bade0bc2a1e1(loader);
}
$989bf735d0693be2$export$88530751e3977073.prototype = {
    /**
   * Initialize a new Renderer instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {number} width - The coordinate width of the display, in pixels.
   * @param {number} height - The coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance.
   */ initialize (el, width, height, origin, scaleFactor) {
        this._el = el;
        return this.resize(width, height, origin, scaleFactor);
    },
    /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */ element () {
        return this._el;
    },
    /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */ canvas () {
        return this._el && this._el.firstChild;
    },
    /**
   * Get / set the background color.
   */ background (bgcolor) {
        if (arguments.length === 0) return this._bgcolor;
        this._bgcolor = bgcolor;
        return this;
    },
    /**
   * Resize the display.
   * @param {number} width - The new coordinate width of the display, in pixels.
   * @param {number} height - The new coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The new origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance;
   */ resize (width, height, origin, scaleFactor) {
        this._width = width;
        this._height = height;
        this._origin = origin || [
            0,
            0
        ];
        this._scale = scaleFactor || 1;
        return this;
    },
    /**
   * Report a dirty item whose bounds should be redrawn.
   * This base class method does nothing. Subclasses that perform
   * incremental should implement this method.
   * @param {Item} item - The dirty item whose bounds should be redrawn.
   */ dirty () {},
    /**
   * Render an input scenegraph, potentially with a set of dirty items.
   * This method will perform an immediate rendering with available resources.
   * The renderer may also need to perform image loading to perform a complete
   * render. This process can lead to asynchronous re-rendering of the scene
   * after this method returns. To receive notification when rendering is
   * complete, use the renderAsync method instead.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Renderer} - This renderer instance.
   */ render (scene) {
        const r = this;
        // bind arguments into a render call, and cache it
        // this function may be subsequently called for async redraw
        r._call = function() {
            r._render(scene);
        };
        // invoke the renderer
        r._call();
        // clear the cached call for garbage collection
        // async redraws will stash their own copy
        r._call = null;
        return r;
    },
    /**
   * Internal rendering method. Renderer subclasses should override this
   * method to actually perform rendering.
   * @param {object} scene - The root mark of a scenegraph to render.
   */ _render () {
    // subclasses to override
    },
    /**
   * Asynchronous rendering method. Similar to render, but returns a Promise
   * that resolves when all rendering is completed. Sometimes a renderer must
   * perform image loading to get a complete rendering. The returned
   * Promise will not resolve until this process completes.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Promise} - A Promise that resolves when rendering is complete.
   */ renderAsync (scene) {
        const r = this.render(scene);
        return this._ready ? this._ready.then(()=>r) : Promise.resolve(r);
    },
    /**
   * Internal method for asynchronous resource loading.
   * Proxies method calls to the ImageLoader, and tracks loading
   * progress to invoke a re-render once complete.
   * @param {string} method - The method name to invoke on the ImageLoader.
   * @param {string} uri - The URI for the requested resource.
   * @return {Promise} - A Promise that resolves to the requested resource.
   */ _load (method, uri) {
        var r = this, p = r._loader[method](uri);
        if (!r._ready) {
            // re-render the scene when loading completes
            const call = r._call;
            r._ready = r._loader.ready().then((redraw)=>{
                if (redraw) call();
                r._ready = null;
            });
        }
        return p;
    },
    /**
   * Sanitize a URL to include as a hyperlink in the rendered scene.
   * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string to sanitize.
   * @return {Promise} - A Promise that resolves to the sanitized URL.
   */ sanitizeURL (uri) {
        return this._load("sanitizeURL", uri);
    },
    /**
   * Requests an image to include in the rendered scene.
   * This method proxies a call to ImageLoader.loadImage, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string of the image.
   * @return {Promise} - A Promise that resolves to the loaded Image.
   */ loadImage (uri) {
        return this._load("loadImage", uri);
    }
};
const $989bf735d0693be2$var$KeyDownEvent = "keydown";
const $989bf735d0693be2$var$KeyPressEvent = "keypress";
const $989bf735d0693be2$var$KeyUpEvent = "keyup";
const $989bf735d0693be2$var$DragEnterEvent = "dragenter";
const $989bf735d0693be2$var$DragLeaveEvent = "dragleave";
const $989bf735d0693be2$var$DragOverEvent = "dragover";
const $989bf735d0693be2$var$MouseDownEvent = "mousedown";
const $989bf735d0693be2$var$MouseUpEvent = "mouseup";
const $989bf735d0693be2$var$MouseMoveEvent = "mousemove";
const $989bf735d0693be2$var$MouseOutEvent = "mouseout";
const $989bf735d0693be2$var$MouseOverEvent = "mouseover";
const $989bf735d0693be2$var$ClickEvent = "click";
const $989bf735d0693be2$var$DoubleClickEvent = "dblclick";
const $989bf735d0693be2$var$WheelEvent = "wheel";
const $989bf735d0693be2$var$MouseWheelEvent = "mousewheel";
const $989bf735d0693be2$var$TouchStartEvent = "touchstart";
const $989bf735d0693be2$var$TouchMoveEvent = "touchmove";
const $989bf735d0693be2$var$TouchEndEvent = "touchend";
const $989bf735d0693be2$var$Events = [
    $989bf735d0693be2$var$KeyDownEvent,
    $989bf735d0693be2$var$KeyPressEvent,
    $989bf735d0693be2$var$KeyUpEvent,
    $989bf735d0693be2$var$DragEnterEvent,
    $989bf735d0693be2$var$DragLeaveEvent,
    $989bf735d0693be2$var$DragOverEvent,
    $989bf735d0693be2$var$MouseDownEvent,
    $989bf735d0693be2$var$MouseUpEvent,
    $989bf735d0693be2$var$MouseMoveEvent,
    $989bf735d0693be2$var$MouseOutEvent,
    $989bf735d0693be2$var$MouseOverEvent,
    $989bf735d0693be2$var$ClickEvent,
    $989bf735d0693be2$var$DoubleClickEvent,
    $989bf735d0693be2$var$WheelEvent,
    $989bf735d0693be2$var$MouseWheelEvent,
    $989bf735d0693be2$var$TouchStartEvent,
    $989bf735d0693be2$var$TouchMoveEvent,
    $989bf735d0693be2$var$TouchEndEvent
];
const $989bf735d0693be2$var$TooltipShowEvent = $989bf735d0693be2$var$MouseMoveEvent;
const $989bf735d0693be2$var$TooltipHideEvent = $989bf735d0693be2$var$MouseOutEvent;
const $989bf735d0693be2$var$HrefEvent = $989bf735d0693be2$var$ClickEvent;
function $989bf735d0693be2$export$7919a88d62c5dd21(loader, tooltip) {
    $989bf735d0693be2$export$a428cd33b25d5283.call(this, loader, tooltip);
    this._down = null;
    this._touch = null;
    this._first = true;
    this._events = {};
}
const $989bf735d0693be2$var$eventBundle = (type)=>type === $989bf735d0693be2$var$TouchStartEvent || type === $989bf735d0693be2$var$TouchMoveEvent || type === $989bf735d0693be2$var$TouchEndEvent ? [
        $989bf735d0693be2$var$TouchStartEvent,
        $989bf735d0693be2$var$TouchMoveEvent,
        $989bf735d0693be2$var$TouchEndEvent
    ] : [
        type
    ];
// lazily add listeners to the canvas as needed
function $989bf735d0693be2$var$eventListenerCheck(handler, type) {
    $989bf735d0693be2$var$eventBundle(type).forEach((_)=>$989bf735d0693be2$var$addEventListener(handler, _));
}
function $989bf735d0693be2$var$addEventListener(handler, type) {
    const canvas = handler.canvas();
    if (canvas && !handler._events[type]) {
        handler._events[type] = 1;
        canvas.addEventListener(type, handler[type] ? (evt)=>handler[type](evt) : (evt)=>handler.fire(type, evt));
    }
}
function $989bf735d0693be2$var$move(moveEvent, overEvent, outEvent) {
    return function(evt) {
        const a = this._active, p = this.pickEvent(evt);
        if (p === a) // active item and picked item are the same
        this.fire(moveEvent, evt); // fire move
        else {
            // active item and picked item are different
            if (!a || !a.exit) // fire out for prior active item
            // suppress if active item was removed from scene
            this.fire(outEvent, evt);
            this._active = p; // set new active item
            this.fire(overEvent, evt); // fire over for new active item
            this.fire(moveEvent, evt); // fire move for new active item
        }
    };
}
function $989bf735d0693be2$var$inactive(type) {
    return function(evt) {
        this.fire(type, evt);
        this._active = null;
    };
}
(0, $4SWbq.inherits)($989bf735d0693be2$export$7919a88d62c5dd21, $989bf735d0693be2$export$a428cd33b25d5283, {
    initialize (el, origin, obj) {
        this._canvas = el && $989bf735d0693be2$export$ad068160678b9939(el, "canvas");
        // add minimal events required for proper state management
        [
            $989bf735d0693be2$var$ClickEvent,
            $989bf735d0693be2$var$MouseDownEvent,
            $989bf735d0693be2$var$MouseMoveEvent,
            $989bf735d0693be2$var$MouseOutEvent,
            $989bf735d0693be2$var$DragLeaveEvent
        ].forEach((type)=>$989bf735d0693be2$var$eventListenerCheck(this, type));
        return $989bf735d0693be2$export$a428cd33b25d5283.prototype.initialize.call(this, el, origin, obj);
    },
    // return the backing canvas instance
    canvas () {
        return this._canvas;
    },
    // retrieve the current canvas context
    context () {
        return this._canvas.getContext("2d");
    },
    // supported events
    events: $989bf735d0693be2$var$Events,
    // to keep old versions of firefox happy
    DOMMouseScroll (evt) {
        this.fire($989bf735d0693be2$var$MouseWheelEvent, evt);
    },
    mousemove: $989bf735d0693be2$var$move($989bf735d0693be2$var$MouseMoveEvent, $989bf735d0693be2$var$MouseOverEvent, $989bf735d0693be2$var$MouseOutEvent),
    dragover: $989bf735d0693be2$var$move($989bf735d0693be2$var$DragOverEvent, $989bf735d0693be2$var$DragEnterEvent, $989bf735d0693be2$var$DragLeaveEvent),
    mouseout: $989bf735d0693be2$var$inactive($989bf735d0693be2$var$MouseOutEvent),
    dragleave: $989bf735d0693be2$var$inactive($989bf735d0693be2$var$DragLeaveEvent),
    mousedown (evt) {
        this._down = this._active;
        this.fire($989bf735d0693be2$var$MouseDownEvent, evt);
    },
    click (evt) {
        if (this._down === this._active) {
            this.fire($989bf735d0693be2$var$ClickEvent, evt);
            this._down = null;
        }
    },
    touchstart (evt) {
        this._touch = this.pickEvent(evt.changedTouches[0]);
        if (this._first) {
            this._active = this._touch;
            this._first = false;
        }
        this.fire($989bf735d0693be2$var$TouchStartEvent, evt, true);
    },
    touchmove (evt) {
        this.fire($989bf735d0693be2$var$TouchMoveEvent, evt, true);
    },
    touchend (evt) {
        this.fire($989bf735d0693be2$var$TouchEndEvent, evt, true);
        this._touch = null;
    },
    // fire an event
    fire (type, evt, touch) {
        const a = touch ? this._touch : this._active, h = this._handlers[type];
        // set event type relative to scenegraph items
        evt.vegaType = type;
        // handle hyperlinks and tooltips first
        if (type === $989bf735d0693be2$var$HrefEvent && a && a.href) this.handleHref(evt, a, a.href);
        else if (type === $989bf735d0693be2$var$TooltipShowEvent || type === $989bf735d0693be2$var$TooltipHideEvent) this.handleTooltip(evt, a, type !== $989bf735d0693be2$var$TooltipHideEvent);
        // invoke all registered handlers
        if (h) for(let i = 0, len = h.length; i < len; ++i)h[i].handler.call(this._obj, evt, a);
    },
    // add an event handler
    on (type, handler) {
        const name = this.eventName(type), h = this._handlers, i = this._handlerIndex(h[name], type, handler);
        if (i < 0) {
            $989bf735d0693be2$var$eventListenerCheck(this, type);
            (h[name] || (h[name] = [])).push({
                type: type,
                handler: handler
            });
        }
        return this;
    },
    // remove an event handler
    off (type, handler) {
        const name = this.eventName(type), h = this._handlers[name], i = this._handlerIndex(h, type, handler);
        if (i >= 0) h.splice(i, 1);
        return this;
    },
    pickEvent (evt) {
        const p = $989bf735d0693be2$export$105684a3041cb6f3(evt, this._canvas), o = this._origin;
        return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
    },
    // find the scenegraph item at the current mouse position
    // x, y -- the absolute x, y mouse coordinates on the canvas element
    // gx, gy -- the relative coordinates within the current group
    pick (scene, x, y, gx, gy) {
        const g = this.context(), mark = $989bf735d0693be2$export$3f7130ac478166a9[scene.marktype];
        return mark.pick.call(this, g, scene, x, y, gx, gy);
    }
});
function $989bf735d0693be2$var$devicePixelRatio() {
    return typeof window !== "undefined" ? window.devicePixelRatio || 1 : 1;
}
var $989bf735d0693be2$var$pixelRatio = $989bf735d0693be2$var$devicePixelRatio();
function $989bf735d0693be2$var$resize(canvas, width, height, origin, scaleFactor, opt) {
    const inDOM = typeof HTMLElement !== "undefined" && canvas instanceof HTMLElement && canvas.parentNode != null, context = canvas.getContext("2d"), ratio = inDOM ? $989bf735d0693be2$var$pixelRatio : scaleFactor;
    canvas.width = width * ratio;
    canvas.height = height * ratio;
    for(const key in opt)context[key] = opt[key];
    if (inDOM && ratio !== 1) {
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
    }
    context.pixelRatio = ratio;
    context.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
    return canvas;
}
function $989bf735d0693be2$export$7adc20298958481a(loader) {
    $989bf735d0693be2$export$88530751e3977073.call(this, loader);
    this._options = {};
    this._redraw = false;
    this._dirty = new $989bf735d0693be2$export$c4e9d269599ab4b4();
    this._tempb = new $989bf735d0693be2$export$c4e9d269599ab4b4();
}
const $989bf735d0693be2$var$base$1 = $989bf735d0693be2$export$88530751e3977073.prototype;
const $989bf735d0693be2$var$viewBounds = (origin, width, height)=>new $989bf735d0693be2$export$c4e9d269599ab4b4().set(0, 0, width, height).translate(-origin[0], -origin[1]);
function $989bf735d0693be2$var$clipToBounds(g, b, origin) {
    // expand bounds by 1 pixel, then round to pixel boundaries
    b.expand(1).round();
    // align to base pixel grid in case of non-integer scaling (#2425)
    if (g.pixelRatio % 1) b.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);
    // to avoid artifacts translate if origin has fractional pixels
    b.translate(-(origin[0] % 1), -(origin[1] % 1));
    // set clip path
    g.beginPath();
    g.rect(b.x1, b.y1, b.width(), b.height());
    g.clip();
    return b;
}
(0, $4SWbq.inherits)($989bf735d0693be2$export$7adc20298958481a, $989bf735d0693be2$export$88530751e3977073, {
    initialize (el, width, height, origin, scaleFactor, options) {
        this._options = options || {};
        this._canvas = this._options.externalContext ? null : (0, $bWlF6.canvas)(1, 1, this._options.type); // instantiate a small canvas
        if (el && this._canvas) {
            $989bf735d0693be2$export$5a8f314b385c1b7f(el, 0).appendChild(this._canvas);
            this._canvas.setAttribute("class", "marks");
        }
        // this method will invoke resize to size the canvas appropriately
        return $989bf735d0693be2$var$base$1.initialize.call(this, el, width, height, origin, scaleFactor);
    },
    resize (width, height, origin, scaleFactor) {
        $989bf735d0693be2$var$base$1.resize.call(this, width, height, origin, scaleFactor);
        if (this._canvas) // configure canvas size and transform
        $989bf735d0693be2$var$resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options.context);
        else {
            // external context needs to be scaled and positioned to origin
            const ctx = this._options.externalContext;
            if (!ctx) (0, $4SWbq.error)("CanvasRenderer is missing a valid canvas or context");
            ctx.scale(this._scale, this._scale);
            ctx.translate(this._origin[0], this._origin[1]);
        }
        this._redraw = true;
        return this;
    },
    canvas () {
        return this._canvas;
    },
    context () {
        return this._options.externalContext || (this._canvas ? this._canvas.getContext("2d") : null);
    },
    dirty (item) {
        const b = this._tempb.clear().union(item.bounds);
        let g = item.mark.group;
        while(g){
            b.translate(g.x || 0, g.y || 0);
            g = g.mark.group;
        }
        this._dirty.union(b);
    },
    _render (scene) {
        const g = this.context(), o = this._origin, w = this._width, h = this._height, db = this._dirty, vb = $989bf735d0693be2$var$viewBounds(o, w, h);
        // setup
        g.save();
        const b = this._redraw || db.empty() ? (this._redraw = false, vb.expand(1)) : $989bf735d0693be2$var$clipToBounds(g, vb.intersect(db), o);
        this.clear(-o[0], -o[1], w, h);
        // render
        this.draw(g, scene, b);
        // takedown
        g.restore();
        db.clear();
        return this;
    },
    draw (ctx, scene, bounds) {
        const mark = $989bf735d0693be2$export$3f7130ac478166a9[scene.marktype];
        if (scene.clip) $989bf735d0693be2$var$clip(ctx, scene);
        mark.draw.call(this, ctx, scene, bounds);
        if (scene.clip) ctx.restore();
    },
    clear (x, y, w, h) {
        const opt = this._options, g = this.context();
        if (opt.type !== "pdf" && !opt.externalContext) // calling clear rect voids vector output in pdf mode
        // and could remove external context content (#2615)
        g.clearRect(x, y, w, h);
        if (this._bgcolor != null) {
            g.fillStyle = this._bgcolor;
            g.fillRect(x, y, w, h);
        }
    }
});
function $989bf735d0693be2$export$a7f388b81ee313d(loader, tooltip) {
    $989bf735d0693be2$export$a428cd33b25d5283.call(this, loader, tooltip);
    const h = this;
    h._hrefHandler = $989bf735d0693be2$var$listener(h, (evt, item)=>{
        if (item && item.href) h.handleHref(evt, item, item.href);
    });
    h._tooltipHandler = $989bf735d0693be2$var$listener(h, (evt, item)=>{
        h.handleTooltip(evt, item, evt.type !== $989bf735d0693be2$var$TooltipHideEvent);
    });
}
// wrap an event listener for the SVG DOM
const $989bf735d0693be2$var$listener = (context, handler)=>(evt)=>{
        let item = evt.target.__data__;
        item = Array.isArray(item) ? item[0] : item;
        evt.vegaType = evt.type;
        handler.call(context._obj, evt, item);
    };
(0, $4SWbq.inherits)($989bf735d0693be2$export$a7f388b81ee313d, $989bf735d0693be2$export$a428cd33b25d5283, {
    initialize (el, origin, obj) {
        let svg = this._svg;
        if (svg) {
            svg.removeEventListener($989bf735d0693be2$var$HrefEvent, this._hrefHandler);
            svg.removeEventListener($989bf735d0693be2$var$TooltipShowEvent, this._tooltipHandler);
            svg.removeEventListener($989bf735d0693be2$var$TooltipHideEvent, this._tooltipHandler);
        }
        this._svg = svg = el && $989bf735d0693be2$export$ad068160678b9939(el, "svg");
        if (svg) {
            svg.addEventListener($989bf735d0693be2$var$HrefEvent, this._hrefHandler);
            svg.addEventListener($989bf735d0693be2$var$TooltipShowEvent, this._tooltipHandler);
            svg.addEventListener($989bf735d0693be2$var$TooltipHideEvent, this._tooltipHandler);
        }
        return $989bf735d0693be2$export$a428cd33b25d5283.prototype.initialize.call(this, el, origin, obj);
    },
    canvas () {
        return this._svg;
    },
    // add an event handler
    on (type, handler) {
        const name = this.eventName(type), h = this._handlers, i = this._handlerIndex(h[name], type, handler);
        if (i < 0) {
            const x = {
                type: type,
                handler: handler,
                listener: $989bf735d0693be2$var$listener(this, handler)
            };
            (h[name] || (h[name] = [])).push(x);
            if (this._svg) this._svg.addEventListener(name, x.listener);
        }
        return this;
    },
    // remove an event handler
    off (type, handler) {
        const name = this.eventName(type), h = this._handlers[name], i = this._handlerIndex(h, type, handler);
        if (i >= 0) {
            if (this._svg) this._svg.removeEventListener(name, h[i].listener);
            h.splice(i, 1);
        }
        return this;
    }
});
const $989bf735d0693be2$var$ARIA_HIDDEN = "aria-hidden";
const $989bf735d0693be2$var$ARIA_LABEL = "aria-label";
const $989bf735d0693be2$var$ARIA_ROLE = "role";
const $989bf735d0693be2$var$ARIA_ROLEDESCRIPTION = "aria-roledescription";
const $989bf735d0693be2$var$GRAPHICS_OBJECT = "graphics-object";
const $989bf735d0693be2$var$GRAPHICS_SYMBOL = "graphics-symbol";
const $989bf735d0693be2$var$bundle = (role, roledesc, label)=>({
        [$989bf735d0693be2$var$ARIA_ROLE]: role,
        [$989bf735d0693be2$var$ARIA_ROLEDESCRIPTION]: roledesc,
        [$989bf735d0693be2$var$ARIA_LABEL]: label || undefined
    });
// these roles are covered by related roles
// we can ignore them, no need to generate attributes
const $989bf735d0693be2$var$AriaIgnore = (0, $4SWbq.toSet)([
    "axis-domain",
    "axis-grid",
    "axis-label",
    "axis-tick",
    "axis-title",
    "legend-band",
    "legend-entry",
    "legend-gradient",
    "legend-label",
    "legend-title",
    "legend-symbol",
    "title"
]);
// aria attribute generators for guide roles
const $989bf735d0693be2$var$AriaGuides = {
    "axis": {
        desc: "axis",
        caption: $989bf735d0693be2$var$axisCaption
    },
    "legend": {
        desc: "legend",
        caption: $989bf735d0693be2$var$legendCaption
    },
    "title-text": {
        desc: "title",
        caption: (item)=>`Title text '${$989bf735d0693be2$var$titleCaption(item)}'`
    },
    "title-subtitle": {
        desc: "subtitle",
        caption: (item)=>`Subtitle text '${$989bf735d0693be2$var$titleCaption(item)}'`
    }
};
// aria properties generated for mark item encoding channels
const $989bf735d0693be2$var$AriaEncode = {
    ariaRole: $989bf735d0693be2$var$ARIA_ROLE,
    ariaRoleDescription: $989bf735d0693be2$var$ARIA_ROLEDESCRIPTION,
    description: $989bf735d0693be2$var$ARIA_LABEL
};
function $989bf735d0693be2$var$ariaItemAttributes(emit, item) {
    const hide = item.aria === false;
    emit($989bf735d0693be2$var$ARIA_HIDDEN, hide || undefined);
    if (hide || item.description == null) for(const prop in $989bf735d0693be2$var$AriaEncode)emit($989bf735d0693be2$var$AriaEncode[prop], undefined);
    else {
        const type = item.mark.marktype;
        emit($989bf735d0693be2$var$ARIA_LABEL, item.description);
        emit($989bf735d0693be2$var$ARIA_ROLE, item.ariaRole || (type === "group" ? $989bf735d0693be2$var$GRAPHICS_OBJECT : $989bf735d0693be2$var$GRAPHICS_SYMBOL));
        emit($989bf735d0693be2$var$ARIA_ROLEDESCRIPTION, item.ariaRoleDescription || `${type} mark`);
    }
}
function $989bf735d0693be2$var$ariaMarkAttributes(mark) {
    return mark.aria === false ? {
        [$989bf735d0693be2$var$ARIA_HIDDEN]: true
    } : $989bf735d0693be2$var$AriaIgnore[mark.role] ? null : $989bf735d0693be2$var$AriaGuides[mark.role] ? $989bf735d0693be2$var$ariaGuide(mark, $989bf735d0693be2$var$AriaGuides[mark.role]) : $989bf735d0693be2$var$ariaMark(mark);
}
function $989bf735d0693be2$var$ariaMark(mark) {
    const type = mark.marktype;
    const recurse = type === "group" || type === "text" || mark.items.some((_)=>_.description != null && _.aria !== false);
    return $989bf735d0693be2$var$bundle(recurse ? $989bf735d0693be2$var$GRAPHICS_OBJECT : $989bf735d0693be2$var$GRAPHICS_SYMBOL, `${type} mark container`, mark.description);
}
function $989bf735d0693be2$var$ariaGuide(mark, opt) {
    try {
        const item = mark.items[0], caption = opt.caption || (()=>"");
        return $989bf735d0693be2$var$bundle(opt.role || $989bf735d0693be2$var$GRAPHICS_SYMBOL, opt.desc, item.description || caption(item));
    } catch (err) {
        return null;
    }
}
function $989bf735d0693be2$var$titleCaption(item) {
    return (0, $4SWbq.array)(item.text).join(" ");
}
function $989bf735d0693be2$var$axisCaption(item) {
    const datum = item.datum, orient = item.orient, title = datum.title ? $989bf735d0693be2$var$extractTitle(item) : null, ctx = item.context, scale = ctx.scales[datum.scale].value, locale = ctx.dataflow.locale(), type = scale.type, xy = orient === "left" || orient === "right" ? "Y" : "X";
    return `${xy}-axis` + (title ? ` titled '${title}'` : "") + ` for a ${(0, $1UqgZ.isDiscrete)(type) ? "discrete" : type} scale` + ` with ${(0, $1UqgZ.domainCaption)(locale, scale, item)}`;
}
function $989bf735d0693be2$var$legendCaption(item) {
    const datum = item.datum, title = datum.title ? $989bf735d0693be2$var$extractTitle(item) : null, type = `${datum.type || ""} legend`.trim(), scales = datum.scales, props = Object.keys(scales), ctx = item.context, scale = ctx.scales[scales[props[0]]].value, locale = ctx.dataflow.locale();
    return $989bf735d0693be2$var$capitalize(type) + (title ? ` titled '${title}'` : "") + ` for ${$989bf735d0693be2$var$channelCaption(props)}` + ` with ${(0, $1UqgZ.domainCaption)(locale, scale, item)}`;
}
function $989bf735d0693be2$var$extractTitle(item) {
    try {
        return (0, $4SWbq.array)((0, $4SWbq.peek)(item.items).items[0].text).join(" ");
    } catch (err) {
        return null;
    }
}
function $989bf735d0693be2$var$channelCaption(props) {
    props = props.map((p)=>p + (p === "fill" || p === "stroke" ? " color" : ""));
    return props.length < 2 ? props[0] : props.slice(0, -1).join(", ") + " and " + (0, $4SWbq.peek)(props);
}
function $989bf735d0693be2$var$capitalize(s) {
    return s.length ? s[0].toUpperCase() + s.slice(1) : s;
}
const $989bf735d0693be2$var$innerText = (val)=>(val + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
const $989bf735d0693be2$var$attrText = (val)=>$989bf735d0693be2$var$innerText(val).replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
function $989bf735d0693be2$export$7b40ce885114f0a6() {
    let buf = "", outer = "", inner = "";
    const stack = [], clear = ()=>outer = inner = "", push = (tag)=>{
        if (outer) {
            buf += `${outer}>${inner}`;
            clear();
        }
        stack.push(tag);
    }, attr = (name, value)=>{
        if (value != null) outer += ` ${name}="${$989bf735d0693be2$var$attrText(value)}"`;
        return m;
    }, m = {
        open (tag) {
            push(tag);
            outer = "<" + tag;
            for(var _len = arguments.length, attrs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)attrs[_key - 1] = arguments[_key];
            for (const set of attrs)for(const key in set)attr(key, set[key]);
            return m;
        },
        close () {
            const tag = stack.pop();
            if (outer) buf += outer + (inner ? `>${inner}</${tag}>` : "/>");
            else buf += `</${tag}>`;
            clear();
            return m;
        },
        attr: attr,
        text: (t)=>(inner += $989bf735d0693be2$var$innerText(t), m),
        toString: ()=>buf
    };
    return m;
}
const $989bf735d0693be2$export$7f35992b425f3d74 = (node)=>$989bf735d0693be2$var$_serialize($989bf735d0693be2$export$7b40ce885114f0a6(), node) + "";
function $989bf735d0693be2$var$_serialize(m, node) {
    m.open(node.tagName);
    if (node.hasAttributes()) {
        const attrs = node.attributes, n = attrs.length;
        for(let i = 0; i < n; ++i)m.attr(attrs[i].name, attrs[i].value);
    }
    if (node.hasChildNodes()) {
        const children = node.childNodes;
        for (const child of children)child.nodeType === 3 // text node
         ? m.text(child.nodeValue) : $989bf735d0693be2$var$_serialize(m, child);
    }
    return m.close();
}
const $989bf735d0693be2$var$stylesAttr = {
    fill: "fill",
    fillOpacity: "fill-opacity",
    stroke: "stroke",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    strokeCap: "stroke-linecap",
    strokeJoin: "stroke-linejoin",
    strokeDash: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeMiterLimit: "stroke-miterlimit",
    opacity: "opacity"
};
const $989bf735d0693be2$var$stylesCss = {
    blend: "mix-blend-mode"
};
// ensure miter limit default is consistent with canvas (#2498)
const $989bf735d0693be2$var$rootAttributes = {
    "fill": "none",
    "stroke-miterlimit": 10
};
const $989bf735d0693be2$var$RootIndex = 0, $989bf735d0693be2$var$xmlns = "http://www.w3.org/2000/xmlns/", $989bf735d0693be2$var$svgns = $989bf735d0693be2$var$metadata.xmlns;
function $989bf735d0693be2$export$42e42f98ac770ce0(loader) {
    $989bf735d0693be2$export$88530751e3977073.call(this, loader);
    this._dirtyID = 0;
    this._dirty = [];
    this._svg = null;
    this._root = null;
    this._defs = null;
}
const $989bf735d0693be2$var$base = $989bf735d0693be2$export$88530751e3977073.prototype;
(0, $4SWbq.inherits)($989bf735d0693be2$export$42e42f98ac770ce0, $989bf735d0693be2$export$88530751e3977073, {
    /**
   * Initialize a new SVGRenderer instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {number} width - The coordinate width of the display, in pixels.
   * @param {number} height - The coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {SVGRenderer} - This renderer instance.
   */ initialize (el, width, height, origin, scaleFactor) {
        // create the svg definitions cache
        this._defs = {};
        this._clearDefs();
        if (el) {
            this._svg = $989bf735d0693be2$export$2df02f10bc8f7721(el, 0, "svg", $989bf735d0693be2$var$svgns);
            this._svg.setAttributeNS($989bf735d0693be2$var$xmlns, "xmlns", $989bf735d0693be2$var$svgns);
            this._svg.setAttributeNS($989bf735d0693be2$var$xmlns, "xmlns:xlink", $989bf735d0693be2$var$metadata["xmlns:xlink"]);
            this._svg.setAttribute("version", $989bf735d0693be2$var$metadata["version"]);
            this._svg.setAttribute("class", "marks");
            $989bf735d0693be2$export$5a8f314b385c1b7f(el, 1);
            // set the svg root group
            this._root = $989bf735d0693be2$export$2df02f10bc8f7721(this._svg, $989bf735d0693be2$var$RootIndex, "g", $989bf735d0693be2$var$svgns);
            $989bf735d0693be2$var$setAttributes(this._root, $989bf735d0693be2$var$rootAttributes);
            // ensure no additional child elements
            $989bf735d0693be2$export$5a8f314b385c1b7f(this._svg, $989bf735d0693be2$var$RootIndex + 1);
        }
        // set background color if defined
        this.background(this._bgcolor);
        return $989bf735d0693be2$var$base.initialize.call(this, el, width, height, origin, scaleFactor);
    },
    /**
   * Get / set the background color.
   */ background (bgcolor) {
        if (arguments.length && this._svg) this._svg.style.setProperty("background-color", bgcolor);
        return $989bf735d0693be2$var$base.background.apply(this, arguments);
    },
    /**
   * Resize the display.
   * @param {number} width - The new coordinate width of the display, in pixels.
   * @param {number} height - The new coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The new origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {SVGRenderer} - This renderer instance;
   */ resize (width, height, origin, scaleFactor) {
        $989bf735d0693be2$var$base.resize.call(this, width, height, origin, scaleFactor);
        if (this._svg) {
            $989bf735d0693be2$var$setAttributes(this._svg, {
                width: this._width * this._scale,
                height: this._height * this._scale,
                viewBox: `0 0 ${this._width} ${this._height}`
            });
            this._root.setAttribute("transform", `translate(${this._origin})`);
        }
        this._dirty = [];
        return this;
    },
    /**
   * Returns the SVG element of the visualization.
   * @return {DOMElement} - The SVG element.
   */ canvas () {
        return this._svg;
    },
    /**
   * Returns an SVG text string for the rendered content,
   * or null if this renderer is currently headless.
   */ svg () {
        const svg = this._svg, bg = this._bgcolor;
        if (!svg) return null;
        let node;
        if (bg) {
            svg.removeAttribute("style");
            node = $989bf735d0693be2$export$2df02f10bc8f7721(svg, $989bf735d0693be2$var$RootIndex, "rect", $989bf735d0693be2$var$svgns);
            $989bf735d0693be2$var$setAttributes(node, {
                width: this._width,
                height: this._height,
                fill: bg
            });
        }
        const text = $989bf735d0693be2$export$7f35992b425f3d74(svg);
        if (bg) {
            svg.removeChild(node);
            this._svg.style.setProperty("background-color", bg);
        }
        return text;
    },
    /**
   * Internal rendering method.
   * @param {object} scene - The root mark of a scenegraph to render.
   */ _render (scene) {
        // perform spot updates and re-render markup
        if (this._dirtyCheck()) {
            if (this._dirtyAll) this._clearDefs();
            this.mark(this._root, scene);
            $989bf735d0693be2$export$5a8f314b385c1b7f(this._root, 1);
        }
        this.defs();
        this._dirty = [];
        ++this._dirtyID;
        return this;
    },
    // -- Manage rendering of items marked as dirty --
    /**
   * Flag a mark item as dirty.
   * @param {Item} item - The mark item.
   */ dirty (item) {
        if (item.dirty !== this._dirtyID) {
            item.dirty = this._dirtyID;
            this._dirty.push(item);
        }
    },
    /**
   * Check if a mark item is considered dirty.
   * @param {Item} item - The mark item.
   */ isDirty (item) {
        return this._dirtyAll || !item._svg || !item._svg.ownerSVGElement || item.dirty === this._dirtyID;
    },
    /**
   * Internal method to check dirty status and, if possible,
   * make targetted updates without a full rendering pass.
   */ _dirtyCheck () {
        this._dirtyAll = true;
        const items = this._dirty;
        if (!items.length || !this._dirtyID) return true;
        const id = ++this._dirtyID;
        let item, mark, type, mdef, i, n, o;
        for(i = 0, n = items.length; i < n; ++i){
            item = items[i];
            mark = item.mark;
            if (mark.marktype !== type) {
                // memoize mark instance lookup
                type = mark.marktype;
                mdef = $989bf735d0693be2$export$3f7130ac478166a9[type];
            }
            if (mark.zdirty && mark.dirty !== id) {
                this._dirtyAll = false;
                $989bf735d0693be2$var$dirtyParents(item, id);
                mark.items.forEach((i)=>{
                    i.dirty = id;
                });
            }
            if (mark.zdirty) continue; // handle in standard drawing pass
            if (item.exit) {
                // EXIT
                if (mdef.nested && mark.items.length) {
                    // if nested mark with remaining points, update instead
                    o = mark.items[0];
                    if (o._svg) this._update(mdef, o._svg, o);
                } else if (item._svg) {
                    // otherwise remove from DOM
                    o = item._svg.parentNode;
                    if (o) o.removeChild(item._svg);
                }
                item._svg = null;
                continue;
            }
            item = mdef.nested ? mark.items[0] : item;
            if (item._update === id) continue; // already visited
            if (!item._svg || !item._svg.ownerSVGElement) {
                // ENTER
                this._dirtyAll = false;
                $989bf735d0693be2$var$dirtyParents(item, id);
            } else // IN-PLACE UPDATE
            this._update(mdef, item._svg, item);
            item._update = id;
        }
        return !this._dirtyAll;
    },
    // -- Construct & maintain scenegraph to SVG mapping ---
    /**
   * Render a set of mark items.
   * @param {SVGElement} el - The parent element in the SVG tree.
   * @param {object} scene - The mark parent to render.
   * @param {SVGElement} prev - The previous sibling in the SVG tree.
   */ mark (el, scene, prev) {
        if (!this.isDirty(scene)) return scene._svg;
        const svg = this._svg, mdef = $989bf735d0693be2$export$3f7130ac478166a9[scene.marktype], events = scene.interactive === false ? "none" : null, isGroup = mdef.tag === "g";
        const parent = $989bf735d0693be2$var$bind(scene, el, prev, "g", svg);
        parent.setAttribute("class", $989bf735d0693be2$var$cssClass(scene));
        // apply aria attributes to parent container element
        const aria = $989bf735d0693be2$var$ariaMarkAttributes(scene);
        for(const key in aria)$989bf735d0693be2$var$setAttribute(parent, key, aria[key]);
        if (!isGroup) $989bf735d0693be2$var$setAttribute(parent, "pointer-events", events);
        $989bf735d0693be2$var$setAttribute(parent, "clip-path", scene.clip ? $989bf735d0693be2$var$clip$1(this, scene, scene.group) : null);
        let sibling = null, i = 0;
        const process = (item)=>{
            const dirty = this.isDirty(item), node = $989bf735d0693be2$var$bind(item, parent, sibling, mdef.tag, svg);
            if (dirty) {
                this._update(mdef, node, item);
                if (isGroup) $989bf735d0693be2$var$recurse(this, node, item);
            }
            sibling = node;
            ++i;
        };
        if (mdef.nested) {
            if (scene.items.length) process(scene.items[0]);
        } else $989bf735d0693be2$export$35dcb66345c6f823(scene, process);
        $989bf735d0693be2$export$5a8f314b385c1b7f(parent, i);
        return parent;
    },
    /**
   * Update the attributes of an SVG element for a mark item.
   * @param {object} mdef - The mark definition object
   * @param {SVGElement} el - The SVG element.
   * @param {Item} item - The mark item.
   */ _update (mdef, el, item) {
        // set dom element and values cache
        // provides access to emit method
        $989bf735d0693be2$var$element = el;
        $989bf735d0693be2$var$values = el.__values__;
        // apply aria-specific properties
        $989bf735d0693be2$var$ariaItemAttributes($989bf735d0693be2$var$emit, item);
        // apply svg attributes
        mdef.attr($989bf735d0693be2$var$emit, item, this);
        // some marks need special treatment
        const extra = $989bf735d0693be2$var$mark_extras[mdef.type];
        if (extra) extra.call(this, mdef, el, item);
        // apply svg style attributes
        // note: element state may have been modified by 'extra' method
        if ($989bf735d0693be2$var$element) this.style($989bf735d0693be2$var$element, item);
    },
    /**
   * Update the presentation attributes of an SVG element for a mark item.
   * @param {SVGElement} el - The SVG element.
   * @param {Item} item - The mark item.
   */ style (el, item) {
        if (item == null) return;
        for(const prop in $989bf735d0693be2$var$stylesAttr){
            let value = prop === "font" ? $989bf735d0693be2$export$a5975749f0374264(item) : item[prop];
            if (value === $989bf735d0693be2$var$values[prop]) continue;
            const name = $989bf735d0693be2$var$stylesAttr[prop];
            if (value == null) el.removeAttribute(name);
            else {
                if ($989bf735d0693be2$var$isGradient(value)) value = $989bf735d0693be2$var$gradientRef(value, this._defs.gradient, $989bf735d0693be2$var$href());
                el.setAttribute(name, value + "");
            }
            $989bf735d0693be2$var$values[prop] = value;
        }
        for(const prop in $989bf735d0693be2$var$stylesCss)$989bf735d0693be2$var$setStyle(el, $989bf735d0693be2$var$stylesCss[prop], item[prop]);
    },
    /**
   * Render SVG defs, as needed.
   * Must be called *after* marks have been processed to ensure the
   * collected state is current and accurate.
   */ defs () {
        const svg = this._svg, defs = this._defs;
        let el = defs.el, index = 0;
        for(const id in defs.gradient){
            if (!el) defs.el = el = $989bf735d0693be2$export$2df02f10bc8f7721(svg, $989bf735d0693be2$var$RootIndex + 1, "defs", $989bf735d0693be2$var$svgns);
            index = $989bf735d0693be2$var$updateGradient(el, defs.gradient[id], index);
        }
        for(const id in defs.clipping){
            if (!el) defs.el = el = $989bf735d0693be2$export$2df02f10bc8f7721(svg, $989bf735d0693be2$var$RootIndex + 1, "defs", $989bf735d0693be2$var$svgns);
            index = $989bf735d0693be2$var$updateClipping(el, defs.clipping[id], index);
        }
        // clean-up
        if (el) index === 0 ? (svg.removeChild(el), defs.el = null) : $989bf735d0693be2$export$5a8f314b385c1b7f(el, index);
    },
    /**
   * Clear defs caches.
   */ _clearDefs () {
        const def = this._defs;
        def.gradient = {};
        def.clipping = {};
    }
});
// mark ancestor chain with a dirty id
function $989bf735d0693be2$var$dirtyParents(item, id) {
    for(; item && item.dirty !== id; item = item.mark.group){
        item.dirty = id;
        if (item.mark && item.mark.dirty !== id) item.mark.dirty = id;
        else return;
    }
}
// update gradient definitions
function $989bf735d0693be2$var$updateGradient(el, grad, index) {
    let i, n, stop;
    if (grad.gradient === "radial") {
        // SVG radial gradients automatically transform to normalized bbox
        // coordinates, in a way that is cumbersome to replicate in canvas.
        // We wrap the radial gradient in a pattern element, allowing us to
        // maintain a circular gradient that matches what canvas provides.
        let pt = $989bf735d0693be2$export$2df02f10bc8f7721(el, index++, "pattern", $989bf735d0693be2$var$svgns);
        $989bf735d0693be2$var$setAttributes(pt, {
            id: $989bf735d0693be2$var$patternPrefix + grad.id,
            viewBox: "0,0,1,1",
            width: "100%",
            height: "100%",
            preserveAspectRatio: "xMidYMid slice"
        });
        pt = $989bf735d0693be2$export$2df02f10bc8f7721(pt, 0, "rect", $989bf735d0693be2$var$svgns);
        $989bf735d0693be2$var$setAttributes(pt, {
            width: 1,
            height: 1,
            fill: `url(${$989bf735d0693be2$var$href()}#${grad.id})`
        });
        el = $989bf735d0693be2$export$2df02f10bc8f7721(el, index++, "radialGradient", $989bf735d0693be2$var$svgns);
        $989bf735d0693be2$var$setAttributes(el, {
            id: grad.id,
            fx: grad.x1,
            fy: grad.y1,
            fr: grad.r1,
            cx: grad.x2,
            cy: grad.y2,
            r: grad.r2
        });
    } else {
        el = $989bf735d0693be2$export$2df02f10bc8f7721(el, index++, "linearGradient", $989bf735d0693be2$var$svgns);
        $989bf735d0693be2$var$setAttributes(el, {
            id: grad.id,
            x1: grad.x1,
            x2: grad.x2,
            y1: grad.y1,
            y2: grad.y2
        });
    }
    for(i = 0, n = grad.stops.length; i < n; ++i){
        stop = $989bf735d0693be2$export$2df02f10bc8f7721(el, i, "stop", $989bf735d0693be2$var$svgns);
        stop.setAttribute("offset", grad.stops[i].offset);
        stop.setAttribute("stop-color", grad.stops[i].color);
    }
    $989bf735d0693be2$export$5a8f314b385c1b7f(el, i);
    return index;
}
// update clipping path definitions
function $989bf735d0693be2$var$updateClipping(el, clip, index) {
    let mask;
    el = $989bf735d0693be2$export$2df02f10bc8f7721(el, index, "clipPath", $989bf735d0693be2$var$svgns);
    el.setAttribute("id", clip.id);
    if (clip.path) {
        mask = $989bf735d0693be2$export$2df02f10bc8f7721(el, 0, "path", $989bf735d0693be2$var$svgns);
        mask.setAttribute("d", clip.path);
    } else {
        mask = $989bf735d0693be2$export$2df02f10bc8f7721(el, 0, "rect", $989bf735d0693be2$var$svgns);
        $989bf735d0693be2$var$setAttributes(mask, {
            x: 0,
            y: 0,
            width: clip.width,
            height: clip.height
        });
    }
    $989bf735d0693be2$export$5a8f314b385c1b7f(el, 1);
    return index + 1;
}
// Recursively process group contents.
function $989bf735d0693be2$var$recurse(renderer, el, group) {
    // child 'g' element is second to last among children (path, g, path)
    // other children here are foreground and background path elements
    el = el.lastChild.previousSibling;
    let prev, idx = 0;
    $989bf735d0693be2$export$35dcb66345c6f823(group, (item)=>{
        prev = renderer.mark(el, item, prev);
        ++idx;
    });
    // remove any extraneous DOM elements
    $989bf735d0693be2$export$5a8f314b385c1b7f(el, 1 + idx);
}
// Bind a scenegraph item to an SVG DOM element.
// Create new SVG elements as needed.
function $989bf735d0693be2$var$bind(item, el, sibling, tag, svg) {
    let node = item._svg, doc;
    // create a new dom node if needed
    if (!node) {
        doc = el.ownerDocument;
        node = $989bf735d0693be2$export$5ab7f8f1ec85df50(doc, tag, $989bf735d0693be2$var$svgns);
        item._svg = node;
        if (item.mark) {
            node.__data__ = item;
            node.__values__ = {
                fill: "default"
            };
            // if group, create background, content, and foreground elements
            if (tag === "g") {
                const bg = $989bf735d0693be2$export$5ab7f8f1ec85df50(doc, "path", $989bf735d0693be2$var$svgns);
                node.appendChild(bg);
                bg.__data__ = item;
                const cg = $989bf735d0693be2$export$5ab7f8f1ec85df50(doc, "g", $989bf735d0693be2$var$svgns);
                node.appendChild(cg);
                cg.__data__ = item;
                const fg = $989bf735d0693be2$export$5ab7f8f1ec85df50(doc, "path", $989bf735d0693be2$var$svgns);
                node.appendChild(fg);
                fg.__data__ = item;
                fg.__values__ = {
                    fill: "default"
                };
            }
        }
    }
    // (re-)insert if (a) not contained in SVG or (b) sibling order has changed
    if (node.ownerSVGElement !== svg || $989bf735d0693be2$var$siblingCheck(node, sibling)) el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
    return node;
}
// check if two nodes are ordered siblings
function $989bf735d0693be2$var$siblingCheck(node, sibling) {
    return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling; // treat null/undefined the same
}
// -- Set attributes & styles on SVG elements ---
let $989bf735d0693be2$var$element = null, // temp var for current SVG element
$989bf735d0693be2$var$values = null; // temp var for current values hash
// Extra configuration for certain mark types
const $989bf735d0693be2$var$mark_extras = {
    group (mdef, el, item) {
        const fg = $989bf735d0693be2$var$element = el.childNodes[2];
        $989bf735d0693be2$var$values = fg.__values__;
        mdef.foreground($989bf735d0693be2$var$emit, item, this);
        $989bf735d0693be2$var$values = el.__values__; // use parent's values hash
        $989bf735d0693be2$var$element = el.childNodes[1];
        mdef.content($989bf735d0693be2$var$emit, item, this);
        const bg = $989bf735d0693be2$var$element = el.childNodes[0];
        mdef.background($989bf735d0693be2$var$emit, item, this);
        const value = item.mark.interactive === false ? "none" : null;
        if (value !== $989bf735d0693be2$var$values.events) {
            $989bf735d0693be2$var$setAttribute(fg, "pointer-events", value);
            $989bf735d0693be2$var$setAttribute(bg, "pointer-events", value);
            $989bf735d0693be2$var$values.events = value;
        }
        if (item.strokeForeground && item.stroke) {
            const fill = item.fill;
            $989bf735d0693be2$var$setAttribute(fg, "display", null);
            // set style of background
            this.style(bg, item);
            $989bf735d0693be2$var$setAttribute(bg, "stroke", null);
            // set style of foreground
            if (fill) item.fill = null;
            $989bf735d0693be2$var$values = fg.__values__;
            this.style(fg, item);
            if (fill) item.fill = fill;
            // leave element null to prevent downstream styling
            $989bf735d0693be2$var$element = null;
        } else // ensure foreground is ignored
        $989bf735d0693be2$var$setAttribute(fg, "display", "none");
    },
    image (mdef, el, item) {
        if (item.smooth === false) {
            $989bf735d0693be2$var$setStyle(el, "image-rendering", "optimizeSpeed");
            $989bf735d0693be2$var$setStyle(el, "image-rendering", "pixelated");
        } else $989bf735d0693be2$var$setStyle(el, "image-rendering", null);
    },
    text (mdef, el, item) {
        const tl = $989bf735d0693be2$var$textLines(item);
        let key, value, doc, lh;
        if ((0, $4SWbq.isArray)(tl)) {
            // multi-line text
            value = tl.map((_)=>$989bf735d0693be2$var$textValue(item, _));
            key = value.join("\n"); // content cache key
            if (key !== $989bf735d0693be2$var$values.text) {
                $989bf735d0693be2$export$5a8f314b385c1b7f(el, 0);
                doc = el.ownerDocument;
                lh = $989bf735d0693be2$export$c9b91427b594e14(item);
                value.forEach((t, i)=>{
                    const ts = $989bf735d0693be2$export$5ab7f8f1ec85df50(doc, "tspan", $989bf735d0693be2$var$svgns);
                    ts.__data__ = item; // data binding
                    ts.textContent = t;
                    if (i) {
                        ts.setAttribute("x", 0);
                        ts.setAttribute("dy", lh);
                    }
                    el.appendChild(ts);
                });
                $989bf735d0693be2$var$values.text = key;
            }
        } else {
            // single-line text
            value = $989bf735d0693be2$var$textValue(item, tl);
            if (value !== $989bf735d0693be2$var$values.text) {
                el.textContent = value;
                $989bf735d0693be2$var$values.text = value;
            }
        }
        $989bf735d0693be2$var$setAttribute(el, "font-family", $989bf735d0693be2$export$a5975749f0374264(item));
        $989bf735d0693be2$var$setAttribute(el, "font-size", $989bf735d0693be2$export$85e3c3ca0c6fb93(item) + "px");
        $989bf735d0693be2$var$setAttribute(el, "font-style", item.fontStyle);
        $989bf735d0693be2$var$setAttribute(el, "font-variant", item.fontVariant);
        $989bf735d0693be2$var$setAttribute(el, "font-weight", item.fontWeight);
    }
};
function $989bf735d0693be2$var$emit(name, value, ns) {
    // early exit if value is unchanged
    if (value === $989bf735d0693be2$var$values[name]) return;
    // use appropriate method given namespace (ns)
    if (ns) $989bf735d0693be2$var$setAttributeNS($989bf735d0693be2$var$element, name, value, ns);
    else $989bf735d0693be2$var$setAttribute($989bf735d0693be2$var$element, name, value);
    // note current value for future comparison
    $989bf735d0693be2$var$values[name] = value;
}
function $989bf735d0693be2$var$setStyle(el, name, value) {
    if (value !== $989bf735d0693be2$var$values[name]) {
        if (value == null) el.style.removeProperty(name);
        else el.style.setProperty(name, value + "");
        $989bf735d0693be2$var$values[name] = value;
    }
}
function $989bf735d0693be2$var$setAttributes(el, attrs) {
    for(const key in attrs)$989bf735d0693be2$var$setAttribute(el, key, attrs[key]);
}
function $989bf735d0693be2$var$setAttribute(el, name, value) {
    if (value != null) // if value is provided, update DOM attribute
    el.setAttribute(name, value);
    else // else remove DOM attribute
    el.removeAttribute(name);
}
function $989bf735d0693be2$var$setAttributeNS(el, name, value, ns) {
    if (value != null) // if value is provided, update DOM attribute
    el.setAttributeNS(ns, name, value);
    else // else remove DOM attribute
    el.removeAttributeNS(ns, name);
}
function $989bf735d0693be2$var$href() {
    let loc;
    return typeof window === "undefined" ? "" : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
}
function $989bf735d0693be2$export$65081d0fa4234322(loader) {
    $989bf735d0693be2$export$88530751e3977073.call(this, loader);
    this._text = null;
    this._defs = {
        gradient: {},
        clipping: {}
    };
}
(0, $4SWbq.inherits)($989bf735d0693be2$export$65081d0fa4234322, $989bf735d0693be2$export$88530751e3977073, {
    /**
   * Returns the rendered SVG text string,
   * or null if rendering has not yet occurred.
   */ svg () {
        return this._text;
    },
    /**
   * Internal rendering method.
   * @param {object} scene - The root mark of a scenegraph to render.
   */ _render (scene) {
        const m = $989bf735d0693be2$export$7b40ce885114f0a6();
        // svg tag
        m.open("svg", (0, $4SWbq.extend)({}, $989bf735d0693be2$var$metadata, {
            class: "marks",
            width: this._width * this._scale,
            height: this._height * this._scale,
            viewBox: `0 0 ${this._width} ${this._height}`
        }));
        // background, if defined
        const bg = this._bgcolor;
        if (bg && bg !== "transparent" && bg !== "none") m.open("rect", {
            width: this._width,
            height: this._height,
            fill: bg
        }).close();
        // root content group
        m.open("g", $989bf735d0693be2$var$rootAttributes, {
            transform: "translate(" + this._origin + ")"
        });
        this.mark(m, scene);
        m.close(); // </g>
        // defs
        this.defs(m);
        // get SVG text string
        this._text = m.close() + "";
        return this;
    },
    /**
   * Render a set of mark items.
   * @param {object} m - The markup context.
   * @param {object} scene - The mark parent to render.
   */ mark (m, scene) {
        const mdef = $989bf735d0693be2$export$3f7130ac478166a9[scene.marktype], tag = mdef.tag, attrList = [
            $989bf735d0693be2$var$ariaItemAttributes,
            mdef.attr
        ];
        // render opening group tag
        m.open("g", {
            "class": $989bf735d0693be2$var$cssClass(scene),
            "clip-path": scene.clip ? $989bf735d0693be2$var$clip$1(this, scene, scene.group) : null
        }, $989bf735d0693be2$var$ariaMarkAttributes(scene), {
            "pointer-events": tag !== "g" && scene.interactive === false ? "none" : null
        });
        // render contained elements
        const process = (item)=>{
            const href = this.href(item);
            if (href) m.open("a", href);
            m.open(tag, this.attr(scene, item, attrList, tag !== "g" ? tag : null));
            if (tag === "text") {
                const tl = $989bf735d0693be2$var$textLines(item);
                if ((0, $4SWbq.isArray)(tl)) {
                    // multi-line text
                    const attrs = {
                        x: 0,
                        dy: $989bf735d0693be2$export$c9b91427b594e14(item)
                    };
                    for(let i = 0; i < tl.length; ++i)m.open("tspan", i ? attrs : null).text($989bf735d0693be2$var$textValue(item, tl[i])).close();
                } else // single-line text
                m.text($989bf735d0693be2$var$textValue(item, tl));
            } else if (tag === "g") {
                const fore = item.strokeForeground, fill = item.fill, stroke = item.stroke;
                if (fore && stroke) item.stroke = null;
                m.open("path", this.attr(scene, item, mdef.background, "bgrect")).close();
                // recurse for group content
                m.open("g", this.attr(scene, item, mdef.content));
                $989bf735d0693be2$export$35dcb66345c6f823(item, (scene)=>this.mark(m, scene));
                m.close();
                if (fore && stroke) {
                    if (fill) item.fill = null;
                    item.stroke = stroke;
                    m.open("path", this.attr(scene, item, mdef.foreground, "bgrect")).close();
                    if (fill) item.fill = fill;
                } else m.open("path", this.attr(scene, item, mdef.foreground, "bgfore")).close();
            }
            m.close(); // </tag>
            if (href) m.close(); // </a>
        };
        if (mdef.nested) {
            if (scene.items && scene.items.length) process(scene.items[0]);
        } else $989bf735d0693be2$export$35dcb66345c6f823(scene, process);
        // render closing group tag
        return m.close(); // </g>
    },
    /**
   * Get href attributes for a hyperlinked mark item.
   * @param {Item} item - The mark item.
   */ href (item) {
        const href = item.href;
        let attr;
        if (href) {
            if (attr = this._hrefs && this._hrefs[href]) return attr;
            else this.sanitizeURL(href).then((attr)=>{
                // rewrite to use xlink namespace
                attr["xlink:href"] = attr.href;
                attr.href = null;
                (this._hrefs || (this._hrefs = {}))[href] = attr;
            });
        }
        return null;
    },
    /**
   * Get an object of SVG attributes for a mark item.
   * @param {object} scene - The mark parent.
   * @param {Item} item - The mark item.
   * @param {array|function} attrs - One or more attribute emitters.
   * @param {string} tag - The tag being rendered.
   */ attr (scene, item, attrs, tag) {
        const object = {}, emit = (name, value, ns, prefixed)=>{
            object[prefixed || name] = value;
        };
        // apply mark specific attributes
        if (Array.isArray(attrs)) attrs.forEach((fn)=>fn(emit, item, this));
        else attrs(emit, item, this);
        // apply style attributes
        if (tag) $989bf735d0693be2$var$style(object, item, scene, tag, this._defs);
        return object;
    },
    /**
   * Render SVG defs, as needed.
   * Must be called *after* marks have been processed to ensure the
   * collected state is current and accurate.
   * @param {object} m - The markup context.
   */ defs (m) {
        const gradient = this._defs.gradient, clipping = this._defs.clipping, count = Object.keys(gradient).length + Object.keys(clipping).length;
        if (count === 0) return; // nothing to do
        m.open("defs");
        for(const id in gradient){
            const def = gradient[id], stops = def.stops;
            if (def.gradient === "radial") {
                // SVG radial gradients automatically transform to normalized bbox
                // coordinates, in a way that is cumbersome to replicate in canvas.
                // We wrap the radial gradient in a pattern element, allowing us to
                // maintain a circular gradient that matches what canvas provides.
                m.open("pattern", {
                    id: $989bf735d0693be2$var$patternPrefix + id,
                    viewBox: "0,0,1,1",
                    width: "100%",
                    height: "100%",
                    preserveAspectRatio: "xMidYMid slice"
                });
                m.open("rect", {
                    width: "1",
                    height: "1",
                    fill: "url(#" + id + ")"
                }).close();
                m.close(); // </pattern>
                m.open("radialGradient", {
                    id: id,
                    fx: def.x1,
                    fy: def.y1,
                    fr: def.r1,
                    cx: def.x2,
                    cy: def.y2,
                    r: def.r2
                });
            } else m.open("linearGradient", {
                id: id,
                x1: def.x1,
                x2: def.x2,
                y1: def.y1,
                y2: def.y2
            });
            for(let i = 0; i < stops.length; ++i)m.open("stop", {
                offset: stops[i].offset,
                "stop-color": stops[i].color
            }).close();
            m.close();
        }
        for(const id in clipping){
            const def = clipping[id];
            m.open("clipPath", {
                id: id
            });
            if (def.path) m.open("path", {
                d: def.path
            }).close();
            else m.open("rect", {
                x: 0,
                y: 0,
                width: def.width,
                height: def.height
            }).close();
            m.close();
        }
        m.close();
    }
});
// Helper function for attr for style presentation attributes
function $989bf735d0693be2$var$style(s, item, scene, tag, defs) {
    let styleList;
    if (item == null) return s;
    if (tag === "bgrect" && scene.interactive === false) s["pointer-events"] = "none";
    if (tag === "bgfore") {
        if (scene.interactive === false) s["pointer-events"] = "none";
        s.display = "none";
        if (item.fill !== null) return s;
    }
    if (tag === "image" && item.smooth === false) styleList = [
        "image-rendering: optimizeSpeed;",
        "image-rendering: pixelated;"
    ];
    if (tag === "text") {
        s["font-family"] = $989bf735d0693be2$export$a5975749f0374264(item);
        s["font-size"] = $989bf735d0693be2$export$85e3c3ca0c6fb93(item) + "px";
        s["font-style"] = item.fontStyle;
        s["font-variant"] = item.fontVariant;
        s["font-weight"] = item.fontWeight;
    }
    for(const prop in $989bf735d0693be2$var$stylesAttr){
        let value = item[prop];
        const name = $989bf735d0693be2$var$stylesAttr[prop];
        if (value === "transparent" && (name === "fill" || name === "stroke")) ;
        else if (value != null) {
            if ($989bf735d0693be2$var$isGradient(value)) value = $989bf735d0693be2$var$gradientRef(value, defs.gradient, "");
            s[name] = value;
        }
    }
    for(const prop in $989bf735d0693be2$var$stylesCss){
        const value = item[prop];
        if (value != null) {
            styleList = styleList || [];
            styleList.push(`${$989bf735d0693be2$var$stylesCss[prop]}: ${value};`);
        }
    }
    if (styleList) s.style = styleList.join(" ");
    return s;
}
const $989bf735d0693be2$var$Canvas = "canvas";
const $989bf735d0693be2$var$PNG = "png";
const $989bf735d0693be2$var$SVG = "svg";
const $989bf735d0693be2$var$None = "none";
const $989bf735d0693be2$export$ed706b0a66efb05c = {
    Canvas: $989bf735d0693be2$var$Canvas,
    PNG: $989bf735d0693be2$var$PNG,
    SVG: $989bf735d0693be2$var$SVG,
    None: $989bf735d0693be2$var$None
};
const $989bf735d0693be2$var$modules = {};
$989bf735d0693be2$var$modules[$989bf735d0693be2$var$Canvas] = $989bf735d0693be2$var$modules[$989bf735d0693be2$var$PNG] = {
    renderer: $989bf735d0693be2$export$7adc20298958481a,
    headless: $989bf735d0693be2$export$7adc20298958481a,
    handler: $989bf735d0693be2$export$7919a88d62c5dd21
};
$989bf735d0693be2$var$modules[$989bf735d0693be2$var$SVG] = {
    renderer: $989bf735d0693be2$export$42e42f98ac770ce0,
    headless: $989bf735d0693be2$export$65081d0fa4234322,
    handler: $989bf735d0693be2$export$a7f388b81ee313d
};
$989bf735d0693be2$var$modules[$989bf735d0693be2$var$None] = {};
function $989bf735d0693be2$export$acb676c58df771a8(name, _) {
    name = String(name || "").toLowerCase();
    if (arguments.length > 1) {
        $989bf735d0693be2$var$modules[name] = _;
        return this;
    } else return $989bf735d0693be2$var$modules[name];
}
function $989bf735d0693be2$export$1f4807a235930d45(scene, bounds, filter) {
    const hits = [], // intersection results
    box = new $989bf735d0693be2$export$c4e9d269599ab4b4().union(bounds), // defensive copy
    type = scene.marktype;
    return type ? $989bf735d0693be2$var$intersectMark(scene, box, filter, hits) : type === "group" ? $989bf735d0693be2$var$intersectGroup(scene, box, filter, hits) : (0, $4SWbq.error)("Intersect scene must be mark node or group item.");
}
function $989bf735d0693be2$var$intersectMark(mark, box, filter, hits) {
    if ($989bf735d0693be2$var$visitMark(mark, box, filter)) {
        const items = mark.items, type = mark.marktype, n = items.length;
        let i = 0;
        if (type === "group") for(; i < n; ++i)$989bf735d0693be2$var$intersectGroup(items[i], box, filter, hits);
        else for(const test = $989bf735d0693be2$export$3f7130ac478166a9[type].isect; i < n; ++i){
            const item = items[i];
            if ($989bf735d0693be2$var$intersectItem(item, box, test)) hits.push(item);
        }
    }
    return hits;
}
function $989bf735d0693be2$var$visitMark(mark, box, filter) {
    // process if bounds intersect and if
    // (1) mark is a group mark (so we must recurse), or
    // (2) mark is interactive and passes filter
    return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === "group" || mark.interactive !== false && (!filter || filter(mark)));
}
function $989bf735d0693be2$var$intersectGroup(group, box, filter, hits) {
    // test intersect against group
    // skip groups by default unless filter says otherwise
    if (filter && filter(group.mark) && $989bf735d0693be2$var$intersectItem(group, box, $989bf735d0693be2$export$3f7130ac478166a9.group.isect)) hits.push(group);
    // recursively test children marks
    // translate box to group coordinate space
    const marks = group.items, n = marks && marks.length;
    if (n) {
        const x = group.x || 0, y = group.y || 0;
        box.translate(-x, -y);
        for(let i = 0; i < n; ++i)$989bf735d0693be2$var$intersectMark(marks[i], box, filter, hits);
        box.translate(x, y);
    }
    return hits;
}
function $989bf735d0693be2$var$intersectItem(item, box, test) {
    // test bounds enclosure, bounds intersection, then detailed test
    const bounds = item.bounds;
    return box.encloses(bounds) || box.intersects(bounds) && test(item, box);
}
const $989bf735d0693be2$var$clipBounds = new $989bf735d0693be2$export$c4e9d269599ab4b4();
function $989bf735d0693be2$export$e897555080ed19bd(mark) {
    const clip = mark.clip;
    if ((0, $4SWbq.isFunction)(clip)) clip($989bf735d0693be2$export$bd2ae2eff0a0032c($989bf735d0693be2$var$clipBounds.clear()));
    else if (clip) $989bf735d0693be2$var$clipBounds.set(0, 0, mark.group.width, mark.group.height);
    else return;
    mark.bounds.intersect($989bf735d0693be2$var$clipBounds);
}
const $989bf735d0693be2$var$TOLERANCE = 1e-9;
function $989bf735d0693be2$export$379826fa8a0c0902(a, b, key) {
    return a === b ? true : key === "path" ? $989bf735d0693be2$export$7918a440c1c2f74d(a, b) : a instanceof Date && b instanceof Date ? +a === +b : (0, $4SWbq.isNumber)(a) && (0, $4SWbq.isNumber)(b) ? Math.abs(a - b) <= $989bf735d0693be2$var$TOLERANCE : !a || !b || !(0, $4SWbq.isObject)(a) && !(0, $4SWbq.isObject)(b) ? a == b : $989bf735d0693be2$var$objectEqual(a, b);
}
function $989bf735d0693be2$export$7918a440c1c2f74d(a, b) {
    return $989bf735d0693be2$export$379826fa8a0c0902($989bf735d0693be2$export$f072bacea2bdc7f4(a), $989bf735d0693be2$export$f072bacea2bdc7f4(b));
}
function $989bf735d0693be2$var$objectEqual(a, b) {
    var ka = Object.keys(a), kb = Object.keys(b), key, i;
    if (ka.length !== kb.length) return false;
    ka.sort();
    kb.sort();
    for(i = ka.length - 1; i >= 0; i--){
        if (ka[i] != kb[i]) return false;
    }
    for(i = ka.length - 1; i >= 0; i--){
        key = ka[i];
        if (!$989bf735d0693be2$export$379826fa8a0c0902(a[key], b[key], key)) return false;
    }
    return typeof a === typeof b;
}
function $989bf735d0693be2$export$2233ee574a3d108a() {
    $989bf735d0693be2$export$d3e53d7a30a67902();
    $989bf735d0693be2$var$resetSVGGradientId();
}

});
parcelRegister("liNHG", function(module, exports) {

$parcel$export(module.exports, "default", () => $f821d580b646537b$export$2e2bcd8739ae039);

var $2QdO4 = parcelRequire("2QdO4");

var $56M2n = parcelRequire("56M2n");

var $eGYSC = parcelRequire("eGYSC");
function $f821d580b646537b$var$arcInnerRadius(d) {
    return d.innerRadius;
}
function $f821d580b646537b$var$arcOuterRadius(d) {
    return d.outerRadius;
}
function $f821d580b646537b$var$arcStartAngle(d) {
    return d.startAngle;
}
function $f821d580b646537b$var$arcEndAngle(d) {
    return d.endAngle;
}
function $f821d580b646537b$var$arcPadAngle(d) {
    return d && d.padAngle; // Note: optional!
}
function $f821d580b646537b$var$intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
    if (t * t < (0, $56M2n.epsilon)) return;
    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
    return [
        x0 + t * x10,
        y0 + t * y10
    ];
}
// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function $f821d580b646537b$var$cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / (0, $56M2n.sqrt)(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * (0, $56M2n.sqrt)((0, $56M2n.max)(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
    };
}
function $f821d580b646537b$export$2e2bcd8739ae039() {
    var innerRadius = $f821d580b646537b$var$arcInnerRadius, outerRadius = $f821d580b646537b$var$arcOuterRadius, cornerRadius = (0, $2QdO4.default)(0), padRadius = null, startAngle = $f821d580b646537b$var$arcStartAngle, endAngle = $f821d580b646537b$var$arcEndAngle, padAngle = $f821d580b646537b$var$arcPadAngle, context = null, path = (0, $eGYSC.withPath)(arc);
    function arc() {
        var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - (0, $56M2n.halfPi), a1 = endAngle.apply(this, arguments) - (0, $56M2n.halfPi), da = (0, $56M2n.abs)(a1 - a0), cw = a1 > a0;
        if (!context) context = buffer = path();
        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;
        // Is it a point?
        if (!(r1 > (0, $56M2n.epsilon))) context.moveTo(0, 0);
        else if (da > (0, $56M2n.tau) - (0, $56M2n.epsilon)) {
            context.moveTo(r1 * (0, $56M2n.cos)(a0), r1 * (0, $56M2n.sin)(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > (0, $56M2n.epsilon)) {
                context.moveTo(r0 * (0, $56M2n.cos)(a1), r0 * (0, $56M2n.sin)(a1));
                context.arc(0, 0, r0, a1, a0, cw);
            }
        } else {
            var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > (0, $56M2n.epsilon) && (padRadius ? +padRadius.apply(this, arguments) : (0, $56M2n.sqrt)(r0 * r0 + r1 * r1)), rc = (0, $56M2n.min)((0, $56M2n.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
            // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
            if (rp > (0, $56M2n.epsilon)) {
                var p0 = (0, $56M2n.asin)(rp / r0 * (0, $56M2n.sin)(ap)), p1 = (0, $56M2n.asin)(rp / r1 * (0, $56M2n.sin)(ap));
                if ((da0 -= p0 * 2) > (0, $56M2n.epsilon)) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
                else da0 = 0, a00 = a10 = (a0 + a1) / 2;
                if ((da1 -= p1 * 2) > (0, $56M2n.epsilon)) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
                else da1 = 0, a01 = a11 = (a0 + a1) / 2;
            }
            var x01 = r1 * (0, $56M2n.cos)(a01), y01 = r1 * (0, $56M2n.sin)(a01), x10 = r0 * (0, $56M2n.cos)(a10), y10 = r0 * (0, $56M2n.sin)(a10);
            // Apply rounded corners?
            if (rc > (0, $56M2n.epsilon)) {
                var x11 = r1 * (0, $56M2n.cos)(a11), y11 = r1 * (0, $56M2n.sin)(a11), x00 = r0 * (0, $56M2n.cos)(a00), y00 = r0 * (0, $56M2n.sin)(a00), oc;
                // Restrict the corner radius according to the sector angle. If this
                // intersection fails, it’s probably because the arc is too small, so
                // disable the corner radius entirely.
                if (da < (0, $56M2n.pi)) {
                    if (oc = $f821d580b646537b$var$intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
                        var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / (0, $56M2n.sin)((0, $56M2n.acos)((ax * bx + ay * by) / ((0, $56M2n.sqrt)(ax * ax + ay * ay) * (0, $56M2n.sqrt)(bx * bx + by * by))) / 2), lc = (0, $56M2n.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
                        rc0 = (0, $56M2n.min)(rc, (r0 - lc) / (kc - 1));
                        rc1 = (0, $56M2n.min)(rc, (r1 - lc) / (kc + 1));
                    } else rc0 = rc1 = 0;
                }
            }
            // Is the sector collapsed to a line?
            if (!(da1 > (0, $56M2n.epsilon))) context.moveTo(x01, y01);
            else if (rc1 > (0, $56M2n.epsilon)) {
                t0 = $f821d580b646537b$var$cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                t1 = $f821d580b646537b$var$cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, $56M2n.atan2)(t0.y01, t0.x01), (0, $56M2n.atan2)(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc1, (0, $56M2n.atan2)(t0.y01, t0.x01), (0, $56M2n.atan2)(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, (0, $56M2n.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, $56M2n.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, (0, $56M2n.atan2)(t1.y11, t1.x11), (0, $56M2n.atan2)(t1.y01, t1.x01), !cw);
                }
            } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
            // Is there no inner ring, and it’s a circular sector?
            // Or perhaps it’s an annular sector collapsed due to padding?
            if (!(r0 > (0, $56M2n.epsilon)) || !(da0 > (0, $56M2n.epsilon))) context.lineTo(x10, y10);
            else if (rc0 > (0, $56M2n.epsilon)) {
                t0 = $f821d580b646537b$var$cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                t1 = $f821d580b646537b$var$cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, $56M2n.atan2)(t0.y01, t0.x01), (0, $56M2n.atan2)(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc0, (0, $56M2n.atan2)(t0.y01, t0.x01), (0, $56M2n.atan2)(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, (0, $56M2n.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, $56M2n.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, (0, $56M2n.atan2)(t1.y11, t1.x11), (0, $56M2n.atan2)(t1.y01, t1.x01), !cw);
                }
            } else context.arc(0, 0, r0, a10, a00, cw);
        }
        context.closePath();
        if (buffer) return context = null, buffer + "" || null;
    }
    arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - (0, $56M2n.pi) / 2;
        return [
            (0, $56M2n.cos)(a) * r,
            (0, $56M2n.sin)(a) * r
        ];
    };
    arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), arc) : innerRadius;
    };
    arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), arc) : outerRadius;
    };
    arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), arc) : cornerRadius;
    };
    arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), arc) : padRadius;
    };
    arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), arc) : startAngle;
    };
    arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), arc) : endAngle;
    };
    arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), arc) : padAngle;
    };
    arc.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };
    return arc;
}

});
parcelRegister("2QdO4", function(module, exports) {

$parcel$export(module.exports, "default", () => $211b25d144cff6cc$export$2e2bcd8739ae039);
function $211b25d144cff6cc$export$2e2bcd8739ae039(x) {
    return function constant() {
        return x;
    };
}

});

parcelRegister("56M2n", function(module, exports) {

$parcel$export(module.exports, "abs", () => $3b82c6823c29948f$export$2335f513bbd82c6d);
$parcel$export(module.exports, "atan2", () => $3b82c6823c29948f$export$b8b770ee6a0d9760);
$parcel$export(module.exports, "cos", () => $3b82c6823c29948f$export$50d414a77b60d802);
$parcel$export(module.exports, "max", () => $3b82c6823c29948f$export$8960430cfd85939f);
$parcel$export(module.exports, "min", () => $3b82c6823c29948f$export$96ec731ed4dcb222);
$parcel$export(module.exports, "sin", () => $3b82c6823c29948f$export$5de3937cb4b592ed);
$parcel$export(module.exports, "sqrt", () => $3b82c6823c29948f$export$eba8049fb5020b81);
$parcel$export(module.exports, "epsilon", () => $3b82c6823c29948f$export$6c421550c66a327d);
$parcel$export(module.exports, "pi", () => $3b82c6823c29948f$export$18c7bea995a110f);
$parcel$export(module.exports, "halfPi", () => $3b82c6823c29948f$export$e51408a300e8929a);
$parcel$export(module.exports, "tau", () => $3b82c6823c29948f$export$a4b4b4d4d776fe92);
$parcel$export(module.exports, "acos", () => $3b82c6823c29948f$export$fd6306be3fde5b04);
$parcel$export(module.exports, "asin", () => $3b82c6823c29948f$export$41726bdb1fc63f);
const $3b82c6823c29948f$export$2335f513bbd82c6d = Math.abs;
const $3b82c6823c29948f$export$b8b770ee6a0d9760 = Math.atan2;
const $3b82c6823c29948f$export$50d414a77b60d802 = Math.cos;
const $3b82c6823c29948f$export$8960430cfd85939f = Math.max;
const $3b82c6823c29948f$export$96ec731ed4dcb222 = Math.min;
const $3b82c6823c29948f$export$5de3937cb4b592ed = Math.sin;
const $3b82c6823c29948f$export$eba8049fb5020b81 = Math.sqrt;
const $3b82c6823c29948f$export$6c421550c66a327d = 1e-12;
const $3b82c6823c29948f$export$18c7bea995a110f = Math.PI;
const $3b82c6823c29948f$export$e51408a300e8929a = $3b82c6823c29948f$export$18c7bea995a110f / 2;
const $3b82c6823c29948f$export$a4b4b4d4d776fe92 = 2 * $3b82c6823c29948f$export$18c7bea995a110f;
function $3b82c6823c29948f$export$fd6306be3fde5b04(x) {
    return x > 1 ? 0 : x < -1 ? $3b82c6823c29948f$export$18c7bea995a110f : Math.acos(x);
}
function $3b82c6823c29948f$export$41726bdb1fc63f(x) {
    return x >= 1 ? $3b82c6823c29948f$export$e51408a300e8929a : x <= -1 ? -$3b82c6823c29948f$export$e51408a300e8929a : Math.asin(x);
}

});

parcelRegister("eGYSC", function(module, exports) {

$parcel$export(module.exports, "withPath", () => $ab24366e25e9bf06$export$fb6e83118a5dcd45);

var $7Mfuj = parcelRequire("7Mfuj");
function $ab24366e25e9bf06$export$fb6e83118a5dcd45(shape) {
    let digits = 3;
    shape.digits = function(_) {
        if (!arguments.length) return digits;
        if (_ == null) digits = null;
        else {
            const d = Math.floor(_);
            if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
            digits = d;
        }
        return shape;
    };
    return ()=>new (0, $7Mfuj.Path)(digits);
}

});
parcelRegister("7Mfuj", function(module, exports) {

$parcel$export(module.exports, "Path", () => $5a9907b30b2d645e$export$4b2950bdac9b6ee9);
$parcel$export(module.exports, "path", () => $5a9907b30b2d645e$export$bb654e07daaf8c3a);
const $5a9907b30b2d645e$var$pi = Math.PI, $5a9907b30b2d645e$var$tau = 2 * $5a9907b30b2d645e$var$pi, $5a9907b30b2d645e$var$epsilon = 1e-6, $5a9907b30b2d645e$var$tauEpsilon = $5a9907b30b2d645e$var$tau - $5a9907b30b2d645e$var$epsilon;
function $5a9907b30b2d645e$var$append(strings) {
    this._ += strings[0];
    for(let i = 1, n = strings.length; i < n; ++i)this._ += arguments[i] + strings[i];
}
function $5a9907b30b2d645e$var$appendRound(digits) {
    let d = Math.floor(digits);
    if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
    if (d > 15) return $5a9907b30b2d645e$var$append;
    const k = 10 ** d;
    return function(strings) {
        this._ += strings[0];
        for(let i = 1, n = strings.length; i < n; ++i)this._ += Math.round(arguments[i] * k) / k + strings[i];
    };
}
class $5a9907b30b2d645e$export$4b2950bdac9b6ee9 {
    constructor(digits){
        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
        this._append = digits == null ? $5a9907b30b2d645e$var$append : $5a9907b30b2d645e$var$appendRound(digits);
    }
    moveTo(x, y) {
        this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
    }
    closePath() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._append`Z`;
        }
    }
    lineTo(x, y) {
        this._append`L${this._x1 = +x},${this._y1 = +y}`;
    }
    quadraticCurveTo(x1, y1, x, y) {
        this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;
    }
    bezierCurveTo(x1, y1, x2, y2, x, y) {
        this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;
    }
    arcTo(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        // Is the radius negative? Error.
        if (r < 0) throw new Error(`negative radius: ${r}`);
        let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) this._append`M${this._x1 = x1},${this._y1 = y1}`;
        else if (!(l01_2 > $5a9907b30b2d645e$var$epsilon)) ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > $5a9907b30b2d645e$var$epsilon) || !r) this._append`L${this._x1 = x1},${this._y1 = y1}`;
        else {
            let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan(($5a9907b30b2d645e$var$pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > $5a9907b30b2d645e$var$epsilon) this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
            this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
        }
    }
    arc(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        // Is the radius negative? Error.
        if (r < 0) throw new Error(`negative radius: ${r}`);
        let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) this._append`M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > $5a9907b30b2d645e$var$epsilon || Math.abs(this._y1 - y0) > $5a9907b30b2d645e$var$epsilon) this._append`L${x0},${y0}`;
        // Is this arc empty? We’re done.
        if (!r) return;
        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % $5a9907b30b2d645e$var$tau + $5a9907b30b2d645e$var$tau;
        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > $5a9907b30b2d645e$var$tauEpsilon) this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
        else if (da > $5a9907b30b2d645e$var$epsilon) this._append`A${r},${r},0,${+(da >= $5a9907b30b2d645e$var$pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;
    }
    rect(x, y, w, h) {
        this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;
    }
    toString() {
        return this._;
    }
}
function $5a9907b30b2d645e$export$bb654e07daaf8c3a() {
    return new $5a9907b30b2d645e$export$4b2950bdac9b6ee9;
}
// Allow instanceof d3.path
$5a9907b30b2d645e$export$bb654e07daaf8c3a.prototype = $5a9907b30b2d645e$export$4b2950bdac9b6ee9.prototype;
function $5a9907b30b2d645e$export$e181c6ece8d9cc5f(digits = 3) {
    return new $5a9907b30b2d645e$export$4b2950bdac9b6ee9(+digits);
}

});



parcelRegister("2081n", function(module, exports) {

$parcel$export(module.exports, "default", () => $1751cdaf8e3188e8$export$2e2bcd8739ae039);

var $l8vSE = parcelRequire("l8vSE");

var $2QdO4 = parcelRequire("2QdO4");

var $9MgPM = parcelRequire("9MgPM");

var $kGuq7 = parcelRequire("kGuq7");

var $eGYSC = parcelRequire("eGYSC");

var $l9mU3 = parcelRequire("l9mU3");
function $1751cdaf8e3188e8$export$2e2bcd8739ae039(x0, y0, y1) {
    var x1 = null, defined = (0, $2QdO4.default)(true), context = null, curve = (0, $9MgPM.default), output = null, path = (0, $eGYSC.withPath)(area);
    x0 = typeof x0 === "function" ? x0 : x0 === undefined ? (0, $l9mU3.x) : (0, $2QdO4.default)(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === undefined ? (0, $2QdO4.default)(0) : (0, $2QdO4.default)(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === undefined ? (0, $l9mU3.y) : (0, $2QdO4.default)(+y1);
    function area(data) {
        var i, j, k, n = (data = (0, $l8vSE.default)(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
        if (context == null) output = curve(buffer = path());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) {
                    j = i;
                    output.areaStart();
                    output.lineStart();
                } else {
                    output.lineEnd();
                    output.lineStart();
                    for(k = i - 1; k >= j; --k)output.point(x0z[k], y0z[k]);
                    output.lineEnd();
                    output.areaEnd();
                }
            }
            if (defined0) {
                x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
            }
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    function arealine() {
        return (0, $kGuq7.default)().defined(defined).curve(curve).context(context);
    }
    area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), x1 = null, area) : x0;
    };
    area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), area) : x0;
    };
    area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), area) : x1;
    };
    area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), y1 = null, area) : y0;
    };
    area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), area) : y0;
    };
    area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
        return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
        return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
        return arealine().x(x1).y(y0);
    };
    area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : (0, $2QdO4.default)(!!_), area) : defined;
    };
    area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
}

});
parcelRegister("l8vSE", function(module, exports) {

$parcel$export(module.exports, "default", () => $f633131e0e66420b$export$2e2bcd8739ae039);
var $f633131e0e66420b$export$58adb3bec8346d0f = Array.prototype.slice;
function $f633131e0e66420b$export$2e2bcd8739ae039(x) {
    return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
     : Array.from(x); // Map, Set, iterable, string, or anything else
}

});

parcelRegister("9MgPM", function(module, exports) {

$parcel$export(module.exports, "default", () => $71e5a7a4f0849551$export$2e2bcd8739ae039);
function $71e5a7a4f0849551$var$Linear(context) {
    this._context = context;
}
$71e5a7a4f0849551$var$Linear.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                this._context.lineTo(x, y);
                break;
        }
    }
};
function $71e5a7a4f0849551$export$2e2bcd8739ae039(context) {
    return new $71e5a7a4f0849551$var$Linear(context);
}

});

parcelRegister("kGuq7", function(module, exports) {

$parcel$export(module.exports, "default", () => $f0ef53b2ca2307c3$export$2e2bcd8739ae039);

var $l8vSE = parcelRequire("l8vSE");

var $2QdO4 = parcelRequire("2QdO4");

var $9MgPM = parcelRequire("9MgPM");

var $eGYSC = parcelRequire("eGYSC");

var $l9mU3 = parcelRequire("l9mU3");
function $f0ef53b2ca2307c3$export$2e2bcd8739ae039(x, y) {
    var defined = (0, $2QdO4.default)(true), context = null, curve = (0, $9MgPM.default), output = null, path = (0, $eGYSC.withPath)(line);
    x = typeof x === "function" ? x : x === undefined ? (0, $l9mU3.x) : (0, $2QdO4.default)(x);
    y = typeof y === "function" ? y : y === undefined ? (0, $l9mU3.y) : (0, $2QdO4.default)(y);
    function line(data) {
        var i, n = (data = (0, $l8vSE.default)(data)).length, d, defined0 = false, buffer;
        if (context == null) output = curve(buffer = path());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) output.lineStart();
                else output.lineEnd();
            }
            if (defined0) output.point(+x(d, i, data), +y(d, i, data));
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    line.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), line) : x;
    };
    line.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), line) : y;
    };
    line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : (0, $2QdO4.default)(!!_), line) : defined;
    };
    line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
}

});
parcelRegister("l9mU3", function(module, exports) {

$parcel$export(module.exports, "x", () => $f65c344fdfb73d19$export$d141bba7fdc215a3);
$parcel$export(module.exports, "y", () => $f65c344fdfb73d19$export$4a5767248b18ef41);
function $f65c344fdfb73d19$export$d141bba7fdc215a3(p) {
    return p[0];
}
function $f65c344fdfb73d19$export$4a5767248b18ef41(p) {
    return p[1];
}

});



parcelRegister("lznsn", function(module, exports) {

$parcel$export(module.exports, "point", () => $fb3f0fe490cbe4c0$export$105684a3041cb6f3);
$parcel$export(module.exports, "Basis", () => $fb3f0fe490cbe4c0$export$957f7263e89bedd2);
$parcel$export(module.exports, "default", () => $fb3f0fe490cbe4c0$export$2e2bcd8739ae039);
function $fb3f0fe490cbe4c0$export$105684a3041cb6f3(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}
function $fb3f0fe490cbe4c0$export$957f7263e89bedd2(context) {
    this._context = context;
}
$fb3f0fe490cbe4c0$export$957f7263e89bedd2.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 3:
                $fb3f0fe490cbe4c0$export$105684a3041cb6f3(this, this._x1, this._y1); // falls through
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
            default:
                $fb3f0fe490cbe4c0$export$105684a3041cb6f3(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
function $fb3f0fe490cbe4c0$export$2e2bcd8739ae039(context) {
    return new $fb3f0fe490cbe4c0$export$957f7263e89bedd2(context);
}

});

parcelRegister("aC7ZC", function(module, exports) {

$parcel$export(module.exports, "default", () => $7ba3a73146344ff3$export$2e2bcd8739ae039);

var $bubQo = parcelRequire("bubQo");

var $lznsn = parcelRequire("lznsn");
function $7ba3a73146344ff3$var$BasisClosed(context) {
    this._context = context;
}
$7ba3a73146344ff3$var$BasisClosed.prototype = {
    areaStart: (0, $bubQo.default),
    areaEnd: (0, $bubQo.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x2, this._y2);
                this._context.closePath();
                break;
            case 2:
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x2, this._y2);
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x2 = x, this._y2 = y;
                break;
            case 1:
                this._point = 2;
                this._x3 = x, this._y3 = y;
                break;
            case 2:
                this._point = 3;
                this._x4 = x, this._y4 = y;
                this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
                break;
            default:
                (0, $lznsn.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
function $7ba3a73146344ff3$export$2e2bcd8739ae039(context) {
    return new $7ba3a73146344ff3$var$BasisClosed(context);
}

});
parcelRegister("bubQo", function(module, exports) {

$parcel$export(module.exports, "default", () => $85cbaf0ea90ff58f$export$2e2bcd8739ae039);
function $85cbaf0ea90ff58f$export$2e2bcd8739ae039() {}

});


parcelRegister("4FvMl", function(module, exports) {

$parcel$export(module.exports, "default", () => $3663a458a469ecea$export$2e2bcd8739ae039);

var $lznsn = parcelRequire("lznsn");
function $3663a458a469ecea$var$BasisOpen(context) {
    this._context = context;
}
$3663a458a469ecea$var$BasisOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
                this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                (0, $lznsn.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
function $3663a458a469ecea$export$2e2bcd8739ae039(context) {
    return new $3663a458a469ecea$var$BasisOpen(context);
}

});

parcelRegister("8nLW2", function(module, exports) {

$parcel$export(module.exports, "default", () => $61a5a79c89317fe0$export$2e2bcd8739ae039);

var $lznsn = parcelRequire("lznsn");
function $61a5a79c89317fe0$var$Bundle(context, beta) {
    this._basis = new (0, $lznsn.Basis)(context);
    this._beta = beta;
}
$61a5a79c89317fe0$var$Bundle.prototype = {
    lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
    },
    lineEnd: function() {
        var x = this._x, y = this._y, j = x.length - 1;
        if (j > 0) {
            var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
            while(++i <= j){
                t = i / j;
                this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
            }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
var $61a5a79c89317fe0$export$2e2bcd8739ae039 = function custom(beta) {
    function bundle(context) {
        return beta === 1 ? new (0, $lznsn.Basis)(context) : new $61a5a79c89317fe0$var$Bundle(context, beta);
    }
    bundle.beta = function(beta) {
        return custom(+beta);
    };
    return bundle;
}(0.85);

});

parcelRegister("kPEVv", function(module, exports) {

$parcel$export(module.exports, "point", () => $f2a85133c7eb0f35$export$105684a3041cb6f3);
$parcel$export(module.exports, "Cardinal", () => $f2a85133c7eb0f35$export$ee51ff373511cbeb);
$parcel$export(module.exports, "default", () => $f2a85133c7eb0f35$export$2e2bcd8739ae039);
function $f2a85133c7eb0f35$export$105684a3041cb6f3(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}
function $f2a85133c7eb0f35$export$ee51ff373511cbeb(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
$f2a85133c7eb0f35$export$ee51ff373511cbeb.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                $f2a85133c7eb0f35$export$105684a3041cb6f3(this, this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                this._x1 = x, this._y1 = y;
                break;
            case 2:
                this._point = 3; // falls through
            default:
                $f2a85133c7eb0f35$export$105684a3041cb6f3(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $f2a85133c7eb0f35$export$2e2bcd8739ae039 = function custom(tension) {
    function cardinal(context) {
        return new $f2a85133c7eb0f35$export$ee51ff373511cbeb(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

});

parcelRegister("9I2ao", function(module, exports) {

$parcel$export(module.exports, "CardinalClosed", () => $7119e76248e75ac5$export$da3940d7e9162858);
$parcel$export(module.exports, "default", () => $7119e76248e75ac5$export$2e2bcd8739ae039);

var $bubQo = parcelRequire("bubQo");

var $kPEVv = parcelRequire("kPEVv");
function $7119e76248e75ac5$export$da3940d7e9162858(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
$7119e76248e75ac5$export$da3940d7e9162858.prototype = {
    areaStart: (0, $bubQo.default),
    areaEnd: (0, $bubQo.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, $kPEVv.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $7119e76248e75ac5$export$2e2bcd8739ae039 = function custom(tension) {
    function cardinal(context) {
        return new $7119e76248e75ac5$export$da3940d7e9162858(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

});

parcelRegister("itwiD", function(module, exports) {

$parcel$export(module.exports, "CardinalOpen", () => $d733fd6f1a25c7b8$export$cd7d1a617282f2f1);
$parcel$export(module.exports, "default", () => $d733fd6f1a25c7b8$export$2e2bcd8739ae039);

var $kPEVv = parcelRequire("kPEVv");
function $d733fd6f1a25c7b8$export$cd7d1a617282f2f1(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
$d733fd6f1a25c7b8$export$cd7d1a617282f2f1.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                (0, $kPEVv.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $d733fd6f1a25c7b8$export$2e2bcd8739ae039 = function custom(tension) {
    function cardinal(context) {
        return new $d733fd6f1a25c7b8$export$cd7d1a617282f2f1(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

});

parcelRegister("dzNHg", function(module, exports) {

$parcel$export(module.exports, "point", () => point);
$parcel$export(module.exports, "default", () => $9e25180443231bcb$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");

var $kPEVv = parcelRequire("kPEVv");
function point(that, x, y) {
    var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
    if (that._l01_a > (0, $56M2n.epsilon)) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > (0, $56M2n.epsilon)) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRom.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                this.point(this._x2, this._y2);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3; // falls through
            default:
                point(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $9e25180443231bcb$export$2e2bcd8739ae039 = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new (0, $kPEVv.Cardinal)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

});

parcelRegister("lYtjn", function(module, exports) {

$parcel$export(module.exports, "default", () => $fff5f03e3ae970d0$export$2e2bcd8739ae039);

var $9I2ao = parcelRequire("9I2ao");

var $bubQo = parcelRequire("bubQo");

var $dzNHg = parcelRequire("dzNHg");
function $fff5f03e3ae970d0$var$CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
$fff5f03e3ae970d0$var$CatmullRomClosed.prototype = {
    areaStart: (0, $bubQo.default),
    areaEnd: (0, $bubQo.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, $dzNHg.point)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $fff5f03e3ae970d0$export$2e2bcd8739ae039 = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new $fff5f03e3ae970d0$var$CatmullRomClosed(context, alpha) : new (0, $9I2ao.CardinalClosed)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

});

parcelRegister("8bB7b", function(module, exports) {

$parcel$export(module.exports, "default", () => $5f5c2408ecada583$export$2e2bcd8739ae039);

var $itwiD = parcelRequire("itwiD");

var $dzNHg = parcelRequire("dzNHg");
function $5f5c2408ecada583$var$CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
$5f5c2408ecada583$var$CatmullRomOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                (0, $dzNHg.point)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
var $5f5c2408ecada583$export$2e2bcd8739ae039 = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new $5f5c2408ecada583$var$CatmullRomOpen(context, alpha) : new (0, $itwiD.CardinalOpen)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

});

parcelRegister("7mZGw", function(module, exports) {

$parcel$export(module.exports, "default", () => $55da6fc88313ebe4$export$2e2bcd8739ae039);

var $bubQo = parcelRequire("bubQo");
function $55da6fc88313ebe4$var$LinearClosed(context) {
    this._context = context;
}
$55da6fc88313ebe4$var$LinearClosed.prototype = {
    areaStart: (0, $bubQo.default),
    areaEnd: (0, $bubQo.default),
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._point) this._context.closePath();
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
    }
};
function $55da6fc88313ebe4$export$2e2bcd8739ae039(context) {
    return new $55da6fc88313ebe4$var$LinearClosed(context);
}

});

parcelRegister("hTFpl", function(module, exports) {

$parcel$export(module.exports, "monotoneX", () => $d077b16fcd80df3e$export$99563b5420dbdc55);
$parcel$export(module.exports, "monotoneY", () => $d077b16fcd80df3e$export$8b5360456d6bdb88);
function $d077b16fcd80df3e$var$sign(x) {
    return x < 0 ? -1 : 1;
}
// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function $d077b16fcd80df3e$var$slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return ($d077b16fcd80df3e$var$sign(s0) + $d077b16fcd80df3e$var$sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
// Calculate a one-sided slope.
function $d077b16fcd80df3e$var$slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function $d077b16fcd80df3e$var$point(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}
function $d077b16fcd80df3e$var$MonotoneX(context) {
    this._context = context;
}
$d077b16fcd80df3e$var$MonotoneX.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
            case 3:
                $d077b16fcd80df3e$var$point(this, this._t0, $d077b16fcd80df3e$var$slope2(this, this._t0));
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        var t1 = NaN;
        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                $d077b16fcd80df3e$var$point(this, $d077b16fcd80df3e$var$slope2(this, t1 = $d077b16fcd80df3e$var$slope3(this, x, y)), t1);
                break;
            default:
                $d077b16fcd80df3e$var$point(this, this._t0, t1 = $d077b16fcd80df3e$var$slope3(this, x, y));
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
    }
};
function $d077b16fcd80df3e$var$MonotoneY(context) {
    this._context = new $d077b16fcd80df3e$var$ReflectContext(context);
}
($d077b16fcd80df3e$var$MonotoneY.prototype = Object.create($d077b16fcd80df3e$var$MonotoneX.prototype)).point = function(x, y) {
    $d077b16fcd80df3e$var$MonotoneX.prototype.point.call(this, y, x);
};
function $d077b16fcd80df3e$var$ReflectContext(context) {
    this._context = context;
}
$d077b16fcd80df3e$var$ReflectContext.prototype = {
    moveTo: function(x, y) {
        this._context.moveTo(y, x);
    },
    closePath: function() {
        this._context.closePath();
    },
    lineTo: function(x, y) {
        this._context.lineTo(y, x);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
};
function $d077b16fcd80df3e$export$99563b5420dbdc55(context) {
    return new $d077b16fcd80df3e$var$MonotoneX(context);
}
function $d077b16fcd80df3e$export$8b5360456d6bdb88(context) {
    return new $d077b16fcd80df3e$var$MonotoneY(context);
}

});

parcelRegister("mkxF5", function(module, exports) {

$parcel$export(module.exports, "default", () => $0431fd63498a8e4a$export$2e2bcd8739ae039);
function $0431fd63498a8e4a$var$Natural(context) {
    this._context = context;
}
$0431fd63498a8e4a$var$Natural.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = [];
        this._y = [];
    },
    lineEnd: function() {
        var x = this._x, y = this._y, n = x.length;
        if (n) {
            this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
            if (n === 2) this._context.lineTo(x[1], y[1]);
            else {
                var px = $0431fd63498a8e4a$var$controlPoints(x), py = $0431fd63498a8e4a$var$controlPoints(y);
                for(var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1)this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
        }
        if (this._line || this._line !== 0 && n === 1) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function $0431fd63498a8e4a$var$controlPoints(x) {
    var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
    for(i = 1; i < n - 1; ++i)a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
    for(i = 1; i < n; ++i)m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    a[n - 1] = r[n - 1] / b[n - 1];
    for(i = n - 2; i >= 0; --i)a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for(i = 0; i < n - 1; ++i)b[i] = 2 * x[i + 1] - a[i + 1];
    return [
        a,
        b
    ];
}
function $0431fd63498a8e4a$export$2e2bcd8739ae039(context) {
    return new $0431fd63498a8e4a$var$Natural(context);
}

});

parcelRegister("awYk7", function(module, exports) {

$parcel$export(module.exports, "default", () => $7aabaf8bc2ef026c$export$2e2bcd8739ae039);
$parcel$export(module.exports, "stepBefore", () => $7aabaf8bc2ef026c$export$10eafa5b7478b343);
$parcel$export(module.exports, "stepAfter", () => $7aabaf8bc2ef026c$export$793b3db073781cbb);
function $7aabaf8bc2ef026c$var$Step(context, t) {
    this._context = context;
    this._t = t;
}
$7aabaf8bc2ef026c$var$Step.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                if (this._t <= 0) {
                    this._context.lineTo(this._x, y);
                    this._context.lineTo(x, y);
                } else {
                    var x1 = this._x * (1 - this._t) + x * this._t;
                    this._context.lineTo(x1, this._y);
                    this._context.lineTo(x1, y);
                }
                break;
        }
        this._x = x, this._y = y;
    }
};
function $7aabaf8bc2ef026c$export$2e2bcd8739ae039(context) {
    return new $7aabaf8bc2ef026c$var$Step(context, 0.5);
}
function $7aabaf8bc2ef026c$export$10eafa5b7478b343(context) {
    return new $7aabaf8bc2ef026c$var$Step(context, 0);
}
function $7aabaf8bc2ef026c$export$793b3db073781cbb(context) {
    return new $7aabaf8bc2ef026c$var$Step(context, 1);
}

});

parcelRegister("gvKAS", function(module, exports) {

$parcel$export(module.exports, "default", () => $c053af21d9b8166c$export$2e2bcd8739ae039);

var $2QdO4 = parcelRequire("2QdO4");

var $eGYSC = parcelRequire("eGYSC");

var $73jKm = parcelRequire("73jKm");

var $hSaY5 = parcelRequire("hSaY5");

var $l2GPx = parcelRequire("l2GPx");

var $hezGB = parcelRequire("hezGB");

var $gfWjq = parcelRequire("gfWjq");

var $6qjJY = parcelRequire("6qjJY");

var $F3W1p = parcelRequire("F3W1p");

var $6WSfd = parcelRequire("6WSfd");

var $jDbkS = parcelRequire("jDbkS");

var $9a41W = parcelRequire("9a41W");

var $jUrWO = parcelRequire("jUrWO");

var $dGlaM = parcelRequire("dGlaM");

var $2ZpVS = parcelRequire("2ZpVS");
const $c053af21d9b8166c$export$19158c96a6700c15 = [
    (0, $hSaY5.default),
    (0, $l2GPx.default),
    (0, $hezGB.default),
    (0, $F3W1p.default),
    (0, $jDbkS.default),
    (0, $9a41W.default),
    (0, $dGlaM.default)
];
const $c053af21d9b8166c$export$915e06de6acf8fe = [
    (0, $hSaY5.default),
    (0, $6qjJY.default),
    (0, $2ZpVS.default),
    (0, $jUrWO.default),
    (0, $73jKm.default),
    (0, $6WSfd.default),
    (0, $gfWjq.default)
];
function $c053af21d9b8166c$export$2e2bcd8739ae039(type, size) {
    let context = null, path = (0, $eGYSC.withPath)(symbol);
    type = typeof type === "function" ? type : (0, $2QdO4.default)(type || (0, $hSaY5.default));
    size = typeof size === "function" ? size : (0, $2QdO4.default)(size === undefined ? 64 : +size);
    function symbol() {
        let buffer;
        if (!context) context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : (0, $2QdO4.default)(_), symbol) : type;
    };
    symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : (0, $2QdO4.default)(+_), symbol) : size;
    };
    symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
}

});
parcelRegister("73jKm", function(module, exports) {

$parcel$export(module.exports, "default", () => $522821850efbaf60$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
const $522821850efbaf60$var$sqrt3 = (0, $56M2n.sqrt)(3);
var $522821850efbaf60$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size + (0, $56M2n.min)(size / 28, 0.75)) * 0.59436;
        const t = r / 2;
        const u = t * $522821850efbaf60$var$sqrt3;
        context.moveTo(0, r);
        context.lineTo(0, -r);
        context.moveTo(-u, -t);
        context.lineTo(u, t);
        context.moveTo(-u, t);
        context.lineTo(u, -t);
    }
};

});

parcelRegister("hSaY5", function(module, exports) {

$parcel$export(module.exports, "default", () => $d02ffce1b21359c0$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
var $d02ffce1b21359c0$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size / (0, $56M2n.pi));
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, (0, $56M2n.tau));
    }
};

});

parcelRegister("l2GPx", function(module, exports) {

$parcel$export(module.exports, "default", () => $f51b021410145de6$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
var $f51b021410145de6$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
    }
};

});

parcelRegister("hezGB", function(module, exports) {

$parcel$export(module.exports, "default", () => $c8bf6d0180a229f8$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
const $c8bf6d0180a229f8$var$tan30 = (0, $56M2n.sqrt)(1 / 3);
const $c8bf6d0180a229f8$var$tan30_2 = $c8bf6d0180a229f8$var$tan30 * 2;
var $c8bf6d0180a229f8$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const y = (0, $56M2n.sqrt)(size / $c8bf6d0180a229f8$var$tan30_2);
        const x = y * $c8bf6d0180a229f8$var$tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
    }
};

});

parcelRegister("gfWjq", function(module, exports) {

$parcel$export(module.exports, "default", () => $bd5b47a522deb9cd$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
var $bd5b47a522deb9cd$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size) * 0.62625;
        context.moveTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.lineTo(-r, 0);
        context.closePath();
    }
};

});

parcelRegister("6qjJY", function(module, exports) {

$parcel$export(module.exports, "default", () => $4ad47bd2bbc2a7f3$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
var $4ad47bd2bbc2a7f3$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size - (0, $56M2n.min)(size / 7, 2)) * 0.87559;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
        context.moveTo(0, r);
        context.lineTo(0, -r);
    }
};

});

parcelRegister("F3W1p", function(module, exports) {

$parcel$export(module.exports, "default", () => $07b6e1d372d99de6$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
var $07b6e1d372d99de6$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const w = (0, $56M2n.sqrt)(size);
        const x = -w / 2;
        context.rect(x, x, w, w);
    }
};

});

parcelRegister("6WSfd", function(module, exports) {

$parcel$export(module.exports, "default", () => $50f23cab8787ddfb$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
var $50f23cab8787ddfb$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size) * 0.4431;
        context.moveTo(r, r);
        context.lineTo(r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, r);
        context.closePath();
    }
};

});

parcelRegister("jDbkS", function(module, exports) {

$parcel$export(module.exports, "default", () => $e4aa73dfb467b942$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
const $e4aa73dfb467b942$var$ka = 0.89081309152928522810;
const $e4aa73dfb467b942$var$kr = (0, $56M2n.sin)((0, $56M2n.pi) / 10) / (0, $56M2n.sin)(7 * (0, $56M2n.pi) / 10);
const $e4aa73dfb467b942$var$kx = (0, $56M2n.sin)((0, $56M2n.tau) / 10) * $e4aa73dfb467b942$var$kr;
const $e4aa73dfb467b942$var$ky = -(0, $56M2n.cos)((0, $56M2n.tau) / 10) * $e4aa73dfb467b942$var$kr;
var $e4aa73dfb467b942$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size * $e4aa73dfb467b942$var$ka);
        const x = $e4aa73dfb467b942$var$kx * r;
        const y = $e4aa73dfb467b942$var$ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for(let i = 1; i < 5; ++i){
            const a = (0, $56M2n.tau) * i / 5;
            const c = (0, $56M2n.cos)(a);
            const s = (0, $56M2n.sin)(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
    }
};

});

parcelRegister("9a41W", function(module, exports) {

$parcel$export(module.exports, "default", () => $6ab82c8add3d72c7$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
const $6ab82c8add3d72c7$var$sqrt3 = (0, $56M2n.sqrt)(3);
var $6ab82c8add3d72c7$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const y = -(0, $56M2n.sqrt)(size / ($6ab82c8add3d72c7$var$sqrt3 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-$6ab82c8add3d72c7$var$sqrt3 * y, -y);
        context.lineTo($6ab82c8add3d72c7$var$sqrt3 * y, -y);
        context.closePath();
    }
};

});

parcelRegister("jUrWO", function(module, exports) {

$parcel$export(module.exports, "default", () => $e7e8ed14d0b19e5e$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
const $e7e8ed14d0b19e5e$var$sqrt3 = (0, $56M2n.sqrt)(3);
var $e7e8ed14d0b19e5e$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const s = (0, $56M2n.sqrt)(size) * 0.6824;
        const t = s / 2;
        const u = s * $e7e8ed14d0b19e5e$var$sqrt3 / 2; // cos(Math.PI / 6)
        context.moveTo(0, -s);
        context.lineTo(u, t);
        context.lineTo(-u, t);
        context.closePath();
    }
};

});

parcelRegister("dGlaM", function(module, exports) {

$parcel$export(module.exports, "default", () => $9f5f9f1a363bb47b$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
const $9f5f9f1a363bb47b$var$c = -0.5;
const $9f5f9f1a363bb47b$var$s = (0, $56M2n.sqrt)(3) / 2;
const $9f5f9f1a363bb47b$var$k = 1 / (0, $56M2n.sqrt)(12);
const $9f5f9f1a363bb47b$var$a = ($9f5f9f1a363bb47b$var$k / 2 + 1) * 3;
var $9f5f9f1a363bb47b$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size / $9f5f9f1a363bb47b$var$a);
        const x0 = r / 2, y0 = r * $9f5f9f1a363bb47b$var$k;
        const x1 = x0, y1 = r * $9f5f9f1a363bb47b$var$k + r;
        const x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo($9f5f9f1a363bb47b$var$c * x0 - $9f5f9f1a363bb47b$var$s * y0, $9f5f9f1a363bb47b$var$s * x0 + $9f5f9f1a363bb47b$var$c * y0);
        context.lineTo($9f5f9f1a363bb47b$var$c * x1 - $9f5f9f1a363bb47b$var$s * y1, $9f5f9f1a363bb47b$var$s * x1 + $9f5f9f1a363bb47b$var$c * y1);
        context.lineTo($9f5f9f1a363bb47b$var$c * x2 - $9f5f9f1a363bb47b$var$s * y2, $9f5f9f1a363bb47b$var$s * x2 + $9f5f9f1a363bb47b$var$c * y2);
        context.lineTo($9f5f9f1a363bb47b$var$c * x0 + $9f5f9f1a363bb47b$var$s * y0, $9f5f9f1a363bb47b$var$c * y0 - $9f5f9f1a363bb47b$var$s * x0);
        context.lineTo($9f5f9f1a363bb47b$var$c * x1 + $9f5f9f1a363bb47b$var$s * y1, $9f5f9f1a363bb47b$var$c * y1 - $9f5f9f1a363bb47b$var$s * x1);
        context.lineTo($9f5f9f1a363bb47b$var$c * x2 + $9f5f9f1a363bb47b$var$s * y2, $9f5f9f1a363bb47b$var$c * y2 - $9f5f9f1a363bb47b$var$s * x2);
        context.closePath();
    }
};

});

parcelRegister("2ZpVS", function(module, exports) {

$parcel$export(module.exports, "default", () => $22d564efe8b8c711$export$2e2bcd8739ae039);

var $56M2n = parcelRequire("56M2n");
var $22d564efe8b8c711$export$2e2bcd8739ae039 = {
    draw (context, size) {
        const r = (0, $56M2n.sqrt)(size - (0, $56M2n.min)(size / 6, 1.7)) * 0.6189;
        context.moveTo(-r, -r);
        context.lineTo(r, r);
        context.moveTo(-r, r);
        context.lineTo(r, -r);
    }
};

});


parcelRegister("bWlF6", function(module, exports) {

$parcel$export(module.exports, "canvas", () => $8b15ea19e746e7e5$export$67ea982130081db);
$parcel$export(module.exports, "image", () => $8b15ea19e746e7e5$export$5c452ff88e35e47d);
function $8b15ea19e746e7e5$export$67ea982130081db(w, h) {
    if (typeof document !== "undefined" && document.createElement) {
        const c = document.createElement("canvas");
        if (c && c.getContext) {
            c.width = w;
            c.height = h;
            return c;
        }
    }
    return null;
}
const $8b15ea19e746e7e5$export$5c452ff88e35e47d = ()=>typeof Image !== "undefined" ? Image : null;

});

parcelRegister("1UqgZ", function(module, exports) {

$parcel$export(module.exports, "bandSpace", () => $163f66b1d413d885$export$82ffe82fdf9f759a);
$parcel$export(module.exports, "Linear", () => $163f66b1d413d885$export$cff00ccf6e2392de);
$parcel$export(module.exports, "Log", () => $163f66b1d413d885$export$ce30dbb46644d06c);
$parcel$export(module.exports, "Pow", () => $163f66b1d413d885$export$ce28d653ec559ee);
$parcel$export(module.exports, "Sqrt", () => $163f66b1d413d885$export$21ab404ab9d512a6);
$parcel$export(module.exports, "Symlog", () => $163f66b1d413d885$export$5c2197c5a19dfed4);
$parcel$export(module.exports, "Time", () => $163f66b1d413d885$export$680ea196effce5f);
$parcel$export(module.exports, "UTC", () => $163f66b1d413d885$export$fca4b67f338127f4);
$parcel$export(module.exports, "Sequential", () => $163f66b1d413d885$export$a77f6a295a72306);
$parcel$export(module.exports, "Diverging", () => $163f66b1d413d885$export$36983339810c8467);
$parcel$export(module.exports, "Quantile", () => $163f66b1d413d885$export$6e7c21509999f90d);
$parcel$export(module.exports, "Quantize", () => $163f66b1d413d885$export$41f86623990269aa);
$parcel$export(module.exports, "Threshold", () => $163f66b1d413d885$export$14f770b2ce0bb8ad);
$parcel$export(module.exports, "Ordinal", () => $163f66b1d413d885$export$9bee3ea40d61d982);
$parcel$export(module.exports, "Point", () => $163f66b1d413d885$export$baf26146a414f24a);
$parcel$export(module.exports, "Band", () => $163f66b1d413d885$export$5b22a87d7feca398);
$parcel$export(module.exports, "BinOrdinal", () => $163f66b1d413d885$export$cd3fededac2a4d56);
$parcel$export(module.exports, "registerScale", () => $163f66b1d413d885$export$eb34757ed6c822c0);
$parcel$export(module.exports, "isRegisteredScale", () => $163f66b1d413d885$export$de69bfde57c71612);
$parcel$export(module.exports, "scale", () => $163f66b1d413d885$export$dcdf75081b88279d);
$parcel$export(module.exports, "isValidScaleType", () => $163f66b1d413d885$export$9ca5d9f65779830a);
$parcel$export(module.exports, "isContinuous", () => $163f66b1d413d885$export$cb77cf646c77209a);
$parcel$export(module.exports, "isDiscrete", () => $163f66b1d413d885$export$8725cd2ead9e13f9);
$parcel$export(module.exports, "isDiscretizing", () => $163f66b1d413d885$export$f557bdae4fbf1f85);
$parcel$export(module.exports, "isLogarithmic", () => $163f66b1d413d885$export$2a88af06aab36a51);
$parcel$export(module.exports, "isInterpolating", () => $163f66b1d413d885$export$9fcb3efbdeeff428);
$parcel$export(module.exports, "isQuantile", () => $163f66b1d413d885$export$3c2550d9de517431);
$parcel$export(module.exports, "interpolateRange", () => $163f66b1d413d885$export$86c43f341fc9b3e3);
$parcel$export(module.exports, "interpolateColors", () => $163f66b1d413d885$export$ac51ceaa2f6fb770);
$parcel$export(module.exports, "interpolate", () => $163f66b1d413d885$export$89e29e4ab65e70a9);
$parcel$export(module.exports, "quantizeInterpolator", () => $163f66b1d413d885$export$9978b46111ab567d);
$parcel$export(module.exports, "scaleFraction", () => $163f66b1d413d885$export$c8f58780f5217767);
$parcel$export(module.exports, "scheme", () => $163f66b1d413d885$export$3005042704f95a69);
$parcel$export(module.exports, "SymbolLegend", () => $163f66b1d413d885$export$b0d2f3fc21b599a7);
$parcel$export(module.exports, "GradientLegend", () => $163f66b1d413d885$export$2aec7352925795be);
$parcel$export(module.exports, "tickCount", () => $163f66b1d413d885$export$d506c55ebb335cfe);
$parcel$export(module.exports, "validTicks", () => $163f66b1d413d885$export$4a42372ea62afaed);
$parcel$export(module.exports, "tickValues", () => $163f66b1d413d885$export$f3d31c1395d0604);
$parcel$export(module.exports, "tickFormat", () => $163f66b1d413d885$export$625f86fbe3670190);
$parcel$export(module.exports, "labelValues", () => $163f66b1d413d885$export$82940ecc1d4d4fc);
$parcel$export(module.exports, "labelFormat", () => $163f66b1d413d885$export$b806d99113137209);
$parcel$export(module.exports, "labelFraction", () => $163f66b1d413d885$export$e5dbe8a7c656acb4);
$parcel$export(module.exports, "domainCaption", () => $163f66b1d413d885$export$eb495b53e2c1537);
$parcel$export(module.exports, "scaleImplicit", () => (parcelRequire("leiRV")).implicit);

var $4SWbq = parcelRequire("4SWbq");

var $jrbsQ = parcelRequire("jrbsQ");
var $apu36 = parcelRequire("apu36");

var $jzzz7 = parcelRequire("jzzz7");
var $fvJBN = parcelRequire("fvJBN");
var $leiRV = parcelRequire("leiRV");
var $aeB25 = parcelRequire("aeB25");
var $b0jU3 = parcelRequire("b0jU3");
var $3QMa3 = parcelRequire("3QMa3");
var $16yNP = parcelRequire("16yNP");
var $5pZlW = parcelRequire("5pZlW");
var $hrvsT = parcelRequire("hrvsT");
var $7LDA6 = parcelRequire("7LDA6");
var $l4uu6 = parcelRequire("l4uu6");
var $3ISOG = parcelRequire("3ISOG");
var $hskQF = parcelRequire("hskQF");
var $bryj7 = parcelRequire("bryj7");

var $foboV = parcelRequire("foboV");

var $i7MAj = parcelRequire("i7MAj");
function $163f66b1d413d885$export$82ffe82fdf9f759a(count, paddingInner, paddingOuter) {
    const space = count - paddingInner + paddingOuter * 2;
    return count ? space > 0 ? space : 1 : 0;
}
const $163f66b1d413d885$export$544bf02140fa9a77 = "identity";
const $163f66b1d413d885$export$cff00ccf6e2392de = "linear";
const $163f66b1d413d885$export$ce30dbb46644d06c = "log";
const $163f66b1d413d885$export$ce28d653ec559ee = "pow";
const $163f66b1d413d885$export$21ab404ab9d512a6 = "sqrt";
const $163f66b1d413d885$export$5c2197c5a19dfed4 = "symlog";
const $163f66b1d413d885$export$680ea196effce5f = "time";
const $163f66b1d413d885$export$fca4b67f338127f4 = "utc";
const $163f66b1d413d885$export$a77f6a295a72306 = "sequential";
const $163f66b1d413d885$export$36983339810c8467 = "diverging";
const $163f66b1d413d885$export$6e7c21509999f90d = "quantile";
const $163f66b1d413d885$export$41f86623990269aa = "quantize";
const $163f66b1d413d885$export$14f770b2ce0bb8ad = "threshold";
const $163f66b1d413d885$export$9bee3ea40d61d982 = "ordinal";
const $163f66b1d413d885$export$baf26146a414f24a = "point";
const $163f66b1d413d885$export$5b22a87d7feca398 = "band";
const $163f66b1d413d885$export$cd3fededac2a4d56 = "bin-ordinal";
// categories
const $163f66b1d413d885$var$Continuous = "continuous";
const $163f66b1d413d885$var$Discrete = "discrete";
const $163f66b1d413d885$var$Discretizing = "discretizing";
const $163f66b1d413d885$var$Interpolating = "interpolating";
const $163f66b1d413d885$var$Temporal = "temporal";
function $163f66b1d413d885$var$invertRange(scale) {
    return function(_) {
        let lo = _[0], hi = _[1], t;
        if (hi < lo) {
            t = lo;
            lo = hi;
            hi = t;
        }
        return [
            scale.invert(lo),
            scale.invert(hi)
        ];
    };
}
function $163f66b1d413d885$var$invertRangeExtent(scale) {
    return function(_) {
        const range = scale.range();
        let lo = _[0], hi = _[1], min = -1, max, t, i, n;
        if (hi < lo) {
            t = lo;
            lo = hi;
            hi = t;
        }
        for(i = 0, n = range.length; i < n; ++i)if (range[i] >= lo && range[i] <= hi) {
            if (min < 0) min = i;
            max = i;
        }
        if (min < 0) return undefined;
        lo = scale.invertExtent(range[min]);
        hi = scale.invertExtent(range[max]);
        return [
            lo[0] === undefined ? lo[1] : lo[0],
            hi[1] === undefined ? hi[0] : hi[1]
        ];
    };
}
function $163f66b1d413d885$var$band() {
    const scale = (0, $leiRV.default)().unknown(undefined), domain = scale.domain, ordinalRange = scale.range;
    let range$1 = [
        0,
        1
    ], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
        const n = domain().length, reverse = range$1[1] < range$1[0], stop = range$1[1 - reverse], space = $163f66b1d413d885$export$82ffe82fdf9f759a(n, paddingInner, paddingOuter);
        let start = range$1[reverse - 0];
        step = (stop - start) / (space || 1);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) {
            start = Math.round(start);
            bandwidth = Math.round(bandwidth);
        }
        const values = (0, $apu36.default)(n).map((i)=>start + step * i);
        return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function(_) {
        if (arguments.length) {
            domain(_);
            return rescale();
        } else return domain();
    };
    scale.range = function(_) {
        if (arguments.length) {
            range$1 = [
                +_[0],
                +_[1]
            ];
            return rescale();
        } else return range$1.slice();
    };
    scale.rangeRound = function(_) {
        range$1 = [
            +_[0],
            +_[1]
        ];
        round = true;
        return rescale();
    };
    scale.bandwidth = function() {
        return bandwidth;
    };
    scale.step = function() {
        return step;
    };
    scale.round = function(_) {
        if (arguments.length) {
            round = !!_;
            return rescale();
        } else return round;
    };
    scale.padding = function(_) {
        if (arguments.length) {
            paddingOuter = Math.max(0, Math.min(1, _));
            paddingInner = paddingOuter;
            return rescale();
        } else return paddingInner;
    };
    scale.paddingInner = function(_) {
        if (arguments.length) {
            paddingInner = Math.max(0, Math.min(1, _));
            return rescale();
        } else return paddingInner;
    };
    scale.paddingOuter = function(_) {
        if (arguments.length) {
            paddingOuter = Math.max(0, Math.min(1, _));
            return rescale();
        } else return paddingOuter;
    };
    scale.align = function(_) {
        if (arguments.length) {
            align = Math.max(0, Math.min(1, _));
            return rescale();
        } else return align;
    };
    scale.invertRange = function(_) {
        // bail if range has null or undefined values
        if (_[0] == null || _[1] == null) return;
        const reverse = range$1[1] < range$1[0], values = reverse ? ordinalRange().reverse() : ordinalRange(), n = values.length - 1;
        let lo = +_[0], hi = +_[1], a, b, t;
        // bail if either range endpoint is invalid
        if (lo !== lo || hi !== hi) return;
        // order range inputs, bail if outside of scale range
        if (hi < lo) {
            t = lo;
            lo = hi;
            hi = t;
        }
        if (hi < values[0] || lo > range$1[1 - reverse]) return;
        // binary search to index into scale range
        a = Math.max(0, (0, $jrbsQ.bisectRight)(values, lo) - 1);
        b = lo === hi ? a : (0, $jrbsQ.bisectRight)(values, hi) - 1;
        // increment index a if lo is within padding gap
        if (lo - values[a] > bandwidth + 1e-10) ++a;
        if (reverse) {
            // map + swap
            t = a;
            a = n - b;
            b = n - t;
        }
        return a > b ? undefined : domain().slice(a, b + 1);
    };
    scale.invert = function(_) {
        const value = scale.invertRange([
            _,
            _
        ]);
        return value ? value[0] : value;
    };
    scale.copy = function() {
        return $163f66b1d413d885$var$band().domain(domain()).range(range$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return rescale();
}
function $163f66b1d413d885$var$pointish(scale) {
    const copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    scale.copy = function() {
        return $163f66b1d413d885$var$pointish(copy());
    };
    return scale;
}
function $163f66b1d413d885$var$point() {
    return $163f66b1d413d885$var$pointish($163f66b1d413d885$var$band().paddingInner(1));
}
var $163f66b1d413d885$var$map = Array.prototype.map;
function $163f66b1d413d885$var$numbers(_) {
    return $163f66b1d413d885$var$map.call(_, (0, $4SWbq.toNumber));
}
const $163f66b1d413d885$var$slice = Array.prototype.slice;
function $163f66b1d413d885$var$scaleBinOrdinal() {
    let domain = [], range = [];
    function scale(x) {
        return x == null || x !== x ? undefined : range[((0, $jrbsQ.default)(domain, x) - 1) % range.length];
    }
    scale.domain = function(_) {
        if (arguments.length) {
            domain = $163f66b1d413d885$var$numbers(_);
            return scale;
        } else return domain.slice();
    };
    scale.range = function(_) {
        if (arguments.length) {
            range = $163f66b1d413d885$var$slice.call(_);
            return scale;
        } else return range.slice();
    };
    scale.tickFormat = function(count, specifier) {
        return (0, $bryj7.default)(domain[0], (0, $4SWbq.peek)(domain), count == null ? 10 : count, specifier);
    };
    scale.copy = function() {
        return $163f66b1d413d885$var$scaleBinOrdinal().domain(scale.domain()).range(scale.range());
    };
    return scale;
}
/** Private scale registry: should not be exported */ const $163f66b1d413d885$var$scales = new Map();
const $163f66b1d413d885$var$VEGA_SCALE = Symbol("vega_scale");
function $163f66b1d413d885$export$eb34757ed6c822c0(scale) {
    scale[$163f66b1d413d885$var$VEGA_SCALE] = true;
    return scale;
}
/**
 * Return true if object was created by a constructor from the vega-scale `scale` function.
 */ function $163f66b1d413d885$export$de69bfde57c71612(scale) {
    return scale && scale[$163f66b1d413d885$var$VEGA_SCALE] === true;
}
/**
 * Augment scales with their type and needed inverse methods.
 */ function $163f66b1d413d885$var$create(type, constructor, metadata) {
    const ctr = function scale() {
        const s = constructor();
        if (!s.invertRange) s.invertRange = s.invert ? $163f66b1d413d885$var$invertRange(s) : s.invertExtent ? $163f66b1d413d885$var$invertRangeExtent(s) : undefined;
        s.type = type;
        return $163f66b1d413d885$export$eb34757ed6c822c0(s);
    };
    ctr.metadata = (0, $4SWbq.toSet)((0, $4SWbq.array)(metadata));
    return ctr;
}
/**
 * Registry function for adding and accessing scale constructor functions.
 * The *type* argument is a String indicating the name of the scale type.
 *
 * If the *scale* argument is not specified, this method returns the matching scale constructor in the registry, or `null` if not found.
 * If the *scale* argument is provided, it must be a scale constructor function to add to the registry under the given *type* name.
 * The *metadata* argument provides additional information to guide appropriate use of scales within Vega.
 *
 *  *metadata* can be either a string or string array. The valid string values are:
 * - `"continuous"` - the scale is defined over a continuous-valued domain.
 * - `"discrete"` - the scale is defined over a discrete domain and range.
 * - `"discretizing"` - the scale discretizes a continuous domain to a discrete range.
 * - `"interpolating"` - the scale range is defined using a color interpolator.
 * - `"log"` - the scale performs a logarithmic transform of the continuous domain.
 * - `"temporal"` - the scale domain is defined over date-time values.
 */ function $163f66b1d413d885$export$dcdf75081b88279d(type, scale, metadata) {
    if (arguments.length > 1) {
        $163f66b1d413d885$var$scales.set(type, $163f66b1d413d885$var$create(type, scale, metadata));
        return this;
    } else return $163f66b1d413d885$export$9ca5d9f65779830a(type) ? $163f66b1d413d885$var$scales.get(type) : undefined;
}
// identity scale
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$544bf02140fa9a77, $fvJBN.default);
// continuous scales
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$cff00ccf6e2392de, $aeB25.default, $163f66b1d413d885$var$Continuous);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$ce30dbb46644d06c, $b0jU3.default, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$export$ce30dbb46644d06c
]);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$ce28d653ec559ee, $3QMa3.default, $163f66b1d413d885$var$Continuous);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$21ab404ab9d512a6, $3QMa3.sqrt, $163f66b1d413d885$var$Continuous);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$5c2197c5a19dfed4, $7LDA6.default, $163f66b1d413d885$var$Continuous);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$680ea196effce5f, $3ISOG.default, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Temporal
]);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$fca4b67f338127f4, $hskQF.default, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Temporal
]);
// sequential scales
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$a77f6a295a72306, $hrvsT.default, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]); // backwards compat
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$a77f6a295a72306}-${$163f66b1d413d885$export$cff00ccf6e2392de}`, $hrvsT.default, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$a77f6a295a72306}-${$163f66b1d413d885$export$ce30dbb46644d06c}`, $hrvsT.sequentialLog, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating,
    $163f66b1d413d885$export$ce30dbb46644d06c
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$a77f6a295a72306}-${$163f66b1d413d885$export$ce28d653ec559ee}`, $hrvsT.sequentialPow, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$a77f6a295a72306}-${$163f66b1d413d885$export$21ab404ab9d512a6}`, $hrvsT.sequentialSqrt, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$a77f6a295a72306}-${$163f66b1d413d885$export$5c2197c5a19dfed4}`, $hrvsT.sequentialSymlog, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
// diverging scales
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$36983339810c8467}-${$163f66b1d413d885$export$cff00ccf6e2392de}`, $jzzz7.default, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$36983339810c8467}-${$163f66b1d413d885$export$ce30dbb46644d06c}`, $jzzz7.divergingLog, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating,
    $163f66b1d413d885$export$ce30dbb46644d06c
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$36983339810c8467}-${$163f66b1d413d885$export$ce28d653ec559ee}`, $jzzz7.divergingPow, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$36983339810c8467}-${$163f66b1d413d885$export$21ab404ab9d512a6}`, $jzzz7.divergingSqrt, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
$163f66b1d413d885$export$dcdf75081b88279d(`${$163f66b1d413d885$export$36983339810c8467}-${$163f66b1d413d885$export$5c2197c5a19dfed4}`, $jzzz7.divergingSymlog, [
    $163f66b1d413d885$var$Continuous,
    $163f66b1d413d885$var$Interpolating
]);
// discretizing scales
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$6e7c21509999f90d, $16yNP.default, [
    $163f66b1d413d885$var$Discretizing,
    $163f66b1d413d885$export$6e7c21509999f90d
]);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$41f86623990269aa, $5pZlW.default, $163f66b1d413d885$var$Discretizing);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$14f770b2ce0bb8ad, $l4uu6.default, $163f66b1d413d885$var$Discretizing);
// discrete scales
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$cd3fededac2a4d56, $163f66b1d413d885$var$scaleBinOrdinal, [
    $163f66b1d413d885$var$Discrete,
    $163f66b1d413d885$var$Discretizing
]);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$9bee3ea40d61d982, $leiRV.default, $163f66b1d413d885$var$Discrete);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$5b22a87d7feca398, $163f66b1d413d885$var$band, $163f66b1d413d885$var$Discrete);
$163f66b1d413d885$export$dcdf75081b88279d($163f66b1d413d885$export$baf26146a414f24a, $163f66b1d413d885$var$point, $163f66b1d413d885$var$Discrete);
function $163f66b1d413d885$export$9ca5d9f65779830a(type) {
    return $163f66b1d413d885$var$scales.has(type);
}
function $163f66b1d413d885$var$hasType(key, type) {
    const s = $163f66b1d413d885$var$scales.get(key);
    return s && s.metadata[type];
}
function $163f66b1d413d885$export$cb77cf646c77209a(key) {
    return $163f66b1d413d885$var$hasType(key, $163f66b1d413d885$var$Continuous);
}
function $163f66b1d413d885$export$8725cd2ead9e13f9(key) {
    return $163f66b1d413d885$var$hasType(key, $163f66b1d413d885$var$Discrete);
}
function $163f66b1d413d885$export$f557bdae4fbf1f85(key) {
    return $163f66b1d413d885$var$hasType(key, $163f66b1d413d885$var$Discretizing);
}
function $163f66b1d413d885$export$2a88af06aab36a51(key) {
    return $163f66b1d413d885$var$hasType(key, $163f66b1d413d885$export$ce30dbb46644d06c);
}
function $163f66b1d413d885$export$a0ef8f4ef32ae0e7(key) {
    return $163f66b1d413d885$var$hasType(key, $163f66b1d413d885$var$Temporal);
}
function $163f66b1d413d885$export$9fcb3efbdeeff428(key) {
    return $163f66b1d413d885$var$hasType(key, $163f66b1d413d885$var$Interpolating);
}
function $163f66b1d413d885$export$3c2550d9de517431(key) {
    return $163f66b1d413d885$var$hasType(key, $163f66b1d413d885$export$6e7c21509999f90d);
}
const $163f66b1d413d885$var$scaleProps = [
    "clamp",
    "base",
    "constant",
    "exponent"
];
function $163f66b1d413d885$export$86c43f341fc9b3e3(interpolator, range) {
    const start = range[0], span = (0, $4SWbq.peek)(range) - start;
    return function(i) {
        return interpolator(start + i * span);
    };
}
function $163f66b1d413d885$export$ac51ceaa2f6fb770(colors, type, gamma) {
    return $foboV.piecewise($163f66b1d413d885$export$89e29e4ab65e70a9(type || "rgb", gamma), colors);
}
function $163f66b1d413d885$export$9978b46111ab567d(interpolator, count) {
    const samples = new Array(count), n = count + 1;
    for(let i = 0; i < count;)samples[i] = interpolator(++i / n);
    return samples;
}
function $163f66b1d413d885$export$8ebb4942fce22880(scale) {
    const t = scale.type, s = scale.copy();
    s.type = t;
    return s;
}
function $163f66b1d413d885$export$c8f58780f5217767(scale$1, min, max) {
    const delta = max - min;
    let i, t, s;
    if (!delta || !Number.isFinite(delta)) return (0, $4SWbq.constant)(0.5);
    else {
        i = (t = scale$1.type).indexOf("-");
        t = i < 0 ? t : t.slice(i + 1);
        s = $163f66b1d413d885$export$dcdf75081b88279d(t)().domain([
            min,
            max
        ]).range([
            0,
            1
        ]);
        $163f66b1d413d885$var$scaleProps.forEach((m)=>scale$1[m] ? s[m](scale$1[m]()) : 0);
        return s;
    }
}
function $163f66b1d413d885$export$89e29e4ab65e70a9(type, gamma) {
    const interp = $foboV[$163f66b1d413d885$var$method(type)];
    return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;
}
function $163f66b1d413d885$var$method(type) {
    return "interpolate" + type.toLowerCase().split("-").map((s)=>s[0].toUpperCase() + s.slice(1)).join("");
}
const $163f66b1d413d885$var$continuous = {
    blues: "cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90",
    greens: "d3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429",
    greys: "e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e",
    oranges: "fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303",
    purples: "e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c",
    reds: "fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13",
    blueGreen: "d5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429",
    bluePurple: "ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71",
    greenBlue: "d3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1",
    orangeRed: "fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403",
    purpleBlue: "dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281",
    purpleBlueGreen: "dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353",
    purpleRed: "dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a",
    redPurple: "fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174",
    yellowGreen: "e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034",
    yellowOrangeBrown: "feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204",
    yellowOrangeRed: "fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225",
    blueOrange: "134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07",
    brownBlueGreen: "704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147",
    purpleGreen: "5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29",
    purpleOrange: "4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07",
    redBlue: "8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85",
    redGrey: "8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434",
    yellowGreenBlue: "eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185",
    redYellowBlue: "a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695",
    redYellowGreen: "a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837",
    pinkYellowGreen: "8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419",
    spectral: "9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2",
    viridis: "440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725",
    magma: "0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf",
    inferno: "0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4",
    plasma: "0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921",
    cividis: "00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647",
    rainbow: "6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa",
    sinebow: "ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040",
    turbo: "23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00",
    browns: "eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632",
    tealBlues: "bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985",
    teals: "bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667",
    warmGreys: "dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e",
    goldGreen: "f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36",
    goldOrange: "f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26",
    goldRed: "f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e",
    lightGreyRed: "efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b",
    lightGreyTeal: "e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc",
    lightMulti: "e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c",
    lightOrange: "f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b",
    lightTealBlue: "e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988",
    darkBlue: "3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff",
    darkGold: "3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff",
    darkGreen: "3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa",
    darkMulti: "3737371f5287197d8c29a86995ce3fffe800ffffff",
    darkRed: "3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c"
};
const $163f66b1d413d885$var$discrete = {
    category10: "1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf",
    category20: "1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5",
    category20b: "393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6",
    category20c: "3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9",
    tableau10: "4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac",
    tableau20: "4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5",
    accent: "7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666",
    dark2: "1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666",
    paired: "a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928",
    pastel1: "fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2",
    pastel2: "b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc",
    set1: "e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999",
    set2: "66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3",
    set3: "8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"
};
function $163f66b1d413d885$var$colors(palette) {
    const n = palette.length / 6 | 0, c = new Array(n);
    for(let i = 0; i < n;)c[i] = "#" + palette.slice(i * 6, ++i * 6);
    return c;
}
function $163f66b1d413d885$var$apply(_, f) {
    for(const k in _)$163f66b1d413d885$export$3005042704f95a69(k, f(_[k]));
}
const $163f66b1d413d885$var$schemes = {};
$163f66b1d413d885$var$apply($163f66b1d413d885$var$discrete, $163f66b1d413d885$var$colors);
$163f66b1d413d885$var$apply($163f66b1d413d885$var$continuous, (_)=>$163f66b1d413d885$export$ac51ceaa2f6fb770($163f66b1d413d885$var$colors(_)));
function $163f66b1d413d885$export$3005042704f95a69(name, scheme) {
    name = name && name.toLowerCase();
    if (arguments.length > 1) {
        $163f66b1d413d885$var$schemes[name] = scheme;
        return this;
    } else return $163f66b1d413d885$var$schemes[name];
}
const $163f66b1d413d885$export$b0d2f3fc21b599a7 = "symbol";
const $163f66b1d413d885$export$fac6eb9dbe55ceb9 = "discrete";
const $163f66b1d413d885$export$2aec7352925795be = "gradient";
const $163f66b1d413d885$var$defaultFormatter = (value)=>(0, $4SWbq.isArray)(value) ? value.map((v)=>String(v)) : String(value);
const $163f66b1d413d885$var$ascending = (a, b)=>a[1] - b[1];
const $163f66b1d413d885$var$descending = (a, b)=>b[1] - a[1];
/**
 * Determine the tick count or interval function.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} count - The desired tick count or interval specifier.
 * @param {number} minStep - The desired minimum step between tick values.
 * @return {*} - The tick count or interval function.
 */ function $163f66b1d413d885$export$d506c55ebb335cfe(scale, count, minStep) {
    let step;
    if ((0, $4SWbq.isNumber)(count)) {
        if (scale.bins) count = Math.max(count, scale.bins.length);
        if (minStep != null) count = Math.min(count, Math.floor((0, $4SWbq.span)(scale.domain()) / minStep || 1));
    }
    if ((0, $4SWbq.isObject)(count)) {
        step = count.step;
        count = count.interval;
    }
    if ((0, $4SWbq.isString)(count)) {
        count = scale.type === $163f66b1d413d885$export$680ea196effce5f ? (0, $i7MAj.timeInterval)(count) : scale.type == $163f66b1d413d885$export$fca4b67f338127f4 ? (0, $i7MAj.utcInterval)(count) : (0, $4SWbq.error)("Only time and utc scales accept interval strings.");
        if (step) count = count.every(step);
    }
    return count;
}
/**
 * Filter a set of candidate tick values, ensuring that only tick values
 * that lie within the scale range are included.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {Array<*>} ticks - The candidate tick values.
 * @param {*} count - The tick count or interval function.
 * @return {Array<*>} - The filtered tick values.
 */ function $163f66b1d413d885$export$4a42372ea62afaed(scale, ticks, count) {
    let range = scale.range(), lo = range[0], hi = (0, $4SWbq.peek)(range), cmp = $163f66b1d413d885$var$ascending;
    if (lo > hi) {
        range = hi;
        hi = lo;
        lo = range;
        cmp = $163f66b1d413d885$var$descending;
    }
    lo = Math.floor(lo);
    hi = Math.ceil(hi);
    // filter ticks to valid values within the range
    // additionally sort ticks in range order (#2579)
    ticks = ticks.map((v)=>[
            v,
            scale(v)
        ]).filter((_)=>lo <= _[1] && _[1] <= hi).sort(cmp).map((_)=>_[0]);
    if (count > 0 && ticks.length > 1) {
        const endpoints = [
            ticks[0],
            (0, $4SWbq.peek)(ticks)
        ];
        while(ticks.length > count && ticks.length >= 3)ticks = ticks.filter((_, i)=>!(i % 2));
        if (ticks.length < 3) ticks = endpoints;
    }
    return ticks;
}
/**
 * Generate tick values for the given scale and approximate tick count or
 * interval value. If the scale has a 'ticks' method, it will be used to
 * generate the ticks, with the count argument passed as a parameter. If the
 * scale lacks a 'ticks' method, the full scale domain will be returned.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} [count] - The approximate number of desired ticks.
 * @return {Array<*>} - The generated tick values.
 */ function $163f66b1d413d885$export$f3d31c1395d0604(scale, count) {
    return scale.bins ? $163f66b1d413d885$export$4a42372ea62afaed(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();
}
/**
 * Generate a label format function for a scale. If the scale has a
 * 'tickFormat' method, it will be used to generate the formatter, with the
 * count and specifier arguments passed as parameters. If the scale lacks a
 * 'tickFormat' method, the returned formatter performs simple string coercion.
 * If the input scale is a logarithmic scale and the format specifier does not
 * indicate a desired decimal precision, a special variable precision formatter
 * that automatically trims trailing zeroes will be generated.
 * @param {Scale} scale - The scale for which to generate the label formatter.
 * @param {*} [count] - The approximate number of desired ticks.
 * @param {string} [specifier] - The format specifier. Must be a legal d3
 *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or
 *   time multi-format specifier object.
 * @return {function(*):string} - The generated label formatter.
 */ function $163f66b1d413d885$export$625f86fbe3670190(locale, scale, count, specifier, formatType, noSkip) {
    const type = scale.type;
    let format = $163f66b1d413d885$var$defaultFormatter;
    if (type === $163f66b1d413d885$export$680ea196effce5f || formatType === $163f66b1d413d885$export$680ea196effce5f) format = locale.timeFormat(specifier);
    else if (type === $163f66b1d413d885$export$fca4b67f338127f4 || formatType === $163f66b1d413d885$export$fca4b67f338127f4) format = locale.utcFormat(specifier);
    else if ($163f66b1d413d885$export$2a88af06aab36a51(type)) {
        const varfmt = locale.formatFloat(specifier);
        if (noSkip || scale.bins) format = varfmt;
        else {
            const test = $163f66b1d413d885$var$tickLog(scale, count, false);
            format = (_)=>test(_) ? varfmt(_) : "";
        }
    } else if (scale.tickFormat) {
        // if d3 scale has tickFormat, it must be continuous
        const d = scale.domain();
        format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);
    } else if (specifier) format = locale.format(specifier);
    return format;
}
function $163f66b1d413d885$var$tickLog(scale, count, values) {
    const ticks = $163f66b1d413d885$export$f3d31c1395d0604(scale, count), base = scale.base(), logb = Math.log(base), k = Math.max(1, base * count / ticks.length);
    // apply d3-scale's log format filter criteria
    const test = (d)=>{
        let i = d / Math.pow(base, Math.round(Math.log(d) / logb));
        if (i * base < base - 0.5) i *= base;
        return i <= k;
    };
    return values ? ticks.filter(test) : test;
}
const $163f66b1d413d885$var$symbols = {
    [$163f66b1d413d885$export$6e7c21509999f90d]: "quantiles",
    [$163f66b1d413d885$export$41f86623990269aa]: "thresholds",
    [$163f66b1d413d885$export$14f770b2ce0bb8ad]: "domain"
};
const $163f66b1d413d885$var$formats = {
    [$163f66b1d413d885$export$6e7c21509999f90d]: "quantiles",
    [$163f66b1d413d885$export$41f86623990269aa]: "domain"
};
function $163f66b1d413d885$export$82940ecc1d4d4fc(scale, count) {
    return scale.bins ? $163f66b1d413d885$var$binValues(scale.bins) : scale.type === $163f66b1d413d885$export$ce30dbb46644d06c ? $163f66b1d413d885$var$tickLog(scale, count, true) : $163f66b1d413d885$var$symbols[scale.type] ? $163f66b1d413d885$var$thresholdValues(scale[$163f66b1d413d885$var$symbols[scale.type]]()) : $163f66b1d413d885$export$f3d31c1395d0604(scale, count);
}
function $163f66b1d413d885$var$thresholdFormat(locale, scale, specifier) {
    const _ = scale[$163f66b1d413d885$var$formats[scale.type]](), n = _.length;
    let d = n > 1 ? _[1] - _[0] : _[0], i;
    for(i = 1; i < n; ++i)d = Math.min(d, _[i] - _[i - 1]);
    // tickCount = 3 ticks times 10 for increased resolution
    return locale.formatSpan(0, d, 30, specifier);
}
function $163f66b1d413d885$var$thresholdValues(thresholds) {
    const values = [
        -Infinity
    ].concat(thresholds);
    values.max = Infinity;
    return values;
}
function $163f66b1d413d885$var$binValues(bins) {
    const values = bins.slice(0, -1);
    values.max = (0, $4SWbq.peek)(bins);
    return values;
}
const $163f66b1d413d885$var$isDiscreteRange = (scale)=>$163f66b1d413d885$var$symbols[scale.type] || scale.bins;
function $163f66b1d413d885$export$b806d99113137209(locale, scale, count, type, specifier, formatType, noSkip) {
    const format = $163f66b1d413d885$var$formats[scale.type] && formatType !== $163f66b1d413d885$export$680ea196effce5f && formatType !== $163f66b1d413d885$export$fca4b67f338127f4 ? $163f66b1d413d885$var$thresholdFormat(locale, scale, specifier) : $163f66b1d413d885$export$625f86fbe3670190(locale, scale, count, specifier, formatType, noSkip);
    return type === $163f66b1d413d885$export$b0d2f3fc21b599a7 && $163f66b1d413d885$var$isDiscreteRange(scale) ? $163f66b1d413d885$var$formatRange(format) : type === $163f66b1d413d885$export$fac6eb9dbe55ceb9 ? $163f66b1d413d885$var$formatDiscrete(format) : $163f66b1d413d885$var$formatPoint(format);
}
const $163f66b1d413d885$var$formatRange = (format)=>(value, index, array)=>{
        const limit = $163f66b1d413d885$var$get(array[index + 1], $163f66b1d413d885$var$get(array.max, Infinity)), lo = $163f66b1d413d885$var$formatValue(value, format), hi = $163f66b1d413d885$var$formatValue(limit, format);
        return lo && hi ? lo + " \u2013 " + hi : hi ? "< " + hi : "\u2265 " + lo;
    };
const $163f66b1d413d885$var$get = (value, dflt)=>value != null ? value : dflt;
const $163f66b1d413d885$var$formatDiscrete = (format)=>(value, index)=>index ? format(value) : null;
const $163f66b1d413d885$var$formatPoint = (format)=>(value)=>format(value);
const $163f66b1d413d885$var$formatValue = (value, format)=>Number.isFinite(value) ? format(value) : null;
function $163f66b1d413d885$export$e5dbe8a7c656acb4(scale) {
    const domain = scale.domain(), count = domain.length - 1;
    let lo = +domain[0], hi = +(0, $4SWbq.peek)(domain), span = hi - lo;
    if (scale.type === $163f66b1d413d885$export$14f770b2ce0bb8ad) {
        const adjust = count ? span / count : 0.1;
        lo -= adjust;
        hi += adjust;
        span = hi - lo;
    }
    return (value)=>(value - lo) / span;
}
function $163f66b1d413d885$var$format(locale, scale, specifier, formatType) {
    const type = formatType || scale.type;
    // replace abbreviated time specifiers to improve screen reader experience
    if ((0, $4SWbq.isString)(specifier) && $163f66b1d413d885$export$a0ef8f4ef32ae0e7(type)) specifier = specifier.replace(/%a/g, "%A").replace(/%b/g, "%B");
    return !specifier && type === $163f66b1d413d885$export$680ea196effce5f ? locale.timeFormat("%A, %d %B %Y, %X") : !specifier && type === $163f66b1d413d885$export$fca4b67f338127f4 ? locale.utcFormat("%A, %d %B %Y, %X UTC") : $163f66b1d413d885$export$b806d99113137209(locale, scale, 5, null, specifier, formatType, true);
}
function $163f66b1d413d885$export$eb495b53e2c1537(locale, scale, opt) {
    opt = opt || {};
    const max = Math.max(3, opt.maxlen || 7), fmt = $163f66b1d413d885$var$format(locale, scale, opt.format, opt.formatType);
    // if scale breaks domain into bins, describe boundaries
    if ($163f66b1d413d885$export$f557bdae4fbf1f85(scale.type)) {
        const v = $163f66b1d413d885$export$82940ecc1d4d4fc(scale).slice(1).map(fmt), n = v.length;
        return `${n} boundar${n === 1 ? "y" : "ies"}: ${v.join(", ")}`;
    } else if ($163f66b1d413d885$export$8725cd2ead9e13f9(scale.type)) {
        const d = scale.domain(), n = d.length, v = n > max ? d.slice(0, max - 2).map(fmt).join(", ") + ", ending with " + d.slice(-1).map(fmt) : d.map(fmt).join(", ");
        return `${n} value${n === 1 ? "" : "s"}: ${v}`;
    } else {
        const d = scale.domain();
        return `values from ${fmt(d[0])} to ${fmt((0, $4SWbq.peek)(d))}`;
    }
}

});
parcelRegister("jrbsQ", function(module, exports) {

$parcel$export(module.exports, "bisectRight", () => $e2696e7f6664c39e$export$4d945ad3ad5751b0);
$parcel$export(module.exports, "bisectLeft", () => $e2696e7f6664c39e$export$df7d25c84ebd12a5);
$parcel$export(module.exports, "default", () => $e2696e7f6664c39e$export$2e2bcd8739ae039);

var $fAbgM = parcelRequire("fAbgM");

var $bytjh = parcelRequire("bytjh");

var $8pAlt = parcelRequire("8pAlt");
const $e2696e7f6664c39e$var$ascendingBisect = (0, $bytjh.default)((0, $fAbgM.default));
const $e2696e7f6664c39e$export$4d945ad3ad5751b0 = $e2696e7f6664c39e$var$ascendingBisect.right;
const $e2696e7f6664c39e$export$df7d25c84ebd12a5 = $e2696e7f6664c39e$var$ascendingBisect.left;
const $e2696e7f6664c39e$export$c1cb828b1117c77b = (0, $bytjh.default)((0, $8pAlt.default)).center;
var $e2696e7f6664c39e$export$2e2bcd8739ae039 = $e2696e7f6664c39e$export$4d945ad3ad5751b0;

});

parcelRegister("jzzz7", function(module, exports) {

$parcel$export(module.exports, "default", () => $e3fcdfc7eba84576$export$2e2bcd8739ae039);
$parcel$export(module.exports, "divergingLog", () => $e3fcdfc7eba84576$export$5f0266a9159c47fb);
$parcel$export(module.exports, "divergingSymlog", () => $e3fcdfc7eba84576$export$50b3da713cf557c6);
$parcel$export(module.exports, "divergingPow", () => $e3fcdfc7eba84576$export$d6cedcc63bf26e7e);
$parcel$export(module.exports, "divergingSqrt", () => $e3fcdfc7eba84576$export$33ddefb5c4ab9e9c);

var $ik5Mo = parcelRequire("ik5Mo");
var $462g9 = parcelRequire("462g9");
var $7ylmc = parcelRequire("7ylmc");

var $fPtN1 = parcelRequire("fPtN1");

var $e2cSk = parcelRequire("e2cSk");

var $aeB25 = parcelRequire("aeB25");

var $b0jU3 = parcelRequire("b0jU3");

var $hrvsT = parcelRequire("hrvsT");

var $7LDA6 = parcelRequire("7LDA6");

var $3QMa3 = parcelRequire("3QMa3");
function $e3fcdfc7eba84576$var$transformer() {
    var x0 = 0, x1 = 0.5, x2 = 1, s = 1, t0, t1, t2, k10, k21, interpolator = (0, $fPtN1.identity), transform, clamp = false, unknown;
    function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [
            x0,
            x1,
            x2
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1, r2;
            return arguments.length ? ([r0, r1, r2] = _, interpolator = (0, $7ylmc.default)(interpolate, [
                r0,
                r1,
                r2
            ]), scale) : [
                interpolator(0),
                interpolator(0.5),
                interpolator(1)
            ];
        };
    }
    scale.range = range((0, $ik5Mo.default));
    scale.rangeRound = range((0, $462g9.default));
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
        return scale;
    };
}
function $e3fcdfc7eba84576$export$2e2bcd8739ae039() {
    var scale = (0, $aeB25.linearish)($e3fcdfc7eba84576$var$transformer()((0, $fPtN1.identity)));
    scale.copy = function() {
        return (0, $hrvsT.copy)(scale, $e3fcdfc7eba84576$export$2e2bcd8739ae039());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $e3fcdfc7eba84576$export$5f0266a9159c47fb() {
    var scale = (0, $b0jU3.loggish)($e3fcdfc7eba84576$var$transformer()).domain([
        0.1,
        1,
        10
    ]);
    scale.copy = function() {
        return (0, $hrvsT.copy)(scale, $e3fcdfc7eba84576$export$5f0266a9159c47fb()).base(scale.base());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $e3fcdfc7eba84576$export$50b3da713cf557c6() {
    var scale = (0, $7LDA6.symlogish)($e3fcdfc7eba84576$var$transformer());
    scale.copy = function() {
        return (0, $hrvsT.copy)(scale, $e3fcdfc7eba84576$export$50b3da713cf557c6()).constant(scale.constant());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $e3fcdfc7eba84576$export$d6cedcc63bf26e7e() {
    var scale = (0, $3QMa3.powish)($e3fcdfc7eba84576$var$transformer());
    scale.copy = function() {
        return (0, $hrvsT.copy)(scale, $e3fcdfc7eba84576$export$d6cedcc63bf26e7e()).exponent(scale.exponent());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $e3fcdfc7eba84576$export$33ddefb5c4ab9e9c() {
    return $e3fcdfc7eba84576$export$d6cedcc63bf26e7e.apply(null, arguments).exponent(0.5);
}

});
parcelRegister("ik5Mo", function(module, exports) {

$parcel$export(module.exports, "default", () => $d56e93f7d79e08b6$export$2e2bcd8739ae039);

var $aQO2N = parcelRequire("aQO2N");

var $a0CZw = parcelRequire("a0CZw");

var $3tkU1 = parcelRequire("3tkU1");

var $8FniO = parcelRequire("8FniO");

var $bpZWS = parcelRequire("bpZWS");

var $7TNxM = parcelRequire("7TNxM");

var $hqTnx = parcelRequire("hqTnx");

var $lNnfi = parcelRequire("lNnfi");

var $2zoS5 = parcelRequire("2zoS5");
function $d56e93f7d79e08b6$export$2e2bcd8739ae039(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? (0, $lNnfi.default)(b) : (t === "number" ? (0, $bpZWS.default) : t === "string" ? (c = (0, $aQO2N.default)(b)) ? (b = c, $a0CZw.default) : (0, $hqTnx.default) : b instanceof (0, $aQO2N.default) ? (0, $a0CZw.default) : b instanceof Date ? (0, $8FniO.default) : (0, $2zoS5.isNumberArray)(b) ? (0, $2zoS5.default) : Array.isArray(b) ? (0, $3tkU1.genericArray) : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? (0, $7TNxM.default) : (0, $bpZWS.default))(a, b);
}

});
parcelRegister("aQO2N", function(module, exports) {

$parcel$export(module.exports, "Color", () => Color);
$parcel$export(module.exports, "darker", () => darker);
$parcel$export(module.exports, "brighter", () => brighter);
$parcel$export(module.exports, "default", () => color);
$parcel$export(module.exports, "hslConvert", () => hslConvert);
$parcel$export(module.exports, "Rgb", () => Rgb);
$parcel$export(module.exports, "rgbConvert", () => rgbConvert);
$parcel$export(module.exports, "rgb", () => rgb);
$parcel$export(module.exports, "hsl", () => hsl);

var $1JVRF = parcelRequire("1JVRF");
function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
};
(0, $1JVRF.default)(Color, color, {
    copy (channels) {
        return Object.assign(new this.constructor, this, channels);
    },
    displayable () {
        return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
});
function color_formatHex() {
    return this.rgb().formatHex();
}
function color_formatHex8() {
    return this.rgb().formatHex8();
}
function color_formatHsl() {
    return hslConvert(this).formatHsl();
}
function color_formatRgb() {
    return this.rgb().formatRgb();
}
function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
     : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
     : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
     : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
     : null // invalid hex
    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
     : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
     : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
     : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
     : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
     : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
     : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
     : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}
function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb;
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
}
(0, $1JVRF.default)(Rgb, rgb, (0, $1JVRF.extend)(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb () {
        return this;
    },
    clamp () {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable () {
        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
}));
function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
}
function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl;
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
    } else s = l > 0 && l < 1 ? 0 : h;
    return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, $1JVRF.default)(Hsl, hsl, (0, $1JVRF.extend)(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    clamp () {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable () {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl () {
        const a = clampa(this.opacity);
        return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
    }
}));
function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
}
function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
}
/* From FvD 13.37, CSS Color Module Level 3 */ function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

});
parcelRegister("1JVRF", function(module, exports) {

$parcel$export(module.exports, "default", () => $1446e1193a92d8f4$export$2e2bcd8739ae039);
$parcel$export(module.exports, "extend", () => $1446e1193a92d8f4$export$8b58be045bf06082);
function $1446e1193a92d8f4$export$2e2bcd8739ae039(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
}
function $1446e1193a92d8f4$export$8b58be045bf06082(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for(var key in definition)prototype[key] = definition[key];
    return prototype;
}

});


parcelRegister("a0CZw", function(module, exports) {

$parcel$export(module.exports, "default", () => $74982658d3c93a85$export$2e2bcd8739ae039);
$parcel$export(module.exports, "rgbBasis", () => $74982658d3c93a85$export$2c0e28f2e2852d3f);
$parcel$export(module.exports, "rgbBasisClosed", () => $74982658d3c93a85$export$53d5214f625ccd4c);

var $aQO2N = parcelRequire("aQO2N");

var $jLQIP = parcelRequire("jLQIP");

var $imd1n = parcelRequire("imd1n");

var $7F7cI = parcelRequire("7F7cI");
var $74982658d3c93a85$export$2e2bcd8739ae039 = function rgbGamma(y) {
    var color = (0, $7F7cI.gamma)(y);
    function rgb(start, end) {
        var r = color((start = (0, $aQO2N.rgb)(start)).r, (end = (0, $aQO2N.rgb)(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = (0, $7F7cI.default)(start.opacity, end.opacity);
        return function(t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
        };
    }
    rgb.gamma = rgbGamma;
    return rgb;
}(1);
function $74982658d3c93a85$var$rgbSpline(spline) {
    return function(colors) {
        var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
        for(i = 0; i < n; ++i){
            color = (0, $aQO2N.rgb)(colors[i]);
            r[i] = color.r || 0;
            g[i] = color.g || 0;
            b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
            color.r = r(t);
            color.g = g(t);
            color.b = b(t);
            return color + "";
        };
    };
}
var $74982658d3c93a85$export$2c0e28f2e2852d3f = $74982658d3c93a85$var$rgbSpline((0, $jLQIP.default));
var $74982658d3c93a85$export$53d5214f625ccd4c = $74982658d3c93a85$var$rgbSpline((0, $imd1n.default));

});
parcelRegister("jLQIP", function(module, exports) {

$parcel$export(module.exports, "basis", () => $e64b4d9af01ff550$export$4e41033bfeec1a4c);
$parcel$export(module.exports, "default", () => $e64b4d9af01ff550$export$2e2bcd8739ae039);
function $e64b4d9af01ff550$export$4e41033bfeec1a4c(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function $e64b4d9af01ff550$export$2e2bcd8739ae039(values) {
    var n = values.length - 1;
    return function(t) {
        var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return $e64b4d9af01ff550$export$4e41033bfeec1a4c((t - i / n) * n, v0, v1, v2, v3);
    };
}

});

parcelRegister("imd1n", function(module, exports) {

$parcel$export(module.exports, "default", () => $d5d461d0b4245e40$export$2e2bcd8739ae039);

var $jLQIP = parcelRequire("jLQIP");
function $d5d461d0b4245e40$export$2e2bcd8739ae039(values) {
    var n = values.length;
    return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
        return (0, $jLQIP.basis)((t - i / n) * n, v0, v1, v2, v3);
    };
}

});

parcelRegister("7F7cI", function(module, exports) {

$parcel$export(module.exports, "hue", () => $5941f35453624c13$export$97d7b0c7ddb78dcf);
$parcel$export(module.exports, "gamma", () => $5941f35453624c13$export$a7ebe8cc6aaf8d37);
$parcel$export(module.exports, "default", () => $5941f35453624c13$export$2e2bcd8739ae039);

var $lNnfi = parcelRequire("lNnfi");
function $5941f35453624c13$var$linear(a, d) {
    return function(t) {
        return a + t * d;
    };
}
function $5941f35453624c13$var$exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
    };
}
function $5941f35453624c13$export$97d7b0c7ddb78dcf(a, b) {
    var d = b - a;
    return d ? $5941f35453624c13$var$linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, $lNnfi.default)(isNaN(a) ? b : a);
}
function $5941f35453624c13$export$a7ebe8cc6aaf8d37(y) {
    return (y = +y) === 1 ? $5941f35453624c13$export$2e2bcd8739ae039 : function(a, b) {
        return b - a ? $5941f35453624c13$var$exponential(a, b, y) : (0, $lNnfi.default)(isNaN(a) ? b : a);
    };
}
function $5941f35453624c13$export$2e2bcd8739ae039(a, b) {
    var d = b - a;
    return d ? $5941f35453624c13$var$linear(a, d) : (0, $lNnfi.default)(isNaN(a) ? b : a);
}

});
parcelRegister("lNnfi", function(module, exports) {

$parcel$export(module.exports, "default", () => $fde034b078be5312$export$2e2bcd8739ae039);
var $fde034b078be5312$export$2e2bcd8739ae039 = (x)=>()=>x;

});



parcelRegister("3tkU1", function(module, exports) {

$parcel$export(module.exports, "default", () => $28744b53709667d5$export$2e2bcd8739ae039);
$parcel$export(module.exports, "genericArray", () => $28744b53709667d5$export$15d09067c6a5ee49);

var $ik5Mo = parcelRequire("ik5Mo");

var $2zoS5 = parcelRequire("2zoS5");
function $28744b53709667d5$export$2e2bcd8739ae039(a, b) {
    return ((0, $2zoS5.isNumberArray)(b) ? (0, $2zoS5.default) : $28744b53709667d5$export$15d09067c6a5ee49)(a, b);
}
function $28744b53709667d5$export$15d09067c6a5ee49(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
    for(i = 0; i < na; ++i)x[i] = (0, $ik5Mo.default)(a[i], b[i]);
    for(; i < nb; ++i)c[i] = b[i];
    return function(t) {
        for(i = 0; i < na; ++i)c[i] = x[i](t);
        return c;
    };
}

});
parcelRegister("2zoS5", function(module, exports) {

$parcel$export(module.exports, "default", () => $1df224957fcc00a3$export$2e2bcd8739ae039);
$parcel$export(module.exports, "isNumberArray", () => $1df224957fcc00a3$export$5cd576d1827d40c8);
function $1df224957fcc00a3$export$2e2bcd8739ae039(a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
    return function(t) {
        for(i = 0; i < n; ++i)c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
    };
}
function $1df224957fcc00a3$export$5cd576d1827d40c8(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

});


parcelRegister("8FniO", function(module, exports) {

$parcel$export(module.exports, "default", () => $64f43a738314b9a1$export$2e2bcd8739ae039);
function $64f43a738314b9a1$export$2e2bcd8739ae039(a, b) {
    var d = new Date;
    return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
    };
}

});

parcelRegister("bpZWS", function(module, exports) {

$parcel$export(module.exports, "default", () => $85021533dbeece1d$export$2e2bcd8739ae039);
function $85021533dbeece1d$export$2e2bcd8739ae039(a, b) {
    return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
    };
}

});

parcelRegister("7TNxM", function(module, exports) {

$parcel$export(module.exports, "default", () => $5c0419db977ecc2a$export$2e2bcd8739ae039);

var $ik5Mo = parcelRequire("ik5Mo");
function $5c0419db977ecc2a$export$2e2bcd8739ae039(a, b) {
    var i = {}, c = {}, k;
    if (a === null || typeof a !== "object") a = {};
    if (b === null || typeof b !== "object") b = {};
    for(k in b)if (k in a) i[k] = (0, $ik5Mo.default)(a[k], b[k]);
    else c[k] = b[k];
    return function(t) {
        for(k in i)c[k] = i[k](t);
        return c;
    };
}

});

parcelRegister("hqTnx", function(module, exports) {

$parcel$export(module.exports, "default", () => $cb0fd26a33579514$export$2e2bcd8739ae039);

var $bpZWS = parcelRequire("bpZWS");
var $cb0fd26a33579514$var$reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, $cb0fd26a33579514$var$reB = new RegExp($cb0fd26a33579514$var$reA.source, "g");
function $cb0fd26a33579514$var$zero(b) {
    return function() {
        return b;
    };
}
function $cb0fd26a33579514$var$one(b) {
    return function(t) {
        return b(t) + "";
    };
}
function $cb0fd26a33579514$export$2e2bcd8739ae039(a, b) {
    var bi = $cb0fd26a33579514$var$reA.lastIndex = $cb0fd26a33579514$var$reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = []; // number interpolators
    // Coerce inputs to strings.
    a = a + "", b = b + "";
    // Interpolate pairs of numbers in a & b.
    while((am = $cb0fd26a33579514$var$reA.exec(a)) && (bm = $cb0fd26a33579514$var$reB.exec(b))){
        if ((bs = bm.index) > bi) {
            bs = b.slice(bi, bs);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
            if (s[i]) s[i] += bm; // coalesce with previous string
            else s[++i] = bm;
        } else {
            s[++i] = null;
            q.push({
                i: i,
                x: (0, $bpZWS.default)(am, bm)
            });
        }
        bi = $cb0fd26a33579514$var$reB.lastIndex;
    }
    // Add remains of b.
    if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
    }
    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2 ? q[0] ? $cb0fd26a33579514$var$one(q[0].x) : $cb0fd26a33579514$var$zero(b) : (b = q.length, function(t) {
        for(var i = 0, o; i < b; ++i)s[(o = q[i]).i] = o.x(t);
        return s.join("");
    });
}

});


parcelRegister("462g9", function(module, exports) {

$parcel$export(module.exports, "default", () => $2fb979a578f53224$export$2e2bcd8739ae039);
function $2fb979a578f53224$export$2e2bcd8739ae039(a, b) {
    return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
    };
}

});

parcelRegister("7ylmc", function(module, exports) {

$parcel$export(module.exports, "default", () => $57fc466ceda5b4de$export$2e2bcd8739ae039);

var $ik5Mo = parcelRequire("ik5Mo");
function $57fc466ceda5b4de$export$2e2bcd8739ae039(interpolate, values) {
    if (values === undefined) values = interpolate, interpolate = (0, $ik5Mo.default);
    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
    while(i < n)I[i] = interpolate(v, v = values[++i]);
    return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
    };
}

});

parcelRegister("fPtN1", function(module, exports) {

$parcel$export(module.exports, "identity", () => $b862ba0f5789f2fd$export$f0954fd7d5368655);
$parcel$export(module.exports, "copy", () => $b862ba0f5789f2fd$export$784d13d8ee351f07);
$parcel$export(module.exports, "transformer", () => $b862ba0f5789f2fd$export$6b468dcfb64c653c);
$parcel$export(module.exports, "default", () => $b862ba0f5789f2fd$export$2e2bcd8739ae039);

var $jrbsQ = parcelRequire("jrbsQ");

var $ik5Mo = parcelRequire("ik5Mo");
var $bpZWS = parcelRequire("bpZWS");
var $462g9 = parcelRequire("462g9");

var $avwov = parcelRequire("avwov");

var $buEp8 = parcelRequire("buEp8");
var $b862ba0f5789f2fd$var$unit = [
    0,
    1
];
function $b862ba0f5789f2fd$export$f0954fd7d5368655(x) {
    return x;
}
function $b862ba0f5789f2fd$var$normalize(a, b) {
    return (b -= a = +a) ? function(x) {
        return (x - a) / b;
    } : (0, $avwov.default)(isNaN(b) ? NaN : 0.5);
}
function $b862ba0f5789f2fd$var$clamper(a, b) {
    var t;
    if (a > b) t = a, a = b, b = t;
    return function(x) {
        return Math.max(a, Math.min(b, x));
    };
}
// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function $b862ba0f5789f2fd$var$bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) d0 = $b862ba0f5789f2fd$var$normalize(d1, d0), r0 = interpolate(r1, r0);
    else d0 = $b862ba0f5789f2fd$var$normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x) {
        return r0(d0(x));
    };
}
function $b862ba0f5789f2fd$var$polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
    // Reverse descending domains.
    if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
    }
    while(++i < j){
        d[i] = $b862ba0f5789f2fd$var$normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
    }
    return function(x) {
        var i = (0, $jrbsQ.default)(domain, x, 1, j) - 1;
        return r[i](d[i](x));
    };
}
function $b862ba0f5789f2fd$export$784d13d8ee351f07(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function $b862ba0f5789f2fd$export$6b468dcfb64c653c() {
    var domain = $b862ba0f5789f2fd$var$unit, range = $b862ba0f5789f2fd$var$unit, interpolate = (0, $ik5Mo.default), transform, untransform, unknown, clamp = $b862ba0f5789f2fd$export$f0954fd7d5368655, piecewise, output, input;
    function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== $b862ba0f5789f2fd$export$f0954fd7d5368655) clamp = $b862ba0f5789f2fd$var$clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? $b862ba0f5789f2fd$var$polymap : $b862ba0f5789f2fd$var$bimap;
        output = input = null;
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }
    scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), (0, $bpZWS.default))))(y)));
    };
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, (0, $buEp8.default)), rescale()) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = (0, $462g9.default), rescale();
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : $b862ba0f5789f2fd$export$f0954fd7d5368655, rescale()) : clamp !== $b862ba0f5789f2fd$export$f0954fd7d5368655;
    };
    scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u) {
        transform = t, untransform = u;
        return rescale();
    };
}
function $b862ba0f5789f2fd$export$2e2bcd8739ae039() {
    return $b862ba0f5789f2fd$export$6b468dcfb64c653c()($b862ba0f5789f2fd$export$f0954fd7d5368655, $b862ba0f5789f2fd$export$f0954fd7d5368655);
}

});
parcelRegister("avwov", function(module, exports) {

$parcel$export(module.exports, "default", () => $7a65ed71e61c5c79$export$2e2bcd8739ae039);
function $7a65ed71e61c5c79$export$2e2bcd8739ae039(x) {
    return function() {
        return x;
    };
}

});

parcelRegister("buEp8", function(module, exports) {

$parcel$export(module.exports, "default", () => $85e1d684f9f24605$export$2e2bcd8739ae039);
function $85e1d684f9f24605$export$2e2bcd8739ae039(x) {
    return +x;
}

});


parcelRegister("e2cSk", function(module, exports) {

$parcel$export(module.exports, "initRange", () => $a37b3d5b16a5fa15$export$23c7bb9e6558da2a);
$parcel$export(module.exports, "initInterpolator", () => $a37b3d5b16a5fa15$export$7d6b419e59e83f3d);
function $a37b3d5b16a5fa15$export$23c7bb9e6558da2a(domain, range) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            this.range(domain);
            break;
        default:
            this.range(range).domain(domain);
            break;
    }
    return this;
}
function $a37b3d5b16a5fa15$export$7d6b419e59e83f3d(domain, interpolator) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            if (typeof domain === "function") this.interpolator(domain);
            else this.range(domain);
            break;
        default:
            this.domain(domain);
            if (typeof interpolator === "function") this.interpolator(interpolator);
            else this.range(interpolator);
            break;
    }
    return this;
}

});

parcelRegister("aeB25", function(module, exports) {

$parcel$export(module.exports, "linearish", () => $7737f01535437113$export$16a5d4b4a61a274d);
$parcel$export(module.exports, "default", () => $7737f01535437113$export$2e2bcd8739ae039);

var $5kZgp = parcelRequire("5kZgp");

var $fPtN1 = parcelRequire("fPtN1");

var $e2cSk = parcelRequire("e2cSk");

var $bryj7 = parcelRequire("bryj7");
function $7737f01535437113$export$16a5d4b4a61a274d(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
        var d = domain();
        return (0, $5kZgp.default)(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
        var d = domain();
        return (0, $bryj7.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
        if (count == null) count = 10;
        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;
        if (stop < start) {
            step = start, start = stop, stop = step;
            step = i0, i0 = i1, i1 = step;
        }
        while(maxIter-- > 0){
            step = (0, $5kZgp.tickIncrement)(start, stop, count);
            if (step === prestep) {
                d[i0] = start;
                d[i1] = stop;
                return domain(d);
            } else if (step > 0) {
                start = Math.floor(start / step) * step;
                stop = Math.ceil(stop / step) * step;
            } else if (step < 0) {
                start = Math.ceil(start * step) / step;
                stop = Math.floor(stop * step) / step;
            } else break;
            prestep = step;
        }
        return scale;
    };
    return scale;
}
function $7737f01535437113$export$2e2bcd8739ae039() {
    var scale = (0, $fPtN1.default)();
    scale.copy = function() {
        return (0, $fPtN1.copy)(scale, $7737f01535437113$export$2e2bcd8739ae039());
    };
    (0, $e2cSk.initRange).apply(scale, arguments);
    return $7737f01535437113$export$16a5d4b4a61a274d(scale);
}

});
parcelRegister("bryj7", function(module, exports) {

$parcel$export(module.exports, "default", () => $854cd40f00dc18ae$export$2e2bcd8739ae039);

var $5kZgp = parcelRequire("5kZgp");

var $4Ozsi = parcelRequire("4Ozsi");
var $2LshM = parcelRequire("2LshM");
var $f9Zgf = parcelRequire("f9Zgf");
var $6zcjZ = parcelRequire("6zcjZ");
var $cFc6l = parcelRequire("cFc6l");
function $854cd40f00dc18ae$export$2e2bcd8739ae039(start, stop, count, specifier) {
    var step = (0, $5kZgp.tickStep)(start, stop, count), precision;
    specifier = (0, $2LshM.default)(specifier == null ? ",f" : specifier);
    switch(specifier.type){
        case "s":
            var value = Math.max(Math.abs(start), Math.abs(stop));
            if (specifier.precision == null && !isNaN(precision = (0, $6zcjZ.default)(step, value))) specifier.precision = precision;
            return (0, $4Ozsi.formatPrefix)(specifier, value);
        case "":
        case "e":
        case "g":
        case "p":
        case "r":
            if (specifier.precision == null && !isNaN(precision = (0, $cFc6l.default)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
            break;
        case "f":
        case "%":
            if (specifier.precision == null && !isNaN(precision = (0, $f9Zgf.default)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
            break;
    }
    return (0, $4Ozsi.format)(specifier);
}

});


parcelRegister("b0jU3", function(module, exports) {

$parcel$export(module.exports, "loggish", () => $802f222872653f6f$export$860836db074028f0);
$parcel$export(module.exports, "default", () => $802f222872653f6f$export$2e2bcd8739ae039);

var $5kZgp = parcelRequire("5kZgp");

var $4Ozsi = parcelRequire("4Ozsi");
var $2LshM = parcelRequire("2LshM");

var $01fJE = parcelRequire("01fJE");

var $fPtN1 = parcelRequire("fPtN1");

var $e2cSk = parcelRequire("e2cSk");
function $802f222872653f6f$var$transformLog(x) {
    return Math.log(x);
}
function $802f222872653f6f$var$transformExp(x) {
    return Math.exp(x);
}
function $802f222872653f6f$var$transformLogn(x) {
    return -Math.log(-x);
}
function $802f222872653f6f$var$transformExpn(x) {
    return -Math.exp(-x);
}
function $802f222872653f6f$var$pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function $802f222872653f6f$var$powp(base) {
    return base === 10 ? $802f222872653f6f$var$pow10 : base === Math.E ? Math.exp : (x)=>Math.pow(base, x);
}
function $802f222872653f6f$var$logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x)=>Math.log(x) / base);
}
function $802f222872653f6f$var$reflect(f) {
    return (x, k)=>-f(-x, k);
}
function $802f222872653f6f$export$860836db074028f0(transform) {
    const scale = transform($802f222872653f6f$var$transformLog, $802f222872653f6f$var$transformExp);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
        logs = $802f222872653f6f$var$logp(base), pows = $802f222872653f6f$var$powp(base);
        if (domain()[0] < 0) {
            logs = $802f222872653f6f$var$reflect(logs), pows = $802f222872653f6f$var$reflect(pows);
            transform($802f222872653f6f$var$transformLogn, $802f222872653f6f$var$transformExpn);
        } else transform($802f222872653f6f$var$transformLog, $802f222872653f6f$var$transformExp);
        return scale;
    }
    scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count)=>{
        const d = domain();
        let u = d[0];
        let v = d[d.length - 1];
        const r = v < u;
        if (r) [u, v] = [
            v,
            u
        ];
        let i = logs(u);
        let j = logs(v);
        let k;
        let t;
        const n = count == null ? 10 : +count;
        let z = [];
        if (!(base % 1) && j - i < n) {
            i = Math.floor(i), j = Math.ceil(j);
            if (u > 0) for(; i <= j; ++i)for(k = 1; k < base; ++k){
                t = i < 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            else for(; i <= j; ++i)for(k = base - 1; k >= 1; --k){
                t = i > 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            if (z.length * 2 < n) z = (0, $5kZgp.default)(u, v, n);
        } else z = (0, $5kZgp.default)(i, j, Math.min(j - i, n)).map(pows);
        return r ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier)=>{
        if (count == null) count = 10;
        if (specifier == null) specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
            if (!(base % 1) && (specifier = (0, $2LshM.default)(specifier)).precision == null) specifier.trim = true;
            specifier = (0, $4Ozsi.format)(specifier);
        }
        if (count === Infinity) return specifier;
        const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return (d)=>{
            let i = d / pows(Math.round(logs(d)));
            if (i * base < base - 0.5) i *= base;
            return i <= k ? specifier(d) : "";
        };
    };
    scale.nice = ()=>{
        return domain((0, $01fJE.default)(domain(), {
            floor: (x)=>pows(Math.floor(logs(x))),
            ceil: (x)=>pows(Math.ceil(logs(x)))
        }));
    };
    return scale;
}
function $802f222872653f6f$export$2e2bcd8739ae039() {
    const scale = $802f222872653f6f$export$860836db074028f0((0, $fPtN1.transformer)()).domain([
        1,
        10
    ]);
    scale.copy = ()=>(0, $fPtN1.copy)(scale, $802f222872653f6f$export$2e2bcd8739ae039()).base(scale.base());
    (0, $e2cSk.initRange).apply(scale, arguments);
    return scale;
}

});
parcelRegister("01fJE", function(module, exports) {

$parcel$export(module.exports, "default", () => $003c4cd3145627c2$export$2e2bcd8739ae039);
function $003c4cd3145627c2$export$2e2bcd8739ae039(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
}

});


parcelRegister("hrvsT", function(module, exports) {

$parcel$export(module.exports, "copy", () => $cb2d5d9ae15b8b1d$export$784d13d8ee351f07);
$parcel$export(module.exports, "default", () => $cb2d5d9ae15b8b1d$export$2e2bcd8739ae039);
$parcel$export(module.exports, "sequentialLog", () => $cb2d5d9ae15b8b1d$export$6843e08bf2ff981f);
$parcel$export(module.exports, "sequentialSymlog", () => $cb2d5d9ae15b8b1d$export$9d4af4de62c81941);
$parcel$export(module.exports, "sequentialPow", () => $cb2d5d9ae15b8b1d$export$de9f78581b4f2405);
$parcel$export(module.exports, "sequentialSqrt", () => $cb2d5d9ae15b8b1d$export$413d935127ed466e);

var $ik5Mo = parcelRequire("ik5Mo");
var $462g9 = parcelRequire("462g9");

var $fPtN1 = parcelRequire("fPtN1");

var $e2cSk = parcelRequire("e2cSk");

var $aeB25 = parcelRequire("aeB25");

var $b0jU3 = parcelRequire("b0jU3");

var $7LDA6 = parcelRequire("7LDA6");

var $3QMa3 = parcelRequire("3QMa3");
function $cb2d5d9ae15b8b1d$var$transformer() {
    var x0 = 0, x1 = 1, t0, t1, k10, transform, interpolator = (0, $fPtN1.identity), clamp = false, unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [
            x0,
            x1
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1;
            return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [
                interpolator(0),
                interpolator(1)
            ];
        };
    }
    scale.range = range((0, $ik5Mo.default));
    scale.rangeRound = range((0, $462g9.default));
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
    };
}
function $cb2d5d9ae15b8b1d$export$784d13d8ee351f07(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function $cb2d5d9ae15b8b1d$export$2e2bcd8739ae039() {
    var scale = (0, $aeB25.linearish)($cb2d5d9ae15b8b1d$var$transformer()((0, $fPtN1.identity)));
    scale.copy = function() {
        return $cb2d5d9ae15b8b1d$export$784d13d8ee351f07(scale, $cb2d5d9ae15b8b1d$export$2e2bcd8739ae039());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $cb2d5d9ae15b8b1d$export$6843e08bf2ff981f() {
    var scale = (0, $b0jU3.loggish)($cb2d5d9ae15b8b1d$var$transformer()).domain([
        1,
        10
    ]);
    scale.copy = function() {
        return $cb2d5d9ae15b8b1d$export$784d13d8ee351f07(scale, $cb2d5d9ae15b8b1d$export$6843e08bf2ff981f()).base(scale.base());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $cb2d5d9ae15b8b1d$export$9d4af4de62c81941() {
    var scale = (0, $7LDA6.symlogish)($cb2d5d9ae15b8b1d$var$transformer());
    scale.copy = function() {
        return $cb2d5d9ae15b8b1d$export$784d13d8ee351f07(scale, $cb2d5d9ae15b8b1d$export$9d4af4de62c81941()).constant(scale.constant());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $cb2d5d9ae15b8b1d$export$de9f78581b4f2405() {
    var scale = (0, $3QMa3.powish)($cb2d5d9ae15b8b1d$var$transformer());
    scale.copy = function() {
        return $cb2d5d9ae15b8b1d$export$784d13d8ee351f07(scale, $cb2d5d9ae15b8b1d$export$de9f78581b4f2405()).exponent(scale.exponent());
    };
    return (0, $e2cSk.initInterpolator).apply(scale, arguments);
}
function $cb2d5d9ae15b8b1d$export$413d935127ed466e() {
    return $cb2d5d9ae15b8b1d$export$de9f78581b4f2405.apply(null, arguments).exponent(0.5);
}

});
parcelRegister("7LDA6", function(module, exports) {

$parcel$export(module.exports, "symlogish", () => $5a7ba02fcd8d9a5b$export$4602684e614eba38);
$parcel$export(module.exports, "default", () => $5a7ba02fcd8d9a5b$export$2e2bcd8739ae039);

var $aeB25 = parcelRequire("aeB25");

var $fPtN1 = parcelRequire("fPtN1");

var $e2cSk = parcelRequire("e2cSk");
function $5a7ba02fcd8d9a5b$var$transformSymlog(c) {
    return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
}
function $5a7ba02fcd8d9a5b$var$transformSymexp(c) {
    return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
}
function $5a7ba02fcd8d9a5b$export$4602684e614eba38(transform) {
    var c = 1, scale = transform($5a7ba02fcd8d9a5b$var$transformSymlog(c), $5a7ba02fcd8d9a5b$var$transformSymexp(c));
    scale.constant = function(_) {
        return arguments.length ? transform($5a7ba02fcd8d9a5b$var$transformSymlog(c = +_), $5a7ba02fcd8d9a5b$var$transformSymexp(c)) : c;
    };
    return (0, $aeB25.linearish)(scale);
}
function $5a7ba02fcd8d9a5b$export$2e2bcd8739ae039() {
    var scale = $5a7ba02fcd8d9a5b$export$4602684e614eba38((0, $fPtN1.transformer)());
    scale.copy = function() {
        return (0, $fPtN1.copy)(scale, $5a7ba02fcd8d9a5b$export$2e2bcd8739ae039()).constant(scale.constant());
    };
    return (0, $e2cSk.initRange).apply(scale, arguments);
}

});

parcelRegister("3QMa3", function(module, exports) {

$parcel$export(module.exports, "powish", () => $2cdb963a605e19b4$export$34695211ec403a46);
$parcel$export(module.exports, "default", () => $2cdb963a605e19b4$export$2e2bcd8739ae039);
$parcel$export(module.exports, "sqrt", () => $2cdb963a605e19b4$export$eba8049fb5020b81);

var $aeB25 = parcelRequire("aeB25");

var $fPtN1 = parcelRequire("fPtN1");

var $e2cSk = parcelRequire("e2cSk");
function $2cdb963a605e19b4$var$transformPow(exponent) {
    return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
}
function $2cdb963a605e19b4$var$transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}
function $2cdb963a605e19b4$var$transformSquare(x) {
    return x < 0 ? -x * x : x * x;
}
function $2cdb963a605e19b4$export$34695211ec403a46(transform) {
    var scale = transform((0, $fPtN1.identity), (0, $fPtN1.identity)), exponent = 1;
    function rescale() {
        return exponent === 1 ? transform((0, $fPtN1.identity), (0, $fPtN1.identity)) : exponent === 0.5 ? transform($2cdb963a605e19b4$var$transformSqrt, $2cdb963a605e19b4$var$transformSquare) : transform($2cdb963a605e19b4$var$transformPow(exponent), $2cdb963a605e19b4$var$transformPow(1 / exponent));
    }
    scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return (0, $aeB25.linearish)(scale);
}
function $2cdb963a605e19b4$export$2e2bcd8739ae039() {
    var scale = $2cdb963a605e19b4$export$34695211ec403a46((0, $fPtN1.transformer)());
    scale.copy = function() {
        return (0, $fPtN1.copy)(scale, $2cdb963a605e19b4$export$2e2bcd8739ae039()).exponent(scale.exponent());
    };
    (0, $e2cSk.initRange).apply(scale, arguments);
    return scale;
}
function $2cdb963a605e19b4$export$eba8049fb5020b81() {
    return $2cdb963a605e19b4$export$2e2bcd8739ae039.apply(null, arguments).exponent(0.5);
}

});



parcelRegister("fvJBN", function(module, exports) {

$parcel$export(module.exports, "default", () => $b4ad213480894bf4$export$2e2bcd8739ae039);

var $aeB25 = parcelRequire("aeB25");

var $buEp8 = parcelRequire("buEp8");
function $b4ad213480894bf4$export$2e2bcd8739ae039(domain) {
    var unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : x;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, (0, $buEp8.default)), scale) : domain.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return $b4ad213480894bf4$export$2e2bcd8739ae039(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, (0, $buEp8.default)) : [
        0,
        1
    ];
    return (0, $aeB25.linearish)(scale);
}

});

parcelRegister("leiRV", function(module, exports) {

$parcel$export(module.exports, "implicit", () => $f7498abd5c3fb496$export$e4f898ab14d9d460);
$parcel$export(module.exports, "default", () => $f7498abd5c3fb496$export$2e2bcd8739ae039);

var $5eARR = parcelRequire("5eARR");

var $e2cSk = parcelRequire("e2cSk");
const $f7498abd5c3fb496$export$e4f898ab14d9d460 = Symbol("implicit");
function $f7498abd5c3fb496$export$2e2bcd8739ae039() {
    var index = new (0, $5eARR.InternMap)(), domain = [], range = [], unknown = $f7498abd5c3fb496$export$e4f898ab14d9d460;
    function scale(d) {
        let i = index.get(d);
        if (i === undefined) {
            if (unknown !== $f7498abd5c3fb496$export$e4f898ab14d9d460) return unknown;
            index.set(d, i = domain.push(d) - 1);
        }
        return range[i % range.length];
    }
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new (0, $5eARR.InternMap)();
        for (const value of _){
            if (index.has(value)) continue;
            index.set(value, domain.push(value) - 1);
        }
        return scale;
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return $f7498abd5c3fb496$export$2e2bcd8739ae039(domain, range).unknown(unknown);
    };
    (0, $e2cSk.initRange).apply(scale, arguments);
    return scale;
}

});
parcelRegister("5eARR", function(module, exports) {

$parcel$export(module.exports, "InternMap", () => $3cfadbbd8e6ce666$export$dcc6fb7d82b5bc7b);
$parcel$export(module.exports, "InternSet", () => $3cfadbbd8e6ce666$export$55278c3294239828);
class $3cfadbbd8e6ce666$export$dcc6fb7d82b5bc7b extends Map {
    constructor(entries, key = $3cfadbbd8e6ce666$var$keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (entries != null) for (const [key, value] of entries)this.set(key, value);
    }
    get(key) {
        return super.get($3cfadbbd8e6ce666$var$intern_get(this, key));
    }
    has(key) {
        return super.has($3cfadbbd8e6ce666$var$intern_get(this, key));
    }
    set(key, value) {
        return super.set($3cfadbbd8e6ce666$var$intern_set(this, key), value);
    }
    delete(key) {
        return super.delete($3cfadbbd8e6ce666$var$intern_delete(this, key));
    }
}
class $3cfadbbd8e6ce666$export$55278c3294239828 extends Set {
    constructor(values, key = $3cfadbbd8e6ce666$var$keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (values != null) for (const value of values)this.add(value);
    }
    has(value) {
        return super.has($3cfadbbd8e6ce666$var$intern_get(this, value));
    }
    add(value) {
        return super.add($3cfadbbd8e6ce666$var$intern_set(this, value));
    }
    delete(value) {
        return super.delete($3cfadbbd8e6ce666$var$intern_delete(this, value));
    }
}
function $3cfadbbd8e6ce666$var$intern_get({ _intern: _intern, _key: _key }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
}
function $3cfadbbd8e6ce666$var$intern_set({ _intern: _intern, _key: _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
}
function $3cfadbbd8e6ce666$var$intern_delete({ _intern: _intern, _key: _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
    }
    return value;
}
function $3cfadbbd8e6ce666$var$keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}

});


parcelRegister("16yNP", function(module, exports) {

$parcel$export(module.exports, "default", () => $0ce1591823e0f37c$export$2e2bcd8739ae039);

var $fAbgM = parcelRequire("fAbgM");
var $jrbsQ = parcelRequire("jrbsQ");
var $5aVPC = parcelRequire("5aVPC");

var $e2cSk = parcelRequire("e2cSk");
function $0ce1591823e0f37c$export$2e2bcd8739ae039() {
    var domain = [], range = [], thresholds = [], unknown;
    function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while(++i < n)thresholds[i - 1] = (0, $5aVPC.quantileSorted)(domain, i / n);
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : range[(0, $jrbsQ.default)(thresholds, x)];
    }
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : [
            i > 0 ? thresholds[i - 1] : domain[0],
            i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
    };
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _)if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort((0, $fAbgM.default));
        return rescale();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
        return thresholds.slice();
    };
    scale.copy = function() {
        return $0ce1591823e0f37c$export$2e2bcd8739ae039().domain(domain).range(range).unknown(unknown);
    };
    return (0, $e2cSk.initRange).apply(scale, arguments);
}

});

parcelRegister("5pZlW", function(module, exports) {

$parcel$export(module.exports, "default", () => $3f1ee0efb4357b8c$export$2e2bcd8739ae039);

var $jrbsQ = parcelRequire("jrbsQ");

var $aeB25 = parcelRequire("aeB25");

var $e2cSk = parcelRequire("e2cSk");
function $3f1ee0efb4357b8c$export$2e2bcd8739ae039() {
    var x0 = 0, x1 = 1, n = 1, domain = [
        0.5
    ], range = [
        0,
        1
    ], unknown;
    function scale(x) {
        return x != null && x <= x ? range[(0, $jrbsQ.default)(domain, x, 0, n)] : unknown;
    }
    function rescale() {
        var i = -1;
        domain = new Array(n);
        while(++i < n)domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [
            x0,
            x1
        ];
    };
    scale.range = function(_) {
        return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
    };
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : i < 1 ? [
            x0,
            domain[0]
        ] : i >= n ? [
            domain[n - 1],
            x1
        ] : [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
    };
    scale.thresholds = function() {
        return domain.slice();
    };
    scale.copy = function() {
        return $3f1ee0efb4357b8c$export$2e2bcd8739ae039().domain([
            x0,
            x1
        ]).range(range).unknown(unknown);
    };
    return (0, $e2cSk.initRange).apply((0, $aeB25.linearish)(scale), arguments);
}

});

parcelRegister("l4uu6", function(module, exports) {

$parcel$export(module.exports, "default", () => $f5719e44004e75c9$export$2e2bcd8739ae039);

var $jrbsQ = parcelRequire("jrbsQ");

var $e2cSk = parcelRequire("e2cSk");
function $f5719e44004e75c9$export$2e2bcd8739ae039() {
    var domain = [
        0.5
    ], range = [
        0,
        1
    ], unknown, n = 1;
    function scale(x) {
        return x != null && x <= x ? range[(0, $jrbsQ.default)(domain, x, 0, n)] : unknown;
    }
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return $f5719e44004e75c9$export$2e2bcd8739ae039().domain(domain).range(range).unknown(unknown);
    };
    return (0, $e2cSk.initRange).apply(scale, arguments);
}

});

parcelRegister("3ISOG", function(module, exports) {

$parcel$export(module.exports, "calendar", () => $2b60008fd7853d26$export$56bbcdb8aca31149);
$parcel$export(module.exports, "default", () => $2b60008fd7853d26$export$2e2bcd8739ae039);

var $fFQQk = parcelRequire("fFQQk");
var $9CdPb = parcelRequire("9CdPb");
var $4uq9w = parcelRequire("4uq9w");
var $egcOq = parcelRequire("egcOq");
var $8BRD5 = parcelRequire("8BRD5");
var $72TYE = parcelRequire("72TYE");
var $deUco = parcelRequire("deUco");
var $4gydF = parcelRequire("4gydF");

var $eCxzE = parcelRequire("eCxzE");

var $fPtN1 = parcelRequire("fPtN1");

var $e2cSk = parcelRequire("e2cSk");

var $01fJE = parcelRequire("01fJE");
function $2b60008fd7853d26$var$date(t) {
    return new Date(t);
}
function $2b60008fd7853d26$var$number(t) {
    return t instanceof Date ? +t : +new Date(+t);
}
function $2b60008fd7853d26$export$56bbcdb8aca31149(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
    var scale = (0, $fPtN1.default)(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format(".%L"), formatSecond = format(":%S"), formatMinute = format("%I:%M"), formatHour = format("%I %p"), formatDay = format("%a %d"), formatWeek = format("%b %d"), formatMonth = format("%B"), formatYear = format("%Y");
    function tickFormat(date) {
        return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
    }
    scale.invert = function(y) {
        return new Date(invert(y));
    };
    scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, $2b60008fd7853d26$var$number)) : domain().map($2b60008fd7853d26$var$date);
    };
    scale.ticks = function(interval) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
    };
    scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain((0, $01fJE.default)(d, interval)) : scale;
    };
    scale.copy = function() {
        return (0, $fPtN1.copy)(scale, $2b60008fd7853d26$export$56bbcdb8aca31149(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
    };
    return scale;
}
function $2b60008fd7853d26$export$2e2bcd8739ae039() {
    return (0, $e2cSk.initRange).apply($2b60008fd7853d26$export$56bbcdb8aca31149((0, $72TYE.timeTicks), (0, $72TYE.timeTickInterval), (0, $4gydF.timeYear), (0, $egcOq.timeMonth), (0, $deUco.timeSunday), (0, $fFQQk.timeDay), (0, $9CdPb.timeHour), (0, $4uq9w.timeMinute), (0, $8BRD5.second), (0, $eCxzE.timeFormat)).domain([
        new Date(2000, 0, 1),
        new Date(2000, 0, 2)
    ]), arguments);
}

});

parcelRegister("hskQF", function(module, exports) {

$parcel$export(module.exports, "default", () => $cb553943cec7305e$export$2e2bcd8739ae039);

var $fFQQk = parcelRequire("fFQQk");
var $9CdPb = parcelRequire("9CdPb");
var $4uq9w = parcelRequire("4uq9w");
var $egcOq = parcelRequire("egcOq");
var $8BRD5 = parcelRequire("8BRD5");
var $72TYE = parcelRequire("72TYE");
var $deUco = parcelRequire("deUco");
var $4gydF = parcelRequire("4gydF");

var $eCxzE = parcelRequire("eCxzE");

var $3ISOG = parcelRequire("3ISOG");

var $e2cSk = parcelRequire("e2cSk");
function $cb553943cec7305e$export$2e2bcd8739ae039() {
    return (0, $e2cSk.initRange).apply((0, $3ISOG.calendar)((0, $72TYE.utcTicks), (0, $72TYE.utcTickInterval), (0, $4gydF.utcYear), (0, $egcOq.utcMonth), (0, $deUco.utcSunday), (0, $fFQQk.utcDay), (0, $9CdPb.utcHour), (0, $4uq9w.utcMinute), (0, $8BRD5.second), (0, $eCxzE.utcFormat)).domain([
        Date.UTC(2000, 0, 1),
        Date.UTC(2000, 0, 2)
    ]), arguments);
}

});

parcelRegister("foboV", function(module, exports) {

$parcel$export(module.exports, "interpolate", () => (parcelRequire("ik5Mo")).default);
$parcel$export(module.exports, "interpolateArray", () => (parcelRequire("3tkU1")).default);
$parcel$export(module.exports, "interpolateBasis", () => (parcelRequire("jLQIP")).default);
$parcel$export(module.exports, "interpolateBasisClosed", () => (parcelRequire("imd1n")).default);
$parcel$export(module.exports, "interpolateDate", () => (parcelRequire("8FniO")).default);
$parcel$export(module.exports, "interpolateDiscrete", () => (parcelRequire("btg9b")).default);
$parcel$export(module.exports, "interpolateHue", () => (parcelRequire("dv3oM")).default);
$parcel$export(module.exports, "interpolateNumber", () => (parcelRequire("bpZWS")).default);
$parcel$export(module.exports, "interpolateNumberArray", () => (parcelRequire("2zoS5")).default);
$parcel$export(module.exports, "interpolateObject", () => (parcelRequire("7TNxM")).default);
$parcel$export(module.exports, "interpolateRound", () => (parcelRequire("462g9")).default);
$parcel$export(module.exports, "interpolateString", () => (parcelRequire("hqTnx")).default);
$parcel$export(module.exports, "interpolateTransformCss", () => (parcelRequire("cKQrz")).interpolateTransformCss);
$parcel$export(module.exports, "interpolateTransformSvg", () => (parcelRequire("cKQrz")).interpolateTransformSvg);
$parcel$export(module.exports, "interpolateZoom", () => (parcelRequire("hrqpd")).default);
$parcel$export(module.exports, "interpolateRgb", () => (parcelRequire("a0CZw")).default);
$parcel$export(module.exports, "interpolateRgbBasis", () => (parcelRequire("a0CZw")).rgbBasis);
$parcel$export(module.exports, "interpolateRgbBasisClosed", () => (parcelRequire("a0CZw")).rgbBasisClosed);
$parcel$export(module.exports, "interpolateHsl", () => (parcelRequire("aAr0F")).default);
$parcel$export(module.exports, "interpolateHslLong", () => (parcelRequire("aAr0F")).hslLong);
$parcel$export(module.exports, "interpolateLab", () => (parcelRequire("cJdXE")).default);
$parcel$export(module.exports, "interpolateHcl", () => (parcelRequire("knmth")).default);
$parcel$export(module.exports, "interpolateHclLong", () => (parcelRequire("knmth")).hclLong);
$parcel$export(module.exports, "interpolateCubehelix", () => (parcelRequire("jTjnQ")).default);
$parcel$export(module.exports, "interpolateCubehelixLong", () => (parcelRequire("jTjnQ")).cubehelixLong);
$parcel$export(module.exports, "piecewise", () => (parcelRequire("7ylmc")).default);
$parcel$export(module.exports, "quantize", () => (parcelRequire("3CWvo")).default);

var $ik5Mo = parcelRequire("ik5Mo");

var $3tkU1 = parcelRequire("3tkU1");

var $jLQIP = parcelRequire("jLQIP");

var $imd1n = parcelRequire("imd1n");

var $8FniO = parcelRequire("8FniO");

var $btg9b = parcelRequire("btg9b");

var $dv3oM = parcelRequire("dv3oM");

var $bpZWS = parcelRequire("bpZWS");

var $2zoS5 = parcelRequire("2zoS5");

var $7TNxM = parcelRequire("7TNxM");

var $462g9 = parcelRequire("462g9");

var $hqTnx = parcelRequire("hqTnx");

var $cKQrz = parcelRequire("cKQrz");

var $hrqpd = parcelRequire("hrqpd");

var $a0CZw = parcelRequire("a0CZw");

var $aAr0F = parcelRequire("aAr0F");

var $cJdXE = parcelRequire("cJdXE");

var $knmth = parcelRequire("knmth");

var $jTjnQ = parcelRequire("jTjnQ");

var $7ylmc = parcelRequire("7ylmc");

var $3CWvo = parcelRequire("3CWvo");

});
parcelRegister("btg9b", function(module, exports) {

$parcel$export(module.exports, "default", () => $859eed99485b6490$export$2e2bcd8739ae039);
function $859eed99485b6490$export$2e2bcd8739ae039(range) {
    var n = range.length;
    return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
}

});

parcelRegister("dv3oM", function(module, exports) {

$parcel$export(module.exports, "default", () => $9d40ce82e83fb216$export$2e2bcd8739ae039);

var $7F7cI = parcelRequire("7F7cI");
function $9d40ce82e83fb216$export$2e2bcd8739ae039(a, b) {
    var i = (0, $7F7cI.hue)(+a, +b);
    return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
    };
}

});

parcelRegister("cKQrz", function(module, exports) {

$parcel$export(module.exports, "interpolateTransformCss", () => $949276201ec38acd$export$56bec7123bb3589a);
$parcel$export(module.exports, "interpolateTransformSvg", () => $949276201ec38acd$export$da8cba906d64c082);

var $bpZWS = parcelRequire("bpZWS");

var $kq10y = parcelRequire("kq10y");
function $949276201ec38acd$var$interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
        return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push("translate(", null, pxComma, null, pxParen);
            q.push({
                i: i - 4,
                x: (0, $bpZWS.default)(xa, xb)
            }, {
                i: i - 2,
                x: (0, $bpZWS.default)(ya, yb)
            });
        } else if (xb || yb) s.push("translate(" + xb + pxComma + yb + pxParen);
    }
    function rotate(a, b, s, q) {
        if (a !== b) {
            if (a - b > 180) b += 360;
            else if (b - a > 180) a += 360; // shortest path
            q.push({
                i: s.push(pop(s) + "rotate(", null, degParen) - 2,
                x: (0, $bpZWS.default)(a, b)
            });
        } else if (b) s.push(pop(s) + "rotate(" + b + degParen);
    }
    function skewX(a, b, s, q) {
        if (a !== b) q.push({
            i: s.push(pop(s) + "skewX(", null, degParen) - 2,
            x: (0, $bpZWS.default)(a, b)
        });
        else if (b) s.push(pop(s) + "skewX(" + b + degParen);
    }
    function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push(pop(s) + "scale(", null, ",", null, ")");
            q.push({
                i: i - 4,
                x: (0, $bpZWS.default)(xa, xb)
            }, {
                i: i - 2,
                x: (0, $bpZWS.default)(ya, yb)
            });
        } else if (xb !== 1 || yb !== 1) s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
    return function(a, b) {
        var s = [], q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
            var i = -1, n = q.length, o;
            while(++i < n)s[(o = q[i]).i] = o.x(t);
            return s.join("");
        };
    };
}
var $949276201ec38acd$export$56bec7123bb3589a = $949276201ec38acd$var$interpolateTransform((0, $kq10y.parseCss), "px, ", "px)", "deg)");
var $949276201ec38acd$export$da8cba906d64c082 = $949276201ec38acd$var$interpolateTransform((0, $kq10y.parseSvg), ", ", ")", ")");

});
parcelRegister("kq10y", function(module, exports) {

$parcel$export(module.exports, "parseCss", () => $edd70485bc33b583$export$59ad369bf4938177);
$parcel$export(module.exports, "parseSvg", () => $edd70485bc33b583$export$f9ef43f9a1d89a18);

var $ejrv7 = parcelRequire("ejrv7");
var $edd70485bc33b583$var$svgNode;
function $edd70485bc33b583$export$59ad369bf4938177(value) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? (0, $ejrv7.identity) : (0, $ejrv7.default)(m.a, m.b, m.c, m.d, m.e, m.f);
}
function $edd70485bc33b583$export$f9ef43f9a1d89a18(value) {
    if (value == null) return 0, $ejrv7.identity;
    if (!$edd70485bc33b583$var$svgNode) $edd70485bc33b583$var$svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    $edd70485bc33b583$var$svgNode.setAttribute("transform", value);
    if (!(value = $edd70485bc33b583$var$svgNode.transform.baseVal.consolidate())) return 0, $ejrv7.identity;
    value = value.matrix;
    return (0, $ejrv7.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}

});
parcelRegister("ejrv7", function(module, exports) {

$parcel$export(module.exports, "identity", () => $a6b82c282d09e3be$export$f0954fd7d5368655);
$parcel$export(module.exports, "default", () => $a6b82c282d09e3be$export$2e2bcd8739ae039);
var $a6b82c282d09e3be$var$degrees = 180 / Math.PI;
var $a6b82c282d09e3be$export$f0954fd7d5368655 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
};
function $a6b82c282d09e3be$export$2e2bcd8739ae039(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * $a6b82c282d09e3be$var$degrees,
        skewX: Math.atan(skewX) * $a6b82c282d09e3be$var$degrees,
        scaleX: scaleX,
        scaleY: scaleY
    };
}

});



parcelRegister("hrqpd", function(module, exports) {

$parcel$export(module.exports, "default", () => $cb2970ece3f07853$export$2e2bcd8739ae039);
var $cb2970ece3f07853$var$epsilon2 = 1e-12;
function $cb2970ece3f07853$var$cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
}
function $cb2970ece3f07853$var$sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
}
function $cb2970ece3f07853$var$tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
var $cb2970ece3f07853$export$2e2bcd8739ae039 = function zoomRho(rho, rho2, rho4) {
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        // Special case for u0 ≅ u1.
        if (d2 < $cb2970ece3f07853$var$epsilon2) {
            S = Math.log(w1 / w0) / rho;
            i = function(t) {
                return [
                    ux0 + t * dx,
                    uy0 + t * dy,
                    w0 * Math.exp(rho * t * S)
                ];
            };
        } else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function(t) {
                var s = t * S, coshr0 = $cb2970ece3f07853$var$cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * $cb2970ece3f07853$var$tanh(rho * s + r0) - $cb2970ece3f07853$var$sinh(r0));
                return [
                    ux0 + u * dx,
                    uy0 + u * dy,
                    w0 * coshr0 / $cb2970ece3f07853$var$cosh(rho * s + r0)
                ];
            };
        }
        i.duration = S * 1000 * rho / Math.SQRT2;
        return i;
    }
    zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
    };
    return zoom;
}(Math.SQRT2, 2, 4);

});

parcelRegister("aAr0F", function(module, exports) {

$parcel$export(module.exports, "default", () => $7b5237bcd5189a45$export$2e2bcd8739ae039);
$parcel$export(module.exports, "hslLong", () => $7b5237bcd5189a45$export$a2c535e270a59256);

var $aQO2N = parcelRequire("aQO2N");

var $7F7cI = parcelRequire("7F7cI");
function $7b5237bcd5189a45$var$hsl(hue) {
    return function(start, end) {
        var h = hue((start = (0, $aQO2N.hsl)(start)).h, (end = (0, $aQO2N.hsl)(end)).h), s = (0, $7F7cI.default)(start.s, end.s), l = (0, $7F7cI.default)(start.l, end.l), opacity = (0, $7F7cI.default)(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
var $7b5237bcd5189a45$export$2e2bcd8739ae039 = $7b5237bcd5189a45$var$hsl((0, $7F7cI.hue));
var $7b5237bcd5189a45$export$a2c535e270a59256 = $7b5237bcd5189a45$var$hsl((0, $7F7cI.default));

});

parcelRegister("cJdXE", function(module, exports) {

$parcel$export(module.exports, "default", () => $944484685be4fc8d$export$2e2bcd8739ae039);

var $bkMew = parcelRequire("bkMew");

var $7F7cI = parcelRequire("7F7cI");
function $944484685be4fc8d$export$2e2bcd8739ae039(start, end) {
    var l = (0, $7F7cI.default)((start = (0, $bkMew.default)(start)).l, (end = (0, $bkMew.default)(end)).l), a = (0, $7F7cI.default)(start.a, end.a), b = (0, $7F7cI.default)(start.b, end.b), opacity = (0, $7F7cI.default)(start.opacity, end.opacity);
    return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
    };
}

});
parcelRegister("bkMew", function(module, exports) {

$parcel$export(module.exports, "default", () => $8406fa0e92968365$export$2e2bcd8739ae039);
$parcel$export(module.exports, "hcl", () => $8406fa0e92968365$export$d0e870ba50062ff1);

var $1JVRF = parcelRequire("1JVRF");

var $aQO2N = parcelRequire("aQO2N");

var $ahw6G = parcelRequire("ahw6G");
// https://observablehq.com/@mbostock/lab-and-rgb
const $8406fa0e92968365$var$K = 18, $8406fa0e92968365$var$Xn = 0.96422, $8406fa0e92968365$var$Yn = 1, $8406fa0e92968365$var$Zn = 0.82521, $8406fa0e92968365$var$t0 = 4 / 29, $8406fa0e92968365$var$t1 = 6 / 29, $8406fa0e92968365$var$t2 = 3 * $8406fa0e92968365$var$t1 * $8406fa0e92968365$var$t1, $8406fa0e92968365$var$t3 = $8406fa0e92968365$var$t1 * $8406fa0e92968365$var$t1 * $8406fa0e92968365$var$t1;
function $8406fa0e92968365$var$labConvert(o) {
    if (o instanceof $8406fa0e92968365$export$f2722c70a60257f7) return new $8406fa0e92968365$export$f2722c70a60257f7(o.l, o.a, o.b, o.opacity);
    if (o instanceof $8406fa0e92968365$export$d9397e094a5fbb9a) return $8406fa0e92968365$var$hcl2lab(o);
    if (!(o instanceof (0, $aQO2N.Rgb))) o = (0, $aQO2N.rgbConvert)(o);
    var r = $8406fa0e92968365$var$rgb2lrgb(o.r), g = $8406fa0e92968365$var$rgb2lrgb(o.g), b = $8406fa0e92968365$var$rgb2lrgb(o.b), y = $8406fa0e92968365$var$xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / $8406fa0e92968365$var$Yn), x, z;
    if (r === g && g === b) x = z = y;
    else {
        x = $8406fa0e92968365$var$xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / $8406fa0e92968365$var$Xn);
        z = $8406fa0e92968365$var$xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / $8406fa0e92968365$var$Zn);
    }
    return new $8406fa0e92968365$export$f2722c70a60257f7(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function $8406fa0e92968365$export$3e2c219d3ab79d01(l, opacity) {
    return new $8406fa0e92968365$export$f2722c70a60257f7(l, 0, 0, opacity == null ? 1 : opacity);
}
function $8406fa0e92968365$export$2e2bcd8739ae039(l, a, b, opacity) {
    return arguments.length === 1 ? $8406fa0e92968365$var$labConvert(l) : new $8406fa0e92968365$export$f2722c70a60257f7(l, a, b, opacity == null ? 1 : opacity);
}
function $8406fa0e92968365$export$f2722c70a60257f7(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
}
(0, $1JVRF.default)($8406fa0e92968365$export$f2722c70a60257f7, $8406fa0e92968365$export$2e2bcd8739ae039, (0, $1JVRF.extend)((0, $aQO2N.Color), {
    brighter (k) {
        return new $8406fa0e92968365$export$f2722c70a60257f7(this.l + $8406fa0e92968365$var$K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker (k) {
        return new $8406fa0e92968365$export$f2722c70a60257f7(this.l - $8406fa0e92968365$var$K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb () {
        var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
        x = $8406fa0e92968365$var$Xn * $8406fa0e92968365$var$lab2xyz(x);
        y = $8406fa0e92968365$var$Yn * $8406fa0e92968365$var$lab2xyz(y);
        z = $8406fa0e92968365$var$Zn * $8406fa0e92968365$var$lab2xyz(z);
        return new (0, $aQO2N.Rgb)($8406fa0e92968365$var$lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), $8406fa0e92968365$var$lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), $8406fa0e92968365$var$lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
    }
}));
function $8406fa0e92968365$var$xyz2lab(t) {
    return t > $8406fa0e92968365$var$t3 ? Math.pow(t, 1 / 3) : t / $8406fa0e92968365$var$t2 + $8406fa0e92968365$var$t0;
}
function $8406fa0e92968365$var$lab2xyz(t) {
    return t > $8406fa0e92968365$var$t1 ? t * t * t : $8406fa0e92968365$var$t2 * (t - $8406fa0e92968365$var$t0);
}
function $8406fa0e92968365$var$lrgb2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function $8406fa0e92968365$var$rgb2lrgb(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function $8406fa0e92968365$var$hclConvert(o) {
    if (o instanceof $8406fa0e92968365$export$d9397e094a5fbb9a) return new $8406fa0e92968365$export$d9397e094a5fbb9a(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof $8406fa0e92968365$export$f2722c70a60257f7)) o = $8406fa0e92968365$var$labConvert(o);
    if (o.a === 0 && o.b === 0) return new $8406fa0e92968365$export$d9397e094a5fbb9a(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * (0, $ahw6G.degrees);
    return new $8406fa0e92968365$export$d9397e094a5fbb9a(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function $8406fa0e92968365$export$5a21418738164530(l, c, h, opacity) {
    return arguments.length === 1 ? $8406fa0e92968365$var$hclConvert(l) : new $8406fa0e92968365$export$d9397e094a5fbb9a(h, c, l, opacity == null ? 1 : opacity);
}
function $8406fa0e92968365$export$d0e870ba50062ff1(h, c, l, opacity) {
    return arguments.length === 1 ? $8406fa0e92968365$var$hclConvert(h) : new $8406fa0e92968365$export$d9397e094a5fbb9a(h, c, l, opacity == null ? 1 : opacity);
}
function $8406fa0e92968365$export$d9397e094a5fbb9a(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
}
function $8406fa0e92968365$var$hcl2lab(o) {
    if (isNaN(o.h)) return new $8406fa0e92968365$export$f2722c70a60257f7(o.l, 0, 0, o.opacity);
    var h = o.h * (0, $ahw6G.radians);
    return new $8406fa0e92968365$export$f2722c70a60257f7(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
(0, $1JVRF.default)($8406fa0e92968365$export$d9397e094a5fbb9a, $8406fa0e92968365$export$d0e870ba50062ff1, (0, $1JVRF.extend)((0, $aQO2N.Color), {
    brighter (k) {
        return new $8406fa0e92968365$export$d9397e094a5fbb9a(this.h, this.c, this.l + $8406fa0e92968365$var$K * (k == null ? 1 : k), this.opacity);
    },
    darker (k) {
        return new $8406fa0e92968365$export$d9397e094a5fbb9a(this.h, this.c, this.l - $8406fa0e92968365$var$K * (k == null ? 1 : k), this.opacity);
    },
    rgb () {
        return $8406fa0e92968365$var$hcl2lab(this).rgb();
    }
}));

});
parcelRegister("ahw6G", function(module, exports) {

$parcel$export(module.exports, "radians", () => $77c465a534e4df00$export$8449e153fbd325fc);
$parcel$export(module.exports, "degrees", () => $77c465a534e4df00$export$41fc368e1a942b97);
const $77c465a534e4df00$export$8449e153fbd325fc = Math.PI / 180;
const $77c465a534e4df00$export$41fc368e1a942b97 = 180 / Math.PI;

});



parcelRegister("knmth", function(module, exports) {

$parcel$export(module.exports, "default", () => $ed5762f01cea1e6f$export$2e2bcd8739ae039);
$parcel$export(module.exports, "hclLong", () => $ed5762f01cea1e6f$export$5aaa50f7615f9b70);

var $bkMew = parcelRequire("bkMew");

var $7F7cI = parcelRequire("7F7cI");
function $ed5762f01cea1e6f$var$hcl(hue) {
    return function(start, end) {
        var h = hue((start = (0, $bkMew.hcl)(start)).h, (end = (0, $bkMew.hcl)(end)).h), c = (0, $7F7cI.default)(start.c, end.c), l = (0, $7F7cI.default)(start.l, end.l), opacity = (0, $7F7cI.default)(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.c = c(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
var $ed5762f01cea1e6f$export$2e2bcd8739ae039 = $ed5762f01cea1e6f$var$hcl((0, $7F7cI.hue));
var $ed5762f01cea1e6f$export$5aaa50f7615f9b70 = $ed5762f01cea1e6f$var$hcl((0, $7F7cI.default));

});

parcelRegister("jTjnQ", function(module, exports) {

$parcel$export(module.exports, "default", () => $e7b23091c974cb91$export$2e2bcd8739ae039);
$parcel$export(module.exports, "cubehelixLong", () => $e7b23091c974cb91$export$934fa09ad474a1b4);

var $glJdH = parcelRequire("glJdH");

var $7F7cI = parcelRequire("7F7cI");
function $e7b23091c974cb91$var$cubehelix(hue) {
    return function cubehelixGamma(y) {
        y = +y;
        function cubehelix(start, end) {
            var h = hue((start = (0, $glJdH.default)(start)).h, (end = (0, $glJdH.default)(end)).h), s = (0, $7F7cI.default)(start.s, end.s), l = (0, $7F7cI.default)(start.l, end.l), opacity = (0, $7F7cI.default)(start.opacity, end.opacity);
            return function(t) {
                start.h = h(t);
                start.s = s(t);
                start.l = l(Math.pow(t, y));
                start.opacity = opacity(t);
                return start + "";
            };
        }
        cubehelix.gamma = cubehelixGamma;
        return cubehelix;
    }(1);
}
var $e7b23091c974cb91$export$2e2bcd8739ae039 = $e7b23091c974cb91$var$cubehelix((0, $7F7cI.hue));
var $e7b23091c974cb91$export$934fa09ad474a1b4 = $e7b23091c974cb91$var$cubehelix((0, $7F7cI.default));

});
parcelRegister("glJdH", function(module, exports) {

$parcel$export(module.exports, "default", () => $be71af43fdfef0cf$export$2e2bcd8739ae039);

var $1JVRF = parcelRequire("1JVRF");

var $aQO2N = parcelRequire("aQO2N");

var $ahw6G = parcelRequire("ahw6G");
var $be71af43fdfef0cf$var$A = -0.14861, $be71af43fdfef0cf$var$B = 1.78277, $be71af43fdfef0cf$var$C = -0.29227, $be71af43fdfef0cf$var$D = -0.90649, $be71af43fdfef0cf$var$E = 1.97294, $be71af43fdfef0cf$var$ED = $be71af43fdfef0cf$var$E * $be71af43fdfef0cf$var$D, $be71af43fdfef0cf$var$EB = $be71af43fdfef0cf$var$E * $be71af43fdfef0cf$var$B, $be71af43fdfef0cf$var$BC_DA = $be71af43fdfef0cf$var$B * $be71af43fdfef0cf$var$C - $be71af43fdfef0cf$var$D * $be71af43fdfef0cf$var$A;
function $be71af43fdfef0cf$var$cubehelixConvert(o) {
    if (o instanceof $be71af43fdfef0cf$export$57ed4bde61a1e2f2) return new $be71af43fdfef0cf$export$57ed4bde61a1e2f2(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof (0, $aQO2N.Rgb))) o = (0, $aQO2N.rgbConvert)(o);
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = ($be71af43fdfef0cf$var$BC_DA * b + $be71af43fdfef0cf$var$ED * r - $be71af43fdfef0cf$var$EB * g) / ($be71af43fdfef0cf$var$BC_DA + $be71af43fdfef0cf$var$ED - $be71af43fdfef0cf$var$EB), bl = b - l, k = ($be71af43fdfef0cf$var$E * (g - l) - $be71af43fdfef0cf$var$C * bl) / $be71af43fdfef0cf$var$D, s = Math.sqrt(k * k + bl * bl) / ($be71af43fdfef0cf$var$E * l * (1 - l)), h = s ? Math.atan2(k, bl) * (0, $ahw6G.degrees) - 120 : NaN;
    return new $be71af43fdfef0cf$export$57ed4bde61a1e2f2(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function $be71af43fdfef0cf$export$2e2bcd8739ae039(h, s, l, opacity) {
    return arguments.length === 1 ? $be71af43fdfef0cf$var$cubehelixConvert(h) : new $be71af43fdfef0cf$export$57ed4bde61a1e2f2(h, s, l, opacity == null ? 1 : opacity);
}
function $be71af43fdfef0cf$export$57ed4bde61a1e2f2(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, $1JVRF.default)($be71af43fdfef0cf$export$57ed4bde61a1e2f2, $be71af43fdfef0cf$export$2e2bcd8739ae039, (0, $1JVRF.extend)((0, $aQO2N.Color), {
    brighter (k) {
        k = k == null ? (0, $aQO2N.brighter) : Math.pow((0, $aQO2N.brighter), k);
        return new $be71af43fdfef0cf$export$57ed4bde61a1e2f2(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? (0, $aQO2N.darker) : Math.pow((0, $aQO2N.darker), k);
        return new $be71af43fdfef0cf$export$57ed4bde61a1e2f2(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * (0, $ahw6G.radians), l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new (0, $aQO2N.Rgb)(255 * (l + a * ($be71af43fdfef0cf$var$A * cosh + $be71af43fdfef0cf$var$B * sinh)), 255 * (l + a * ($be71af43fdfef0cf$var$C * cosh + $be71af43fdfef0cf$var$D * sinh)), 255 * (l + a * ($be71af43fdfef0cf$var$E * cosh)), this.opacity);
    }
}));

});


parcelRegister("3CWvo", function(module, exports) {

$parcel$export(module.exports, "default", () => $2a424da6d2a3afe4$export$2e2bcd8739ae039);
function $2a424da6d2a3afe4$export$2e2bcd8739ae039(interpolator, n) {
    var samples = new Array(n);
    for(var i = 0; i < n; ++i)samples[i] = interpolator(i / (n - 1));
    return samples;
}

});





parcelRegister("frbSa", function(module, exports) {

$parcel$export(module.exports, "axisticks", () => $b3d29651f40ebb1e$export$983004c873f94f24);
$parcel$export(module.exports, "datajoin", () => $b3d29651f40ebb1e$export$b7c20aa630928acb);
$parcel$export(module.exports, "encode", () => $b3d29651f40ebb1e$export$c564cdbbe6da493);
$parcel$export(module.exports, "legendentries", () => $b3d29651f40ebb1e$export$e0c985a06b5a2360);
$parcel$export(module.exports, "linkpath", () => $b3d29651f40ebb1e$export$6e561bcb7b5b2ef);
$parcel$export(module.exports, "pie", () => $b3d29651f40ebb1e$export$47a9dca4012556c5);
$parcel$export(module.exports, "scale", () => $b3d29651f40ebb1e$export$dcdf75081b88279d);
$parcel$export(module.exports, "sortitems", () => $b3d29651f40ebb1e$export$e3fe9c36828028af);
$parcel$export(module.exports, "stack", () => $b3d29651f40ebb1e$export$a57ab32f40f83ea9);

var $4jOgW = parcelRequire("4jOgW");

var $1UqgZ = parcelRequire("1UqgZ");
var $leiRV = parcelRequire("leiRV");

var $4SWbq = parcelRequire("4SWbq");

var $apu36 = parcelRequire("apu36");
var $4epUK = parcelRequire("4epUK");

var $ik5Mo = parcelRequire("ik5Mo");
var $462g9 = parcelRequire("462g9");
/**
 * Generates axis ticks for visualizing a spatial scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate ticks for.
 * @param {*} [params.count=10] - The approximate number of ticks, or
 *   desired tick interval, to use.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {function(*):string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid d3 4.0 format specifier.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */ function $b3d29651f40ebb1e$export$983004c873f94f24(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$983004c873f94f24, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (this.value && !_.modified()) return pulse.StopPropagation;
        var locale = pulse.dataflow.locale(), out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), ticks = this.value, scale = _.scale, tally = _.count == null ? _.values ? _.values.length : 10 : _.count, count = (0, $1UqgZ.tickCount)(scale, tally, _.minstep), format = _.format || (0, $1UqgZ.tickFormat)(locale, scale, count, _.formatSpecifier, _.formatType, !!_.values), values = _.values ? (0, $1UqgZ.validTicks)(scale, _.values, count) : (0, $1UqgZ.tickValues)(scale, count);
        if (ticks) out.rem = ticks;
        ticks = values.map((value, i)=>(0, $4jOgW.ingest)({
                index: i / (values.length - 1 || 1),
                value: value,
                label: format(value)
            }));
        if (_.extra && ticks.length) // add an extra tick pegged to the initial domain value
        // this is used to generate axes with 'binned' domains
        ticks.push((0, $4jOgW.ingest)({
            index: -1,
            extra: {
                value: ticks[0].value
            },
            label: ""
        }));
        out.source = ticks;
        out.add = ticks;
        this.value = ticks;
        return out;
    }
});
/**
 * Joins a set of data elements against a set of visual items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): object} [params.item] - An item generator function.
 * @param {function(object): *} [params.key] - The key field associating data and visual items.
 */ function $b3d29651f40ebb1e$export$b7c20aa630928acb(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
function $b3d29651f40ebb1e$var$defaultItemCreate() {
    return (0, $4jOgW.ingest)({});
}
function $b3d29651f40ebb1e$var$newMap(key) {
    const map = (0, $4SWbq.fastmap)().test((t)=>t.exit);
    map.lookup = (t)=>map.get(key(t));
    return map;
}
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$b7c20aa630928acb, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var df = pulse.dataflow, out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), item = _.item || $b3d29651f40ebb1e$var$defaultItemCreate, key = _.key || (0, $4jOgW.tupleid), map = this.value;
        // prevent transient (e.g., hover) requests from
        // cascading across marks derived from marks
        if ((0, $4SWbq.isArray)(out.encode)) out.encode = null;
        if (map && (_.modified("key") || pulse.modified(key))) (0, $4SWbq.error)("DataJoin does not support modified key function or fields.");
        if (!map) {
            pulse = pulse.addAll();
            this.value = map = $b3d29651f40ebb1e$var$newMap(key);
        }
        pulse.visit(pulse.ADD, (t)=>{
            const k = key(t);
            let x = map.get(k);
            if (x) {
                if (x.exit) {
                    map.empty--;
                    out.add.push(x);
                } else out.mod.push(x);
            } else {
                x = item(t);
                map.set(k, x);
                out.add.push(x);
            }
            x.datum = t;
            x.exit = false;
        });
        pulse.visit(pulse.MOD, (t)=>{
            const k = key(t), x = map.get(k);
            if (x) {
                x.datum = t;
                out.mod.push(x);
            }
        });
        pulse.visit(pulse.REM, (t)=>{
            const k = key(t), x = map.get(k);
            if (t === x.datum && !x.exit) {
                out.rem.push(x);
                x.exit = true;
                ++map.empty;
            }
        });
        if (pulse.changed(pulse.ADD_MOD)) out.modifies("datum");
        if (pulse.clean() || _.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);
        return out;
    }
});
/**
 * Invokes encoding functions for visual items.
 * @constructor
 * @param {object} params - The parameters to the encoding functions. This
 *   parameter object will be passed through to all invoked encoding functions.
 * @param {object} [params.mod=false] - Flag indicating if tuples in the input
 *   mod set that are unmodified by encoders should be included in the output.
 * @param {object} param.encoders - The encoding functions
 * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
 * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
 * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
 */ function $b3d29651f40ebb1e$export$c564cdbbe6da493(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$c564cdbbe6da493, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ADD_REM), fmod = _.mod || false, encoders = _.encoders, encode = pulse.encode;
        // if an array, the encode directive includes additional sets
        // that must be defined in order for the primary set to be invoked
        // e.g., only run the update set if the hover set is defined
        if ((0, $4SWbq.isArray)(encode)) {
            if (out.changed() || encode.every((e)=>encoders[e])) {
                encode = encode[0];
                out.encode = null; // consume targeted encode directive
            } else return pulse.StopPropagation;
        }
        // marshall encoder functions
        var reenter = encode === "enter", update = encoders.update || (0, $4SWbq.falsy), enter = encoders.enter || (0, $4SWbq.falsy), exit = encoders.exit || (0, $4SWbq.falsy), set = (encode && !reenter ? encoders[encode] : update) || (0, $4SWbq.falsy);
        if (pulse.changed(pulse.ADD)) {
            pulse.visit(pulse.ADD, (t)=>{
                enter(t, _);
                update(t, _);
            });
            out.modifies(enter.output);
            out.modifies(update.output);
            if (set !== (0, $4SWbq.falsy) && set !== update) {
                pulse.visit(pulse.ADD, (t)=>{
                    set(t, _);
                });
                out.modifies(set.output);
            }
        }
        if (pulse.changed(pulse.REM) && exit !== (0, $4SWbq.falsy)) {
            pulse.visit(pulse.REM, (t)=>{
                exit(t, _);
            });
            out.modifies(exit.output);
        }
        if (reenter || set !== (0, $4SWbq.falsy)) {
            const flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);
            if (reenter) {
                pulse.visit(flag, (t)=>{
                    const mod = enter(t, _) || fmod;
                    if (set(t, _) || mod) out.mod.push(t);
                });
                if (out.mod.length) out.modifies(enter.output);
            } else pulse.visit(flag, (t)=>{
                if (set(t, _) || fmod) out.mod.push(t);
            });
            if (out.mod.length) out.modifies(set.output);
        }
        return out.changed() ? out : pulse.StopPropagation;
    }
});
/**
 * Generates legend entries for visualizing a scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate items for.
 * @param {*} [params.count=5] - The approximate number of items, or
 *   desired tick interval, to use.
 * @param {*} [params.limit] - The maximum number of entries to
 *   include in a symbol legend.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid D3 format specifier string.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */ function $b3d29651f40ebb1e$export$e0c985a06b5a2360(params) {
    (0, $4jOgW.Transform).call(this, [], params);
}
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$e0c985a06b5a2360, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (this.value != null && !_.modified()) return pulse.StopPropagation;
        var locale = pulse.dataflow.locale(), out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), items = this.value, type = _.type || (0, $1UqgZ.SymbolLegend), scale = _.scale, limit = +_.limit, count = (0, $1UqgZ.tickCount)(scale, _.count == null ? 5 : _.count, _.minstep), lskip = !!_.values || type === (0, $1UqgZ.SymbolLegend), format = _.format || (0, $1UqgZ.labelFormat)(locale, scale, count, type, _.formatSpecifier, _.formatType, lskip), values = _.values || (0, $1UqgZ.labelValues)(scale, count), domain, fraction, size, offset, ellipsis;
        if (items) out.rem = items;
        if (type === (0, $1UqgZ.SymbolLegend)) {
            if (limit && values.length > limit) {
                pulse.dataflow.warn("Symbol legend count exceeds limit, filtering items.");
                items = values.slice(0, limit - 1);
                ellipsis = true;
            } else items = values;
            if ((0, $4SWbq.isFunction)(size = _.size)) {
                // if first value maps to size zero, remove from list (vega#717)
                if (!_.values && scale(items[0]) === 0) items = items.slice(1);
                // compute size offset for legend entries
                offset = items.reduce((max, value)=>Math.max(max, size(value, _)), 0);
            } else size = (0, $4SWbq.constant)(offset = size || 8);
            items = items.map((value, index)=>(0, $4jOgW.ingest)({
                    index: index,
                    label: format(value, index, items),
                    value: value,
                    offset: offset,
                    size: size(value, _)
                }));
            if (ellipsis) {
                ellipsis = values[items.length];
                items.push((0, $4jOgW.ingest)({
                    index: items.length,
                    label: `\u2026${values.length - items.length} entries`,
                    value: ellipsis,
                    offset: offset,
                    size: size(ellipsis, _)
                }));
            }
        } else if (type === (0, $1UqgZ.GradientLegend)) {
            domain = scale.domain(), fraction = (0, $1UqgZ.scaleFraction)(scale, domain[0], (0, $4SWbq.peek)(domain));
            // if automatic label generation produces 2 or fewer values,
            // use the domain end points instead (fixes vega/vega#1364)
            if (values.length < 3 && !_.values && domain[0] !== (0, $4SWbq.peek)(domain)) values = [
                domain[0],
                (0, $4SWbq.peek)(domain)
            ];
            items = values.map((value, index)=>(0, $4jOgW.ingest)({
                    index: index,
                    label: format(value, index, values),
                    value: value,
                    perc: fraction(value)
                }));
        } else {
            size = values.length - 1;
            fraction = (0, $1UqgZ.labelFraction)(scale);
            items = values.map((value, index)=>(0, $4jOgW.ingest)({
                    index: index,
                    label: format(value, index, values),
                    value: value,
                    perc: index ? fraction(value) : 0,
                    perc2: index === size ? 1 : fraction(values[index + 1])
                }));
        }
        out.source = items;
        out.add = items;
        this.value = items;
        return out;
    }
});
const $b3d29651f40ebb1e$var$sourceX = (t)=>t.source.x;
const $b3d29651f40ebb1e$var$sourceY = (t)=>t.source.y;
const $b3d29651f40ebb1e$var$targetX = (t)=>t.target.x;
const $b3d29651f40ebb1e$var$targetY = (t)=>t.target.y;
/**
 * Layout paths linking source and target elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function $b3d29651f40ebb1e$export$6e561bcb7b5b2ef(params) {
    (0, $4jOgW.Transform).call(this, {}, params);
}
$b3d29651f40ebb1e$export$6e561bcb7b5b2ef.Definition = {
    "type": "LinkPath",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "sourceX",
            "type": "field",
            "default": "source.x"
        },
        {
            "name": "sourceY",
            "type": "field",
            "default": "source.y"
        },
        {
            "name": "targetX",
            "type": "field",
            "default": "target.x"
        },
        {
            "name": "targetY",
            "type": "field",
            "default": "target.y"
        },
        {
            "name": "orient",
            "type": "enum",
            "default": "vertical",
            "values": [
                "horizontal",
                "vertical",
                "radial"
            ]
        },
        {
            "name": "shape",
            "type": "enum",
            "default": "line",
            "values": [
                "line",
                "arc",
                "curve",
                "diagonal",
                "orthogonal"
            ]
        },
        {
            "name": "require",
            "type": "signal"
        },
        {
            "name": "as",
            "type": "string",
            "default": "path"
        }
    ]
};
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$6e561bcb7b5b2ef, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var sx = _.sourceX || $b3d29651f40ebb1e$var$sourceX, sy = _.sourceY || $b3d29651f40ebb1e$var$sourceY, tx = _.targetX || $b3d29651f40ebb1e$var$targetX, ty = _.targetY || $b3d29651f40ebb1e$var$targetY, as = _.as || "path", orient = _.orient || "vertical", shape = _.shape || "line", path = $b3d29651f40ebb1e$var$Paths.get(shape + "-" + orient) || $b3d29651f40ebb1e$var$Paths.get(shape);
        if (!path) (0, $4SWbq.error)("LinkPath unsupported type: " + _.shape + (_.orient ? "-" + _.orient : ""));
        pulse.visit(pulse.SOURCE, (t)=>{
            t[as] = path(sx(t), sy(t), tx(t), ty(t));
        });
        return pulse.reflow(_.modified()).modifies(as);
    }
});
const $b3d29651f40ebb1e$var$line = (sx, sy, tx, ty)=>"M" + sx + "," + sy + "L" + tx + "," + ty;
const $b3d29651f40ebb1e$var$lineR = (sa, sr, ta, tr)=>$b3d29651f40ebb1e$var$line(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
const $b3d29651f40ebb1e$var$arc = (sx, sy, tx, ty)=>{
    var dx = tx - sx, dy = ty - sy, rr = Math.hypot(dx, dy) / 2, ra = 180 * Math.atan2(dy, dx) / Math.PI;
    return "M" + sx + "," + sy + "A" + rr + "," + rr + " " + ra + " 0 1" + " " + tx + "," + ty;
};
const $b3d29651f40ebb1e$var$arcR = (sa, sr, ta, tr)=>$b3d29651f40ebb1e$var$arc(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
const $b3d29651f40ebb1e$var$curve = (sx, sy, tx, ty)=>{
    const dx = tx - sx, dy = ty - sy, ix = 0.2 * (dx + dy), iy = 0.2 * (dy - dx);
    return "M" + sx + "," + sy + "C" + (sx + ix) + "," + (sy + iy) + " " + (tx + iy) + "," + (ty - ix) + " " + tx + "," + ty;
};
const $b3d29651f40ebb1e$var$curveR = (sa, sr, ta, tr)=>$b3d29651f40ebb1e$var$curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
const $b3d29651f40ebb1e$var$orthoX = (sx, sy, tx, ty)=>"M" + sx + "," + sy + "V" + ty + "H" + tx;
const $b3d29651f40ebb1e$var$orthoY = (sx, sy, tx, ty)=>"M" + sx + "," + sy + "H" + tx + "V" + ty;
const $b3d29651f40ebb1e$var$orthoR = (sa, sr, ta, tr)=>{
    const sc = Math.cos(sa), ss = Math.sin(sa), tc = Math.cos(ta), ts = Math.sin(ta), sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
    return "M" + sr * sc + "," + sr * ss + "A" + sr + "," + sr + " 0 0," + (sf ? 1 : 0) + " " + sr * tc + "," + sr * ts + "L" + tr * tc + "," + tr * ts;
};
const $b3d29651f40ebb1e$var$diagonalX = (sx, sy, tx, ty)=>{
    const m = (sx + tx) / 2;
    return "M" + sx + "," + sy + "C" + m + "," + sy + " " + m + "," + ty + " " + tx + "," + ty;
};
const $b3d29651f40ebb1e$var$diagonalY = (sx, sy, tx, ty)=>{
    const m = (sy + ty) / 2;
    return "M" + sx + "," + sy + "C" + sx + "," + m + " " + tx + "," + m + " " + tx + "," + ty;
};
const $b3d29651f40ebb1e$var$diagonalR = (sa, sr, ta, tr)=>{
    const sc = Math.cos(sa), ss = Math.sin(sa), tc = Math.cos(ta), ts = Math.sin(ta), mr = (sr + tr) / 2;
    return "M" + sr * sc + "," + sr * ss + "C" + mr * sc + "," + mr * ss + " " + mr * tc + "," + mr * ts + " " + tr * tc + "," + tr * ts;
};
const $b3d29651f40ebb1e$var$Paths = (0, $4SWbq.fastmap)({
    "line": $b3d29651f40ebb1e$var$line,
    "line-radial": $b3d29651f40ebb1e$var$lineR,
    "arc": $b3d29651f40ebb1e$var$arc,
    "arc-radial": $b3d29651f40ebb1e$var$arcR,
    "curve": $b3d29651f40ebb1e$var$curve,
    "curve-radial": $b3d29651f40ebb1e$var$curveR,
    "orthogonal-horizontal": $b3d29651f40ebb1e$var$orthoX,
    "orthogonal-vertical": $b3d29651f40ebb1e$var$orthoY,
    "orthogonal-radial": $b3d29651f40ebb1e$var$orthoR,
    "diagonal-horizontal": $b3d29651f40ebb1e$var$diagonalX,
    "diagonal-vertical": $b3d29651f40ebb1e$var$diagonalY,
    "diagonal-radial": $b3d29651f40ebb1e$var$diagonalR
});
/**
 * Pie and donut chart layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size pie segments.
 * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
 * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
 * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
 */ function $b3d29651f40ebb1e$export$47a9dca4012556c5(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b3d29651f40ebb1e$export$47a9dca4012556c5.Definition = {
    "type": "Pie",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "startAngle",
            "type": "number",
            "default": 0
        },
        {
            "name": "endAngle",
            "type": "number",
            "default": 6.283185307179586
        },
        {
            "name": "sort",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "startAngle",
                "endAngle"
            ]
        }
    ]
};
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$47a9dca4012556c5, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var as = _.as || [
            "startAngle",
            "endAngle"
        ], startAngle = as[0], endAngle = as[1], field = _.field || (0, $4SWbq.one), start = _.startAngle || 0, stop = _.endAngle != null ? _.endAngle : 2 * Math.PI, data = pulse.source, values = data.map(field), n = values.length, a = start, k = (stop - start) / (0, $4epUK.default)(values), index = (0, $apu36.default)(n), i, t, v;
        if (_.sort) index.sort((a, b)=>values[a] - values[b]);
        for(i = 0; i < n; ++i){
            v = values[index[i]];
            t = data[index[i]];
            t[startAngle] = a;
            t[endAngle] = a += v * k;
        }
        this.value = values;
        return pulse.reflow(_.modified()).modifies(as);
    }
});
const $b3d29651f40ebb1e$var$DEFAULT_COUNT = 5;
function $b3d29651f40ebb1e$var$includeZero(scale) {
    const type = scale.type;
    return !scale.bins && (type === (0, $1UqgZ.Linear) || type === (0, $1UqgZ.Pow) || type === (0, $1UqgZ.Sqrt));
}
function $b3d29651f40ebb1e$var$includePad(type) {
    return (0, $1UqgZ.isContinuous)(type) && type !== (0, $1UqgZ.Sequential);
}
const $b3d29651f40ebb1e$var$SKIP = (0, $4SWbq.toSet)([
    "set",
    "modified",
    "clear",
    "type",
    "scheme",
    "schemeExtent",
    "schemeCount",
    "domain",
    "domainMin",
    "domainMid",
    "domainMax",
    "domainRaw",
    "domainImplicit",
    "nice",
    "zero",
    "bins",
    "range",
    "rangeStep",
    "round",
    "reverse",
    "interpolate",
    "interpolateGamma"
]);
/**
 * Maintains a scale function mapping data values to visual channels.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function $b3d29651f40ebb1e$export$dcdf75081b88279d(params) {
    (0, $4jOgW.Transform).call(this, null, params);
    this.modified(true); // always treat as modified
}
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$dcdf75081b88279d, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var df = pulse.dataflow, scale$1 = this.value, key = $b3d29651f40ebb1e$var$scaleKey(_);
        if (!scale$1 || key !== scale$1.type) this.value = scale$1 = (0, $1UqgZ.scale)(key)();
        for(key in _)if (!$b3d29651f40ebb1e$var$SKIP[key]) {
            // padding is a scale property for band/point but not others
            if (key === "padding" && $b3d29651f40ebb1e$var$includePad(scale$1.type)) continue;
            // invoke scale property setter, raise warning if not found
            (0, $4SWbq.isFunction)(scale$1[key]) ? scale$1[key](_[key]) : df.warn("Unsupported scale property: " + key);
        }
        $b3d29651f40ebb1e$var$configureRange(scale$1, _, $b3d29651f40ebb1e$var$configureBins(scale$1, _, $b3d29651f40ebb1e$var$configureDomain(scale$1, _, df)));
        return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    }
});
function $b3d29651f40ebb1e$var$scaleKey(_) {
    var t = _.type, d = "", n;
    // backwards compatibility pre Vega 5.
    if (t === (0, $1UqgZ.Sequential)) return (0, $1UqgZ.Sequential) + "-" + (0, $1UqgZ.Linear);
    if ($b3d29651f40ebb1e$var$isContinuousColor(_)) {
        n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
        d = n === 2 ? (0, $1UqgZ.Sequential) + "-" : n === 3 ? (0, $1UqgZ.Diverging) + "-" : "";
    }
    return (d + t || (0, $1UqgZ.Linear)).toLowerCase();
}
function $b3d29651f40ebb1e$var$isContinuousColor(_) {
    const t = _.type;
    return (0, $1UqgZ.isContinuous)(t) && t !== (0, $1UqgZ.Time) && t !== (0, $1UqgZ.UTC) && (_.scheme || _.range && _.range.length && _.range.every((0, $4SWbq.isString)));
}
function $b3d29651f40ebb1e$var$configureDomain(scale, _, df) {
    // check raw domain, if provided use that and exit early
    const raw = $b3d29651f40ebb1e$var$rawDomain(scale, _.domainRaw, df);
    if (raw > -1) return raw;
    var domain = _.domain, type = scale.type, zero = _.zero || _.zero === undefined && $b3d29651f40ebb1e$var$includeZero(scale), n, mid;
    if (!domain) return 0;
    // adjust continuous domain for minimum pixel padding
    if ($b3d29651f40ebb1e$var$includePad(type) && _.padding && domain[0] !== (0, $4SWbq.peek)(domain)) domain = $b3d29651f40ebb1e$var$padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);
    // adjust domain based on zero, min, max settings
    if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
        n = (domain = domain.slice()).length - 1 || 1;
        if (zero) {
            if (domain[0] > 0) domain[0] = 0;
            if (domain[n] < 0) domain[n] = 0;
        }
        if (_.domainMin != null) domain[0] = _.domainMin;
        if (_.domainMax != null) domain[n] = _.domainMax;
        if (_.domainMid != null) {
            mid = _.domainMid;
            const i = mid > domain[n] ? n + 1 : mid < domain[0] ? 0 : n;
            if (i !== n) df.warn("Scale domainMid exceeds domain min or max.", mid);
            domain.splice(i, 0, mid);
        }
    }
    // set the scale domain
    scale.domain($b3d29651f40ebb1e$var$domainCheck(type, domain, df));
    // if ordinal scale domain is defined, prevent implicit
    // domain construction as side-effect of scale lookup
    if (type === (0, $1UqgZ.Ordinal)) scale.unknown(_.domainImplicit ? (0, $leiRV.implicit) : undefined);
    // perform 'nice' adjustment as requested
    if (_.nice && scale.nice) scale.nice(_.nice !== true && (0, $1UqgZ.tickCount)(scale, _.nice) || null);
    // return the cardinality of the domain
    return domain.length;
}
function $b3d29651f40ebb1e$var$rawDomain(scale, raw, df) {
    if (raw) {
        scale.domain($b3d29651f40ebb1e$var$domainCheck(scale.type, raw, df));
        return raw.length;
    } else return -1;
}
function $b3d29651f40ebb1e$var$padDomain(type, domain, range, pad, exponent, constant) {
    var span = Math.abs((0, $4SWbq.peek)(range) - range[0]), frac = span / (span - 2 * pad), d = type === (0, $1UqgZ.Log) ? (0, $4SWbq.zoomLog)(domain, null, frac) : type === (0, $1UqgZ.Sqrt) ? (0, $4SWbq.zoomPow)(domain, null, frac, 0.5) : type === (0, $1UqgZ.Pow) ? (0, $4SWbq.zoomPow)(domain, null, frac, exponent || 1) : type === (0, $1UqgZ.Symlog) ? (0, $4SWbq.zoomSymlog)(domain, null, frac, constant || 1) : (0, $4SWbq.zoomLinear)(domain, null, frac);
    domain = domain.slice();
    domain[0] = d[0];
    domain[domain.length - 1] = d[1];
    return domain;
}
function $b3d29651f40ebb1e$var$domainCheck(type, domain, df) {
    if ((0, $1UqgZ.isLogarithmic)(type)) {
        // sum signs of domain values
        // if all pos or all neg, abs(sum) === domain.length
        var s = Math.abs(domain.reduce((s, v)=>s + (v < 0 ? -1 : v > 0 ? 1 : 0), 0));
        if (s !== domain.length) df.warn("Log scale domain includes zero: " + (0, $4SWbq.stringValue)(domain));
    }
    return domain;
}
function $b3d29651f40ebb1e$var$configureBins(scale, _, count) {
    let bins = _.bins;
    if (bins && !(0, $4SWbq.isArray)(bins)) {
        // generate bin boundary array
        const domain = scale.domain(), lo = domain[0], hi = (0, $4SWbq.peek)(domain), step = bins.step;
        let start = bins.start == null ? lo : bins.start, stop = bins.stop == null ? hi : bins.stop;
        if (!step) (0, $4SWbq.error)("Scale bins parameter missing step property.");
        if (start < lo) start = step * Math.ceil(lo / step);
        if (stop > hi) stop = step * Math.floor(hi / step);
        bins = (0, $apu36.default)(start, stop + step / 2, step);
    }
    if (bins) // assign bin boundaries to scale instance
    scale.bins = bins;
    else if (scale.bins) // no current bins, remove bins if previously set
    delete scale.bins;
    // special handling for bin-ordinal scales
    if (scale.type === (0, $1UqgZ.BinOrdinal)) {
        if (!bins) // the domain specifies the bins
        scale.bins = scale.domain();
        else if (!_.domain && !_.domainRaw) {
            // the bins specify the domain
            scale.domain(bins);
            count = bins.length;
        }
    }
    // return domain cardinality
    return count;
}
function $b3d29651f40ebb1e$var$configureRange(scale, _, count) {
    var type = scale.type, round = _.round || false, range = _.range;
    // if range step specified, calculate full range extent
    if (_.rangeStep != null) range = $b3d29651f40ebb1e$var$configureRangeStep(type, _, count);
    else if (_.scheme) {
        range = $b3d29651f40ebb1e$var$configureScheme(type, _, count);
        if ((0, $4SWbq.isFunction)(range)) {
            if (scale.interpolator) return scale.interpolator(range);
            else (0, $4SWbq.error)(`Scale type ${type} does not support interpolating color schemes.`);
        }
    }
    // given a range array for an interpolating scale, convert to interpolator
    if (range && (0, $1UqgZ.isInterpolating)(type)) return scale.interpolator((0, $1UqgZ.interpolateColors)($b3d29651f40ebb1e$var$flip(range, _.reverse), _.interpolate, _.interpolateGamma));
    // configure rounding / interpolation
    if (range && _.interpolate && scale.interpolate) scale.interpolate((0, $1UqgZ.interpolate)(_.interpolate, _.interpolateGamma));
    else if ((0, $4SWbq.isFunction)(scale.round)) scale.round(round);
    else if ((0, $4SWbq.isFunction)(scale.rangeRound)) scale.interpolate(round ? (0, $462g9.default) : (0, $ik5Mo.default));
    if (range) scale.range($b3d29651f40ebb1e$var$flip(range, _.reverse));
}
function $b3d29651f40ebb1e$var$configureRangeStep(type, _, count) {
    if (type !== (0, $1UqgZ.Band) && type !== (0, $1UqgZ.Point)) (0, $4SWbq.error)("Only band and point scales support rangeStep.");
    // calculate full range based on requested step size and padding
    var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0, inner = type === (0, $1UqgZ.Point) ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
    return [
        0,
        _.rangeStep * (0, $1UqgZ.bandSpace)(count, inner, outer)
    ];
}
function $b3d29651f40ebb1e$var$configureScheme(type, _, count) {
    var extent = _.schemeExtent, name, scheme$1;
    if ((0, $4SWbq.isArray)(_.scheme)) scheme$1 = (0, $1UqgZ.interpolateColors)(_.scheme, _.interpolate, _.interpolateGamma);
    else {
        name = _.scheme.toLowerCase();
        scheme$1 = (0, $1UqgZ.scheme)(name);
        if (!scheme$1) (0, $4SWbq.error)(`Unrecognized scheme name: ${_.scheme}`);
    }
    // determine size for potential discrete range
    count = type === (0, $1UqgZ.Threshold) ? count + 1 : type === (0, $1UqgZ.BinOrdinal) ? count - 1 : type === (0, $1UqgZ.Quantile) || type === (0, $1UqgZ.Quantize) ? +_.schemeCount || $b3d29651f40ebb1e$var$DEFAULT_COUNT : count;
    // adjust and/or quantize scheme as appropriate
    return (0, $1UqgZ.isInterpolating)(type) ? $b3d29651f40ebb1e$var$adjustScheme(scheme$1, extent, _.reverse) : (0, $4SWbq.isFunction)(scheme$1) ? (0, $1UqgZ.quantizeInterpolator)($b3d29651f40ebb1e$var$adjustScheme(scheme$1, extent), count) : type === (0, $1UqgZ.Ordinal) ? scheme$1 : scheme$1.slice(0, count);
}
function $b3d29651f40ebb1e$var$adjustScheme(scheme, extent, reverse) {
    return (0, $4SWbq.isFunction)(scheme) && (extent || reverse) ? (0, $1UqgZ.interpolateRange)(scheme, $b3d29651f40ebb1e$var$flip(extent || [
        0,
        1
    ], reverse)) : scheme;
}
function $b3d29651f40ebb1e$var$flip(array, reverse) {
    return reverse ? array.slice().reverse() : array;
}
/**
 * Sorts scenegraph items in the pulse source array.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting tuples.
 */ function $b3d29651f40ebb1e$export$e3fe9c36828028af(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$e3fe9c36828028af, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const mod = _.modified("sort") || pulse.changed(pulse.ADD) || pulse.modified(_.sort.fields) || pulse.modified("datum");
        if (mod) pulse.source.sort((0, $4jOgW.stableCompare)(_.sort));
        this.modified(mod);
        return pulse;
    }
});
const $b3d29651f40ebb1e$var$Zero = "zero", $b3d29651f40ebb1e$var$Center = "center", $b3d29651f40ebb1e$var$Normalize = "normalize", $b3d29651f40ebb1e$var$DefOutput = [
    "y0",
    "y1"
];
/**
 * Stack layout for visualization elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to stack.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
 * @param {string} [offset='zero'] - Stack baseline offset. One of 'zero', 'center', 'normalize'.
 */ function $b3d29651f40ebb1e$export$a57ab32f40f83ea9(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b3d29651f40ebb1e$export$a57ab32f40f83ea9.Definition = {
    "type": "Stack",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "offset",
            "type": "enum",
            "default": $b3d29651f40ebb1e$var$Zero,
            "values": [
                $b3d29651f40ebb1e$var$Zero,
                $b3d29651f40ebb1e$var$Center,
                $b3d29651f40ebb1e$var$Normalize
            ]
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": $b3d29651f40ebb1e$var$DefOutput
        }
    ]
};
(0, $4SWbq.inherits)($b3d29651f40ebb1e$export$a57ab32f40f83ea9, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var as = _.as || $b3d29651f40ebb1e$var$DefOutput, y0 = as[0], y1 = as[1], sort = (0, $4jOgW.stableCompare)(_.sort), field = _.field || (0, $4SWbq.one), stack = _.offset === $b3d29651f40ebb1e$var$Center ? $b3d29651f40ebb1e$var$stackCenter : _.offset === $b3d29651f40ebb1e$var$Normalize ? $b3d29651f40ebb1e$var$stackNormalize : $b3d29651f40ebb1e$var$stackZero, groups, i, n, max;
        // partition, sum, and sort the stack groups
        groups = $b3d29651f40ebb1e$var$partition(pulse.source, _.groupby, sort, field);
        // compute stack layouts per group
        for(i = 0, n = groups.length, max = groups.max; i < n; ++i)stack(groups[i], max, field, y0, y1);
        return pulse.reflow(_.modified()).modifies(as);
    }
});
function $b3d29651f40ebb1e$var$stackCenter(group, max, field, y0, y1) {
    var last = (max - group.sum) / 2, m = group.length, j = 0, t;
    for(; j < m; ++j){
        t = group[j];
        t[y0] = last;
        t[y1] = last += Math.abs(field(t));
    }
}
function $b3d29651f40ebb1e$var$stackNormalize(group, max, field, y0, y1) {
    var scale = 1 / group.sum, last = 0, m = group.length, j = 0, v = 0, t;
    for(; j < m; ++j){
        t = group[j];
        t[y0] = last;
        t[y1] = last = scale * (v += Math.abs(field(t)));
    }
}
function $b3d29651f40ebb1e$var$stackZero(group, max, field, y0, y1) {
    var lastPos = 0, lastNeg = 0, m = group.length, j = 0, v, t;
    for(; j < m; ++j){
        t = group[j];
        v = +field(t);
        if (v < 0) {
            t[y0] = lastNeg;
            t[y1] = lastNeg += v;
        } else {
            t[y0] = lastPos;
            t[y1] = lastPos += v;
        }
    }
}
function $b3d29651f40ebb1e$var$partition(data, groupby, sort, field) {
    var groups = [], get = (f)=>f(t), map, i, n, m, t, k, g, s, max;
    // partition data points into stack groups
    if (groupby == null) groups.push(data.slice());
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            groups.push(g);
        }
        g.push(t);
    }
    // compute sums of groups, sort groups as needed
    for(k = 0, max = 0, m = groups.length; k < m; ++k){
        g = groups[k];
        for(i = 0, s = 0, n = g.length; i < n; ++i)s += Math.abs(field(g[i]));
        g.sum = s;
        if (s > max) max = s;
        if (sort) g.sort(sort);
    }
    groups.max = max;
    return groups;
}

});
parcelRegister("4epUK", function(module, exports) {

$parcel$export(module.exports, "default", () => $314c92461c91f61b$export$2e2bcd8739ae039);
function $314c92461c91f61b$export$2e2bcd8739ae039(values, valueof) {
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value = +value) sum += value;
    } else {
        let index = -1;
        for (let value of values)if (value = +valueof(value, ++index, values)) sum += value;
    }
    return sum;
}

});


parcelRegister("fRw1v", function(module, exports) {

$parcel$export(module.exports, "isocontour", () => $b8c4a569316d6600$export$ba62b4f380e1062d);
$parcel$export(module.exports, "kde2d", () => $b8c4a569316d6600$export$a7d65ec19c78faba);
$parcel$export(module.exports, "contour", () => $b8c4a569316d6600$export$d4032635d6fcebb1);
$parcel$export(module.exports, "geojson", () => $b8c4a569316d6600$export$42b82bece54a6d78);
$parcel$export(module.exports, "geopath", () => $b8c4a569316d6600$export$8e6f59916c034925);
$parcel$export(module.exports, "geopoint", () => $b8c4a569316d6600$export$afc0197c9de6dc51);
$parcel$export(module.exports, "geoshape", () => $b8c4a569316d6600$export$f63112e2d6be4828);
$parcel$export(module.exports, "graticule", () => $b8c4a569316d6600$export$6bff58e29e0a155f);
$parcel$export(module.exports, "heatmap", () => $b8c4a569316d6600$export$7b695ff214c78c8a);
$parcel$export(module.exports, "projection", () => $b8c4a569316d6600$export$b74061472fe7c07);

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");

var $cgvXK = parcelRequire("cgvXK");
var $apu36 = parcelRequire("apu36");
var $4epUK = parcelRequire("4epUK");
var $5kZgp = parcelRequire("5kZgp");

var $7Par0 = parcelRequire("7Par0");

var $hepJ1 = parcelRequire("hepJ1");

var $iEBLb = parcelRequire("iEBLb");

var $aQO2N = parcelRequire("aQO2N");

var $bWlF6 = parcelRequire("bWlF6");
function $b8c4a569316d6600$var$noop() {}
const $b8c4a569316d6600$var$cases = [
    [],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                0.5,
                1.0
            ]
        ],
        [
            [
                1.0,
                0.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ],
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    []
];
// Implementation adapted from d3/d3-contour. Thanks!
function $b8c4a569316d6600$var$contours() {
    var dx = 1, dy = 1, smooth = smoothLinear;
    function contours(values, tz) {
        return tz.map((value)=>contour(values, value));
    }
    // Accumulate, smooth contour rings, assign holes to exterior rings.
    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
    function contour(values, value) {
        var polygons = [], holes = [];
        isorings(values, value, (ring)=>{
            smooth(ring, values, value);
            if ($b8c4a569316d6600$var$area(ring) > 0) polygons.push([
                ring
            ]);
            else holes.push(ring);
        });
        holes.forEach((hole)=>{
            for(var i = 0, n = polygons.length, polygon; i < n; ++i)if ($b8c4a569316d6600$var$contains((polygon = polygons[i])[0], hole) !== -1) {
                polygon.push(hole);
                return;
            }
        });
        return {
            type: "MultiPolygon",
            value: value,
            coordinates: polygons
        };
    }
    // Marching squares with isolines stitched into rings.
    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
    function isorings(values, value, callback) {
        var fragmentByStart = new Array(), fragmentByEnd = new Array(), x, y, t0, t1, t2, t3;
        // Special case for the first row (y = -1, t2 = t3 = 0).
        x = y = -1;
        t1 = values[0] >= value;
        $b8c4a569316d6600$var$cases[t1 << 1].forEach(stitch);
        while(++x < dx - 1){
            t0 = t1, t1 = values[x + 1] >= value;
            $b8c4a569316d6600$var$cases[t0 | t1 << 1].forEach(stitch);
        }
        $b8c4a569316d6600$var$cases[t1 << 0].forEach(stitch);
        // General case for the intermediate rows.
        while(++y < dy - 1){
            x = -1;
            t1 = values[y * dx + dx] >= value;
            t2 = values[y * dx] >= value;
            $b8c4a569316d6600$var$cases[t1 << 1 | t2 << 2].forEach(stitch);
            while(++x < dx - 1){
                t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
                t3 = t2, t2 = values[y * dx + x + 1] >= value;
                $b8c4a569316d6600$var$cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
            }
            $b8c4a569316d6600$var$cases[t1 | t2 << 3].forEach(stitch);
        }
        // Special case for the last row (y = dy - 1, t0 = t1 = 0).
        x = -1;
        t2 = values[y * dx] >= value;
        $b8c4a569316d6600$var$cases[t2 << 2].forEach(stitch);
        while(++x < dx - 1){
            t3 = t2, t2 = values[y * dx + x + 1] >= value;
            $b8c4a569316d6600$var$cases[t2 << 2 | t3 << 3].forEach(stitch);
        }
        $b8c4a569316d6600$var$cases[t2 << 3].forEach(stitch);
        function stitch(line) {
            var start = [
                line[0][0] + x,
                line[0][1] + y
            ], end = [
                line[1][0] + x,
                line[1][1] + y
            ], startIndex = index(start), endIndex = index(end), f, g;
            if (f = fragmentByEnd[startIndex]) {
                if (g = fragmentByStart[endIndex]) {
                    delete fragmentByEnd[f.end];
                    delete fragmentByStart[g.start];
                    if (f === g) {
                        f.ring.push(end);
                        callback(f.ring);
                    } else fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                        start: f.start,
                        end: g.end,
                        ring: f.ring.concat(g.ring)
                    };
                } else {
                    delete fragmentByEnd[f.end];
                    f.ring.push(end);
                    fragmentByEnd[f.end = endIndex] = f;
                }
            } else if (f = fragmentByStart[endIndex]) {
                if (g = fragmentByEnd[startIndex]) {
                    delete fragmentByStart[f.start];
                    delete fragmentByEnd[g.end];
                    if (f === g) {
                        f.ring.push(end);
                        callback(f.ring);
                    } else fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                        start: g.start,
                        end: f.end,
                        ring: g.ring.concat(f.ring)
                    };
                } else {
                    delete fragmentByStart[f.start];
                    f.ring.unshift(start);
                    fragmentByStart[f.start = startIndex] = f;
                }
            } else fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
                start: startIndex,
                end: endIndex,
                ring: [
                    start,
                    end
                ]
            };
        }
    }
    function index(point) {
        return point[0] * 2 + point[1] * (dx + 1) * 4;
    }
    function smoothLinear(ring, values, value) {
        ring.forEach((point)=>{
            var x = point[0], y = point[1], xt = x | 0, yt = y | 0, v0, v1 = values[yt * dx + xt];
            if (x > 0 && x < dx && xt === x) {
                v0 = values[yt * dx + xt - 1];
                point[0] = x + (value - v0) / (v1 - v0) - 0.5;
            }
            if (y > 0 && y < dy && yt === y) {
                v0 = values[(yt - 1) * dx + xt];
                point[1] = y + (value - v0) / (v1 - v0) - 0.5;
            }
        });
    }
    contours.contour = contour;
    contours.size = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
        if (!(_0 >= 0 && _1 >= 0)) (0, $4SWbq.error)("invalid size");
        return dx = _0, dy = _1, contours;
    };
    contours.smooth = function(_) {
        return arguments.length ? (smooth = _ ? smoothLinear : $b8c4a569316d6600$var$noop, contours) : smooth === smoothLinear;
    };
    return contours;
}
function $b8c4a569316d6600$var$area(ring) {
    var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
    while(++i < n)area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    return area;
}
function $b8c4a569316d6600$var$contains(ring, hole) {
    var i = -1, n = hole.length, c;
    while(++i < n)if (c = $b8c4a569316d6600$var$ringContains(ring, hole[i])) return c;
    return 0;
}
function $b8c4a569316d6600$var$ringContains(ring, point) {
    var x = point[0], y = point[1], contains = -1;
    for(var i = 0, n = ring.length, j = n - 1; i < n; j = i++){
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if ($b8c4a569316d6600$var$segmentContains(pi, pj, point)) return 0;
        if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
    }
    return contains;
}
function $b8c4a569316d6600$var$segmentContains(a, b, c) {
    var i;
    return $b8c4a569316d6600$var$collinear(a, b, c) && $b8c4a569316d6600$var$within(a[i = +(a[0] === b[0])], c[i], b[i]);
}
function $b8c4a569316d6600$var$collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}
function $b8c4a569316d6600$var$within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
}
function $b8c4a569316d6600$var$quantize(k, nice, zero) {
    return function(values) {
        var ex = (0, $4SWbq.extent)(values), start = zero ? Math.min(ex[0], 0) : ex[0], stop = ex[1], span = stop - start, step = nice ? (0, $5kZgp.tickStep)(start, stop, k) : span / (k + 1);
        return (0, $apu36.default)(start + step, stop, step);
    };
}
/**
 * Generate isocontours (level sets) based on input raster grid data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} [params.field] - The field with raster grid
 *   data. If unspecified, the tuple itself is interpreted as a raster grid.
 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
 *   specified, the levels, nice, resolve, and zero parameters are ignored.
 * @param {number} [params.levels] - The desired number of contour levels.
 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
 *   threshold values should be automatically aligned to "nice"
 *   human-friendly values. Setting this flag may cause the number of
 *   thresholds to deviate from the specified levels.
 * @param {string} [params.resolve] - The method for resolving thresholds
 *   across multiple input grids. If 'independent' (the default), threshold
 *   calculation will be performed separately for each grid. If 'shared', a
 *   single set of threshold values will be used for all input grids.
 * @param {boolean} [params.zero] - Boolean flag indicating if the contour
 *   threshold values should include zero.
 * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
 *   polygons should be smoothed using linear interpolation. The default is
 *   true. The parameter is ignored when using density estimation.
 * @param {boolean} [params.scale] - Optional numerical value by which to
 *   scale the output isocontour coordinates. This parameter can be useful
 *   to scale the contours to match a desired output resolution.
 * @param {string} [params.as='contour'] - The output field in which to store
 *   the generated isocontour data (default 'contour').
 */ function $b8c4a569316d6600$export$ba62b4f380e1062d(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$ba62b4f380e1062d.Definition = {
    "type": "Isocontour",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "thresholds",
            "type": "number",
            "array": true
        },
        {
            "name": "levels",
            "type": "number"
        },
        {
            "name": "nice",
            "type": "boolean",
            "default": false
        },
        {
            "name": "resolve",
            "type": "enum",
            "values": [
                "shared",
                "independent"
            ],
            "default": "independent"
        },
        {
            "name": "zero",
            "type": "boolean",
            "default": true
        },
        {
            "name": "smooth",
            "type": "boolean",
            "default": true
        },
        {
            "name": "scale",
            "type": "number",
            "expr": true
        },
        {
            "name": "translate",
            "type": "number",
            "array": true,
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "null": true,
            "default": "contour"
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$ba62b4f380e1062d, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), source = pulse.materialize(pulse.SOURCE).source, field = _.field || (0, $4SWbq.identity), contour = $b8c4a569316d6600$var$contours().smooth(_.smooth !== false), tz = _.thresholds || $b8c4a569316d6600$var$levels(source, field, _), as = _.as === null ? null : _.as || "contour", values = [];
        source.forEach((t)=>{
            const grid = field(t);
            // generate contour paths in GeoJSON format
            const paths = contour.size([
                grid.width,
                grid.height
            ])(grid.values, (0, $4SWbq.isArray)(tz) ? tz : tz(grid.values));
            // adjust contour path coordinates as needed
            $b8c4a569316d6600$var$transformPaths(paths, grid, t, _);
            // ingest; copy source data properties to output
            paths.forEach((p)=>{
                values.push((0, $4jOgW.rederive)(t, (0, $4jOgW.ingest)(as != null ? {
                    [as]: p
                } : p)));
            });
        });
        if (this.value) out.rem = this.value;
        this.value = out.source = out.add = values;
        return out;
    }
});
function $b8c4a569316d6600$var$levels(values, f, _) {
    const q = $b8c4a569316d6600$var$quantize(_.levels || 10, _.nice, _.zero !== false);
    return _.resolve !== "shared" ? q : q(values.map((t)=>(0, $cgvXK.default)(f(t).values)));
}
function $b8c4a569316d6600$var$transformPaths(paths, grid, datum, _) {
    let s = _.scale || grid.scale, t = _.translate || grid.translate;
    if ((0, $4SWbq.isFunction)(s)) s = s(datum, _);
    if ((0, $4SWbq.isFunction)(t)) t = t(datum, _);
    if ((s === 1 || s == null) && !t) return;
    const sx = ((0, $4SWbq.isNumber)(s) ? s : s[0]) || 1, sy = ((0, $4SWbq.isNumber)(s) ? s : s[1]) || 1, tx = t && t[0] || 0, ty = t && t[1] || 0;
    paths.forEach($b8c4a569316d6600$var$transform(grid, sx, sy, tx, ty));
}
function $b8c4a569316d6600$var$transform(grid, sx, sy, tx, ty) {
    const x1 = grid.x1 || 0, y1 = grid.y1 || 0, flip = sx * sy < 0;
    function transformPolygon(coordinates) {
        coordinates.forEach(transformRing);
    }
    function transformRing(coordinates) {
        if (flip) coordinates.reverse(); // maintain winding order
        coordinates.forEach(transformPoint);
    }
    function transformPoint(coordinates) {
        coordinates[0] = (coordinates[0] - x1) * sx + tx;
        coordinates[1] = (coordinates[1] - y1) * sy + ty;
    }
    return function(geometry) {
        geometry.coordinates.forEach(transformPolygon);
        return geometry;
    };
}
function $b8c4a569316d6600$var$radius(bw, data, f) {
    const v = bw >= 0 ? bw : (0, $7Par0.bandwidthNRD)(data, f);
    return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);
}
function $b8c4a569316d6600$var$number(_) {
    return (0, $4SWbq.isFunction)(_) ? _ : (0, $4SWbq.constant)(+_);
}
// Implementation adapted from d3/d3-contour. Thanks!
function $b8c4a569316d6600$var$density2D() {
    var x = (d)=>d[0], y = (d)=>d[1], weight = (0, $4SWbq.one), bandwidth = [
        -1,
        -1
    ], dx = 960, dy = 500, k = 2; // log2(cellSize)
    function density(data, counts) {
        const rx = $b8c4a569316d6600$var$radius(bandwidth[0], data, x) >> k, // blur x-radius
        ry = $b8c4a569316d6600$var$radius(bandwidth[1], data, y) >> k, // blur y-radius
        ox = rx ? rx + 2 : 0, // x-offset padding for blur
        oy = ry ? ry + 2 : 0, // y-offset padding for blur
        n = 2 * ox + (dx >> k), // grid width
        m = 2 * oy + (dy >> k), // grid height
        values0 = new Float32Array(n * m), values1 = new Float32Array(n * m);
        let values = values0;
        data.forEach((d)=>{
            const xi = ox + (+x(d) >> k), yi = oy + (+y(d) >> k);
            if (xi >= 0 && xi < n && yi >= 0 && yi < m) values0[xi + yi * n] += +weight(d);
        });
        if (rx > 0 && ry > 0) {
            $b8c4a569316d6600$var$blurX(n, m, values0, values1, rx);
            $b8c4a569316d6600$var$blurY(n, m, values1, values0, ry);
            $b8c4a569316d6600$var$blurX(n, m, values0, values1, rx);
            $b8c4a569316d6600$var$blurY(n, m, values1, values0, ry);
            $b8c4a569316d6600$var$blurX(n, m, values0, values1, rx);
            $b8c4a569316d6600$var$blurY(n, m, values1, values0, ry);
        } else if (rx > 0) {
            $b8c4a569316d6600$var$blurX(n, m, values0, values1, rx);
            $b8c4a569316d6600$var$blurX(n, m, values1, values0, rx);
            $b8c4a569316d6600$var$blurX(n, m, values0, values1, rx);
            values = values1;
        } else if (ry > 0) {
            $b8c4a569316d6600$var$blurY(n, m, values0, values1, ry);
            $b8c4a569316d6600$var$blurY(n, m, values1, values0, ry);
            $b8c4a569316d6600$var$blurY(n, m, values0, values1, ry);
            values = values1;
        }
        // scale density estimates
        // density in points per square pixel or probability density
        const s = counts ? Math.pow(2, -2 * k) : 1 / (0, $4epUK.default)(values);
        for(let i = 0, sz = n * m; i < sz; ++i)values[i] *= s;
        return {
            values: values,
            scale: 1 << k,
            width: n,
            height: m,
            x1: ox,
            y1: oy,
            x2: ox + (dx >> k),
            y2: oy + (dy >> k)
        };
    }
    density.x = function(_) {
        return arguments.length ? (x = $b8c4a569316d6600$var$number(_), density) : x;
    };
    density.y = function(_) {
        return arguments.length ? (y = $b8c4a569316d6600$var$number(_), density) : y;
    };
    density.weight = function(_) {
        return arguments.length ? (weight = $b8c4a569316d6600$var$number(_), density) : weight;
    };
    density.size = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        var _0 = +_[0], _1 = +_[1];
        if (!(_0 >= 0 && _1 >= 0)) (0, $4SWbq.error)("invalid size");
        return dx = _0, dy = _1, density;
    };
    density.cellSize = function(_) {
        if (!arguments.length) return 1 << k;
        if (!((_ = +_) >= 1)) (0, $4SWbq.error)("invalid cell size");
        k = Math.floor(Math.log(_) / Math.LN2);
        return density;
    };
    density.bandwidth = function(_) {
        if (!arguments.length) return bandwidth;
        _ = (0, $4SWbq.array)(_);
        if (_.length === 1) _ = [
            +_[0],
            +_[0]
        ];
        if (_.length !== 2) (0, $4SWbq.error)("invalid bandwidth");
        return bandwidth = _, density;
    };
    return density;
}
function $b8c4a569316d6600$var$blurX(n, m, source, target, r) {
    const w = (r << 1) + 1;
    for(let j = 0; j < m; ++j)for(let i = 0, sr = 0; i < n + r; ++i){
        if (i < n) sr += source[i + j * n];
        if (i >= r) {
            if (i >= w) sr -= source[i - w + j * n];
            target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
        }
    }
}
function $b8c4a569316d6600$var$blurY(n, m, source, target, r) {
    const w = (r << 1) + 1;
    for(let i = 0; i < n; ++i)for(let j = 0, sr = 0; j < m + r; ++j){
        if (j < m) sr += source[i + j * n];
        if (j >= r) {
            if (j >= w) sr -= source[i + (j - w) * n];
            target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
        }
    }
}
/**
 * Perform 2D kernel-density estimation of point data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The [width, height] extent (in
 *   units of input pixels) over which to perform density estimation.
 * @param {function(object): number} params.x - The x-coordinate accessor.
 * @param {function(object): number} params.y - The y-coordinate accessor.
 * @param {function(object): number} [params.weight] - The weight accessor.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {number} [params.cellSize] - Contour density calculation cell size.
 *   This parameter determines the level of spatial approximation. For example,
 *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.
 *   A value of 1 will result in an output raster grid whose dimensions exactly
 *   matches the size parameter.
 * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,
 *   in pixels. The input can be a two-element array specifying separate
 *   x and y bandwidths, or a single-element array specifying both. If the
 *   bandwidth is unspecified or less than zero, the bandwidth will be
 *   automatically determined.
 * @param {boolean} [params.counts=false] - A boolean flag indicating if the
 *   output values should be probability estimates (false, default) or
 *   smoothed counts (true).
 * @param {string} [params.as='grid'] - The output field in which to store
 *   the generated raster grid (default 'grid').
 */ function $b8c4a569316d6600$export$a7d65ec19c78faba(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$a7d65ec19c78faba.Definition = {
    "type": "KDE2D",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2,
            "required": true
        },
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "weight",
            "type": "field"
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "cellSize",
            "type": "number"
        },
        {
            "name": "bandwidth",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "counts",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "default": "grid"
        }
    ]
};
const $b8c4a569316d6600$var$PARAMS = [
    "x",
    "y",
    "weight",
    "size",
    "cellSize",
    "bandwidth"
];
function $b8c4a569316d6600$var$params(obj, _) {
    $b8c4a569316d6600$var$PARAMS.forEach((param)=>_[param] != null ? obj[param](_[param]) : 0);
    return obj;
}
(0, $4SWbq.inherits)($b8c4a569316d6600$export$a7d65ec19c78faba, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), source = pulse.materialize(pulse.SOURCE).source, groups = $b8c4a569316d6600$var$partition(source, _.groupby), names = (_.groupby || []).map((0, $4SWbq.accessorName)), kde = $b8c4a569316d6600$var$params($b8c4a569316d6600$var$density2D(), _), as = _.as || "grid", values = [];
        function set(t, vals) {
            for(let i = 0; i < names.length; ++i)t[names[i]] = vals[i];
            return t;
        }
        // generate density raster grids
        values = groups.map((g)=>(0, $4jOgW.ingest)(set({
                [as]: kde(g, _.counts)
            }, g.dims)));
        if (this.value) out.rem = this.value;
        this.value = out.source = out.add = values;
        return out;
    }
});
function $b8c4a569316d6600$var$partition(data, groupby) {
    var groups = [], get = (f)=>f(t), map, i, n, t, k, g;
    // partition data points into groups
    if (groupby == null) groups.push(data);
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            g.dims = k;
            groups.push(g);
        }
        g.push(t);
    }
    return groups;
}
/**
 * Generate contours based on kernel-density estimation of point data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
 *  If the values parameter is provided, this must be the dimensions of the input data.
 *  If density estimation is performed, this is the output view dimensions in pixels.
 * @param {Array<number>} [params.values] - An array of numeric values representing an
 *  width x height grid of values over which to compute contours. If unspecified, this
 *  transform will instead attempt to compute contours for the kernel density estimate
 *  using values drawn from data tuples in the input pulse.
 * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
 * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
 * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.
 * @param {number} [params.cellSize] - Contour density calculation cell size.
 * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
 *   this parameter is set, the count and nice parameters will be ignored.
 * @param {number} [params.count] - The desired number of contours.
 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
 *   threshold values should be automatically aligned to "nice"
 *   human-friendly values. Setting this flag may cause the number of
 *   thresholds to deviate from the specified count.
 * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
 *   polygons should be smoothed using linear interpolation. The default is
 *   true. The parameter is ignored when using density estimation.
 */ function $b8c4a569316d6600$export$d4032635d6fcebb1(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$d4032635d6fcebb1.Definition = {
    "type": "Contour",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2,
            "required": true
        },
        {
            "name": "values",
            "type": "number",
            "array": true
        },
        {
            "name": "x",
            "type": "field"
        },
        {
            "name": "y",
            "type": "field"
        },
        {
            "name": "weight",
            "type": "field"
        },
        {
            "name": "cellSize",
            "type": "number"
        },
        {
            "name": "bandwidth",
            "type": "number"
        },
        {
            "name": "count",
            "type": "number"
        },
        {
            "name": "nice",
            "type": "boolean",
            "default": false
        },
        {
            "name": "thresholds",
            "type": "number",
            "array": true
        },
        {
            "name": "smooth",
            "type": "boolean",
            "default": true
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$d4032635d6fcebb1, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS), contour = $b8c4a569316d6600$var$contours().smooth(_.smooth !== false), values = _.values, thresh = _.thresholds || $b8c4a569316d6600$var$quantize(_.count || 10, _.nice, !!values), size = _.size, grid, post;
        if (!values) {
            values = pulse.materialize(pulse.SOURCE).source;
            grid = $b8c4a569316d6600$var$params($b8c4a569316d6600$var$density2D(), _)(values, true);
            post = $b8c4a569316d6600$var$transform(grid, grid.scale || 1, grid.scale || 1, 0, 0);
            size = [
                grid.width,
                grid.height
            ];
            values = grid.values;
        }
        thresh = (0, $4SWbq.isArray)(thresh) ? thresh : thresh(values);
        values = contour.size(size)(values, thresh);
        if (post) values.forEach(post);
        if (this.value) out.rem = this.value;
        this.value = out.source = out.add = (values || []).map((0, $4jOgW.ingest));
        return out;
    }
});
const $b8c4a569316d6600$var$Feature = "Feature";
const $b8c4a569316d6600$var$FeatureCollection = "FeatureCollection";
const $b8c4a569316d6600$var$MultiPoint = "MultiPoint";
/**
 * Consolidate an array of [longitude, latitude] points or GeoJSON features
 * into a combined GeoJSON object. This transform is particularly useful for
 * combining geo data for a Projection's fit argument. The resulting GeoJSON
 * data is available as this transform's value. Input pulses are unchanged.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.fields] - A two-element array
 *   of field accessors for the longitude and latitude values.
 * @param {function(object): *} params.geojson - A field accessor for
 *   retrieving GeoJSON feature data.
 */ function $b8c4a569316d6600$export$42b82bece54a6d78(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$42b82bece54a6d78.Definition = {
    "type": "GeoJSON",
    "metadata": {},
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "length": 2
        },
        {
            "name": "geojson",
            "type": "field"
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$42b82bece54a6d78, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var features = this._features, points = this._points, fields = _.fields, lon = fields && fields[0], lat = fields && fields[1], geojson = _.geojson || !fields && (0, $4SWbq.identity), flag = pulse.ADD, mod;
        mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified((0, $4SWbq.accessorFields)(geojson)) || lon && pulse.modified((0, $4SWbq.accessorFields)(lon)) || lat && pulse.modified((0, $4SWbq.accessorFields)(lat));
        if (!this.value || mod) {
            flag = pulse.SOURCE;
            this._features = features = [];
            this._points = points = [];
        }
        if (geojson) pulse.visit(flag, (t)=>features.push(geojson(t)));
        if (lon && lat) {
            pulse.visit(flag, (t)=>{
                var x = lon(t), y = lat(t);
                if (x != null && y != null && (x = +x) === x && (y = +y) === y) points.push([
                    x,
                    y
                ]);
            });
            features = features.concat({
                type: $b8c4a569316d6600$var$Feature,
                geometry: {
                    type: $b8c4a569316d6600$var$MultiPoint,
                    coordinates: points
                }
            });
        }
        this.value = {
            type: $b8c4a569316d6600$var$FeatureCollection,
            features: features
        };
    }
});
/**
 * Map GeoJSON data to an SVG path string.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='path'] - The output field in which to store
 *   the generated path data (default 'path').
 */ function $b8c4a569316d6600$export$8e6f59916c034925(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$8e6f59916c034925.Definition = {
    "type": "GeoPath",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "projection",
            "type": "projection"
        },
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "pointRadius",
            "type": "number",
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "default": "path"
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$8e6f59916c034925, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ALL), path = this.value, field = _.field || (0, $4SWbq.identity), as = _.as || "path", flag = out.SOURCE;
        if (!path || _.modified()) {
            // parameters updated, reset and reflow
            this.value = path = (0, $hepJ1.getProjectionPath)(_.projection);
            out.materialize().reflow();
        } else flag = field === (0, $4SWbq.identity) || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;
        const prev = $b8c4a569316d6600$var$initPath(path, _.pointRadius);
        out.visit(flag, (t)=>t[as] = path(field(t)));
        path.pointRadius(prev);
        return out.modifies(as);
    }
});
function $b8c4a569316d6600$var$initPath(path, pointRadius) {
    const prev = path.pointRadius();
    path.context(null);
    if (pointRadius != null) path.pointRadius(pointRadius);
    return prev;
}
/**
 * Geo-code a longitude/latitude point to an x/y coordinate.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {Array<function(object): *>} params.fields - A two-element array of
 *   field accessors for the longitude and latitude values.
 * @param {Array<string>} [params.as] - A two-element array of field names
 *   under which to store the result. Defaults to ['x','y'].
 */ function $b8c4a569316d6600$export$afc0197c9de6dc51(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$afc0197c9de6dc51.Definition = {
    "type": "GeoPoint",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "projection",
            "type": "projection",
            "required": true
        },
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 2,
            "default": [
                "x",
                "y"
            ]
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$afc0197c9de6dc51, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var proj = _.projection, lon = _.fields[0], lat = _.fields[1], as = _.as || [
            "x",
            "y"
        ], x = as[0], y = as[1], mod;
        function set(t) {
            const xy = proj([
                lon(t),
                lat(t)
            ]);
            if (xy) {
                t[x] = xy[0];
                t[y] = xy[1];
            } else {
                t[x] = undefined;
                t[y] = undefined;
            }
        }
        if (_.modified()) // parameters updated, reflow
        pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
        else {
            mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
            pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
        }
        return pulse.modifies(as);
    }
});
/**
 * Annotate items with a geopath shape generator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='shape'] - The output field in which to store
 *   the generated path data (default 'shape').
 */ function $b8c4a569316d6600$export$f63112e2d6be4828(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$f63112e2d6be4828.Definition = {
    "type": "GeoShape",
    "metadata": {
        "modifies": true,
        "nomod": true
    },
    "params": [
        {
            "name": "projection",
            "type": "projection"
        },
        {
            "name": "field",
            "type": "field",
            "default": "datum"
        },
        {
            "name": "pointRadius",
            "type": "number",
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "default": "shape"
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$f63112e2d6be4828, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var out = pulse.fork(pulse.ALL), shape = this.value, as = _.as || "shape", flag = out.ADD;
        if (!shape || _.modified()) {
            // parameters updated, reset and reflow
            this.value = shape = $b8c4a569316d6600$var$shapeGenerator((0, $hepJ1.getProjectionPath)(_.projection), _.field || (0, $4SWbq.field)("datum"), _.pointRadius);
            out.materialize().reflow();
            flag = out.SOURCE;
        }
        out.visit(flag, (t)=>t[as] = shape);
        return out.modifies(as);
    }
});
function $b8c4a569316d6600$var$shapeGenerator(path, field, pointRadius) {
    const shape = pointRadius == null ? (_)=>path(field(_)) : (_)=>{
        var prev = path.pointRadius(), value = path.pointRadius(pointRadius)(field(_));
        path.pointRadius(prev);
        return value;
    };
    shape.context = (_)=>{
        path.context(_);
        return shape;
    };
    return shape;
}
/**
 * GeoJSON feature generator for creating graticules.
 * @constructor
 */ function $b8c4a569316d6600$export$6bff58e29e0a155f(params) {
    (0, $4jOgW.Transform).call(this, [], params);
    this.generator = (0, $iEBLb.default)();
}
$b8c4a569316d6600$export$6bff58e29e0a155f.Definition = {
    "type": "Graticule",
    "metadata": {
        "changes": true,
        "generates": true
    },
    "params": [
        {
            "name": "extent",
            "type": "array",
            "array": true,
            "length": 2,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "extentMajor",
            "type": "array",
            "array": true,
            "length": 2,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "extentMinor",
            "type": "array",
            "array": true,
            "length": 2,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "step",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "stepMajor",
            "type": "number",
            "array": true,
            "length": 2,
            "default": [
                90,
                360
            ]
        },
        {
            "name": "stepMinor",
            "type": "number",
            "array": true,
            "length": 2,
            "default": [
                10,
                10
            ]
        },
        {
            "name": "precision",
            "type": "number",
            "default": 2.5
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$6bff58e29e0a155f, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var src = this.value, gen = this.generator, t;
        if (!src.length || _.modified()) {
            for(const prop in _)if ((0, $4SWbq.isFunction)(gen[prop])) gen[prop](_[prop]);
        }
        t = gen();
        if (src.length) pulse.mod.push((0, $4jOgW.replace)(src[0], t));
        else pulse.add.push((0, $4jOgW.ingest)(t));
        src[0] = t;
        return pulse;
    }
});
/**
 * Render a heatmap image for input raster grid data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} [params.field] - The field with raster grid
 *   data. If unspecified, the tuple itself is interpreted as a raster grid.
 * @param {string} [params.color] - A constant color value or function for
 *   individual pixel color. If a function, it will be invoked with an input
 *   object that includes $x, $y, $value, and $max fields for the grid.
 * @param {number} [params.opacity] - A constant opacity value or function for
 *   individual pixel opacity. If a function, it will be invoked with an input
 *   object that includes $x, $y, $value, and $max fields for the grid.
 * @param {string} [params.resolve] - The method for resolving maximum values
 *   across multiple input grids. If 'independent' (the default), maximum
 *   calculation will be performed separately for each grid. If 'shared',
 *   a single global maximum will be used for all input grids.
 * @param {string} [params.as='image'] - The output field in which to store
 *   the generated bitmap canvas images (default 'image').
 */ function $b8c4a569316d6600$export$7b695ff214c78c8a(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$b8c4a569316d6600$export$7b695ff214c78c8a.Definition = {
    "type": "heatmap",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "color",
            "type": "string",
            "expr": true
        },
        {
            "name": "opacity",
            "type": "number",
            "expr": true
        },
        {
            "name": "resolve",
            "type": "enum",
            "values": [
                "shared",
                "independent"
            ],
            "default": "independent"
        },
        {
            "name": "as",
            "type": "string",
            "default": "image"
        }
    ]
};
(0, $4SWbq.inherits)($b8c4a569316d6600$export$7b695ff214c78c8a, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (!pulse.changed() && !_.modified()) return pulse.StopPropagation;
        var source = pulse.materialize(pulse.SOURCE).source, shared = _.resolve === "shared", field = _.field || (0, $4SWbq.identity), opacity = $b8c4a569316d6600$var$opacity_(_.opacity, _), color = $b8c4a569316d6600$var$color_(_.color, _), as = _.as || "image", obj = {
            $x: 0,
            $y: 0,
            $value: 0,
            $max: shared ? (0, $cgvXK.default)(source.map((t)=>(0, $cgvXK.default)(field(t).values))) : 0
        };
        source.forEach((t)=>{
            const v = field(t);
            // build proxy data object
            const o = (0, $4SWbq.extend)({}, t, obj);
            // set maximum value if not globally shared
            if (!shared) o.$max = (0, $cgvXK.default)(v.values || []);
            // generate canvas image
            // optimize color/opacity if not pixel-dependent
            t[as] = $b8c4a569316d6600$var$toCanvas(v, o, color.dep ? color : (0, $4SWbq.constant)(color(o)), opacity.dep ? opacity : (0, $4SWbq.constant)(opacity(o)));
        });
        return pulse.reflow(true).modifies(as);
    }
});
// get image color function
function $b8c4a569316d6600$var$color_(color, _) {
    let f;
    if ((0, $4SWbq.isFunction)(color)) {
        f = (obj)=>(0, $aQO2N.rgb)(color(obj, _));
        f.dep = $b8c4a569316d6600$var$dependency(color);
    } else // default to mid-grey
    f = (0, $4SWbq.constant)((0, $aQO2N.rgb)(color || "#888"));
    return f;
}
// get image opacity function
function $b8c4a569316d6600$var$opacity_(opacity, _) {
    let f;
    if ((0, $4SWbq.isFunction)(opacity)) {
        f = (obj)=>opacity(obj, _);
        f.dep = $b8c4a569316d6600$var$dependency(opacity);
    } else if (opacity) f = (0, $4SWbq.constant)(opacity);
    else {
        // default to [0, max] opacity gradient
        f = (obj)=>obj.$value / obj.$max || 0;
        f.dep = true;
    }
    return f;
}
// check if function depends on individual pixel data
function $b8c4a569316d6600$var$dependency(f) {
    if (!(0, $4SWbq.isFunction)(f)) return false;
    const set = (0, $4SWbq.toSet)((0, $4SWbq.accessorFields)(f));
    return set.$x || set.$y || set.$value || set.$max;
}
// render raster grid to canvas
function $b8c4a569316d6600$var$toCanvas(grid, obj, color, opacity) {
    const n = grid.width, m = grid.height, x1 = grid.x1 || 0, y1 = grid.y1 || 0, x2 = grid.x2 || n, y2 = grid.y2 || m, val = grid.values, value = val ? (i)=>val[i] : (0, $4SWbq.zero), can = (0, $bWlF6.canvas)(x2 - x1, y2 - y1), ctx = can.getContext("2d"), img = ctx.getImageData(0, 0, x2 - x1, y2 - y1), pix = img.data;
    for(let j = y1, k = 0; j < y2; ++j){
        obj.$y = j - y1;
        for(let i = x1, r = j * n; i < x2; ++i, k += 4){
            obj.$x = i - x1;
            obj.$value = value(i + r);
            const v = color(obj);
            pix[k + 0] = v.r;
            pix[k + 1] = v.g;
            pix[k + 2] = v.b;
            pix[k + 3] = ~~(255 * opacity(obj));
        }
    }
    ctx.putImageData(img, 0, 0);
    return can;
}
/**
 * Maintains a cartographic projection.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function $b8c4a569316d6600$export$b74061472fe7c07(params) {
    (0, $4jOgW.Transform).call(this, null, params);
    this.modified(true); // always treat as modified
}
(0, $4SWbq.inherits)($b8c4a569316d6600$export$b74061472fe7c07, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        let proj = this.value;
        if (!proj || _.modified("type")) {
            this.value = proj = $b8c4a569316d6600$var$create(_.type);
            (0, $hepJ1.projectionProperties).forEach((prop)=>{
                if (_[prop] != null) $b8c4a569316d6600$var$set(proj, prop, _[prop]);
            });
        } else (0, $hepJ1.projectionProperties).forEach((prop)=>{
            if (_.modified(prop)) $b8c4a569316d6600$var$set(proj, prop, _[prop]);
        });
        if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
        if (_.fit) $b8c4a569316d6600$var$fit(proj, _);
        return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    }
});
function $b8c4a569316d6600$var$fit(proj, _) {
    const data = $b8c4a569316d6600$var$collectGeoJSON(_.fit);
    _.extent ? proj.fitExtent(_.extent, data) : _.size && proj.fitSize(_.size, data);
}
function $b8c4a569316d6600$var$create(type) {
    const constructor = (0, $hepJ1.projection)((type || "mercator").toLowerCase());
    if (!constructor) (0, $4SWbq.error)("Unrecognized projection type: " + type);
    return constructor();
}
function $b8c4a569316d6600$var$set(proj, key, value) {
    if ((0, $4SWbq.isFunction)(proj[key])) proj[key](value);
}
function $b8c4a569316d6600$var$collectGeoJSON(data) {
    data = (0, $4SWbq.array)(data);
    return data.length === 1 ? data[0] : {
        type: $b8c4a569316d6600$var$FeatureCollection,
        features: data.reduce((a, f)=>a.concat($b8c4a569316d6600$var$featurize(f)), [])
    };
}
function $b8c4a569316d6600$var$featurize(f) {
    return f.type === $b8c4a569316d6600$var$FeatureCollection ? f.features : (0, $4SWbq.array)(f).filter((d)=>d != null).map((d)=>d.type === $b8c4a569316d6600$var$Feature ? d : {
            type: $b8c4a569316d6600$var$Feature,
            geometry: d
        });
}

});
parcelRegister("hepJ1", function(module, exports) {

$parcel$export(module.exports, "projectionProperties", () => $c8b7b2ee905152e9$export$2930c724937b072);
$parcel$export(module.exports, "projection", () => $c8b7b2ee905152e9$export$b74061472fe7c07);
$parcel$export(module.exports, "getProjectionPath", () => $c8b7b2ee905152e9$export$1581a1439046550b);

var $6Mtuf = parcelRequire("6Mtuf");
var $5xJy1 = parcelRequire("5xJy1");
var $3ykGQ = parcelRequire("3ykGQ");
var $jSwZc = parcelRequire("jSwZc");
var $053mi = parcelRequire("053mi");
var $jM6Fx = parcelRequire("jM6Fx");
var $clDmN = parcelRequire("clDmN");
var $3YbcC = parcelRequire("3YbcC");
var $c4Huc = parcelRequire("c4Huc");
var $cp0Fi = parcelRequire("cp0Fi");
var $2eBI0 = parcelRequire("2eBI0");
var $hbBS3 = parcelRequire("hbBS3");
var $38TZB = parcelRequire("38TZB");
var $c02Pt = parcelRequire("c02Pt");
var $fQEsR = parcelRequire("fQEsR");
var $ecN60 = parcelRequire("ecN60");
var $hP0kH = parcelRequire("hP0kH");

var $lgFGv = parcelRequire("lgFGv");

var $1UqgZ = parcelRequire("1UqgZ");
const $c8b7b2ee905152e9$var$defaultPath = (0, $fQEsR.default)();
const $c8b7b2ee905152e9$export$2930c724937b072 = [
    // standard properties in d3-geo
    "clipAngle",
    "clipExtent",
    "scale",
    "translate",
    "center",
    "rotate",
    "parallels",
    "precision",
    "reflectX",
    "reflectY",
    // extended properties in d3-geo-projections
    "coefficient",
    "distance",
    "fraction",
    "lobes",
    "parallel",
    "radius",
    "ratio",
    "spacing",
    "tilt"
];
/**
 * Augment projections with their type and a copy method.
 */ function $c8b7b2ee905152e9$var$create(type, constructor) {
    return function projection() {
        const p = constructor();
        p.type = type;
        p.path = (0, $fQEsR.default)().projection(p);
        p.copy = p.copy || function() {
            const c = projection();
            $c8b7b2ee905152e9$export$2930c724937b072.forEach((prop)=>{
                if (p[prop]) c[prop](p[prop]());
            });
            c.path.pointRadius(p.path.pointRadius());
            return c;
        };
        return (0, $1UqgZ.registerScale)(p);
    };
}
function $c8b7b2ee905152e9$export$b74061472fe7c07(type, proj) {
    if (!type || typeof type !== "string") throw new Error("Projection type must be a name string.");
    type = type.toLowerCase();
    if (arguments.length > 1) {
        $c8b7b2ee905152e9$var$projections[type] = $c8b7b2ee905152e9$var$create(type, proj);
        return this;
    } else return $c8b7b2ee905152e9$var$projections[type] || null;
}
function $c8b7b2ee905152e9$export$1581a1439046550b(proj) {
    return proj && proj.path || $c8b7b2ee905152e9$var$defaultPath;
}
const $c8b7b2ee905152e9$var$projections = {
    // base d3-geo projection types
    albers: (0, $6Mtuf.default),
    albersusa: (0, $5xJy1.default),
    azimuthalequalarea: (0, $3ykGQ.default),
    azimuthalequidistant: (0, $jSwZc.default),
    conicconformal: (0, $053mi.default),
    conicequalarea: (0, $jM6Fx.default),
    conicequidistant: (0, $clDmN.default),
    equalEarth: (0, $3YbcC.default),
    equirectangular: (0, $c4Huc.default),
    gnomonic: (0, $cp0Fi.default),
    identity: (0, $2eBI0.default),
    mercator: (0, $hbBS3.default),
    mollweide: (0, $lgFGv.default),
    naturalEarth1: (0, $38TZB.default),
    orthographic: (0, $c02Pt.default),
    stereographic: (0, $ecN60.default),
    transversemercator: (0, $hP0kH.default)
};
for(const key in $c8b7b2ee905152e9$var$projections)$c8b7b2ee905152e9$export$b74061472fe7c07(key, $c8b7b2ee905152e9$var$projections[key]);

});
parcelRegister("6Mtuf", function(module, exports) {

$parcel$export(module.exports, "default", () => $4efe193b37ec0d3d$export$2e2bcd8739ae039);

var $jM6Fx = parcelRequire("jM6Fx");
function $4efe193b37ec0d3d$export$2e2bcd8739ae039() {
    return (0, $jM6Fx.default)().parallels([
        29.5,
        45.5
    ]).scale(1070).translate([
        480,
        250
    ]).rotate([
        96,
        0
    ]).center([
        -0.6,
        38.7
    ]);
}

});
parcelRegister("jM6Fx", function(module, exports) {

$parcel$export(module.exports, "default", () => $e657ac53d1ba3caf$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $05dj1 = parcelRequire("05dj1");

var $gilRa = parcelRequire("gilRa");
function $e657ac53d1ba3caf$export$75409dad1c406288(y0, y1) {
    var sy0 = (0, $9NJu3.sin)(y0), n = (sy0 + (0, $9NJu3.sin)(y1)) / 2;
    // Are the parallels symmetrical around the Equator?
    if ((0, $9NJu3.abs)(n) < (0, $9NJu3.epsilon)) return (0, $gilRa.cylindricalEqualAreaRaw)(y0);
    var c = 1 + sy0 * (2 * n - sy0), r0 = (0, $9NJu3.sqrt)(c) / n;
    function project(x, y) {
        var r = (0, $9NJu3.sqrt)(c - 2 * n * (0, $9NJu3.sin)(y)) / n;
        return [
            r * (0, $9NJu3.sin)(x *= n),
            r0 - r * (0, $9NJu3.cos)(x)
        ];
    }
    project.invert = function(x, y) {
        var r0y = r0 - y, l = (0, $9NJu3.atan2)(x, (0, $9NJu3.abs)(r0y)) * (0, $9NJu3.sign)(r0y);
        if (r0y * n < 0) l -= (0, $9NJu3.pi) * (0, $9NJu3.sign)(x) * (0, $9NJu3.sign)(r0y);
        return [
            l / n,
            (0, $9NJu3.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))
        ];
    };
    return project;
}
function $e657ac53d1ba3caf$export$2e2bcd8739ae039() {
    return (0, $05dj1.conicProjection)($e657ac53d1ba3caf$export$75409dad1c406288).scale(155.424).center([
        0,
        33.6442
    ]);
}

});
parcelRegister("9NJu3", function(module, exports) {

$parcel$export(module.exports, "epsilon", () => $722bf8c8f2f2cc53$export$6c421550c66a327d);
$parcel$export(module.exports, "epsilon2", () => $722bf8c8f2f2cc53$export$92c06fba281fe81b);
$parcel$export(module.exports, "pi", () => $722bf8c8f2f2cc53$export$18c7bea995a110f);
$parcel$export(module.exports, "halfPi", () => $722bf8c8f2f2cc53$export$e51408a300e8929a);
$parcel$export(module.exports, "quarterPi", () => $722bf8c8f2f2cc53$export$c39a5cba78ea0fc2);
$parcel$export(module.exports, "tau", () => $722bf8c8f2f2cc53$export$a4b4b4d4d776fe92);
$parcel$export(module.exports, "degrees", () => $722bf8c8f2f2cc53$export$41fc368e1a942b97);
$parcel$export(module.exports, "radians", () => $722bf8c8f2f2cc53$export$8449e153fbd325fc);
$parcel$export(module.exports, "abs", () => $722bf8c8f2f2cc53$export$2335f513bbd82c6d);
$parcel$export(module.exports, "atan", () => $722bf8c8f2f2cc53$export$628dc4eed22b0fbd);
$parcel$export(module.exports, "atan2", () => $722bf8c8f2f2cc53$export$b8b770ee6a0d9760);
$parcel$export(module.exports, "cos", () => $722bf8c8f2f2cc53$export$50d414a77b60d802);
$parcel$export(module.exports, "ceil", () => $722bf8c8f2f2cc53$export$803ce6b71a0a94b2);
$parcel$export(module.exports, "exp", () => $722bf8c8f2f2cc53$export$b310ec824aaee37f);
$parcel$export(module.exports, "hypot", () => $722bf8c8f2f2cc53$export$f95c7888b62f8e9a);
$parcel$export(module.exports, "log", () => $722bf8c8f2f2cc53$export$bef1f36f5486a6a3);
$parcel$export(module.exports, "pow", () => $722bf8c8f2f2cc53$export$9c297f60e22e3389);
$parcel$export(module.exports, "sin", () => $722bf8c8f2f2cc53$export$5de3937cb4b592ed);
$parcel$export(module.exports, "sign", () => $722bf8c8f2f2cc53$export$c5552dfdbc7cec71);
$parcel$export(module.exports, "sqrt", () => $722bf8c8f2f2cc53$export$eba8049fb5020b81);
$parcel$export(module.exports, "tan", () => $722bf8c8f2f2cc53$export$fcdd3b0b3246a325);
$parcel$export(module.exports, "acos", () => $722bf8c8f2f2cc53$export$fd6306be3fde5b04);
$parcel$export(module.exports, "asin", () => $722bf8c8f2f2cc53$export$41726bdb1fc63f);
var $722bf8c8f2f2cc53$export$6c421550c66a327d = 1e-6;
var $722bf8c8f2f2cc53$export$92c06fba281fe81b = 1e-12;
var $722bf8c8f2f2cc53$export$18c7bea995a110f = Math.PI;
var $722bf8c8f2f2cc53$export$e51408a300e8929a = $722bf8c8f2f2cc53$export$18c7bea995a110f / 2;
var $722bf8c8f2f2cc53$export$c39a5cba78ea0fc2 = $722bf8c8f2f2cc53$export$18c7bea995a110f / 4;
var $722bf8c8f2f2cc53$export$a4b4b4d4d776fe92 = $722bf8c8f2f2cc53$export$18c7bea995a110f * 2;
var $722bf8c8f2f2cc53$export$41fc368e1a942b97 = 180 / $722bf8c8f2f2cc53$export$18c7bea995a110f;
var $722bf8c8f2f2cc53$export$8449e153fbd325fc = $722bf8c8f2f2cc53$export$18c7bea995a110f / 180;
var $722bf8c8f2f2cc53$export$2335f513bbd82c6d = Math.abs;
var $722bf8c8f2f2cc53$export$628dc4eed22b0fbd = Math.atan;
var $722bf8c8f2f2cc53$export$b8b770ee6a0d9760 = Math.atan2;
var $722bf8c8f2f2cc53$export$50d414a77b60d802 = Math.cos;
var $722bf8c8f2f2cc53$export$803ce6b71a0a94b2 = Math.ceil;
var $722bf8c8f2f2cc53$export$b310ec824aaee37f = Math.exp;
var $722bf8c8f2f2cc53$export$a3fe094919f356fd = Math.floor;
var $722bf8c8f2f2cc53$export$f95c7888b62f8e9a = Math.hypot;
var $722bf8c8f2f2cc53$export$bef1f36f5486a6a3 = Math.log;
var $722bf8c8f2f2cc53$export$9c297f60e22e3389 = Math.pow;
var $722bf8c8f2f2cc53$export$5de3937cb4b592ed = Math.sin;
var $722bf8c8f2f2cc53$export$c5552dfdbc7cec71 = Math.sign || function(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var $722bf8c8f2f2cc53$export$eba8049fb5020b81 = Math.sqrt;
var $722bf8c8f2f2cc53$export$fcdd3b0b3246a325 = Math.tan;
function $722bf8c8f2f2cc53$export$fd6306be3fde5b04(x) {
    return x > 1 ? 0 : x < -1 ? $722bf8c8f2f2cc53$export$18c7bea995a110f : Math.acos(x);
}
function $722bf8c8f2f2cc53$export$41726bdb1fc63f(x) {
    return x > 1 ? $722bf8c8f2f2cc53$export$e51408a300e8929a : x < -1 ? -$722bf8c8f2f2cc53$export$e51408a300e8929a : Math.asin(x);
}
function $722bf8c8f2f2cc53$export$e808712c2966e662(x) {
    return (x = $722bf8c8f2f2cc53$export$5de3937cb4b592ed(x / 2)) * x;
}

});

parcelRegister("05dj1", function(module, exports) {

$parcel$export(module.exports, "conicProjection", () => $00faca05fa5717e5$export$228272587c4d24d8);

var $9NJu3 = parcelRequire("9NJu3");

var $eoGeB = parcelRequire("eoGeB");
function $00faca05fa5717e5$export$228272587c4d24d8(projectAt) {
    var phi0 = 0, phi1 = (0, $9NJu3.pi) / 3, m = (0, $eoGeB.projectionMutator)(projectAt), p = m(phi0, phi1);
    p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * (0, $9NJu3.radians), phi1 = _[1] * (0, $9NJu3.radians)) : [
            phi0 * (0, $9NJu3.degrees),
            phi1 * (0, $9NJu3.degrees)
        ];
    };
    return p;
}

});
parcelRegister("eoGeB", function(module, exports) {

$parcel$export(module.exports, "default", () => $a7b41180a1a25836$export$2e2bcd8739ae039);
$parcel$export(module.exports, "projectionMutator", () => $a7b41180a1a25836$export$155d5a6fa6fddeba);

var $lqa3y = parcelRequire("lqa3y");

var $apxKY = parcelRequire("apxKY");

var $ggPYL = parcelRequire("ggPYL");

var $g93E3 = parcelRequire("g93E3");

var $e7iJQ = parcelRequire("e7iJQ");

var $9NJu3 = parcelRequire("9NJu3");

var $eeYyn = parcelRequire("eeYyn");

var $lU9iO = parcelRequire("lU9iO");

var $a2YPV = parcelRequire("a2YPV");

var $bAc9P = parcelRequire("bAc9P");
var $a7b41180a1a25836$var$transformRadians = (0, $lU9iO.transformer)({
    point: function(x, y) {
        this.stream.point(x * (0, $9NJu3.radians), y * (0, $9NJu3.radians));
    }
});
function $a7b41180a1a25836$var$transformRotate(rotate) {
    return (0, $lU9iO.transformer)({
        point: function(x, y) {
            var r = rotate(x, y);
            return this.stream.point(r[0], r[1]);
        }
    });
}
function $a7b41180a1a25836$var$scaleTranslate(k, dx, dy, sx, sy) {
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            dx + k * x,
            dy - k * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            (x - dx) / k * sx,
            (dy - y) / k * sy
        ];
    };
    return transform;
}
function $a7b41180a1a25836$var$scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha) return $a7b41180a1a25836$var$scaleTranslate(k, dx, dy, sx, sy);
    var cosAlpha = (0, $9NJu3.cos)(alpha), sinAlpha = (0, $9NJu3.sin)(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            a * x - b * y + dx,
            dy - b * x - a * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            sx * (ai * x - bi * y + ci),
            sy * (fi - bi * x - ai * y)
        ];
    };
    return transform;
}
function $a7b41180a1a25836$export$2e2bcd8739ae039(project) {
    return $a7b41180a1a25836$export$155d5a6fa6fddeba(function() {
        return project;
    })();
}
function $a7b41180a1a25836$export$155d5a6fa6fddeba(projectAt) {
    var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = (0, $lqa3y.default), x0 = null, y0, x1, y1, postclip = (0, $e7iJQ.default), delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
    function projection(point) {
        return projectRotateTransform(point[0] * (0, $9NJu3.radians), point[1] * (0, $9NJu3.radians));
    }
    function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [
            point[0] * (0, $9NJu3.degrees),
            point[1] * (0, $9NJu3.degrees)
        ];
    }
    projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = $a7b41180a1a25836$var$transformRadians($a7b41180a1a25836$var$transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };
    projection.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
    };
    projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? (0, $apxKY.default)(theta = _ * (0, $9NJu3.radians)) : (theta = null, $lqa3y.default), reset()) : theta * (0, $9NJu3.degrees);
    };
    projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, $e7iJQ.default) : (0, $ggPYL.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
    };
    projection.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
            x,
            y
        ];
    };
    projection.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * (0, $9NJu3.radians), phi = _[1] % 360 * (0, $9NJu3.radians), recenter()) : [
            lambda * (0, $9NJu3.degrees),
            phi * (0, $9NJu3.degrees)
        ];
    };
    projection.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * (0, $9NJu3.radians), deltaPhi = _[1] % 360 * (0, $9NJu3.radians), deltaGamma = _.length > 2 ? _[2] % 360 * (0, $9NJu3.radians) : 0, recenter()) : [
            deltaLambda * (0, $9NJu3.degrees),
            deltaPhi * (0, $9NJu3.degrees),
            deltaGamma * (0, $9NJu3.degrees)
        ];
    };
    projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * (0, $9NJu3.radians), recenter()) : alpha * (0, $9NJu3.degrees);
    };
    projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
    };
    projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
    };
    projection.precision = function(_) {
        return arguments.length ? (projectResample = (0, $bAc9P.default)(projectTransform, delta2 = _ * _), reset()) : (0, $9NJu3.sqrt)(delta2);
    };
    projection.fitExtent = function(extent, object) {
        return (0, $a2YPV.fitExtent)(projection, extent, object);
    };
    projection.fitSize = function(size, object) {
        return (0, $a2YPV.fitSize)(projection, size, object);
    };
    projection.fitWidth = function(width, object) {
        return (0, $a2YPV.fitWidth)(projection, width, object);
    };
    projection.fitHeight = function(height, object) {
        return (0, $a2YPV.fitHeight)(projection, height, object);
    };
    function recenter() {
        var center = $a7b41180a1a25836$var$scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = $a7b41180a1a25836$var$scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
        rotate = (0, $eeYyn.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = (0, $g93E3.default)(project, transform);
        projectRotateTransform = (0, $g93E3.default)(rotate, projectTransform);
        projectResample = (0, $bAc9P.default)(projectTransform, delta2);
        return reset();
    }
    function reset() {
        cache = cacheStream = null;
        return projection;
    }
    return function() {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
    };
}

});
parcelRegister("lqa3y", function(module, exports) {

$parcel$export(module.exports, "default", () => $f983d3ac2b14536f$export$2e2bcd8739ae039);

var $l9GcI = parcelRequire("l9GcI");

var $9NJu3 = parcelRequire("9NJu3");
var $f983d3ac2b14536f$export$2e2bcd8739ae039 = (0, $l9GcI.default)(function() {
    return true;
}, $f983d3ac2b14536f$var$clipAntimeridianLine, $f983d3ac2b14536f$var$clipAntimeridianInterpolate, [
    -(0, $9NJu3.pi),
    -(0, $9NJu3.halfPi)
]);
// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function $f983d3ac2b14536f$var$clipAntimeridianLine(stream) {
    var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean; // no intersections
    return {
        lineStart: function() {
            stream.lineStart();
            clean = 1;
        },
        point: function(lambda1, phi1) {
            var sign1 = lambda1 > 0 ? (0, $9NJu3.pi) : -(0, $9NJu3.pi), delta = (0, $9NJu3.abs)(lambda1 - lambda0);
            if ((0, $9NJu3.abs)(delta - (0, $9NJu3.pi)) < (0, $9NJu3.epsilon)) {
                stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? (0, $9NJu3.halfPi) : -(0, $9NJu3.halfPi));
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                stream.point(lambda1, phi0);
                clean = 0;
            } else if (sign0 !== sign1 && delta >= (0, $9NJu3.pi)) {
                if ((0, $9NJu3.abs)(lambda0 - sign0) < (0, $9NJu3.epsilon)) lambda0 -= sign0 * (0, $9NJu3.epsilon); // handle degeneracies
                if ((0, $9NJu3.abs)(lambda1 - sign1) < (0, $9NJu3.epsilon)) lambda1 -= sign1 * (0, $9NJu3.epsilon);
                phi0 = $f983d3ac2b14536f$var$clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                clean = 0;
            }
            stream.point(lambda0 = lambda1, phi0 = phi1);
            sign0 = sign1;
        },
        lineEnd: function() {
            stream.lineEnd();
            lambda0 = phi0 = NaN;
        },
        clean: function() {
            return 2 - clean; // if intersections, rejoin first and last segments
        }
    };
}
function $f983d3ac2b14536f$var$clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0, cosPhi1, sinLambda0Lambda1 = (0, $9NJu3.sin)(lambda0 - lambda1);
    return (0, $9NJu3.abs)(sinLambda0Lambda1) > (0, $9NJu3.epsilon) ? (0, $9NJu3.atan)(((0, $9NJu3.sin)(phi0) * (cosPhi1 = (0, $9NJu3.cos)(phi1)) * (0, $9NJu3.sin)(lambda1) - (0, $9NJu3.sin)(phi1) * (cosPhi0 = (0, $9NJu3.cos)(phi0)) * (0, $9NJu3.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function $f983d3ac2b14536f$var$clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
        phi = direction * (0, $9NJu3.halfPi);
        stream.point(-(0, $9NJu3.pi), phi);
        stream.point(0, phi);
        stream.point((0, $9NJu3.pi), phi);
        stream.point((0, $9NJu3.pi), 0);
        stream.point((0, $9NJu3.pi), -phi);
        stream.point(0, -phi);
        stream.point(-(0, $9NJu3.pi), -phi);
        stream.point(-(0, $9NJu3.pi), 0);
        stream.point(-(0, $9NJu3.pi), phi);
    } else if ((0, $9NJu3.abs)(from[0] - to[0]) > (0, $9NJu3.epsilon)) {
        var lambda = from[0] < to[0] ? (0, $9NJu3.pi) : -(0, $9NJu3.pi);
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
    } else stream.point(to[0], to[1]);
}

});
parcelRegister("l9GcI", function(module, exports) {

$parcel$export(module.exports, "default", () => $f66b2d176197c0d4$export$2e2bcd8739ae039);

var $4JNcC = parcelRequire("4JNcC");

var $92RI9 = parcelRequire("92RI9");

var $9NJu3 = parcelRequire("9NJu3");

var $1qH26 = parcelRequire("1qH26");

var $6cF2a = parcelRequire("6cF2a");
function $f66b2d176197c0d4$export$2e2bcd8739ae039(pointVisible, clipLine, interpolate, start) {
    return function(sink) {
        var line = clipLine(sink), ringBuffer = (0, $4JNcC.default)(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
        var clip = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                clip.point = pointRing;
                clip.lineStart = ringStart;
                clip.lineEnd = ringEnd;
                segments = [];
                polygon = [];
            },
            polygonEnd: function() {
                clip.point = point;
                clip.lineStart = lineStart;
                clip.lineEnd = lineEnd;
                segments = (0, $6cF2a.default)(segments);
                var startInside = (0, $1qH26.default)(polygon, start);
                if (segments.length) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    (0, $92RI9.default)(segments, $f66b2d176197c0d4$var$compareIntersection, startInside, interpolate, sink);
                } else if (startInside) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                }
                if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                segments = polygon = null;
            },
            sphere: function() {
                sink.polygonStart();
                sink.lineStart();
                interpolate(null, null, 1, sink);
                sink.lineEnd();
                sink.polygonEnd();
            }
        };
        function point(lambda, phi) {
            if (pointVisible(lambda, phi)) sink.point(lambda, phi);
        }
        function pointLine(lambda, phi) {
            line.point(lambda, phi);
        }
        function lineStart() {
            clip.point = pointLine;
            line.lineStart();
        }
        function lineEnd() {
            clip.point = point;
            line.lineEnd();
        }
        function pointRing(lambda, phi) {
            ring.push([
                lambda,
                phi
            ]);
            ringSink.point(lambda, phi);
        }
        function ringStart() {
            ringSink.lineStart();
            ring = [];
        }
        function ringEnd() {
            pointRing(ring[0][0], ring[0][1]);
            ringSink.lineEnd();
            var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
            ring.pop();
            polygon.push(ring);
            ring = null;
            if (!n) return;
            // No intersections.
            if (clean & 1) {
                segment = ringSegments[0];
                if ((m = segment.length - 1) > 0) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    for(i = 0; i < m; ++i)sink.point((point = segment[i])[0], point[1]);
                    sink.lineEnd();
                }
                return;
            }
            // Rejoin connected segments.
            // TODO reuse ringBuffer.rejoin()?
            if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
            segments.push(ringSegments.filter($f66b2d176197c0d4$var$validSegment));
        }
        return clip;
    };
}
function $f66b2d176197c0d4$var$validSegment(segment) {
    return segment.length > 1;
}
// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function $f66b2d176197c0d4$var$compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - (0, $9NJu3.halfPi) - (0, $9NJu3.epsilon) : (0, $9NJu3.halfPi) - a[1]) - ((b = b.x)[0] < 0 ? b[1] - (0, $9NJu3.halfPi) - (0, $9NJu3.epsilon) : (0, $9NJu3.halfPi) - b[1]);
}

});
parcelRegister("4JNcC", function(module, exports) {

$parcel$export(module.exports, "default", () => $373187f7e217c0c4$export$2e2bcd8739ae039);

var $6A3Rm = parcelRequire("6A3Rm");
function $373187f7e217c0c4$export$2e2bcd8739ae039() {
    var lines = [], line;
    return {
        point: function(x, y, m) {
            line.push([
                x,
                y,
                m
            ]);
        },
        lineStart: function() {
            lines.push(line = []);
        },
        lineEnd: (0, $6A3Rm.default),
        rejoin: function() {
            if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        },
        result: function() {
            var result = lines;
            lines = [];
            line = null;
            return result;
        }
    };
}

});
parcelRegister("6A3Rm", function(module, exports) {

$parcel$export(module.exports, "default", () => $4ca9195579fcbf15$export$2e2bcd8739ae039);
function $4ca9195579fcbf15$export$2e2bcd8739ae039() {}

});


parcelRegister("92RI9", function(module, exports) {

$parcel$export(module.exports, "default", () => $695df6e406521378$export$2e2bcd8739ae039);

var $hrPBy = parcelRequire("hrPBy");

var $9NJu3 = parcelRequire("9NJu3");
function $695df6e406521378$var$Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection
    this.e = entry; // is an entry?
    this.v = false; // visited
    this.n = this.p = null; // next & previous
}
function $695df6e406521378$export$2e2bcd8739ae039(segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [], clip = [], i, n;
    segments.forEach(function(segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n, p0 = segment[0], p1 = segment[n], x;
        if ((0, $hrPBy.default)(p0, p1)) {
            if (!p0[2] && !p1[2]) {
                stream.lineStart();
                for(i = 0; i < n; ++i)stream.point((p0 = segment[i])[0], p0[1]);
                stream.lineEnd();
                return;
            }
            // handle degenerate cases by moving the point
            p1[0] += 2 * (0, $9NJu3.epsilon);
        }
        subject.push(x = new $695df6e406521378$var$Intersection(p0, segment, null, true));
        clip.push(x.o = new $695df6e406521378$var$Intersection(p0, null, x, false));
        subject.push(x = new $695df6e406521378$var$Intersection(p1, segment, null, false));
        clip.push(x.o = new $695df6e406521378$var$Intersection(p1, null, x, true));
    });
    if (!subject.length) return;
    clip.sort(compareIntersection);
    $695df6e406521378$var$link(subject);
    $695df6e406521378$var$link(clip);
    for(i = 0, n = clip.length; i < n; ++i)clip[i].e = startInside = !startInside;
    var start = subject[0], points, point;
    while(true){
        // Find first unvisited intersection.
        var current = start, isSubject = true;
        while(current.v)if ((current = current.n) === start) return;
        points = current.z;
        stream.lineStart();
        do {
            current.v = current.o.v = true;
            if (current.e) {
                if (isSubject) for(i = 0, n = points.length; i < n; ++i)stream.point((point = points[i])[0], point[1]);
                else interpolate(current.x, current.n.x, 1, stream);
                current = current.n;
            } else {
                if (isSubject) {
                    points = current.p.z;
                    for(i = points.length - 1; i >= 0; --i)stream.point((point = points[i])[0], point[1]);
                } else interpolate(current.x, current.p.x, -1, stream);
                current = current.p;
            }
            current = current.o;
            points = current.z;
            isSubject = !isSubject;
        }while (!current.v);
        stream.lineEnd();
    }
}
function $695df6e406521378$var$link(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while(++i < n){
        a.n = b = array[i];
        b.p = a;
        a = b;
    }
    a.n = b = array[0];
    b.p = a;
}

});
parcelRegister("hrPBy", function(module, exports) {

$parcel$export(module.exports, "default", () => $cb3cfcea9d8ef85e$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");
function $cb3cfcea9d8ef85e$export$2e2bcd8739ae039(a, b) {
    return (0, $9NJu3.abs)(a[0] - b[0]) < (0, $9NJu3.epsilon) && (0, $9NJu3.abs)(a[1] - b[1]) < (0, $9NJu3.epsilon);
}

});


parcelRegister("1qH26", function(module, exports) {

$parcel$export(module.exports, "default", () => $10a9999962cdc595$export$2e2bcd8739ae039);

var $2qYWQ = parcelRequire("2qYWQ");

var $8fcLQ = parcelRequire("8fcLQ");

var $9NJu3 = parcelRequire("9NJu3");
function $10a9999962cdc595$var$longitude(point) {
    return (0, $9NJu3.abs)(point[0]) <= (0, $9NJu3.pi) ? point[0] : (0, $9NJu3.sign)(point[0]) * (((0, $9NJu3.abs)(point[0]) + (0, $9NJu3.pi)) % (0, $9NJu3.tau) - (0, $9NJu3.pi));
}
function $10a9999962cdc595$export$2e2bcd8739ae039(polygon, point) {
    var lambda = $10a9999962cdc595$var$longitude(point), phi = point[1], sinPhi = (0, $9NJu3.sin)(phi), normal = [
        (0, $9NJu3.sin)(lambda),
        -(0, $9NJu3.cos)(lambda),
        0
    ], angle = 0, winding = 0;
    var sum = new (0, $2qYWQ.Adder)();
    if (sinPhi === 1) phi = (0, $9NJu3.halfPi) + (0, $9NJu3.epsilon);
    else if (sinPhi === -1) phi = -(0, $9NJu3.halfPi) - (0, $9NJu3.epsilon);
    for(var i = 0, n = polygon.length; i < n; ++i){
        if (!(m = (ring = polygon[i]).length)) continue;
        var ring, m, point0 = ring[m - 1], lambda0 = $10a9999962cdc595$var$longitude(point0), phi0 = point0[1] / 2 + (0, $9NJu3.quarterPi), sinPhi0 = (0, $9NJu3.sin)(phi0), cosPhi0 = (0, $9NJu3.cos)(phi0);
        for(var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1){
            var point1 = ring[j], lambda1 = $10a9999962cdc595$var$longitude(point1), phi1 = point1[1] / 2 + (0, $9NJu3.quarterPi), sinPhi1 = (0, $9NJu3.sin)(phi1), cosPhi1 = (0, $9NJu3.cos)(phi1), delta = lambda1 - lambda0, sign = delta >= 0 ? 1 : -1, absDelta = sign * delta, antimeridian = absDelta > (0, $9NJu3.pi), k = sinPhi0 * sinPhi1;
            sum.add((0, $9NJu3.atan2)(k * sign * (0, $9NJu3.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, $9NJu3.cos)(absDelta)));
            angle += antimeridian ? delta + sign * (0, $9NJu3.tau) : delta;
            // Are the longitudes either side of the point’s meridian (lambda),
            // and are the latitudes smaller than the parallel (phi)?
            if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                var arc = (0, $8fcLQ.cartesianCross)((0, $8fcLQ.cartesian)(point0), (0, $8fcLQ.cartesian)(point1));
                (0, $8fcLQ.cartesianNormalizeInPlace)(arc);
                var intersection = (0, $8fcLQ.cartesianCross)(normal, arc);
                (0, $8fcLQ.cartesianNormalizeInPlace)(intersection);
                var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, $9NJu3.asin)(intersection[2]);
                if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
        }
    }
    // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.
    return (angle < -(0, $9NJu3.epsilon) || angle < (0, $9NJu3.epsilon) && sum < -(0, $9NJu3.epsilon2)) ^ winding & 1;
}

});
parcelRegister("2qYWQ", function(module, exports) {

$parcel$export(module.exports, "Adder", () => $1c5d497cb62e3071$export$bda7ba77fb86c375);
// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
class $1c5d497cb62e3071$export$bda7ba77fb86c375 {
    constructor(){
        this._partials = new Float64Array(32);
        this._n = 0;
    }
    add(x) {
        const p = this._partials;
        let i = 0;
        for(let j = 0; j < this._n && j < 32; j++){
            const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
            if (lo) p[i++] = lo;
            x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
    }
    valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
            hi = p[--n];
            while(n > 0){
                x = hi;
                y = p[--n];
                hi = x + y;
                lo = y - (hi - x);
                if (lo) break;
            }
            if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
                y = lo * 2;
                x = hi + y;
                if (y == x - hi) hi = x;
            }
        }
        return hi;
    }
}
function $1c5d497cb62e3071$export$61cb83f1a93e9fae(values, valueof) {
    const adder = new $1c5d497cb62e3071$export$bda7ba77fb86c375();
    if (valueof === undefined) {
        for (let value of values)if (value = +value) adder.add(value);
    } else {
        let index = -1;
        for (let value of values)if (value = +valueof(value, ++index, values)) adder.add(value);
    }
    return +adder;
}
function $1c5d497cb62e3071$export$5a6391da70c130da(values, valueof) {
    const adder = new $1c5d497cb62e3071$export$bda7ba77fb86c375();
    let index = -1;
    return Float64Array.from(values, valueof === undefined ? (v)=>adder.add(+v || 0) : (v)=>adder.add(+valueof(v, ++index, values) || 0));
}

});

parcelRegister("8fcLQ", function(module, exports) {

$parcel$export(module.exports, "spherical", () => $6009a16c56501084$export$12f9ad44fe773943);
$parcel$export(module.exports, "cartesian", () => $6009a16c56501084$export$6e6697ef026a96);
$parcel$export(module.exports, "cartesianDot", () => $6009a16c56501084$export$2ef80f51436a9de9);
$parcel$export(module.exports, "cartesianCross", () => $6009a16c56501084$export$4763f5351b14293f);
$parcel$export(module.exports, "cartesianAddInPlace", () => $6009a16c56501084$export$e62eba72fc898eae);
$parcel$export(module.exports, "cartesianScale", () => $6009a16c56501084$export$52d0ee3fc868d452);
$parcel$export(module.exports, "cartesianNormalizeInPlace", () => $6009a16c56501084$export$6789498aec2cb34b);

var $9NJu3 = parcelRequire("9NJu3");
function $6009a16c56501084$export$12f9ad44fe773943(cartesian) {
    return [
        (0, $9NJu3.atan2)(cartesian[1], cartesian[0]),
        (0, $9NJu3.asin)(cartesian[2])
    ];
}
function $6009a16c56501084$export$6e6697ef026a96(spherical) {
    var lambda = spherical[0], phi = spherical[1], cosPhi = (0, $9NJu3.cos)(phi);
    return [
        cosPhi * (0, $9NJu3.cos)(lambda),
        cosPhi * (0, $9NJu3.sin)(lambda),
        (0, $9NJu3.sin)(phi)
    ];
}
function $6009a16c56501084$export$2ef80f51436a9de9(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function $6009a16c56501084$export$4763f5351b14293f(a, b) {
    return [
        a[1] * b[2] - a[2] * b[1],
        a[2] * b[0] - a[0] * b[2],
        a[0] * b[1] - a[1] * b[0]
    ];
}
function $6009a16c56501084$export$e62eba72fc898eae(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function $6009a16c56501084$export$52d0ee3fc868d452(vector, k) {
    return [
        vector[0] * k,
        vector[1] * k,
        vector[2] * k
    ];
}
function $6009a16c56501084$export$6789498aec2cb34b(d) {
    var l = (0, $9NJu3.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
}

});


parcelRegister("6cF2a", function(module, exports) {

$parcel$export(module.exports, "default", () => $4843b187931c9324$export$2e2bcd8739ae039);
function* $4843b187931c9324$var$flatten(arrays) {
    for (const array of arrays)yield* array;
}
function $4843b187931c9324$export$2e2bcd8739ae039(arrays) {
    return Array.from($4843b187931c9324$var$flatten(arrays));
}

});



parcelRegister("apxKY", function(module, exports) {

$parcel$export(module.exports, "default", () => $79466c8e58f4cec0$export$2e2bcd8739ae039);

var $8fcLQ = parcelRequire("8fcLQ");

var $eI742 = parcelRequire("eI742");

var $9NJu3 = parcelRequire("9NJu3");

var $hrPBy = parcelRequire("hrPBy");

var $l9GcI = parcelRequire("l9GcI");
function $79466c8e58f4cec0$export$2e2bcd8739ae039(radius) {
    var cr = (0, $9NJu3.cos)(radius), delta = 6 * (0, $9NJu3.radians), smallRadius = cr > 0, notHemisphere = (0, $9NJu3.abs)(cr) > (0, $9NJu3.epsilon); // TODO optimise for this common case
    function interpolate(from, to, direction, stream) {
        (0, $eI742.circleStream)(stream, radius, delta, direction, from, to);
    }
    function visible(lambda, phi) {
        return (0, $9NJu3.cos)(lambda) * (0, $9NJu3.cos)(phi) > cr;
    }
    // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.
    function clipLine(stream) {
        var point0, c0, v0, v00, clean; // no intersections
        return {
            lineStart: function() {
                v00 = v0 = false;
                clean = 1;
            },
            point: function(lambda, phi) {
                var point1 = [
                    lambda,
                    phi
                ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? (0, $9NJu3.pi) : -(0, $9NJu3.pi)), phi) : 0;
                if (!point0 && (v00 = v0 = v)) stream.lineStart();
                if (v !== v0) {
                    point2 = intersect(point0, point1);
                    if (!point2 || (0, $hrPBy.default)(point0, point2) || (0, $hrPBy.default)(point1, point2)) point1[2] = 1;
                }
                if (v !== v0) {
                    clean = 0;
                    if (v) {
                        // outside going in
                        stream.lineStart();
                        point2 = intersect(point1, point0);
                        stream.point(point2[0], point2[1]);
                    } else {
                        // inside going out
                        point2 = intersect(point0, point1);
                        stream.point(point2[0], point2[1], 2);
                        stream.lineEnd();
                    }
                    point0 = point2;
                } else if (notHemisphere && point0 && smallRadius ^ v) {
                    var t;
                    // If the codes for two points are different, or are both zero,
                    // and there this segment intersects with the small circle.
                    if (!(c & c0) && (t = intersect(point1, point0, true))) {
                        clean = 0;
                        if (smallRadius) {
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1]);
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                        } else {
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1], 3);
                        }
                    }
                }
                if (v && (!point0 || !(0, $hrPBy.default)(point0, point1))) stream.point(point1[0], point1[1]);
                point0 = point1, v0 = v, c0 = c;
            },
            lineEnd: function() {
                if (v0) stream.lineEnd();
                point0 = null;
            },
            // Rejoin first and last segments if there were intersections and the first
            // and last points were visible.
            clean: function() {
                return clean | (v00 && v0) << 1;
            }
        };
    }
    // Intersects the great circle between a and b with the clip circle.
    function intersect(a, b, two) {
        var pa = (0, $8fcLQ.cartesian)(a), pb = (0, $8fcLQ.cartesian)(b);
        // We have two planes, n1.p = d1 and n2.p = d2.
        // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
        var n1 = [
            1,
            0,
            0
        ], n2 = (0, $8fcLQ.cartesianCross)(pa, pb), n2n2 = (0, $8fcLQ.cartesianDot)(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
        // Two polar points.
        if (!determinant) return !two && a;
        var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = (0, $8fcLQ.cartesianCross)(n1, n2), A = (0, $8fcLQ.cartesianScale)(n1, c1), B = (0, $8fcLQ.cartesianScale)(n2, c2);
        (0, $8fcLQ.cartesianAddInPlace)(A, B);
        // Solve |p(t)|^2 = 1.
        var u = n1xn2, w = (0, $8fcLQ.cartesianDot)(A, u), uu = (0, $8fcLQ.cartesianDot)(u, u), t2 = w * w - uu * ((0, $8fcLQ.cartesianDot)(A, A) - 1);
        if (t2 < 0) return;
        var t = (0, $9NJu3.sqrt)(t2), q = (0, $8fcLQ.cartesianScale)(u, (-w - t) / uu);
        (0, $8fcLQ.cartesianAddInPlace)(q, A);
        q = (0, $8fcLQ.spherical)(q);
        if (!two) return q;
        // Two intersection points.
        var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
        if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
        var delta = lambda1 - lambda0, polar = (0, $9NJu3.abs)(delta - (0, $9NJu3.pi)) < (0, $9NJu3.epsilon), meridian = polar || delta < (0, $9NJu3.epsilon);
        if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
        // Check that the first point is between a and b.
        if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, $9NJu3.abs)(q[0] - lambda0) < (0, $9NJu3.epsilon) ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > (0, $9NJu3.pi) ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
            var q1 = (0, $8fcLQ.cartesianScale)(u, (-w + t) / uu);
            (0, $8fcLQ.cartesianAddInPlace)(q1, A);
            return [
                q,
                (0, $8fcLQ.spherical)(q1)
            ];
        }
    }
    // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.
    function code(lambda, phi) {
        var r = smallRadius ? radius : (0, $9NJu3.pi) - radius, code = 0;
        if (lambda < -r) code |= 1; // left
        else if (lambda > r) code |= 2; // right
        if (phi < -r) code |= 4; // below
        else if (phi > r) code |= 8; // above
        return code;
    }
    return (0, $l9GcI.default)(visible, clipLine, interpolate, smallRadius ? [
        0,
        -radius
    ] : [
        -(0, $9NJu3.pi),
        radius - (0, $9NJu3.pi)
    ]);
}

});
parcelRegister("eI742", function(module, exports) {

$parcel$export(module.exports, "circleStream", () => $ab5aa7874c29a335$export$b5441eb324cd8d4e);

var $8fcLQ = parcelRequire("8fcLQ");

var $g8dPa = parcelRequire("g8dPa");

var $9NJu3 = parcelRequire("9NJu3");

var $eeYyn = parcelRequire("eeYyn");
function $ab5aa7874c29a335$export$b5441eb324cd8d4e(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = (0, $9NJu3.cos)(radius), sinRadius = (0, $9NJu3.sin)(radius), step = direction * delta;
    if (t0 == null) {
        t0 = radius + direction * (0, $9NJu3.tau);
        t1 = radius - step / 2;
    } else {
        t0 = $ab5aa7874c29a335$var$circleRadius(cosRadius, t0);
        t1 = $ab5aa7874c29a335$var$circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * (0, $9NJu3.tau);
    }
    for(var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step){
        point = (0, $8fcLQ.spherical)([
            cosRadius,
            -sinRadius * (0, $9NJu3.cos)(t),
            -sinRadius * (0, $9NJu3.sin)(t)
        ]);
        stream.point(point[0], point[1]);
    }
}
// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function $ab5aa7874c29a335$var$circleRadius(cosRadius, point) {
    point = (0, $8fcLQ.cartesian)(point), point[0] -= cosRadius;
    (0, $8fcLQ.cartesianNormalizeInPlace)(point);
    var radius = (0, $9NJu3.acos)(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + (0, $9NJu3.tau) - (0, $9NJu3.epsilon)) % (0, $9NJu3.tau);
}
function $ab5aa7874c29a335$export$2e2bcd8739ae039() {
    var center = (0, $g8dPa.default)([
        0,
        0
    ]), radius = (0, $g8dPa.default)(90), precision = (0, $g8dPa.default)(6), ring, rotate, stream = {
        point: point
    };
    function point(x, y) {
        ring.push(x = rotate(x, y));
        x[0] *= (0, $9NJu3.degrees), x[1] *= (0, $9NJu3.degrees);
    }
    function circle() {
        var c = center.apply(this, arguments), r = radius.apply(this, arguments) * (0, $9NJu3.radians), p = precision.apply(this, arguments) * (0, $9NJu3.radians);
        ring = [];
        rotate = (0, $eeYyn.rotateRadians)(-c[0] * (0, $9NJu3.radians), -c[1] * (0, $9NJu3.radians), 0).invert;
        $ab5aa7874c29a335$export$b5441eb324cd8d4e(stream, r, p, 1);
        c = {
            type: "Polygon",
            coordinates: [
                ring
            ]
        };
        ring = rotate = null;
        return c;
    }
    circle.center = function(_) {
        return arguments.length ? (center = typeof _ === "function" ? _ : (0, $g8dPa.default)([
            +_[0],
            +_[1]
        ]), circle) : center;
    };
    circle.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : (0, $g8dPa.default)(+_), circle) : radius;
    };
    circle.precision = function(_) {
        return arguments.length ? (precision = typeof _ === "function" ? _ : (0, $g8dPa.default)(+_), circle) : precision;
    };
    return circle;
}

});
parcelRegister("g8dPa", function(module, exports) {

$parcel$export(module.exports, "default", () => $bbe81dea11f0af8d$export$2e2bcd8739ae039);
function $bbe81dea11f0af8d$export$2e2bcd8739ae039(x) {
    return function() {
        return x;
    };
}

});

parcelRegister("eeYyn", function(module, exports) {

$parcel$export(module.exports, "rotateRadians", () => $a5e158267d55538e$export$a2ba89726971a90f);
$parcel$export(module.exports, "default", () => $a5e158267d55538e$export$2e2bcd8739ae039);

var $g93E3 = parcelRequire("g93E3");

var $9NJu3 = parcelRequire("9NJu3");
function $a5e158267d55538e$var$rotationIdentity(lambda, phi) {
    if ((0, $9NJu3.abs)(lambda) > (0, $9NJu3.pi)) lambda -= Math.round(lambda / (0, $9NJu3.tau)) * (0, $9NJu3.tau);
    return [
        lambda,
        phi
    ];
}
$a5e158267d55538e$var$rotationIdentity.invert = $a5e158267d55538e$var$rotationIdentity;
function $a5e158267d55538e$export$a2ba89726971a90f(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= (0, $9NJu3.tau)) ? deltaPhi || deltaGamma ? (0, $g93E3.default)($a5e158267d55538e$var$rotationLambda(deltaLambda), $a5e158267d55538e$var$rotationPhiGamma(deltaPhi, deltaGamma)) : $a5e158267d55538e$var$rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? $a5e158267d55538e$var$rotationPhiGamma(deltaPhi, deltaGamma) : $a5e158267d55538e$var$rotationIdentity;
}
function $a5e158267d55538e$var$forwardRotationLambda(deltaLambda) {
    return function(lambda, phi) {
        lambda += deltaLambda;
        if ((0, $9NJu3.abs)(lambda) > (0, $9NJu3.pi)) lambda -= Math.round(lambda / (0, $9NJu3.tau)) * (0, $9NJu3.tau);
        return [
            lambda,
            phi
        ];
    };
}
function $a5e158267d55538e$var$rotationLambda(deltaLambda) {
    var rotation = $a5e158267d55538e$var$forwardRotationLambda(deltaLambda);
    rotation.invert = $a5e158267d55538e$var$forwardRotationLambda(-deltaLambda);
    return rotation;
}
function $a5e158267d55538e$var$rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = (0, $9NJu3.cos)(deltaPhi), sinDeltaPhi = (0, $9NJu3.sin)(deltaPhi), cosDeltaGamma = (0, $9NJu3.cos)(deltaGamma), sinDeltaGamma = (0, $9NJu3.sin)(deltaGamma);
    function rotation(lambda, phi) {
        var cosPhi = (0, $9NJu3.cos)(phi), x = (0, $9NJu3.cos)(lambda) * cosPhi, y = (0, $9NJu3.sin)(lambda) * cosPhi, z = (0, $9NJu3.sin)(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
            (0, $9NJu3.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
            (0, $9NJu3.asin)(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
    }
    rotation.invert = function(lambda, phi) {
        var cosPhi = (0, $9NJu3.cos)(phi), x = (0, $9NJu3.cos)(lambda) * cosPhi, y = (0, $9NJu3.sin)(lambda) * cosPhi, z = (0, $9NJu3.sin)(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
            (0, $9NJu3.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
            (0, $9NJu3.asin)(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
    };
    return rotation;
}
function $a5e158267d55538e$export$2e2bcd8739ae039(rotate) {
    rotate = $a5e158267d55538e$export$a2ba89726971a90f(rotate[0] * (0, $9NJu3.radians), rotate[1] * (0, $9NJu3.radians), rotate.length > 2 ? rotate[2] * (0, $9NJu3.radians) : 0);
    function forward(coordinates) {
        coordinates = rotate(coordinates[0] * (0, $9NJu3.radians), coordinates[1] * (0, $9NJu3.radians));
        return coordinates[0] *= (0, $9NJu3.degrees), coordinates[1] *= (0, $9NJu3.degrees), coordinates;
    }
    forward.invert = function(coordinates) {
        coordinates = rotate.invert(coordinates[0] * (0, $9NJu3.radians), coordinates[1] * (0, $9NJu3.radians));
        return coordinates[0] *= (0, $9NJu3.degrees), coordinates[1] *= (0, $9NJu3.degrees), coordinates;
    };
    return forward;
}

});
parcelRegister("g93E3", function(module, exports) {

$parcel$export(module.exports, "default", () => $bc105071ff0ececa$export$2e2bcd8739ae039);
function $bc105071ff0ececa$export$2e2bcd8739ae039(a, b) {
    function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
}

});




parcelRegister("ggPYL", function(module, exports) {

$parcel$export(module.exports, "default", () => $bd8675e803e889b6$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $4JNcC = parcelRequire("4JNcC");

var $epZt3 = parcelRequire("epZt3");

var $92RI9 = parcelRequire("92RI9");

var $6cF2a = parcelRequire("6cF2a");
var $bd8675e803e889b6$var$clipMax = 1e9, $bd8675e803e889b6$var$clipMin = -$bd8675e803e889b6$var$clipMax;
function $bd8675e803e889b6$export$2e2bcd8739ae039(x0, y0, x1, y1) {
    function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }
    function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        while ((a = (a + direction + 4) % 4) !== a1);
        else stream.point(to[0], to[1]);
    }
    function corner(p, direction) {
        return (0, $9NJu3.abs)(p[0] - x0) < (0, $9NJu3.epsilon) ? direction > 0 ? 0 : 3 : (0, $9NJu3.abs)(p[0] - x1) < (0, $9NJu3.epsilon) ? direction > 0 ? 2 : 1 : (0, $9NJu3.abs)(p[1] - y0) < (0, $9NJu3.epsilon) ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }
    function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
    }
    function comparePoint(a, b) {
        var ca = corner(a, 1), cb = corner(b, 1);
        return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
    return function(stream) {
        var activeStream = stream, bufferStream = (0, $4JNcC.default)(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
        var clipStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: polygonStart,
            polygonEnd: polygonEnd
        };
        function point(x, y) {
            if (visible(x, y)) activeStream.point(x, y);
        }
        function polygonInside() {
            var winding = 0;
            for(var i = 0, n = polygon.length; i < n; ++i)for(var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j){
                a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                if (a1 <= y1) {
                    if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
                } else if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
            return winding;
        }
        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
            activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }
        function polygonEnd() {
            var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = (0, $6cF2a.default)(segments)).length;
            if (cleanInside || visible) {
                stream.polygonStart();
                if (cleanInside) {
                    stream.lineStart();
                    interpolate(null, null, 1, stream);
                    stream.lineEnd();
                }
                if (visible) (0, $92RI9.default)(segments, compareIntersection, startInside, interpolate, stream);
                stream.polygonEnd();
            }
            activeStream = stream, segments = polygon = ring = null;
        }
        function lineStart() {
            clipStream.point = linePoint;
            if (polygon) polygon.push(ring = []);
            first = true;
            v_ = false;
            x_ = y_ = NaN;
        }
        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
            if (segments) {
                linePoint(x__, y__);
                if (v__ && v_) bufferStream.rejoin();
                segments.push(bufferStream.result());
            }
            clipStream.point = point;
            if (v_) activeStream.lineEnd();
        }
        function linePoint(x, y) {
            var v = visible(x, y);
            if (polygon) ring.push([
                x,
                y
            ]);
            if (first) {
                x__ = x, y__ = y, v__ = v;
                first = false;
                if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                }
            } else if (v && v_) activeStream.point(x, y);
            else {
                var a = [
                    x_ = Math.max($bd8675e803e889b6$var$clipMin, Math.min($bd8675e803e889b6$var$clipMax, x_)),
                    y_ = Math.max($bd8675e803e889b6$var$clipMin, Math.min($bd8675e803e889b6$var$clipMax, y_))
                ], b = [
                    x = Math.max($bd8675e803e889b6$var$clipMin, Math.min($bd8675e803e889b6$var$clipMax, x)),
                    y = Math.max($bd8675e803e889b6$var$clipMin, Math.min($bd8675e803e889b6$var$clipMax, y))
                ];
                if ((0, $epZt3.default)(a, b, x0, y0, x1, y1)) {
                    if (!v_) {
                        activeStream.lineStart();
                        activeStream.point(a[0], a[1]);
                    }
                    activeStream.point(b[0], b[1]);
                    if (!v) activeStream.lineEnd();
                    clean = false;
                } else if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                    clean = false;
                }
            }
            x_ = x, y_ = y, v_ = v;
        }
        return clipStream;
    };
}

});
parcelRegister("epZt3", function(module, exports) {

$parcel$export(module.exports, "default", () => $a7f314ad74b07a41$export$2e2bcd8739ae039);
function $a7f314ad74b07a41$export$2e2bcd8739ae039(a, b, x0, y0, x1, y1) {
    var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    }
    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    }
    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    }
    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    }
    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
}

});


parcelRegister("e7iJQ", function(module, exports) {

$parcel$export(module.exports, "default", () => $a470412e79d2b9bc$export$2e2bcd8739ae039);
var $a470412e79d2b9bc$export$2e2bcd8739ae039 = (x)=>x;

});

parcelRegister("lU9iO", function(module, exports) {

$parcel$export(module.exports, "transformer", () => $ff260b35bf936d9e$export$6b468dcfb64c653c);
function $ff260b35bf936d9e$export$2e2bcd8739ae039(methods) {
    return {
        stream: $ff260b35bf936d9e$export$6b468dcfb64c653c(methods)
    };
}
function $ff260b35bf936d9e$export$6b468dcfb64c653c(methods) {
    return function(stream) {
        var s = new $ff260b35bf936d9e$var$TransformStream;
        for(var key in methods)s[key] = methods[key];
        s.stream = stream;
        return s;
    };
}
function $ff260b35bf936d9e$var$TransformStream() {}
$ff260b35bf936d9e$var$TransformStream.prototype = {
    constructor: $ff260b35bf936d9e$var$TransformStream,
    point: function(x, y) {
        this.stream.point(x, y);
    },
    sphere: function() {
        this.stream.sphere();
    },
    lineStart: function() {
        this.stream.lineStart();
    },
    lineEnd: function() {
        this.stream.lineEnd();
    },
    polygonStart: function() {
        this.stream.polygonStart();
    },
    polygonEnd: function() {
        this.stream.polygonEnd();
    }
};

});

parcelRegister("a2YPV", function(module, exports) {

$parcel$export(module.exports, "fitExtent", () => $7509482736911e47$export$e450184041869e7f);
$parcel$export(module.exports, "fitSize", () => $7509482736911e47$export$33a367fa1728c3ba);
$parcel$export(module.exports, "fitWidth", () => $7509482736911e47$export$7d8f2192ef31c5a7);
$parcel$export(module.exports, "fitHeight", () => $7509482736911e47$export$7069bab0d2ced675);

var $j0A9E = parcelRequire("j0A9E");

var $b4rVz = parcelRequire("b4rVz");
function $7509482736911e47$var$fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([
        0,
        0
    ]);
    if (clip != null) projection.clipExtent(null);
    (0, $j0A9E.default)(object, projection.stream((0, $b4rVz.default)));
    fitBounds((0, $b4rVz.default).result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
}
function $7509482736911e47$export$e450184041869e7f(projection, extent, object) {
    return $7509482736911e47$var$fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function $7509482736911e47$export$33a367fa1728c3ba(projection, size, object) {
    return $7509482736911e47$export$e450184041869e7f(projection, [
        [
            0,
            0
        ],
        size
    ], object);
}
function $7509482736911e47$export$7d8f2192ef31c5a7(projection, width, object) {
    return $7509482736911e47$var$fit(projection, function(b) {
        var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function $7509482736911e47$export$7069bab0d2ced675(projection, height, object) {
    return $7509482736911e47$var$fit(projection, function(b) {
        var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}

});
parcelRegister("j0A9E", function(module, exports) {

$parcel$export(module.exports, "default", () => $dd6a0ff623e6e613$export$2e2bcd8739ae039);
function $dd6a0ff623e6e613$var$streamGeometry(geometry, stream) {
    if (geometry && $dd6a0ff623e6e613$var$streamGeometryType.hasOwnProperty(geometry.type)) $dd6a0ff623e6e613$var$streamGeometryType[geometry.type](geometry, stream);
}
var $dd6a0ff623e6e613$var$streamObjectType = {
    Feature: function(object, stream) {
        $dd6a0ff623e6e613$var$streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while(++i < n)$dd6a0ff623e6e613$var$streamGeometry(features[i].geometry, stream);
    }
};
var $dd6a0ff623e6e613$var$streamGeometryType = {
    Sphere: function(object, stream) {
        stream.sphere();
    },
    Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
        $dd6a0ff623e6e613$var$streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)$dd6a0ff623e6e613$var$streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
        $dd6a0ff623e6e613$var$streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)$dd6a0ff623e6e613$var$streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while(++i < n)$dd6a0ff623e6e613$var$streamGeometry(geometries[i], stream);
    }
};
function $dd6a0ff623e6e613$var$streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while(++i < n)coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
}
function $dd6a0ff623e6e613$var$streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while(++i < n)$dd6a0ff623e6e613$var$streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
}
function $dd6a0ff623e6e613$export$2e2bcd8739ae039(object, stream) {
    if (object && $dd6a0ff623e6e613$var$streamObjectType.hasOwnProperty(object.type)) $dd6a0ff623e6e613$var$streamObjectType[object.type](object, stream);
    else $dd6a0ff623e6e613$var$streamGeometry(object, stream);
}

});

parcelRegister("b4rVz", function(module, exports) {

$parcel$export(module.exports, "default", () => $80f5bb494bf3a919$export$2e2bcd8739ae039);

var $6A3Rm = parcelRequire("6A3Rm");
var $80f5bb494bf3a919$var$x0 = Infinity, $80f5bb494bf3a919$var$y0 = $80f5bb494bf3a919$var$x0, $80f5bb494bf3a919$var$x1 = -$80f5bb494bf3a919$var$x0, $80f5bb494bf3a919$var$y1 = $80f5bb494bf3a919$var$x1;
var $80f5bb494bf3a919$var$boundsStream = {
    point: $80f5bb494bf3a919$var$boundsPoint,
    lineStart: (0, $6A3Rm.default),
    lineEnd: (0, $6A3Rm.default),
    polygonStart: (0, $6A3Rm.default),
    polygonEnd: (0, $6A3Rm.default),
    result: function() {
        var bounds = [
            [
                $80f5bb494bf3a919$var$x0,
                $80f5bb494bf3a919$var$y0
            ],
            [
                $80f5bb494bf3a919$var$x1,
                $80f5bb494bf3a919$var$y1
            ]
        ];
        $80f5bb494bf3a919$var$x1 = $80f5bb494bf3a919$var$y1 = -($80f5bb494bf3a919$var$y0 = $80f5bb494bf3a919$var$x0 = Infinity);
        return bounds;
    }
};
function $80f5bb494bf3a919$var$boundsPoint(x, y) {
    if (x < $80f5bb494bf3a919$var$x0) $80f5bb494bf3a919$var$x0 = x;
    if (x > $80f5bb494bf3a919$var$x1) $80f5bb494bf3a919$var$x1 = x;
    if (y < $80f5bb494bf3a919$var$y0) $80f5bb494bf3a919$var$y0 = y;
    if (y > $80f5bb494bf3a919$var$y1) $80f5bb494bf3a919$var$y1 = y;
}
var $80f5bb494bf3a919$export$2e2bcd8739ae039 = $80f5bb494bf3a919$var$boundsStream;

});


parcelRegister("bAc9P", function(module, exports) {

$parcel$export(module.exports, "default", () => $86ec7cbb18708982$export$2e2bcd8739ae039);

var $8fcLQ = parcelRequire("8fcLQ");

var $9NJu3 = parcelRequire("9NJu3");

var $lU9iO = parcelRequire("lU9iO");
var $86ec7cbb18708982$var$maxDepth = 16, $86ec7cbb18708982$var$cosMinDistance = (0, $9NJu3.cos)(30 * (0, $9NJu3.radians)); // cos(minimum angular distance)
function $86ec7cbb18708982$export$2e2bcd8739ae039(project, delta2) {
    return +delta2 ? $86ec7cbb18708982$var$resample(project, delta2) : $86ec7cbb18708982$var$resampleNone(project);
}
function $86ec7cbb18708982$var$resampleNone(project) {
    return (0, $lU9iO.transformer)({
        point: function(x, y) {
            x = project(x, y);
            this.stream.point(x[0], x[1]);
        }
    });
}
function $86ec7cbb18708982$var$resample(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
            var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = (0, $9NJu3.sqrt)(a * a + b * b + c * c), phi2 = (0, $9NJu3.asin)(c /= m), lambda2 = (0, $9NJu3.abs)((0, $9NJu3.abs)(c) - 1) < (0, $9NJu3.epsilon) || (0, $9NJu3.abs)(lambda0 - lambda1) < (0, $9NJu3.epsilon) ? (lambda0 + lambda1) / 2 : (0, $9NJu3.atan2)(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
            if (dz * dz / d2 > delta2 // perpendicular projected distance
             || (0, $9NJu3.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
             || a0 * a1 + b0 * b1 + c0 * c1 < $86ec7cbb18708982$var$cosMinDistance) {
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                stream.point(x2, y2);
                resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
            }
        }
    }
    return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, lambda0, x0, y0, a0, b0, c0; // previous point
        var resampleStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                stream.polygonStart();
                resampleStream.lineStart = ringStart;
            },
            polygonEnd: function() {
                stream.polygonEnd();
                resampleStream.lineStart = lineStart;
            }
        };
        function point(x, y) {
            x = project(x, y);
            stream.point(x[0], x[1]);
        }
        function lineStart() {
            x0 = NaN;
            resampleStream.point = linePoint;
            stream.lineStart();
        }
        function linePoint(lambda, phi) {
            var c = (0, $8fcLQ.cartesian)([
                lambda,
                phi
            ]), p = project(lambda, phi);
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], $86ec7cbb18708982$var$maxDepth, stream);
            stream.point(x0, y0);
        }
        function lineEnd() {
            resampleStream.point = point;
            stream.lineEnd();
        }
        function ringStart() {
            lineStart();
            resampleStream.point = ringPoint;
            resampleStream.lineEnd = ringEnd;
        }
        function ringPoint(lambda, phi) {
            linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
            resampleStream.point = linePoint;
        }
        function ringEnd() {
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, $86ec7cbb18708982$var$maxDepth, stream);
            resampleStream.lineEnd = lineEnd;
            lineEnd();
        }
        return resampleStream;
    };
}

});



parcelRegister("gilRa", function(module, exports) {

$parcel$export(module.exports, "cylindricalEqualAreaRaw", () => $bdcf480396111995$export$ae68c6db8b65046a);

var $9NJu3 = parcelRequire("9NJu3");
function $bdcf480396111995$export$ae68c6db8b65046a(phi0) {
    var cosPhi0 = (0, $9NJu3.cos)(phi0);
    function forward(lambda, phi) {
        return [
            lambda * cosPhi0,
            (0, $9NJu3.sin)(phi) / cosPhi0
        ];
    }
    forward.invert = function(x, y) {
        return [
            x / cosPhi0,
            (0, $9NJu3.asin)(y * cosPhi0)
        ];
    };
    return forward;
}

});



parcelRegister("5xJy1", function(module, exports) {

$parcel$export(module.exports, "default", () => $40935dac63a11941$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $6Mtuf = parcelRequire("6Mtuf");

var $jM6Fx = parcelRequire("jM6Fx");

var $a2YPV = parcelRequire("a2YPV");
// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function $40935dac63a11941$var$multiplex(streams) {
    var n = streams.length;
    return {
        point: function(x, y) {
            var i = -1;
            while(++i < n)streams[i].point(x, y);
        },
        sphere: function() {
            var i = -1;
            while(++i < n)streams[i].sphere();
        },
        lineStart: function() {
            var i = -1;
            while(++i < n)streams[i].lineStart();
        },
        lineEnd: function() {
            var i = -1;
            while(++i < n)streams[i].lineEnd();
        },
        polygonStart: function() {
            var i = -1;
            while(++i < n)streams[i].polygonStart();
        },
        polygonEnd: function() {
            var i = -1;
            while(++i < n)streams[i].polygonEnd();
        }
    };
}
function $40935dac63a11941$export$2e2bcd8739ae039() {
    var cache, cacheStream, lower48 = (0, $6Mtuf.default)(), lower48Point, alaska = (0, $jM6Fx.default)().rotate([
        154,
        0
    ]).center([
        -2,
        58.5
    ]).parallels([
        55,
        65
    ]), alaskaPoint, hawaii = (0, $jM6Fx.default)().rotate([
        157,
        0
    ]).center([
        -3,
        19.9
    ]).parallels([
        8,
        18
    ]), hawaiiPoint, point, pointStream = {
        point: function(x, y) {
            point = [
                x,
                y
            ];
        }
    };
    function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
    }
    albersUsa.invert = function(coordinates) {
        var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
        return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = $40935dac63a11941$var$multiplex([
            lower48.stream(cacheStream = stream),
            alaska.stream(stream),
            hawaii.stream(stream)
        ]);
    };
    albersUsa.precision = function(_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return reset();
    };
    albersUsa.scale = function(_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];
        lower48Point = lower48.translate(_).clipExtent([
            [
                x - 0.455 * k,
                y - 0.238 * k
            ],
            [
                x + 0.455 * k,
                y + 0.238 * k
            ]
        ]).stream(pointStream);
        alaskaPoint = alaska.translate([
            x - 0.307 * k,
            y + 0.201 * k
        ]).clipExtent([
            [
                x - 0.425 * k + (0, $9NJu3.epsilon),
                y + 0.120 * k + (0, $9NJu3.epsilon)
            ],
            [
                x - 0.214 * k - (0, $9NJu3.epsilon),
                y + 0.234 * k - (0, $9NJu3.epsilon)
            ]
        ]).stream(pointStream);
        hawaiiPoint = hawaii.translate([
            x - 0.205 * k,
            y + 0.212 * k
        ]).clipExtent([
            [
                x - 0.214 * k + (0, $9NJu3.epsilon),
                y + 0.166 * k + (0, $9NJu3.epsilon)
            ],
            [
                x - 0.115 * k - (0, $9NJu3.epsilon),
                y + 0.234 * k - (0, $9NJu3.epsilon)
            ]
        ]).stream(pointStream);
        return reset();
    };
    albersUsa.fitExtent = function(extent, object) {
        return (0, $a2YPV.fitExtent)(albersUsa, extent, object);
    };
    albersUsa.fitSize = function(size, object) {
        return (0, $a2YPV.fitSize)(albersUsa, size, object);
    };
    albersUsa.fitWidth = function(width, object) {
        return (0, $a2YPV.fitWidth)(albersUsa, width, object);
    };
    albersUsa.fitHeight = function(height, object) {
        return (0, $a2YPV.fitHeight)(albersUsa, height, object);
    };
    function reset() {
        cache = cacheStream = null;
        return albersUsa;
    }
    return albersUsa.scale(1070);
}

});

parcelRegister("3ykGQ", function(module, exports) {

$parcel$export(module.exports, "default", () => $296498b3b2f6338c$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $lTexe = parcelRequire("lTexe");

var $eoGeB = parcelRequire("eoGeB");
var $296498b3b2f6338c$export$5e11f94fc4a8d2c6 = (0, $lTexe.azimuthalRaw)(function(cxcy) {
    return (0, $9NJu3.sqrt)(2 / (1 + cxcy));
});
$296498b3b2f6338c$export$5e11f94fc4a8d2c6.invert = (0, $lTexe.azimuthalInvert)(function(z) {
    return 2 * (0, $9NJu3.asin)(z / 2);
});
function $296498b3b2f6338c$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($296498b3b2f6338c$export$5e11f94fc4a8d2c6).scale(124.75).clipAngle(179.999);
}

});
parcelRegister("lTexe", function(module, exports) {

$parcel$export(module.exports, "azimuthalRaw", () => $fefa026062e03d6a$export$f1211ac1bdb0796);
$parcel$export(module.exports, "azimuthalInvert", () => $fefa026062e03d6a$export$3cee429f13e44eac);

var $9NJu3 = parcelRequire("9NJu3");
function $fefa026062e03d6a$export$f1211ac1bdb0796(scale) {
    return function(x, y) {
        var cx = (0, $9NJu3.cos)(x), cy = (0, $9NJu3.cos)(y), k = scale(cx * cy);
        if (k === Infinity) return [
            2,
            0
        ];
        return [
            k * cy * (0, $9NJu3.sin)(x),
            k * (0, $9NJu3.sin)(y)
        ];
    };
}
function $fefa026062e03d6a$export$3cee429f13e44eac(angle) {
    return function(x, y) {
        var z = (0, $9NJu3.sqrt)(x * x + y * y), c = angle(z), sc = (0, $9NJu3.sin)(c), cc = (0, $9NJu3.cos)(c);
        return [
            (0, $9NJu3.atan2)(x * sc, z * cc),
            (0, $9NJu3.asin)(z && y * sc / z)
        ];
    };
}

});


parcelRegister("jSwZc", function(module, exports) {

$parcel$export(module.exports, "default", () => $e78ca5ce940ecce5$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $lTexe = parcelRequire("lTexe");

var $eoGeB = parcelRequire("eoGeB");
var $e78ca5ce940ecce5$export$b94a4d6aa3dd25c = (0, $lTexe.azimuthalRaw)(function(c) {
    return (c = (0, $9NJu3.acos)(c)) && c / (0, $9NJu3.sin)(c);
});
$e78ca5ce940ecce5$export$b94a4d6aa3dd25c.invert = (0, $lTexe.azimuthalInvert)(function(z) {
    return z;
});
function $e78ca5ce940ecce5$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($e78ca5ce940ecce5$export$b94a4d6aa3dd25c).scale(79.4188).clipAngle(179.999);
}

});

parcelRegister("053mi", function(module, exports) {

$parcel$export(module.exports, "default", () => $00f312b3da7d8714$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $05dj1 = parcelRequire("05dj1");

var $hbBS3 = parcelRequire("hbBS3");
function $00f312b3da7d8714$var$tany(y) {
    return (0, $9NJu3.tan)(((0, $9NJu3.halfPi) + y) / 2);
}
function $00f312b3da7d8714$export$2b1bc913962ed170(y0, y1) {
    var cy0 = (0, $9NJu3.cos)(y0), n = y0 === y1 ? (0, $9NJu3.sin)(y0) : (0, $9NJu3.log)(cy0 / (0, $9NJu3.cos)(y1)) / (0, $9NJu3.log)($00f312b3da7d8714$var$tany(y1) / $00f312b3da7d8714$var$tany(y0)), f = cy0 * (0, $9NJu3.pow)($00f312b3da7d8714$var$tany(y0), n) / n;
    if (!n) return 0, $hbBS3.mercatorRaw;
    function project(x, y) {
        if (f > 0) {
            if (y < -(0, $9NJu3.halfPi) + (0, $9NJu3.epsilon)) y = -(0, $9NJu3.halfPi) + (0, $9NJu3.epsilon);
        } else if (y > (0, $9NJu3.halfPi) - (0, $9NJu3.epsilon)) y = (0, $9NJu3.halfPi) - (0, $9NJu3.epsilon);
        var r = f / (0, $9NJu3.pow)($00f312b3da7d8714$var$tany(y), n);
        return [
            r * (0, $9NJu3.sin)(n * x),
            f - r * (0, $9NJu3.cos)(n * x)
        ];
    }
    project.invert = function(x, y) {
        var fy = f - y, r = (0, $9NJu3.sign)(n) * (0, $9NJu3.sqrt)(x * x + fy * fy), l = (0, $9NJu3.atan2)(x, (0, $9NJu3.abs)(fy)) * (0, $9NJu3.sign)(fy);
        if (fy * n < 0) l -= (0, $9NJu3.pi) * (0, $9NJu3.sign)(x) * (0, $9NJu3.sign)(fy);
        return [
            l / n,
            2 * (0, $9NJu3.atan)((0, $9NJu3.pow)(f / r, 1 / n)) - (0, $9NJu3.halfPi)
        ];
    };
    return project;
}
function $00f312b3da7d8714$export$2e2bcd8739ae039() {
    return (0, $05dj1.conicProjection)($00f312b3da7d8714$export$2b1bc913962ed170).scale(109.5).parallels([
        30,
        30
    ]);
}

});
parcelRegister("hbBS3", function(module, exports) {

$parcel$export(module.exports, "mercatorRaw", () => $c830d7169c63af7a$export$94ff8a57e9b91cc3);
$parcel$export(module.exports, "default", () => $c830d7169c63af7a$export$2e2bcd8739ae039);
$parcel$export(module.exports, "mercatorProjection", () => $c830d7169c63af7a$export$44b9b66a01f2127b);

var $9NJu3 = parcelRequire("9NJu3");

var $eeYyn = parcelRequire("eeYyn");

var $eoGeB = parcelRequire("eoGeB");
function $c830d7169c63af7a$export$94ff8a57e9b91cc3(lambda, phi) {
    return [
        lambda,
        (0, $9NJu3.log)((0, $9NJu3.tan)(((0, $9NJu3.halfPi) + phi) / 2))
    ];
}
$c830d7169c63af7a$export$94ff8a57e9b91cc3.invert = function(x, y) {
    return [
        x,
        2 * (0, $9NJu3.atan)((0, $9NJu3.exp)(y)) - (0, $9NJu3.halfPi)
    ];
};
function $c830d7169c63af7a$export$2e2bcd8739ae039() {
    return $c830d7169c63af7a$export$44b9b66a01f2127b($c830d7169c63af7a$export$94ff8a57e9b91cc3).scale(961 / (0, $9NJu3.tau));
}
function $c830d7169c63af7a$export$44b9b66a01f2127b(project) {
    var m = (0, $eoGeB.default)(project), center = m.center, scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, x0 = null, y0, x1, y1; // clip extent
    m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
    };
    m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
    };
    m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
    };
    m.clipExtent = function(_) {
        return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    function reclip() {
        var k = (0, $9NJu3.pi) * scale(), t = m((0, $eeYyn.default)(m.rotate()).invert([
            0,
            0
        ]));
        return clipExtent(x0 == null ? [
            [
                t[0] - k,
                t[1] - k
            ],
            [
                t[0] + k,
                t[1] + k
            ]
        ] : project === $c830d7169c63af7a$export$94ff8a57e9b91cc3 ? [
            [
                Math.max(t[0] - k, x0),
                y0
            ],
            [
                Math.min(t[0] + k, x1),
                y1
            ]
        ] : [
            [
                x0,
                Math.max(t[1] - k, y0)
            ],
            [
                x1,
                Math.min(t[1] + k, y1)
            ]
        ]);
    }
    return reclip();
}

});


parcelRegister("clDmN", function(module, exports) {

$parcel$export(module.exports, "default", () => $8fd5fb94d937df45$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $05dj1 = parcelRequire("05dj1");

var $c4Huc = parcelRequire("c4Huc");
function $8fd5fb94d937df45$export$24f604fe80e5f192(y0, y1) {
    var cy0 = (0, $9NJu3.cos)(y0), n = y0 === y1 ? (0, $9NJu3.sin)(y0) : (cy0 - (0, $9NJu3.cos)(y1)) / (y1 - y0), g = cy0 / n + y0;
    if ((0, $9NJu3.abs)(n) < (0, $9NJu3.epsilon)) return 0, $c4Huc.equirectangularRaw;
    function project(x, y) {
        var gy = g - y, nx = n * x;
        return [
            gy * (0, $9NJu3.sin)(nx),
            g - gy * (0, $9NJu3.cos)(nx)
        ];
    }
    project.invert = function(x, y) {
        var gy = g - y, l = (0, $9NJu3.atan2)(x, (0, $9NJu3.abs)(gy)) * (0, $9NJu3.sign)(gy);
        if (gy * n < 0) l -= (0, $9NJu3.pi) * (0, $9NJu3.sign)(x) * (0, $9NJu3.sign)(gy);
        return [
            l / n,
            g - (0, $9NJu3.sign)(n) * (0, $9NJu3.sqrt)(x * x + gy * gy)
        ];
    };
    return project;
}
function $8fd5fb94d937df45$export$2e2bcd8739ae039() {
    return (0, $05dj1.conicProjection)($8fd5fb94d937df45$export$24f604fe80e5f192).scale(131.154).center([
        0,
        13.9389
    ]);
}

});
parcelRegister("c4Huc", function(module, exports) {

$parcel$export(module.exports, "equirectangularRaw", () => $8ca79730c1351be9$export$f5fee52180f2f058);
$parcel$export(module.exports, "default", () => $8ca79730c1351be9$export$2e2bcd8739ae039);

var $eoGeB = parcelRequire("eoGeB");
function $8ca79730c1351be9$export$f5fee52180f2f058(lambda, phi) {
    return [
        lambda,
        phi
    ];
}
$8ca79730c1351be9$export$f5fee52180f2f058.invert = $8ca79730c1351be9$export$f5fee52180f2f058;
function $8ca79730c1351be9$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($8ca79730c1351be9$export$f5fee52180f2f058).scale(152.63);
}

});


parcelRegister("3YbcC", function(module, exports) {

$parcel$export(module.exports, "default", () => $2e3faa4570d6dedb$export$2e2bcd8739ae039);

var $eoGeB = parcelRequire("eoGeB");

var $9NJu3 = parcelRequire("9NJu3");
var $2e3faa4570d6dedb$var$A1 = 1.340264, $2e3faa4570d6dedb$var$A2 = -0.081106, $2e3faa4570d6dedb$var$A3 = 0.000893, $2e3faa4570d6dedb$var$A4 = 0.003796, $2e3faa4570d6dedb$var$M = (0, $9NJu3.sqrt)(3) / 2, $2e3faa4570d6dedb$var$iterations = 12;
function $2e3faa4570d6dedb$export$a320734067e7a731(lambda, phi) {
    var l = (0, $9NJu3.asin)($2e3faa4570d6dedb$var$M * (0, $9NJu3.sin)(phi)), l2 = l * l, l6 = l2 * l2 * l2;
    return [
        lambda * (0, $9NJu3.cos)(l) / ($2e3faa4570d6dedb$var$M * ($2e3faa4570d6dedb$var$A1 + 3 * $2e3faa4570d6dedb$var$A2 * l2 + l6 * (7 * $2e3faa4570d6dedb$var$A3 + 9 * $2e3faa4570d6dedb$var$A4 * l2))),
        l * ($2e3faa4570d6dedb$var$A1 + $2e3faa4570d6dedb$var$A2 * l2 + l6 * ($2e3faa4570d6dedb$var$A3 + $2e3faa4570d6dedb$var$A4 * l2))
    ];
}
$2e3faa4570d6dedb$export$a320734067e7a731.invert = function(x, y) {
    var l = y, l2 = l * l, l6 = l2 * l2 * l2;
    for(var i = 0, delta, fy, fpy; i < $2e3faa4570d6dedb$var$iterations; ++i){
        fy = l * ($2e3faa4570d6dedb$var$A1 + $2e3faa4570d6dedb$var$A2 * l2 + l6 * ($2e3faa4570d6dedb$var$A3 + $2e3faa4570d6dedb$var$A4 * l2)) - y;
        fpy = $2e3faa4570d6dedb$var$A1 + 3 * $2e3faa4570d6dedb$var$A2 * l2 + l6 * (7 * $2e3faa4570d6dedb$var$A3 + 9 * $2e3faa4570d6dedb$var$A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if ((0, $9NJu3.abs)(delta) < (0, $9NJu3.epsilon2)) break;
    }
    return [
        $2e3faa4570d6dedb$var$M * x * ($2e3faa4570d6dedb$var$A1 + 3 * $2e3faa4570d6dedb$var$A2 * l2 + l6 * (7 * $2e3faa4570d6dedb$var$A3 + 9 * $2e3faa4570d6dedb$var$A4 * l2)) / (0, $9NJu3.cos)(l),
        (0, $9NJu3.asin)((0, $9NJu3.sin)(l) / $2e3faa4570d6dedb$var$M)
    ];
};
function $2e3faa4570d6dedb$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($2e3faa4570d6dedb$export$a320734067e7a731).scale(177.158);
}

});

parcelRegister("cp0Fi", function(module, exports) {

$parcel$export(module.exports, "default", () => $907855e7a571915f$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $lTexe = parcelRequire("lTexe");

var $eoGeB = parcelRequire("eoGeB");
function $907855e7a571915f$export$dc8c6ddfc8b22c85(x, y) {
    var cy = (0, $9NJu3.cos)(y), k = (0, $9NJu3.cos)(x) * cy;
    return [
        cy * (0, $9NJu3.sin)(x) / k,
        (0, $9NJu3.sin)(y) / k
    ];
}
$907855e7a571915f$export$dc8c6ddfc8b22c85.invert = (0, $lTexe.azimuthalInvert)((0, $9NJu3.atan));
function $907855e7a571915f$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($907855e7a571915f$export$dc8c6ddfc8b22c85).scale(144.049).clipAngle(60);
}

});

parcelRegister("2eBI0", function(module, exports) {

$parcel$export(module.exports, "default", () => $1a0a23bf93813219$export$2e2bcd8739ae039);

var $ggPYL = parcelRequire("ggPYL");

var $e7iJQ = parcelRequire("e7iJQ");

var $lU9iO = parcelRequire("lU9iO");

var $a2YPV = parcelRequire("a2YPV");

var $9NJu3 = parcelRequire("9NJu3");
function $1a0a23bf93813219$export$2e2bcd8739ae039() {
    var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa, x0 = null, y0, x1, y1, kx = 1, ky = 1, transform = (0, $lU9iO.transformer)({
        point: function(x, y) {
            var p = projection([
                x,
                y
            ]);
            this.stream.point(p[0], p[1]);
        }
    }), postclip = (0, $e7iJQ.default), cache, cacheStream;
    function reset() {
        kx = k * sx;
        ky = k * sy;
        cache = cacheStream = null;
        return projection;
    }
    function projection(p) {
        var x = p[0] * kx, y = p[1] * ky;
        if (alpha) {
            var t = y * ca - x * sa;
            x = x * ca + y * sa;
            y = t;
        }
        return [
            x + tx,
            y + ty
        ];
    }
    projection.invert = function(p) {
        var x = p[0] - tx, y = p[1] - ty;
        if (alpha) {
            var t = y * ca + x * sa;
            x = x * ca - y * sa;
            y = t;
        }
        return [
            x / kx,
            y / ky
        ];
    };
    projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    };
    projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, $e7iJQ.default) : (0, $ggPYL.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection.scale = function(_) {
        return arguments.length ? (k = +_, reset()) : k;
    };
    projection.translate = function(_) {
        return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [
            tx,
            ty
        ];
    };
    projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * (0, $9NJu3.radians), sa = (0, $9NJu3.sin)(alpha), ca = (0, $9NJu3.cos)(alpha), reset()) : alpha * (0, $9NJu3.degrees);
    };
    projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
    };
    projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
    };
    projection.fitExtent = function(extent, object) {
        return (0, $a2YPV.fitExtent)(projection, extent, object);
    };
    projection.fitSize = function(size, object) {
        return (0, $a2YPV.fitSize)(projection, size, object);
    };
    projection.fitWidth = function(width, object) {
        return (0, $a2YPV.fitWidth)(projection, width, object);
    };
    projection.fitHeight = function(height, object) {
        return (0, $a2YPV.fitHeight)(projection, height, object);
    };
    return projection;
}

});

parcelRegister("38TZB", function(module, exports) {

$parcel$export(module.exports, "default", () => $249d8d67dd83be49$export$2e2bcd8739ae039);

var $eoGeB = parcelRequire("eoGeB");

var $9NJu3 = parcelRequire("9NJu3");
function $249d8d67dd83be49$export$acb6def22fe878e6(lambda, phi) {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    return [
        lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
        phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
    ];
}
$249d8d67dd83be49$export$acb6def22fe878e6.invert = function(x, y) {
    var phi = y, i = 25, delta;
    do {
        var phi2 = phi * phi, phi4 = phi2 * phi2;
        phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.045255 + phi4 * (-0.311325 + 0.259866 * phi2 - 0.005916 * 11 * phi4)));
    }while ((0, $9NJu3.abs)(delta) > (0, $9NJu3.epsilon) && --i > 0);
    return [
        x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
        phi
    ];
};
function $249d8d67dd83be49$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($249d8d67dd83be49$export$acb6def22fe878e6).scale(175.295);
}

});

parcelRegister("c02Pt", function(module, exports) {

$parcel$export(module.exports, "default", () => $8bc7adedb2a920dd$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $lTexe = parcelRequire("lTexe");

var $eoGeB = parcelRequire("eoGeB");
function $8bc7adedb2a920dd$export$1cd9c2eb846182a(x, y) {
    return [
        (0, $9NJu3.cos)(y) * (0, $9NJu3.sin)(x),
        (0, $9NJu3.sin)(y)
    ];
}
$8bc7adedb2a920dd$export$1cd9c2eb846182a.invert = (0, $lTexe.azimuthalInvert)((0, $9NJu3.asin));
function $8bc7adedb2a920dd$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($8bc7adedb2a920dd$export$1cd9c2eb846182a).scale(249.5).clipAngle(90 + (0, $9NJu3.epsilon));
}

});

parcelRegister("fQEsR", function(module, exports) {

$parcel$export(module.exports, "default", () => $b89b19c108f66ac0$export$2e2bcd8739ae039);

var $e7iJQ = parcelRequire("e7iJQ");

var $j0A9E = parcelRequire("j0A9E");

var $l9wL8 = parcelRequire("l9wL8");

var $b4rVz = parcelRequire("b4rVz");

var $2nCUm = parcelRequire("2nCUm");

var $56gwg = parcelRequire("56gwg");

var $399WE = parcelRequire("399WE");

var $b3B1e = parcelRequire("b3B1e");
function $b89b19c108f66ac0$export$2e2bcd8739ae039(projection, context) {
    let digits = 3, pointRadius = 4.5, projectionStream, contextStream;
    function path(object) {
        if (object) {
            if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
            (0, $j0A9E.default)(object, projectionStream(contextStream));
        }
        return contextStream.result();
    }
    path.area = function(object) {
        (0, $j0A9E.default)(object, projectionStream((0, $l9wL8.default)));
        return (0, $l9wL8.default).result();
    };
    path.measure = function(object) {
        (0, $j0A9E.default)(object, projectionStream((0, $399WE.default)));
        return (0, $399WE.default).result();
    };
    path.bounds = function(object) {
        (0, $j0A9E.default)(object, projectionStream((0, $b4rVz.default)));
        return (0, $b4rVz.default).result();
    };
    path.centroid = function(object) {
        (0, $j0A9E.default)(object, projectionStream((0, $2nCUm.default)));
        return (0, $2nCUm.default).result();
    };
    path.projection = function(_) {
        if (!arguments.length) return projection;
        projectionStream = _ == null ? (projection = null, $e7iJQ.default) : (projection = _).stream;
        return path;
    };
    path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new (0, $b3B1e.default)(digits)) : new (0, $56gwg.default)(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
    };
    path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
    };
    path.digits = function(_) {
        if (!arguments.length) return digits;
        if (_ == null) digits = null;
        else {
            const d = Math.floor(_);
            if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
            digits = d;
        }
        if (context === null) contextStream = new (0, $b3B1e.default)(digits);
        return path;
    };
    return path.projection(projection).digits(digits).context(context);
}

});
parcelRegister("l9wL8", function(module, exports) {

$parcel$export(module.exports, "default", () => $f663d98fd9312e2a$export$2e2bcd8739ae039);

var $2qYWQ = parcelRequire("2qYWQ");

var $9NJu3 = parcelRequire("9NJu3");

var $6A3Rm = parcelRequire("6A3Rm");
var $f663d98fd9312e2a$var$areaSum = new (0, $2qYWQ.Adder)(), $f663d98fd9312e2a$var$areaRingSum = new (0, $2qYWQ.Adder)(), $f663d98fd9312e2a$var$x00, $f663d98fd9312e2a$var$y00, $f663d98fd9312e2a$var$x0, $f663d98fd9312e2a$var$y0;
var $f663d98fd9312e2a$var$areaStream = {
    point: (0, $6A3Rm.default),
    lineStart: (0, $6A3Rm.default),
    lineEnd: (0, $6A3Rm.default),
    polygonStart: function() {
        $f663d98fd9312e2a$var$areaStream.lineStart = $f663d98fd9312e2a$var$areaRingStart;
        $f663d98fd9312e2a$var$areaStream.lineEnd = $f663d98fd9312e2a$var$areaRingEnd;
    },
    polygonEnd: function() {
        $f663d98fd9312e2a$var$areaStream.lineStart = $f663d98fd9312e2a$var$areaStream.lineEnd = $f663d98fd9312e2a$var$areaStream.point = (0, $6A3Rm.default);
        $f663d98fd9312e2a$var$areaSum.add((0, $9NJu3.abs)($f663d98fd9312e2a$var$areaRingSum));
        $f663d98fd9312e2a$var$areaRingSum = new (0, $2qYWQ.Adder)();
    },
    result: function() {
        var area = $f663d98fd9312e2a$var$areaSum / 2;
        $f663d98fd9312e2a$var$areaSum = new (0, $2qYWQ.Adder)();
        return area;
    }
};
function $f663d98fd9312e2a$var$areaRingStart() {
    $f663d98fd9312e2a$var$areaStream.point = $f663d98fd9312e2a$var$areaPointFirst;
}
function $f663d98fd9312e2a$var$areaPointFirst(x, y) {
    $f663d98fd9312e2a$var$areaStream.point = $f663d98fd9312e2a$var$areaPoint;
    $f663d98fd9312e2a$var$x00 = $f663d98fd9312e2a$var$x0 = x, $f663d98fd9312e2a$var$y00 = $f663d98fd9312e2a$var$y0 = y;
}
function $f663d98fd9312e2a$var$areaPoint(x, y) {
    $f663d98fd9312e2a$var$areaRingSum.add($f663d98fd9312e2a$var$y0 * x - $f663d98fd9312e2a$var$x0 * y);
    $f663d98fd9312e2a$var$x0 = x, $f663d98fd9312e2a$var$y0 = y;
}
function $f663d98fd9312e2a$var$areaRingEnd() {
    $f663d98fd9312e2a$var$areaPoint($f663d98fd9312e2a$var$x00, $f663d98fd9312e2a$var$y00);
}
var $f663d98fd9312e2a$export$2e2bcd8739ae039 = $f663d98fd9312e2a$var$areaStream;

});

parcelRegister("2nCUm", function(module, exports) {

$parcel$export(module.exports, "default", () => $1bbbe912bbae19c1$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");
// TODO Enforce positive area for exterior, negative area for interior?
var $1bbbe912bbae19c1$var$X0 = 0, $1bbbe912bbae19c1$var$Y0 = 0, $1bbbe912bbae19c1$var$Z0 = 0, $1bbbe912bbae19c1$var$X1 = 0, $1bbbe912bbae19c1$var$Y1 = 0, $1bbbe912bbae19c1$var$Z1 = 0, $1bbbe912bbae19c1$var$X2 = 0, $1bbbe912bbae19c1$var$Y2 = 0, $1bbbe912bbae19c1$var$Z2 = 0, $1bbbe912bbae19c1$var$x00, $1bbbe912bbae19c1$var$y00, $1bbbe912bbae19c1$var$x0, $1bbbe912bbae19c1$var$y0;
var $1bbbe912bbae19c1$var$centroidStream = {
    point: $1bbbe912bbae19c1$var$centroidPoint,
    lineStart: $1bbbe912bbae19c1$var$centroidLineStart,
    lineEnd: $1bbbe912bbae19c1$var$centroidLineEnd,
    polygonStart: function() {
        $1bbbe912bbae19c1$var$centroidStream.lineStart = $1bbbe912bbae19c1$var$centroidRingStart;
        $1bbbe912bbae19c1$var$centroidStream.lineEnd = $1bbbe912bbae19c1$var$centroidRingEnd;
    },
    polygonEnd: function() {
        $1bbbe912bbae19c1$var$centroidStream.point = $1bbbe912bbae19c1$var$centroidPoint;
        $1bbbe912bbae19c1$var$centroidStream.lineStart = $1bbbe912bbae19c1$var$centroidLineStart;
        $1bbbe912bbae19c1$var$centroidStream.lineEnd = $1bbbe912bbae19c1$var$centroidLineEnd;
    },
    result: function() {
        var centroid = $1bbbe912bbae19c1$var$Z2 ? [
            $1bbbe912bbae19c1$var$X2 / $1bbbe912bbae19c1$var$Z2,
            $1bbbe912bbae19c1$var$Y2 / $1bbbe912bbae19c1$var$Z2
        ] : $1bbbe912bbae19c1$var$Z1 ? [
            $1bbbe912bbae19c1$var$X1 / $1bbbe912bbae19c1$var$Z1,
            $1bbbe912bbae19c1$var$Y1 / $1bbbe912bbae19c1$var$Z1
        ] : $1bbbe912bbae19c1$var$Z0 ? [
            $1bbbe912bbae19c1$var$X0 / $1bbbe912bbae19c1$var$Z0,
            $1bbbe912bbae19c1$var$Y0 / $1bbbe912bbae19c1$var$Z0
        ] : [
            NaN,
            NaN
        ];
        $1bbbe912bbae19c1$var$X0 = $1bbbe912bbae19c1$var$Y0 = $1bbbe912bbae19c1$var$Z0 = $1bbbe912bbae19c1$var$X1 = $1bbbe912bbae19c1$var$Y1 = $1bbbe912bbae19c1$var$Z1 = $1bbbe912bbae19c1$var$X2 = $1bbbe912bbae19c1$var$Y2 = $1bbbe912bbae19c1$var$Z2 = 0;
        return centroid;
    }
};
function $1bbbe912bbae19c1$var$centroidPoint(x, y) {
    $1bbbe912bbae19c1$var$X0 += x;
    $1bbbe912bbae19c1$var$Y0 += y;
    ++$1bbbe912bbae19c1$var$Z0;
}
function $1bbbe912bbae19c1$var$centroidLineStart() {
    $1bbbe912bbae19c1$var$centroidStream.point = $1bbbe912bbae19c1$var$centroidPointFirstLine;
}
function $1bbbe912bbae19c1$var$centroidPointFirstLine(x, y) {
    $1bbbe912bbae19c1$var$centroidStream.point = $1bbbe912bbae19c1$var$centroidPointLine;
    $1bbbe912bbae19c1$var$centroidPoint($1bbbe912bbae19c1$var$x0 = x, $1bbbe912bbae19c1$var$y0 = y);
}
function $1bbbe912bbae19c1$var$centroidPointLine(x, y) {
    var dx = x - $1bbbe912bbae19c1$var$x0, dy = y - $1bbbe912bbae19c1$var$y0, z = (0, $9NJu3.sqrt)(dx * dx + dy * dy);
    $1bbbe912bbae19c1$var$X1 += z * ($1bbbe912bbae19c1$var$x0 + x) / 2;
    $1bbbe912bbae19c1$var$Y1 += z * ($1bbbe912bbae19c1$var$y0 + y) / 2;
    $1bbbe912bbae19c1$var$Z1 += z;
    $1bbbe912bbae19c1$var$centroidPoint($1bbbe912bbae19c1$var$x0 = x, $1bbbe912bbae19c1$var$y0 = y);
}
function $1bbbe912bbae19c1$var$centroidLineEnd() {
    $1bbbe912bbae19c1$var$centroidStream.point = $1bbbe912bbae19c1$var$centroidPoint;
}
function $1bbbe912bbae19c1$var$centroidRingStart() {
    $1bbbe912bbae19c1$var$centroidStream.point = $1bbbe912bbae19c1$var$centroidPointFirstRing;
}
function $1bbbe912bbae19c1$var$centroidRingEnd() {
    $1bbbe912bbae19c1$var$centroidPointRing($1bbbe912bbae19c1$var$x00, $1bbbe912bbae19c1$var$y00);
}
function $1bbbe912bbae19c1$var$centroidPointFirstRing(x, y) {
    $1bbbe912bbae19c1$var$centroidStream.point = $1bbbe912bbae19c1$var$centroidPointRing;
    $1bbbe912bbae19c1$var$centroidPoint($1bbbe912bbae19c1$var$x00 = $1bbbe912bbae19c1$var$x0 = x, $1bbbe912bbae19c1$var$y00 = $1bbbe912bbae19c1$var$y0 = y);
}
function $1bbbe912bbae19c1$var$centroidPointRing(x, y) {
    var dx = x - $1bbbe912bbae19c1$var$x0, dy = y - $1bbbe912bbae19c1$var$y0, z = (0, $9NJu3.sqrt)(dx * dx + dy * dy);
    $1bbbe912bbae19c1$var$X1 += z * ($1bbbe912bbae19c1$var$x0 + x) / 2;
    $1bbbe912bbae19c1$var$Y1 += z * ($1bbbe912bbae19c1$var$y0 + y) / 2;
    $1bbbe912bbae19c1$var$Z1 += z;
    z = $1bbbe912bbae19c1$var$y0 * x - $1bbbe912bbae19c1$var$x0 * y;
    $1bbbe912bbae19c1$var$X2 += z * ($1bbbe912bbae19c1$var$x0 + x);
    $1bbbe912bbae19c1$var$Y2 += z * ($1bbbe912bbae19c1$var$y0 + y);
    $1bbbe912bbae19c1$var$Z2 += z * 3;
    $1bbbe912bbae19c1$var$centroidPoint($1bbbe912bbae19c1$var$x0 = x, $1bbbe912bbae19c1$var$y0 = y);
}
var $1bbbe912bbae19c1$export$2e2bcd8739ae039 = $1bbbe912bbae19c1$var$centroidStream;

});

parcelRegister("56gwg", function(module, exports) {

$parcel$export(module.exports, "default", () => $3b6a53b845b06127$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $6A3Rm = parcelRequire("6A3Rm");
function $3b6a53b845b06127$export$2e2bcd8739ae039(context) {
    this._context = context;
}
$3b6a53b845b06127$export$2e2bcd8739ae039.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
        return this._radius = _, this;
    },
    polygonStart: function() {
        this._line = 0;
    },
    polygonEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
    },
    point: function(x, y) {
        switch(this._point){
            case 0:
                this._context.moveTo(x, y);
                this._point = 1;
                break;
            case 1:
                this._context.lineTo(x, y);
                break;
            default:
                this._context.moveTo(x + this._radius, y);
                this._context.arc(x, y, this._radius, 0, (0, $9NJu3.tau));
                break;
        }
    },
    result: (0, $6A3Rm.default)
};

});

parcelRegister("399WE", function(module, exports) {

$parcel$export(module.exports, "default", () => $24a9ed3dfc338db0$export$2e2bcd8739ae039);

var $2qYWQ = parcelRequire("2qYWQ");

var $9NJu3 = parcelRequire("9NJu3");

var $6A3Rm = parcelRequire("6A3Rm");
var $24a9ed3dfc338db0$var$lengthSum = new (0, $2qYWQ.Adder)(), $24a9ed3dfc338db0$var$lengthRing, $24a9ed3dfc338db0$var$x00, $24a9ed3dfc338db0$var$y00, $24a9ed3dfc338db0$var$x0, $24a9ed3dfc338db0$var$y0;
var $24a9ed3dfc338db0$var$lengthStream = {
    point: (0, $6A3Rm.default),
    lineStart: function() {
        $24a9ed3dfc338db0$var$lengthStream.point = $24a9ed3dfc338db0$var$lengthPointFirst;
    },
    lineEnd: function() {
        if ($24a9ed3dfc338db0$var$lengthRing) $24a9ed3dfc338db0$var$lengthPoint($24a9ed3dfc338db0$var$x00, $24a9ed3dfc338db0$var$y00);
        $24a9ed3dfc338db0$var$lengthStream.point = (0, $6A3Rm.default);
    },
    polygonStart: function() {
        $24a9ed3dfc338db0$var$lengthRing = true;
    },
    polygonEnd: function() {
        $24a9ed3dfc338db0$var$lengthRing = null;
    },
    result: function() {
        var length = +$24a9ed3dfc338db0$var$lengthSum;
        $24a9ed3dfc338db0$var$lengthSum = new (0, $2qYWQ.Adder)();
        return length;
    }
};
function $24a9ed3dfc338db0$var$lengthPointFirst(x, y) {
    $24a9ed3dfc338db0$var$lengthStream.point = $24a9ed3dfc338db0$var$lengthPoint;
    $24a9ed3dfc338db0$var$x00 = $24a9ed3dfc338db0$var$x0 = x, $24a9ed3dfc338db0$var$y00 = $24a9ed3dfc338db0$var$y0 = y;
}
function $24a9ed3dfc338db0$var$lengthPoint(x, y) {
    $24a9ed3dfc338db0$var$x0 -= x, $24a9ed3dfc338db0$var$y0 -= y;
    $24a9ed3dfc338db0$var$lengthSum.add((0, $9NJu3.sqrt)($24a9ed3dfc338db0$var$x0 * $24a9ed3dfc338db0$var$x0 + $24a9ed3dfc338db0$var$y0 * $24a9ed3dfc338db0$var$y0));
    $24a9ed3dfc338db0$var$x0 = x, $24a9ed3dfc338db0$var$y0 = y;
}
var $24a9ed3dfc338db0$export$2e2bcd8739ae039 = $24a9ed3dfc338db0$var$lengthStream;

});

parcelRegister("b3B1e", function(module, exports) {

$parcel$export(module.exports, "default", () => $80ccb0b3df2ae8c1$export$2e2bcd8739ae039);
// Simple caching for constant-radius points.
let $80ccb0b3df2ae8c1$var$cacheDigits, $80ccb0b3df2ae8c1$var$cacheAppend, $80ccb0b3df2ae8c1$var$cacheRadius, $80ccb0b3df2ae8c1$var$cacheCircle;
class $80ccb0b3df2ae8c1$export$2e2bcd8739ae039 {
    constructor(digits){
        this._append = digits == null ? $80ccb0b3df2ae8c1$var$append : $80ccb0b3df2ae8c1$var$appendRound(digits);
        this._radius = 4.5;
        this._ = "";
    }
    pointRadius(_) {
        this._radius = +_;
        return this;
    }
    polygonStart() {
        this._line = 0;
    }
    polygonEnd() {
        this._line = NaN;
    }
    lineStart() {
        this._point = 0;
    }
    lineEnd() {
        if (this._line === 0) this._ += "Z";
        this._point = NaN;
    }
    point(x, y) {
        switch(this._point){
            case 0:
                this._append`M${x},${y}`;
                this._point = 1;
                break;
            case 1:
                this._append`L${x},${y}`;
                break;
            default:
                this._append`M${x},${y}`;
                if (this._radius !== $80ccb0b3df2ae8c1$var$cacheRadius || this._append !== $80ccb0b3df2ae8c1$var$cacheAppend) {
                    const r = this._radius;
                    const s = this._;
                    this._ = ""; // stash the old string so we can cache the circle path fragment
                    this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;
                    $80ccb0b3df2ae8c1$var$cacheRadius = r;
                    $80ccb0b3df2ae8c1$var$cacheAppend = this._append;
                    $80ccb0b3df2ae8c1$var$cacheCircle = this._;
                    this._ = s;
                }
                this._ += $80ccb0b3df2ae8c1$var$cacheCircle;
                break;
        }
    }
    result() {
        const result = this._;
        this._ = "";
        return result.length ? result : null;
    }
}
function $80ccb0b3df2ae8c1$var$append(strings) {
    let i = 1;
    this._ += strings[0];
    for(const j = strings.length; i < j; ++i)this._ += arguments[i] + strings[i];
}
function $80ccb0b3df2ae8c1$var$appendRound(digits) {
    const d = Math.floor(digits);
    if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);
    if (d > 15) return $80ccb0b3df2ae8c1$var$append;
    if (d !== $80ccb0b3df2ae8c1$var$cacheDigits) {
        const k = 10 ** d;
        $80ccb0b3df2ae8c1$var$cacheDigits = d;
        $80ccb0b3df2ae8c1$var$cacheAppend = function append(strings) {
            let i = 1;
            this._ += strings[0];
            for(const j = strings.length; i < j; ++i)this._ += Math.round(arguments[i] * k) / k + strings[i];
        };
    }
    return $80ccb0b3df2ae8c1$var$cacheAppend;
}

});


parcelRegister("ecN60", function(module, exports) {

$parcel$export(module.exports, "default", () => $a578451de7728832$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $lTexe = parcelRequire("lTexe");

var $eoGeB = parcelRequire("eoGeB");
function $a578451de7728832$export$f9ccbb0dcb3dcd2b(x, y) {
    var cy = (0, $9NJu3.cos)(y), k = 1 + (0, $9NJu3.cos)(x) * cy;
    return [
        cy * (0, $9NJu3.sin)(x) / k,
        (0, $9NJu3.sin)(y) / k
    ];
}
$a578451de7728832$export$f9ccbb0dcb3dcd2b.invert = (0, $lTexe.azimuthalInvert)(function(z) {
    return 2 * (0, $9NJu3.atan)(z);
});
function $a578451de7728832$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($a578451de7728832$export$f9ccbb0dcb3dcd2b).scale(250).clipAngle(142);
}

});

parcelRegister("hP0kH", function(module, exports) {

$parcel$export(module.exports, "default", () => $cf9775306ca5cc8d$export$2e2bcd8739ae039);

var $9NJu3 = parcelRequire("9NJu3");

var $hbBS3 = parcelRequire("hbBS3");
function $cf9775306ca5cc8d$export$e84942adec6de533(lambda, phi) {
    return [
        (0, $9NJu3.log)((0, $9NJu3.tan)(((0, $9NJu3.halfPi) + phi) / 2)),
        -lambda
    ];
}
$cf9775306ca5cc8d$export$e84942adec6de533.invert = function(x, y) {
    return [
        -y,
        2 * (0, $9NJu3.atan)((0, $9NJu3.exp)(x)) - (0, $9NJu3.halfPi)
    ];
};
function $cf9775306ca5cc8d$export$2e2bcd8739ae039() {
    var m = (0, $hbBS3.mercatorProjection)($cf9775306ca5cc8d$export$e84942adec6de533), center = m.center, rotate = m.rotate;
    m.center = function(_) {
        return arguments.length ? center([
            -_[1],
            _[0]
        ]) : (_ = center(), [
            _[1],
            -_[0]
        ]);
    };
    m.rotate = function(_) {
        return arguments.length ? rotate([
            _[0],
            _[1],
            _.length > 2 ? _[2] + 90 : 90
        ]) : (_ = rotate(), [
            _[0],
            _[1],
            _[2] - 90
        ]);
    };
    return rotate([
        0,
        0,
        90
    ]).scale(159.155);
}

});

parcelRegister("lgFGv", function(module, exports) {

$parcel$export(module.exports, "default", () => $f7bb6d4fb56532a4$export$2e2bcd8739ae039);

var $eoGeB = parcelRequire("eoGeB");

var $hxKsQ = parcelRequire("hxKsQ");
function $f7bb6d4fb56532a4$export$4e604a1e531983bc(cp, phi) {
    var cpsinPhi = cp * (0, $hxKsQ.sin)(phi), i = 30, delta;
    do phi -= delta = (phi + (0, $hxKsQ.sin)(phi) - cpsinPhi) / (1 + (0, $hxKsQ.cos)(phi));
    while ((0, $hxKsQ.abs)(delta) > (0, $hxKsQ.epsilon) && --i > 0);
    return phi / 2;
}
function $f7bb6d4fb56532a4$export$f2612ba656dafe47(cx, cy, cp) {
    function forward(lambda, phi) {
        return [
            cx * lambda * (0, $hxKsQ.cos)(phi = $f7bb6d4fb56532a4$export$4e604a1e531983bc(cp, phi)),
            cy * (0, $hxKsQ.sin)(phi)
        ];
    }
    forward.invert = function(x, y) {
        return y = (0, $hxKsQ.asin)(y / cy), [
            x / (cx * (0, $hxKsQ.cos)(y)),
            (0, $hxKsQ.asin)((2 * y + (0, $hxKsQ.sin)(2 * y)) / cp)
        ];
    };
    return forward;
}
var $f7bb6d4fb56532a4$export$dcc16369b49b03f3 = $f7bb6d4fb56532a4$export$f2612ba656dafe47((0, $hxKsQ.sqrt2) / (0, $hxKsQ.halfPi), (0, $hxKsQ.sqrt2), (0, $hxKsQ.pi));
function $f7bb6d4fb56532a4$export$2e2bcd8739ae039() {
    return (0, $eoGeB.default)($f7bb6d4fb56532a4$export$dcc16369b49b03f3).scale(169.529);
}

});
parcelRegister("hxKsQ", function(module, exports) {

$parcel$export(module.exports, "abs", () => $cc598f91f6b6bbec$export$2335f513bbd82c6d);
$parcel$export(module.exports, "cos", () => $cc598f91f6b6bbec$export$50d414a77b60d802);
$parcel$export(module.exports, "sin", () => $cc598f91f6b6bbec$export$5de3937cb4b592ed);
$parcel$export(module.exports, "epsilon", () => $cc598f91f6b6bbec$export$6c421550c66a327d);
$parcel$export(module.exports, "pi", () => $cc598f91f6b6bbec$export$18c7bea995a110f);
$parcel$export(module.exports, "halfPi", () => $cc598f91f6b6bbec$export$e51408a300e8929a);
$parcel$export(module.exports, "sqrt2", () => $cc598f91f6b6bbec$export$2fa35f36c870f3b7);
$parcel$export(module.exports, "asin", () => $cc598f91f6b6bbec$export$41726bdb1fc63f);
var $cc598f91f6b6bbec$export$2335f513bbd82c6d = Math.abs;
var $cc598f91f6b6bbec$export$628dc4eed22b0fbd = Math.atan;
var $cc598f91f6b6bbec$export$b8b770ee6a0d9760 = Math.atan2;
var $cc598f91f6b6bbec$export$803ce6b71a0a94b2 = Math.ceil;
var $cc598f91f6b6bbec$export$50d414a77b60d802 = Math.cos;
var $cc598f91f6b6bbec$export$b310ec824aaee37f = Math.exp;
var $cc598f91f6b6bbec$export$a3fe094919f356fd = Math.floor;
var $cc598f91f6b6bbec$export$bef1f36f5486a6a3 = Math.log;
var $cc598f91f6b6bbec$export$8960430cfd85939f = Math.max;
var $cc598f91f6b6bbec$export$96ec731ed4dcb222 = Math.min;
var $cc598f91f6b6bbec$export$9c297f60e22e3389 = Math.pow;
var $cc598f91f6b6bbec$export$2077e0241d6afd3c = Math.round;
var $cc598f91f6b6bbec$export$c5552dfdbc7cec71 = Math.sign || function(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var $cc598f91f6b6bbec$export$5de3937cb4b592ed = Math.sin;
var $cc598f91f6b6bbec$export$fcdd3b0b3246a325 = Math.tan;
var $cc598f91f6b6bbec$export$6c421550c66a327d = 1e-6;
var $cc598f91f6b6bbec$export$92c06fba281fe81b = 1e-12;
var $cc598f91f6b6bbec$export$18c7bea995a110f = Math.PI;
var $cc598f91f6b6bbec$export$e51408a300e8929a = $cc598f91f6b6bbec$export$18c7bea995a110f / 2;
var $cc598f91f6b6bbec$export$c39a5cba78ea0fc2 = $cc598f91f6b6bbec$export$18c7bea995a110f / 4;
var $cc598f91f6b6bbec$export$9eaf1e6179158e34 = Math.SQRT1_2;
var $cc598f91f6b6bbec$export$2fa35f36c870f3b7 = $cc598f91f6b6bbec$export$eba8049fb5020b81(2);
var $cc598f91f6b6bbec$export$85cb5b1dafb38f92 = $cc598f91f6b6bbec$export$eba8049fb5020b81($cc598f91f6b6bbec$export$18c7bea995a110f);
var $cc598f91f6b6bbec$export$a4b4b4d4d776fe92 = $cc598f91f6b6bbec$export$18c7bea995a110f * 2;
var $cc598f91f6b6bbec$export$41fc368e1a942b97 = 180 / $cc598f91f6b6bbec$export$18c7bea995a110f;
var $cc598f91f6b6bbec$export$8449e153fbd325fc = $cc598f91f6b6bbec$export$18c7bea995a110f / 180;
function $cc598f91f6b6bbec$export$109d406627d4a533(x) {
    return x ? x / Math.sin(x) : 1;
}
function $cc598f91f6b6bbec$export$41726bdb1fc63f(x) {
    return x > 1 ? $cc598f91f6b6bbec$export$e51408a300e8929a : x < -1 ? -$cc598f91f6b6bbec$export$e51408a300e8929a : Math.asin(x);
}
function $cc598f91f6b6bbec$export$fd6306be3fde5b04(x) {
    return x > 1 ? 0 : x < -1 ? $cc598f91f6b6bbec$export$18c7bea995a110f : Math.acos(x);
}
function $cc598f91f6b6bbec$export$eba8049fb5020b81(x) {
    return x > 0 ? Math.sqrt(x) : 0;
}
function $cc598f91f6b6bbec$export$7128670e45beef9a(x) {
    x = $cc598f91f6b6bbec$export$b310ec824aaee37f(2 * x);
    return (x - 1) / (x + 1);
}
function $cc598f91f6b6bbec$export$545004b505d7c555(x) {
    return ($cc598f91f6b6bbec$export$b310ec824aaee37f(x) - $cc598f91f6b6bbec$export$b310ec824aaee37f(-x)) / 2;
}
function $cc598f91f6b6bbec$export$2e2fd1ad24e4d350(x) {
    return ($cc598f91f6b6bbec$export$b310ec824aaee37f(x) + $cc598f91f6b6bbec$export$b310ec824aaee37f(-x)) / 2;
}
function $cc598f91f6b6bbec$export$b70d7df3214671ba(x) {
    return $cc598f91f6b6bbec$export$bef1f36f5486a6a3(x + $cc598f91f6b6bbec$export$eba8049fb5020b81(x * x + 1));
}
function $cc598f91f6b6bbec$export$31dc77c1bd8d9ab5(x) {
    return $cc598f91f6b6bbec$export$bef1f36f5486a6a3(x + $cc598f91f6b6bbec$export$eba8049fb5020b81(x * x - 1));
}

});



parcelRegister("iEBLb", function(module, exports) {

$parcel$export(module.exports, "default", () => $d94940c45f8e7e1c$export$2e2bcd8739ae039);

var $apu36 = parcelRequire("apu36");

var $9NJu3 = parcelRequire("9NJu3");
function $d94940c45f8e7e1c$var$graticuleX(y0, y1, dy) {
    var y = (0, $apu36.default)(y0, y1 - (0, $9NJu3.epsilon), dy).concat(y1);
    return function(x) {
        return y.map(function(y) {
            return [
                x,
                y
            ];
        });
    };
}
function $d94940c45f8e7e1c$var$graticuleY(x0, x1, dx) {
    var x = (0, $apu36.default)(x0, x1 - (0, $9NJu3.epsilon), dx).concat(x1);
    return function(y) {
        return x.map(function(x) {
            return [
                x,
                y
            ];
        });
    };
}
function $d94940c45f8e7e1c$export$2e2bcd8739ae039() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
        return {
            type: "MultiLineString",
            coordinates: lines()
        };
    }
    function lines() {
        return (0, $apu36.default)((0, $9NJu3.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, $apu36.default)((0, $9NJu3.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, $apu36.default)((0, $9NJu3.ceil)(x0 / dx) * dx, x1, dx).filter(function(x) {
            return (0, $9NJu3.abs)(x % DX) > (0, $9NJu3.epsilon);
        }).map(x)).concat((0, $apu36.default)((0, $9NJu3.ceil)(y0 / dy) * dy, y1, dy).filter(function(y) {
            return (0, $9NJu3.abs)(y % DY) > (0, $9NJu3.epsilon);
        }).map(y));
    }
    graticule.lines = function() {
        return lines().map(function(coordinates) {
            return {
                type: "LineString",
                coordinates: coordinates
            };
        });
    };
    graticule.outline = function() {
        return {
            type: "Polygon",
            coordinates: [
                X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))
            ]
        };
    };
    graticule.extent = function(_) {
        if (!arguments.length) return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
    };
    graticule.extentMajor = function(_) {
        if (!arguments.length) return [
            [
                X0,
                Y0
            ],
            [
                X1,
                Y1
            ]
        ];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
    };
    graticule.extentMinor = function(_) {
        if (!arguments.length) return [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
    };
    graticule.step = function(_) {
        if (!arguments.length) return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
    };
    graticule.stepMajor = function(_) {
        if (!arguments.length) return [
            DX,
            DY
        ];
        DX = +_[0], DY = +_[1];
        return graticule;
    };
    graticule.stepMinor = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        dx = +_[0], dy = +_[1];
        return graticule;
    };
    graticule.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = $d94940c45f8e7e1c$var$graticuleX(y0, y1, 90);
        y = $d94940c45f8e7e1c$var$graticuleY(x0, x1, precision);
        X = $d94940c45f8e7e1c$var$graticuleX(Y0, Y1, 90);
        Y = $d94940c45f8e7e1c$var$graticuleY(X0, X1, precision);
        return graticule;
    };
    return graticule.extentMajor([
        [
            -180,
            -90 + (0, $9NJu3.epsilon)
        ],
        [
            180,
            90 - (0, $9NJu3.epsilon)
        ]
    ]).extentMinor([
        [
            -180,
            -80 - (0, $9NJu3.epsilon)
        ],
        [
            180,
            80 + (0, $9NJu3.epsilon)
        ]
    ]);
}
function $d94940c45f8e7e1c$export$b8db4e9403a5b6f1() {
    return $d94940c45f8e7e1c$export$2e2bcd8739ae039()();
}

});


parcelRegister("krjdL", function(module, exports) {

$parcel$export(module.exports, "force", () => $ee153d2b512dfc8b$export$4d82290515cd0ddb);

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");

var $8BIXQ = parcelRequire("8BIXQ");
var $16NEk = parcelRequire("16NEk");
var $gCqEw = parcelRequire("gCqEw");
var $b5BBc = parcelRequire("b5BBc");
var $6nDpC = parcelRequire("6nDpC");
var $bhQeP = parcelRequire("bhQeP");
var $23LS8 = parcelRequire("23LS8");
const $ee153d2b512dfc8b$var$ForceMap = {
    center: (0, $8BIXQ.default),
    collide: (0, $16NEk.default),
    nbody: (0, $b5BBc.default),
    link: (0, $gCqEw.default),
    x: (0, $bhQeP.default),
    y: (0, $23LS8.default)
};
const $ee153d2b512dfc8b$var$Forces = "forces", $ee153d2b512dfc8b$var$ForceParams = [
    "alpha",
    "alphaMin",
    "alphaTarget",
    "velocityDecay",
    "forces"
], $ee153d2b512dfc8b$var$ForceConfig = [
    "static",
    "iterations"
], $ee153d2b512dfc8b$var$ForceOutput = [
    "x",
    "y",
    "vx",
    "vy"
];
/**
 * Force simulation layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<object>} params.forces - The forces to apply.
 */ function $ee153d2b512dfc8b$export$4d82290515cd0ddb(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$ee153d2b512dfc8b$export$4d82290515cd0ddb.Definition = {
    "type": "Force",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "static",
            "type": "boolean",
            "default": false
        },
        {
            "name": "restart",
            "type": "boolean",
            "default": false
        },
        {
            "name": "iterations",
            "type": "number",
            "default": 300
        },
        {
            "name": "alpha",
            "type": "number",
            "default": 1
        },
        {
            "name": "alphaMin",
            "type": "number",
            "default": 0.001
        },
        {
            "name": "alphaTarget",
            "type": "number",
            "default": 0
        },
        {
            "name": "velocityDecay",
            "type": "number",
            "default": 0.4
        },
        {
            "name": "forces",
            "type": "param",
            "array": true,
            "params": [
                {
                    "key": {
                        "force": "center"
                    },
                    "params": [
                        {
                            "name": "x",
                            "type": "number",
                            "default": 0
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "default": 0
                        }
                    ]
                },
                {
                    "key": {
                        "force": "collide"
                    },
                    "params": [
                        {
                            "name": "radius",
                            "type": "number",
                            "expr": true
                        },
                        {
                            "name": "strength",
                            "type": "number",
                            "default": 0.7
                        },
                        {
                            "name": "iterations",
                            "type": "number",
                            "default": 1
                        }
                    ]
                },
                {
                    "key": {
                        "force": "nbody"
                    },
                    "params": [
                        {
                            "name": "strength",
                            "type": "number",
                            "default": -30,
                            "expr": true
                        },
                        {
                            "name": "theta",
                            "type": "number",
                            "default": 0.9
                        },
                        {
                            "name": "distanceMin",
                            "type": "number",
                            "default": 1
                        },
                        {
                            "name": "distanceMax",
                            "type": "number"
                        }
                    ]
                },
                {
                    "key": {
                        "force": "link"
                    },
                    "params": [
                        {
                            "name": "links",
                            "type": "data"
                        },
                        {
                            "name": "id",
                            "type": "field"
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "default": 30,
                            "expr": true
                        },
                        {
                            "name": "strength",
                            "type": "number",
                            "expr": true
                        },
                        {
                            "name": "iterations",
                            "type": "number",
                            "default": 1
                        }
                    ]
                },
                {
                    "key": {
                        "force": "x"
                    },
                    "params": [
                        {
                            "name": "strength",
                            "type": "number",
                            "default": 0.1
                        },
                        {
                            "name": "x",
                            "type": "field"
                        }
                    ]
                },
                {
                    "key": {
                        "force": "y"
                    },
                    "params": [
                        {
                            "name": "strength",
                            "type": "number",
                            "default": 0.1
                        },
                        {
                            "name": "y",
                            "type": "field"
                        }
                    ]
                }
            ]
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "modify": false,
            "default": $ee153d2b512dfc8b$var$ForceOutput
        }
    ]
};
(0, $4SWbq.inherits)($ee153d2b512dfc8b$export$4d82290515cd0ddb, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        var sim = this.value, change = pulse.changed(pulse.ADD_REM), params = _.modified($ee153d2b512dfc8b$var$ForceParams), iters = _.iterations || 300;
        // configure simulation
        if (!sim) {
            this.value = sim = $ee153d2b512dfc8b$var$simulation(pulse.source, _);
            sim.on("tick", $ee153d2b512dfc8b$var$rerun(pulse.dataflow, this));
            if (!_.static) {
                change = true;
                sim.tick(); // ensure we run on init
            }
            pulse.modifies("index");
        } else {
            if (change) {
                pulse.modifies("index");
                sim.nodes(pulse.source);
            }
            if (params || pulse.changed(pulse.MOD)) $ee153d2b512dfc8b$var$setup(sim, _, 0, pulse);
        }
        // run simulation
        if (params || change || _.modified($ee153d2b512dfc8b$var$ForceConfig) || pulse.changed() && _.restart) {
            sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));
            if (_.static) for(sim.stop(); --iters >= 0;)sim.tick();
            else {
                if (sim.stopped()) sim.restart();
                if (!change) return pulse.StopPropagation; // defer to sim ticks
            }
        }
        return this.finish(_, pulse);
    },
    finish (_, pulse) {
        const dataflow = pulse.dataflow;
        // inspect dependencies, touch link source data
        for(let args = this._argops, j = 0, m = args.length, arg; j < m; ++j){
            arg = args[j];
            if (arg.name !== $ee153d2b512dfc8b$var$Forces || arg.op._argval.force !== "link") continue;
            for(var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i)if (ops[i].name === "links" && (op = ops[i].op.source)) {
                dataflow.pulse(op, dataflow.changeset().reflow());
                break;
            }
        }
        // reflow all nodes
        return pulse.reflow(_.modified()).modifies($ee153d2b512dfc8b$var$ForceOutput);
    }
});
function $ee153d2b512dfc8b$var$rerun(df, op) {
    return ()=>df.touch(op).run();
}
function $ee153d2b512dfc8b$var$simulation(nodes, _) {
    const sim = (0, $6nDpC.default)(nodes), stop = sim.stop, restart = sim.restart;
    let stopped = false;
    sim.stopped = ()=>stopped;
    sim.restart = ()=>(stopped = false, restart());
    sim.stop = ()=>(stopped = true, stop());
    return $ee153d2b512dfc8b$var$setup(sim, _, true).on("end", ()=>stopped = true);
}
function $ee153d2b512dfc8b$var$setup(sim, _, init, pulse) {
    var f = (0, $4SWbq.array)(_.forces), i, n, p, name;
    for(i = 0, n = $ee153d2b512dfc8b$var$ForceParams.length; i < n; ++i){
        p = $ee153d2b512dfc8b$var$ForceParams[i];
        if (p !== $ee153d2b512dfc8b$var$Forces && _.modified(p)) sim[p](_[p]);
    }
    for(i = 0, n = f.length; i < n; ++i){
        name = $ee153d2b512dfc8b$var$Forces + i;
        p = init || _.modified($ee153d2b512dfc8b$var$Forces, i) ? $ee153d2b512dfc8b$var$getForce(f[i]) : pulse && $ee153d2b512dfc8b$var$modified(f[i], pulse) ? sim.force(name) : null;
        if (p) sim.force(name, p);
    }
    for(n = sim.numForces || 0; i < n; ++i)sim.force($ee153d2b512dfc8b$var$Forces + i, null); // remove
    sim.numForces = f.length;
    return sim;
}
function $ee153d2b512dfc8b$var$modified(f, pulse) {
    var k, v;
    for(k in f){
        if ((0, $4SWbq.isFunction)(v = f[k]) && pulse.modified((0, $4SWbq.accessorFields)(v))) return 1;
    }
    return 0;
}
function $ee153d2b512dfc8b$var$getForce(_) {
    var f, p;
    if (!(0, $4SWbq.hasOwnProperty)($ee153d2b512dfc8b$var$ForceMap, _.force)) (0, $4SWbq.error)("Unrecognized force: " + _.force);
    f = $ee153d2b512dfc8b$var$ForceMap[_.force]();
    for(p in _)if ((0, $4SWbq.isFunction)(f[p])) $ee153d2b512dfc8b$var$setForceParam(f[p], _[p], _);
    return f;
}
function $ee153d2b512dfc8b$var$setForceParam(f, v, _) {
    f((0, $4SWbq.isFunction)(v) ? (d)=>v(d, _) : v);
}

});
parcelRegister("8BIXQ", function(module, exports) {

$parcel$export(module.exports, "default", () => $6444a86165dd813b$export$2e2bcd8739ae039);
function $6444a86165dd813b$export$2e2bcd8739ae039(x, y) {
    var nodes, strength = 1;
    if (x == null) x = 0;
    if (y == null) y = 0;
    function force() {
        var i, n = nodes.length, node, sx = 0, sy = 0;
        for(i = 0; i < n; ++i)node = nodes[i], sx += node.x, sy += node.y;
        for(sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i)node = nodes[i], node.x -= sx, node.y -= sy;
    }
    force.initialize = function(_) {
        nodes = _;
    };
    force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
    };
    force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
    };
    return force;
}

});

parcelRegister("16NEk", function(module, exports) {

$parcel$export(module.exports, "default", () => $0cecdd55c8c2f81b$export$2e2bcd8739ae039);

var $k4AM3 = parcelRequire("k4AM3");

var $7PFII = parcelRequire("7PFII");

var $1K7os = parcelRequire("1K7os");
function $0cecdd55c8c2f81b$var$x(d) {
    return d.x + d.vx;
}
function $0cecdd55c8c2f81b$var$y(d) {
    return d.y + d.vy;
}
function $0cecdd55c8c2f81b$export$2e2bcd8739ae039(radius) {
    var nodes, radii, random, strength = 1, iterations = 1;
    if (typeof radius !== "function") radius = (0, $7PFII.default)(radius == null ? 1 : +radius);
    function force() {
        var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
        for(var k = 0; k < iterations; ++k){
            tree = (0, $k4AM3.default)(nodes, $0cecdd55c8c2f81b$var$x, $0cecdd55c8c2f81b$var$y).visitAfter(prepare);
            for(i = 0; i < n; ++i){
                node = nodes[i];
                ri = radii[node.index], ri2 = ri * ri;
                xi = node.x + node.vx;
                yi = node.y + node.vy;
                tree.visit(apply);
            }
        }
        function apply(quad, x0, y0, x1, y1) {
            var data = quad.data, rj = quad.r, r = ri + rj;
            if (data) {
                if (data.index > node.index) {
                    var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;
                    if (l < r * r) {
                        if (x === 0) x = (0, $1K7os.default)(random), l += x * x;
                        if (y === 0) y = (0, $1K7os.default)(random), l += y * y;
                        l = (r - (l = Math.sqrt(l))) / l * strength;
                        node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                        node.vy += (y *= l) * r;
                        data.vx -= x * (r = 1 - r);
                        data.vy -= y * r;
                    }
                }
                return;
            }
            return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
    }
    function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for(var i = quad.r = 0; i < 4; ++i)if (quad[i] && quad[i].r > quad.r) quad.r = quad[i].r;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for(i = 0; i < n; ++i)node = nodes[i], radii[node.index] = +radius(node, i, nodes);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
    };
    force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initialize(), force) : radius;
    };
    return force;
}

});
parcelRegister("k4AM3", function(module, exports) {

$parcel$export(module.exports, "default", () => $e9d0b4e9ae30be8d$export$2e2bcd8739ae039);

var $ibvkS = parcelRequire("ibvkS");

var $1VfIK = parcelRequire("1VfIK");

var $eE80k = parcelRequire("eE80k");

var $7adzw = parcelRequire("7adzw");

var $8QhTs = parcelRequire("8QhTs");

var $a9FbR = parcelRequire("a9FbR");

var $a8QEt = parcelRequire("a8QEt");

var $kNRjZ = parcelRequire("kNRjZ");

var $dCVEk = parcelRequire("dCVEk");

var $crVhn = parcelRequire("crVhn");

var $4v3It = parcelRequire("4v3It");

var $bJlCa = parcelRequire("bJlCa");
function $e9d0b4e9ae30be8d$export$2e2bcd8739ae039(nodes, x, y) {
    var tree = new $e9d0b4e9ae30be8d$var$Quadtree(x == null ? (0, $4v3It.defaultX) : x, y == null ? (0, $bJlCa.defaultY) : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
}
function $e9d0b4e9ae30be8d$var$Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
}
function $e9d0b4e9ae30be8d$var$leaf_copy(leaf) {
    var copy = {
        data: leaf.data
    }, next = copy;
    while(leaf = leaf.next)next = next.next = {
        data: leaf.data
    };
    return copy;
}
var $e9d0b4e9ae30be8d$var$treeProto = $e9d0b4e9ae30be8d$export$2e2bcd8739ae039.prototype = $e9d0b4e9ae30be8d$var$Quadtree.prototype;
$e9d0b4e9ae30be8d$var$treeProto.copy = function() {
    var copy = new $e9d0b4e9ae30be8d$var$Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
    if (!node) return copy;
    if (!node.length) return copy._root = $e9d0b4e9ae30be8d$var$leaf_copy(node), copy;
    nodes = [
        {
            source: node,
            target: copy._root = new Array(4)
        }
    ];
    while(node = nodes.pop()){
        for(var i = 0; i < 4; ++i)if (child = node.source[i]) {
            if (child.length) nodes.push({
                source: child,
                target: node.target[i] = new Array(4)
            });
            else node.target[i] = $e9d0b4e9ae30be8d$var$leaf_copy(child);
        }
    }
    return copy;
};
$e9d0b4e9ae30be8d$var$treeProto.add = (0, $ibvkS.default);
$e9d0b4e9ae30be8d$var$treeProto.addAll = (0, $ibvkS.addAll);
$e9d0b4e9ae30be8d$var$treeProto.cover = (0, $1VfIK.default);
$e9d0b4e9ae30be8d$var$treeProto.data = (0, $eE80k.default);
$e9d0b4e9ae30be8d$var$treeProto.extent = (0, $7adzw.default);
$e9d0b4e9ae30be8d$var$treeProto.find = (0, $8QhTs.default);
$e9d0b4e9ae30be8d$var$treeProto.remove = (0, $a9FbR.default);
$e9d0b4e9ae30be8d$var$treeProto.removeAll = (0, $a9FbR.removeAll);
$e9d0b4e9ae30be8d$var$treeProto.root = (0, $a8QEt.default);
$e9d0b4e9ae30be8d$var$treeProto.size = (0, $kNRjZ.default);
$e9d0b4e9ae30be8d$var$treeProto.visit = (0, $dCVEk.default);
$e9d0b4e9ae30be8d$var$treeProto.visitAfter = (0, $crVhn.default);
$e9d0b4e9ae30be8d$var$treeProto.x = (0, $4v3It.default);
$e9d0b4e9ae30be8d$var$treeProto.y = (0, $bJlCa.default);

});
parcelRegister("ibvkS", function(module, exports) {

$parcel$export(module.exports, "default", () => $d3d18fae64ad7a58$export$2e2bcd8739ae039);
$parcel$export(module.exports, "addAll", () => $d3d18fae64ad7a58$export$32ed0561867ec8a1);
function $d3d18fae64ad7a58$export$2e2bcd8739ae039(d) {
    const x = +this._x.call(null, d), y = +this._y.call(null, d);
    return $d3d18fae64ad7a58$var$add(this.cover(x, y), x, y, d);
}
function $d3d18fae64ad7a58$var$add(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points
    var parent, node = tree._root, leaf = {
        data: d
    }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;
    // Find the existing leaf for the new point, or add it.
    while(node.length){
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
    }
    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
    // Otherwise, split the leaf node until the old and new point are separated.
    do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
    }while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
    return parent[j] = node, parent[i] = leaf, tree;
}
function $d3d18fae64ad7a58$export$32ed0561867ec8a1(data) {
    var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
    // Compute the points and their extent.
    for(i = 0; i < n; ++i){
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
    }
    // If there were no (valid) points, abort.
    if (x0 > x1 || y0 > y1) return this;
    // Expand the tree to cover the new points.
    this.cover(x0, y0).cover(x1, y1);
    // Add the new points.
    for(i = 0; i < n; ++i)$d3d18fae64ad7a58$var$add(this, xz[i], yz[i], data[i]);
    return this;
}

});

parcelRegister("1VfIK", function(module, exports) {

$parcel$export(module.exports, "default", () => $16674f1e49a6887a$export$2e2bcd8739ae039);
function $16674f1e49a6887a$export$2e2bcd8739ae039(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
    } else {
        var z = x1 - x0 || 1, node = this._root, parent, i;
        while(x0 > x || x >= x1 || y0 > y || y >= y1){
            i = (y < y0) << 1 | x < x0;
            parent = new Array(4), parent[i] = node, node = parent, z *= 2;
            switch(i){
                case 0:
                    x1 = x0 + z, y1 = y0 + z;
                    break;
                case 1:
                    x0 = x1 - z, y1 = y0 + z;
                    break;
                case 2:
                    x1 = x0 + z, y0 = y1 - z;
                    break;
                case 3:
                    x0 = x1 - z, y0 = y1 - z;
                    break;
            }
        }
        if (this._root && this._root.length) this._root = node;
    }
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
}

});

parcelRegister("eE80k", function(module, exports) {

$parcel$export(module.exports, "default", () => $aa9b029eb45fdf41$export$2e2bcd8739ae039);
function $aa9b029eb45fdf41$export$2e2bcd8739ae039() {
    var data = [];
    this.visit(function(node) {
        if (!node.length) do data.push(node.data);
        while (node = node.next);
    });
    return data;
}

});

parcelRegister("7adzw", function(module, exports) {

$parcel$export(module.exports, "default", () => $5373feb3bc23f6d9$export$2e2bcd8739ae039);
function $5373feb3bc23f6d9$export$2e2bcd8739ae039(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [
        [
            this._x0,
            this._y0
        ],
        [
            this._x1,
            this._y1
        ]
    ];
}

});

parcelRegister("8QhTs", function(module, exports) {

$parcel$export(module.exports, "default", () => $67010f51e479a553$export$2e2bcd8739ae039);

var $jVtVF = parcelRequire("jVtVF");
function $67010f51e479a553$export$2e2bcd8739ae039(x, y, radius) {
    var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
    if (node) quads.push(new (0, $jVtVF.default)(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity;
    else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
    }
    while(q = quads.pop()){
        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;
        // Bisect the current quadrant.
        if (node.length) {
            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
            quads.push(new (0, $jVtVF.default)(node[3], xm, ym, x2, y2), new (0, $jVtVF.default)(node[2], x1, ym, xm, y2), new (0, $jVtVF.default)(node[1], xm, y1, x2, ym), new (0, $jVtVF.default)(node[0], x1, y1, xm, ym));
            // Visit the closest quadrant first.
            if (i = (y >= ym) << 1 | x >= xm) {
                q = quads[quads.length - 1];
                quads[quads.length - 1] = quads[quads.length - 1 - i];
                quads[quads.length - 1 - i] = q;
            }
        } else {
            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
            if (d2 < radius) {
                var d = Math.sqrt(radius = d2);
                x0 = x - d, y0 = y - d;
                x3 = x + d, y3 = y + d;
                data = node.data;
            }
        }
    }
    return data;
}

});
parcelRegister("jVtVF", function(module, exports) {

$parcel$export(module.exports, "default", () => $e81a8e7cbacfbc7f$export$2e2bcd8739ae039);
function $e81a8e7cbacfbc7f$export$2e2bcd8739ae039(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
}

});


parcelRegister("a9FbR", function(module, exports) {

$parcel$export(module.exports, "default", () => $764ab23230faae01$export$2e2bcd8739ae039);
$parcel$export(module.exports, "removeAll", () => $764ab23230faae01$export$1cfc7aad5cb1833b);
function $764ab23230faae01$export$2e2bcd8739ae039(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points
    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;
    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while(true){
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
    }
    // Find the point to remove.
    while(node.data !== d)if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;
    // If there are multiple coincident points, remove just the point.
    if (previous) return next ? previous.next = next : delete previous.next, this;
    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;
    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];
    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
    }
    return this;
}
function $764ab23230faae01$export$1cfc7aad5cb1833b(data) {
    for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);
    return this;
}

});

parcelRegister("a8QEt", function(module, exports) {

$parcel$export(module.exports, "default", () => $76237e462afa8468$export$2e2bcd8739ae039);
function $76237e462afa8468$export$2e2bcd8739ae039() {
    return this._root;
}

});

parcelRegister("kNRjZ", function(module, exports) {

$parcel$export(module.exports, "default", () => $f251bec38e00dc93$export$2e2bcd8739ae039);
function $f251bec38e00dc93$export$2e2bcd8739ae039() {
    var size = 0;
    this.visit(function(node) {
        if (!node.length) do ++size;
        while (node = node.next);
    });
    return size;
}

});

parcelRegister("dCVEk", function(module, exports) {

$parcel$export(module.exports, "default", () => $9ebb8af2915dec1f$export$2e2bcd8739ae039);

var $jVtVF = parcelRequire("jVtVF");
function $9ebb8af2915dec1f$export$2e2bcd8739ae039(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node) quads.push(new (0, $jVtVF.default)(node, this._x0, this._y0, this._x1, this._y1));
    while(q = quads.pop())if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new (0, $jVtVF.default)(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new (0, $jVtVF.default)(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new (0, $jVtVF.default)(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new (0, $jVtVF.default)(child, x0, y0, xm, ym));
    }
    return this;
}

});

parcelRegister("crVhn", function(module, exports) {

$parcel$export(module.exports, "default", () => $9104701e668dab67$export$2e2bcd8739ae039);

var $jVtVF = parcelRequire("jVtVF");
function $9104701e668dab67$export$2e2bcd8739ae039(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new (0, $jVtVF.default)(this._root, this._x0, this._y0, this._x1, this._y1));
    while(q = quads.pop()){
        var node = q.node;
        if (node.length) {
            var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
            if (child = node[0]) quads.push(new (0, $jVtVF.default)(child, x0, y0, xm, ym));
            if (child = node[1]) quads.push(new (0, $jVtVF.default)(child, xm, y0, x1, ym));
            if (child = node[2]) quads.push(new (0, $jVtVF.default)(child, x0, ym, xm, y1));
            if (child = node[3]) quads.push(new (0, $jVtVF.default)(child, xm, ym, x1, y1));
        }
        next.push(q);
    }
    while(q = next.pop())callback(q.node, q.x0, q.y0, q.x1, q.y1);
    return this;
}

});

parcelRegister("4v3It", function(module, exports) {

$parcel$export(module.exports, "defaultX", () => $346cf0a9e9a98ead$export$e6fafc98131d2a44);
$parcel$export(module.exports, "default", () => $346cf0a9e9a98ead$export$2e2bcd8739ae039);
function $346cf0a9e9a98ead$export$e6fafc98131d2a44(d) {
    return d[0];
}
function $346cf0a9e9a98ead$export$2e2bcd8739ae039(_) {
    return arguments.length ? (this._x = _, this) : this._x;
}

});

parcelRegister("bJlCa", function(module, exports) {

$parcel$export(module.exports, "defaultY", () => $88a4a9e62233a5b0$export$6f0a21aeb844a64c);
$parcel$export(module.exports, "default", () => $88a4a9e62233a5b0$export$2e2bcd8739ae039);
function $88a4a9e62233a5b0$export$6f0a21aeb844a64c(d) {
    return d[1];
}
function $88a4a9e62233a5b0$export$2e2bcd8739ae039(_) {
    return arguments.length ? (this._y = _, this) : this._y;
}

});


parcelRegister("7PFII", function(module, exports) {

$parcel$export(module.exports, "default", () => $5b3da89645cc759e$export$2e2bcd8739ae039);
function $5b3da89645cc759e$export$2e2bcd8739ae039(x) {
    return function() {
        return x;
    };
}

});

parcelRegister("1K7os", function(module, exports) {

$parcel$export(module.exports, "default", () => $144fd27dcfe92c5a$export$2e2bcd8739ae039);
function $144fd27dcfe92c5a$export$2e2bcd8739ae039(random) {
    return (random() - 0.5) * 1e-6;
}

});


parcelRegister("gCqEw", function(module, exports) {

$parcel$export(module.exports, "default", () => $c194de9779db34e9$export$2e2bcd8739ae039);

var $7PFII = parcelRequire("7PFII");

var $1K7os = parcelRequire("1K7os");
function $c194de9779db34e9$var$index(d) {
    return d.index;
}
function $c194de9779db34e9$var$find(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("node not found: " + nodeId);
    return node;
}
function $c194de9779db34e9$export$2e2bcd8739ae039(links) {
    var id = $c194de9779db34e9$var$index, strength = defaultStrength, strengths, distance = (0, $7PFII.default)(30), distances, nodes, count, bias, random, iterations = 1;
    if (links == null) links = [];
    function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }
    function force(alpha) {
        for(var k = 0, n = links.length; k < iterations; ++k)for(var i = 0, link, source, target, x, y, l, b; i < n; ++i){
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || (0, $1K7os.default)(random);
            y = target.y + target.vy - source.y - source.vy || (0, $1K7os.default)(random);
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
        }
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, m = links.length, nodeById = new Map(nodes.map((d, i)=>[
                id(d, i, nodes),
                d
            ])), link;
        for(i = 0, count = new Array(n); i < m; ++i){
            link = links[i], link.index = i;
            if (typeof link.source !== "object") link.source = $c194de9779db34e9$var$find(nodeById, link.source);
            if (typeof link.target !== "object") link.target = $c194de9779db34e9$var$find(nodeById, link.target);
            count[link.source.index] = (count[link.source.index] || 0) + 1;
            count[link.target.index] = (count[link.target.index] || 0) + 1;
        }
        for(i = 0, bias = new Array(m); i < m; ++i)link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
    }
    function initializeStrength() {
        if (!nodes) return;
        for(var i = 0, n = links.length; i < n; ++i)strengths[i] = +strength(links[i], i, links);
    }
    function initializeDistance() {
        if (!nodes) return;
        for(var i = 0, n = links.length; i < n; ++i)distances[i] = +distance(links[i], i, links);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.links = function(_) {
        return arguments.length ? (links = _, initialize(), force) : links;
    };
    force.id = function(_) {
        return arguments.length ? (id = _, force) : id;
    };
    force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initializeStrength(), force) : strength;
    };
    force.distance = function(_) {
        return arguments.length ? (distance = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initializeDistance(), force) : distance;
    };
    return force;
}

});

parcelRegister("b5BBc", function(module, exports) {

$parcel$export(module.exports, "default", () => $812d53b407d0d375$export$2e2bcd8739ae039);

var $k4AM3 = parcelRequire("k4AM3");

var $7PFII = parcelRequire("7PFII");

var $1K7os = parcelRequire("1K7os");

var $6nDpC = parcelRequire("6nDpC");
function $812d53b407d0d375$export$2e2bcd8739ae039() {
    var nodes, node, random, alpha, strength = (0, $7PFII.default)(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force(_) {
        var i, n = nodes.length, tree = (0, $k4AM3.default)(nodes, (0, $6nDpC.x), (0, $6nDpC.y)).visitAfter(accumulate);
        for(alpha = _, i = 0; i < n; ++i)node = nodes[i], tree.visit(apply);
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        strengths = new Array(n);
        for(i = 0; i < n; ++i)node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
    }
    function accumulate(quad) {
        var strength = 0, q, c, weight = 0, x, y, i;
        // For internal nodes, accumulate forces from child quadrants.
        if (quad.length) {
            for(x = y = i = 0; i < 4; ++i)if ((q = quad[i]) && (c = Math.abs(q.value))) strength += q.value, weight += c, x += c * q.x, y += c * q.y;
            quad.x = x / weight;
            quad.y = y / weight;
        } else {
            q = quad;
            q.x = q.data.x;
            q.y = q.data.y;
            do strength += strengths[q.data.index];
            while (q = q.next);
        }
        quad.value = strength;
    }
    function apply(quad, x1, _, x2) {
        if (!quad.value) return true;
        var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;
        // Apply the Barnes-Hut approximation if possible.
        // Limit forces for very close nodes; randomize direction if coincident.
        if (w * w / theta2 < l) {
            if (l < distanceMax2) {
                if (x === 0) x = (0, $1K7os.default)(random), l += x * x;
                if (y === 0) y = (0, $1K7os.default)(random), l += y * y;
                if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
                node.vx += x * quad.value * alpha / l;
                node.vy += y * quad.value * alpha / l;
            }
            return true;
        } else if (quad.length || l >= distanceMax2) return;
        // Limit forces for very close nodes; randomize direction if coincident.
        if (quad.data !== node || quad.next) {
            if (x === 0) x = (0, $1K7os.default)(random), l += x * x;
            if (y === 0) y = (0, $1K7os.default)(random), l += y * y;
            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        }
        do if (quad.data !== node) {
            w = strengths[quad.data.index] * alpha / l;
            node.vx += x * w;
            node.vy += y * w;
        }
        while (quad = quad.next);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initialize(), force) : strength;
    };
    force.distanceMin = function(_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };
    force.distanceMax = function(_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };
    force.theta = function(_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };
    return force;
}

});
parcelRegister("6nDpC", function(module, exports) {

$parcel$export(module.exports, "x", () => $4a53767b57aba9c2$export$d141bba7fdc215a3);
$parcel$export(module.exports, "y", () => $4a53767b57aba9c2$export$4a5767248b18ef41);
$parcel$export(module.exports, "default", () => $4a53767b57aba9c2$export$2e2bcd8739ae039);

var $klz5v = parcelRequire("klz5v");

var $fMkui = parcelRequire("fMkui");

var $7C2ds = parcelRequire("7C2ds");
function $4a53767b57aba9c2$export$d141bba7fdc215a3(d) {
    return d.x;
}
function $4a53767b57aba9c2$export$4a5767248b18ef41(d) {
    return d.y;
}
var $4a53767b57aba9c2$var$initialRadius = 10, $4a53767b57aba9c2$var$initialAngle = Math.PI * (3 - Math.sqrt(5));
function $4a53767b57aba9c2$export$2e2bcd8739ae039(nodes) {
    var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = (0, $fMkui.timer)(step), event = (0, $klz5v.default)("tick", "end"), random = (0, $7C2ds.default)();
    if (nodes == null) nodes = [];
    function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
            stepper.stop();
            event.call("end", simulation);
        }
    }
    function tick(iterations) {
        var i, n = nodes.length, node;
        if (iterations === undefined) iterations = 1;
        for(var k = 0; k < iterations; ++k){
            alpha += (alphaTarget - alpha) * alphaDecay;
            forces.forEach(function(force) {
                force(alpha);
            });
            for(i = 0; i < n; ++i){
                node = nodes[i];
                if (node.fx == null) node.x += node.vx *= velocityDecay;
                else node.x = node.fx, node.vx = 0;
                if (node.fy == null) node.y += node.vy *= velocityDecay;
                else node.y = node.fy, node.vy = 0;
            }
        }
        return simulation;
    }
    function initializeNodes() {
        for(var i = 0, n = nodes.length, node; i < n; ++i){
            node = nodes[i], node.index = i;
            if (node.fx != null) node.x = node.fx;
            if (node.fy != null) node.y = node.fy;
            if (isNaN(node.x) || isNaN(node.y)) {
                var radius = $4a53767b57aba9c2$var$initialRadius * Math.sqrt(0.5 + i), angle = i * $4a53767b57aba9c2$var$initialAngle;
                node.x = radius * Math.cos(angle);
                node.y = radius * Math.sin(angle);
            }
            if (isNaN(node.vx) || isNaN(node.vy)) node.vx = node.vy = 0;
        }
    }
    function initializeForce(force) {
        if (force.initialize) force.initialize(nodes, random);
        return force;
    }
    initializeNodes();
    return simulation = {
        tick: tick,
        restart: function() {
            return stepper.restart(step), simulation;
        },
        stop: function() {
            return stepper.stop(), simulation;
        },
        nodes: function(_) {
            return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },
        alpha: function(_) {
            return arguments.length ? (alpha = +_, simulation) : alpha;
        },
        alphaMin: function(_) {
            return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },
        alphaDecay: function(_) {
            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },
        alphaTarget: function(_) {
            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },
        velocityDecay: function(_) {
            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },
        randomSource: function(_) {
            return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
        },
        force: function(name, _) {
            return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
        },
        find: function(x, y, radius) {
            var i = 0, n = nodes.length, dx, dy, d2, node, closest;
            if (radius == null) radius = Infinity;
            else radius *= radius;
            for(i = 0; i < n; ++i){
                node = nodes[i];
                dx = x - node.x;
                dy = y - node.y;
                d2 = dx * dx + dy * dy;
                if (d2 < radius) closest = node, radius = d2;
            }
            return closest;
        },
        on: function(name, _) {
            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
    };
}

});
parcelRegister("klz5v", function(module, exports) {

$parcel$export(module.exports, "default", () => $ed00fc87c4b6d46b$export$2e2bcd8739ae039);
var $ed00fc87c4b6d46b$var$noop = {
    value: ()=>{}
};
function $ed00fc87c4b6d46b$var$dispatch() {
    for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){
        if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
    }
    return new $ed00fc87c4b6d46b$var$Dispatch(_);
}
function $ed00fc87c4b6d46b$var$Dispatch(_) {
    this._ = _;
}
function $ed00fc87c4b6d46b$var$parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {
            type: t,
            name: name
        };
    });
}
$ed00fc87c4b6d46b$var$Dispatch.prototype = $ed00fc87c4b6d46b$var$dispatch.prototype = {
    constructor: $ed00fc87c4b6d46b$var$Dispatch,
    on: function(typename, callback) {
        var _ = this._, T = $ed00fc87c4b6d46b$var$parseTypenames(typename + "", _), t, i = -1, n = T.length;
        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
            while(++i < n)if ((t = (typename = T[i]).type) && (t = $ed00fc87c4b6d46b$var$get(_[t], typename.name))) return t;
            return;
        }
        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while(++i < n){
            if (t = (typename = T[i]).type) _[t] = $ed00fc87c4b6d46b$var$set(_[t], typename.name, callback);
            else if (callback == null) for(t in _)_[t] = $ed00fc87c4b6d46b$var$set(_[t], typename.name, null);
        }
        return this;
    },
    copy: function() {
        var copy = {}, _ = this._;
        for(var t in _)copy[t] = _[t].slice();
        return new $ed00fc87c4b6d46b$var$Dispatch(copy);
    },
    call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    }
};
function $ed00fc87c4b6d46b$var$get(type, name) {
    for(var i = 0, n = type.length, c; i < n; ++i){
        if ((c = type[i]).name === name) return c.value;
    }
}
function $ed00fc87c4b6d46b$var$set(type, name, callback) {
    for(var i = 0, n = type.length; i < n; ++i)if (type[i].name === name) {
        type[i] = $ed00fc87c4b6d46b$var$noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
    }
    if (callback != null) type.push({
        name: name,
        value: callback
    });
    return type;
}
var $ed00fc87c4b6d46b$export$2e2bcd8739ae039 = $ed00fc87c4b6d46b$var$dispatch;

});

parcelRegister("fMkui", function(module, exports) {

$parcel$export(module.exports, "now", () => $b7cb3b1ed204811b$export$461939dd4422153);
$parcel$export(module.exports, "Timer", () => $b7cb3b1ed204811b$export$c57e9b2d8b9e4de);
$parcel$export(module.exports, "timer", () => $b7cb3b1ed204811b$export$9dc4ecf953986f04);
var $b7cb3b1ed204811b$var$frame = 0, $b7cb3b1ed204811b$var$timeout = 0, $b7cb3b1ed204811b$var$interval = 0, $b7cb3b1ed204811b$var$pokeDelay = 1000, $b7cb3b1ed204811b$var$taskHead, $b7cb3b1ed204811b$var$taskTail, $b7cb3b1ed204811b$var$clockLast = 0, $b7cb3b1ed204811b$var$clockNow = 0, $b7cb3b1ed204811b$var$clockSkew = 0, $b7cb3b1ed204811b$var$clock = typeof performance === "object" && performance.now ? performance : Date, $b7cb3b1ed204811b$var$setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
};
function $b7cb3b1ed204811b$export$461939dd4422153() {
    return $b7cb3b1ed204811b$var$clockNow || ($b7cb3b1ed204811b$var$setFrame($b7cb3b1ed204811b$var$clearNow), $b7cb3b1ed204811b$var$clockNow = $b7cb3b1ed204811b$var$clock.now() + $b7cb3b1ed204811b$var$clockSkew);
}
function $b7cb3b1ed204811b$var$clearNow() {
    $b7cb3b1ed204811b$var$clockNow = 0;
}
function $b7cb3b1ed204811b$export$c57e9b2d8b9e4de() {
    this._call = this._time = this._next = null;
}
$b7cb3b1ed204811b$export$c57e9b2d8b9e4de.prototype = $b7cb3b1ed204811b$export$9dc4ecf953986f04.prototype = {
    constructor: $b7cb3b1ed204811b$export$c57e9b2d8b9e4de,
    restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? $b7cb3b1ed204811b$export$461939dd4422153() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && $b7cb3b1ed204811b$var$taskTail !== this) {
            if ($b7cb3b1ed204811b$var$taskTail) $b7cb3b1ed204811b$var$taskTail._next = this;
            else $b7cb3b1ed204811b$var$taskHead = this;
            $b7cb3b1ed204811b$var$taskTail = this;
        }
        this._call = callback;
        this._time = time;
        $b7cb3b1ed204811b$var$sleep();
    },
    stop: function() {
        if (this._call) {
            this._call = null;
            this._time = Infinity;
            $b7cb3b1ed204811b$var$sleep();
        }
    }
};
function $b7cb3b1ed204811b$export$9dc4ecf953986f04(callback, delay, time) {
    var t = new $b7cb3b1ed204811b$export$c57e9b2d8b9e4de;
    t.restart(callback, delay, time);
    return t;
}
function $b7cb3b1ed204811b$export$d60154c1d7f3990e() {
    $b7cb3b1ed204811b$export$461939dd4422153(); // Get the current time, if not already set.
    ++$b7cb3b1ed204811b$var$frame; // Pretend we’ve set an alarm, if we haven’t already.
    var t = $b7cb3b1ed204811b$var$taskHead, e;
    while(t){
        if ((e = $b7cb3b1ed204811b$var$clockNow - t._time) >= 0) t._call.call(undefined, e);
        t = t._next;
    }
    --$b7cb3b1ed204811b$var$frame;
}
function $b7cb3b1ed204811b$var$wake() {
    $b7cb3b1ed204811b$var$clockNow = ($b7cb3b1ed204811b$var$clockLast = $b7cb3b1ed204811b$var$clock.now()) + $b7cb3b1ed204811b$var$clockSkew;
    $b7cb3b1ed204811b$var$frame = $b7cb3b1ed204811b$var$timeout = 0;
    try {
        $b7cb3b1ed204811b$export$d60154c1d7f3990e();
    } finally{
        $b7cb3b1ed204811b$var$frame = 0;
        $b7cb3b1ed204811b$var$nap();
        $b7cb3b1ed204811b$var$clockNow = 0;
    }
}
function $b7cb3b1ed204811b$var$poke() {
    var now = $b7cb3b1ed204811b$var$clock.now(), delay = now - $b7cb3b1ed204811b$var$clockLast;
    if (delay > $b7cb3b1ed204811b$var$pokeDelay) $b7cb3b1ed204811b$var$clockSkew -= delay, $b7cb3b1ed204811b$var$clockLast = now;
}
function $b7cb3b1ed204811b$var$nap() {
    var t0, t1 = $b7cb3b1ed204811b$var$taskHead, t2, time = Infinity;
    while(t1)if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
    } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : $b7cb3b1ed204811b$var$taskHead = t2;
    }
    $b7cb3b1ed204811b$var$taskTail = t0;
    $b7cb3b1ed204811b$var$sleep(time);
}
function $b7cb3b1ed204811b$var$sleep(time) {
    if ($b7cb3b1ed204811b$var$frame) return; // Soonest alarm already set, or will be.
    if ($b7cb3b1ed204811b$var$timeout) $b7cb3b1ed204811b$var$timeout = clearTimeout($b7cb3b1ed204811b$var$timeout);
    var delay = time - $b7cb3b1ed204811b$var$clockNow; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
        if (time < Infinity) $b7cb3b1ed204811b$var$timeout = setTimeout($b7cb3b1ed204811b$var$wake, time - $b7cb3b1ed204811b$var$clock.now() - $b7cb3b1ed204811b$var$clockSkew);
        if ($b7cb3b1ed204811b$var$interval) $b7cb3b1ed204811b$var$interval = clearInterval($b7cb3b1ed204811b$var$interval);
    } else {
        if (!$b7cb3b1ed204811b$var$interval) $b7cb3b1ed204811b$var$clockLast = $b7cb3b1ed204811b$var$clock.now(), $b7cb3b1ed204811b$var$interval = setInterval($b7cb3b1ed204811b$var$poke, $b7cb3b1ed204811b$var$pokeDelay);
        $b7cb3b1ed204811b$var$frame = 1, $b7cb3b1ed204811b$var$setFrame($b7cb3b1ed204811b$var$wake);
    }
}

});

parcelRegister("7C2ds", function(module, exports) {

$parcel$export(module.exports, "default", () => $58adcd0f7fbe3e1a$export$2e2bcd8739ae039);
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
const $58adcd0f7fbe3e1a$var$a = 1664525;
const $58adcd0f7fbe3e1a$var$c = 1013904223;
const $58adcd0f7fbe3e1a$var$m = 4294967296; // 2^32
function $58adcd0f7fbe3e1a$export$2e2bcd8739ae039() {
    let s = 1;
    return ()=>(s = ($58adcd0f7fbe3e1a$var$a * s + $58adcd0f7fbe3e1a$var$c) % $58adcd0f7fbe3e1a$var$m) / $58adcd0f7fbe3e1a$var$m;
}

});



parcelRegister("bhQeP", function(module, exports) {

$parcel$export(module.exports, "default", () => $8379cda3c893102c$export$2e2bcd8739ae039);

var $7PFII = parcelRequire("7PFII");
function $8379cda3c893102c$export$2e2bcd8739ae039(x) {
    var strength = (0, $7PFII.default)(0.1), nodes, strengths, xz;
    if (typeof x !== "function") x = (0, $7PFII.default)(x == null ? 0 : +x);
    function force(alpha) {
        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for(i = 0; i < n; ++i)strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
    force.initialize = function(_) {
        nodes = _;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initialize(), force) : strength;
    };
    force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initialize(), force) : x;
    };
    return force;
}

});

parcelRegister("23LS8", function(module, exports) {

$parcel$export(module.exports, "default", () => $1800ff03fca70158$export$2e2bcd8739ae039);

var $7PFII = parcelRequire("7PFII");
function $1800ff03fca70158$export$2e2bcd8739ae039(y) {
    var strength = (0, $7PFII.default)(0.1), nodes, strengths, yz;
    if (typeof y !== "function") y = (0, $7PFII.default)(y == null ? 0 : +y);
    function force(alpha) {
        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for(i = 0; i < n; ++i)strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
    force.initialize = function(_) {
        nodes = _;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initialize(), force) : strength;
    };
    force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : (0, $7PFII.default)(+_), initialize(), force) : y;
    };
    return force;
}

});


parcelRegister("812XD", function(module, exports) {

$parcel$export(module.exports, "nest", () => $5d60b6b11c792a03$export$5fe5d81cd40111fc);
$parcel$export(module.exports, "pack", () => $5d60b6b11c792a03$export$2a703dbb0cb35339);
$parcel$export(module.exports, "partition", () => $5d60b6b11c792a03$export$b29f828819edca8d);
$parcel$export(module.exports, "stratify", () => $5d60b6b11c792a03$export$8a1e09ae5d6ea5cc);
$parcel$export(module.exports, "tree", () => $5d60b6b11c792a03$export$4767d4262788a6cc);
$parcel$export(module.exports, "treelinks", () => $5d60b6b11c792a03$export$c93dff4f77b341a2);
$parcel$export(module.exports, "treemap", () => $5d60b6b11c792a03$export$b34c265403efef2e);

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");

var $exnma = parcelRequire("exnma");
var $7GHo1 = parcelRequire("7GHo1");
var $1QcwJ = parcelRequire("1QcwJ");
var $94UND = parcelRequire("94UND");
var $9VW8z = parcelRequire("9VW8z");
var $gYE7m = parcelRequire("gYE7m");
var $25yxI = parcelRequire("25yxI");
var $8TpVT = parcelRequire("8TpVT");
var $cZg7R = parcelRequire("cZg7R");
var $29rFd = parcelRequire("29rFd");
var $9ww53 = parcelRequire("9ww53");
var $fNFzk = parcelRequire("fNFzk");
var $bjBZG = parcelRequire("bjBZG");
// Build lookup table mapping tuple keys to tree node instances
function $5d60b6b11c792a03$var$lookup(tree, key, filter) {
    const map = {};
    tree.each((node)=>{
        const t = node.data;
        if (filter(t)) map[key(t)] = node;
    });
    tree.lookup = map;
    return tree;
}
/**
 * Nest tuples into a tree structure, grouped by key values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
 * @param {boolean} [params.generate=false] - A boolean flag indicating if
 *   non-leaf nodes generated by this transform should be included in the
 *   output. The default (false) includes only the input data (leaf nodes)
 *   in the data stream.
 */ function $5d60b6b11c792a03$export$5fe5d81cd40111fc(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$5d60b6b11c792a03$export$5fe5d81cd40111fc.Definition = {
    "type": "Nest",
    "metadata": {
        "treesource": true,
        "changes": true
    },
    "params": [
        {
            "name": "keys",
            "type": "field",
            "array": true
        },
        {
            "name": "generate",
            "type": "boolean"
        }
    ]
};
const $5d60b6b11c792a03$var$children = (n)=>n.values;
(0, $4SWbq.inherits)($5d60b6b11c792a03$export$5fe5d81cd40111fc, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (!pulse.source) (0, $4SWbq.error)("Nest transform requires an upstream data source.");
        var gen = _.generate, mod = _.modified(), out = pulse.clone(), tree = this.value;
        if (!tree || mod || pulse.changed()) {
            // collect nodes to remove
            if (tree) tree.each((node)=>{
                if (node.children && (0, $4jOgW.isTuple)(node.data)) out.rem.push(node.data);
            });
            // generate new tree structure
            this.value = tree = (0, $7GHo1.default)({
                values: (0, $4SWbq.array)(_.keys).reduce((n, k)=>{
                    n.key(k);
                    return n;
                }, $5d60b6b11c792a03$var$nest()).entries(out.source)
            }, $5d60b6b11c792a03$var$children);
            // collect nodes to add
            if (gen) tree.each((node)=>{
                if (node.children) {
                    node = (0, $4jOgW.ingest)(node.data);
                    out.add.push(node);
                    out.source.push(node);
                }
            });
            // build lookup table
            $5d60b6b11c792a03$var$lookup(tree, (0, $4jOgW.tupleid), (0, $4jOgW.tupleid));
        }
        out.source.root = tree;
        return out;
    }
});
function $5d60b6b11c792a03$var$nest() {
    const keys = [], nest = {
        entries: (array)=>entries(apply(array, 0), 0),
        key: (d)=>(keys.push(d), nest)
    };
    function apply(array, depth) {
        if (depth >= keys.length) return array;
        const n = array.length, key = keys[depth++], valuesByKey = {}, result = {};
        let i = -1, keyValue, value, values;
        while(++i < n){
            keyValue = key(value = array[i]) + "";
            if (values = valuesByKey[keyValue]) values.push(value);
            else valuesByKey[keyValue] = [
                value
            ];
        }
        for(keyValue in valuesByKey)result[keyValue] = apply(valuesByKey[keyValue], depth);
        return result;
    }
    function entries(map, depth) {
        if (++depth > keys.length) return map;
        const array = [];
        for(const key in map)array.push({
            key: key,
            values: entries(map[key], depth)
        });
        return array;
    }
    return nest;
}
/**
 * Abstract class for tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function $5d60b6b11c792a03$var$HierarchyLayout(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
const $5d60b6b11c792a03$var$defaultSeparation = (a, b)=>a.parent === b.parent ? 1 : 2;
(0, $4SWbq.inherits)($5d60b6b11c792a03$var$HierarchyLayout, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (!pulse.source || !pulse.source.root) (0, $4SWbq.error)(this.constructor.name + " transform requires a backing tree data source.");
        const layout = this.layout(_.method), fields = this.fields, root = pulse.source.root, as = _.as || fields;
        if (_.field) root.sum(_.field);
        else root.count();
        if (_.sort) root.sort((0, $4jOgW.stableCompare)(_.sort, (d)=>d.data));
        $5d60b6b11c792a03$var$setParams(layout, this.params, _);
        if (layout.separation) layout.separation(_.separation !== false ? $5d60b6b11c792a03$var$defaultSeparation : (0, $4SWbq.one));
        try {
            this.value = layout(root);
        } catch (err) {
            (0, $4SWbq.error)(err);
        }
        root.each((node)=>$5d60b6b11c792a03$var$setFields(node, fields, as));
        return pulse.reflow(_.modified()).modifies(as).modifies("leaf");
    }
});
function $5d60b6b11c792a03$var$setParams(layout, params, _) {
    for(let p, i = 0, n = params.length; i < n; ++i){
        p = params[i];
        if (p in _) layout[p](_[p]);
    }
}
function $5d60b6b11c792a03$var$setFields(node, fields, as) {
    const t = node.data, n = fields.length - 1;
    for(let i = 0; i < n; ++i)t[as[i]] = node[fields[i]];
    t[as[n]] = node.children ? node.children.length : 0;
}
const $5d60b6b11c792a03$var$Output$3 = [
    "x",
    "y",
    "r",
    "depth",
    "children"
];
/**
 * Packed circle tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */ function $5d60b6b11c792a03$export$2a703dbb0cb35339(params) {
    $5d60b6b11c792a03$var$HierarchyLayout.call(this, params);
}
$5d60b6b11c792a03$export$2a703dbb0cb35339.Definition = {
    "type": "Pack",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "padding",
            "type": "number",
            "default": 0
        },
        {
            "name": "radius",
            "type": "field",
            "default": null
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": $5d60b6b11c792a03$var$Output$3.length,
            "default": $5d60b6b11c792a03$var$Output$3
        }
    ]
};
(0, $4SWbq.inherits)($5d60b6b11c792a03$export$2a703dbb0cb35339, $5d60b6b11c792a03$var$HierarchyLayout, {
    layout: (0, $1QcwJ.default),
    params: [
        "radius",
        "size",
        "padding"
    ],
    fields: $5d60b6b11c792a03$var$Output$3
});
const $5d60b6b11c792a03$var$Output$2 = [
    "x0",
    "y0",
    "x1",
    "y1",
    "depth",
    "children"
];
/**
 * Partition tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */ function $5d60b6b11c792a03$export$b29f828819edca8d(params) {
    $5d60b6b11c792a03$var$HierarchyLayout.call(this, params);
}
$5d60b6b11c792a03$export$b29f828819edca8d.Definition = {
    "type": "Partition",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "padding",
            "type": "number",
            "default": 0
        },
        {
            "name": "round",
            "type": "boolean",
            "default": false
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": $5d60b6b11c792a03$var$Output$2.length,
            "default": $5d60b6b11c792a03$var$Output$2
        }
    ]
};
(0, $4SWbq.inherits)($5d60b6b11c792a03$export$b29f828819edca8d, $5d60b6b11c792a03$var$HierarchyLayout, {
    layout: (0, $94UND.default),
    params: [
        "size",
        "round",
        "padding"
    ],
    fields: $5d60b6b11c792a03$var$Output$2
});
/**
 * Stratify a collection of tuples into a tree structure based on
 * id and parent id fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.key - Unique key field for each tuple.
 * @param {function(object): *} params.parentKey - Field with key for parent tuple.
 */ function $5d60b6b11c792a03$export$8a1e09ae5d6ea5cc(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$5d60b6b11c792a03$export$8a1e09ae5d6ea5cc.Definition = {
    "type": "Stratify",
    "metadata": {
        "treesource": true
    },
    "params": [
        {
            "name": "key",
            "type": "field",
            "required": true
        },
        {
            "name": "parentKey",
            "type": "field",
            "required": true
        }
    ]
};
(0, $4SWbq.inherits)($5d60b6b11c792a03$export$8a1e09ae5d6ea5cc, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (!pulse.source) (0, $4SWbq.error)("Stratify transform requires an upstream data source.");
        let tree = this.value;
        const mod = _.modified(), out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE), run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields);
        // prevent upstream source pollution
        out.source = out.source.slice();
        if (run) tree = out.source.length ? $5d60b6b11c792a03$var$lookup((0, $9VW8z.default)().id(_.key).parentId(_.parentKey)(out.source), _.key, (0, $4SWbq.truthy)) : $5d60b6b11c792a03$var$lookup((0, $9VW8z.default)()([
            {}
        ]), _.key, _.key);
        out.source.root = this.value = tree;
        return out;
    }
});
const $5d60b6b11c792a03$var$Layouts = {
    tidy: (0, $gYE7m.default),
    cluster: (0, $exnma.default)
};
const $5d60b6b11c792a03$var$Output$1 = [
    "x",
    "y",
    "depth",
    "children"
];
/**
 * Tree layout. Depending on the method parameter, performs either
 * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function $5d60b6b11c792a03$export$4767d4262788a6cc(params) {
    $5d60b6b11c792a03$var$HierarchyLayout.call(this, params);
}
$5d60b6b11c792a03$export$4767d4262788a6cc.Definition = {
    "type": "Tree",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "method",
            "type": "enum",
            "default": "tidy",
            "values": [
                "tidy",
                "cluster"
            ]
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "nodeSize",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "separation",
            "type": "boolean",
            "default": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": $5d60b6b11c792a03$var$Output$1.length,
            "default": $5d60b6b11c792a03$var$Output$1
        }
    ]
};
(0, $4SWbq.inherits)($5d60b6b11c792a03$export$4767d4262788a6cc, $5d60b6b11c792a03$var$HierarchyLayout, {
    /**
   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
   */ layout (method) {
        const m = method || "tidy";
        if ((0, $4SWbq.hasOwnProperty)($5d60b6b11c792a03$var$Layouts, m)) return $5d60b6b11c792a03$var$Layouts[m]();
        else (0, $4SWbq.error)("Unrecognized Tree layout method: " + m);
    },
    params: [
        "size",
        "nodeSize"
    ],
    fields: $5d60b6b11c792a03$var$Output$1
});
/**
 * Generate tuples representing links between tree nodes.
 * The resulting tuples will contain 'source' and 'target' fields,
 * which point to parent and child node tuples, respectively.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */ function $5d60b6b11c792a03$export$c93dff4f77b341a2(params) {
    (0, $4jOgW.Transform).call(this, [], params);
}
$5d60b6b11c792a03$export$c93dff4f77b341a2.Definition = {
    "type": "TreeLinks",
    "metadata": {
        "tree": true,
        "generates": true,
        "changes": true
    },
    "params": []
};
(0, $4SWbq.inherits)($5d60b6b11c792a03$export$c93dff4f77b341a2, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const links = this.value, tree = pulse.source && pulse.source.root, out = pulse.fork(pulse.NO_SOURCE), lut = {};
        if (!tree) (0, $4SWbq.error)("TreeLinks transform requires a tree data source.");
        if (pulse.changed(pulse.ADD_REM)) {
            // remove previous links
            out.rem = links;
            // build lookup table of valid tuples
            pulse.visit(pulse.SOURCE, (t)=>lut[(0, $4jOgW.tupleid)(t)] = 1);
            // generate links for all edges incident on valid tuples
            tree.each((node)=>{
                const t = node.data, p = node.parent && node.parent.data;
                if (p && lut[(0, $4jOgW.tupleid)(t)] && lut[(0, $4jOgW.tupleid)(p)]) out.add.push((0, $4jOgW.ingest)({
                    source: p,
                    target: t
                }));
            });
            this.value = out.add;
        } else if (pulse.changed(pulse.MOD)) {
            // build lookup table of modified tuples
            pulse.visit(pulse.MOD, (t)=>lut[(0, $4jOgW.tupleid)(t)] = 1);
            // gather links incident on modified tuples
            links.forEach((link)=>{
                if (lut[(0, $4jOgW.tupleid)(link.source)] || lut[(0, $4jOgW.tupleid)(link.target)]) out.mod.push(link);
            });
        }
        return out;
    }
});
const $5d60b6b11c792a03$var$Tiles = {
    binary: (0, $8TpVT.default),
    dice: (0, $cZg7R.default),
    slice: (0, $9ww53.default),
    slicedice: (0, $fNFzk.default),
    squarify: (0, $bjBZG.default),
    resquarify: (0, $29rFd.default)
};
const $5d60b6b11c792a03$var$Output = [
    "x0",
    "y0",
    "x1",
    "y1",
    "depth",
    "children"
];
/**
 * Treemap layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */ function $5d60b6b11c792a03$export$b34c265403efef2e(params) {
    $5d60b6b11c792a03$var$HierarchyLayout.call(this, params);
}
$5d60b6b11c792a03$export$b34c265403efef2e.Definition = {
    "type": "Treemap",
    "metadata": {
        "tree": true,
        "modifies": true
    },
    "params": [
        {
            "name": "field",
            "type": "field"
        },
        {
            "name": "sort",
            "type": "compare"
        },
        {
            "name": "method",
            "type": "enum",
            "default": "squarify",
            "values": [
                "squarify",
                "resquarify",
                "binary",
                "dice",
                "slice",
                "slicedice"
            ]
        },
        {
            "name": "padding",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingInner",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingOuter",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingTop",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingRight",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingBottom",
            "type": "number",
            "default": 0
        },
        {
            "name": "paddingLeft",
            "type": "number",
            "default": 0
        },
        {
            "name": "ratio",
            "type": "number",
            "default": 1.618033988749895
        },
        {
            "name": "round",
            "type": "boolean",
            "default": false
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": $5d60b6b11c792a03$var$Output.length,
            "default": $5d60b6b11c792a03$var$Output
        }
    ]
};
(0, $4SWbq.inherits)($5d60b6b11c792a03$export$b34c265403efef2e, $5d60b6b11c792a03$var$HierarchyLayout, {
    /**
   * Treemap layout generator. Adds 'method' and 'ratio' parameters
   * to configure the underlying tile method.
   */ layout () {
        const x = (0, $25yxI.default)();
        x.ratio = (_)=>{
            const t = x.tile();
            if (t.ratio) x.tile(t.ratio(_));
        };
        x.method = (_)=>{
            if ((0, $4SWbq.hasOwnProperty)($5d60b6b11c792a03$var$Tiles, _)) x.tile($5d60b6b11c792a03$var$Tiles[_]);
            else (0, $4SWbq.error)("Unrecognized Treemap layout method: " + _);
        };
        return x;
    },
    params: [
        "method",
        "ratio",
        "size",
        "round",
        "padding",
        "paddingInner",
        "paddingOuter",
        "paddingTop",
        "paddingRight",
        "paddingBottom",
        "paddingLeft"
    ],
    fields: $5d60b6b11c792a03$var$Output
});

});
parcelRegister("exnma", function(module, exports) {

$parcel$export(module.exports, "default", () => $a95643e5f1899d02$export$2e2bcd8739ae039);
function $a95643e5f1899d02$var$defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
}
function $a95643e5f1899d02$var$meanX(children) {
    return children.reduce($a95643e5f1899d02$var$meanXReduce, 0) / children.length;
}
function $a95643e5f1899d02$var$meanXReduce(x, c) {
    return x + c.x;
}
function $a95643e5f1899d02$var$maxY(children) {
    return 1 + children.reduce($a95643e5f1899d02$var$maxYReduce, 0);
}
function $a95643e5f1899d02$var$maxYReduce(y, c) {
    return Math.max(y, c.y);
}
function $a95643e5f1899d02$var$leafLeft(node) {
    var children;
    while(children = node.children)node = children[0];
    return node;
}
function $a95643e5f1899d02$var$leafRight(node) {
    var children;
    while(children = node.children)node = children[children.length - 1];
    return node;
}
function $a95643e5f1899d02$export$2e2bcd8739ae039() {
    var separation = $a95643e5f1899d02$var$defaultSeparation, dx = 1, dy = 1, nodeSize = false;
    function cluster(root) {
        var previousNode, x = 0;
        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
            var children = node.children;
            if (children) {
                node.x = $a95643e5f1899d02$var$meanX(children);
                node.y = $a95643e5f1899d02$var$maxY(children);
            } else {
                node.x = previousNode ? x += separation(node, previousNode) : 0;
                node.y = 0;
                previousNode = node;
            }
        });
        var left = $a95643e5f1899d02$var$leafLeft(root), right = $a95643e5f1899d02$var$leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
            node.x = (node.x - root.x) * dx;
            node.y = (root.y - node.y) * dy;
        } : function(node) {
            node.x = (node.x - x0) / (x1 - x0) * dx;
            node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
    }
    cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
    };
    cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return cluster;
}

});

parcelRegister("7GHo1", function(module, exports) {

$parcel$export(module.exports, "default", () => $598e1c500660db59$export$2e2bcd8739ae039);
$parcel$export(module.exports, "Node", () => $598e1c500660db59$export$85c928794f8d04d4);
$parcel$export(module.exports, "computeHeight", () => $598e1c500660db59$export$5af32d52ab5dfd57);

var $4fzJT = parcelRequire("4fzJT");

var $dnb8J = parcelRequire("dnb8J");

var $8WXBf = parcelRequire("8WXBf");

var $hnTp6 = parcelRequire("hnTp6");

var $5wJRS = parcelRequire("5wJRS");

var $4Eh05 = parcelRequire("4Eh05");

var $443s7 = parcelRequire("443s7");

var $gVpoj = parcelRequire("gVpoj");

var $dVOe0 = parcelRequire("dVOe0");

var $jE7nv = parcelRequire("jE7nv");

var $TGrF7 = parcelRequire("TGrF7");

var $1n6Ii = parcelRequire("1n6Ii");

var $36NEp = parcelRequire("36NEp");
function $598e1c500660db59$export$2e2bcd8739ae039(data, children) {
    if (data instanceof Map) {
        data = [
            undefined,
            data
        ];
        if (children === undefined) children = $598e1c500660db59$var$mapChildren;
    } else if (children === undefined) children = $598e1c500660db59$var$objectChildren;
    var root = new $598e1c500660db59$export$85c928794f8d04d4(data), node, nodes = [
        root
    ], child, childs, i, n;
    while(node = nodes.pop())if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
        node.children = childs;
        for(i = n - 1; i >= 0; --i){
            nodes.push(child = childs[i] = new $598e1c500660db59$export$85c928794f8d04d4(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
        }
    }
    return root.eachBefore($598e1c500660db59$export$5af32d52ab5dfd57);
}
function $598e1c500660db59$var$node_copy() {
    return $598e1c500660db59$export$2e2bcd8739ae039(this).eachBefore($598e1c500660db59$var$copyData);
}
function $598e1c500660db59$var$objectChildren(d) {
    return d.children;
}
function $598e1c500660db59$var$mapChildren(d) {
    return Array.isArray(d) ? d[1] : null;
}
function $598e1c500660db59$var$copyData(node) {
    if (node.data.value !== undefined) node.value = node.data.value;
    node.data = node.data.data;
}
function $598e1c500660db59$export$5af32d52ab5dfd57(node) {
    var height = 0;
    do node.height = height;
    while ((node = node.parent) && node.height < ++height);
}
function $598e1c500660db59$export$85c928794f8d04d4(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
}
$598e1c500660db59$export$85c928794f8d04d4.prototype = $598e1c500660db59$export$2e2bcd8739ae039.prototype = {
    constructor: $598e1c500660db59$export$85c928794f8d04d4,
    count: (0, $4fzJT.default),
    each: (0, $dnb8J.default),
    eachAfter: (0, $hnTp6.default),
    eachBefore: (0, $8WXBf.default),
    find: (0, $5wJRS.default),
    sum: (0, $4Eh05.default),
    sort: (0, $443s7.default),
    path: (0, $gVpoj.default),
    ancestors: (0, $dVOe0.default),
    descendants: (0, $jE7nv.default),
    leaves: (0, $TGrF7.default),
    links: (0, $1n6Ii.default),
    copy: $598e1c500660db59$var$node_copy,
    [Symbol.iterator]: (0, $36NEp.default)
};

});
parcelRegister("4fzJT", function(module, exports) {

$parcel$export(module.exports, "default", () => $3184492ebdbbb583$export$2e2bcd8739ae039);
function $3184492ebdbbb583$var$count(node) {
    var sum = 0, children = node.children, i = children && children.length;
    if (!i) sum = 1;
    else while(--i >= 0)sum += children[i].value;
    node.value = sum;
}
function $3184492ebdbbb583$export$2e2bcd8739ae039() {
    return this.eachAfter($3184492ebdbbb583$var$count);
}

});

parcelRegister("dnb8J", function(module, exports) {

$parcel$export(module.exports, "default", () => $9bc61075990db7f9$export$2e2bcd8739ae039);
function $9bc61075990db7f9$export$2e2bcd8739ae039(callback, that) {
    let index = -1;
    for (const node of this)callback.call(that, node, ++index, this);
    return this;
}

});

parcelRegister("8WXBf", function(module, exports) {

$parcel$export(module.exports, "default", () => $6841f8ce64704ac8$export$2e2bcd8739ae039);
function $6841f8ce64704ac8$export$2e2bcd8739ae039(callback, that) {
    var node = this, nodes = [
        node
    ], children, i, index = -1;
    while(node = nodes.pop()){
        callback.call(that, node, ++index, this);
        if (children = node.children) for(i = children.length - 1; i >= 0; --i)nodes.push(children[i]);
    }
    return this;
}

});

parcelRegister("hnTp6", function(module, exports) {

$parcel$export(module.exports, "default", () => $ca7f8fbb13c0c33b$export$2e2bcd8739ae039);
function $ca7f8fbb13c0c33b$export$2e2bcd8739ae039(callback, that) {
    var node = this, nodes = [
        node
    ], next = [], children, i, n, index = -1;
    while(node = nodes.pop()){
        next.push(node);
        if (children = node.children) for(i = 0, n = children.length; i < n; ++i)nodes.push(children[i]);
    }
    while(node = next.pop())callback.call(that, node, ++index, this);
    return this;
}

});

parcelRegister("5wJRS", function(module, exports) {

$parcel$export(module.exports, "default", () => $40638552d38b8b20$export$2e2bcd8739ae039);
function $40638552d38b8b20$export$2e2bcd8739ae039(callback, that) {
    let index = -1;
    for (const node of this){
        if (callback.call(that, node, ++index, this)) return node;
    }
}

});

parcelRegister("4Eh05", function(module, exports) {

$parcel$export(module.exports, "default", () => $362815c3ba920bd6$export$2e2bcd8739ae039);
function $362815c3ba920bd6$export$2e2bcd8739ae039(value) {
    return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
        while(--i >= 0)sum += children[i].value;
        node.value = sum;
    });
}

});

parcelRegister("443s7", function(module, exports) {

$parcel$export(module.exports, "default", () => $2f5a36c109f5299d$export$2e2bcd8739ae039);
function $2f5a36c109f5299d$export$2e2bcd8739ae039(compare) {
    return this.eachBefore(function(node) {
        if (node.children) node.children.sort(compare);
    });
}

});

parcelRegister("gVpoj", function(module, exports) {

$parcel$export(module.exports, "default", () => $c525aa60716ceb10$export$2e2bcd8739ae039);
function $c525aa60716ceb10$export$2e2bcd8739ae039(end) {
    var start = this, ancestor = $c525aa60716ceb10$var$leastCommonAncestor(start, end), nodes = [
        start
    ];
    while(start !== ancestor){
        start = start.parent;
        nodes.push(start);
    }
    var k = nodes.length;
    while(end !== ancestor){
        nodes.splice(k, 0, end);
        end = end.parent;
    }
    return nodes;
}
function $c525aa60716ceb10$var$leastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
    a = aNodes.pop();
    b = bNodes.pop();
    while(a === b){
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
    }
    return c;
}

});

parcelRegister("dVOe0", function(module, exports) {

$parcel$export(module.exports, "default", () => $a2478eda80e2fc73$export$2e2bcd8739ae039);
function $a2478eda80e2fc73$export$2e2bcd8739ae039() {
    var node = this, nodes = [
        node
    ];
    while(node = node.parent)nodes.push(node);
    return nodes;
}

});

parcelRegister("jE7nv", function(module, exports) {

$parcel$export(module.exports, "default", () => $e4d779dffeee6931$export$2e2bcd8739ae039);
function $e4d779dffeee6931$export$2e2bcd8739ae039() {
    return Array.from(this);
}

});

parcelRegister("TGrF7", function(module, exports) {

$parcel$export(module.exports, "default", () => $0a760fe4e6b84a20$export$2e2bcd8739ae039);
function $0a760fe4e6b84a20$export$2e2bcd8739ae039() {
    var leaves = [];
    this.eachBefore(function(node) {
        if (!node.children) leaves.push(node);
    });
    return leaves;
}

});

parcelRegister("1n6Ii", function(module, exports) {

$parcel$export(module.exports, "default", () => $0ffd259002db37b5$export$2e2bcd8739ae039);
function $0ffd259002db37b5$export$2e2bcd8739ae039() {
    var root = this, links = [];
    root.each(function(node) {
        if (node !== root) links.push({
            source: node.parent,
            target: node
        });
    });
    return links;
}

});

parcelRegister("36NEp", function(module, exports) {

$parcel$export(module.exports, "default", () => $243872414c934973$export$2e2bcd8739ae039);
function* $243872414c934973$export$2e2bcd8739ae039() {
    var node = this, current, next = [
        node
    ], children, i, n;
    do {
        current = next.reverse(), next = [];
        while(node = current.pop()){
            yield node;
            if (children = node.children) for(i = 0, n = children.length; i < n; ++i)next.push(children[i]);
        }
    }while (next.length);
}

});


parcelRegister("1QcwJ", function(module, exports) {

$parcel$export(module.exports, "default", () => $15745d5643bfd33c$export$2e2bcd8739ae039);

var $dSh23 = parcelRequire("dSh23");

var $3JI5I = parcelRequire("3JI5I");

var $evAkH = parcelRequire("evAkH");

var $hiyGJ = parcelRequire("hiyGJ");
function $15745d5643bfd33c$var$defaultRadius(d) {
    return Math.sqrt(d.value);
}
function $15745d5643bfd33c$export$2e2bcd8739ae039() {
    var radius = null, dx = 1, dy = 1, padding = (0, $3JI5I.constantZero);
    function pack(root) {
        const random = (0, $evAkH.default)();
        root.x = dx / 2, root.y = dy / 2;
        if (radius) root.eachBefore($15745d5643bfd33c$var$radiusLeaf(radius)).eachAfter($15745d5643bfd33c$var$packChildrenRandom(padding, 0.5, random)).eachBefore($15745d5643bfd33c$var$translateChild(1));
        else root.eachBefore($15745d5643bfd33c$var$radiusLeaf($15745d5643bfd33c$var$defaultRadius)).eachAfter($15745d5643bfd33c$var$packChildrenRandom((0, $3JI5I.constantZero), 1, random)).eachAfter($15745d5643bfd33c$var$packChildrenRandom(padding, root.r / Math.min(dx, dy), random)).eachBefore($15745d5643bfd33c$var$translateChild(Math.min(dx, dy) / (2 * root.r)));
        return root;
    }
    pack.radius = function(x) {
        return arguments.length ? (radius = (0, $dSh23.optional)(x), pack) : radius;
    };
    pack.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [
            dx,
            dy
        ];
    };
    pack.padding = function(x) {
        return arguments.length ? (padding = typeof x === "function" ? x : (0, $3JI5I.default)(+x), pack) : padding;
    };
    return pack;
}
function $15745d5643bfd33c$var$radiusLeaf(radius) {
    return function(node) {
        if (!node.children) node.r = Math.max(0, +radius(node) || 0);
    };
}
function $15745d5643bfd33c$var$packChildrenRandom(padding, k, random) {
    return function(node) {
        if (children = node.children) {
            var children, i, n = children.length, r = padding(node) * k || 0, e;
            if (r) for(i = 0; i < n; ++i)children[i].r += r;
            e = (0, $hiyGJ.packSiblingsRandom)(children, random);
            if (r) for(i = 0; i < n; ++i)children[i].r -= r;
            node.r = e + r;
        }
    };
}
function $15745d5643bfd33c$var$translateChild(k) {
    return function(node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
            node.x = parent.x + k * node.x;
            node.y = parent.y + k * node.y;
        }
    };
}

});
parcelRegister("dSh23", function(module, exports) {

$parcel$export(module.exports, "optional", () => $a19d87b7eab17b14$export$516e28dec6a4b6d4);
$parcel$export(module.exports, "required", () => $a19d87b7eab17b14$export$a7a0278c004aac3f);
function $a19d87b7eab17b14$export$516e28dec6a4b6d4(f) {
    return f == null ? null : $a19d87b7eab17b14$export$a7a0278c004aac3f(f);
}
function $a19d87b7eab17b14$export$a7a0278c004aac3f(f) {
    if (typeof f !== "function") throw new Error;
    return f;
}

});

parcelRegister("3JI5I", function(module, exports) {

$parcel$export(module.exports, "constantZero", () => $2b87c6a9c8d0c94b$export$99e2e371aa6a9db);
$parcel$export(module.exports, "default", () => $2b87c6a9c8d0c94b$export$2e2bcd8739ae039);
function $2b87c6a9c8d0c94b$export$99e2e371aa6a9db() {
    return 0;
}
function $2b87c6a9c8d0c94b$export$2e2bcd8739ae039(x) {
    return function() {
        return x;
    };
}

});

parcelRegister("evAkH", function(module, exports) {

$parcel$export(module.exports, "default", () => $a90024dfdf366606$export$2e2bcd8739ae039);
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
const $a90024dfdf366606$var$a = 1664525;
const $a90024dfdf366606$var$c = 1013904223;
const $a90024dfdf366606$var$m = 4294967296; // 2^32
function $a90024dfdf366606$export$2e2bcd8739ae039() {
    let s = 1;
    return ()=>(s = ($a90024dfdf366606$var$a * s + $a90024dfdf366606$var$c) % $a90024dfdf366606$var$m) / $a90024dfdf366606$var$m;
}

});

parcelRegister("hiyGJ", function(module, exports) {

$parcel$export(module.exports, "packSiblingsRandom", () => $033ffbf99974145c$export$5390336473d877c8);

var $8tks1 = parcelRequire("8tks1");

var $evAkH = parcelRequire("evAkH");

var $cLOkd = parcelRequire("cLOkd");
function $033ffbf99974145c$var$place(b, a, c) {
    var dx = b.x - a.x, x, a2, dy = b.y - a.y, y, b2, d2 = dx * dx + dy * dy;
    if (d2) {
        a2 = a.r + c.r, a2 *= a2;
        b2 = b.r + c.r, b2 *= b2;
        if (a2 > b2) {
            x = (d2 + b2 - a2) / (2 * d2);
            y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
            c.x = b.x - x * dx - y * dy;
            c.y = b.y - x * dy + y * dx;
        } else {
            x = (d2 + a2 - b2) / (2 * d2);
            y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
            c.x = a.x + x * dx - y * dy;
            c.y = a.y + x * dy + y * dx;
        }
    } else {
        c.x = a.x + c.r;
        c.y = a.y;
    }
}
function $033ffbf99974145c$var$intersects(a, b) {
    var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function $033ffbf99974145c$var$score(node) {
    var a = node._, b = node.next._, ab = a.r + b.r, dx = (a.x * b.r + b.x * a.r) / ab, dy = (a.y * b.r + b.y * a.r) / ab;
    return dx * dx + dy * dy;
}
function $033ffbf99974145c$var$Node(circle) {
    this._ = circle;
    this.next = null;
    this.previous = null;
}
function $033ffbf99974145c$export$5390336473d877c8(circles, random) {
    if (!(n = (circles = (0, $8tks1.default)(circles)).length)) return 0;
    var a, b, c, n, aa, ca, i, j, k, sj, sk;
    // Place the first circle.
    a = circles[0], a.x = 0, a.y = 0;
    if (!(n > 1)) return a.r;
    // Place the second circle.
    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
    if (!(n > 2)) return a.r + b.r;
    // Place the third circle.
    $033ffbf99974145c$var$place(b, a, c = circles[2]);
    // Initialize the front-chain using the first three circles a, b and c.
    a = new $033ffbf99974145c$var$Node(a), b = new $033ffbf99974145c$var$Node(b), c = new $033ffbf99974145c$var$Node(c);
    a.next = c.previous = b;
    b.next = a.previous = c;
    c.next = b.previous = a;
    // Attempt to place each remaining circle…
    pack: for(i = 3; i < n; ++i){
        $033ffbf99974145c$var$place(a._, b._, c = circles[i]), c = new $033ffbf99974145c$var$Node(c);
        // Find the closest intersecting circle on the front-chain, if any.
        // “Closeness” is determined by linear distance along the front-chain.
        // “Ahead” or “behind” is likewise determined by linear distance.
        j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
        do if (sj <= sk) {
            if ($033ffbf99974145c$var$intersects(j._, c._)) {
                b = j, a.next = b, b.previous = a, --i;
                continue pack;
            }
            sj += j._.r, j = j.next;
        } else {
            if ($033ffbf99974145c$var$intersects(k._, c._)) {
                a = k, a.next = b, b.previous = a, --i;
                continue pack;
            }
            sk += k._.r, k = k.previous;
        }
        while (j !== k.next);
        // Success! Insert the new circle c between a and b.
        c.previous = a, c.next = b, a.next = b.previous = b = c;
        // Compute the new closest circle pair to the centroid.
        aa = $033ffbf99974145c$var$score(a);
        while((c = c.next) !== b)if ((ca = $033ffbf99974145c$var$score(c)) < aa) a = c, aa = ca;
        b = a.next;
    }
    // Compute the enclosing circle of the front chain.
    a = [
        b._
    ], c = b;
    while((c = c.next) !== b)a.push(c._);
    c = (0, $cLOkd.packEncloseRandom)(a, random);
    // Translate the circles to put the enclosing circle around the origin.
    for(i = 0; i < n; ++i)a = circles[i], a.x -= c.x, a.y -= c.y;
    return c.r;
}
function $033ffbf99974145c$export$2e2bcd8739ae039(circles) {
    $033ffbf99974145c$export$5390336473d877c8(circles, (0, $evAkH.default)());
    return circles;
}

});
parcelRegister("8tks1", function(module, exports) {

$parcel$export(module.exports, "default", () => $62b0e54b554eeb80$export$2e2bcd8739ae039);
$parcel$export(module.exports, "shuffle", () => $62b0e54b554eeb80$export$448332262467e042);
function $62b0e54b554eeb80$export$2e2bcd8739ae039(x) {
    return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
     : Array.from(x); // Map, Set, iterable, string, or anything else
}
function $62b0e54b554eeb80$export$448332262467e042(array, random) {
    let m = array.length, t, i;
    while(m){
        i = random() * m-- | 0;
        t = array[m];
        array[m] = array[i];
        array[i] = t;
    }
    return array;
}

});

parcelRegister("cLOkd", function(module, exports) {

$parcel$export(module.exports, "packEncloseRandom", () => $94c0e956da0b5da4$export$55712536b4d8ce73);

var $8tks1 = parcelRequire("8tks1");

var $evAkH = parcelRequire("evAkH");
function $94c0e956da0b5da4$export$2e2bcd8739ae039(circles) {
    return $94c0e956da0b5da4$export$55712536b4d8ce73(circles, (0, $evAkH.default)());
}
function $94c0e956da0b5da4$export$55712536b4d8ce73(circles, random) {
    var i = 0, n = (circles = (0, $8tks1.shuffle)(Array.from(circles), random)).length, B = [], p, e;
    while(i < n){
        p = circles[i];
        if (e && $94c0e956da0b5da4$var$enclosesWeak(e, p)) ++i;
        else e = $94c0e956da0b5da4$var$encloseBasis(B = $94c0e956da0b5da4$var$extendBasis(B, p)), i = 0;
    }
    return e;
}
function $94c0e956da0b5da4$var$extendBasis(B, p) {
    var i, j;
    if ($94c0e956da0b5da4$var$enclosesWeakAll(p, B)) return [
        p
    ];
    // If we get here then B must have at least one element.
    for(i = 0; i < B.length; ++i){
        if ($94c0e956da0b5da4$var$enclosesNot(p, B[i]) && $94c0e956da0b5da4$var$enclosesWeakAll($94c0e956da0b5da4$var$encloseBasis2(B[i], p), B)) return [
            B[i],
            p
        ];
    }
    // If we get here then B must have at least two elements.
    for(i = 0; i < B.length - 1; ++i)for(j = i + 1; j < B.length; ++j){
        if ($94c0e956da0b5da4$var$enclosesNot($94c0e956da0b5da4$var$encloseBasis2(B[i], B[j]), p) && $94c0e956da0b5da4$var$enclosesNot($94c0e956da0b5da4$var$encloseBasis2(B[i], p), B[j]) && $94c0e956da0b5da4$var$enclosesNot($94c0e956da0b5da4$var$encloseBasis2(B[j], p), B[i]) && $94c0e956da0b5da4$var$enclosesWeakAll($94c0e956da0b5da4$var$encloseBasis3(B[i], B[j], p), B)) return [
            B[i],
            B[j],
            p
        ];
    }
    // If we get here then something is very wrong.
    throw new Error;
}
function $94c0e956da0b5da4$var$enclosesNot(a, b) {
    var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
    return dr < 0 || dr * dr < dx * dx + dy * dy;
}
function $94c0e956da0b5da4$var$enclosesWeak(a, b) {
    var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function $94c0e956da0b5da4$var$enclosesWeakAll(a, B) {
    for(var i = 0; i < B.length; ++i){
        if (!$94c0e956da0b5da4$var$enclosesWeak(a, B[i])) return false;
    }
    return true;
}
function $94c0e956da0b5da4$var$encloseBasis(B) {
    switch(B.length){
        case 1:
            return $94c0e956da0b5da4$var$encloseBasis1(B[0]);
        case 2:
            return $94c0e956da0b5da4$var$encloseBasis2(B[0], B[1]);
        case 3:
            return $94c0e956da0b5da4$var$encloseBasis3(B[0], B[1], B[2]);
    }
}
function $94c0e956da0b5da4$var$encloseBasis1(a) {
    return {
        x: a.x,
        y: a.y,
        r: a.r
    };
}
function $94c0e956da0b5da4$var$encloseBasis2(a, b) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
    };
}
function $94c0e956da0b5da4$var$encloseBasis3(a, b, c) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = x1 - x2, a3 = x1 - x3, b2 = y1 - y2, b3 = y1 - y3, c2 = r2 - r1, c3 = r3 - r1, d1 = x1 * x1 + y1 * y1 - r1 * r1, d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2, d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (r1 + xa * xb + ya * yb), C = xa * xa + ya * ya - r1 * r1, r = -(Math.abs(A) > 1e-6 ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
    return {
        x: x1 + xa + xb * r,
        y: y1 + ya + yb * r,
        r: r
    };
}

});



parcelRegister("94UND", function(module, exports) {

$parcel$export(module.exports, "default", () => $69c08bf6be976897$export$2e2bcd8739ae039);

var $aE4MT = parcelRequire("aE4MT");

var $cZg7R = parcelRequire("cZg7R");
function $69c08bf6be976897$export$2e2bcd8739ae039() {
    var dx = 1, dy = 1, padding = 0, round = false;
    function partition(root) {
        var n = root.height + 1;
        root.x0 = root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy / n;
        root.eachBefore(positionNode(dy, n));
        if (round) root.eachBefore((0, $aE4MT.default));
        return root;
    }
    function positionNode(dy, n) {
        return function(node) {
            if (node.children) (0, $cZg7R.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
            var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
            if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
            node.x0 = x0;
            node.y0 = y0;
            node.x1 = x1;
            node.y1 = y1;
        };
    }
    partition.round = function(x) {
        return arguments.length ? (round = !!x, partition) : round;
    };
    partition.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [
            dx,
            dy
        ];
    };
    partition.padding = function(x) {
        return arguments.length ? (padding = +x, partition) : padding;
    };
    return partition;
}

});
parcelRegister("aE4MT", function(module, exports) {

$parcel$export(module.exports, "default", () => $7c015a829b77ae0e$export$2e2bcd8739ae039);
function $7c015a829b77ae0e$export$2e2bcd8739ae039(node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
}

});

parcelRegister("cZg7R", function(module, exports) {

$parcel$export(module.exports, "default", () => $9747b0cc042f2645$export$2e2bcd8739ae039);
function $9747b0cc042f2645$export$2e2bcd8739ae039(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
    while(++i < n){
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
    }
}

});


parcelRegister("9VW8z", function(module, exports) {

$parcel$export(module.exports, "default", () => $73b688ca6c59de21$export$2e2bcd8739ae039);

var $dSh23 = parcelRequire("dSh23");

var $7GHo1 = parcelRequire("7GHo1");
var $73b688ca6c59de21$var$preroot = {
    depth: -1
}, $73b688ca6c59de21$var$ambiguous = {}, $73b688ca6c59de21$var$imputed = {};
function $73b688ca6c59de21$var$defaultId(d) {
    return d.id;
}
function $73b688ca6c59de21$var$defaultParentId(d) {
    return d.parentId;
}
function $73b688ca6c59de21$export$2e2bcd8739ae039() {
    var id = $73b688ca6c59de21$var$defaultId, parentId = $73b688ca6c59de21$var$defaultParentId, path;
    function stratify(data) {
        var nodes = Array.from(data), currentId = id, currentParentId = parentId, n, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = new Map;
        if (path != null) {
            const I = nodes.map((d, i)=>$73b688ca6c59de21$var$normalize(path(d, i, data)));
            const P = I.map($73b688ca6c59de21$var$parentof);
            const S = new Set(I).add("");
            for (const i of P)if (!S.has(i)) {
                S.add(i);
                I.push(i);
                P.push($73b688ca6c59de21$var$parentof(i));
                nodes.push($73b688ca6c59de21$var$imputed);
            }
            currentId = (_, i)=>I[i];
            currentParentId = (_, i)=>P[i];
        }
        for(i = 0, n = nodes.length; i < n; ++i){
            d = nodes[i], node = nodes[i] = new (0, $7GHo1.Node)(d);
            if ((nodeId = currentId(d, i, data)) != null && (nodeId += "")) {
                nodeKey = node.id = nodeId;
                nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? $73b688ca6c59de21$var$ambiguous : node);
            }
            if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += "")) node.parent = nodeId;
        }
        for(i = 0; i < n; ++i){
            node = nodes[i];
            if (nodeId = node.parent) {
                parent = nodeByKey.get(nodeId);
                if (!parent) throw new Error("missing: " + nodeId);
                if (parent === $73b688ca6c59de21$var$ambiguous) throw new Error("ambiguous: " + nodeId);
                if (parent.children) parent.children.push(node);
                else parent.children = [
                    node
                ];
                node.parent = parent;
            } else {
                if (root) throw new Error("multiple roots");
                root = node;
            }
        }
        if (!root) throw new Error("no root");
        // When imputing internal nodes, only introduce roots if needed.
        // Then replace the imputed marker data with null.
        if (path != null) {
            while(root.data === $73b688ca6c59de21$var$imputed && root.children.length === 1)root = root.children[0], --n;
            for(let i = nodes.length - 1; i >= 0; --i){
                node = nodes[i];
                if (node.data !== $73b688ca6c59de21$var$imputed) break;
                node.data = null;
            }
        }
        root.parent = $73b688ca6c59de21$var$preroot;
        root.eachBefore(function(node) {
            node.depth = node.parent.depth + 1;
            --n;
        }).eachBefore((0, $7GHo1.computeHeight));
        root.parent = null;
        if (n > 0) throw new Error("cycle");
        return root;
    }
    stratify.id = function(x) {
        return arguments.length ? (id = (0, $dSh23.optional)(x), stratify) : id;
    };
    stratify.parentId = function(x) {
        return arguments.length ? (parentId = (0, $dSh23.optional)(x), stratify) : parentId;
    };
    stratify.path = function(x) {
        return arguments.length ? (path = (0, $dSh23.optional)(x), stratify) : path;
    };
    return stratify;
}
// To normalize a path, we coerce to a string, strip the trailing slash if any
// (as long as the trailing slash is not immediately preceded by another slash),
// and add leading slash if missing.
function $73b688ca6c59de21$var$normalize(path) {
    path = `${path}`;
    let i = path.length;
    if ($73b688ca6c59de21$var$slash(path, i - 1) && !$73b688ca6c59de21$var$slash(path, i - 2)) path = path.slice(0, -1);
    return path[0] === "/" ? path : `/${path}`;
}
// Walk backwards to find the first slash that is not the leading slash, e.g.:
// "/foo/bar" ⇥ "/foo", "/foo" ⇥ "/", "/" ↦ "". (The root is special-cased
// because the id of the root must be a truthy value.)
function $73b688ca6c59de21$var$parentof(path) {
    let i = path.length;
    if (i < 2) return "";
    while(--i > 1)if ($73b688ca6c59de21$var$slash(path, i)) break;
    return path.slice(0, i);
}
// Slashes can be escaped; to determine whether a slash is a path delimiter, we
// count the number of preceding backslashes escaping the forward slash: an odd
// number indicates an escaped forward slash.
function $73b688ca6c59de21$var$slash(path, i) {
    if (path[i] === "/") {
        let k = 0;
        while(i > 0 && path[--i] === "\\")++k;
        if ((k & 1) === 0) return true;
    }
    return false;
}

});

parcelRegister("gYE7m", function(module, exports) {

$parcel$export(module.exports, "default", () => $c5c15e7fb7a0b7f7$export$2e2bcd8739ae039);

var $7GHo1 = parcelRequire("7GHo1");
function $c5c15e7fb7a0b7f7$var$defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
}
// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function $c5c15e7fb7a0b7f7$var$nextLeft(v) {
    var children = v.children;
    return children ? children[0] : v.t;
}
// This function works analogously to nextLeft.
function $c5c15e7fb7a0b7f7$var$nextRight(v) {
    var children = v.children;
    return children ? children[children.length - 1] : v.t;
}
// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function $c5c15e7fb7a0b7f7$var$moveSubtree(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
}
// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function $c5c15e7fb7a0b7f7$var$executeShifts(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while(--i >= 0){
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
    }
}
// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function $c5c15e7fb7a0b7f7$var$nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
}
function $c5c15e7fb7a0b7f7$var$TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null; // default ancestor
    this.a = this; // ancestor
    this.z = 0; // prelim
    this.m = 0; // mod
    this.c = 0; // change
    this.s = 0; // shift
    this.t = null; // thread
    this.i = i; // number
}
$c5c15e7fb7a0b7f7$var$TreeNode.prototype = Object.create((0, $7GHo1.Node).prototype);
function $c5c15e7fb7a0b7f7$var$treeRoot(root) {
    var tree = new $c5c15e7fb7a0b7f7$var$TreeNode(root, 0), node, nodes = [
        tree
    ], child, children, i, n;
    while(node = nodes.pop())if (children = node._.children) {
        node.children = new Array(n = children.length);
        for(i = n - 1; i >= 0; --i){
            nodes.push(child = node.children[i] = new $c5c15e7fb7a0b7f7$var$TreeNode(children[i], i));
            child.parent = node;
        }
    }
    (tree.parent = new $c5c15e7fb7a0b7f7$var$TreeNode(null, 0)).children = [
        tree
    ];
    return tree;
}
function $c5c15e7fb7a0b7f7$export$2e2bcd8739ae039() {
    var separation = $c5c15e7fb7a0b7f7$var$defaultSeparation, dx = 1, dy = 1, nodeSize = null;
    function tree(root) {
        var t = $c5c15e7fb7a0b7f7$var$treeRoot(root);
        // Compute the layout using Buchheim et al.’s algorithm.
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);
        // If a fixed node size is specified, scale x and y.
        if (nodeSize) root.eachBefore(sizeNode);
        else {
            var left = root, right = root, bottom = root;
            root.eachBefore(function(node) {
                if (node.x < left.x) left = node;
                if (node.x > right.x) right = node;
                if (node.depth > bottom.depth) bottom = node;
            });
            var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
            root.eachBefore(function(node) {
                node.x = (node.x + tx) * kx;
                node.y = node.depth * ky;
            });
        }
        return root;
    }
    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
    // applied recursively to the children of v, as well as the function
    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
    // node v is placed to the midpoint of its outermost children.
    function firstWalk(v) {
        var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
        if (children) {
            $c5c15e7fb7a0b7f7$var$executeShifts(v);
            var midpoint = (children[0].z + children[children.length - 1].z) / 2;
            if (w) {
                v.z = w.z + separation(v._, w._);
                v.m = v.z - midpoint;
            } else v.z = midpoint;
        } else if (w) v.z = w.z + separation(v._, w._);
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    // Computes all real x-coordinates by summing up the modifiers recursively.
    function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
    }
    // The core of the algorithm. Here, a new subtree is combined with the
    // previous subtrees. Threads are used to traverse the inside and outside
    // contours of the left and right subtree up to the highest common level. The
    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
    // superscript o means outside and i means inside, the subscript - means left
    // subtree and + means right subtree. For summing up the modifiers along the
    // contour, we use respective variables si+, si-, so-, and so+. Whenever two
    // nodes of the inside contours conflict, we compute the left one of the
    // greatest uncommon ancestors using the function ANCESTOR and call MOVE
    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
    // Finally, we add a new thread (if necessary).
    function apportion(v, w, ancestor) {
        if (w) {
            var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
            while(vim = $c5c15e7fb7a0b7f7$var$nextRight(vim), vip = $c5c15e7fb7a0b7f7$var$nextLeft(vip), vim && vip){
                vom = $c5c15e7fb7a0b7f7$var$nextLeft(vom);
                vop = $c5c15e7fb7a0b7f7$var$nextRight(vop);
                vop.a = v;
                shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                if (shift > 0) {
                    $c5c15e7fb7a0b7f7$var$moveSubtree($c5c15e7fb7a0b7f7$var$nextAncestor(vim, v, ancestor), v, shift);
                    sip += shift;
                    sop += shift;
                }
                sim += vim.m;
                sip += vip.m;
                som += vom.m;
                sop += vop.m;
            }
            if (vim && !$c5c15e7fb7a0b7f7$var$nextRight(vop)) {
                vop.t = vim;
                vop.m += sim - sop;
            }
            if (vip && !$c5c15e7fb7a0b7f7$var$nextLeft(vom)) {
                vom.t = vip;
                vom.m += sip - som;
                ancestor = v;
            }
        }
        return ancestor;
    }
    function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
    }
    tree.separation = function(x) {
        return arguments.length ? (separation = x, tree) : separation;
    };
    tree.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    tree.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return tree;
}

});

parcelRegister("25yxI", function(module, exports) {

$parcel$export(module.exports, "default", () => $1856d7e46369bab4$export$2e2bcd8739ae039);

var $aE4MT = parcelRequire("aE4MT");

var $bjBZG = parcelRequire("bjBZG");

var $dSh23 = parcelRequire("dSh23");

var $3JI5I = parcelRequire("3JI5I");
function $1856d7e46369bab4$export$2e2bcd8739ae039() {
    var tile = (0, $bjBZG.default), round = false, dx = 1, dy = 1, paddingStack = [
        0
    ], paddingInner = (0, $3JI5I.constantZero), paddingTop = (0, $3JI5I.constantZero), paddingRight = (0, $3JI5I.constantZero), paddingBottom = (0, $3JI5I.constantZero), paddingLeft = (0, $3JI5I.constantZero);
    function treemap(root) {
        root.x0 = root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [
            0
        ];
        if (round) root.eachBefore((0, $aE4MT.default));
        return root;
    }
    function positionNode(node) {
        var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
            p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
            x0 += paddingLeft(node) - p;
            y0 += paddingTop(node) - p;
            x1 -= paddingRight(node) - p;
            y1 -= paddingBottom(node) - p;
            if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
            tile(node, x0, y0, x1, y1);
        }
    }
    treemap.round = function(x) {
        return arguments.length ? (round = !!x, treemap) : round;
    };
    treemap.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [
            dx,
            dy
        ];
    };
    treemap.tile = function(x) {
        return arguments.length ? (tile = (0, $dSh23.required)(x), treemap) : tile;
    };
    treemap.padding = function(x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
    };
    treemap.paddingInner = function(x) {
        return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, $3JI5I.default)(+x), treemap) : paddingInner;
    };
    treemap.paddingOuter = function(x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
    };
    treemap.paddingTop = function(x) {
        return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, $3JI5I.default)(+x), treemap) : paddingTop;
    };
    treemap.paddingRight = function(x) {
        return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, $3JI5I.default)(+x), treemap) : paddingRight;
    };
    treemap.paddingBottom = function(x) {
        return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, $3JI5I.default)(+x), treemap) : paddingBottom;
    };
    treemap.paddingLeft = function(x) {
        return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, $3JI5I.default)(+x), treemap) : paddingLeft;
    };
    return treemap;
}

});
parcelRegister("bjBZG", function(module, exports) {

$parcel$export(module.exports, "phi", () => $83cef0ddda3a1cf6$export$324943737027944a);
$parcel$export(module.exports, "squarifyRatio", () => $83cef0ddda3a1cf6$export$9ff1217655212093);
$parcel$export(module.exports, "default", () => $83cef0ddda3a1cf6$export$2e2bcd8739ae039);

var $cZg7R = parcelRequire("cZg7R");

var $9ww53 = parcelRequire("9ww53");
var $83cef0ddda3a1cf6$export$324943737027944a = (1 + Math.sqrt(5)) / 2;
function $83cef0ddda3a1cf6$export$9ff1217655212093(ratio, parent, x0, y0, x1, y1) {
    var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
    while(i0 < n){
        dx = x1 - x0, dy = y1 - y0;
        // Find the next non-empty node.
        do sumValue = nodes[i1++].value;
        while (!sumValue && i1 < n);
        minValue = maxValue = sumValue;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);
        // Keep adding nodes while the aspect ratio maintains or improves.
        for(; i1 < n; ++i1){
            sumValue += nodeValue = nodes[i1].value;
            if (nodeValue < minValue) minValue = nodeValue;
            if (nodeValue > maxValue) maxValue = nodeValue;
            beta = sumValue * sumValue * alpha;
            newRatio = Math.max(maxValue / beta, beta / minValue);
            if (newRatio > minRatio) {
                sumValue -= nodeValue;
                break;
            }
            minRatio = newRatio;
        }
        // Position and record the row orientation.
        rows.push(row = {
            value: sumValue,
            dice: dx < dy,
            children: nodes.slice(i0, i1)
        });
        if (row.dice) (0, $cZg7R.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else (0, $9ww53.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
    }
    return rows;
}
var $83cef0ddda3a1cf6$export$2e2bcd8739ae039 = function custom(ratio) {
    function squarify(parent, x0, y0, x1, y1) {
        $83cef0ddda3a1cf6$export$9ff1217655212093(ratio, parent, x0, y0, x1, y1);
    }
    squarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return squarify;
}($83cef0ddda3a1cf6$export$324943737027944a);

});
parcelRegister("9ww53", function(module, exports) {

$parcel$export(module.exports, "default", () => $6eeffcb92bae9177$export$2e2bcd8739ae039);
function $6eeffcb92bae9177$export$2e2bcd8739ae039(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
    while(++i < n){
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
    }
}

});



parcelRegister("8TpVT", function(module, exports) {

$parcel$export(module.exports, "default", () => $67979381021dd3fc$export$2e2bcd8739ae039);
function $67979381021dd3fc$export$2e2bcd8739ae039(parent, x0, y0, x1, y1) {
    var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
    for(sums[0] = sum = i = 0; i < n; ++i)sums[i + 1] = sum += nodes[i].value;
    partition(0, n, parent.value, x0, y0, x1, y1);
    function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
            var node = nodes[i];
            node.x0 = x0, node.y0 = y0;
            node.x1 = x1, node.y1 = y1;
            return;
        }
        var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
        while(k < hi){
            var mid = k + hi >>> 1;
            if (sums[mid] < valueTarget) k = mid + 1;
            else hi = mid;
        }
        if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
        var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
        if (x1 - x0 > y1 - y0) {
            var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
            partition(i, k, valueLeft, x0, y0, xk, y1);
            partition(k, j, valueRight, xk, y0, x1, y1);
        } else {
            var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
            partition(i, k, valueLeft, x0, y0, x1, yk);
            partition(k, j, valueRight, x0, yk, x1, y1);
        }
    }
}

});

parcelRegister("29rFd", function(module, exports) {

$parcel$export(module.exports, "default", () => $1911e181df23f2d1$export$2e2bcd8739ae039);

var $cZg7R = parcelRequire("cZg7R");

var $9ww53 = parcelRequire("9ww53");

var $bjBZG = parcelRequire("bjBZG");
var $1911e181df23f2d1$export$2e2bcd8739ae039 = function custom(ratio) {
    function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && rows.ratio === ratio) {
            var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
            while(++j < m){
                row = rows[j], nodes = row.children;
                for(i = row.value = 0, n = nodes.length; i < n; ++i)row.value += nodes[i].value;
                if (row.dice) (0, $cZg7R.default)(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);
                else (0, $9ww53.default)(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
                value -= row.value;
            }
        } else {
            parent._squarify = rows = (0, $bjBZG.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
            rows.ratio = ratio;
        }
    }
    resquarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return resquarify;
}((0, $bjBZG.phi));

});

parcelRegister("fNFzk", function(module, exports) {

$parcel$export(module.exports, "default", () => $b80bad5619cd64d3$export$2e2bcd8739ae039);

var $cZg7R = parcelRequire("cZg7R");

var $9ww53 = parcelRequire("9ww53");
function $b80bad5619cd64d3$export$2e2bcd8739ae039(parent, x0, y0, x1, y1) {
    (parent.depth & 1 ? (0, $9ww53.default) : (0, $cZg7R.default))(parent, x0, y0, x1, y1);
}

});


parcelRegister("4Ngm4", function(module, exports) {

$parcel$export(module.exports, "label", () => $37d86ccb8388af58$export$1237798dc640739a);

var $d6kNj = parcelRequire("d6kNj");

var $bWlF6 = parcelRequire("bWlF6");

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");
// bit mask for getting first 2 bytes of alpha value
const $37d86ccb8388af58$var$ALPHA_MASK = 0xff000000;
function $37d86ccb8388af58$var$baseBitmaps($, data) {
    const bitmap = $.bitmap();
    // when there is no base mark but data points are to be avoided
    (data || []).forEach((d)=>bitmap.set($(d.boundary[0]), $(d.boundary[3])));
    return [
        bitmap,
        undefined
    ];
}
function $37d86ccb8388af58$var$markBitmaps($, baseMark, avoidMarks, labelInside, isGroupArea) {
    // create canvas
    const width = $.width, height = $.height, border = labelInside || isGroupArea, context = (0, $bWlF6.canvas)(width, height).getContext("2d"), baseMarkContext = (0, $bWlF6.canvas)(width, height).getContext("2d"), strokeContext = border && (0, $bWlF6.canvas)(width, height).getContext("2d");
    // render all marks to be avoided into canvas
    avoidMarks.forEach((items)=>$37d86ccb8388af58$var$draw(context, items, false));
    $37d86ccb8388af58$var$draw(baseMarkContext, baseMark, false);
    if (border) $37d86ccb8388af58$var$draw(strokeContext, baseMark, true);
    // get canvas buffer, create bitmaps
    const buffer = $37d86ccb8388af58$var$getBuffer(context, width, height), baseMarkBuffer = $37d86ccb8388af58$var$getBuffer(baseMarkContext, width, height), strokeBuffer = border && $37d86ccb8388af58$var$getBuffer(strokeContext, width, height), layer1 = $.bitmap(), layer2 = border && $.bitmap();
    // populate bitmap layers
    let x, y, u, v, index, alpha, strokeAlpha, baseMarkAlpha;
    for(y = 0; y < height; ++y)for(x = 0; x < width; ++x){
        index = y * width + x;
        alpha = buffer[index] & $37d86ccb8388af58$var$ALPHA_MASK;
        baseMarkAlpha = baseMarkBuffer[index] & $37d86ccb8388af58$var$ALPHA_MASK;
        strokeAlpha = border && strokeBuffer[index] & $37d86ccb8388af58$var$ALPHA_MASK;
        if (alpha || strokeAlpha || baseMarkAlpha) {
            u = $(x);
            v = $(y);
            if (!isGroupArea && (alpha || baseMarkAlpha)) layer1.set(u, v); // update interior bitmap
            if (border && (alpha || strokeAlpha)) layer2.set(u, v); // update border bitmap
        }
    }
    return [
        layer1,
        layer2
    ];
}
function $37d86ccb8388af58$var$getBuffer(context, width, height) {
    return new Uint32Array(context.getImageData(0, 0, width, height).data.buffer);
}
function $37d86ccb8388af58$var$draw(context, items, interior) {
    if (!items.length) return;
    const type = items[0].mark.marktype;
    if (type === "group") items.forEach((group)=>{
        group.items.forEach((mark)=>$37d86ccb8388af58$var$draw(context, mark.items, interior));
    });
    else (0, $d6kNj.Marks)[type].draw(context, {
        items: interior ? items.map($37d86ccb8388af58$var$prepare) : items
    });
}
/**
 * Prepare item before drawing into canvas (setting stroke and opacity)
 * @param {object} source item to be prepared
 * @returns prepared item
 */ function $37d86ccb8388af58$var$prepare(source) {
    const item = (0, $4jOgW.rederive)(source, {});
    if (item.stroke && item.strokeOpacity !== 0 || item.fill && item.fillOpacity !== 0) return {
        ...item,
        strokeOpacity: 1,
        stroke: "#000",
        fillOpacity: 0
    };
    return item;
}
const $37d86ccb8388af58$var$DIV = 5, // bit shift from x, y index to bit vector array index
$37d86ccb8388af58$var$MOD = 31, // bit mask for index lookup within a bit vector
$37d86ccb8388af58$var$SIZE = 32, // individual bit vector size
$37d86ccb8388af58$var$RIGHT0 = new Uint32Array($37d86ccb8388af58$var$SIZE + 1), // left-anchored bit vectors, full -> 0
$37d86ccb8388af58$var$RIGHT1 = new Uint32Array($37d86ccb8388af58$var$SIZE + 1); // right-anchored bit vectors, 0 -> full
$37d86ccb8388af58$var$RIGHT1[0] = 0;
$37d86ccb8388af58$var$RIGHT0[0] = ~$37d86ccb8388af58$var$RIGHT1[0];
for(let i = 1; i <= $37d86ccb8388af58$var$SIZE; ++i){
    $37d86ccb8388af58$var$RIGHT1[i] = $37d86ccb8388af58$var$RIGHT1[i - 1] << 1 | 1;
    $37d86ccb8388af58$var$RIGHT0[i] = ~$37d86ccb8388af58$var$RIGHT1[i];
}
function $37d86ccb8388af58$var$Bitmap(w, h) {
    const array = new Uint32Array(~~((w * h + $37d86ccb8388af58$var$SIZE) / $37d86ccb8388af58$var$SIZE));
    function _set(index, mask) {
        array[index] |= mask;
    }
    function _clear(index, mask) {
        array[index] &= mask;
    }
    return {
        array: array,
        get: (x, y)=>{
            const index = y * w + x;
            return array[index >>> $37d86ccb8388af58$var$DIV] & 1 << (index & $37d86ccb8388af58$var$MOD);
        },
        set: (x, y)=>{
            const index = y * w + x;
            _set(index >>> $37d86ccb8388af58$var$DIV, 1 << (index & $37d86ccb8388af58$var$MOD));
        },
        clear: (x, y)=>{
            const index = y * w + x;
            _clear(index >>> $37d86ccb8388af58$var$DIV, ~(1 << (index & $37d86ccb8388af58$var$MOD)));
        },
        getRange: (x, y, x2, y2)=>{
            let r = y2, start, end, indexStart, indexEnd;
            for(; r >= y; --r){
                start = r * w + x;
                end = r * w + x2;
                indexStart = start >>> $37d86ccb8388af58$var$DIV;
                indexEnd = end >>> $37d86ccb8388af58$var$DIV;
                if (indexStart === indexEnd) {
                    if (array[indexStart] & $37d86ccb8388af58$var$RIGHT0[start & $37d86ccb8388af58$var$MOD] & $37d86ccb8388af58$var$RIGHT1[(end & $37d86ccb8388af58$var$MOD) + 1]) return true;
                } else {
                    if (array[indexStart] & $37d86ccb8388af58$var$RIGHT0[start & $37d86ccb8388af58$var$MOD]) return true;
                    if (array[indexEnd] & $37d86ccb8388af58$var$RIGHT1[(end & $37d86ccb8388af58$var$MOD) + 1]) return true;
                    for(let i = indexStart + 1; i < indexEnd; ++i){
                        if (array[i]) return true;
                    }
                }
            }
            return false;
        },
        setRange: (x, y, x2, y2)=>{
            let start, end, indexStart, indexEnd, i;
            for(; y <= y2; ++y){
                start = y * w + x;
                end = y * w + x2;
                indexStart = start >>> $37d86ccb8388af58$var$DIV;
                indexEnd = end >>> $37d86ccb8388af58$var$DIV;
                if (indexStart === indexEnd) _set(indexStart, $37d86ccb8388af58$var$RIGHT0[start & $37d86ccb8388af58$var$MOD] & $37d86ccb8388af58$var$RIGHT1[(end & $37d86ccb8388af58$var$MOD) + 1]);
                else {
                    _set(indexStart, $37d86ccb8388af58$var$RIGHT0[start & $37d86ccb8388af58$var$MOD]);
                    _set(indexEnd, $37d86ccb8388af58$var$RIGHT1[(end & $37d86ccb8388af58$var$MOD) + 1]);
                    for(i = indexStart + 1; i < indexEnd; ++i)_set(i, 0xffffffff);
                }
            }
        },
        clearRange: (x, y, x2, y2)=>{
            let start, end, indexStart, indexEnd, i;
            for(; y <= y2; ++y){
                start = y * w + x;
                end = y * w + x2;
                indexStart = start >>> $37d86ccb8388af58$var$DIV;
                indexEnd = end >>> $37d86ccb8388af58$var$DIV;
                if (indexStart === indexEnd) _clear(indexStart, $37d86ccb8388af58$var$RIGHT1[start & $37d86ccb8388af58$var$MOD] | $37d86ccb8388af58$var$RIGHT0[(end & $37d86ccb8388af58$var$MOD) + 1]);
                else {
                    _clear(indexStart, $37d86ccb8388af58$var$RIGHT1[start & $37d86ccb8388af58$var$MOD]);
                    _clear(indexEnd, $37d86ccb8388af58$var$RIGHT0[(end & $37d86ccb8388af58$var$MOD) + 1]);
                    for(i = indexStart + 1; i < indexEnd; ++i)_clear(i, 0);
                }
            }
        },
        outOfBounds: (x, y, x2, y2)=>x < 0 || y < 0 || y2 >= h || x2 >= w
    };
}
function $37d86ccb8388af58$var$scaler(width, height, padding) {
    const ratio = Math.max(1, Math.sqrt(width * height / 1e6)), w = ~~((width + 2 * padding + ratio) / ratio), h = ~~((height + 2 * padding + ratio) / ratio), scale = (_)=>~~((_ + padding) / ratio);
    scale.invert = (_)=>_ * ratio - padding;
    scale.bitmap = ()=>$37d86ccb8388af58$var$Bitmap(w, h);
    scale.ratio = ratio;
    scale.padding = padding;
    scale.width = width;
    scale.height = height;
    return scale;
}
function $37d86ccb8388af58$var$placeAreaLabelNaive($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height;
    // try to place a label within an input area mark
    return function(d) {
        const items = d.datum.datum.items[markIndex].items, // area points
        n = items.length, // number of points
        textHeight = d.datum.fontSize, // label width
        textWidth = (0, $d6kNj.textMetrics).width(d.datum, d.datum.text); // label height
        let maxAreaWidth = 0, x1, x2, y1, y2, x, y, areaWidth;
        // for each area sample point
        for(let i = 0; i < n; ++i){
            x1 = items[i].x;
            y1 = items[i].y;
            x2 = items[i].x2 === undefined ? x1 : items[i].x2;
            y2 = items[i].y2 === undefined ? y1 : items[i].y2;
            x = (x1 + x2) / 2;
            y = (y1 + y2) / 2;
            areaWidth = Math.abs(x2 - x1 + y2 - y1);
            if (areaWidth >= maxAreaWidth) {
                maxAreaWidth = areaWidth;
                d.x = x;
                d.y = y;
            }
        }
        x = textWidth / 2;
        y = textHeight / 2;
        x1 = d.x - x;
        x2 = d.x + x;
        y1 = d.y - y;
        y2 = d.y + y;
        d.align = "center";
        if (x1 < 0 && x2 <= width) d.align = "left";
        else if (0 <= x1 && width < x2) d.align = "right";
        d.baseline = "middle";
        if (y1 < 0 && y2 <= height) d.baseline = "top";
        else if (0 <= y1 && height < y2) d.baseline = "bottom";
        return true;
    };
}
function $37d86ccb8388af58$var$outOfBounds(x, y, textWidth, textHeight, width, height) {
    let r = textWidth / 2;
    return x - r < 0 || x + r > width || y - (r = textHeight / 2) < 0 || y + r > height;
}
function $37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, h, bm0, bm1) {
    const w = textWidth * h / (textHeight * 2), x1 = $(x - w), x2 = $(x + w), y1 = $(y - (h = h / 2)), y2 = $(y + h);
    return bm0.outOfBounds(x1, y1, x2, y2) || bm0.getRange(x1, y1, x2, y2) || bm1 && bm1.getRange(x1, y1, x2, y2);
}
function $37d86ccb8388af58$var$placeAreaLabelReducedSearch($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], // where labels have been placed
    bm1 = bitmaps[1]; // area outlines
    function tryLabel(_x, _y, maxSize, textWidth, textHeight) {
        const x = $.invert(_x), y = $.invert(_y);
        let lo = maxSize, hi = height, mid;
        if (!$37d86ccb8388af58$var$outOfBounds(x, y, textWidth, textHeight, width, height) && !$37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !$37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
            // if the label fits at the current sample point,
            // perform binary search to find the largest font size that fits
            while(hi - lo >= 1){
                mid = (lo + hi) / 2;
                if ($37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) hi = mid;
                else lo = mid;
            }
            // place label if current lower bound exceeds prior max font size
            if (lo > maxSize) return [
                x,
                y,
                lo,
                true
            ];
        }
    }
    // try to place a label within an input area mark
    return function(d) {
        const items = d.datum.datum.items[markIndex].items, // area points
        n = items.length, // number of points
        textHeight = d.datum.fontSize, // label width
        textWidth = (0, $d6kNj.textMetrics).width(d.datum, d.datum.text); // label height
        let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x1, x2, y1, y2, x, y, _x, _y, _x1, _xMid, _x2, _y1, _yMid, _y2, areaWidth, result, swapTmp;
        // for each area sample point
        for(let i = 0; i < n; ++i){
            x1 = items[i].x;
            y1 = items[i].y;
            x2 = items[i].x2 === undefined ? x1 : items[i].x2;
            y2 = items[i].y2 === undefined ? y1 : items[i].y2;
            if (x1 > x2) {
                swapTmp = x1;
                x1 = x2;
                x2 = swapTmp;
            }
            if (y1 > y2) {
                swapTmp = y1;
                y1 = y2;
                y2 = swapTmp;
            }
            _x1 = $(x1);
            _x2 = $(x2);
            _xMid = ~~((_x1 + _x2) / 2);
            _y1 = $(y1);
            _y2 = $(y2);
            _yMid = ~~((_y1 + _y2) / 2);
            // search along the line from mid point between the 2 border to lower border
            for(_x = _xMid; _x >= _x1; --_x)for(_y = _yMid; _y >= _y1; --_y){
                result = tryLabel(_x, _y, maxSize, textWidth, textHeight);
                if (result) [d.x, d.y, maxSize, labelPlaced] = result;
            }
            // search along the line from mid point between the 2 border to upper border
            for(_x = _xMid; _x <= _x2; ++_x)for(_y = _yMid; _y <= _y2; ++_y){
                result = tryLabel(_x, _y, maxSize, textWidth, textHeight);
                if (result) [d.x, d.y, maxSize, labelPlaced] = result;
            }
            // place label at slice center if not placed through other means
            // and if we're not avoiding overlap with other areas
            if (!labelPlaced && !avoidBaseMark) {
                // one span is zero, hence we can add
                areaWidth = Math.abs(x2 - x1 + y2 - y1);
                x = (x1 + x2) / 2;
                y = (y1 + y2) / 2;
                // place label if it fits and improves the max area width
                if (areaWidth >= maxAreaWidth && !$37d86ccb8388af58$var$outOfBounds(x, y, textWidth, textHeight, width, height) && !$37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
                    maxAreaWidth = areaWidth;
                    d.x = x;
                    d.y = y;
                    labelPlaced2 = true;
                }
            }
        }
        // record current label placement information, update label bitmap
        if (labelPlaced || labelPlaced2) {
            x = textWidth / 2;
            y = textHeight / 2;
            bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
            d.align = "center";
            d.baseline = "middle";
            return true;
        } else return false;
    };
}
// pixel direction offsets for flood fill search
const $37d86ccb8388af58$var$X_DIR = [
    -1,
    -1,
    1,
    1
];
const $37d86ccb8388af58$var$Y_DIR = [
    -1,
    1,
    -1,
    1
];
function $37d86ccb8388af58$var$placeAreaLabelFloodFill($, bitmaps, avoidBaseMark, markIndex) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], // where labels have been placed
    bm1 = bitmaps[1], // area outlines
    bm2 = $.bitmap(); // flood-fill visitations
    // try to place a label within an input area mark
    return function(d) {
        const items = d.datum.datum.items[markIndex].items, // area points
        n = items.length, // number of points
        textHeight = d.datum.fontSize, // label width
        textWidth = (0, $d6kNj.textMetrics).width(d.datum, d.datum.text), // label height
        stack = []; // flood fill stack
        let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x1, x2, y1, y2, x, y, _x, _y, lo, hi, mid, areaWidth;
        // for each area sample point
        for(let i = 0; i < n; ++i){
            x1 = items[i].x;
            y1 = items[i].y;
            x2 = items[i].x2 === undefined ? x1 : items[i].x2;
            y2 = items[i].y2 === undefined ? y1 : items[i].y2;
            // add scaled center point to stack
            stack.push([
                $((x1 + x2) / 2),
                $((y1 + y2) / 2)
            ]);
            // perform flood fill, visit points
            while(stack.length){
                [_x, _y] = stack.pop();
                // exit if point already marked
                if (bm0.get(_x, _y) || bm1.get(_x, _y) || bm2.get(_x, _y)) continue;
                // mark point in flood fill bitmap
                // add search points for all (in bound) directions
                bm2.set(_x, _y);
                for(let j = 0; j < 4; ++j){
                    x = _x + $37d86ccb8388af58$var$X_DIR[j];
                    y = _y + $37d86ccb8388af58$var$Y_DIR[j];
                    if (!bm2.outOfBounds(x, y, x, y)) stack.push([
                        x,
                        y
                    ]);
                }
                // unscale point back to x, y space
                x = $.invert(_x);
                y = $.invert(_y);
                lo = maxSize;
                hi = height; // TODO: make this bound smaller
                if (!$37d86ccb8388af58$var$outOfBounds(x, y, textWidth, textHeight, width, height) && !$37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !$37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
                    // if the label fits at the current sample point,
                    // perform binary search to find the largest font size that fits
                    while(hi - lo >= 1){
                        mid = (lo + hi) / 2;
                        if ($37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) hi = mid;
                        else lo = mid;
                    }
                    // place label if current lower bound exceeds prior max font size
                    if (lo > maxSize) {
                        d.x = x;
                        d.y = y;
                        maxSize = lo;
                        labelPlaced = true;
                    }
                }
            }
            // place label at slice center if not placed through other means
            // and if we're not avoiding overlap with other areas
            if (!labelPlaced && !avoidBaseMark) {
                // one span is zero, hence we can add
                areaWidth = Math.abs(x2 - x1 + y2 - y1);
                x = (x1 + x2) / 2;
                y = (y1 + y2) / 2;
                // place label if it fits and improves the max area width
                if (areaWidth >= maxAreaWidth && !$37d86ccb8388af58$var$outOfBounds(x, y, textWidth, textHeight, width, height) && !$37d86ccb8388af58$var$collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
                    maxAreaWidth = areaWidth;
                    d.x = x;
                    d.y = y;
                    labelPlaced2 = true;
                }
            }
        }
        // record current label placement information, update label bitmap
        if (labelPlaced || labelPlaced2) {
            x = textWidth / 2;
            y = textHeight / 2;
            bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
            d.align = "center";
            d.baseline = "middle";
            return true;
        } else return false;
    };
}
const $37d86ccb8388af58$var$Aligns = [
    "right",
    "center",
    "left"
], $37d86ccb8388af58$var$Baselines = [
    "bottom",
    "middle",
    "top"
];
function $37d86ccb8388af58$var$placeMarkLabel($, bitmaps, anchors, offsets) {
    const width = $.width, height = $.height, bm0 = bitmaps[0], bm1 = bitmaps[1], n = offsets.length;
    return function(d) {
        const boundary = d.boundary, textHeight = d.datum.fontSize;
        // can not be placed if the mark is not visible in the graph bound
        if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width || boundary[3] > height) return false;
        let textWidth = d.textWidth ?? 0, dx, dy, isInside, sizeFactor, insideFactor, x1, x2, y1, y2, xc, yc, _x1, _x2, _y1, _y2;
        // for each anchor and offset
        for(let i = 0; i < n; ++i){
            dx = (anchors[i] & 0x3) - 1;
            dy = (anchors[i] >>> 0x2 & 0x3) - 1;
            isInside = dx === 0 && dy === 0 || offsets[i] < 0;
            sizeFactor = dx && dy ? Math.SQRT1_2 : 1;
            insideFactor = offsets[i] < 0 ? -1 : 1;
            x1 = boundary[1 + dx] + offsets[i] * dx * sizeFactor;
            yc = boundary[4 + dy] + insideFactor * textHeight * dy / 2 + offsets[i] * dy * sizeFactor;
            y1 = yc - textHeight / 2;
            y2 = yc + textHeight / 2;
            _x1 = $(x1);
            _y1 = $(y1);
            _y2 = $(y2);
            if (!textWidth) {
                // to avoid finding width of text label,
                if (!$37d86ccb8388af58$var$test(_x1, _x1, _y1, _y2, bm0, bm1, x1, x1, y1, y2, boundary, isInside)) continue;
                else // Otherwise, find the label width
                textWidth = (0, $d6kNj.textMetrics).width(d.datum, d.datum.text);
            }
            xc = x1 + insideFactor * textWidth * dx / 2;
            x1 = xc - textWidth / 2;
            x2 = xc + textWidth / 2;
            _x1 = $(x1);
            _x2 = $(x2);
            if ($37d86ccb8388af58$var$test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside)) {
                // place label if the position is placeable
                d.x = !dx ? xc : dx * insideFactor < 0 ? x2 : x1;
                d.y = !dy ? yc : dy * insideFactor < 0 ? y2 : y1;
                d.align = $37d86ccb8388af58$var$Aligns[dx * insideFactor + 1];
                d.baseline = $37d86ccb8388af58$var$Baselines[dy * insideFactor + 1];
                bm0.setRange(_x1, _y1, _x2, _y2);
                return true;
            }
        }
        return false;
    };
}
// Test if a label with the given dimensions can be added without overlap
function $37d86ccb8388af58$var$test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside) {
    return !(bm0.outOfBounds(_x1, _y1, _x2, _y2) || (isInside && bm1 || bm0).getRange(_x1, _y1, _x2, _y2));
}
// 8-bit representation of anchors
const $37d86ccb8388af58$var$TOP = 0x0, $37d86ccb8388af58$var$MIDDLE = 0x4, $37d86ccb8388af58$var$BOTTOM = 0x8, $37d86ccb8388af58$var$LEFT = 0x0, $37d86ccb8388af58$var$CENTER = 0x1, $37d86ccb8388af58$var$RIGHT = 0x2;
// Mapping from text anchor to number representation
const $37d86ccb8388af58$var$anchorCode = {
    "top-left": $37d86ccb8388af58$var$TOP + $37d86ccb8388af58$var$LEFT,
    "top": $37d86ccb8388af58$var$TOP + $37d86ccb8388af58$var$CENTER,
    "top-right": $37d86ccb8388af58$var$TOP + $37d86ccb8388af58$var$RIGHT,
    "left": $37d86ccb8388af58$var$MIDDLE + $37d86ccb8388af58$var$LEFT,
    "middle": $37d86ccb8388af58$var$MIDDLE + $37d86ccb8388af58$var$CENTER,
    "right": $37d86ccb8388af58$var$MIDDLE + $37d86ccb8388af58$var$RIGHT,
    "bottom-left": $37d86ccb8388af58$var$BOTTOM + $37d86ccb8388af58$var$LEFT,
    "bottom": $37d86ccb8388af58$var$BOTTOM + $37d86ccb8388af58$var$CENTER,
    "bottom-right": $37d86ccb8388af58$var$BOTTOM + $37d86ccb8388af58$var$RIGHT
};
const $37d86ccb8388af58$var$placeAreaLabel = {
    "naive": $37d86ccb8388af58$var$placeAreaLabelNaive,
    "reduced-search": $37d86ccb8388af58$var$placeAreaLabelReducedSearch,
    "floodfill": $37d86ccb8388af58$var$placeAreaLabelFloodFill
};
function $37d86ccb8388af58$var$labelLayout(texts, size, compare, offset, anchor, avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding, method) {
    // early exit for empty data
    if (!texts.length) return texts;
    const positions = Math.max(offset.length, anchor.length), offsets = $37d86ccb8388af58$var$getOffsets(offset, positions), anchors = $37d86ccb8388af58$var$getAnchors(anchor, positions), marktype = $37d86ccb8388af58$var$markType(texts[0].datum), grouptype = marktype === "group" && texts[0].datum.items[markIndex].marktype, isGroupArea = grouptype === "area", boundary = $37d86ccb8388af58$var$markBoundary(marktype, grouptype, lineAnchor, markIndex), infPadding = padding === null || padding === Infinity, isNaiveGroupArea = isGroupArea && method === "naive";
    let maxTextWidth = -1, maxTextHeight = -1;
    // prepare text mark data for placing
    const data = texts.map((d)=>{
        const textWidth = infPadding ? (0, $d6kNj.textMetrics).width(d, d.text) : undefined;
        maxTextWidth = Math.max(maxTextWidth, textWidth);
        maxTextHeight = Math.max(maxTextHeight, d.fontSize);
        return {
            datum: d,
            opacity: 0,
            x: undefined,
            y: undefined,
            align: undefined,
            baseline: undefined,
            boundary: boundary(d),
            textWidth: textWidth
        };
    });
    padding = padding === null || padding === Infinity ? Math.max(maxTextWidth, maxTextHeight) + Math.max(...offset) : padding;
    const $ = $37d86ccb8388af58$var$scaler(size[0], size[1], padding);
    let bitmaps;
    if (!isNaiveGroupArea) {
        // sort labels in priority order, if comparator is provided
        if (compare) data.sort((a, b)=>compare(a.datum, b.datum));
        // flag indicating if label can be placed inside its base mark
        let labelInside = false;
        for(let i = 0; i < anchors.length && !labelInside; ++i)// label inside if anchor is at center
        // label inside if offset to be inside the mark bound
        labelInside = anchors[i] === 0x5 || offsets[i] < 0;
        // extract data information from base mark when base mark is to be avoided
        // base mark is implicitly avoided if it is a group area
        const baseMark = (marktype && avoidBaseMark || isGroupArea) && texts.map((d)=>d.datum);
        // generate bitmaps for layout calculation
        bitmaps = avoidMarks.length || baseMark ? $37d86ccb8388af58$var$markBitmaps($, baseMark || [], avoidMarks, labelInside, isGroupArea) : $37d86ccb8388af58$var$baseBitmaps($, avoidBaseMark && data);
    }
    // generate label placement function
    const place = isGroupArea ? $37d86ccb8388af58$var$placeAreaLabel[method]($, bitmaps, avoidBaseMark, markIndex) : $37d86ccb8388af58$var$placeMarkLabel($, bitmaps, anchors, offsets);
    // place all labels
    data.forEach((d)=>d.opacity = +place(d));
    return data;
}
function $37d86ccb8388af58$var$getOffsets(_, count) {
    const offsets = new Float64Array(count), n = _.length;
    for(let i = 0; i < n; ++i)offsets[i] = _[i] || 0;
    for(let i = n; i < count; ++i)offsets[i] = offsets[n - 1];
    return offsets;
}
function $37d86ccb8388af58$var$getAnchors(_, count) {
    const anchors = new Int8Array(count), n = _.length;
    for(let i = 0; i < n; ++i)anchors[i] |= $37d86ccb8388af58$var$anchorCode[_[i]];
    for(let i = n; i < count; ++i)anchors[i] = anchors[n - 1];
    return anchors;
}
function $37d86ccb8388af58$var$markType(item) {
    return item && item.mark && item.mark.marktype;
}
/**
 * Factory function for function for getting base mark boundary, depending
 * on mark and group type. When mark type is undefined, line or area: boundary
 * is the coordinate of each data point. When base mark is grouped line,
 * boundary is either at the start or end of the line depending on the
 * value of lineAnchor. Otherwise, use bounds of base mark.
 */ function $37d86ccb8388af58$var$markBoundary(marktype, grouptype, lineAnchor, markIndex) {
    const xy = (d)=>[
            d.x,
            d.x,
            d.x,
            d.y,
            d.y,
            d.y
        ];
    if (!marktype) return xy; // no reactive geometry
    else if (marktype === "line" || marktype === "area") return (d)=>xy(d.datum);
    else if (grouptype === "line") return (d)=>{
        const items = d.datum.items[markIndex].items;
        return xy(items.length ? items[lineAnchor === "start" ? 0 : items.length - 1] : {
            x: NaN,
            y: NaN
        });
    };
    else return (d)=>{
        const b = d.datum.bounds;
        return [
            b.x1,
            (b.x1 + b.x2) / 2,
            b.x2,
            b.y1,
            (b.y1 + b.y2) / 2,
            b.y2
        ];
    };
}
const $37d86ccb8388af58$var$Output = [
    "x",
    "y",
    "opacity",
    "align",
    "baseline"
];
const $37d86ccb8388af58$var$Anchors = [
    "top-left",
    "left",
    "bottom-left",
    "top",
    "bottom",
    "top-right",
    "right",
    "bottom-right"
];
/**
 * Compute text label layout to annotate marks.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The size of the layout, provided as a [width, height] array.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for sorting label data in priority order.
 * @param {Array<string>} [params.anchor] - Label anchor points relative to the base mark bounding box.
 *   The available options are 'top-left', 'left', 'bottom-left', 'top',
 *   'bottom', 'top-right', 'right', 'bottom-right', 'middle'.
 * @param {Array<number>} [params.offset] - Label offsets (in pixels) from the base mark bounding box.
 *   This parameter is parallel to the list of anchor points.
 * @param {number | null} [params.padding=0] - The amount (in pixels) that a label may exceed the layout size.
 *   If this parameter is null, a label may exceed the layout size without any boundary.
 * @param {string} [params.lineAnchor='end'] - For group line mark labels only, indicates the anchor
 *   position for labels. One of 'start' or 'end'.
 * @param {string} [params.markIndex=0] - For group mark labels only, an index indicating
 *   which mark within the group should be labeled.
 * @param {Array<number>} [params.avoidMarks] - A list of additional mark names for which the label
 *   layout should avoid overlap.
 * @param {boolean} [params.avoidBaseMark=true] - Boolean flag indicating if labels should avoid
 *   overlap with the underlying base mark being labeled.
 * @param {string} [params.method='naive'] - For area make labels only, a method for
 *   place labels. One of 'naive', 'reduced-search', or 'floodfill'.
 * @param {Array<string>} [params.as] - The output fields written by the transform.
 *   The default is ['x', 'y', 'opacity', 'align', 'baseline'].
 */ function $37d86ccb8388af58$export$1237798dc640739a(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$37d86ccb8388af58$export$1237798dc640739a.Definition = {
    type: "Label",
    metadata: {
        modifies: true
    },
    params: [
        {
            name: "size",
            type: "number",
            array: true,
            length: 2,
            required: true
        },
        {
            name: "sort",
            type: "compare"
        },
        {
            name: "anchor",
            type: "string",
            array: true,
            default: $37d86ccb8388af58$var$Anchors
        },
        {
            name: "offset",
            type: "number",
            array: true,
            default: [
                1
            ]
        },
        {
            name: "padding",
            type: "number",
            default: 0,
            null: true
        },
        {
            name: "lineAnchor",
            type: "string",
            values: [
                "start",
                "end"
            ],
            default: "end"
        },
        {
            name: "markIndex",
            type: "number",
            default: 0
        },
        {
            name: "avoidBaseMark",
            type: "boolean",
            default: true
        },
        {
            name: "avoidMarks",
            type: "data",
            array: true
        },
        {
            name: "method",
            type: "string",
            default: "naive"
        },
        {
            name: "as",
            type: "string",
            array: true,
            length: $37d86ccb8388af58$var$Output.length,
            default: $37d86ccb8388af58$var$Output
        }
    ]
};
(0, $4SWbq.inherits)($37d86ccb8388af58$export$1237798dc640739a, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        function modp(param) {
            const p = _[param];
            return (0, $4SWbq.isFunction)(p) && pulse.modified(p.fields);
        }
        const mod = _.modified();
        if (!(mod || pulse.changed(pulse.ADD_REM) || modp("sort"))) return;
        if (!_.size || _.size.length !== 2) (0, $4SWbq.error)("Size parameter should be specified as a [width, height] array.");
        const as = _.as || $37d86ccb8388af58$var$Output;
        // run label layout
        $37d86ccb8388af58$var$labelLayout(pulse.materialize(pulse.SOURCE).source || [], _.size, _.sort, (0, $4SWbq.array)(_.offset == null ? 1 : _.offset), (0, $4SWbq.array)(_.anchor || $37d86ccb8388af58$var$Anchors), _.avoidMarks || [], _.avoidBaseMark !== false, _.lineAnchor || "end", _.markIndex || 0, _.padding === undefined ? 0 : _.padding, _.method || "naive").forEach((l)=>{
            // write layout results to data stream
            const t = l.datum;
            t[as[0]] = l.x;
            t[as[1]] = l.y;
            t[as[2]] = l.opacity;
            t[as[3]] = l.align;
            t[as[4]] = l.baseline;
        });
        return pulse.reflow(mod).modifies(as);
    }
});

});

parcelRegister("87Rtn", function(module, exports) {

$parcel$export(module.exports, "loess", () => $5ea874c39f9247cd$export$ef7d442406b81b1b);
$parcel$export(module.exports, "regression", () => $5ea874c39f9247cd$export$493c25ae1a6c35dc);

var $7Par0 = parcelRequire("7Par0");

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");
function $5ea874c39f9247cd$var$partition(data, groupby) {
    var groups = [], get = function(f) {
        return f(t);
    }, map, i, n, t, k, g;
    // partition data points into stack groups
    if (groupby == null) groups.push(data);
    else for(map = {}, i = 0, n = data.length; i < n; ++i){
        t = data[i];
        k = groupby.map(get);
        g = map[k];
        if (!g) {
            map[k] = g = [];
            g.dims = k;
            groups.push(g);
        }
        g.push(t);
    }
    return groups;
}
/**
 * Compute locally-weighted regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {number} [params.bandwidth=0.3] - The loess bandwidth.
 */ function $5ea874c39f9247cd$export$ef7d442406b81b1b(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$5ea874c39f9247cd$export$ef7d442406b81b1b.Definition = {
    "type": "Loess",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "bandwidth",
            "type": "number",
            "default": 0.3
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        }
    ]
};
(0, $4SWbq.inherits)($5ea874c39f9247cd$export$ef7d442406b81b1b, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const source = pulse.materialize(pulse.SOURCE).source, groups = $5ea874c39f9247cd$var$partition(source, _.groupby), names = (_.groupby || []).map((0, $4SWbq.accessorName)), m = names.length, as = _.as || [
                (0, $4SWbq.accessorName)(_.x),
                (0, $4SWbq.accessorName)(_.y)
            ], values = [];
            groups.forEach((g)=>{
                (0, $7Par0.regressionLoess)(g, _.x, _.y, _.bandwidth || 0.3).forEach((p)=>{
                    const t = {};
                    for(let i = 0; i < m; ++i)t[names[i]] = g.dims[i];
                    t[as[0]] = p[0];
                    t[as[1]] = p[1];
                    values.push((0, $4jOgW.ingest)(t));
                });
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});
const $5ea874c39f9247cd$var$Methods = {
    constant: (0, $7Par0.regressionConstant),
    linear: (0, $7Par0.regressionLinear),
    log: (0, $7Par0.regressionLog),
    exp: (0, $7Par0.regressionExp),
    pow: (0, $7Par0.regressionPow),
    quad: (0, $7Par0.regressionQuad),
    poly: (0, $7Par0.regressionPoly)
};
const $5ea874c39f9247cd$var$degreesOfFreedom = (method, order)=>method === "poly" ? order : method === "quad" ? 2 : 1;
/**
 * Compute regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {string} [params.method='linear'] - The regression method to apply.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.
 * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.
 */ function $5ea874c39f9247cd$export$493c25ae1a6c35dc(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$5ea874c39f9247cd$export$493c25ae1a6c35dc.Definition = {
    "type": "Regression",
    "metadata": {
        "generates": true
    },
    "params": [
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "groupby",
            "type": "field",
            "array": true
        },
        {
            "name": "method",
            "type": "string",
            "default": "linear",
            "values": Object.keys($5ea874c39f9247cd$var$Methods)
        },
        {
            "name": "order",
            "type": "number",
            "default": 3
        },
        {
            "name": "extent",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "params",
            "type": "boolean",
            "default": false
        },
        {
            "name": "as",
            "type": "string",
            "array": true
        }
    ]
};
(0, $4SWbq.inherits)($5ea874c39f9247cd$export$493c25ae1a6c35dc, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
        if (!this.value || pulse.changed() || _.modified()) {
            const source = pulse.materialize(pulse.SOURCE).source, groups = $5ea874c39f9247cd$var$partition(source, _.groupby), names = (_.groupby || []).map((0, $4SWbq.accessorName)), method = _.method || "linear", order = _.order == null ? 3 : _.order, dof = $5ea874c39f9247cd$var$degreesOfFreedom(method, order), as = _.as || [
                (0, $4SWbq.accessorName)(_.x),
                (0, $4SWbq.accessorName)(_.y)
            ], fit = $5ea874c39f9247cd$var$Methods[method], values = [];
            let domain = _.extent;
            if (!(0, $4SWbq.hasOwnProperty)($5ea874c39f9247cd$var$Methods, method)) (0, $4SWbq.error)("Invalid regression method: " + method);
            if (domain != null) {
                if (method === "log" && domain[0] <= 0) {
                    pulse.dataflow.warn("Ignoring extent with values <= 0 for log regression.");
                    domain = null;
                }
            }
            groups.forEach((g)=>{
                const n = g.length;
                if (n <= dof) {
                    pulse.dataflow.warn("Skipping regression with more parameters than data points.");
                    return;
                }
                const model = fit(g, _.x, _.y, order);
                if (_.params) {
                    // if parameter vectors requested return those
                    values.push((0, $4jOgW.ingest)({
                        keys: g.dims,
                        coef: model.coef,
                        rSquared: model.rSquared
                    }));
                    return;
                }
                const dom = domain || (0, $4SWbq.extent)(g, _.x), add = (p)=>{
                    const t = {};
                    for(let i = 0; i < names.length; ++i)t[names[i]] = g.dims[i];
                    t[as[0]] = p[0];
                    t[as[1]] = p[1];
                    values.push((0, $4jOgW.ingest)(t));
                };
                if (method === "linear" || method === "constant") // for linear or constant regression we only need the end points
                dom.forEach((x)=>add([
                        x,
                        model.predict(x)
                    ]));
                else // otherwise return trend line sample points
                (0, $7Par0.sampleCurve)(model.predict, dom, 25, 200).forEach(add);
            });
            if (this.value) out.rem = this.value;
            this.value = out.add = out.source = values;
        }
        return out;
    }
});

});

parcelRegister("9oRV0", function(module, exports) {

$parcel$export(module.exports, "voronoi", () => $6d802e09c5cb892c$export$c1e36ab262efb123);

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");

var $leDsD = parcelRequire("leDsD");
function $6d802e09c5cb892c$export$c1e36ab262efb123(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$6d802e09c5cb892c$export$c1e36ab262efb123.Definition = {
    "type": "Voronoi",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "x",
            "type": "field",
            "required": true
        },
        {
            "name": "y",
            "type": "field",
            "required": true
        },
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "extent",
            "type": "array",
            "array": true,
            "length": 2,
            "default": [
                [
                    -100000,
                    -100000
                ],
                [
                    1e5,
                    1e5
                ]
            ],
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        },
        {
            "name": "as",
            "type": "string",
            "default": "path"
        }
    ]
};
const $6d802e09c5cb892c$var$defaultExtent = [
    -100000,
    -100000,
    1e5,
    1e5
];
(0, $4SWbq.inherits)($6d802e09c5cb892c$export$c1e36ab262efb123, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const as = _.as || "path", data = pulse.source;
        // nothing to do if no data
        if (!data || !data.length) return pulse;
        // configure and construct voronoi diagram
        let s = _.size;
        s = s ? [
            0,
            0,
            s[0],
            s[1]
        ] : (s = _.extent) ? [
            s[0][0],
            s[0][1],
            s[1][0],
            s[1][1]
        ] : $6d802e09c5cb892c$var$defaultExtent;
        const voronoi = this.value = (0, $leDsD.default).from(data, _.x, _.y).voronoi(s);
        // map polygons to paths
        for(let i = 0, n = data.length; i < n; ++i){
            const polygon = voronoi.cellPolygon(i);
            data[i][as] = polygon ? $6d802e09c5cb892c$var$toPathString(polygon) : null;
        }
        return pulse.reflow(_.modified()).modifies(as);
    }
});
// suppress duplicated end point vertices
function $6d802e09c5cb892c$var$toPathString(p) {
    const x = p[0][0], y = p[0][1];
    let n = p.length - 1;
    for(; p[n][0] === x && p[n][1] === y; --n);
    return "M" + p.slice(0, n + 1).join("L") + "Z";
}

});
parcelRegister("leDsD", function(module, exports) {

$parcel$export(module.exports, "default", () => $f75983e5f4a6fcf3$export$2e2bcd8739ae039);

var $4Ed4G = parcelRequire("4Ed4G");

var $ch5ES = parcelRequire("ch5ES");

var $hgr11 = parcelRequire("hgr11");

var $65iDn = parcelRequire("65iDn");
const $f75983e5f4a6fcf3$var$tau = 2 * Math.PI, $f75983e5f4a6fcf3$var$pow = Math.pow;
function $f75983e5f4a6fcf3$var$pointX(p) {
    return p[0];
}
function $f75983e5f4a6fcf3$var$pointY(p) {
    return p[1];
}
// A triangulation is collinear if all its triangles have a non-null area
function $f75983e5f4a6fcf3$var$collinear(d) {
    const { triangles: triangles, coords: coords } = d;
    for(let i = 0; i < triangles.length; i += 3){
        const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 1e-10) return false;
    }
    return true;
}
function $f75983e5f4a6fcf3$var$jitter(x, y, r) {
    return [
        x + Math.sin(x + y) * r,
        y + Math.cos(x - y) * r
    ];
}
class $f75983e5f4a6fcf3$export$2e2bcd8739ae039 {
    static from(points, fx = $f75983e5f4a6fcf3$var$pointX, fy = $f75983e5f4a6fcf3$var$pointY, that) {
        return new $f75983e5f4a6fcf3$export$2e2bcd8739ae039("length" in points ? $f75983e5f4a6fcf3$var$flatArray(points, fx, fy, that) : Float64Array.from($f75983e5f4a6fcf3$var$flatIterable(points, fx, fy, that)));
    }
    constructor(points){
        this._delaunator = new (0, $4Ed4G.default)(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
    }
    update() {
        this._delaunator.update();
        this._init();
        return this;
    }
    _init() {
        const d = this._delaunator, points = this.points;
        // check for collinear
        if (d.hull && d.hull.length > 2 && $f75983e5f4a6fcf3$var$collinear(d)) {
            this.collinear = Int32Array.from({
                length: points.length / 2
            }, (_, i)=>i).sort((i, j)=>points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
            const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [
                points[2 * e],
                points[2 * e + 1],
                points[2 * f],
                points[2 * f + 1]
            ], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
            for(let i = 0, n = points.length / 2; i < n; ++i){
                const p = $f75983e5f4a6fcf3$var$jitter(points[2 * i], points[2 * i + 1], r);
                points[2 * i] = p[0];
                points[2 * i + 1] = p[1];
            }
            this._delaunator = new (0, $4Ed4G.default)(points);
        } else delete this.collinear;
        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);
        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for(let e = 0, n = halfedges.length; e < n; ++e){
            const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
            if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
        }
        for(let i = 0, n = hull.length; i < n; ++i)hullIndex[hull[i]] = i;
        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
            this.triangles = new Int32Array(3).fill(-1);
            this.halfedges = new Int32Array(3).fill(-1);
            this.triangles[0] = hull[0];
            inedges[hull[0]] = 1;
            if (hull.length === 2) {
                inedges[hull[1]] = 0;
                this.triangles[1] = hull[1];
                this.triangles[2] = hull[1];
            }
        }
    }
    voronoi(bounds) {
        return new (0, $65iDn.default)(this, bounds);
    }
    *neighbors(i) {
        const { inedges: inedges, hull: hull, _hullIndex: _hullIndex, halfedges: halfedges, triangles: triangles, collinear: collinear } = this;
        // degenerate case with several collinear points
        if (collinear) {
            const l = collinear.indexOf(i);
            if (l > 0) yield collinear[l - 1];
            if (l < collinear.length - 1) yield collinear[l + 1];
            return;
        }
        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
            yield p0 = triangles[e];
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) return; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                const p = hull[(_hullIndex[i] + 1) % hull.length];
                if (p !== p0) yield p;
                return;
            }
        }while (e !== e0);
    }
    find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)i = c;
        return c;
    }
    _step(i, x, y) {
        const { inedges: inedges, hull: hull, _hullIndex: _hullIndex, halfedges: halfedges, triangles: triangles, points: points } = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = $f75983e5f4a6fcf3$var$pow(x - points[i * 2], 2) + $f75983e5f4a6fcf3$var$pow(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
            let t = triangles[e];
            const dt = $f75983e5f4a6fcf3$var$pow(x - points[t * 2], 2) + $f75983e5f4a6fcf3$var$pow(y - points[t * 2 + 1], 2);
            if (dt < dc) dc = dt, c = t;
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                e = hull[(_hullIndex[i] + 1) % hull.length];
                if (e !== t) {
                    if ($f75983e5f4a6fcf3$var$pow(x - points[e * 2], 2) + $f75983e5f4a6fcf3$var$pow(y - points[e * 2 + 1], 2) < dc) return e;
                }
                break;
            }
        }while (e !== e0);
        return c;
    }
    render(context) {
        const buffer = context == null ? context = new (0, $ch5ES.default) : undefined;
        const { points: points, halfedges: halfedges, triangles: triangles } = this;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = triangles[i] * 2;
            const tj = triangles[j] * 2;
            context.moveTo(points[ti], points[ti + 1]);
            context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
    }
    renderPoints(context, r) {
        if (r === undefined && (!context || typeof context.moveTo !== "function")) r = context, context = null;
        r = r == undefined ? 2 : +r;
        const buffer = context == null ? context = new (0, $ch5ES.default) : undefined;
        const { points: points } = this;
        for(let i = 0, n = points.length; i < n; i += 2){
            const x = points[i], y = points[i + 1];
            context.moveTo(x + r, y);
            context.arc(x, y, r, 0, $f75983e5f4a6fcf3$var$tau);
        }
        return buffer && buffer.value();
    }
    renderHull(context) {
        const buffer = context == null ? context = new (0, $ch5ES.default) : undefined;
        const { hull: hull, points: points } = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for(let i = 1; i < n; ++i){
            const h = 2 * hull[i];
            context.lineTo(points[h], points[h + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
    }
    hullPolygon() {
        const polygon = new (0, $hgr11.default);
        this.renderHull(polygon);
        return polygon.value();
    }
    renderTriangle(i, context) {
        const buffer = context == null ? context = new (0, $ch5ES.default) : undefined;
        const { points: points, triangles: triangles } = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *trianglePolygons() {
        const { triangles: triangles } = this;
        for(let i = 0, n = triangles.length / 3; i < n; ++i)yield this.trianglePolygon(i);
    }
    trianglePolygon(i) {
        const polygon = new (0, $hgr11.default);
        this.renderTriangle(i, polygon);
        return polygon.value();
    }
}
function $f75983e5f4a6fcf3$var$flatArray(points, fx, fy, that) {
    const n = points.length;
    const array = new Float64Array(n * 2);
    for(let i = 0; i < n; ++i){
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
    }
    return array;
}
function* $f75983e5f4a6fcf3$var$flatIterable(points, fx, fy, that) {
    let i = 0;
    for (const p of points){
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
    }
}

});
parcelRegister("4Ed4G", function(module, exports) {

$parcel$export(module.exports, "default", () => $36250a29a2a264e6$export$2e2bcd8739ae039);
parcelRequire("eStb7");
var $eS0WS = parcelRequire("eS0WS");
const $36250a29a2a264e6$var$EPSILON = Math.pow(2, -52);
const $36250a29a2a264e6$var$EDGE_STACK = new Uint32Array(512);
class $36250a29a2a264e6$export$2e2bcd8739ae039 {
    static from(points, getX = $36250a29a2a264e6$var$defaultGetX, getY = $36250a29a2a264e6$var$defaultGetY) {
        const n = points.length;
        const coords = new Float64Array(n * 2);
        for(let i = 0; i < n; i++){
            const p = points[i];
            coords[2 * i] = getX(p);
            coords[2 * i + 1] = getY(p);
        }
        return new $36250a29a2a264e6$export$2e2bcd8739ae039(coords);
    }
    constructor(coords){
        const n = coords.length >> 1;
        if (n > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
        this.coords = coords;
        // arrays that will store the triangulation graph
        const maxTriangles = Math.max(2 * n - 5, 0);
        this._triangles = new Uint32Array(maxTriangles * 3);
        this._halfedges = new Int32Array(maxTriangles * 3);
        // temporary arrays for tracking the edges of the advancing convex hull
        this._hashSize = Math.ceil(Math.sqrt(n));
        this._hullPrev = new Uint32Array(n); // edge to prev edge
        this._hullNext = new Uint32Array(n); // edge to next edge
        this._hullTri = new Uint32Array(n); // edge to adjacent triangle
        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash
        // temporary arrays for sorting points
        this._ids = new Uint32Array(n);
        this._dists = new Float64Array(n);
        this.update();
    }
    update() {
        const { coords: coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
        const n = coords.length >> 1;
        // populate an array of point indices; calculate input data bbox
        let minX = Infinity;
        let minY = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        for(let i = 0; i < n; i++){
            const x = coords[2 * i];
            const y = coords[2 * i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            this._ids[i] = i;
        }
        const cx = (minX + maxX) / 2;
        const cy = (minY + maxY) / 2;
        let minDist = Infinity;
        let i0, i1, i2;
        // pick a seed point close to the center
        for(let i = 0; i < n; i++){
            const d = $36250a29a2a264e6$var$dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
            if (d < minDist) {
                i0 = i;
                minDist = d;
            }
        }
        const i0x = coords[2 * i0];
        const i0y = coords[2 * i0 + 1];
        minDist = Infinity;
        // find the point closest to the seed
        for(let i = 0; i < n; i++){
            if (i === i0) continue;
            const d = $36250a29a2a264e6$var$dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
            if (d < minDist && d > 0) {
                i1 = i;
                minDist = d;
            }
        }
        let i1x = coords[2 * i1];
        let i1y = coords[2 * i1 + 1];
        let minRadius = Infinity;
        // find the third point which forms the smallest circumcircle with the first two
        for(let i = 0; i < n; i++){
            if (i === i0 || i === i1) continue;
            const r = $36250a29a2a264e6$var$circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
            if (r < minRadius) {
                i2 = i;
                minRadius = r;
            }
        }
        let i2x = coords[2 * i2];
        let i2y = coords[2 * i2 + 1];
        if (minRadius === Infinity) {
            // order collinear points by dx (or dy if all x are identical)
            // and return the list as a hull
            for(let i = 0; i < n; i++)this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
            $36250a29a2a264e6$var$quicksort(this._ids, this._dists, 0, n - 1);
            const hull = new Uint32Array(n);
            let j = 0;
            for(let i = 0, d0 = -Infinity; i < n; i++){
                const id = this._ids[i];
                if (this._dists[id] > d0) {
                    hull[j++] = id;
                    d0 = this._dists[id];
                }
            }
            this.hull = hull.subarray(0, j);
            this.triangles = new Uint32Array(0);
            this.halfedges = new Uint32Array(0);
            return;
        }
        // swap the order of the seed points for counter-clockwise orientation
        if ((0, $eS0WS.orient2d)(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
            const i = i1;
            const x = i1x;
            const y = i1y;
            i1 = i2;
            i1x = i2x;
            i1y = i2y;
            i2 = i;
            i2x = x;
            i2y = y;
        }
        const center = $36250a29a2a264e6$var$circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
        this._cx = center.x;
        this._cy = center.y;
        for(let i = 0; i < n; i++)this._dists[i] = $36250a29a2a264e6$var$dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
        // sort the points by distance from the seed triangle circumcenter
        $36250a29a2a264e6$var$quicksort(this._ids, this._dists, 0, n - 1);
        // set up the seed triangle as the starting hull
        this._hullStart = i0;
        let hullSize = 3;
        hullNext[i0] = hullPrev[i2] = i1;
        hullNext[i1] = hullPrev[i0] = i2;
        hullNext[i2] = hullPrev[i1] = i0;
        hullTri[i0] = 0;
        hullTri[i1] = 1;
        hullTri[i2] = 2;
        hullHash.fill(-1);
        hullHash[this._hashKey(i0x, i0y)] = i0;
        hullHash[this._hashKey(i1x, i1y)] = i1;
        hullHash[this._hashKey(i2x, i2y)] = i2;
        this.trianglesLen = 0;
        this._addTriangle(i0, i1, i2, -1, -1, -1);
        for(let k = 0, xp, yp; k < this._ids.length; k++){
            const i = this._ids[k];
            const x = coords[2 * i];
            const y = coords[2 * i + 1];
            // skip near-duplicate points
            if (k > 0 && Math.abs(x - xp) <= $36250a29a2a264e6$var$EPSILON && Math.abs(y - yp) <= $36250a29a2a264e6$var$EPSILON) continue;
            xp = x;
            yp = y;
            // skip seed triangle points
            if (i === i0 || i === i1 || i === i2) continue;
            // find a visible edge on the convex hull using edge hash
            let start = 0;
            for(let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++){
                start = hullHash[(key + j) % this._hashSize];
                if (start !== -1 && start !== hullNext[start]) break;
            }
            start = hullPrev[start];
            let e = start, q;
            while(q = hullNext[e], (0, $eS0WS.orient2d)(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0){
                e = q;
                if (e === start) {
                    e = -1;
                    break;
                }
            }
            if (e === -1) continue; // likely a near-duplicate point; skip it
            // add the first triangle from the point
            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
            // recursively flip triangles from the point until they satisfy the Delaunay condition
            hullTri[i] = this._legalize(t + 2);
            hullTri[e] = t; // keep track of boundary triangles on the hull
            hullSize++;
            // walk forward through the hull, adding more triangles and flipping recursively
            let n = hullNext[e];
            while(q = hullNext[n], (0, $eS0WS.orient2d)(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0){
                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                hullTri[i] = this._legalize(t + 2);
                hullNext[n] = n; // mark as removed
                hullSize--;
                n = q;
            }
            // walk backward from the other side, adding more triangles and flipping
            if (e === start) while(q = hullPrev[e], (0, $eS0WS.orient2d)(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0){
                t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                this._legalize(t + 2);
                hullTri[q] = t;
                hullNext[e] = e; // mark as removed
                hullSize--;
                e = q;
            }
            // update the hull indices
            this._hullStart = hullPrev[i] = e;
            hullNext[e] = hullPrev[n] = i;
            hullNext[i] = n;
            // save the two new edges in the hash table
            hullHash[this._hashKey(x, y)] = i;
            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
        }
        this.hull = new Uint32Array(hullSize);
        for(let i = 0, e = this._hullStart; i < hullSize; i++){
            this.hull[i] = e;
            e = hullNext[e];
        }
        // trim typed triangle mesh arrays
        this.triangles = this._triangles.subarray(0, this.trianglesLen);
        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
    _hashKey(x, y) {
        return Math.floor($36250a29a2a264e6$var$pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
    }
    _legalize(a) {
        const { _triangles: triangles, _halfedges: halfedges, coords: coords } = this;
        let i = 0;
        let ar = 0;
        // recursion eliminated with a fixed-size stack
        while(true){
            const b = halfedges[a];
            /* if the pair of triangles doesn't satisfy the Delaunay condition
             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
             * then do the same check/flip recursively for the new pair of triangles
             *
             *           pl                    pl
             *          /||\                  /  \
             *       al/ || \bl            al/    \a
             *        /  ||  \              /      \
             *       /  a||b  \    flip    /___ar___\
             *     p0\   ||   /p1   =>   p0\---bl---/p1
             *        \  ||  /              \      /
             *       ar\ || /br             b\    /br
             *          \||/                  \  /
             *           pr                    pr
             */ const a0 = a - a % 3;
            ar = a0 + (a + 2) % 3;
            if (b === -1) {
                if (i === 0) break;
                a = $36250a29a2a264e6$var$EDGE_STACK[--i];
                continue;
            }
            const b0 = b - b % 3;
            const al = a0 + (a + 1) % 3;
            const bl = b0 + (b + 2) % 3;
            const p0 = triangles[ar];
            const pr = triangles[a];
            const pl = triangles[al];
            const p1 = triangles[bl];
            const illegal = $36250a29a2a264e6$var$inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
            if (illegal) {
                triangles[a] = p1;
                triangles[b] = p0;
                const hbl = halfedges[bl];
                // edge swapped on the other side of the hull (rare); fix the halfedge reference
                if (hbl === -1) {
                    let e = this._hullStart;
                    do {
                        if (this._hullTri[e] === bl) {
                            this._hullTri[e] = a;
                            break;
                        }
                        e = this._hullPrev[e];
                    }while (e !== this._hullStart);
                }
                this._link(a, hbl);
                this._link(b, halfedges[ar]);
                this._link(ar, bl);
                const br = b0 + (b + 1) % 3;
                // don't worry about hitting the cap: it can only happen on extremely degenerate input
                if (i < $36250a29a2a264e6$var$EDGE_STACK.length) $36250a29a2a264e6$var$EDGE_STACK[i++] = br;
            } else {
                if (i === 0) break;
                a = $36250a29a2a264e6$var$EDGE_STACK[--i];
            }
        }
        return ar;
    }
    _link(a, b) {
        this._halfedges[a] = b;
        if (b !== -1) this._halfedges[b] = a;
    }
    // add a new triangle given vertex indices and adjacent half-edge ids
    _addTriangle(i0, i1, i2, a, b, c) {
        const t = this.trianglesLen;
        this._triangles[t] = i0;
        this._triangles[t + 1] = i1;
        this._triangles[t + 2] = i2;
        this._link(t, a);
        this._link(t + 1, b);
        this._link(t + 2, c);
        this.trianglesLen += 3;
        return t;
    }
}
// monotonically increases with real angle, but doesn't need expensive trigonometry
function $36250a29a2a264e6$var$pseudoAngle(dx, dy) {
    const p = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
}
function $36250a29a2a264e6$var$dist(ax, ay, bx, by) {
    const dx = ax - bx;
    const dy = ay - by;
    return dx * dx + dy * dy;
}
function $36250a29a2a264e6$var$inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function $36250a29a2a264e6$var$circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = (ey * bl - dy * cl) * d;
    const y = (dx * cl - ex * bl) * d;
    return x * x + y * y;
}
function $36250a29a2a264e6$var$circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = ax + (ey * bl - dy * cl) * d;
    const y = ay + (dx * cl - ex * bl) * d;
    return {
        x: x,
        y: y
    };
}
function $36250a29a2a264e6$var$quicksort(ids, dists, left, right) {
    if (right - left <= 20) for(let i = left + 1; i <= right; i++){
        const temp = ids[i];
        const tempDist = dists[temp];
        let j = i - 1;
        while(j >= left && dists[ids[j]] > tempDist)ids[j + 1] = ids[j--];
        ids[j + 1] = temp;
    }
    else {
        const median = left + right >> 1;
        let i = left + 1;
        let j = right;
        $36250a29a2a264e6$var$swap(ids, median, i);
        if (dists[ids[left]] > dists[ids[right]]) $36250a29a2a264e6$var$swap(ids, left, right);
        if (dists[ids[i]] > dists[ids[right]]) $36250a29a2a264e6$var$swap(ids, i, right);
        if (dists[ids[left]] > dists[ids[i]]) $36250a29a2a264e6$var$swap(ids, left, i);
        const temp = ids[i];
        const tempDist = dists[temp];
        while(true){
            do i++;
            while (dists[ids[i]] < tempDist);
            do j--;
            while (dists[ids[j]] > tempDist);
            if (j < i) break;
            $36250a29a2a264e6$var$swap(ids, i, j);
        }
        ids[left + 1] = ids[j];
        ids[j] = temp;
        if (right - i + 1 >= j - left) {
            $36250a29a2a264e6$var$quicksort(ids, dists, i, right);
            $36250a29a2a264e6$var$quicksort(ids, dists, left, j - 1);
        } else {
            $36250a29a2a264e6$var$quicksort(ids, dists, left, j - 1);
            $36250a29a2a264e6$var$quicksort(ids, dists, i, right);
        }
    }
}
function $36250a29a2a264e6$var$swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}
function $36250a29a2a264e6$var$defaultGetX(p) {
    return p[0];
}
function $36250a29a2a264e6$var$defaultGetY(p) {
    return p[1];
}

});
parcelRegister("eStb7", function(module, exports) {

$parcel$export(module.exports, "orient2d", () => (parcelRequire("eS0WS")).orient2d);

var $eS0WS = parcelRequire("eS0WS");

var $kPVwl = parcelRequire("kPVwl");

var $32whS = parcelRequire("32whS");

var $4cH2L = parcelRequire("4cH2L");

});
parcelRegister("eS0WS", function(module, exports) {

$parcel$export(module.exports, "orient2d", () => $ad36d833b7d13ccc$export$bbb923599a46a7d8);

var $kRAsQ = parcelRequire("kRAsQ");
const $ad36d833b7d13ccc$var$ccwerrboundA = (3 + 16 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $ad36d833b7d13ccc$var$ccwerrboundB = (2 + 12 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $ad36d833b7d13ccc$var$ccwerrboundC = (9 + 64 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon) * (0, $kRAsQ.epsilon);
const $ad36d833b7d13ccc$var$B = (0, $kRAsQ.vec)(4);
const $ad36d833b7d13ccc$var$C1 = (0, $kRAsQ.vec)(8);
const $ad36d833b7d13ccc$var$C2 = (0, $kRAsQ.vec)(12);
const $ad36d833b7d13ccc$var$D = (0, $kRAsQ.vec)(16);
const $ad36d833b7d13ccc$var$u = (0, $kRAsQ.vec)(4);
function $ad36d833b7d13ccc$var$orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
    let acxtail, acytail, bcxtail, bcytail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    const acx = ax - cx;
    const bcx = bx - cx;
    const acy = ay - cy;
    const bcy = by - cy;
    s1 = acx * bcy;
    c = (0, $kRAsQ.splitter) * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = (0, $kRAsQ.splitter) * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcx;
    c = (0, $kRAsQ.splitter) * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = (0, $kRAsQ.splitter) * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $ad36d833b7d13ccc$var$B[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $ad36d833b7d13ccc$var$B[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $ad36d833b7d13ccc$var$B[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $ad36d833b7d13ccc$var$B[3] = u3;
    let det = (0, $kRAsQ.estimate)(4, $ad36d833b7d13ccc$var$B);
    let errbound = $ad36d833b7d13ccc$var$ccwerrboundB * detsum;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - acx;
    acxtail = ax - (acx + bvirt) + (bvirt - cx);
    bvirt = bx - bcx;
    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
    bvirt = ay - acy;
    acytail = ay - (acy + bvirt) + (bvirt - cy);
    bvirt = by - bcy;
    bcytail = by - (bcy + bvirt) + (bvirt - cy);
    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) return det;
    errbound = $ad36d833b7d13ccc$var$ccwerrboundC * detsum + (0, $kRAsQ.resulterrbound) * Math.abs(det);
    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
    if (det >= errbound || -det >= errbound) return det;
    s1 = acxtail * bcy;
    c = (0, $kRAsQ.splitter) * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = (0, $kRAsQ.splitter) * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcx;
    c = (0, $kRAsQ.splitter) * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = (0, $kRAsQ.splitter) * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $ad36d833b7d13ccc$var$u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $ad36d833b7d13ccc$var$u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $ad36d833b7d13ccc$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $ad36d833b7d13ccc$var$u[3] = u3;
    const C1len = (0, $kRAsQ.sum)(4, $ad36d833b7d13ccc$var$B, 4, $ad36d833b7d13ccc$var$u, $ad36d833b7d13ccc$var$C1);
    s1 = acx * bcytail;
    c = (0, $kRAsQ.splitter) * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = (0, $kRAsQ.splitter) * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcxtail;
    c = (0, $kRAsQ.splitter) * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = (0, $kRAsQ.splitter) * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $ad36d833b7d13ccc$var$u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $ad36d833b7d13ccc$var$u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $ad36d833b7d13ccc$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $ad36d833b7d13ccc$var$u[3] = u3;
    const C2len = (0, $kRAsQ.sum)(C1len, $ad36d833b7d13ccc$var$C1, 4, $ad36d833b7d13ccc$var$u, $ad36d833b7d13ccc$var$C2);
    s1 = acxtail * bcytail;
    c = (0, $kRAsQ.splitter) * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = (0, $kRAsQ.splitter) * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcxtail;
    c = (0, $kRAsQ.splitter) * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = (0, $kRAsQ.splitter) * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $ad36d833b7d13ccc$var$u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $ad36d833b7d13ccc$var$u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $ad36d833b7d13ccc$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $ad36d833b7d13ccc$var$u[3] = u3;
    const Dlen = (0, $kRAsQ.sum)(C2len, $ad36d833b7d13ccc$var$C2, 4, $ad36d833b7d13ccc$var$u, $ad36d833b7d13ccc$var$D);
    return $ad36d833b7d13ccc$var$D[Dlen - 1];
}
function $ad36d833b7d13ccc$export$bbb923599a46a7d8(ax, ay, bx, by, cx, cy) {
    const detleft = (ay - cy) * (bx - cx);
    const detright = (ax - cx) * (by - cy);
    const det = detleft - detright;
    const detsum = Math.abs(detleft + detright);
    if (Math.abs(det) >= $ad36d833b7d13ccc$var$ccwerrboundA * detsum) return det;
    return -$ad36d833b7d13ccc$var$orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}
function $ad36d833b7d13ccc$export$c42fd1bc0c0a7484(ax, ay, bx, by, cx, cy) {
    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);
}

});
parcelRegister("kRAsQ", function(module, exports) {

$parcel$export(module.exports, "epsilon", () => $f3050ae5b4451271$export$6c421550c66a327d);
$parcel$export(module.exports, "splitter", () => $f3050ae5b4451271$export$8cfde575cbd41e40);
$parcel$export(module.exports, "resulterrbound", () => $f3050ae5b4451271$export$a4103c3ab16b06d7);
$parcel$export(module.exports, "sum", () => $f3050ae5b4451271$export$8a63f25cc62965f1);
$parcel$export(module.exports, "sum_three", () => $f3050ae5b4451271$export$195a93e4bd4d876f);
$parcel$export(module.exports, "scale", () => $f3050ae5b4451271$export$dcdf75081b88279d);
$parcel$export(module.exports, "negate", () => $f3050ae5b4451271$export$aef51622e549b8b0);
$parcel$export(module.exports, "estimate", () => $f3050ae5b4451271$export$9f3a0795ca2cc944);
$parcel$export(module.exports, "vec", () => $f3050ae5b4451271$export$202e0172ed3c7be0);
const $f3050ae5b4451271$export$6c421550c66a327d = 1.1102230246251565e-16;
const $f3050ae5b4451271$export$8cfde575cbd41e40 = 134217729;
const $f3050ae5b4451271$export$a4103c3ab16b06d7 = (3 + 8 * $f3050ae5b4451271$export$6c421550c66a327d) * $f3050ae5b4451271$export$6c421550c66a327d;
function $f3050ae5b4451271$export$8a63f25cc62965f1(elen, e, flen, f, h) {
    let Q, Qnew, hh, bvirt;
    let enow = e[0];
    let fnow = f[0];
    let eindex = 0;
    let findex = 0;
    if (fnow > enow === fnow > -enow) {
        Q = enow;
        enow = e[++eindex];
    } else {
        Q = fnow;
        fnow = f[++findex];
    }
    let hindex = 0;
    if (eindex < elen && findex < flen) {
        if (fnow > enow === fnow > -enow) {
            Qnew = enow + Q;
            hh = Q - (Qnew - enow);
            enow = e[++eindex];
        } else {
            Qnew = fnow + Q;
            hh = Q - (Qnew - fnow);
            fnow = f[++findex];
        }
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
        while(eindex < elen && findex < flen){
            if (fnow > enow === fnow > -enow) {
                Qnew = Q + enow;
                bvirt = Qnew - Q;
                hh = Q - (Qnew - bvirt) + (enow - bvirt);
                enow = e[++eindex];
            } else {
                Qnew = Q + fnow;
                bvirt = Qnew - Q;
                hh = Q - (Qnew - bvirt) + (fnow - bvirt);
                fnow = f[++findex];
            }
            Q = Qnew;
            if (hh !== 0) h[hindex++] = hh;
        }
    }
    while(eindex < elen){
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
    }
    while(findex < flen){
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
    }
    if (Q !== 0 || hindex === 0) h[hindex++] = Q;
    return hindex;
}
function $f3050ae5b4451271$export$195a93e4bd4d876f(alen, a, blen, b, clen, c, tmp, out) {
    return $f3050ae5b4451271$export$8a63f25cc62965f1($f3050ae5b4451271$export$8a63f25cc62965f1(alen, a, blen, b, tmp), tmp, clen, c, out);
}
function $f3050ae5b4451271$export$dcdf75081b88279d(elen, e, b, h) {
    let Q, sum, hh, product1, product0;
    let bvirt, c, ahi, alo, bhi, blo;
    c = $f3050ae5b4451271$export$8cfde575cbd41e40 * b;
    bhi = c - (c - b);
    blo = b - bhi;
    let enow = e[0];
    Q = enow * b;
    c = $f3050ae5b4451271$export$8cfde575cbd41e40 * enow;
    ahi = c - (c - enow);
    alo = enow - ahi;
    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);
    let hindex = 0;
    if (hh !== 0) h[hindex++] = hh;
    for(let i = 1; i < elen; i++){
        enow = e[i];
        product1 = enow * b;
        c = $f3050ae5b4451271$export$8cfde575cbd41e40 * enow;
        ahi = c - (c - enow);
        alo = enow - ahi;
        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);
        sum = Q + product0;
        bvirt = sum - Q;
        hh = Q - (sum - bvirt) + (product0 - bvirt);
        if (hh !== 0) h[hindex++] = hh;
        Q = product1 + sum;
        hh = sum - (Q - product1);
        if (hh !== 0) h[hindex++] = hh;
    }
    if (Q !== 0 || hindex === 0) h[hindex++] = Q;
    return hindex;
}
function $f3050ae5b4451271$export$aef51622e549b8b0(elen, e) {
    for(let i = 0; i < elen; i++)e[i] = -e[i];
    return elen;
}
function $f3050ae5b4451271$export$9f3a0795ca2cc944(elen, e) {
    let Q = e[0];
    for(let i = 1; i < elen; i++)Q += e[i];
    return Q;
}
function $f3050ae5b4451271$export$202e0172ed3c7be0(n) {
    return new Float64Array(n);
}

});


parcelRegister("kPVwl", function(module, exports) {

var $kRAsQ = parcelRequire("kRAsQ");
const $f2b5307e6d466694$var$o3derrboundA = (7 + 56 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $f2b5307e6d466694$var$o3derrboundB = (3 + 28 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $f2b5307e6d466694$var$o3derrboundC = (26 + 288 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon) * (0, $kRAsQ.epsilon);
const $f2b5307e6d466694$var$bc = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$ca = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$ab = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$at_b = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$at_c = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$bt_c = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$bt_a = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$ct_a = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$ct_b = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$bct = (0, $kRAsQ.vec)(8);
const $f2b5307e6d466694$var$cat = (0, $kRAsQ.vec)(8);
const $f2b5307e6d466694$var$abt = (0, $kRAsQ.vec)(8);
const $f2b5307e6d466694$var$u = (0, $kRAsQ.vec)(4);
const $f2b5307e6d466694$var$_8 = (0, $kRAsQ.vec)(8);
const $f2b5307e6d466694$var$_8b = (0, $kRAsQ.vec)(8);
const $f2b5307e6d466694$var$_16 = (0, $kRAsQ.vec)(8);
const $f2b5307e6d466694$var$_12 = (0, $kRAsQ.vec)(12);
let $f2b5307e6d466694$var$fin = (0, $kRAsQ.vec)(192);
let $f2b5307e6d466694$var$fin2 = (0, $kRAsQ.vec)(192);
function $f2b5307e6d466694$var$finadd(finlen, alen, a) {
    finlen = (0, $kRAsQ.sum)(finlen, $f2b5307e6d466694$var$fin, alen, a, $f2b5307e6d466694$var$fin2);
    const tmp = $f2b5307e6d466694$var$fin;
    $f2b5307e6d466694$var$fin = $f2b5307e6d466694$var$fin2;
    $f2b5307e6d466694$var$fin2 = tmp;
    return finlen;
}
function $f2b5307e6d466694$var$tailinit(xtail, ytail, ax, ay, bx, by, a, b) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;
    if (xtail === 0) {
        if (ytail === 0) {
            a[0] = 0;
            b[0] = 0;
            return 1;
        } else {
            negate = -ytail;
            s1 = negate * ax;
            c = (0, $kRAsQ.splitter) * negate;
            ahi = c - (c - negate);
            alo = negate - ahi;
            c = (0, $kRAsQ.splitter) * ax;
            bhi = c - (c - ax);
            blo = ax - bhi;
            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            a[1] = s1;
            s1 = ytail * bx;
            c = (0, $kRAsQ.splitter) * ytail;
            ahi = c - (c - ytail);
            alo = ytail - ahi;
            c = (0, $kRAsQ.splitter) * bx;
            bhi = c - (c - bx);
            blo = bx - bhi;
            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            b[1] = s1;
            return 2;
        }
    } else if (ytail === 0) {
        s1 = xtail * ay;
        c = (0, $kRAsQ.splitter) * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = (0, $kRAsQ.splitter) * ay;
        bhi = c - (c - ay);
        blo = ay - bhi;
        a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        a[1] = s1;
        negate = -xtail;
        s1 = negate * by;
        c = (0, $kRAsQ.splitter) * negate;
        ahi = c - (c - negate);
        alo = negate - ahi;
        c = (0, $kRAsQ.splitter) * by;
        bhi = c - (c - by);
        blo = by - bhi;
        b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        b[1] = s1;
        return 2;
    } else {
        s1 = xtail * ay;
        c = (0, $kRAsQ.splitter) * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = (0, $kRAsQ.splitter) * ay;
        bhi = c - (c - ay);
        blo = ay - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = ytail * ax;
        c = (0, $kRAsQ.splitter) * ytail;
        ahi = c - (c - ytail);
        alo = ytail - ahi;
        c = (0, $kRAsQ.splitter) * ax;
        bhi = c - (c - ax);
        blo = ax - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        a[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        a[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        a[2] = _j - (u3 - bvirt) + (_i - bvirt);
        a[3] = u3;
        s1 = ytail * bx;
        c = (0, $kRAsQ.splitter) * ytail;
        ahi = c - (c - ytail);
        alo = ytail - ahi;
        c = (0, $kRAsQ.splitter) * bx;
        bhi = c - (c - bx);
        blo = bx - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = xtail * by;
        c = (0, $kRAsQ.splitter) * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = (0, $kRAsQ.splitter) * by;
        bhi = c - (c - by);
        blo = by - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        b[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        b[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        b[2] = _j - (u3 - bvirt) + (_i - bvirt);
        b[3] = u3;
        return 4;
    }
}
function $f2b5307e6d466694$var$tailadd(finlen, a, b, k, z) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;
    s1 = a * b;
    c = (0, $kRAsQ.splitter) * a;
    ahi = c - (c - a);
    alo = a - ahi;
    c = (0, $kRAsQ.splitter) * b;
    bhi = c - (c - b);
    blo = b - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    c = (0, $kRAsQ.splitter) * k;
    bhi = c - (c - k);
    blo = k - bhi;
    _i = s0 * k;
    c = (0, $kRAsQ.splitter) * s0;
    ahi = c - (c - s0);
    alo = s0 - ahi;
    $f2b5307e6d466694$var$u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);
    _j = s1 * k;
    c = (0, $kRAsQ.splitter) * s1;
    ahi = c - (c - s1);
    alo = s1 - ahi;
    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);
    _k = _i + _0;
    bvirt = _k - _i;
    $f2b5307e6d466694$var$u[1] = _i - (_k - bvirt) + (_0 - bvirt);
    u3 = _j + _k;
    $f2b5307e6d466694$var$u[2] = _k - (u3 - _j);
    $f2b5307e6d466694$var$u[3] = u3;
    finlen = $f2b5307e6d466694$var$finadd(finlen, 4, $f2b5307e6d466694$var$u);
    if (z !== 0) {
        c = (0, $kRAsQ.splitter) * z;
        bhi = c - (c - z);
        blo = z - bhi;
        _i = s0 * z;
        c = (0, $kRAsQ.splitter) * s0;
        ahi = c - (c - s0);
        alo = s0 - ahi;
        $f2b5307e6d466694$var$u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);
        _j = s1 * z;
        c = (0, $kRAsQ.splitter) * s1;
        ahi = c - (c - s1);
        alo = s1 - ahi;
        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);
        _k = _i + _0;
        bvirt = _k - _i;
        $f2b5307e6d466694$var$u[1] = _i - (_k - bvirt) + (_0 - bvirt);
        u3 = _j + _k;
        $f2b5307e6d466694$var$u[2] = _k - (u3 - _j);
        $f2b5307e6d466694$var$u[3] = u3;
        finlen = $f2b5307e6d466694$var$finadd(finlen, 4, $f2b5307e6d466694$var$u);
    }
    return finlen;
}
function $f2b5307e6d466694$var$orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {
    let finlen;
    let adxtail, bdxtail, cdxtail;
    let adytail, bdytail, cdytail;
    let adztail, bdztail, cdztail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    s1 = bdx * cdy;
    c = (0, $kRAsQ.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, $kRAsQ.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cdx * bdy;
    c = (0, $kRAsQ.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, $kRAsQ.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $f2b5307e6d466694$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $f2b5307e6d466694$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $f2b5307e6d466694$var$bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $f2b5307e6d466694$var$bc[3] = u3;
    s1 = cdx * ady;
    c = (0, $kRAsQ.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, $kRAsQ.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = adx * cdy;
    c = (0, $kRAsQ.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, $kRAsQ.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $f2b5307e6d466694$var$ca[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $f2b5307e6d466694$var$ca[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $f2b5307e6d466694$var$ca[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $f2b5307e6d466694$var$ca[3] = u3;
    s1 = adx * bdy;
    c = (0, $kRAsQ.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, $kRAsQ.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bdx * ady;
    c = (0, $kRAsQ.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, $kRAsQ.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $f2b5307e6d466694$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $f2b5307e6d466694$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $f2b5307e6d466694$var$ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $f2b5307e6d466694$var$ab[3] = u3;
    finlen = (0, $kRAsQ.sum)((0, $kRAsQ.sum)((0, $kRAsQ.scale)(4, $f2b5307e6d466694$var$bc, adz, $f2b5307e6d466694$var$_8), $f2b5307e6d466694$var$_8, (0, $kRAsQ.scale)(4, $f2b5307e6d466694$var$ca, bdz, $f2b5307e6d466694$var$_8b), $f2b5307e6d466694$var$_8b, $f2b5307e6d466694$var$_16), $f2b5307e6d466694$var$_16, (0, $kRAsQ.scale)(4, $f2b5307e6d466694$var$ab, cdz, $f2b5307e6d466694$var$_8), $f2b5307e6d466694$var$_8, $f2b5307e6d466694$var$fin);
    let det = (0, $kRAsQ.estimate)(finlen, $f2b5307e6d466694$var$fin);
    let errbound = $f2b5307e6d466694$var$o3derrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - adx;
    adxtail = ax - (adx + bvirt) + (bvirt - dx);
    bvirt = bx - bdx;
    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);
    bvirt = cx - cdx;
    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);
    bvirt = ay - ady;
    adytail = ay - (ady + bvirt) + (bvirt - dy);
    bvirt = by - bdy;
    bdytail = by - (bdy + bvirt) + (bvirt - dy);
    bvirt = cy - cdy;
    cdytail = cy - (cdy + bvirt) + (bvirt - dy);
    bvirt = az - adz;
    adztail = az - (adz + bvirt) + (bvirt - dz);
    bvirt = bz - bdz;
    bdztail = bz - (bdz + bvirt) + (bvirt - dz);
    bvirt = cz - cdz;
    cdztail = cz - (cdz + bvirt) + (bvirt - dz);
    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0 && adztail === 0 && bdztail === 0 && cdztail === 0) return det;
    errbound = $f2b5307e6d466694$var$o3derrboundC * permanent + (0, $kRAsQ.resulterrbound) * Math.abs(det);
    det += adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) + bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) + cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);
    if (det >= errbound || -det >= errbound) return det;
    const at_len = $f2b5307e6d466694$var$tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, $f2b5307e6d466694$var$at_b, $f2b5307e6d466694$var$at_c);
    const bt_len = $f2b5307e6d466694$var$tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, $f2b5307e6d466694$var$bt_c, $f2b5307e6d466694$var$bt_a);
    const ct_len = $f2b5307e6d466694$var$tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, $f2b5307e6d466694$var$ct_a, $f2b5307e6d466694$var$ct_b);
    const bctlen = (0, $kRAsQ.sum)(bt_len, $f2b5307e6d466694$var$bt_c, ct_len, $f2b5307e6d466694$var$ct_b, $f2b5307e6d466694$var$bct);
    finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(bctlen, $f2b5307e6d466694$var$bct, adz, $f2b5307e6d466694$var$_16), $f2b5307e6d466694$var$_16);
    const catlen = (0, $kRAsQ.sum)(ct_len, $f2b5307e6d466694$var$ct_a, at_len, $f2b5307e6d466694$var$at_c, $f2b5307e6d466694$var$cat);
    finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(catlen, $f2b5307e6d466694$var$cat, bdz, $f2b5307e6d466694$var$_16), $f2b5307e6d466694$var$_16);
    const abtlen = (0, $kRAsQ.sum)(at_len, $f2b5307e6d466694$var$at_b, bt_len, $f2b5307e6d466694$var$bt_a, $f2b5307e6d466694$var$abt);
    finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(abtlen, $f2b5307e6d466694$var$abt, cdz, $f2b5307e6d466694$var$_16), $f2b5307e6d466694$var$_16);
    if (adztail !== 0) {
        finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(4, $f2b5307e6d466694$var$bc, adztail, $f2b5307e6d466694$var$_12), $f2b5307e6d466694$var$_12);
        finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(bctlen, $f2b5307e6d466694$var$bct, adztail, $f2b5307e6d466694$var$_16), $f2b5307e6d466694$var$_16);
    }
    if (bdztail !== 0) {
        finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(4, $f2b5307e6d466694$var$ca, bdztail, $f2b5307e6d466694$var$_12), $f2b5307e6d466694$var$_12);
        finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(catlen, $f2b5307e6d466694$var$cat, bdztail, $f2b5307e6d466694$var$_16), $f2b5307e6d466694$var$_16);
    }
    if (cdztail !== 0) {
        finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(4, $f2b5307e6d466694$var$ab, cdztail, $f2b5307e6d466694$var$_12), $f2b5307e6d466694$var$_12);
        finlen = $f2b5307e6d466694$var$finadd(finlen, (0, $kRAsQ.scale)(abtlen, $f2b5307e6d466694$var$abt, cdztail, $f2b5307e6d466694$var$_16), $f2b5307e6d466694$var$_16);
    }
    if (adxtail !== 0) {
        if (bdytail !== 0) finlen = $f2b5307e6d466694$var$tailadd(finlen, adxtail, bdytail, cdz, cdztail);
        if (cdytail !== 0) finlen = $f2b5307e6d466694$var$tailadd(finlen, -adxtail, cdytail, bdz, bdztail);
    }
    if (bdxtail !== 0) {
        if (cdytail !== 0) finlen = $f2b5307e6d466694$var$tailadd(finlen, bdxtail, cdytail, adz, adztail);
        if (adytail !== 0) finlen = $f2b5307e6d466694$var$tailadd(finlen, -bdxtail, adytail, cdz, cdztail);
    }
    if (cdxtail !== 0) {
        if (adytail !== 0) finlen = $f2b5307e6d466694$var$tailadd(finlen, cdxtail, adytail, bdz, bdztail);
        if (bdytail !== 0) finlen = $f2b5307e6d466694$var$tailadd(finlen, -cdxtail, bdytail, adz, adztail);
    }
    return $f2b5307e6d466694$var$fin[finlen - 1];
}
function $f2b5307e6d466694$export$248ff23af2e93e3e(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    const bdxcdy = bdx * cdy;
    const cdxbdy = cdx * bdy;
    const cdxady = cdx * ady;
    const adxcdy = adx * cdy;
    const adxbdy = adx * bdy;
    const bdxady = bdx * ady;
    const det = adz * (bdxcdy - cdxbdy) + bdz * (cdxady - adxcdy) + cdz * (adxbdy - bdxady);
    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);
    const errbound = $f2b5307e6d466694$var$o3derrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return $f2b5307e6d466694$var$orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);
}
function $f2b5307e6d466694$export$407220085d2c43a5(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    return adx * (bdy * cdz - bdz * cdy) + bdx * (cdy * adz - cdz * ady) + cdx * (ady * bdz - adz * bdy);
}

});

parcelRegister("32whS", function(module, exports) {

var $kRAsQ = parcelRequire("kRAsQ");
const $236a9a967b069784$var$iccerrboundA = (10 + 96 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $236a9a967b069784$var$iccerrboundB = (4 + 48 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $236a9a967b069784$var$iccerrboundC = (44 + 576 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon) * (0, $kRAsQ.epsilon);
const $236a9a967b069784$var$bc = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$ca = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$ab = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$aa = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$bb = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$cc = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$u = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$v = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$axtbc = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$aytbc = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$bxtca = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$bytca = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$cxtab = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$cytab = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$abt = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$bct = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$cat = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$abtt = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$bctt = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$catt = (0, $kRAsQ.vec)(4);
const $236a9a967b069784$var$_8 = (0, $kRAsQ.vec)(8);
const $236a9a967b069784$var$_16 = (0, $kRAsQ.vec)(16);
const $236a9a967b069784$var$_16b = (0, $kRAsQ.vec)(16);
const $236a9a967b069784$var$_16c = (0, $kRAsQ.vec)(16);
const $236a9a967b069784$var$_32 = (0, $kRAsQ.vec)(32);
const $236a9a967b069784$var$_32b = (0, $kRAsQ.vec)(32);
const $236a9a967b069784$var$_48 = (0, $kRAsQ.vec)(48);
const $236a9a967b069784$var$_64 = (0, $kRAsQ.vec)(64);
let $236a9a967b069784$var$fin = (0, $kRAsQ.vec)(1152);
let $236a9a967b069784$var$fin2 = (0, $kRAsQ.vec)(1152);
function $236a9a967b069784$var$finadd(finlen, a, alen) {
    finlen = (0, $kRAsQ.sum)(finlen, $236a9a967b069784$var$fin, a, alen, $236a9a967b069784$var$fin2);
    const tmp = $236a9a967b069784$var$fin;
    $236a9a967b069784$var$fin = $236a9a967b069784$var$fin2;
    $236a9a967b069784$var$fin2 = tmp;
    return finlen;
}
function $236a9a967b069784$var$incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {
    let finlen;
    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;
    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;
    let abtlen, bctlen, catlen;
    let abttlen, bcttlen, cattlen;
    let n1, n0;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    s1 = bdx * cdy;
    c = (0, $kRAsQ.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, $kRAsQ.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cdx * bdy;
    c = (0, $kRAsQ.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, $kRAsQ.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $236a9a967b069784$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $236a9a967b069784$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $236a9a967b069784$var$bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $236a9a967b069784$var$bc[3] = u3;
    s1 = cdx * ady;
    c = (0, $kRAsQ.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, $kRAsQ.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = adx * cdy;
    c = (0, $kRAsQ.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, $kRAsQ.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $236a9a967b069784$var$ca[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $236a9a967b069784$var$ca[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $236a9a967b069784$var$ca[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $236a9a967b069784$var$ca[3] = u3;
    s1 = adx * bdy;
    c = (0, $kRAsQ.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, $kRAsQ.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bdx * ady;
    c = (0, $kRAsQ.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, $kRAsQ.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $236a9a967b069784$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $236a9a967b069784$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $236a9a967b069784$var$ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $236a9a967b069784$var$ab[3] = u3;
    finlen = (0, $kRAsQ.sum)((0, $kRAsQ.sum)((0, $kRAsQ.sum)((0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bc, adx, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, adx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bc, ady, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, ady, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, (0, $kRAsQ.sum)((0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$ca, bdx, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, bdx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$ca, bdy, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, bdy, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, $236a9a967b069784$var$_32b), $236a9a967b069784$var$_32b, $236a9a967b069784$var$_64), $236a9a967b069784$var$_64, (0, $kRAsQ.sum)((0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$ab, cdx, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, cdx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$ab, cdy, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, cdy, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$fin);
    let det = (0, $kRAsQ.estimate)(finlen, $236a9a967b069784$var$fin);
    let errbound = $236a9a967b069784$var$iccerrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - adx;
    adxtail = ax - (adx + bvirt) + (bvirt - dx);
    bvirt = ay - ady;
    adytail = ay - (ady + bvirt) + (bvirt - dy);
    bvirt = bx - bdx;
    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);
    bvirt = by - bdy;
    bdytail = by - (bdy + bvirt) + (bvirt - dy);
    bvirt = cx - cdx;
    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);
    bvirt = cy - cdy;
    cdytail = cy - (cdy + bvirt) + (bvirt - dy);
    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) return det;
    errbound = $236a9a967b069784$var$iccerrboundC * permanent + (0, $kRAsQ.resulterrbound) * Math.abs(det);
    det += (adx * adx + ady * ady) * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + 2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx) + ((bdx * bdx + bdy * bdy) * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + 2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) + ((cdx * cdx + cdy * cdy) * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + 2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));
    if (det >= errbound || -det >= errbound) return det;
    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {
        s1 = adx * adx;
        c = (0, $kRAsQ.splitter) * adx;
        ahi = c - (c - adx);
        alo = adx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = ady * ady;
        c = (0, $kRAsQ.splitter) * ady;
        ahi = c - (c - ady);
        alo = ady - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        $236a9a967b069784$var$aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        $236a9a967b069784$var$aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        $236a9a967b069784$var$aa[2] = _j - (u3 - bvirt) + (_i - bvirt);
        $236a9a967b069784$var$aa[3] = u3;
    }
    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {
        s1 = bdx * bdx;
        c = (0, $kRAsQ.splitter) * bdx;
        ahi = c - (c - bdx);
        alo = bdx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = bdy * bdy;
        c = (0, $kRAsQ.splitter) * bdy;
        ahi = c - (c - bdy);
        alo = bdy - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        $236a9a967b069784$var$bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        $236a9a967b069784$var$bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        $236a9a967b069784$var$bb[2] = _j - (u3 - bvirt) + (_i - bvirt);
        $236a9a967b069784$var$bb[3] = u3;
    }
    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {
        s1 = cdx * cdx;
        c = (0, $kRAsQ.splitter) * cdx;
        ahi = c - (c - cdx);
        alo = cdx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = cdy * cdy;
        c = (0, $kRAsQ.splitter) * cdy;
        ahi = c - (c - cdy);
        alo = cdy - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        $236a9a967b069784$var$cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        $236a9a967b069784$var$cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        $236a9a967b069784$var$cc[2] = _j - (u3 - bvirt) + (_i - bvirt);
        $236a9a967b069784$var$cc[3] = u3;
    }
    if (adxtail !== 0) {
        axtbclen = (0, $kRAsQ.scale)(4, $236a9a967b069784$var$bc, adxtail, $236a9a967b069784$var$axtbc);
        finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(axtbclen, $236a9a967b069784$var$axtbc, 2 * adx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$cc, adxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, bdy, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bb, adxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, -cdy, $236a9a967b069784$var$_16c), $236a9a967b069784$var$_16c, $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
    }
    if (adytail !== 0) {
        aytbclen = (0, $kRAsQ.scale)(4, $236a9a967b069784$var$bc, adytail, $236a9a967b069784$var$aytbc);
        finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(aytbclen, $236a9a967b069784$var$aytbc, 2 * ady, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bb, adytail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, cdx, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$cc, adytail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, -bdx, $236a9a967b069784$var$_16c), $236a9a967b069784$var$_16c, $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
    }
    if (bdxtail !== 0) {
        bxtcalen = (0, $kRAsQ.scale)(4, $236a9a967b069784$var$ca, bdxtail, $236a9a967b069784$var$bxtca);
        finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(bxtcalen, $236a9a967b069784$var$bxtca, 2 * bdx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$aa, bdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, cdy, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$cc, bdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, -ady, $236a9a967b069784$var$_16c), $236a9a967b069784$var$_16c, $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
    }
    if (bdytail !== 0) {
        bytcalen = (0, $kRAsQ.scale)(4, $236a9a967b069784$var$ca, bdytail, $236a9a967b069784$var$bytca);
        finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(bytcalen, $236a9a967b069784$var$bytca, 2 * bdy, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$cc, bdytail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, adx, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$aa, bdytail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, -cdx, $236a9a967b069784$var$_16c), $236a9a967b069784$var$_16c, $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
    }
    if (cdxtail !== 0) {
        cxtablen = (0, $kRAsQ.scale)(4, $236a9a967b069784$var$ab, cdxtail, $236a9a967b069784$var$cxtab);
        finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(cxtablen, $236a9a967b069784$var$cxtab, 2 * cdx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bb, cdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, ady, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$aa, cdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, -bdy, $236a9a967b069784$var$_16c), $236a9a967b069784$var$_16c, $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
    }
    if (cdytail !== 0) {
        cytablen = (0, $kRAsQ.scale)(4, $236a9a967b069784$var$ab, cdytail, $236a9a967b069784$var$cytab);
        finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(cytablen, $236a9a967b069784$var$cytab, 2 * cdy, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$aa, cdytail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, bdx, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bb, cdytail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, -adx, $236a9a967b069784$var$_16c), $236a9a967b069784$var$_16c, $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
    }
    if (adxtail !== 0 || adytail !== 0) {
        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {
            s1 = bdxtail * cdy;
            c = (0, $kRAsQ.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, $kRAsQ.splitter) * cdy;
            bhi = c - (c - cdy);
            blo = cdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdx * cdytail;
            c = (0, $kRAsQ.splitter) * bdx;
            ahi = c - (c - bdx);
            alo = bdx - ahi;
            c = (0, $kRAsQ.splitter) * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            $236a9a967b069784$var$u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            $236a9a967b069784$var$u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$u[3] = u3;
            s1 = cdxtail * -bdy;
            c = (0, $kRAsQ.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, $kRAsQ.splitter) * -bdy;
            bhi = c - (c - -bdy);
            blo = -bdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdx * -bdytail;
            c = (0, $kRAsQ.splitter) * cdx;
            ahi = c - (c - cdx);
            alo = cdx - ahi;
            c = (0, $kRAsQ.splitter) * -bdytail;
            bhi = c - (c - -bdytail);
            blo = -bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            $236a9a967b069784$var$v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            $236a9a967b069784$var$v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$v[3] = u3;
            bctlen = (0, $kRAsQ.sum)(4, $236a9a967b069784$var$u, 4, $236a9a967b069784$var$v, $236a9a967b069784$var$bct);
            s1 = bdxtail * cdytail;
            c = (0, $kRAsQ.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, $kRAsQ.splitter) * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdxtail * bdytail;
            c = (0, $kRAsQ.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, $kRAsQ.splitter) * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            $236a9a967b069784$var$bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            $236a9a967b069784$var$bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$bctt[3] = u3;
            bcttlen = 4;
        } else {
            $236a9a967b069784$var$bct[0] = 0;
            bctlen = 1;
            $236a9a967b069784$var$bctt[0] = 0;
            bcttlen = 1;
        }
        if (adxtail !== 0) {
            const len = (0, $kRAsQ.scale)(bctlen, $236a9a967b069784$var$bct, adxtail, $236a9a967b069784$var$_16c);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum)((0, $kRAsQ.scale)(axtbclen, $236a9a967b069784$var$axtbc, adxtail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, 2 * adx, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
            const len2 = (0, $kRAsQ.scale)(bcttlen, $236a9a967b069784$var$bctt, adxtail, $236a9a967b069784$var$_8);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, 2 * adx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, adxtail, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, adxtail, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_32b, $236a9a967b069784$var$_64), $236a9a967b069784$var$_64);
            if (bdytail !== 0) finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$cc, adxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, bdytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16);
            if (cdytail !== 0) finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bb, -adxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, cdytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16);
        }
        if (adytail !== 0) {
            const len = (0, $kRAsQ.scale)(bctlen, $236a9a967b069784$var$bct, adytail, $236a9a967b069784$var$_16c);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum)((0, $kRAsQ.scale)(aytbclen, $236a9a967b069784$var$aytbc, adytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, 2 * ady, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
            const len2 = (0, $kRAsQ.scale)(bcttlen, $236a9a967b069784$var$bctt, adytail, $236a9a967b069784$var$_8);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, 2 * ady, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, adytail, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, adytail, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_32b, $236a9a967b069784$var$_64), $236a9a967b069784$var$_64);
        }
    }
    if (bdxtail !== 0 || bdytail !== 0) {
        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {
            s1 = cdxtail * ady;
            c = (0, $kRAsQ.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, $kRAsQ.splitter) * ady;
            bhi = c - (c - ady);
            blo = ady - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdx * adytail;
            c = (0, $kRAsQ.splitter) * cdx;
            ahi = c - (c - cdx);
            alo = cdx - ahi;
            c = (0, $kRAsQ.splitter) * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            $236a9a967b069784$var$u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            $236a9a967b069784$var$u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$u[3] = u3;
            n1 = -cdy;
            n0 = -cdytail;
            s1 = adxtail * n1;
            c = (0, $kRAsQ.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, $kRAsQ.splitter) * n1;
            bhi = c - (c - n1);
            blo = n1 - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adx * n0;
            c = (0, $kRAsQ.splitter) * adx;
            ahi = c - (c - adx);
            alo = adx - ahi;
            c = (0, $kRAsQ.splitter) * n0;
            bhi = c - (c - n0);
            blo = n0 - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            $236a9a967b069784$var$v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            $236a9a967b069784$var$v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$v[3] = u3;
            catlen = (0, $kRAsQ.sum)(4, $236a9a967b069784$var$u, 4, $236a9a967b069784$var$v, $236a9a967b069784$var$cat);
            s1 = cdxtail * adytail;
            c = (0, $kRAsQ.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, $kRAsQ.splitter) * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adxtail * cdytail;
            c = (0, $kRAsQ.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, $kRAsQ.splitter) * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            $236a9a967b069784$var$catt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            $236a9a967b069784$var$catt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$catt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$catt[3] = u3;
            cattlen = 4;
        } else {
            $236a9a967b069784$var$cat[0] = 0;
            catlen = 1;
            $236a9a967b069784$var$catt[0] = 0;
            cattlen = 1;
        }
        if (bdxtail !== 0) {
            const len = (0, $kRAsQ.scale)(catlen, $236a9a967b069784$var$cat, bdxtail, $236a9a967b069784$var$_16c);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum)((0, $kRAsQ.scale)(bxtcalen, $236a9a967b069784$var$bxtca, bdxtail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, 2 * bdx, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
            const len2 = (0, $kRAsQ.scale)(cattlen, $236a9a967b069784$var$catt, bdxtail, $236a9a967b069784$var$_8);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, 2 * bdx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, bdxtail, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, bdxtail, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_32b, $236a9a967b069784$var$_64), $236a9a967b069784$var$_64);
            if (cdytail !== 0) finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$aa, bdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, cdytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16);
            if (adytail !== 0) finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$cc, -bdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, adytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16);
        }
        if (bdytail !== 0) {
            const len = (0, $kRAsQ.scale)(catlen, $236a9a967b069784$var$cat, bdytail, $236a9a967b069784$var$_16c);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum)((0, $kRAsQ.scale)(bytcalen, $236a9a967b069784$var$bytca, bdytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, 2 * bdy, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
            const len2 = (0, $kRAsQ.scale)(cattlen, $236a9a967b069784$var$catt, bdytail, $236a9a967b069784$var$_8);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, 2 * bdy, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, bdytail, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, bdytail, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_32b, $236a9a967b069784$var$_64), $236a9a967b069784$var$_64);
        }
    }
    if (cdxtail !== 0 || cdytail !== 0) {
        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {
            s1 = adxtail * bdy;
            c = (0, $kRAsQ.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, $kRAsQ.splitter) * bdy;
            bhi = c - (c - bdy);
            blo = bdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adx * bdytail;
            c = (0, $kRAsQ.splitter) * adx;
            ahi = c - (c - adx);
            alo = adx - ahi;
            c = (0, $kRAsQ.splitter) * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            $236a9a967b069784$var$u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            $236a9a967b069784$var$u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$u[3] = u3;
            n1 = -ady;
            n0 = -adytail;
            s1 = bdxtail * n1;
            c = (0, $kRAsQ.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, $kRAsQ.splitter) * n1;
            bhi = c - (c - n1);
            blo = n1 - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdx * n0;
            c = (0, $kRAsQ.splitter) * bdx;
            ahi = c - (c - bdx);
            alo = bdx - ahi;
            c = (0, $kRAsQ.splitter) * n0;
            bhi = c - (c - n0);
            blo = n0 - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            $236a9a967b069784$var$v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            $236a9a967b069784$var$v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$v[3] = u3;
            abtlen = (0, $kRAsQ.sum)(4, $236a9a967b069784$var$u, 4, $236a9a967b069784$var$v, $236a9a967b069784$var$abt);
            s1 = adxtail * bdytail;
            c = (0, $kRAsQ.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, $kRAsQ.splitter) * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdxtail * adytail;
            c = (0, $kRAsQ.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, $kRAsQ.splitter) * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            $236a9a967b069784$var$abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            $236a9a967b069784$var$abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            $236a9a967b069784$var$abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            $236a9a967b069784$var$abtt[3] = u3;
            abttlen = 4;
        } else {
            $236a9a967b069784$var$abt[0] = 0;
            abtlen = 1;
            $236a9a967b069784$var$abtt[0] = 0;
            abttlen = 1;
        }
        if (cdxtail !== 0) {
            const len = (0, $kRAsQ.scale)(abtlen, $236a9a967b069784$var$abt, cdxtail, $236a9a967b069784$var$_16c);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum)((0, $kRAsQ.scale)(cxtablen, $236a9a967b069784$var$cxtab, cdxtail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, 2 * cdx, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
            const len2 = (0, $kRAsQ.scale)(abttlen, $236a9a967b069784$var$abtt, cdxtail, $236a9a967b069784$var$_8);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, 2 * cdx, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, cdxtail, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, cdxtail, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_32b, $236a9a967b069784$var$_64), $236a9a967b069784$var$_64);
            if (adytail !== 0) finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$bb, cdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, adytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16);
            if (bdytail !== 0) finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(4, $236a9a967b069784$var$aa, -cdxtail, $236a9a967b069784$var$_8), $236a9a967b069784$var$_8, bdytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16);
        }
        if (cdytail !== 0) {
            const len = (0, $kRAsQ.scale)(abtlen, $236a9a967b069784$var$abt, cdytail, $236a9a967b069784$var$_16c);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum)((0, $kRAsQ.scale)(cytablen, $236a9a967b069784$var$cytab, cdytail, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, 2 * cdy, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_48), $236a9a967b069784$var$_48);
            const len2 = (0, $kRAsQ.scale)(abttlen, $236a9a967b069784$var$abtt, cdytail, $236a9a967b069784$var$_8);
            finlen = $236a9a967b069784$var$finadd(finlen, (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, 2 * cdy, $236a9a967b069784$var$_16), $236a9a967b069784$var$_16, (0, $kRAsQ.scale)(len2, $236a9a967b069784$var$_8, cdytail, $236a9a967b069784$var$_16b), $236a9a967b069784$var$_16b, (0, $kRAsQ.scale)(len, $236a9a967b069784$var$_16c, cdytail, $236a9a967b069784$var$_32), $236a9a967b069784$var$_32, $236a9a967b069784$var$_32b, $236a9a967b069784$var$_64), $236a9a967b069784$var$_64);
        }
    }
    return $236a9a967b069784$var$fin[finlen - 1];
}
function $236a9a967b069784$export$454d2cfe884d4dd6(ax, ay, bx, by, cx, cy, dx, dy) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const bdxcdy = bdx * cdy;
    const cdxbdy = cdx * bdy;
    const alift = adx * adx + ady * ady;
    const cdxady = cdx * ady;
    const adxcdy = adx * cdy;
    const blift = bdx * bdx + bdy * bdy;
    const adxbdy = adx * bdy;
    const bdxady = bdx * ady;
    const clift = cdx * cdx + cdy * cdy;
    const det = alift * (bdxcdy - cdxbdy) + blift * (cdxady - adxcdy) + clift * (adxbdy - bdxady);
    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift + (Math.abs(cdxady) + Math.abs(adxcdy)) * blift + (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;
    const errbound = $236a9a967b069784$var$iccerrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return $236a9a967b069784$var$incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);
}
function $236a9a967b069784$export$f98e78581b4485e6(ax, ay, bx, by, cx, cy, dx, dy) {
    const adx = ax - dx;
    const ady = ay - dy;
    const bdx = bx - dx;
    const bdy = by - dy;
    const cdx = cx - dx;
    const cdy = cy - dy;
    const abdet = adx * bdy - bdx * ady;
    const bcdet = bdx * cdy - cdx * bdy;
    const cadet = cdx * ady - adx * cdy;
    const alift = adx * adx + ady * ady;
    const blift = bdx * bdx + bdy * bdy;
    const clift = cdx * cdx + cdy * cdy;
    return alift * bcdet + blift * cadet + clift * abdet;
}

});

parcelRegister("4cH2L", function(module, exports) {

var $kRAsQ = parcelRequire("kRAsQ");
const $30f9abfb67ab7c14$var$isperrboundA = (16 + 224 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $30f9abfb67ab7c14$var$isperrboundB = (5 + 72 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon);
const $30f9abfb67ab7c14$var$isperrboundC = (71 + 1408 * (0, $kRAsQ.epsilon)) * (0, $kRAsQ.epsilon) * (0, $kRAsQ.epsilon);
const $30f9abfb67ab7c14$var$ab = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$bc = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$cd = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$de = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$ea = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$ac = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$bd = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$ce = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$da = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$eb = (0, $kRAsQ.vec)(4);
const $30f9abfb67ab7c14$var$abc = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$bcd = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$cde = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$dea = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$eab = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$abd = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$bce = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$cda = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$deb = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$eac = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$adet = (0, $kRAsQ.vec)(1152);
const $30f9abfb67ab7c14$var$bdet = (0, $kRAsQ.vec)(1152);
const $30f9abfb67ab7c14$var$cdet = (0, $kRAsQ.vec)(1152);
const $30f9abfb67ab7c14$var$ddet = (0, $kRAsQ.vec)(1152);
const $30f9abfb67ab7c14$var$edet = (0, $kRAsQ.vec)(1152);
const $30f9abfb67ab7c14$var$abdet = (0, $kRAsQ.vec)(2304);
const $30f9abfb67ab7c14$var$cddet = (0, $kRAsQ.vec)(2304);
const $30f9abfb67ab7c14$var$cdedet = (0, $kRAsQ.vec)(3456);
const $30f9abfb67ab7c14$var$deter = (0, $kRAsQ.vec)(5760);
const $30f9abfb67ab7c14$var$_8 = (0, $kRAsQ.vec)(8);
const $30f9abfb67ab7c14$var$_8b = (0, $kRAsQ.vec)(8);
const $30f9abfb67ab7c14$var$_8c = (0, $kRAsQ.vec)(8);
const $30f9abfb67ab7c14$var$_16 = (0, $kRAsQ.vec)(16);
const $30f9abfb67ab7c14$var$_24 = (0, $kRAsQ.vec)(24);
const $30f9abfb67ab7c14$var$_48 = (0, $kRAsQ.vec)(48);
const $30f9abfb67ab7c14$var$_48b = (0, $kRAsQ.vec)(48);
const $30f9abfb67ab7c14$var$_96 = (0, $kRAsQ.vec)(96);
const $30f9abfb67ab7c14$var$_192 = (0, $kRAsQ.vec)(192);
const $30f9abfb67ab7c14$var$_384x = (0, $kRAsQ.vec)(384);
const $30f9abfb67ab7c14$var$_384y = (0, $kRAsQ.vec)(384);
const $30f9abfb67ab7c14$var$_384z = (0, $kRAsQ.vec)(384);
const $30f9abfb67ab7c14$var$_768 = (0, $kRAsQ.vec)(768);
function $30f9abfb67ab7c14$var$sum_three_scale(a, b, c, az, bz, cz, out) {
    return (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)(4, a, az, $30f9abfb67ab7c14$var$_8), $30f9abfb67ab7c14$var$_8, (0, $kRAsQ.scale)(4, b, bz, $30f9abfb67ab7c14$var$_8b), $30f9abfb67ab7c14$var$_8b, (0, $kRAsQ.scale)(4, c, cz, $30f9abfb67ab7c14$var$_8c), $30f9abfb67ab7c14$var$_8c, $30f9abfb67ab7c14$var$_16, out);
}
function $30f9abfb67ab7c14$var$liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {
    const len = (0, $kRAsQ.sum)((0, $kRAsQ.sum)(alen, a, blen, b, $30f9abfb67ab7c14$var$_48), $30f9abfb67ab7c14$var$_48, (0, $kRAsQ.negate)((0, $kRAsQ.sum)(clen, c, dlen, d, $30f9abfb67ab7c14$var$_48b), $30f9abfb67ab7c14$var$_48b), $30f9abfb67ab7c14$var$_48b, $30f9abfb67ab7c14$var$_96);
    return (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)((0, $kRAsQ.scale)(len, $30f9abfb67ab7c14$var$_96, x, $30f9abfb67ab7c14$var$_192), $30f9abfb67ab7c14$var$_192, x, $30f9abfb67ab7c14$var$_384x), $30f9abfb67ab7c14$var$_384x, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(len, $30f9abfb67ab7c14$var$_96, y, $30f9abfb67ab7c14$var$_192), $30f9abfb67ab7c14$var$_192, y, $30f9abfb67ab7c14$var$_384y), $30f9abfb67ab7c14$var$_384y, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(len, $30f9abfb67ab7c14$var$_96, z, $30f9abfb67ab7c14$var$_192), $30f9abfb67ab7c14$var$_192, z, $30f9abfb67ab7c14$var$_384z), $30f9abfb67ab7c14$var$_384z, $30f9abfb67ab7c14$var$_768, out);
}
function $30f9abfb67ab7c14$var$insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    s1 = ax * by;
    c = (0, $kRAsQ.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, $kRAsQ.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bx * ay;
    c = (0, $kRAsQ.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, $kRAsQ.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$ab[3] = u3;
    s1 = bx * cy;
    c = (0, $kRAsQ.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, $kRAsQ.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cx * by;
    c = (0, $kRAsQ.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, $kRAsQ.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$bc[3] = u3;
    s1 = cx * dy;
    c = (0, $kRAsQ.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, $kRAsQ.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dx * cy;
    c = (0, $kRAsQ.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, $kRAsQ.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$cd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$cd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$cd[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$cd[3] = u3;
    s1 = dx * ey;
    c = (0, $kRAsQ.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, $kRAsQ.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ex * dy;
    c = (0, $kRAsQ.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, $kRAsQ.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$de[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$de[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$de[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$de[3] = u3;
    s1 = ex * ay;
    c = (0, $kRAsQ.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, $kRAsQ.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ax * ey;
    c = (0, $kRAsQ.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, $kRAsQ.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$ea[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$ea[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$ea[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$ea[3] = u3;
    s1 = ax * cy;
    c = (0, $kRAsQ.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, $kRAsQ.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cx * ay;
    c = (0, $kRAsQ.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, $kRAsQ.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$ac[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$ac[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$ac[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$ac[3] = u3;
    s1 = bx * dy;
    c = (0, $kRAsQ.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, $kRAsQ.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dx * by;
    c = (0, $kRAsQ.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, $kRAsQ.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$bd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$bd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$bd[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$bd[3] = u3;
    s1 = cx * ey;
    c = (0, $kRAsQ.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, $kRAsQ.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ex * cy;
    c = (0, $kRAsQ.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, $kRAsQ.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$ce[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$ce[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$ce[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$ce[3] = u3;
    s1 = dx * ay;
    c = (0, $kRAsQ.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, $kRAsQ.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ax * dy;
    c = (0, $kRAsQ.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, $kRAsQ.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$da[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$da[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$da[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$da[3] = u3;
    s1 = ex * by;
    c = (0, $kRAsQ.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, $kRAsQ.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bx * ey;
    c = (0, $kRAsQ.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, $kRAsQ.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$eb[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$eb[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    $30f9abfb67ab7c14$var$eb[2] = _j - (u3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$eb[3] = u3;
    const abclen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$ab, $30f9abfb67ab7c14$var$bc, $30f9abfb67ab7c14$var$ac, cz, az, -bz, $30f9abfb67ab7c14$var$abc);
    const bcdlen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$bc, $30f9abfb67ab7c14$var$cd, $30f9abfb67ab7c14$var$bd, dz, bz, -cz, $30f9abfb67ab7c14$var$bcd);
    const cdelen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$cd, $30f9abfb67ab7c14$var$de, $30f9abfb67ab7c14$var$ce, ez, cz, -dz, $30f9abfb67ab7c14$var$cde);
    const dealen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$de, $30f9abfb67ab7c14$var$ea, $30f9abfb67ab7c14$var$da, az, dz, -ez, $30f9abfb67ab7c14$var$dea);
    const eablen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$ea, $30f9abfb67ab7c14$var$ab, $30f9abfb67ab7c14$var$eb, bz, ez, -az, $30f9abfb67ab7c14$var$eab);
    const abdlen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$ab, $30f9abfb67ab7c14$var$bd, $30f9abfb67ab7c14$var$da, dz, az, bz, $30f9abfb67ab7c14$var$abd);
    const bcelen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$bc, $30f9abfb67ab7c14$var$ce, $30f9abfb67ab7c14$var$eb, ez, bz, cz, $30f9abfb67ab7c14$var$bce);
    const cdalen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$cd, $30f9abfb67ab7c14$var$da, $30f9abfb67ab7c14$var$ac, az, cz, dz, $30f9abfb67ab7c14$var$cda);
    const deblen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$de, $30f9abfb67ab7c14$var$eb, $30f9abfb67ab7c14$var$bd, bz, dz, ez, $30f9abfb67ab7c14$var$deb);
    const eaclen = $30f9abfb67ab7c14$var$sum_three_scale($30f9abfb67ab7c14$var$ea, $30f9abfb67ab7c14$var$ac, $30f9abfb67ab7c14$var$ce, cz, ez, az, $30f9abfb67ab7c14$var$eac);
    const deterlen = (0, $kRAsQ.sum_three)($30f9abfb67ab7c14$var$liftexact(cdelen, $30f9abfb67ab7c14$var$cde, bcelen, $30f9abfb67ab7c14$var$bce, deblen, $30f9abfb67ab7c14$var$deb, bcdlen, $30f9abfb67ab7c14$var$bcd, ax, ay, az, $30f9abfb67ab7c14$var$adet), $30f9abfb67ab7c14$var$adet, $30f9abfb67ab7c14$var$liftexact(dealen, $30f9abfb67ab7c14$var$dea, cdalen, $30f9abfb67ab7c14$var$cda, eaclen, $30f9abfb67ab7c14$var$eac, cdelen, $30f9abfb67ab7c14$var$cde, bx, by, bz, $30f9abfb67ab7c14$var$bdet), $30f9abfb67ab7c14$var$bdet, (0, $kRAsQ.sum_three)($30f9abfb67ab7c14$var$liftexact(eablen, $30f9abfb67ab7c14$var$eab, deblen, $30f9abfb67ab7c14$var$deb, abdlen, $30f9abfb67ab7c14$var$abd, dealen, $30f9abfb67ab7c14$var$dea, cx, cy, cz, $30f9abfb67ab7c14$var$cdet), $30f9abfb67ab7c14$var$cdet, $30f9abfb67ab7c14$var$liftexact(abclen, $30f9abfb67ab7c14$var$abc, eaclen, $30f9abfb67ab7c14$var$eac, bcelen, $30f9abfb67ab7c14$var$bce, eablen, $30f9abfb67ab7c14$var$eab, dx, dy, dz, $30f9abfb67ab7c14$var$ddet), $30f9abfb67ab7c14$var$ddet, $30f9abfb67ab7c14$var$liftexact(bcdlen, $30f9abfb67ab7c14$var$bcd, abdlen, $30f9abfb67ab7c14$var$abd, cdalen, $30f9abfb67ab7c14$var$cda, abclen, $30f9abfb67ab7c14$var$abc, ex, ey, ez, $30f9abfb67ab7c14$var$edet), $30f9abfb67ab7c14$var$edet, $30f9abfb67ab7c14$var$cddet, $30f9abfb67ab7c14$var$cdedet), $30f9abfb67ab7c14$var$cdedet, $30f9abfb67ab7c14$var$abdet, $30f9abfb67ab7c14$var$deter);
    return $30f9abfb67ab7c14$var$deter[deterlen - 1];
}
const $30f9abfb67ab7c14$var$xdet = (0, $kRAsQ.vec)(96);
const $30f9abfb67ab7c14$var$ydet = (0, $kRAsQ.vec)(96);
const $30f9abfb67ab7c14$var$zdet = (0, $kRAsQ.vec)(96);
const $30f9abfb67ab7c14$var$fin = (0, $kRAsQ.vec)(1152);
function $30f9abfb67ab7c14$var$liftadapt(a, b, c, az, bz, cz, x, y, z, out) {
    const len = $30f9abfb67ab7c14$var$sum_three_scale(a, b, c, az, bz, cz, $30f9abfb67ab7c14$var$_24);
    return (0, $kRAsQ.sum_three)((0, $kRAsQ.scale)((0, $kRAsQ.scale)(len, $30f9abfb67ab7c14$var$_24, x, $30f9abfb67ab7c14$var$_48), $30f9abfb67ab7c14$var$_48, x, $30f9abfb67ab7c14$var$xdet), $30f9abfb67ab7c14$var$xdet, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(len, $30f9abfb67ab7c14$var$_24, y, $30f9abfb67ab7c14$var$_48), $30f9abfb67ab7c14$var$_48, y, $30f9abfb67ab7c14$var$ydet), $30f9abfb67ab7c14$var$ydet, (0, $kRAsQ.scale)((0, $kRAsQ.scale)(len, $30f9abfb67ab7c14$var$_24, z, $30f9abfb67ab7c14$var$_48), $30f9abfb67ab7c14$var$_48, z, $30f9abfb67ab7c14$var$zdet), $30f9abfb67ab7c14$var$zdet, $30f9abfb67ab7c14$var$_192, out);
}
function $30f9abfb67ab7c14$var$insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {
    let ab3, bc3, cd3, da3, ac3, bd3;
    let aextail, bextail, cextail, dextail;
    let aeytail, beytail, ceytail, deytail;
    let aeztail, beztail, ceztail, deztail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;
    const aex = ax - ex;
    const bex = bx - ex;
    const cex = cx - ex;
    const dex = dx - ex;
    const aey = ay - ey;
    const bey = by - ey;
    const cey = cy - ey;
    const dey = dy - ey;
    const aez = az - ez;
    const bez = bz - ez;
    const cez = cz - ez;
    const dez = dz - ez;
    s1 = aex * bey;
    c = (0, $kRAsQ.splitter) * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = (0, $kRAsQ.splitter) * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bex * aey;
    c = (0, $kRAsQ.splitter) * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = (0, $kRAsQ.splitter) * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    ab3 = _j + _i;
    bvirt = ab3 - _j;
    $30f9abfb67ab7c14$var$ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$ab[3] = ab3;
    s1 = bex * cey;
    c = (0, $kRAsQ.splitter) * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = (0, $kRAsQ.splitter) * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cex * bey;
    c = (0, $kRAsQ.splitter) * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = (0, $kRAsQ.splitter) * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    bc3 = _j + _i;
    bvirt = bc3 - _j;
    $30f9abfb67ab7c14$var$bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$bc[3] = bc3;
    s1 = cex * dey;
    c = (0, $kRAsQ.splitter) * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = (0, $kRAsQ.splitter) * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dex * cey;
    c = (0, $kRAsQ.splitter) * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = (0, $kRAsQ.splitter) * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$cd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$cd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    cd3 = _j + _i;
    bvirt = cd3 - _j;
    $30f9abfb67ab7c14$var$cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$cd[3] = cd3;
    s1 = dex * aey;
    c = (0, $kRAsQ.splitter) * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = (0, $kRAsQ.splitter) * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = aex * dey;
    c = (0, $kRAsQ.splitter) * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = (0, $kRAsQ.splitter) * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$da[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$da[1] = _0 - (_i + bvirt) + (bvirt - t1);
    da3 = _j + _i;
    bvirt = da3 - _j;
    $30f9abfb67ab7c14$var$da[2] = _j - (da3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$da[3] = da3;
    s1 = aex * cey;
    c = (0, $kRAsQ.splitter) * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = (0, $kRAsQ.splitter) * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cex * aey;
    c = (0, $kRAsQ.splitter) * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = (0, $kRAsQ.splitter) * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$ac[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$ac[1] = _0 - (_i + bvirt) + (bvirt - t1);
    ac3 = _j + _i;
    bvirt = ac3 - _j;
    $30f9abfb67ab7c14$var$ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$ac[3] = ac3;
    s1 = bex * dey;
    c = (0, $kRAsQ.splitter) * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = (0, $kRAsQ.splitter) * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dex * bey;
    c = (0, $kRAsQ.splitter) * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = (0, $kRAsQ.splitter) * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    $30f9abfb67ab7c14$var$bd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    $30f9abfb67ab7c14$var$bd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    bd3 = _j + _i;
    bvirt = bd3 - _j;
    $30f9abfb67ab7c14$var$bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);
    $30f9abfb67ab7c14$var$bd[3] = bd3;
    const finlen = (0, $kRAsQ.sum)((0, $kRAsQ.sum)((0, $kRAsQ.negate)($30f9abfb67ab7c14$var$liftadapt($30f9abfb67ab7c14$var$bc, $30f9abfb67ab7c14$var$cd, $30f9abfb67ab7c14$var$bd, dez, bez, -cez, aex, aey, aez, $30f9abfb67ab7c14$var$adet), $30f9abfb67ab7c14$var$adet), $30f9abfb67ab7c14$var$adet, $30f9abfb67ab7c14$var$liftadapt($30f9abfb67ab7c14$var$cd, $30f9abfb67ab7c14$var$da, $30f9abfb67ab7c14$var$ac, aez, cez, dez, bex, bey, bez, $30f9abfb67ab7c14$var$bdet), $30f9abfb67ab7c14$var$bdet, $30f9abfb67ab7c14$var$abdet), $30f9abfb67ab7c14$var$abdet, (0, $kRAsQ.sum)((0, $kRAsQ.negate)($30f9abfb67ab7c14$var$liftadapt($30f9abfb67ab7c14$var$da, $30f9abfb67ab7c14$var$ab, $30f9abfb67ab7c14$var$bd, bez, dez, aez, cex, cey, cez, $30f9abfb67ab7c14$var$cdet), $30f9abfb67ab7c14$var$cdet), $30f9abfb67ab7c14$var$cdet, $30f9abfb67ab7c14$var$liftadapt($30f9abfb67ab7c14$var$ab, $30f9abfb67ab7c14$var$bc, $30f9abfb67ab7c14$var$ac, cez, aez, -bez, dex, dey, dez, $30f9abfb67ab7c14$var$ddet), $30f9abfb67ab7c14$var$ddet, $30f9abfb67ab7c14$var$cddet), $30f9abfb67ab7c14$var$cddet, $30f9abfb67ab7c14$var$fin);
    let det = (0, $kRAsQ.estimate)(finlen, $30f9abfb67ab7c14$var$fin);
    let errbound = $30f9abfb67ab7c14$var$isperrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - aex;
    aextail = ax - (aex + bvirt) + (bvirt - ex);
    bvirt = ay - aey;
    aeytail = ay - (aey + bvirt) + (bvirt - ey);
    bvirt = az - aez;
    aeztail = az - (aez + bvirt) + (bvirt - ez);
    bvirt = bx - bex;
    bextail = bx - (bex + bvirt) + (bvirt - ex);
    bvirt = by - bey;
    beytail = by - (bey + bvirt) + (bvirt - ey);
    bvirt = bz - bez;
    beztail = bz - (bez + bvirt) + (bvirt - ez);
    bvirt = cx - cex;
    cextail = cx - (cex + bvirt) + (bvirt - ex);
    bvirt = cy - cey;
    ceytail = cy - (cey + bvirt) + (bvirt - ey);
    bvirt = cz - cez;
    ceztail = cz - (cez + bvirt) + (bvirt - ez);
    bvirt = dx - dex;
    dextail = dx - (dex + bvirt) + (bvirt - ex);
    bvirt = dy - dey;
    deytail = dy - (dey + bvirt) + (bvirt - ey);
    bvirt = dz - dez;
    deztail = dz - (dez + bvirt) + (bvirt - ez);
    if (aextail === 0 && aeytail === 0 && aeztail === 0 && bextail === 0 && beytail === 0 && beztail === 0 && cextail === 0 && ceytail === 0 && ceztail === 0 && dextail === 0 && deytail === 0 && deztail === 0) return det;
    errbound = $30f9abfb67ab7c14$var$isperrboundC * permanent + (0, $kRAsQ.resulterrbound) * Math.abs(det);
    const abeps = aex * beytail + bey * aextail - (aey * bextail + bex * aeytail);
    const bceps = bex * ceytail + cey * bextail - (bey * cextail + cex * beytail);
    const cdeps = cex * deytail + dey * cextail - (cey * dextail + dex * ceytail);
    const daeps = dex * aeytail + aey * dextail - (dey * aextail + aex * deytail);
    const aceps = aex * ceytail + cey * aextail - (aey * cextail + cex * aeytail);
    const bdeps = bex * deytail + dey * bextail - (bey * dextail + dex * beytail);
    det += (bex * bex + bey * bey + bez * bez) * (cez * daeps + dez * aceps + aez * cdeps + (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) * (aez * bceps - bez * aceps + cez * abeps + (aeztail * bc3 - beztail * ac3 + ceztail * ab3)) - ((aex * aex + aey * aey + aez * aez) * (bez * cdeps - cez * bdeps + dez * bceps + (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) * (dez * abeps + aez * bdeps + bez * daeps + (deztail * ab3 + aeztail * bd3 + beztail * da3))) + 2 * ((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) + (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3) - ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) + (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));
    if (det >= errbound || -det >= errbound) return det;
    return $30f9abfb67ab7c14$var$insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
}
function $30f9abfb67ab7c14$export$7846ecd8d3a5d1ac(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {
    const aex = ax - ex;
    const bex = bx - ex;
    const cex = cx - ex;
    const dex = dx - ex;
    const aey = ay - ey;
    const bey = by - ey;
    const cey = cy - ey;
    const dey = dy - ey;
    const aez = az - ez;
    const bez = bz - ez;
    const cez = cz - ez;
    const dez = dz - ez;
    const aexbey = aex * bey;
    const bexaey = bex * aey;
    const ab = aexbey - bexaey;
    const bexcey = bex * cey;
    const cexbey = cex * bey;
    const bc = bexcey - cexbey;
    const cexdey = cex * dey;
    const dexcey = dex * cey;
    const cd = cexdey - dexcey;
    const dexaey = dex * aey;
    const aexdey = aex * dey;
    const da = dexaey - aexdey;
    const aexcey = aex * cey;
    const cexaey = cex * aey;
    const ac = aexcey - cexaey;
    const bexdey = bex * dey;
    const dexbey = dex * bey;
    const bd = bexdey - dexbey;
    const alift = aex * aex + aey * aey + aez * aez;
    const blift = bex * bex + bey * bey + bez * bez;
    const clift = cex * cex + cey * cey + cez * cez;
    const dlift = dex * dex + dey * dey + dez * dez;
    const det = clift * (dez * ab + aez * bd + bez * da) - dlift * (aez * bc - bez * ac + cez * ab) + (alift * (bez * cd - cez * bd + dez * bc) - blift * (cez * da + dez * ac + aez * cd));
    const aezplus = Math.abs(aez);
    const bezplus = Math.abs(bez);
    const cezplus = Math.abs(cez);
    const dezplus = Math.abs(dez);
    const aexbeyplus = Math.abs(aexbey) + Math.abs(bexaey);
    const bexceyplus = Math.abs(bexcey) + Math.abs(cexbey);
    const cexdeyplus = Math.abs(cexdey) + Math.abs(dexcey);
    const dexaeyplus = Math.abs(dexaey) + Math.abs(aexdey);
    const aexceyplus = Math.abs(aexcey) + Math.abs(cexaey);
    const bexdeyplus = Math.abs(bexdey) + Math.abs(dexbey);
    const permanent = (cexdeyplus * bezplus + bexdeyplus * cezplus + bexceyplus * dezplus) * alift + (dexaeyplus * cezplus + aexceyplus * dezplus + cexdeyplus * aezplus) * blift + (aexbeyplus * dezplus + bexdeyplus * aezplus + dexaeyplus * bezplus) * clift + (bexceyplus * aezplus + aexceyplus * bezplus + aexbeyplus * cezplus) * dlift;
    const errbound = $30f9abfb67ab7c14$var$isperrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return -$30f9abfb67ab7c14$var$insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);
}
function $30f9abfb67ab7c14$export$11235b985c819946(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {
    const aex = pax - pex;
    const bex = pbx - pex;
    const cex = pcx - pex;
    const dex = pdx - pex;
    const aey = pay - pey;
    const bey = pby - pey;
    const cey = pcy - pey;
    const dey = pdy - pey;
    const aez = paz - pez;
    const bez = pbz - pez;
    const cez = pcz - pez;
    const dez = pdz - pez;
    const ab = aex * bey - bex * aey;
    const bc = bex * cey - cex * bey;
    const cd = cex * dey - dex * cey;
    const da = dex * aey - aex * dey;
    const ac = aex * cey - cex * aey;
    const bd = bex * dey - dex * bey;
    const abc = aez * bc - bez * ac + cez * ab;
    const bcd = bez * cd - cez * bd + dez * bc;
    const cda = cez * da + dez * ac + aez * cd;
    const dab = dez * ab + aez * bd + bez * da;
    const alift = aex * aex + aey * aey + aez * aez;
    const blift = bex * bex + bey * bey + bez * bez;
    const clift = cex * cex + cey * cey + cez * cez;
    const dlift = dex * dex + dey * dey + dez * dez;
    return clift * dab - dlift * abc + (alift * bcd - blift * cda);
}

});



parcelRegister("ch5ES", function(module, exports) {

$parcel$export(module.exports, "default", () => $8efb762b6e76269c$export$2e2bcd8739ae039);
const $8efb762b6e76269c$var$epsilon = 1e-6;
class $8efb762b6e76269c$export$2e2bcd8739ae039 {
    constructor(){
        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
    }
    moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
    }
    closePath() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
        }
    }
    lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
    }
    arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > $8efb762b6e76269c$var$epsilon || Math.abs(this._y1 - y0) > $8efb762b6e76269c$var$epsilon) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
    }
    rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
    }
    value() {
        return this._ || null;
    }
}

});

parcelRegister("hgr11", function(module, exports) {

$parcel$export(module.exports, "default", () => $c918e306f7fa6cf8$export$2e2bcd8739ae039);
class $c918e306f7fa6cf8$export$2e2bcd8739ae039 {
    constructor(){
        this._ = [];
    }
    moveTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    closePath() {
        this._.push(this._[0].slice());
    }
    lineTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    value() {
        return this._.length ? this._ : null;
    }
}

});

parcelRegister("65iDn", function(module, exports) {

$parcel$export(module.exports, "default", () => $46e1aa13ab7c4d38$export$2e2bcd8739ae039);

var $ch5ES = parcelRequire("ch5ES");

var $hgr11 = parcelRequire("hgr11");
class $46e1aa13ab7c4d38$export$2e2bcd8739ae039 {
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [
        0,
        0,
        960,
        500
    ]){
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
    }
    update() {
        this.delaunay.update();
        this._init();
        return this;
    }
    _init() {
        const { delaunay: { points: points, hull: hull, triangles: triangles }, vectors: vectors } = this;
        let bx, by; // lazily computed barycenter of the hull
        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for(let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2){
            const t1 = triangles[i] * 2;
            const t2 = triangles[i + 1] * 2;
            const t3 = triangles[i + 2] * 2;
            const x1 = points[t1];
            const y1 = points[t1 + 1];
            const x2 = points[t2];
            const y2 = points[t2 + 1];
            const x3 = points[t3];
            const y3 = points[t3 + 1];
            const dx = x2 - x1;
            const dy = y2 - y1;
            const ex = x3 - x1;
            const ey = y3 - y1;
            const ab = (dx * ey - dy * ex) * 2;
            if (Math.abs(ab) < 1e-9) {
                // For a degenerate triangle, the circumcenter is at the infinity, in a
                // direction orthogonal to the halfedge and away from the “center” of
                // the diagram <bx, by>, defined as the hull’s barycenter.
                if (bx === undefined) {
                    bx = by = 0;
                    for (const i of hull)bx += points[i * 2], by += points[i * 2 + 1];
                    bx /= hull.length, by /= hull.length;
                }
                const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);
                x = (x1 + x3) / 2 - a * ey;
                y = (y1 + y3) / 2 + a * ex;
            } else {
                const d = 1 / ab;
                const bl = dx * dx + dy * dy;
                const cl = ex * ex + ey * ey;
                x = x1 + (ey * bl - dy * cl) * d;
                y = y1 + (dx * cl - ex * bl) * d;
            }
            circumcenters[j] = x;
            circumcenters[j + 1] = y;
        }
        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x1 = points[2 * h];
        let y0, y1 = points[2 * h + 1];
        vectors.fill(0);
        for(let i = 0; i < hull.length; ++i){
            h = hull[i];
            p0 = p1, x0 = x1, y0 = y1;
            p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
            vectors[p0 + 2] = vectors[p1] = y0 - y1;
            vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
    }
    render(context) {
        const buffer = context == null ? context = new (0, $ch5ES.default) : undefined;
        const { delaunay: { halfedges: halfedges, inedges: inedges, hull: hull }, circumcenters: circumcenters, vectors: vectors } = this;
        if (hull.length <= 1) return null;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = Math.floor(i / 3) * 2;
            const tj = Math.floor(j / 3) * 2;
            const xi = circumcenters[ti];
            const yi = circumcenters[ti + 1];
            const xj = circumcenters[tj];
            const yj = circumcenters[tj + 1];
            this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for(let i = 0; i < hull.length; ++i){
            h0 = h1, h1 = hull[i];
            const t = Math.floor(inedges[h1] / 3) * 2;
            const x = circumcenters[t];
            const y = circumcenters[t + 1];
            const v = h0 * 4;
            const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
            if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
    }
    renderBounds(context) {
        const buffer = context == null ? context = new (0, $ch5ES.default) : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
    }
    renderCell(i, context) {
        const buffer = context == null ? context = new (0, $ch5ES.default) : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while(points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)n -= 2;
        for(let i = 2; i < n; i += 2)if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *cellPolygons() {
        const { delaunay: { points: points } } = this;
        for(let i = 0, n = points.length / 2; i < n; ++i){
            const cell = this.cellPolygon(i);
            if (cell) cell.index = i, yield cell;
        }
    }
    cellPolygon(i) {
        const polygon = new (0, $hgr11.default);
        this.renderCell(i, polygon);
        return polygon.value();
    }
    _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
            context.moveTo(S[0], S[1]);
            context.lineTo(S[2], S[3]);
        }
    }
    contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
    }
    *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)){
            const cj = this._clip(j);
            // find the common edge
            if (cj) loop: for(let ai = 0, li = ci.length; ai < li; ai += 2){
                for(let aj = 0, lj = cj.length; aj < lj; aj += 2)if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
                    yield j;
                    break loop;
                }
            }
        }
    }
    _cell(i) {
        const { circumcenters: circumcenters, delaunay: { inedges: inedges, halfedges: halfedges, triangles: triangles } } = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
            const t = Math.floor(e / 3);
            points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
        }while (e !== e0 && e !== -1);
        return points;
    }
    _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        const points = this._cell(i);
        if (points === null) return null;
        const { vectors: V } = this;
        const v = i * 4;
        return this._simplify(V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points));
    }
    _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1 = 0;
        for(let j = 0; j < n; j += 2){
            x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
            c0 = c1, c1 = this._regioncode(x1, y1);
            if (c0 === 0 && c1 === 0) {
                e0 = e1, e1 = 0;
                if (P) P.push(x1, y1);
                else P = [
                    x1,
                    y1
                ];
            } else {
                let S, sx0, sy0, sx1, sy1;
                if (c0 === 0) {
                    if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
                    [sx0, sy0, sx1, sy1] = S;
                } else {
                    if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
                    [sx1, sy1, sx0, sy0] = S;
                    e0 = e1, e1 = this._edgecode(sx0, sy0);
                    if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                    if (P) P.push(sx0, sy0);
                    else P = [
                        sx0,
                        sy0
                    ];
                }
                e0 = e1, e1 = this._edgecode(sx1, sy1);
                if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                if (P) P.push(sx1, sy1);
                else P = [
                    sx1,
                    sy1
                ];
            }
        }
        if (P) {
            e0 = e1, e1 = this._edgecode(P[0], P[1]);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        return P;
    }
    _clipSegment(x0, y0, x1, y1, c0, c1) {
        // for more robustness, always consider the segment in the same order
        const flip = c0 < c1;
        if (flip) [x0, y0, x1, y1, c0, c1] = [
            x1,
            y1,
            x0,
            y0,
            c1,
            c0
        ];
        while(true){
            if (c0 === 0 && c1 === 0) return flip ? [
                x1,
                y1,
                x0,
                y0
            ] : [
                x0,
                y0,
                x1,
                y1
            ];
            if (c0 & c1) return null;
            let x, y, c = c0 || c1;
            if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
            else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
            else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
            else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
            if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
            else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
    }
    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) for(let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2){
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
        }
        else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) P = [
            this.xmin,
            this.ymin,
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax
        ];
        return P;
    }
    _edge(i, e0, e1, P, j) {
        while(e0 !== e1){
            let x, y;
            switch(e0){
                case 5:
                    e0 = 4;
                    continue; // top-left
                case 4:
                    e0 = 6, x = this.xmax, y = this.ymin;
                    break; // top
                case 6:
                    e0 = 2;
                    continue; // top-right
                case 2:
                    e0 = 10, x = this.xmax, y = this.ymax;
                    break; // right
                case 10:
                    e0 = 8;
                    continue; // bottom-right
                case 8:
                    e0 = 9, x = this.xmin, y = this.ymax;
                    break; // bottom
                case 9:
                    e0 = 1;
                    continue; // bottom-left
                case 1:
                    e0 = 5, x = this.xmin, y = this.ymin;
                    break; // left
            }
            // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are
            // undefined, the conditional statement will be executed.
            if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) P.splice(j, 0, x, y), j += 2;
        }
        return j;
    }
    _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) {
            if (y0 <= this.ymin) return null;
            if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) {
            if (y0 >= this.ymax) return null;
            if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) {
            if (x0 >= this.xmax) return null;
            if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) {
            if (x0 <= this.xmin) return null;
            if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [
            x,
            y
        ];
    }
    _edgecode(x, y) {
        return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
    }
    _regioncode(x, y) {
        return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
    }
    _simplify(P) {
        if (P && P.length > 4) {
            for(let i = 0; i < P.length; i += 2){
                const j = (i + 2) % P.length, k = (i + 4) % P.length;
                if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i -= 2;
            }
            if (!P.length) P = null;
        }
        return P;
    }
}

});



parcelRegister("7GfHa", function(module, exports) {

$parcel$export(module.exports, "wordcloud", () => $5978a1647eee8938$export$ed2bb7e31e92dd75);

var $bWlF6 = parcelRequire("bWlF6");

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");

var $1UqgZ = parcelRequire("1UqgZ");

var $7Par0 = parcelRequire("7Par0");
/*
Copyright (c) 2013, Jason Davies.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  * The name Jason Davies may not be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ // Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
var $5978a1647eee8938$var$cloudRadians = Math.PI / 180, $5978a1647eee8938$var$cw = 64, $5978a1647eee8938$var$ch = 2048;
function $5978a1647eee8938$var$cloud() {
    var size = [
        256,
        256
    ], text, font, fontSize, fontStyle, fontWeight, rotate, padding, spiral = $5978a1647eee8938$var$archimedeanSpiral, words = [], random = Math.random, cloud = {};
    cloud.layout = function() {
        var contextAndRatio = getContext((0, $bWlF6.canvas)()), board = $5978a1647eee8938$var$zeroArray((size[0] >> 5) * size[1]), bounds = null, n = words.length, i = -1, tags = [], data = words.map((d)=>({
                text: text(d),
                font: font(d),
                style: fontStyle(d),
                weight: fontWeight(d),
                rotate: rotate(d),
                size: ~~(fontSize(d) + 1e-14),
                padding: padding(d),
                xoff: 0,
                yoff: 0,
                x1: 0,
                y1: 0,
                x0: 0,
                y0: 0,
                hasText: false,
                sprite: null,
                datum: d
            })).sort((a, b)=>b.size - a.size);
        while(++i < n){
            var d = data[i];
            d.x = size[0] * (random() + .5) >> 1;
            d.y = size[1] * (random() + .5) >> 1;
            $5978a1647eee8938$var$cloudSprite(contextAndRatio, d, data, i);
            if (d.hasText && place(board, d, bounds)) {
                tags.push(d);
                if (bounds) $5978a1647eee8938$var$cloudBounds(bounds, d);
                else bounds = [
                    {
                        x: d.x + d.x0,
                        y: d.y + d.y0
                    },
                    {
                        x: d.x + d.x1,
                        y: d.y + d.y1
                    }
                ];
                // Temporary hack
                d.x -= size[0] >> 1;
                d.y -= size[1] >> 1;
            }
        }
        return tags;
    };
    function getContext(canvas) {
        canvas.width = canvas.height = 1;
        var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
        canvas.width = ($5978a1647eee8938$var$cw << 5) / ratio;
        canvas.height = $5978a1647eee8938$var$ch / ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = context.strokeStyle = "red";
        context.textAlign = "center";
        return {
            context: context,
            ratio: ratio
        };
    }
    function place(board, tag, bounds) {
        var startX = tag.x, startY = tag.y, maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]), s = spiral(size), dt = random() < .5 ? 1 : -1, t = -dt, dxdy, dx, dy;
        while(dxdy = s(t += dt)){
            dx = ~~dxdy[0];
            dy = ~~dxdy[1];
            if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
            tag.x = startX + dx;
            tag.y = startY + dy;
            if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
            // TODO only check for collisions within current bounds.
            if (!bounds || !$5978a1647eee8938$var$cloudCollide(tag, board, size[0])) {
                if (!bounds || $5978a1647eee8938$var$collideRects(tag, bounds)) {
                    var sprite = tag.sprite, w = tag.width >> 5, sw = size[0] >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;
                    for(var j = 0; j < h; j++){
                        last = 0;
                        for(var i = 0; i <= w; i++)board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
                        x += sw;
                    }
                    tag.sprite = null;
                    return true;
                }
            }
        }
        return false;
    }
    cloud.words = function(_) {
        if (arguments.length) {
            words = _;
            return cloud;
        } else return words;
    };
    cloud.size = function(_) {
        if (arguments.length) {
            size = [
                +_[0],
                +_[1]
            ];
            return cloud;
        } else return size;
    };
    cloud.font = function(_) {
        if (arguments.length) {
            font = $5978a1647eee8938$var$functor(_);
            return cloud;
        } else return font;
    };
    cloud.fontStyle = function(_) {
        if (arguments.length) {
            fontStyle = $5978a1647eee8938$var$functor(_);
            return cloud;
        } else return fontStyle;
    };
    cloud.fontWeight = function(_) {
        if (arguments.length) {
            fontWeight = $5978a1647eee8938$var$functor(_);
            return cloud;
        } else return fontWeight;
    };
    cloud.rotate = function(_) {
        if (arguments.length) {
            rotate = $5978a1647eee8938$var$functor(_);
            return cloud;
        } else return rotate;
    };
    cloud.text = function(_) {
        if (arguments.length) {
            text = $5978a1647eee8938$var$functor(_);
            return cloud;
        } else return text;
    };
    cloud.spiral = function(_) {
        if (arguments.length) {
            spiral = $5978a1647eee8938$var$spirals[_] || _;
            return cloud;
        } else return spiral;
    };
    cloud.fontSize = function(_) {
        if (arguments.length) {
            fontSize = $5978a1647eee8938$var$functor(_);
            return cloud;
        } else return fontSize;
    };
    cloud.padding = function(_) {
        if (arguments.length) {
            padding = $5978a1647eee8938$var$functor(_);
            return cloud;
        } else return padding;
    };
    cloud.random = function(_) {
        if (arguments.length) {
            random = _;
            return cloud;
        } else return random;
    };
    return cloud;
}
// Fetches a monochrome sprite bitmap for the specified text.
// Load in batches for speed.
function $5978a1647eee8938$var$cloudSprite(contextAndRatio, d, data, di) {
    if (d.sprite) return;
    var c = contextAndRatio.context, ratio = contextAndRatio.ratio;
    c.clearRect(0, 0, ($5978a1647eee8938$var$cw << 5) / ratio, $5978a1647eee8938$var$ch / ratio);
    var x = 0, y = 0, maxh = 0, n = data.length, w, w32, h, i, j;
    --di;
    while(++di < n){
        d = data[di];
        c.save();
        c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
        w = c.measureText(d.text + "m").width * ratio;
        h = d.size << 1;
        if (d.rotate) {
            var sr = Math.sin(d.rotate * $5978a1647eee8938$var$cloudRadians), cr = Math.cos(d.rotate * $5978a1647eee8938$var$cloudRadians), wcr = w * cr, wsr = w * sr, hcr = h * cr, hsr = h * sr;
            w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
            h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
        } else w = w + 0x1f >> 5 << 5;
        if (h > maxh) maxh = h;
        if (x + w >= $5978a1647eee8938$var$cw << 5) {
            x = 0;
            y += maxh;
            maxh = 0;
        }
        if (y + h >= $5978a1647eee8938$var$ch) break;
        c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
        if (d.rotate) c.rotate(d.rotate * $5978a1647eee8938$var$cloudRadians);
        c.fillText(d.text, 0, 0);
        if (d.padding) {
            c.lineWidth = 2 * d.padding;
            c.strokeText(d.text, 0, 0);
        }
        c.restore();
        d.width = w;
        d.height = h;
        d.xoff = x;
        d.yoff = y;
        d.x1 = w >> 1;
        d.y1 = h >> 1;
        d.x0 = -d.x1;
        d.y0 = -d.y1;
        d.hasText = true;
        x += w;
    }
    var pixels = c.getImageData(0, 0, ($5978a1647eee8938$var$cw << 5) / ratio, $5978a1647eee8938$var$ch / ratio).data, sprite = [];
    while(--di >= 0){
        d = data[di];
        if (!d.hasText) continue;
        w = d.width;
        w32 = w >> 5;
        h = d.y1 - d.y0;
        // Zero the buffer
        for(i = 0; i < h * w32; i++)sprite[i] = 0;
        x = d.xoff;
        if (x == null) return;
        y = d.yoff;
        var seen = 0, seenRow = -1;
        for(j = 0; j < h; j++){
            for(i = 0; i < w; i++){
                var k = w32 * j + (i >> 5), m = pixels[(y + j) * ($5978a1647eee8938$var$cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
                sprite[k] |= m;
                seen |= m;
            }
            if (seen) seenRow = j;
            else {
                d.y0++;
                h--;
                j--;
                y++;
            }
        }
        d.y1 = d.y0 + seenRow;
        d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
    }
}
// Use mask-based collision detection.
function $5978a1647eee8938$var$cloudCollide(tag, board, sw) {
    sw >>= 5;
    var sprite = tag.sprite, w = tag.width >> 5, lx = tag.x - (w << 4), sx = lx & 0x7f, msx = 32 - sx, h = tag.y1 - tag.y0, x = (tag.y + tag.y0) * sw + (lx >> 5), last;
    for(var j = 0; j < h; j++){
        last = 0;
        for(var i = 0; i <= w; i++){
            if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
        }
        x += sw;
    }
    return false;
}
function $5978a1647eee8938$var$cloudBounds(bounds, d) {
    var b0 = bounds[0], b1 = bounds[1];
    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
}
function $5978a1647eee8938$var$collideRects(a, b) {
    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
}
function $5978a1647eee8938$var$archimedeanSpiral(size) {
    var e = size[0] / size[1];
    return function(t) {
        return [
            e * (t *= .1) * Math.cos(t),
            t * Math.sin(t)
        ];
    };
}
function $5978a1647eee8938$var$rectangularSpiral(size) {
    var dy = 4, dx = dy * size[0] / size[1], x = 0, y = 0;
    return function(t) {
        var sign = t < 0 ? -1 : 1;
        // See triangular numbers: T_n = n * (n + 1) / 2.
        switch(Math.sqrt(1 + 4 * sign * t) - sign & 3){
            case 0:
                x += dx;
                break;
            case 1:
                y += dy;
                break;
            case 2:
                x -= dx;
                break;
            default:
                y -= dy;
                break;
        }
        return [
            x,
            y
        ];
    };
}
// TODO reuse arrays?
function $5978a1647eee8938$var$zeroArray(n) {
    var a = [], i = -1;
    while(++i < n)a[i] = 0;
    return a;
}
function $5978a1647eee8938$var$functor(d) {
    return typeof d === "function" ? d : function() {
        return d;
    };
}
var $5978a1647eee8938$var$spirals = {
    archimedean: $5978a1647eee8938$var$archimedeanSpiral,
    rectangular: $5978a1647eee8938$var$rectangularSpiral
};
const $5978a1647eee8938$var$Output = [
    "x",
    "y",
    "font",
    "fontSize",
    "fontStyle",
    "fontWeight",
    "angle"
];
const $5978a1647eee8938$var$Params = [
    "text",
    "font",
    "rotate",
    "fontSize",
    "fontStyle",
    "fontWeight"
];
function $5978a1647eee8938$export$ed2bb7e31e92dd75(params) {
    (0, $4jOgW.Transform).call(this, $5978a1647eee8938$var$cloud(), params);
}
$5978a1647eee8938$export$ed2bb7e31e92dd75.Definition = {
    "type": "Wordcloud",
    "metadata": {
        "modifies": true
    },
    "params": [
        {
            "name": "size",
            "type": "number",
            "array": true,
            "length": 2
        },
        {
            "name": "font",
            "type": "string",
            "expr": true,
            "default": "sans-serif"
        },
        {
            "name": "fontStyle",
            "type": "string",
            "expr": true,
            "default": "normal"
        },
        {
            "name": "fontWeight",
            "type": "string",
            "expr": true,
            "default": "normal"
        },
        {
            "name": "fontSize",
            "type": "number",
            "expr": true,
            "default": 14
        },
        {
            "name": "fontSizeRange",
            "type": "number",
            "array": "nullable",
            "default": [
                10,
                50
            ]
        },
        {
            "name": "rotate",
            "type": "number",
            "expr": true,
            "default": 0
        },
        {
            "name": "text",
            "type": "field"
        },
        {
            "name": "spiral",
            "type": "string",
            "values": [
                "archimedean",
                "rectangular"
            ]
        },
        {
            "name": "padding",
            "type": "number",
            "expr": true
        },
        {
            "name": "as",
            "type": "string",
            "array": true,
            "length": 7,
            "default": $5978a1647eee8938$var$Output
        }
    ]
};
(0, $4SWbq.inherits)($5978a1647eee8938$export$ed2bb7e31e92dd75, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (_.size && !(_.size[0] && _.size[1])) (0, $4SWbq.error)("Wordcloud size dimensions must be non-zero.");
        function modp(param) {
            const p = _[param];
            return (0, $4SWbq.isFunction)(p) && pulse.modified(p.fields);
        }
        const mod = _.modified();
        if (!(mod || pulse.changed(pulse.ADD_REM) || $5978a1647eee8938$var$Params.some(modp))) return;
        const data = pulse.materialize(pulse.SOURCE).source, layout = this.value, as = _.as || $5978a1647eee8938$var$Output;
        let fontSize = _.fontSize || 14, range;
        (0, $4SWbq.isFunction)(fontSize) ? range = _.fontSizeRange : fontSize = (0, $4SWbq.constant)(fontSize);
        // create font size scaling function as needed
        if (range) {
            const fsize = fontSize, sizeScale = (0, $1UqgZ.scale)("sqrt")().domain((0, $4SWbq.extent)(data, fsize)).range(range);
            fontSize = (x)=>sizeScale(fsize(x));
        }
        data.forEach((t)=>{
            t[as[0]] = NaN;
            t[as[1]] = NaN;
            t[as[3]] = 0;
        });
        // configure layout
        const words = layout.words(data).text(_.text).size(_.size || [
            500,
            500
        ]).padding(_.padding || 1).spiral(_.spiral || "archimedean").rotate(_.rotate || 0).font(_.font || "sans-serif").fontStyle(_.fontStyle || "normal").fontWeight(_.fontWeight || "normal").fontSize(fontSize).random((0, $7Par0.random)).layout();
        const size = layout.size(), dx = size[0] >> 1, dy = size[1] >> 1, n = words.length;
        for(let i = 0, w, t; i < n; ++i){
            w = words[i];
            t = w.datum;
            t[as[0]] = w.x + dx;
            t[as[1]] = w.y + dy;
            t[as[2]] = w.font;
            t[as[3]] = w.size;
            t[as[4]] = w.style;
            t[as[5]] = w.weight;
            t[as[6]] = w.rotate;
        }
        return pulse.reflow(mod).modifies(as);
    }
});

});

parcelRegister("hobCQ", function(module, exports) {

$parcel$export(module.exports, "crossfilter", () => $ca8db225db996601$export$a6bb4be5fa63a999);
$parcel$export(module.exports, "resolvefilter", () => $ca8db225db996601$export$797181223857512c);

var $jrbsQ = parcelRequire("jrbsQ");
var $fkgRy = parcelRequire("fkgRy");

var $4jOgW = parcelRequire("4jOgW");

var $4SWbq = parcelRequire("4SWbq");
const $ca8db225db996601$var$array8 = (n)=>new Uint8Array(n);
const $ca8db225db996601$var$array16 = (n)=>new Uint16Array(n);
const $ca8db225db996601$var$array32 = (n)=>new Uint32Array(n);
/**
 * Maintains CrossFilter state.
 */ function $ca8db225db996601$var$Bitmaps() {
    let width = 8, data = [], seen = $ca8db225db996601$var$array32(0), curr = $ca8db225db996601$var$array(0, width), prev = $ca8db225db996601$var$array(0, width);
    return {
        data: ()=>data,
        seen: ()=>seen = $ca8db225db996601$var$lengthen(seen, data.length),
        add (array) {
            for(let i = 0, j = data.length, n = array.length, t; i < n; ++i){
                t = array[i];
                t._index = j++;
                data.push(t);
            }
        },
        remove (num, map) {
            // map: index -> boolean (true => remove)
            const n = data.length, copy = Array(n - num), reindex = data; // reuse old data array for index map
            let t, i, j;
            // seek forward to first removal
            for(i = 0; !map[i] && i < n; ++i){
                copy[i] = data[i];
                reindex[i] = i;
            }
            // condense arrays
            for(j = i; i < n; ++i){
                t = data[i];
                if (!map[i]) {
                    reindex[i] = j;
                    curr[j] = curr[i];
                    prev[j] = prev[i];
                    copy[j] = t;
                    t._index = j++;
                } else reindex[i] = -1;
                curr[i] = 0; // clear unused bits
            }
            data = copy;
            return reindex;
        },
        size: ()=>data.length,
        curr: ()=>curr,
        prev: ()=>prev,
        reset: (k)=>prev[k] = curr[k],
        all: ()=>width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,
        set (k, one) {
            curr[k] |= one;
        },
        clear (k, one) {
            curr[k] &= ~one;
        },
        resize (n, m) {
            const k = curr.length;
            if (n > k || m > width) {
                width = Math.max(m, width);
                curr = $ca8db225db996601$var$array(n, width, curr);
                prev = $ca8db225db996601$var$array(n, width);
            }
        }
    };
}
function $ca8db225db996601$var$lengthen(array, length, copy) {
    if (array.length >= length) return array;
    copy = copy || new array.constructor(length);
    copy.set(array);
    return copy;
}
function $ca8db225db996601$var$array(n, m, array) {
    const copy = (m < 0x101 ? $ca8db225db996601$var$array8 : m < 0x10001 ? $ca8db225db996601$var$array16 : $ca8db225db996601$var$array32)(n);
    if (array) copy.set(array);
    return copy;
}
function $ca8db225db996601$var$Dimension(index, i, query) {
    const bit = 1 << i;
    return {
        one: bit,
        zero: ~bit,
        range: query.slice(),
        bisect: index.bisect,
        index: index.index,
        size: index.size,
        onAdd (added, curr) {
            const dim = this, range = dim.bisect(dim.range, added.value), idx = added.index, lo = range[0], hi = range[1], n1 = idx.length;
            let i;
            for(i = 0; i < lo; ++i)curr[idx[i]] |= bit;
            for(i = hi; i < n1; ++i)curr[idx[i]] |= bit;
            return dim;
        }
    };
}
/**
 * Maintains a list of values, sorted by key.
 */ function $ca8db225db996601$var$SortedIndex() {
    let index = $ca8db225db996601$var$array32(0), value = [], size = 0;
    function insert(key, data, base) {
        if (!data.length) return [];
        const n0 = size, n1 = data.length, addi = $ca8db225db996601$var$array32(n1);
        let addv = Array(n1), oldv, oldi, i;
        for(i = 0; i < n1; ++i){
            addv[i] = key(data[i]);
            addi[i] = i;
        }
        addv = $ca8db225db996601$var$sort(addv, addi);
        if (n0) {
            oldv = value;
            oldi = index;
            value = Array(n0 + n1);
            index = $ca8db225db996601$var$array32(n0 + n1);
            $ca8db225db996601$var$merge(base, oldv, oldi, n0, addv, addi, n1, value, index);
        } else {
            if (base > 0) for(i = 0; i < n1; ++i)addi[i] += base;
            value = addv;
            index = addi;
        }
        size = n0 + n1;
        return {
            index: addi,
            value: addv
        };
    }
    function remove(num, map) {
        // map: index -> remove
        const n = size;
        let idx, i, j;
        // seek forward to first removal
        for(i = 0; !map[index[i]] && i < n; ++i);
        // condense index and value arrays
        for(j = i; i < n; ++i)if (!map[idx = index[i]]) {
            index[j] = idx;
            value[j] = value[i];
            ++j;
        }
        size = n - num;
    }
    function reindex(map) {
        for(let i = 0, n = size; i < n; ++i)index[i] = map[index[i]];
    }
    function bisect(range, array) {
        let n;
        if (array) n = array.length;
        else {
            array = value;
            n = size;
        }
        return [
            (0, $jrbsQ.bisectLeft)(array, range[0], 0, n),
            (0, $jrbsQ.bisectRight)(array, range[1], 0, n)
        ];
    }
    return {
        insert: insert,
        remove: remove,
        bisect: bisect,
        reindex: reindex,
        index: ()=>index,
        size: ()=>size
    };
}
function $ca8db225db996601$var$sort(values, index) {
    values.sort.call(index, (a, b)=>{
        const x = values[a], y = values[b];
        return x < y ? -1 : x > y ? 1 : 0;
    });
    return (0, $fkgRy.default)(values, index);
}
function $ca8db225db996601$var$merge(base, value0, index0, n0, value1, index1, n1, value, index) {
    let i0 = 0, i1 = 0, i;
    for(i = 0; i0 < n0 && i1 < n1; ++i)if (value0[i0] < value1[i1]) {
        value[i] = value0[i0];
        index[i] = index0[i0++];
    } else {
        value[i] = value1[i1];
        index[i] = index1[i1++] + base;
    }
    for(; i0 < n0; ++i0, ++i){
        value[i] = value0[i0];
        index[i] = index0[i0];
    }
    for(; i1 < n1; ++i1, ++i){
        value[i] = value1[i1];
        index[i] = index1[i1] + base;
    }
}
/**
 * An indexed multi-dimensional filter.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
 * @param {Array} params.query - An array of per-dimension range queries.
 */ function $ca8db225db996601$export$a6bb4be5fa63a999(params) {
    (0, $4jOgW.Transform).call(this, $ca8db225db996601$var$Bitmaps(), params);
    this._indices = null;
    this._dims = null;
}
$ca8db225db996601$export$a6bb4be5fa63a999.Definition = {
    "type": "CrossFilter",
    "metadata": {},
    "params": [
        {
            "name": "fields",
            "type": "field",
            "array": true,
            "required": true
        },
        {
            "name": "query",
            "type": "array",
            "array": true,
            "required": true,
            "content": {
                "type": "number",
                "array": true,
                "length": 2
            }
        }
    ]
};
(0, $4SWbq.inherits)($ca8db225db996601$export$a6bb4be5fa63a999, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        if (!this._dims) return this.init(_, pulse);
        else {
            var init = _.modified("fields") || _.fields.some((f)=>pulse.modified(f.fields));
            return init ? this.reinit(_, pulse) : this.eval(_, pulse);
        }
    },
    init (_, pulse) {
        const fields = _.fields, query = _.query, indices = this._indices = {}, dims = this._dims = [], m = query.length;
        let i = 0, key, index;
        // instantiate indices and dimensions
        for(; i < m; ++i){
            key = fields[i].fname;
            index = indices[key] || (indices[key] = $ca8db225db996601$var$SortedIndex());
            dims.push($ca8db225db996601$var$Dimension(index, i, query[i]));
        }
        return this.eval(_, pulse);
    },
    reinit (_, pulse) {
        const output = pulse.materialize().fork(), fields = _.fields, query = _.query, indices = this._indices, dims = this._dims, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), out = output.rem = output.add, mod = output.mod, m = query.length, adds = {};
        let add, index, key, mods, remMap, modMap, i, n, f;
        // set prev to current state
        prev.set(curr);
        // if pulse has remove tuples, process them first
        if (pulse.rem.length) remMap = this.remove(_, pulse, output);
        // if pulse has added tuples, add them to state
        if (pulse.add.length) bits.add(pulse.add);
        // if pulse has modified tuples, create an index map
        if (pulse.mod.length) {
            modMap = {};
            for(mods = pulse.mod, i = 0, n = mods.length; i < n; ++i)modMap[mods[i]._index] = 1;
        }
        // re-initialize indices as needed, update curr bitmap
        for(i = 0; i < m; ++i){
            f = fields[i];
            if (!dims[i] || _.modified("fields", i) || pulse.modified(f.fields)) {
                key = f.fname;
                if (!(add = adds[key])) {
                    indices[key] = index = $ca8db225db996601$var$SortedIndex();
                    adds[key] = add = index.insert(f, pulse.source, 0);
                }
                dims[i] = $ca8db225db996601$var$Dimension(index, i, query[i]).onAdd(add, curr);
            }
        }
        // visit each tuple
        // if filter state changed, push index to add/rem
        // else if in mod and passes a filter, push index to mod
        for(i = 0, n = bits.data().length; i < n; ++i){
            if (remMap[i]) continue;
            else if (prev[i] !== curr[i]) // add if state changed
            out.push(i);
            else if (modMap[i] && curr[i] !== all) // otherwise, pass mods through
            mod.push(i);
        }
        bits.mask = (1 << m) - 1;
        return output;
    },
    eval (_, pulse) {
        const output = pulse.materialize().fork(), m = this._dims.length;
        let mask = 0;
        if (pulse.rem.length) {
            this.remove(_, pulse, output);
            mask |= (1 << m) - 1;
        }
        if (_.modified("query") && !_.modified("fields")) mask |= this.update(_, pulse, output);
        if (pulse.add.length) {
            this.insert(_, pulse, output);
            mask |= (1 << m) - 1;
        }
        if (pulse.mod.length) {
            this.modify(pulse, output);
            mask |= (1 << m) - 1;
        }
        this.value.mask = mask;
        return output;
    },
    insert (_, pulse, output) {
        const tuples = pulse.add, bits = this.value, dims = this._dims, indices = this._indices, fields = _.fields, adds = {}, out = output.add, n = bits.size() + tuples.length, m = dims.length;
        let k = bits.size(), j, key, add;
        // resize bitmaps and add tuples as needed
        bits.resize(n, m);
        bits.add(tuples);
        const curr = bits.curr(), prev = bits.prev(), all = bits.all();
        // add to dimensional indices
        for(j = 0; j < m; ++j){
            key = fields[j].fname;
            add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));
            dims[j].onAdd(add, curr);
        }
        // set previous filters, output if passes at least one filter
        for(; k < n; ++k){
            prev[k] = all;
            if (curr[k] !== all) out.push(k);
        }
    },
    modify (pulse, output) {
        const out = output.mod, bits = this.value, curr = bits.curr(), all = bits.all(), tuples = pulse.mod;
        let i, n, k;
        for(i = 0, n = tuples.length; i < n; ++i){
            k = tuples[i]._index;
            if (curr[k] !== all) out.push(k);
        }
    },
    remove (_, pulse, output) {
        const indices = this._indices, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), map = {}, out = output.rem, tuples = pulse.rem;
        let i, n, k, f;
        // process tuples, output if passes at least one filter
        for(i = 0, n = tuples.length; i < n; ++i){
            k = tuples[i]._index;
            map[k] = 1; // build index map
            prev[k] = f = curr[k];
            curr[k] = all;
            if (f !== all) out.push(k);
        }
        // remove from dimensional indices
        for(k in indices)indices[k].remove(n, map);
        this.reindex(pulse, n, map);
        return map;
    },
    // reindex filters and indices after propagation completes
    reindex (pulse, num, map) {
        const indices = this._indices, bits = this.value;
        pulse.runAfter(()=>{
            const indexMap = bits.remove(num, map);
            for(const key in indices)indices[key].reindex(indexMap);
        });
    },
    update (_, pulse, output) {
        const dims = this._dims, query = _.query, stamp = pulse.stamp, m = dims.length;
        let mask = 0, i, q;
        // survey how many queries have changed
        output.filters = 0;
        for(q = 0; q < m; ++q)if (_.modified("query", q)) {
            i = q;
            ++mask;
        }
        if (mask === 1) {
            // only one query changed, use more efficient update
            mask = dims[i].one;
            this.incrementOne(dims[i], query[i], output.add, output.rem);
        } else // multiple queries changed, perform full record keeping
        for(q = 0, mask = 0; q < m; ++q){
            if (!_.modified("query", q)) continue;
            mask |= dims[q].one;
            this.incrementAll(dims[q], query[q], stamp, output.add);
            output.rem = output.add; // duplicate add/rem for downstream resolve
        }
        return mask;
    },
    incrementAll (dim, query, stamp, out) {
        const bits = this.value, seen = bits.seen(), curr = bits.curr(), prev = bits.prev(), index = dim.index(), old = dim.bisect(dim.range), range = dim.bisect(query), lo1 = range[0], hi1 = range[1], lo0 = old[0], hi0 = old[1], one = dim.one;
        let i, j, k;
        // Fast incremental update based on previous lo index.
        if (lo1 < lo0) for(i = lo1, j = Math.min(lo0, hi1); i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
        else if (lo1 > lo0) for(i = lo0, j = Math.min(lo1, hi0); i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
        // Fast incremental update based on previous hi index.
        if (hi1 > hi0) for(i = Math.max(lo1, hi0), j = hi1; i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
        else if (hi1 < hi0) for(i = Math.max(lo0, hi1), j = hi0; i < j; ++i){
            k = index[i];
            if (seen[k] !== stamp) {
                prev[k] = curr[k];
                seen[k] = stamp;
                out.push(k);
            }
            curr[k] ^= one;
        }
        dim.range = query.slice();
    },
    incrementOne (dim, query, add, rem) {
        const bits = this.value, curr = bits.curr(), index = dim.index(), old = dim.bisect(dim.range), range = dim.bisect(query), lo1 = range[0], hi1 = range[1], lo0 = old[0], hi0 = old[1], one = dim.one;
        let i, j, k;
        // Fast incremental update based on previous lo index.
        if (lo1 < lo0) for(i = lo1, j = Math.min(lo0, hi1); i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            add.push(k);
        }
        else if (lo1 > lo0) for(i = lo0, j = Math.min(lo1, hi0); i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            rem.push(k);
        }
        // Fast incremental update based on previous hi index.
        if (hi1 > hi0) for(i = Math.max(lo1, hi0), j = hi1; i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            add.push(k);
        }
        else if (hi1 < hi0) for(i = Math.max(lo0, hi1), j = hi0; i < j; ++i){
            k = index[i];
            curr[k] ^= one;
            rem.push(k);
        }
        dim.range = query.slice();
    }
});
/**
 * Selectively filters tuples by resolving against a filter bitmap.
 * Useful for processing the output of a cross-filter transform.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.ignore - A bit mask indicating which filters to ignore.
 * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
 *   parameter value is a reference to a {@link CrossFilter} transform.
 */ function $ca8db225db996601$export$797181223857512c(params) {
    (0, $4jOgW.Transform).call(this, null, params);
}
$ca8db225db996601$export$797181223857512c.Definition = {
    "type": "ResolveFilter",
    "metadata": {},
    "params": [
        {
            "name": "ignore",
            "type": "number",
            "required": true,
            "description": "A bit mask indicating which filters to ignore."
        },
        {
            "name": "filter",
            "type": "object",
            "required": true,
            "description": "Per-tuple filter bitmaps from a CrossFilter transform."
        }
    ]
};
(0, $4SWbq.inherits)($ca8db225db996601$export$797181223857512c, (0, $4jOgW.Transform), {
    transform (_, pulse) {
        const ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore
        bitmap = _.filter, mask = bitmap.mask;
        // exit early if no relevant filter changes
        if ((mask & ignore) === 0) return pulse.StopPropagation;
        const output = pulse.fork(pulse.ALL), data = bitmap.data(), curr = bitmap.curr(), prev = bitmap.prev(), pass = (k)=>!(curr[k] & ignore) ? data[k] : null;
        // propagate all mod tuples that pass the filter
        output.filter(output.MOD, pass);
        // determine add & rem tuples via filter functions
        // for efficiency, we do *not* populate new arrays,
        // instead we add filter functions applied downstream
        if (!(mask & mask - 1)) {
            // only one filter changed
            output.filter(output.ADD, pass);
            output.filter(output.REM, (k)=>(curr[k] & ignore) === mask ? data[k] : null);
        } else {
            // multiple filters changed
            output.filter(output.ADD, (k)=>{
                const c = curr[k] & ignore, f = !c && c ^ prev[k] & ignore;
                return f ? data[k] : null;
            });
            output.filter(output.REM, (k)=>{
                const c = curr[k] & ignore, f = c && !(c ^ (c ^ prev[k] & ignore));
                return f ? data[k] : null;
            });
        }
        // add filter to source data in case of reflow...
        return output.filter(output.SOURCE, (t)=>pass(t._index));
    }
});

});

parcelRegister("hd7ZC", function(module, exports) {

$parcel$export(module.exports, "View", () => $c879d9c8e4e21cc8$export$27a5bd065ad55220);

var $4SWbq = parcelRequire("4SWbq");

var $4jOgW = parcelRequire("4jOgW");

var $d6kNj = parcelRequire("d6kNj");

var $5kZgp = parcelRequire("5kZgp");

var $Us6QS = parcelRequire("Us6QS");

var $gDxmt = parcelRequire("gDxmt");

var $aDwtd = parcelRequire("aDwtd");

var $dcUFF = parcelRequire("dcUFF");
// initialize aria role and label attributes
function $c879d9c8e4e21cc8$var$initializeAria(view) {
    const el = view.container();
    if (el) {
        el.setAttribute("role", "graphics-document");
        el.setAttribute("aria-roleDescription", "visualization");
        $c879d9c8e4e21cc8$var$ariaLabel(el, view.description());
    }
}
// update aria-label if we have a DOM container element
function $c879d9c8e4e21cc8$var$ariaLabel(el, desc) {
    if (el) desc == null ? el.removeAttribute("aria-label") : el.setAttribute("aria-label", desc);
}
function $c879d9c8e4e21cc8$var$background(view) {
    // respond to background signal
    view.add(null, (_)=>{
        view._background = _.bg;
        view._resize = 1;
        return _.bg;
    }, {
        bg: view._signals.background
    });
}
const $c879d9c8e4e21cc8$var$Default = "default";
function $c879d9c8e4e21cc8$var$cursor(view) {
    // get cursor signal, add to dataflow if needed
    const cursor = view._signals.cursor || (view._signals.cursor = view.add({
        user: $c879d9c8e4e21cc8$var$Default,
        item: null
    }));
    // evaluate cursor on each mousemove event
    view.on(view.events("view", "mousemove"), cursor, (_, event)=>{
        const value = cursor.value, user = value ? (0, $4SWbq.isString)(value) ? value : value.user : $c879d9c8e4e21cc8$var$Default, item = event.item && event.item.cursor || null;
        return value && user === value.user && item == value.item ? value : {
            user: user,
            item: item
        };
    });
    // when cursor signal updates, set visible cursor
    view.add(null, function(_) {
        let user = _.cursor, item = this.value;
        if (!(0, $4SWbq.isString)(user)) {
            item = user.item;
            user = user.user;
        }
        $c879d9c8e4e21cc8$var$setCursor(view, user && user !== $c879d9c8e4e21cc8$var$Default ? user : item || user);
        return item;
    }, {
        cursor: cursor
    });
}
function $c879d9c8e4e21cc8$var$setCursor(view, cursor) {
    const el = view.globalCursor() ? typeof document !== "undefined" && document.body : view.container();
    if (el) return cursor == null ? el.style.removeProperty("cursor") : el.style.cursor = cursor;
}
function $c879d9c8e4e21cc8$var$dataref(view, name) {
    var data = view._runtime.data;
    if (!(0, $4SWbq.hasOwnProperty)(data, name)) (0, $4SWbq.error)("Unrecognized data set: " + name);
    return data[name];
}
function $c879d9c8e4e21cc8$var$data(name, values) {
    return arguments.length < 2 ? $c879d9c8e4e21cc8$var$dataref(this, name).values.value : $c879d9c8e4e21cc8$var$change.call(this, name, (0, $4jOgW.changeset)().remove((0, $4SWbq.truthy)).insert(values));
}
function $c879d9c8e4e21cc8$var$change(name, changes) {
    if (!(0, $4jOgW.isChangeSet)(changes)) (0, $4SWbq.error)("Second argument to changes must be a changeset.");
    const dataset = $c879d9c8e4e21cc8$var$dataref(this, name);
    dataset.modified = true;
    return this.pulse(dataset.input, changes);
}
function $c879d9c8e4e21cc8$var$insert(name, _) {
    return $c879d9c8e4e21cc8$var$change.call(this, name, (0, $4jOgW.changeset)().insert(_));
}
function $c879d9c8e4e21cc8$var$remove(name, _) {
    return $c879d9c8e4e21cc8$var$change.call(this, name, (0, $4jOgW.changeset)().remove(_));
}
function $c879d9c8e4e21cc8$var$width(view) {
    var padding = view.padding();
    return Math.max(0, view._viewWidth + padding.left + padding.right);
}
function $c879d9c8e4e21cc8$var$height(view) {
    var padding = view.padding();
    return Math.max(0, view._viewHeight + padding.top + padding.bottom);
}
function $c879d9c8e4e21cc8$var$offset(view) {
    var padding = view.padding(), origin = view._origin;
    return [
        padding.left + origin[0],
        padding.top + origin[1]
    ];
}
function $c879d9c8e4e21cc8$var$resizeRenderer(view) {
    var origin = $c879d9c8e4e21cc8$var$offset(view), w = $c879d9c8e4e21cc8$var$width(view), h = $c879d9c8e4e21cc8$var$height(view);
    view._renderer.background(view.background());
    view._renderer.resize(w, h, origin);
    view._handler.origin(origin);
    view._resizeListeners.forEach((handler)=>{
        try {
            handler(w, h);
        } catch (error) {
            view.error(error);
        }
    });
}
/**
 * Extend an event with additional view-specific methods.
 * Adds a new property ('vega') to an event that provides a number
 * of methods for querying information about the current interaction.
 * The vega object provides the following methods:
 *   view - Returns the backing View instance.
 *   item - Returns the currently active scenegraph item (if any).
 *   group - Returns the currently active scenegraph group (if any).
 *     This method accepts a single string-typed argument indicating the name
 *     of the desired parent group. The scenegraph will be traversed from
 *     the item up towards the root to search for a matching group. If no
 *     argument is provided the enclosing group for the active item is
 *     returned, unless the item it itself a group, in which case it is
 *     returned directly.
 *   xy - Returns a two-element array containing the x and y coordinates for
 *     mouse or touch events. For touch events, this is based on the first
 *     elements in the changedTouches array. This method accepts a single
 *     argument: either an item instance or mark name that should serve as
 *     the reference coordinate system. If no argument is provided the
 *     top-level view coordinate system is assumed.
 *   x - Returns the current x-coordinate, accepts the same arguments as xy.
 *   y - Returns the current y-coordinate, accepts the same arguments as xy.
 * @param {Event} event - The input event to extend.
 * @param {Item} item - The currently active scenegraph item (if any).
 * @return {Event} - The extended input event.
 */ function $c879d9c8e4e21cc8$var$eventExtend(view, event, item) {
    var r = view._renderer, el = r && r.canvas(), p, e, translate;
    if (el) {
        translate = $c879d9c8e4e21cc8$var$offset(view);
        e = event.changedTouches ? event.changedTouches[0] : event;
        p = (0, $d6kNj.point)(e, el);
        p[0] -= translate[0];
        p[1] -= translate[1];
    }
    event.dataflow = view;
    event.item = item;
    event.vega = $c879d9c8e4e21cc8$var$extension(view, item, p);
    return event;
}
function $c879d9c8e4e21cc8$var$extension(view, item, point) {
    const itemGroup = item ? item.mark.marktype === "group" ? item : item.mark.group : null;
    function group(name) {
        var g = itemGroup, i;
        if (name) {
            for(i = item; i; i = i.mark.group)if (i.mark.name === name) {
                g = i;
                break;
            }
        }
        return g && g.mark && g.mark.interactive ? g : {};
    }
    function xy(item) {
        if (!item) return point;
        if ((0, $4SWbq.isString)(item)) item = group(item);
        const p = point.slice();
        while(item){
            p[0] -= item.x || 0;
            p[1] -= item.y || 0;
            item = item.mark && item.mark.group;
        }
        return p;
    }
    return {
        view: (0, $4SWbq.constant)(view),
        item: (0, $4SWbq.constant)(item || {}),
        group: group,
        xy: xy,
        x: (item)=>xy(item)[0],
        y: (item)=>xy(item)[1]
    };
}
const $c879d9c8e4e21cc8$var$VIEW = "view", $c879d9c8e4e21cc8$var$TIMER = "timer", $c879d9c8e4e21cc8$var$WINDOW = "window", $c879d9c8e4e21cc8$var$NO_TRAP = {
    trap: false
};
/**
 * Initialize event handling configuration.
 * @param {object} config - The configuration settings.
 * @return {object}
 */ function $c879d9c8e4e21cc8$var$initializeEventConfig(config) {
    const events = (0, $4SWbq.extend)({
        defaults: {}
    }, config);
    const unpack = (obj, keys)=>{
        keys.forEach((k)=>{
            if ((0, $4SWbq.isArray)(obj[k])) obj[k] = (0, $4SWbq.toSet)(obj[k]);
        });
    };
    unpack(events.defaults, [
        "prevent",
        "allow"
    ]);
    unpack(events, [
        "view",
        "window",
        "selector"
    ]);
    return events;
}
function $c879d9c8e4e21cc8$var$trackEventListener(view, sources, type, handler) {
    view._eventListeners.push({
        type: type,
        sources: (0, $4SWbq.array)(sources),
        handler: handler
    });
}
function $c879d9c8e4e21cc8$var$prevent(view, type) {
    var def = view._eventConfig.defaults, prevent = def.prevent, allow = def.allow;
    return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();
}
function $c879d9c8e4e21cc8$var$permit(view, key, type) {
    const rule = view._eventConfig && view._eventConfig[key];
    if (rule === false || (0, $4SWbq.isObject)(rule) && !rule[type]) {
        view.warn(`Blocked ${key} ${type} event listener.`);
        return false;
    }
    return true;
}
/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @return {EventStream}
 */ function $c879d9c8e4e21cc8$var$events(source, type, filter) {
    var view = this, s = new (0, $4jOgW.EventStream)(filter), send = function(e, item) {
        view.runAsync(null, ()=>{
            if (source === $c879d9c8e4e21cc8$var$VIEW && $c879d9c8e4e21cc8$var$prevent(view, type)) e.preventDefault();
            s.receive($c879d9c8e4e21cc8$var$eventExtend(view, e, item));
        });
    }, sources;
    if (source === $c879d9c8e4e21cc8$var$TIMER) {
        if ($c879d9c8e4e21cc8$var$permit(view, "timer", type)) view.timer(send, type);
    } else if (source === $c879d9c8e4e21cc8$var$VIEW) {
        if ($c879d9c8e4e21cc8$var$permit(view, "view", type)) // send traps errors, so use {trap: false} option
        view.addEventListener(type, send, $c879d9c8e4e21cc8$var$NO_TRAP);
    } else {
        if (source === $c879d9c8e4e21cc8$var$WINDOW) {
            if ($c879d9c8e4e21cc8$var$permit(view, "window", type) && typeof window !== "undefined") sources = [
                window
            ];
        } else if (typeof document !== "undefined") {
            if ($c879d9c8e4e21cc8$var$permit(view, "selector", type)) sources = Array.from(document.querySelectorAll(source));
        }
        if (!sources) view.warn("Can not resolve event source: " + source);
        else {
            for(var i = 0, n = sources.length; i < n; ++i)sources[i].addEventListener(type, send);
            $c879d9c8e4e21cc8$var$trackEventListener(view, sources, type, send);
        }
    }
    return s;
}
function $c879d9c8e4e21cc8$var$itemFilter(event) {
    return event.item;
}
function $c879d9c8e4e21cc8$var$markTarget(event) {
    // grab upstream collector feeding the mark operator
    return event.item.mark.source;
}
function $c879d9c8e4e21cc8$var$invoke(name) {
    return function(_, event) {
        return event.vega.view().changeset().encode(event.item, name);
    };
}
function $c879d9c8e4e21cc8$var$hover(hoverSet, leaveSet) {
    hoverSet = [
        hoverSet || "hover"
    ];
    leaveSet = [
        leaveSet || "update",
        hoverSet[0]
    ];
    // invoke hover set upon mouseover
    this.on(this.events("view", "mouseover", $c879d9c8e4e21cc8$var$itemFilter), $c879d9c8e4e21cc8$var$markTarget, $c879d9c8e4e21cc8$var$invoke(hoverSet));
    // invoke leave set upon mouseout
    this.on(this.events("view", "mouseout", $c879d9c8e4e21cc8$var$itemFilter), $c879d9c8e4e21cc8$var$markTarget, $c879d9c8e4e21cc8$var$invoke(leaveSet));
    return this;
}
/**
 * Finalize a View instance that is being removed.
 * Cancel any running timers.
 * Remove all external event listeners.
 * Remove any currently displayed tooltip.
 */ function $c879d9c8e4e21cc8$var$finalize() {
    var tooltip = this._tooltip, timers = this._timers, listeners = this._eventListeners, n, m, e;
    n = timers.length;
    while(--n >= 0)timers[n].stop();
    n = listeners.length;
    while(--n >= 0){
        e = listeners[n];
        m = e.sources.length;
        while(--m >= 0)e.sources[m].removeEventListener(e.type, e.handler);
    }
    if (tooltip) tooltip.call(this, this._handler, null, null, null);
    return this;
}
function $c879d9c8e4e21cc8$var$element(tag, attr, text) {
    const el = document.createElement(tag);
    for(const key in attr)el.setAttribute(key, attr[key]);
    if (text != null) el.textContent = text;
    return el;
}
const $c879d9c8e4e21cc8$var$BindClass = "vega-bind", $c879d9c8e4e21cc8$var$NameClass = "vega-bind-name", $c879d9c8e4e21cc8$var$RadioClass = "vega-bind-radio";
/**
 * Bind a signal to an external HTML input element. The resulting two-way
 * binding will propagate input changes to signals, and propagate signal
 * changes to the input element state. If this view instance has no parent
 * element, we assume the view is headless and no bindings are created.
 * @param {Element|string} el - The parent DOM element to which the input
 *   element should be appended as a child. If string-valued, this argument
 *   will be treated as a CSS selector. If null or undefined, the parent
 *   element of this view will be used as the element.
 * @param {object} param - The binding parameters which specify the signal
 *   to bind to, the input element type, and type-specific configuration.
 * @return {View} - This view instance.
 */ function $c879d9c8e4e21cc8$var$bind(view, el, binding) {
    if (!el) return;
    const param = binding.param;
    let bind = binding.state;
    if (!bind) {
        bind = binding.state = {
            elements: null,
            active: false,
            set: null,
            update: (value)=>{
                if (value != view.signal(param.signal)) view.runAsync(null, ()=>{
                    bind.source = true;
                    view.signal(param.signal, value);
                });
            }
        };
        if (param.debounce) bind.update = (0, $4SWbq.debounce)(param.debounce, bind.update);
    }
    const create = param.input == null && param.element ? $c879d9c8e4e21cc8$var$target : $c879d9c8e4e21cc8$var$generate;
    create(bind, el, param, view);
    if (!bind.active) {
        view.on(view._signals[param.signal], null, ()=>{
            bind.source ? bind.source = false : bind.set(view.signal(param.signal));
        });
        bind.active = true;
    }
    return bind;
}
/**
 * Bind the signal to an external EventTarget.
 */ function $c879d9c8e4e21cc8$var$target(bind, node, param, view) {
    const type = param.event || "input";
    const handler = ()=>bind.update(node.value);
    // initialize signal value to external input value
    view.signal(param.signal, node.value);
    // listen for changes on the element
    node.addEventListener(type, handler);
    // register with view, so we can remove it upon finalization
    $c879d9c8e4e21cc8$var$trackEventListener(view, node, type, handler);
    // propagate change to element
    bind.set = (value)=>{
        node.value = value;
        node.dispatchEvent($c879d9c8e4e21cc8$var$event(type));
    };
}
function $c879d9c8e4e21cc8$var$event(type) {
    return typeof Event !== "undefined" ? new Event(type) : {
        type: type
    };
}
/**
 * Generate an HTML input form element and bind it to a signal.
 */ function $c879d9c8e4e21cc8$var$generate(bind, el, param, view) {
    const value = view.signal(param.signal);
    const div = $c879d9c8e4e21cc8$var$element("div", {
        "class": $c879d9c8e4e21cc8$var$BindClass
    });
    const wrapper = param.input === "radio" ? div : div.appendChild($c879d9c8e4e21cc8$var$element("label"));
    wrapper.appendChild($c879d9c8e4e21cc8$var$element("span", {
        "class": $c879d9c8e4e21cc8$var$NameClass
    }, param.name || param.signal));
    el.appendChild(div);
    let input = $c879d9c8e4e21cc8$var$form;
    switch(param.input){
        case "checkbox":
            input = $c879d9c8e4e21cc8$var$checkbox;
            break;
        case "select":
            input = $c879d9c8e4e21cc8$var$select;
            break;
        case "radio":
            input = $c879d9c8e4e21cc8$var$radio;
            break;
        case "range":
            input = $c879d9c8e4e21cc8$var$range;
            break;
    }
    input(bind, wrapper, param, value);
}
/**
 * Generates an arbitrary input form element.
 * The input type is controlled via user-provided parameters.
 */ function $c879d9c8e4e21cc8$var$form(bind, el, param, value) {
    const node = $c879d9c8e4e21cc8$var$element("input");
    for(const key in param)if (key !== "signal" && key !== "element") node.setAttribute(key === "input" ? "type" : key, param[key]);
    node.setAttribute("name", param.signal);
    node.value = value;
    el.appendChild(node);
    node.addEventListener("input", ()=>bind.update(node.value));
    bind.elements = [
        node
    ];
    bind.set = (value)=>node.value = value;
}
/**
 * Generates a checkbox input element.
 */ function $c879d9c8e4e21cc8$var$checkbox(bind, el, param, value) {
    const attr = {
        type: "checkbox",
        name: param.signal
    };
    if (value) attr.checked = true;
    const node = $c879d9c8e4e21cc8$var$element("input", attr);
    el.appendChild(node);
    node.addEventListener("change", ()=>bind.update(node.checked));
    bind.elements = [
        node
    ];
    bind.set = (value)=>node.checked = !!value || null;
}
/**
 * Generates a selection list input element.
 */ function $c879d9c8e4e21cc8$var$select(bind, el, param, value) {
    const node = $c879d9c8e4e21cc8$var$element("select", {
        name: param.signal
    }), labels = param.labels || [];
    param.options.forEach((option, i)=>{
        const attr = {
            value: option
        };
        if ($c879d9c8e4e21cc8$var$valuesEqual(option, value)) attr.selected = true;
        node.appendChild($c879d9c8e4e21cc8$var$element("option", attr, (labels[i] || option) + ""));
    });
    el.appendChild(node);
    node.addEventListener("change", ()=>{
        bind.update(param.options[node.selectedIndex]);
    });
    bind.elements = [
        node
    ];
    bind.set = (value)=>{
        for(let i = 0, n = param.options.length; i < n; ++i)if ($c879d9c8e4e21cc8$var$valuesEqual(param.options[i], value)) {
            node.selectedIndex = i;
            return;
        }
    };
}
/**
 * Generates a radio button group.
 */ function $c879d9c8e4e21cc8$var$radio(bind, el, param, value) {
    const group = $c879d9c8e4e21cc8$var$element("span", {
        "class": $c879d9c8e4e21cc8$var$RadioClass
    }), labels = param.labels || [];
    el.appendChild(group);
    bind.elements = param.options.map((option, i)=>{
        const attr = {
            type: "radio",
            name: param.signal,
            value: option
        };
        if ($c879d9c8e4e21cc8$var$valuesEqual(option, value)) attr.checked = true;
        const input = $c879d9c8e4e21cc8$var$element("input", attr);
        input.addEventListener("change", ()=>bind.update(option));
        const label = $c879d9c8e4e21cc8$var$element("label", {}, (labels[i] || option) + "");
        label.prepend(input);
        group.appendChild(label);
        return input;
    });
    bind.set = (value)=>{
        const nodes = bind.elements, n = nodes.length;
        for(let i = 0; i < n; ++i)if ($c879d9c8e4e21cc8$var$valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
    };
}
/**
 * Generates a slider input element.
 */ function $c879d9c8e4e21cc8$var$range(bind, el, param, value) {
    value = value !== undefined ? value : (+param.max + +param.min) / 2;
    const max = param.max != null ? param.max : Math.max(100, +value) || 100, min = param.min || Math.min(0, max, +value) || 0, step = param.step || (0, $5kZgp.tickStep)(min, max, 100);
    const node = $c879d9c8e4e21cc8$var$element("input", {
        type: "range",
        name: param.signal,
        min: min,
        max: max,
        step: step
    });
    node.value = value;
    const span = $c879d9c8e4e21cc8$var$element("span", {}, +value);
    el.appendChild(node);
    el.appendChild(span);
    const update = ()=>{
        span.textContent = node.value;
        bind.update(+node.value);
    };
    // subscribe to both input and change
    node.addEventListener("input", update);
    node.addEventListener("change", update);
    bind.elements = [
        node
    ];
    bind.set = (value)=>{
        node.value = value;
        span.textContent = value;
    };
}
function $c879d9c8e4e21cc8$var$valuesEqual(a, b) {
    return a === b || a + "" === b + "";
}
function $c879d9c8e4e21cc8$var$initializeRenderer(view, r, el, constructor, scaleFactor, opt) {
    r = r || new constructor(view.loader());
    return r.initialize(el, $c879d9c8e4e21cc8$var$width(view), $c879d9c8e4e21cc8$var$height(view), $c879d9c8e4e21cc8$var$offset(view), scaleFactor, opt).background(view.background());
}
function $c879d9c8e4e21cc8$var$trap(view, fn) {
    return !fn ? null : function() {
        try {
            fn.apply(this, arguments);
        } catch (error) {
            view.error(error);
        }
    };
}
function $c879d9c8e4e21cc8$var$initializeHandler(view, prevHandler, el, constructor) {
    // instantiate scenegraph handler
    const handler = new constructor(view.loader(), $c879d9c8e4e21cc8$var$trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, $c879d9c8e4e21cc8$var$offset(view), view);
    // transfer event handlers
    if (prevHandler) prevHandler.handlers().forEach((h)=>{
        handler.on(h.type, h.handler);
    });
    return handler;
}
function $c879d9c8e4e21cc8$var$initialize(el, elBind) {
    const view = this, type = view._renderType, config = view._eventConfig.bind, module = (0, $d6kNj.renderModule)(type);
    // containing dom element
    el = view._el = el ? $c879d9c8e4e21cc8$var$lookup(view, el, true) : null;
    // initialize aria attributes
    $c879d9c8e4e21cc8$var$initializeAria(view);
    // select appropriate renderer & handler
    if (!module) view.error("Unrecognized renderer type: " + type);
    const Handler = module.handler || (0, $d6kNj.CanvasHandler), Renderer = el ? module.renderer : module.headless;
    // initialize renderer and input handler
    view._renderer = !Renderer ? null : $c879d9c8e4e21cc8$var$initializeRenderer(view, view._renderer, el, Renderer);
    view._handler = $c879d9c8e4e21cc8$var$initializeHandler(view, view._handler, el, Handler);
    view._redraw = true;
    // initialize signal bindings
    if (el && config !== "none") {
        elBind = elBind ? view._elBind = $c879d9c8e4e21cc8$var$lookup(view, elBind, true) : el.appendChild($c879d9c8e4e21cc8$var$element("form", {
            "class": "vega-bindings"
        }));
        view._bind.forEach((_)=>{
            if (_.param.element && config !== "container") _.element = $c879d9c8e4e21cc8$var$lookup(view, _.param.element, !!_.param.input);
        });
        view._bind.forEach((_)=>{
            $c879d9c8e4e21cc8$var$bind(view, _.element || elBind, _);
        });
    }
    return view;
}
function $c879d9c8e4e21cc8$var$lookup(view, el, clear) {
    if (typeof el === "string") {
        if (typeof document !== "undefined") {
            el = document.querySelector(el);
            if (!el) {
                view.error("Signal bind element not found: " + el);
                return null;
            }
        } else {
            view.error("DOM document instance not found.");
            return null;
        }
    }
    if (el && clear) try {
        el.textContent = "";
    } catch (e) {
        el = null;
        view.error(e);
    }
    return el;
}
const $c879d9c8e4e21cc8$var$number = (_)=>+_ || 0;
const $c879d9c8e4e21cc8$var$paddingObject = (_)=>({
        top: _,
        bottom: _,
        left: _,
        right: _
    });
function $c879d9c8e4e21cc8$var$padding(_) {
    return (0, $4SWbq.isObject)(_) ? {
        top: $c879d9c8e4e21cc8$var$number(_.top),
        bottom: $c879d9c8e4e21cc8$var$number(_.bottom),
        left: $c879d9c8e4e21cc8$var$number(_.left),
        right: $c879d9c8e4e21cc8$var$number(_.right)
    } : $c879d9c8e4e21cc8$var$paddingObject($c879d9c8e4e21cc8$var$number(_));
}
/**
 * Render the current scene in a headless fashion.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A Promise that resolves to a renderer.
 */ async function $c879d9c8e4e21cc8$var$renderHeadless(view, type, scaleFactor, opt) {
    const module = (0, $d6kNj.renderModule)(type), ctr = module && module.headless;
    if (!ctr) (0, $4SWbq.error)("Unrecognized renderer type: " + type);
    await view.runAsync();
    return $c879d9c8e4e21cc8$var$initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root);
}
/**
 * Produce an image URL for the visualization. Depending on the type
 * parameter, the generated URL contains data for either a PNG or SVG image.
 * The URL can be used (for example) to download images of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
 *   The 'canvas' and 'png' types are synonyms for a PNG image.
 * @return {Promise} - A promise that resolves to an image URL.
 */ async function $c879d9c8e4e21cc8$var$renderToImageURL(type, scaleFactor) {
    if (type !== (0, $d6kNj.RenderType).Canvas && type !== (0, $d6kNj.RenderType).SVG && type !== (0, $d6kNj.RenderType).PNG) (0, $4SWbq.error)("Unrecognized image type: " + type);
    const r = await $c879d9c8e4e21cc8$var$renderHeadless(this, type, scaleFactor);
    return type === (0, $d6kNj.RenderType).SVG ? $c879d9c8e4e21cc8$var$toBlobURL(r.svg(), "image/svg+xml") : r.canvas().toDataURL("image/png");
}
function $c879d9c8e4e21cc8$var$toBlobURL(data, mime) {
    const blob = new Blob([
        data
    ], {
        type: mime
    });
    return window.URL.createObjectURL(blob);
}
/**
 * Produce a Canvas instance containing a rendered visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to a Canvas instance.
 */ async function $c879d9c8e4e21cc8$var$renderToCanvas(scaleFactor, opt) {
    const r = await $c879d9c8e4e21cc8$var$renderHeadless(this, (0, $d6kNj.RenderType).Canvas, scaleFactor, opt);
    return r.canvas();
}
/**
 * Produce a rendered SVG string of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to an SVG string.
 */ async function $c879d9c8e4e21cc8$var$renderToSVG(scaleFactor) {
    const r = await $c879d9c8e4e21cc8$var$renderHeadless(this, (0, $d6kNj.RenderType).SVG, scaleFactor);
    return r.svg();
}
function $c879d9c8e4e21cc8$var$runtime(view, spec, expr) {
    return (0, $gDxmt.context)(view, (0, $4jOgW.transforms), (0, $Us6QS.functionContext), expr).parse(spec);
}
function $c879d9c8e4e21cc8$var$scale(name) {
    var scales = this._runtime.scales;
    if (!(0, $4SWbq.hasOwnProperty)(scales, name)) (0, $4SWbq.error)("Unrecognized scale or projection: " + name);
    return scales[name].value;
}
var $c879d9c8e4e21cc8$var$Width = "width", $c879d9c8e4e21cc8$var$Height = "height", $c879d9c8e4e21cc8$var$Padding = "padding", $c879d9c8e4e21cc8$var$Skip = {
    skip: true
};
function $c879d9c8e4e21cc8$var$viewWidth(view, width) {
    var a = view.autosize(), p = view.padding();
    return width - (a && a.contains === $c879d9c8e4e21cc8$var$Padding ? p.left + p.right : 0);
}
function $c879d9c8e4e21cc8$var$viewHeight(view, height) {
    var a = view.autosize(), p = view.padding();
    return height - (a && a.contains === $c879d9c8e4e21cc8$var$Padding ? p.top + p.bottom : 0);
}
function $c879d9c8e4e21cc8$var$initializeResize(view) {
    var s = view._signals, w = s[$c879d9c8e4e21cc8$var$Width], h = s[$c879d9c8e4e21cc8$var$Height], p = s[$c879d9c8e4e21cc8$var$Padding];
    function resetSize() {
        view._autosize = view._resize = 1;
    }
    // respond to width signal
    view._resizeWidth = view.add(null, (_)=>{
        view._width = _.size;
        view._viewWidth = $c879d9c8e4e21cc8$var$viewWidth(view, _.size);
        resetSize();
    }, {
        size: w
    });
    // respond to height signal
    view._resizeHeight = view.add(null, (_)=>{
        view._height = _.size;
        view._viewHeight = $c879d9c8e4e21cc8$var$viewHeight(view, _.size);
        resetSize();
    }, {
        size: h
    });
    // respond to padding signal
    const resizePadding = view.add(null, resetSize, {
        pad: p
    });
    // set rank to run immediately after source signal
    view._resizeWidth.rank = w.rank + 1;
    view._resizeHeight.rank = h.rank + 1;
    resizePadding.rank = p.rank + 1;
}
function $c879d9c8e4e21cc8$var$resizeView(viewWidth, viewHeight, width, height, origin, auto) {
    this.runAfter((view)=>{
        let rerun = 0;
        // reset autosize flag
        view._autosize = 0;
        // width value changed: update signal, skip resize op
        if (view.width() !== width) {
            rerun = 1;
            view.signal($c879d9c8e4e21cc8$var$Width, width, $c879d9c8e4e21cc8$var$Skip); // set width, skip update calc
            view._resizeWidth.skip(true); // skip width resize handler
        }
        // height value changed: update signal, skip resize op
        if (view.height() !== height) {
            rerun = 1;
            view.signal($c879d9c8e4e21cc8$var$Height, height, $c879d9c8e4e21cc8$var$Skip); // set height, skip update calc
            view._resizeHeight.skip(true); // skip height resize handler
        }
        // view width changed: update view property, set resize flag
        if (view._viewWidth !== viewWidth) {
            view._resize = 1;
            view._viewWidth = viewWidth;
        }
        // view height changed: update view property, set resize flag
        if (view._viewHeight !== viewHeight) {
            view._resize = 1;
            view._viewHeight = viewHeight;
        }
        // origin changed: update view property, set resize flag
        if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
            view._resize = 1;
            view._origin = origin;
        }
        // run dataflow on width/height signal change
        if (rerun) view.run("enter");
        if (auto) view.runAfter((v)=>v.resize());
    }, false, 1);
}
/**
 * Get the current view state, consisting of signal values and/or data sets.
 * @param {object} [options] - Options flags indicating which state to export.
 *   If unspecified, all signals and data sets will be exported.
 * @param {function(string, Operator):boolean} [options.signals] - Optional
 *   predicate function for testing if a signal should be included in the
 *   exported state. If unspecified, all signals will be included, except for
 *   those named 'parent' or those which refer to a Transform value.
 * @param {function(string, object):boolean} [options.data] - Optional
 *   predicate function for testing if a data set's input should be included
 *   in the exported state. If unspecified, all data sets that have been
 *   explicitly modified will be included.
 * @param {boolean} [options.recurse=true] - Flag indicating if the exported
 *   state should recursively include state from group mark sub-contexts.
 * @return {object} - An object containing the exported state values.
 */ function $c879d9c8e4e21cc8$var$getState(options) {
    return this._runtime.getState(options || {
        data: $c879d9c8e4e21cc8$var$dataTest,
        signals: $c879d9c8e4e21cc8$var$signalTest,
        recurse: true
    });
}
function $c879d9c8e4e21cc8$var$dataTest(name, data) {
    return data.modified && (0, $4SWbq.isArray)(data.input.value) && name.indexOf("_:vega:_");
}
function $c879d9c8e4e21cc8$var$signalTest(name, op) {
    return !(name === "parent" || op instanceof (0, $4jOgW.transforms).proxy);
}
/**
 * Sets the current view state and updates the view by invoking run.
 * @param {object} state - A state object containing signal and/or
 *   data set values, following the format used by the getState method.
 * @return {View} - This view instance.
 */ function $c879d9c8e4e21cc8$var$setState(state) {
    this.runAsync(null, (v)=>{
        v._trigger = false;
        v._runtime.setState(state);
    }, (v)=>{
        v._trigger = true;
    });
    return this;
}
function $c879d9c8e4e21cc8$var$timer(callback, delay) {
    function tick(elapsed) {
        callback({
            timestamp: Date.now(),
            elapsed: elapsed
        });
    }
    this._timers.push((0, $aDwtd.default)(tick, delay));
}
function $c879d9c8e4e21cc8$var$defaultTooltip(handler, event, item, value) {
    const el = handler.element();
    if (el) el.setAttribute("title", $c879d9c8e4e21cc8$var$formatTooltip(value));
}
function $c879d9c8e4e21cc8$var$formatTooltip(value) {
    return value == null ? "" : (0, $4SWbq.isArray)(value) ? $c879d9c8e4e21cc8$var$formatArray(value) : (0, $4SWbq.isObject)(value) && !(0, $4SWbq.isDate)(value) ? $c879d9c8e4e21cc8$var$formatObject(value) : value + "";
}
function $c879d9c8e4e21cc8$var$formatObject(obj) {
    return Object.keys(obj).map((key)=>{
        const v = obj[key];
        return key + ": " + ((0, $4SWbq.isArray)(v) ? $c879d9c8e4e21cc8$var$formatArray(v) : $c879d9c8e4e21cc8$var$formatValue(v));
    }).join("\n");
}
function $c879d9c8e4e21cc8$var$formatArray(value) {
    return "[" + value.map($c879d9c8e4e21cc8$var$formatValue).join(", ") + "]";
}
function $c879d9c8e4e21cc8$var$formatValue(value) {
    return (0, $4SWbq.isArray)(value) ? "[\u2026]" : (0, $4SWbq.isObject)(value) && !(0, $4SWbq.isDate)(value) ? "{\u2026}" : value;
}
/**
 * Create a new View instance from a Vega dataflow runtime specification.
 * The generated View will not immediately be ready for display. Callers
 * should also invoke the initialize method (e.g., to set the parent
 * DOM element in browser-based deployment) and then invoke the run
 * method to evaluate the dataflow graph. Rendering will automatically
 * be performed upon dataflow runs.
 * @constructor
 * @param {object} spec - The Vega dataflow runtime specification.
 */ function $c879d9c8e4e21cc8$export$27a5bd065ad55220(spec, options) {
    const view = this;
    options = options || {};
    (0, $4jOgW.Dataflow).call(view);
    if (options.loader) view.loader(options.loader);
    if (options.logger) view.logger(options.logger);
    if (options.logLevel != null) view.logLevel(options.logLevel);
    if (options.locale || spec.locale) {
        const loc = (0, $4SWbq.extend)({}, spec.locale, options.locale);
        view.locale((0, $dcUFF.locale)(loc.number, loc.time));
    }
    view._el = null;
    view._elBind = null;
    view._renderType = options.renderer || (0, $d6kNj.RenderType).Canvas;
    view._scenegraph = new (0, $d6kNj.Scenegraph)();
    const root = view._scenegraph.root;
    // initialize renderer, handler and event management
    view._renderer = null;
    view._tooltip = options.tooltip || $c879d9c8e4e21cc8$var$defaultTooltip, view._redraw = true;
    view._handler = new (0, $d6kNj.CanvasHandler)().scene(root);
    view._globalCursor = false;
    view._preventDefault = false;
    view._timers = [];
    view._eventListeners = [];
    view._resizeListeners = [];
    // initialize event configuration
    view._eventConfig = $c879d9c8e4e21cc8$var$initializeEventConfig(spec.eventConfig);
    view.globalCursor(view._eventConfig.globalCursor);
    // initialize dataflow graph
    const ctx = $c879d9c8e4e21cc8$var$runtime(view, spec, options.expr);
    view._runtime = ctx;
    view._signals = ctx.signals;
    view._bind = (spec.bindings || []).map((_)=>({
            state: null,
            param: (0, $4SWbq.extend)({}, _)
        }));
    // initialize scenegraph
    if (ctx.root) ctx.root.set(root);
    root.source = ctx.data.root.input;
    view.pulse(ctx.data.root.input, view.changeset().insert(root.items));
    // initialize view size
    view._width = view.width();
    view._height = view.height();
    view._viewWidth = $c879d9c8e4e21cc8$var$viewWidth(view, view._width);
    view._viewHeight = $c879d9c8e4e21cc8$var$viewHeight(view, view._height);
    view._origin = [
        0,
        0
    ];
    view._resize = 0;
    view._autosize = 1;
    $c879d9c8e4e21cc8$var$initializeResize(view);
    // initialize background color
    $c879d9c8e4e21cc8$var$background(view);
    // initialize cursor
    $c879d9c8e4e21cc8$var$cursor(view);
    // initialize view description
    view.description(spec.description);
    // initialize hover proessing, if requested
    if (options.hover) view.hover();
    // initialize DOM container(s) and renderer
    if (options.container) view.initialize(options.container, options.bind);
}
function $c879d9c8e4e21cc8$var$lookupSignal(view, name) {
    return (0, $4SWbq.hasOwnProperty)(view._signals, name) ? view._signals[name] : (0, $4SWbq.error)("Unrecognized signal name: " + (0, $4SWbq.stringValue)(name));
}
function $c879d9c8e4e21cc8$var$findOperatorHandler(op, handler) {
    const h = (op._targets || []).filter((op)=>op._update && op._update.handler === handler);
    return h.length ? h[0] : null;
}
function $c879d9c8e4e21cc8$var$addOperatorListener(view, name, op, handler) {
    let h = $c879d9c8e4e21cc8$var$findOperatorHandler(op, handler);
    if (!h) {
        h = $c879d9c8e4e21cc8$var$trap(view, ()=>handler(name, op.value));
        h.handler = handler;
        view.on(op, null, h);
    }
    return view;
}
function $c879d9c8e4e21cc8$var$removeOperatorListener(view, op, handler) {
    const h = $c879d9c8e4e21cc8$var$findOperatorHandler(op, handler);
    if (h) op._targets.remove(h);
    return view;
}
(0, $4SWbq.inherits)($c879d9c8e4e21cc8$export$27a5bd065ad55220, (0, $4jOgW.Dataflow), {
    // -- DATAFLOW / RENDERING ----
    async evaluate (encode, prerun, postrun) {
        // evaluate dataflow and prerun
        await (0, $4jOgW.Dataflow).prototype.evaluate.call(this, encode, prerun);
        // render as needed
        if (this._redraw || this._resize) try {
            if (this._renderer) {
                if (this._resize) {
                    this._resize = 0;
                    $c879d9c8e4e21cc8$var$resizeRenderer(this);
                }
                await this._renderer.renderAsync(this._scenegraph.root);
            }
            this._redraw = false;
        } catch (e) {
            this.error(e);
        }
        // evaluate postrun
        if (postrun) (0, $4jOgW.asyncCallback)(this, postrun);
        return this;
    },
    dirty (item) {
        this._redraw = true;
        this._renderer && this._renderer.dirty(item);
    },
    // -- GET / SET ----
    description (text) {
        if (arguments.length) {
            const desc = text != null ? text + "" : null;
            if (desc !== this._desc) $c879d9c8e4e21cc8$var$ariaLabel(this._el, this._desc = desc);
            return this;
        }
        return this._desc;
    },
    container () {
        return this._el;
    },
    scenegraph () {
        return this._scenegraph;
    },
    origin () {
        return this._origin.slice();
    },
    signal (name, value, options) {
        const op = $c879d9c8e4e21cc8$var$lookupSignal(this, name);
        return arguments.length === 1 ? op.value : this.update(op, value, options);
    },
    width (_) {
        return arguments.length ? this.signal("width", _) : this.signal("width");
    },
    height (_) {
        return arguments.length ? this.signal("height", _) : this.signal("height");
    },
    padding (_) {
        return arguments.length ? this.signal("padding", $c879d9c8e4e21cc8$var$padding(_)) : $c879d9c8e4e21cc8$var$padding(this.signal("padding"));
    },
    autosize (_) {
        return arguments.length ? this.signal("autosize", _) : this.signal("autosize");
    },
    background (_) {
        return arguments.length ? this.signal("background", _) : this.signal("background");
    },
    renderer (type) {
        if (!arguments.length) return this._renderType;
        if (!(0, $d6kNj.renderModule)(type)) (0, $4SWbq.error)("Unrecognized renderer type: " + type);
        if (type !== this._renderType) {
            this._renderType = type;
            this._resetRenderer();
        }
        return this;
    },
    tooltip (handler) {
        if (!arguments.length) return this._tooltip;
        if (handler !== this._tooltip) {
            this._tooltip = handler;
            this._resetRenderer();
        }
        return this;
    },
    loader (loader) {
        if (!arguments.length) return this._loader;
        if (loader !== this._loader) {
            (0, $4jOgW.Dataflow).prototype.loader.call(this, loader);
            this._resetRenderer();
        }
        return this;
    },
    resize () {
        // set flag to perform autosize
        this._autosize = 1;
        // touch autosize signal to ensure top-level ViewLayout runs
        return this.touch($c879d9c8e4e21cc8$var$lookupSignal(this, "autosize"));
    },
    _resetRenderer () {
        if (this._renderer) {
            this._renderer = null;
            this.initialize(this._el, this._elBind);
        }
    },
    // -- SIZING ----
    _resizeView: $c879d9c8e4e21cc8$var$resizeView,
    // -- EVENT HANDLING ----
    addEventListener (type, handler, options) {
        let callback = handler;
        if (!(options && options.trap === false)) {
            // wrap callback in error handler
            callback = $c879d9c8e4e21cc8$var$trap(this, handler);
            callback.raw = handler;
        }
        this._handler.on(type, callback);
        return this;
    },
    removeEventListener (type, handler) {
        var handlers = this._handler.handlers(type), i = handlers.length, h, t;
        // search registered handlers, remove if match found
        while(--i >= 0){
            t = handlers[i].type;
            h = handlers[i].handler;
            if (type === t && (handler === h || handler === h.raw)) {
                this._handler.off(t, h);
                break;
            }
        }
        return this;
    },
    addResizeListener (handler) {
        const l = this._resizeListeners;
        if (l.indexOf(handler) < 0) // add handler if it isn't already registered
        // note: error trapping handled elsewhere, so
        // no need to wrap handlers here
        l.push(handler);
        return this;
    },
    removeResizeListener (handler) {
        var l = this._resizeListeners, i = l.indexOf(handler);
        if (i >= 0) l.splice(i, 1);
        return this;
    },
    addSignalListener (name, handler) {
        return $c879d9c8e4e21cc8$var$addOperatorListener(this, name, $c879d9c8e4e21cc8$var$lookupSignal(this, name), handler);
    },
    removeSignalListener (name, handler) {
        return $c879d9c8e4e21cc8$var$removeOperatorListener(this, $c879d9c8e4e21cc8$var$lookupSignal(this, name), handler);
    },
    addDataListener (name, handler) {
        return $c879d9c8e4e21cc8$var$addOperatorListener(this, name, $c879d9c8e4e21cc8$var$dataref(this, name).values, handler);
    },
    removeDataListener (name, handler) {
        return $c879d9c8e4e21cc8$var$removeOperatorListener(this, $c879d9c8e4e21cc8$var$dataref(this, name).values, handler);
    },
    globalCursor (_) {
        if (arguments.length) {
            if (this._globalCursor !== !!_) {
                const prev = $c879d9c8e4e21cc8$var$setCursor(this, null); // clear previous cursor
                this._globalCursor = !!_;
                if (prev) $c879d9c8e4e21cc8$var$setCursor(this, prev); // swap cursor
            }
            return this;
        } else return this._globalCursor;
    },
    preventDefault (_) {
        if (arguments.length) {
            this._preventDefault = _;
            return this;
        } else return this._preventDefault;
    },
    timer: $c879d9c8e4e21cc8$var$timer,
    events: $c879d9c8e4e21cc8$var$events,
    finalize: $c879d9c8e4e21cc8$var$finalize,
    hover: $c879d9c8e4e21cc8$var$hover,
    data: // -- DATA ----
    $c879d9c8e4e21cc8$var$data,
    change: $c879d9c8e4e21cc8$var$change,
    insert: $c879d9c8e4e21cc8$var$insert,
    remove: $c879d9c8e4e21cc8$var$remove,
    scale: // -- SCALES --
    $c879d9c8e4e21cc8$var$scale,
    initialize: // -- INITIALIZATION ----
    $c879d9c8e4e21cc8$var$initialize,
    // -- HEADLESS RENDERING ----
    toImageURL: $c879d9c8e4e21cc8$var$renderToImageURL,
    toCanvas: $c879d9c8e4e21cc8$var$renderToCanvas,
    toSVG: $c879d9c8e4e21cc8$var$renderToSVG,
    getState: // -- SAVE / RESTORE STATE ----
    $c879d9c8e4e21cc8$var$getState,
    setState: $c879d9c8e4e21cc8$var$setState
});

});
parcelRegister("Us6QS", function(module, exports) {

$parcel$export(module.exports, "functionContext", () => $0a9b090aa0aab97f$export$99ce98b0bb2ba83f);
$parcel$export(module.exports, "expressionFunction", () => $0a9b090aa0aab97f$export$4e2380945854200d);
$parcel$export(module.exports, "parseExpression", () => $0a9b090aa0aab97f$export$ed9c825e502c46c8);

var $4SWbq = parcelRequire("4SWbq");

var $60BEk = parcelRequire("60BEk");

var $1UqgZ = parcelRequire("1UqgZ");

var $8TCe3 = parcelRequire("8TCe3");
var $38Rfr = parcelRequire("38Rfr");
var $9LyDp = parcelRequire("9LyDp");

var $bkMew = parcelRequire("bkMew");
var $aQO2N = parcelRequire("aQO2N");

var $4jOgW = parcelRequire("4jOgW");

var $d6kNj = parcelRequire("d6kNj");

var $lBblC = parcelRequire("lBblC");

var $7Par0 = parcelRequire("7Par0");

var $i7MAj = parcelRequire("i7MAj");

var $apu36 = parcelRequire("apu36");
function $0a9b090aa0aab97f$export$4051a07651545597(name) {
    const data = this.context.data[name];
    return data ? data.values.value : [];
}
function $0a9b090aa0aab97f$export$4a311d72439cd8c8(name, field, value) {
    const index = this.context.data[name]["index:" + field], entry = index ? index.value.get(value) : undefined;
    return entry ? entry.count : entry;
}
function $0a9b090aa0aab97f$export$7a47df230897cb4(name, tuples) {
    const df = this.context.dataflow, data = this.context.data[name], input = data.input;
    df.pulse(input, df.changeset().remove((0, $4SWbq.truthy)).insert(tuples));
    return 1;
}
function $0a9b090aa0aab97f$export$c564cdbbe6da493(item, name, retval) {
    if (item) {
        const df = this.context.dataflow, target = item.mark.source;
        df.pulse(target, df.changeset().encode(item, name));
    }
    return retval !== undefined ? retval : item;
}
const $0a9b090aa0aab97f$var$wrap = (method)=>function(value, spec) {
        const locale = this.context.dataflow.locale();
        return locale[method](spec)(value);
    };
const $0a9b090aa0aab97f$export$d9468344d3651243 = $0a9b090aa0aab97f$var$wrap("format");
const $0a9b090aa0aab97f$export$94f4d87fad5dcf9a = $0a9b090aa0aab97f$var$wrap("timeFormat");
const $0a9b090aa0aab97f$export$1a08fe38f63ebbbb = $0a9b090aa0aab97f$var$wrap("utcFormat");
const $0a9b090aa0aab97f$export$32b9cd16e1b8c8d2 = $0a9b090aa0aab97f$var$wrap("timeParse");
const $0a9b090aa0aab97f$export$3edae9cf8e233729 = $0a9b090aa0aab97f$var$wrap("utcParse");
const $0a9b090aa0aab97f$var$dateObj = new Date(2000, 0, 1);
function $0a9b090aa0aab97f$var$time(month, day, specifier) {
    if (!Number.isInteger(month) || !Number.isInteger(day)) return "";
    $0a9b090aa0aab97f$var$dateObj.setYear(2000);
    $0a9b090aa0aab97f$var$dateObj.setMonth(month);
    $0a9b090aa0aab97f$var$dateObj.setDate(day);
    return $0a9b090aa0aab97f$export$94f4d87fad5dcf9a.call(this, $0a9b090aa0aab97f$var$dateObj, specifier);
}
function $0a9b090aa0aab97f$export$bf57ab38cc2c11f0(month) {
    return $0a9b090aa0aab97f$var$time.call(this, month, 1, "%B");
}
function $0a9b090aa0aab97f$export$ce28898b4e9d7553(month) {
    return $0a9b090aa0aab97f$var$time.call(this, month, 1, "%b");
}
function $0a9b090aa0aab97f$export$da6b70c58e1114fd(day) {
    return $0a9b090aa0aab97f$var$time.call(this, 0, 2 + day, "%A");
}
function $0a9b090aa0aab97f$export$ba2a09484f0152f7(day) {
    return $0a9b090aa0aab97f$var$time.call(this, 0, 2 + day, "%a");
}
const $0a9b090aa0aab97f$export$b0fa9ea03eb8d7e8 = ":";
const $0a9b090aa0aab97f$export$f032bafaaedd5ab5 = "@";
const $0a9b090aa0aab97f$export$47704033df61ee3d = "%";
const $0a9b090aa0aab97f$export$6813c7938c62a9c1 = "$";
function $0a9b090aa0aab97f$export$358d0ff194d7698b(name, args, scope, params) {
    if (args[0].type !== (0, $60BEk.Literal)) (0, $4SWbq.error)("First argument to data functions must be a string literal.");
    const data = args[0].value, dataName = $0a9b090aa0aab97f$export$b0fa9ea03eb8d7e8 + data;
    if (!(0, $4SWbq.hasOwnProperty)(dataName, params)) try {
        params[dataName] = scope.getData(data).tuplesRef();
    } catch (err) {
    // if data set does not exist, there's nothing to track
    }
}
function $0a9b090aa0aab97f$export$523783f4728e16ea(name, args, scope, params) {
    if (args[0].type !== (0, $60BEk.Literal)) (0, $4SWbq.error)("First argument to indata must be a string literal.");
    if (args[1].type !== (0, $60BEk.Literal)) (0, $4SWbq.error)("Second argument to indata must be a string literal.");
    const data = args[0].value, field = args[1].value, indexName = $0a9b090aa0aab97f$export$f032bafaaedd5ab5 + field;
    if (!(0, $4SWbq.hasOwnProperty)(indexName, params)) params[indexName] = scope.getData(data).indataRef(scope, field);
}
function $0a9b090aa0aab97f$export$ab0bf127c1223ec2(name, args, scope, params) {
    if (args[0].type === (0, $60BEk.Literal)) // add scale dependency
    $0a9b090aa0aab97f$var$addScaleDependency(scope, params, args[0].value);
    else // indirect scale lookup; add all scales as parameters
    for(name in scope.scales)$0a9b090aa0aab97f$var$addScaleDependency(scope, params, name);
}
function $0a9b090aa0aab97f$var$addScaleDependency(scope, params, name) {
    const scaleName = $0a9b090aa0aab97f$export$47704033df61ee3d + name;
    if (!(0, $4SWbq.hasOwnProperty)(params, scaleName)) try {
        params[scaleName] = scope.scaleRef(name);
    } catch (err) {
    // TODO: error handling? warning?
    }
}
function $0a9b090aa0aab97f$var$getScale(nameOrFunction, ctx) {
    if ((0, $4SWbq.isFunction)(nameOrFunction)) return nameOrFunction;
    if ((0, $4SWbq.isString)(nameOrFunction)) {
        const maybeScale = ctx.scales[nameOrFunction];
        return maybeScale && (0, $1UqgZ.isRegisteredScale)(maybeScale.value) ? maybeScale.value : undefined;
    }
    return undefined;
}
function $0a9b090aa0aab97f$var$internalScaleFunctions(codegen, fnctx, visitors) {
    // add helper method to the 'this' expression function context
    fnctx.__bandwidth = (s)=>s && s.bandwidth ? s.bandwidth() : 0;
    // register AST visitors for internal scale functions
    visitors._bandwidth = $0a9b090aa0aab97f$export$ab0bf127c1223ec2;
    visitors._range = $0a9b090aa0aab97f$export$ab0bf127c1223ec2;
    visitors._scale = $0a9b090aa0aab97f$export$ab0bf127c1223ec2;
    // resolve scale reference directly to the signal hash argument
    const ref = (arg)=>"_[" + (arg.type === (0, $60BEk.Literal) ? (0, $4SWbq.stringValue)($0a9b090aa0aab97f$export$47704033df61ee3d + arg.value) : (0, $4SWbq.stringValue)($0a9b090aa0aab97f$export$47704033df61ee3d) + "+" + codegen(arg)) + "]";
    // define and return internal scale function code generators
    // these internal functions are called by mark encoders
    return {
        _bandwidth: (args)=>`this.__bandwidth(${ref(args[0])})`,
        _range: (args)=>`${ref(args[0])}.range()`,
        _scale: (args)=>`${ref(args[0])}(${codegen(args[1])})`
    };
}
function $0a9b090aa0aab97f$var$geoMethod(methodName, globalMethod) {
    return function(projection, geojson, group) {
        if (projection) {
            // projection defined, use it
            const p = $0a9b090aa0aab97f$var$getScale(projection, (group || this).context);
            return p && p.path[methodName](geojson);
        } else // projection undefined, use global method
        return globalMethod(geojson);
    };
}
const $0a9b090aa0aab97f$export$a514eb22fe5f7d4 = $0a9b090aa0aab97f$var$geoMethod("area", (0, $8TCe3.default));
const $0a9b090aa0aab97f$export$b6b1d97c43a180f2 = $0a9b090aa0aab97f$var$geoMethod("bounds", (0, $38Rfr.default));
const $0a9b090aa0aab97f$export$8d3c34225495dcd8 = $0a9b090aa0aab97f$var$geoMethod("centroid", (0, $9LyDp.default));
function $0a9b090aa0aab97f$export$66787a6abd6e4956(item) {
    const group = this.context.group;
    let value = false;
    if (group) while(item){
        if (item === group) {
            value = true;
            break;
        }
        item = item.mark.group;
    }
    return value;
}
function $0a9b090aa0aab97f$var$log(df, method, args) {
    try {
        df[method].apply(df, [
            "EXPRESSION"
        ].concat([].slice.call(args)));
    } catch (err) {
        df.warn(err);
    }
    return args[args.length - 1];
}
function $0a9b090aa0aab97f$export$c106dd0671a0fc2d() {
    return $0a9b090aa0aab97f$var$log(this.context.dataflow, "warn", arguments);
}
function $0a9b090aa0aab97f$export$a80b3bd66acc52ff() {
    return $0a9b090aa0aab97f$var$log(this.context.dataflow, "info", arguments);
}
function $0a9b090aa0aab97f$export$1c9f709888824e05() {
    return $0a9b090aa0aab97f$var$log(this.context.dataflow, "debug", arguments);
}
// https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
function $0a9b090aa0aab97f$var$channel_luminance_value(channelValue) {
    const val = channelValue / 255;
    if (val <= 0.03928) return val / 12.92;
    return Math.pow((val + 0.055) / 1.055, 2.4);
}
function $0a9b090aa0aab97f$export$5c6e3c2b59b7fbbe(color) {
    const c = (0, $aQO2N.rgb)(color), r = $0a9b090aa0aab97f$var$channel_luminance_value(c.r), g = $0a9b090aa0aab97f$var$channel_luminance_value(c.g), b = $0a9b090aa0aab97f$var$channel_luminance_value(c.b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
}
// https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
function $0a9b090aa0aab97f$export$1ec78ac20028ebd4(color1, color2) {
    const lum1 = $0a9b090aa0aab97f$export$5c6e3c2b59b7fbbe(color1), lum2 = $0a9b090aa0aab97f$export$5c6e3c2b59b7fbbe(color2), lumL = Math.max(lum1, lum2), lumD = Math.min(lum1, lum2);
    return (lumL + 0.05) / (lumD + 0.05);
}
function $0a9b090aa0aab97f$export$4950aa0f605343fb() {
    const args = [].slice.call(arguments);
    args.unshift({});
    return (0, $4SWbq.extend)(...args);
}
function $0a9b090aa0aab97f$var$equal(a, b) {
    return a === b || a !== a && b !== b ? true : (0, $4SWbq.isArray)(a) ? (0, $4SWbq.isArray)(b) && a.length === b.length ? $0a9b090aa0aab97f$var$equalArray(a, b) : false : (0, $4SWbq.isObject)(a) && (0, $4SWbq.isObject)(b) ? $0a9b090aa0aab97f$var$equalObject(a, b) : false;
}
function $0a9b090aa0aab97f$var$equalArray(a, b) {
    for(let i = 0, n = a.length; i < n; ++i){
        if (!$0a9b090aa0aab97f$var$equal(a[i], b[i])) return false;
    }
    return true;
}
function $0a9b090aa0aab97f$var$equalObject(a, b) {
    for(const key in a){
        if (!$0a9b090aa0aab97f$var$equal(a[key], b[key])) return false;
    }
    return true;
}
function $0a9b090aa0aab97f$var$removePredicate(props) {
    return (_)=>$0a9b090aa0aab97f$var$equalObject(props, _);
}
function $0a9b090aa0aab97f$export$3ff57735a52b8713(name, insert, remove, toggle, modify, values) {
    const df = this.context.dataflow, data = this.context.data[name], input = data.input, stamp = df.stamp();
    let changes = data.changes, predicate, key;
    if (df._trigger === false || !(input.value.length || insert || toggle)) // nothing to do!
    return 0;
    if (!changes || changes.stamp < stamp) {
        data.changes = changes = df.changeset();
        changes.stamp = stamp;
        df.runAfter(()=>{
            data.modified = true;
            df.pulse(input, changes).run();
        }, true, 1);
    }
    if (remove) {
        predicate = remove === true ? (0, $4SWbq.truthy) : (0, $4SWbq.isArray)(remove) || (0, $4jOgW.isTuple)(remove) ? remove : $0a9b090aa0aab97f$var$removePredicate(remove);
        changes.remove(predicate);
    }
    if (insert) changes.insert(insert);
    if (toggle) {
        predicate = $0a9b090aa0aab97f$var$removePredicate(toggle);
        if (input.value.some(predicate)) changes.remove(predicate);
        else changes.insert(toggle);
    }
    if (modify) for(key in values)changes.modify(modify, key, values[key]);
    return 1;
}
function $0a9b090aa0aab97f$export$3cb7c41363e915ef(event) {
    const t = event.touches, dx = t[0].clientX - t[1].clientX, dy = t[0].clientY - t[1].clientY;
    return Math.hypot(dx, dy);
}
function $0a9b090aa0aab97f$export$93cfcabaf31e22db(event) {
    const t = event.touches;
    return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);
}
// memoize accessor functions
const $0a9b090aa0aab97f$var$accessors = {};
function $0a9b090aa0aab97f$export$c44985b87d605eff(data, name) {
    const accessor = $0a9b090aa0aab97f$var$accessors[name] || ($0a9b090aa0aab97f$var$accessors[name] = (0, $4SWbq.field)(name));
    return (0, $4SWbq.isArray)(data) ? data.map(accessor) : accessor(data);
}
function $0a9b090aa0aab97f$var$array(seq) {
    return (0, $4SWbq.isArray)(seq) || ArrayBuffer.isView(seq) ? seq : null;
}
function $0a9b090aa0aab97f$var$sequence(seq) {
    return $0a9b090aa0aab97f$var$array(seq) || ((0, $4SWbq.isString)(seq) ? seq : null);
}
function $0a9b090aa0aab97f$export$f7e2c8231c57a8bd(seq) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return $0a9b090aa0aab97f$var$array(seq).join(...args);
}
function $0a9b090aa0aab97f$export$f8e21b1e77979a08(seq) {
    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
    return $0a9b090aa0aab97f$var$sequence(seq).indexOf(...args);
}
function $0a9b090aa0aab97f$export$1ebbcc2365e3f90c(seq) {
    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
    return $0a9b090aa0aab97f$var$sequence(seq).lastIndexOf(...args);
}
function $0a9b090aa0aab97f$export$58adb3bec8346d0f(seq) {
    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
    return $0a9b090aa0aab97f$var$sequence(seq).slice(...args);
}
function $0a9b090aa0aab97f$export$77ad94ebf1c2b9ed(str, pattern, repl) {
    if ((0, $4SWbq.isFunction)(repl)) (0, $4SWbq.error)("Function argument passed to replace.");
    return String(str).replace(pattern, repl);
}
function $0a9b090aa0aab97f$export$66c1ae025e96b4bc(seq) {
    return $0a9b090aa0aab97f$var$array(seq).slice().reverse();
}
function $0a9b090aa0aab97f$export$57418c332967a4a3(count, paddingInner, paddingOuter) {
    return (0, $1UqgZ.bandSpace)(count || 0, paddingInner || 0, paddingOuter || 0);
}
function $0a9b090aa0aab97f$export$2a97ae90773dd351(name, group) {
    const s = $0a9b090aa0aab97f$var$getScale(name, (group || this).context);
    return s && s.bandwidth ? s.bandwidth() : 0;
}
function $0a9b090aa0aab97f$export$784d13d8ee351f07(name, group) {
    const s = $0a9b090aa0aab97f$var$getScale(name, (group || this).context);
    return s ? s.copy() : undefined;
}
function $0a9b090aa0aab97f$export$21779e503be4cd98(name, group) {
    const s = $0a9b090aa0aab97f$var$getScale(name, (group || this).context);
    return s ? s.domain() : [];
}
function $0a9b090aa0aab97f$export$6897c284b6f9f4dc(name, range, group) {
    const s = $0a9b090aa0aab97f$var$getScale(name, (group || this).context);
    return !s ? undefined : (0, $4SWbq.isArray)(range) ? (s.invertRange || s.invert)(range) : (s.invert || s.invertExtent)(range);
}
function $0a9b090aa0aab97f$export$d02631cccf789723(name, group) {
    const s = $0a9b090aa0aab97f$var$getScale(name, (group || this).context);
    return s && s.range ? s.range() : [];
}
function $0a9b090aa0aab97f$export$dcdf75081b88279d(name, value, group) {
    const s = $0a9b090aa0aab97f$var$getScale(name, (group || this).context);
    return s ? s(value) : undefined;
}
function $0a9b090aa0aab97f$export$794c9ebe2fafdf12(scale, p0, p1, count, group) {
    scale = $0a9b090aa0aab97f$var$getScale(scale, (group || this).context);
    const gradient = (0, $d6kNj.Gradient)(p0, p1);
    let stops = scale.domain(), min = stops[0], max = (0, $4SWbq.peek)(stops), fraction = (0, $4SWbq.identity);
    if (!(max - min)) // expand scale if domain has zero span, fix #1479
    scale = (scale.interpolator ? (0, $1UqgZ.scale)("sequential")().interpolator(scale.interpolator()) : (0, $1UqgZ.scale)("linear")().interpolate(scale.interpolate()).range(scale.range())).domain([
        min = 0,
        max = 1
    ]);
    else fraction = (0, $1UqgZ.scaleFraction)(scale, min, max);
    if (scale.ticks) {
        stops = scale.ticks(+count || 15);
        if (min !== stops[0]) stops.unshift(min);
        if (max !== (0, $4SWbq.peek)(stops)) stops.push(max);
    }
    stops.forEach((_)=>gradient.stop(fraction(_), scale(_)));
    return gradient;
}
function $0a9b090aa0aab97f$export$3532a3b0628a3094(projection, geojson, group) {
    const p = $0a9b090aa0aab97f$var$getScale(projection, (group || this).context);
    return function(context) {
        return p ? p.path.context(context)(geojson) : "";
    };
}
function $0a9b090aa0aab97f$export$4d471846ccdbf898(path) {
    let p = null;
    return function(context) {
        return context ? (0, $d6kNj.pathRender)(context, p = p || (0, $d6kNj.pathParse)(path)) : path;
    };
}
const $0a9b090aa0aab97f$var$datum = (d)=>d.data;
function $0a9b090aa0aab97f$var$treeNodes(name, context) {
    const tree = $0a9b090aa0aab97f$export$4051a07651545597.call(context, name);
    return tree.root && tree.root.lookup || {};
}
function $0a9b090aa0aab97f$export$7d434972cad462ff(name, source, target) {
    const nodes = $0a9b090aa0aab97f$var$treeNodes(name, this), s = nodes[source], t = nodes[target];
    return s && t ? s.path(t).map($0a9b090aa0aab97f$var$datum) : undefined;
}
function $0a9b090aa0aab97f$export$23bc72ed8adbb4a(name, node) {
    const n = $0a9b090aa0aab97f$var$treeNodes(name, this)[node];
    return n ? n.ancestors().map($0a9b090aa0aab97f$var$datum) : undefined;
}
const $0a9b090aa0aab97f$var$_window = ()=>typeof window !== "undefined" && window || null;
function $0a9b090aa0aab97f$export$be623a1d3e871e62() {
    const w = $0a9b090aa0aab97f$var$_window();
    return w ? w.screen : {};
}
function $0a9b090aa0aab97f$export$994b0103697d2bf() {
    const w = $0a9b090aa0aab97f$var$_window();
    return w ? [
        w.innerWidth,
        w.innerHeight
    ] : [
        undefined,
        undefined
    ];
}
function $0a9b090aa0aab97f$export$d433d6dd3a4e0c79() {
    const view = this.context.dataflow, el = view.container && view.container();
    return el ? [
        el.clientWidth,
        el.clientHeight
    ] : [
        undefined,
        undefined
    ];
}
function $0a9b090aa0aab97f$var$intersect(b, opt, group) {
    if (!b) return [];
    const [u, v] = b, box = new (0, $d6kNj.Bounds)().set(u[0], u[1], v[0], v[1]), scene = group || this.context.dataflow.scenegraph().root;
    return (0, $d6kNj.intersect)(scene, box, $0a9b090aa0aab97f$var$filter(opt));
}
function $0a9b090aa0aab97f$var$filter(opt) {
    let p = null;
    if (opt) {
        const types = (0, $4SWbq.array)(opt.marktype), names = (0, $4SWbq.array)(opt.markname);
        p = (_)=>(!types.length || types.some((t)=>_.marktype === t)) && (!names.length || names.some((s)=>_.name === s));
    }
    return p;
}
/**
 * Appends a new point to the lasso
 *
 * @param {*} lasso the lasso in pixel space
 * @param {*} x the x coordinate in pixel space
 * @param {*} y the y coordinate in pixel space
 * @param {*} minDist the minimum distance, in pixels, that thenew point needs to be apart from the last point
 * @returns a new array containing the lasso with the new point
 */ function $0a9b090aa0aab97f$var$lassoAppend(lasso, x, y) {
    let minDist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;
    lasso = (0, $4SWbq.array)(lasso);
    const last = lasso[lasso.length - 1];
    // Add point to lasso if its the first point or distance to last point exceed minDist
    return last === undefined || Math.hypot(last[0] - x, last[1] - y) > minDist ? [
        ...lasso,
        [
            x,
            y
        ]
    ] : lasso;
}
/**
 * Generates a svg path command which draws a lasso
 *
 * @param {*} lasso the lasso in pixel space in the form [[x,y], [x,y], ...]
 * @returns the svg path command that draws the lasso
 */ function $0a9b090aa0aab97f$var$lassoPath(lasso) {
    return (0, $4SWbq.array)(lasso).reduce((svg, _ref, i)=>{
        let [x, y] = _ref;
        return svg += i == 0 ? `M ${x},${y} ` : i === lasso.length - 1 ? " Z" : `L ${x},${y} `;
    }, "");
}
/**
 * Inverts the lasso from pixel space to an array of vega scenegraph tuples
 *
 * @param {*} data the dataset
 * @param {*} pixelLasso the lasso in pixel space, [[x,y], [x,y], ...]
 * @param {*} unit the unit where the lasso is defined
 *
 * @returns an array of vega scenegraph tuples
 */ function $0a9b090aa0aab97f$var$intersectLasso(markname, pixelLasso, unit) {
    const { x: x, y: y, mark: mark } = unit;
    const bb = new (0, $d6kNj.Bounds)().set(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
    // Get bounding box around lasso
    for (const [px, py] of pixelLasso){
        if (px < bb.x1) bb.x1 = px;
        if (px > bb.x2) bb.x2 = px;
        if (py < bb.y1) bb.y1 = py;
        if (py > bb.y2) bb.y2 = py;
    }
    // Translate bb against unit coordinates
    bb.translate(x, y);
    const intersection = $0a9b090aa0aab97f$var$intersect([
        [
            bb.x1,
            bb.y1
        ],
        [
            bb.x2,
            bb.y2
        ]
    ], markname, mark);
    // Check every point against the lasso
    return intersection.filter((tuple)=>$0a9b090aa0aab97f$var$pointInPolygon(tuple.x, tuple.y, pixelLasso));
}
/**
 * Performs a test if a point is inside a polygon based on the idea from
 * https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html
 *
 * This method will not need the same start/end point since it wraps around the edges of the array
 *
 * @param {*} test a point to test against
 * @param {*} polygon a polygon in the form [[x,y], [x,y], ...]
 * @returns true if the point lies inside the polygon, false otherwise
 */ function $0a9b090aa0aab97f$var$pointInPolygon(testx, testy, polygon) {
    let intersections = 0;
    for(let i = 0, j = polygon.length - 1; i < polygon.length; j = i++){
        const [prevX, prevY] = polygon[j];
        const [x, y] = polygon[i];
        // count intersections
        if (y > testy != prevY > testy && testx < (prevX - x) * (testy - y) / (prevY - y) + x) intersections++;
    }
    // point is in polygon if intersection count is odd
    return intersections & 1;
}
// Expression function context object
const $0a9b090aa0aab97f$export$99ce98b0bb2ba83f = {
    random () {
        return (0, $7Par0.random)();
    },
    cumulativeNormal: // override default
    $7Par0.cumulativeNormal,
    cumulativeLogNormal: $7Par0.cumulativeLogNormal,
    cumulativeUniform: $7Par0.cumulativeUniform,
    densityNormal: $7Par0.densityNormal,
    densityLogNormal: $7Par0.densityLogNormal,
    densityUniform: $7Par0.densityUniform,
    quantileNormal: $7Par0.quantileNormal,
    quantileLogNormal: $7Par0.quantileLogNormal,
    quantileUniform: $7Par0.quantileUniform,
    sampleNormal: $7Par0.sampleNormal,
    sampleLogNormal: $7Par0.sampleLogNormal,
    sampleUniform: $7Par0.sampleUniform,
    isArray: $4SWbq.isArray,
    isBoolean: $4SWbq.isBoolean,
    isDate: $4SWbq.isDate,
    isDefined (_) {
        return _ !== undefined;
    },
    isNumber: $4SWbq.isNumber,
    isObject: $4SWbq.isObject,
    isRegExp: $4SWbq.isRegExp,
    isString: $4SWbq.isString,
    isTuple: $4jOgW.isTuple,
    isValid (_) {
        return _ != null && _ === _;
    },
    toBoolean: $4SWbq.toBoolean,
    toDate (_) {
        return (0, $4SWbq.toDate)(_);
    },
    toNumber: // suppress extra arguments
    $4SWbq.toNumber,
    toString: $4SWbq.toString,
    indexof: $0a9b090aa0aab97f$export$f8e21b1e77979a08,
    join: $0a9b090aa0aab97f$export$f7e2c8231c57a8bd,
    lastindexof: $0a9b090aa0aab97f$export$1ebbcc2365e3f90c,
    replace: $0a9b090aa0aab97f$export$77ad94ebf1c2b9ed,
    reverse: $0a9b090aa0aab97f$export$66c1ae025e96b4bc,
    slice: $0a9b090aa0aab97f$export$58adb3bec8346d0f,
    flush: $4SWbq.flush,
    lerp: $4SWbq.lerp,
    merge: $0a9b090aa0aab97f$export$4950aa0f605343fb,
    pad: $4SWbq.pad,
    peek: $4SWbq.peek,
    pluck: $0a9b090aa0aab97f$export$c44985b87d605eff,
    span: $4SWbq.span,
    inrange: $4SWbq.inrange,
    truncate: $4SWbq.truncate,
    rgb: $aQO2N.rgb,
    lab: $bkMew.default,
    hcl: $bkMew.hcl,
    hsl: $aQO2N.hsl,
    luminance: $0a9b090aa0aab97f$export$5c6e3c2b59b7fbbe,
    contrast: $0a9b090aa0aab97f$export$1ec78ac20028ebd4,
    sequence: (0, $apu36.default),
    format: $0a9b090aa0aab97f$export$d9468344d3651243,
    utcFormat: $0a9b090aa0aab97f$export$1a08fe38f63ebbbb,
    utcParse: $0a9b090aa0aab97f$export$3edae9cf8e233729,
    utcOffset: $i7MAj.utcOffset,
    utcSequence: $i7MAj.utcSequence,
    timeFormat: $0a9b090aa0aab97f$export$94f4d87fad5dcf9a,
    timeParse: $0a9b090aa0aab97f$export$32b9cd16e1b8c8d2,
    timeOffset: $i7MAj.timeOffset,
    timeSequence: $i7MAj.timeSequence,
    timeUnitSpecifier: $i7MAj.timeUnitSpecifier,
    monthFormat: $0a9b090aa0aab97f$export$bf57ab38cc2c11f0,
    monthAbbrevFormat: $0a9b090aa0aab97f$export$ce28898b4e9d7553,
    dayFormat: $0a9b090aa0aab97f$export$da6b70c58e1114fd,
    dayAbbrevFormat: $0a9b090aa0aab97f$export$ba2a09484f0152f7,
    quarter: $4SWbq.quarter,
    utcquarter: $4SWbq.utcquarter,
    week: $i7MAj.week,
    utcweek: $i7MAj.utcweek,
    dayofyear: $i7MAj.dayofyear,
    utcdayofyear: $i7MAj.utcdayofyear,
    warn: $0a9b090aa0aab97f$export$c106dd0671a0fc2d,
    info: $0a9b090aa0aab97f$export$a80b3bd66acc52ff,
    debug: $0a9b090aa0aab97f$export$1c9f709888824e05,
    extent (_) {
        return (0, $4SWbq.extent)(_);
    },
    inScope: // suppress extra arguments
    $0a9b090aa0aab97f$export$66787a6abd6e4956,
    intersect: $0a9b090aa0aab97f$var$intersect,
    clampRange: $4SWbq.clampRange,
    pinchDistance: $0a9b090aa0aab97f$export$3cb7c41363e915ef,
    pinchAngle: $0a9b090aa0aab97f$export$93cfcabaf31e22db,
    screen: $0a9b090aa0aab97f$export$be623a1d3e871e62,
    containerSize: $0a9b090aa0aab97f$export$d433d6dd3a4e0c79,
    windowSize: $0a9b090aa0aab97f$export$994b0103697d2bf,
    bandspace: $0a9b090aa0aab97f$export$57418c332967a4a3,
    setdata: $0a9b090aa0aab97f$export$7a47df230897cb4,
    pathShape: $0a9b090aa0aab97f$export$4d471846ccdbf898,
    panLinear: $4SWbq.panLinear,
    panLog: $4SWbq.panLog,
    panPow: $4SWbq.panPow,
    panSymlog: $4SWbq.panSymlog,
    zoomLinear: $4SWbq.zoomLinear,
    zoomLog: $4SWbq.zoomLog,
    zoomPow: $4SWbq.zoomPow,
    zoomSymlog: $4SWbq.zoomSymlog,
    encode: $0a9b090aa0aab97f$export$c564cdbbe6da493,
    modify: $0a9b090aa0aab97f$export$3ff57735a52b8713,
    lassoAppend: $0a9b090aa0aab97f$var$lassoAppend,
    lassoPath: $0a9b090aa0aab97f$var$lassoPath,
    intersectLasso: $0a9b090aa0aab97f$var$intersectLasso
};
const $0a9b090aa0aab97f$var$eventFunctions = [
    "view",
    "item",
    "group",
    "xy",
    "x",
    "y"
], // event functions
$0a9b090aa0aab97f$var$eventPrefix = "event.vega.", // event function prefix
$0a9b090aa0aab97f$var$thisPrefix = "this.", // function context prefix
$0a9b090aa0aab97f$var$astVisitors = {}; // AST visitors for dependency analysis
// export code generator parameters
const $0a9b090aa0aab97f$export$6ae903bb3002e8f3 = {
    forbidden: [
        "_"
    ],
    allowed: [
        "datum",
        "event",
        "item"
    ],
    fieldvar: "datum",
    globalvar: (id)=>`_[${(0, $4SWbq.stringValue)($0a9b090aa0aab97f$export$6813c7938c62a9c1 + id)}]`,
    functions: $0a9b090aa0aab97f$var$buildFunctions,
    constants: (0, $60BEk.constants),
    visitors: $0a9b090aa0aab97f$var$astVisitors
};
// export code generator
const $0a9b090aa0aab97f$export$a3282c14454ef553 = (0, $60BEk.codegenExpression)($0a9b090aa0aab97f$export$6ae903bb3002e8f3);
// Build expression function registry
function $0a9b090aa0aab97f$var$buildFunctions(codegen) {
    const fn = (0, $60BEk.functions)(codegen);
    $0a9b090aa0aab97f$var$eventFunctions.forEach((name)=>fn[name] = $0a9b090aa0aab97f$var$eventPrefix + name);
    for(const name in $0a9b090aa0aab97f$export$99ce98b0bb2ba83f)fn[name] = $0a9b090aa0aab97f$var$thisPrefix + name;
    (0, $4SWbq.extend)(fn, $0a9b090aa0aab97f$var$internalScaleFunctions(codegen, $0a9b090aa0aab97f$export$99ce98b0bb2ba83f, $0a9b090aa0aab97f$var$astVisitors));
    return fn;
}
// Register an expression function
function $0a9b090aa0aab97f$export$4e2380945854200d(name, fn, visitor) {
    if (arguments.length === 1) return $0a9b090aa0aab97f$export$99ce98b0bb2ba83f[name];
    // register with the functionContext
    $0a9b090aa0aab97f$export$99ce98b0bb2ba83f[name] = fn;
    // if there is an astVisitor register that, too
    if (visitor) $0a9b090aa0aab97f$var$astVisitors[name] = visitor;
    // if the code generator has already been initialized,
    // we need to also register the function with it
    if ($0a9b090aa0aab97f$export$a3282c14454ef553) $0a9b090aa0aab97f$export$a3282c14454ef553.functions[name] = $0a9b090aa0aab97f$var$thisPrefix + name;
    return this;
}
// register expression functions with ast visitors
$0a9b090aa0aab97f$export$4e2380945854200d("bandwidth", $0a9b090aa0aab97f$export$2a97ae90773dd351, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("copy", $0a9b090aa0aab97f$export$784d13d8ee351f07, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("domain", $0a9b090aa0aab97f$export$21779e503be4cd98, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("range", $0a9b090aa0aab97f$export$d02631cccf789723, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("invert", $0a9b090aa0aab97f$export$6897c284b6f9f4dc, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("scale", $0a9b090aa0aab97f$export$dcdf75081b88279d, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("gradient", $0a9b090aa0aab97f$export$794c9ebe2fafdf12, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("geoArea", $0a9b090aa0aab97f$export$a514eb22fe5f7d4, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("geoBounds", $0a9b090aa0aab97f$export$b6b1d97c43a180f2, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("geoCentroid", $0a9b090aa0aab97f$export$8d3c34225495dcd8, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("geoShape", $0a9b090aa0aab97f$export$3532a3b0628a3094, $0a9b090aa0aab97f$export$ab0bf127c1223ec2);
$0a9b090aa0aab97f$export$4e2380945854200d("indata", $0a9b090aa0aab97f$export$4a311d72439cd8c8, $0a9b090aa0aab97f$export$523783f4728e16ea);
$0a9b090aa0aab97f$export$4e2380945854200d("data", $0a9b090aa0aab97f$export$4051a07651545597, $0a9b090aa0aab97f$export$358d0ff194d7698b);
$0a9b090aa0aab97f$export$4e2380945854200d("treePath", $0a9b090aa0aab97f$export$7d434972cad462ff, $0a9b090aa0aab97f$export$358d0ff194d7698b);
$0a9b090aa0aab97f$export$4e2380945854200d("treeAncestors", $0a9b090aa0aab97f$export$23bc72ed8adbb4a, $0a9b090aa0aab97f$export$358d0ff194d7698b);
// register Vega-Lite selection functions
$0a9b090aa0aab97f$export$4e2380945854200d("vlSelectionTest", (0, $lBblC.selectionTest), (0, $lBblC.selectionVisitor));
$0a9b090aa0aab97f$export$4e2380945854200d("vlSelectionIdTest", (0, $lBblC.selectionIdTest), (0, $lBblC.selectionVisitor));
$0a9b090aa0aab97f$export$4e2380945854200d("vlSelectionResolve", (0, $lBblC.selectionResolve), (0, $lBblC.selectionVisitor));
$0a9b090aa0aab97f$export$4e2380945854200d("vlSelectionTuples", (0, $lBblC.selectionTuples));
function $0a9b090aa0aab97f$export$ed9c825e502c46c8(expr, scope) {
    const params = {};
    // parse the expression to an abstract syntax tree (ast)
    let ast;
    try {
        expr = (0, $4SWbq.isString)(expr) ? expr : (0, $4SWbq.stringValue)(expr) + "";
        ast = (0, $60BEk.parseExpression)(expr);
    } catch (err) {
        (0, $4SWbq.error)("Expression parse error: " + expr);
    }
    // analyze ast function calls for dependencies
    ast.visit((node)=>{
        if (node.type !== (0, $60BEk.CallExpression)) return;
        const name = node.callee.name, visit = $0a9b090aa0aab97f$export$6ae903bb3002e8f3.visitors[name];
        if (visit) visit(name, node.arguments, scope, params);
    });
    // perform code generation
    const gen = $0a9b090aa0aab97f$export$a3282c14454ef553(ast);
    // collect signal dependencies
    gen.globals.forEach((name)=>{
        const signalName = $0a9b090aa0aab97f$export$6813c7938c62a9c1 + name;
        if (!(0, $4SWbq.hasOwnProperty)(params, signalName) && scope.getSignal(name)) params[signalName] = scope.signalRef(name);
    });
    // return generated expression code and dependencies
    return {
        $expr: (0, $4SWbq.extend)({
            code: gen.code
        }, scope.options.ast ? {
            ast: ast
        } : null),
        $fields: gen.fields,
        $params: params
    };
}

});
parcelRegister("60BEk", function(module, exports) {

$parcel$export(module.exports, "Literal", () => $45fff29328a4ee5d$export$e175ae9e414693bc);
$parcel$export(module.exports, "CallExpression", () => $45fff29328a4ee5d$export$6f3d80189eb72cd4);
$parcel$export(module.exports, "parseExpression", () => $45fff29328a4ee5d$export$ed9c825e502c46c8);
$parcel$export(module.exports, "constants", () => $45fff29328a4ee5d$export$1a988e7317c65621);
$parcel$export(module.exports, "functions", () => $45fff29328a4ee5d$export$18af1f934c132a41);
$parcel$export(module.exports, "codegenExpression", () => $45fff29328a4ee5d$export$7be90eb119737cf7);

var $4SWbq = parcelRequire("4SWbq");
const $45fff29328a4ee5d$export$556f6b8307a139f5 = "RawCode";
const $45fff29328a4ee5d$export$e175ae9e414693bc = "Literal";
const $45fff29328a4ee5d$export$41b04b3a73e7216d = "Property";
const $45fff29328a4ee5d$export$989167234458594d = "Identifier";
const $45fff29328a4ee5d$export$30253b9cf92e4d1c = "ArrayExpression";
const $45fff29328a4ee5d$export$5351bc98fa48e09c = "BinaryExpression";
const $45fff29328a4ee5d$export$6f3d80189eb72cd4 = "CallExpression";
const $45fff29328a4ee5d$export$12447f42bd680fc8 = "ConditionalExpression";
const $45fff29328a4ee5d$export$a4a3b58572d4d142 = "LogicalExpression";
const $45fff29328a4ee5d$export$d37226d703db8d60 = "MemberExpression";
const $45fff29328a4ee5d$export$aabf29a2b17a2b95 = "ObjectExpression";
const $45fff29328a4ee5d$export$b832e164a8af4bc7 = "UnaryExpression";
function $45fff29328a4ee5d$export$ace047af85406962(type) {
    this.type = type;
}
$45fff29328a4ee5d$export$ace047af85406962.prototype.visit = function(visitor) {
    let c, i, n;
    if (visitor(this)) return 1;
    for(c = $45fff29328a4ee5d$var$children(this), i = 0, n = c.length; i < n; ++i){
        if (c[i].visit(visitor)) return 1;
    }
};
function $45fff29328a4ee5d$var$children(node) {
    switch(node.type){
        case $45fff29328a4ee5d$export$30253b9cf92e4d1c:
            return node.elements;
        case $45fff29328a4ee5d$export$5351bc98fa48e09c:
        case $45fff29328a4ee5d$export$a4a3b58572d4d142:
            return [
                node.left,
                node.right
            ];
        case $45fff29328a4ee5d$export$6f3d80189eb72cd4:
            return [
                node.callee
            ].concat(node.arguments);
        case $45fff29328a4ee5d$export$12447f42bd680fc8:
            return [
                node.test,
                node.consequent,
                node.alternate
            ];
        case $45fff29328a4ee5d$export$d37226d703db8d60:
            return [
                node.object,
                node.property
            ];
        case $45fff29328a4ee5d$export$aabf29a2b17a2b95:
            return node.properties;
        case $45fff29328a4ee5d$export$41b04b3a73e7216d:
            return [
                node.key,
                node.value
            ];
        case $45fff29328a4ee5d$export$b832e164a8af4bc7:
            return [
                node.argument
            ];
        case $45fff29328a4ee5d$export$989167234458594d:
        case $45fff29328a4ee5d$export$e175ae9e414693bc:
        case $45fff29328a4ee5d$export$556f6b8307a139f5:
        default:
            return [];
    }
}
/*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:

  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ var $45fff29328a4ee5d$var$TokenName, $45fff29328a4ee5d$var$source, $45fff29328a4ee5d$var$index, $45fff29328a4ee5d$var$length, $45fff29328a4ee5d$var$lookahead;
var $45fff29328a4ee5d$var$TokenBooleanLiteral = 1, $45fff29328a4ee5d$var$TokenEOF = 2, $45fff29328a4ee5d$var$TokenIdentifier = 3, $45fff29328a4ee5d$var$TokenKeyword = 4, $45fff29328a4ee5d$var$TokenNullLiteral = 5, $45fff29328a4ee5d$var$TokenNumericLiteral = 6, $45fff29328a4ee5d$var$TokenPunctuator = 7, $45fff29328a4ee5d$var$TokenStringLiteral = 8, $45fff29328a4ee5d$var$TokenRegularExpression = 9;
$45fff29328a4ee5d$var$TokenName = {};
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenBooleanLiteral] = "Boolean";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenEOF] = "<end>";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenIdentifier] = "Identifier";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenKeyword] = "Keyword";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenNullLiteral] = "Null";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenNumericLiteral] = "Numeric";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenPunctuator] = "Punctuator";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenStringLiteral] = "String";
$45fff29328a4ee5d$var$TokenName[$45fff29328a4ee5d$var$TokenRegularExpression] = "RegularExpression";
var $45fff29328a4ee5d$var$SyntaxArrayExpression = "ArrayExpression", $45fff29328a4ee5d$var$SyntaxBinaryExpression = "BinaryExpression", $45fff29328a4ee5d$var$SyntaxCallExpression = "CallExpression", $45fff29328a4ee5d$var$SyntaxConditionalExpression = "ConditionalExpression", $45fff29328a4ee5d$var$SyntaxIdentifier = "Identifier", $45fff29328a4ee5d$var$SyntaxLiteral = "Literal", $45fff29328a4ee5d$var$SyntaxLogicalExpression = "LogicalExpression", $45fff29328a4ee5d$var$SyntaxMemberExpression = "MemberExpression", $45fff29328a4ee5d$var$SyntaxObjectExpression = "ObjectExpression", $45fff29328a4ee5d$var$SyntaxProperty = "Property", $45fff29328a4ee5d$var$SyntaxUnaryExpression = "UnaryExpression";
// Error messages should be identical to V8.
var $45fff29328a4ee5d$var$MessageUnexpectedToken = "Unexpected token %0", $45fff29328a4ee5d$var$MessageUnexpectedNumber = "Unexpected number", $45fff29328a4ee5d$var$MessageUnexpectedString = "Unexpected string", $45fff29328a4ee5d$var$MessageUnexpectedIdentifier = "Unexpected identifier", $45fff29328a4ee5d$var$MessageUnexpectedReserved = "Unexpected reserved word", $45fff29328a4ee5d$var$MessageUnexpectedEOS = "Unexpected end of input", $45fff29328a4ee5d$var$MessageInvalidRegExp = "Invalid regular expression", $45fff29328a4ee5d$var$MessageUnterminatedRegExp = "Invalid regular expression: missing /", $45fff29328a4ee5d$var$MessageStrictOctalLiteral = "Octal literals are not allowed in strict mode.", $45fff29328a4ee5d$var$MessageStrictDuplicateProperty = "Duplicate data property in object literal not allowed in strict mode";
var $45fff29328a4ee5d$var$ILLEGAL = "ILLEGAL", $45fff29328a4ee5d$var$DISABLED = "Disabled.";
// See also tools/generate-unicode-regex.py.
var $45fff29328a4ee5d$var$RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"), // eslint-disable-next-line no-misleading-character-class
$45fff29328a4ee5d$var$RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");
// Ensure the condition is true, otherwise throw an error.
// This is only to have a better contract semantic, i.e. another safety net
// to catch a logic error. The condition shall be fulfilled in normal case.
// Do NOT use this to enforce a certain condition on any user input.
function $45fff29328a4ee5d$var$assert(condition, message) {
    /* istanbul ignore next */ if (!condition) throw new Error("ASSERT: " + message);
}
function $45fff29328a4ee5d$var$isDecimalDigit(ch) {
    return ch >= 0x30 && ch <= 0x39; // 0..9
}
function $45fff29328a4ee5d$var$isHexDigit(ch) {
    return "0123456789abcdefABCDEF".indexOf(ch) >= 0;
}
function $45fff29328a4ee5d$var$isOctalDigit(ch) {
    return "01234567".indexOf(ch) >= 0;
}
// 7.2 White Space
function $45fff29328a4ee5d$var$isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [
        0x1680,
        0x180E,
        0x2000,
        0x2001,
        0x2002,
        0x2003,
        0x2004,
        0x2005,
        0x2006,
        0x2007,
        0x2008,
        0x2009,
        0x200A,
        0x202F,
        0x205F,
        0x3000,
        0xFEFF
    ].indexOf(ch) >= 0;
}
// 7.3 Line Terminators
function $45fff29328a4ee5d$var$isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
}
// 7.6 Identifier Names and Identifiers
function $45fff29328a4ee5d$var$isIdentifierStart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && $45fff29328a4ee5d$var$RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
}
function $45fff29328a4ee5d$var$isIdentifierPart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch >= 0x30 && ch <= 0x39 || // 0..9
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && $45fff29328a4ee5d$var$RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
}
// 7.6.1.1 Keywords
const $45fff29328a4ee5d$var$keywords = {
    "if": 1,
    "in": 1,
    "do": 1,
    "var": 1,
    "for": 1,
    "new": 1,
    "try": 1,
    "let": 1,
    "this": 1,
    "else": 1,
    "case": 1,
    "void": 1,
    "with": 1,
    "enum": 1,
    "while": 1,
    "break": 1,
    "catch": 1,
    "throw": 1,
    "const": 1,
    "yield": 1,
    "class": 1,
    "super": 1,
    "return": 1,
    "typeof": 1,
    "delete": 1,
    "switch": 1,
    "export": 1,
    "import": 1,
    "public": 1,
    "static": 1,
    "default": 1,
    "finally": 1,
    "extends": 1,
    "package": 1,
    "private": 1,
    "function": 1,
    "continue": 1,
    "debugger": 1,
    "interface": 1,
    "protected": 1,
    "instanceof": 1,
    "implements": 1
};
function $45fff29328a4ee5d$var$skipComment() {
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        const ch = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index);
        if ($45fff29328a4ee5d$var$isWhiteSpace(ch) || $45fff29328a4ee5d$var$isLineTerminator(ch)) ++$45fff29328a4ee5d$var$index;
        else break;
    }
}
function $45fff29328a4ee5d$var$scanHexEscape(prefix) {
    var i, len, ch, code = 0;
    len = prefix === "u" ? 4 : 2;
    for(i = 0; i < len; ++i)if ($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length && $45fff29328a4ee5d$var$isHexDigit($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index])) {
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    } else $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    return String.fromCharCode(code);
}
function $45fff29328a4ee5d$var$scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;
    ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
    code = 0;
    // At least, one hex digit is required.
    if (ch === "}") $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        if (!$45fff29328a4ee5d$var$isHexDigit(ch)) break;
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    }
    if (code > 0x10FFFF || ch !== "}") $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    // UTF-16 Encoding
    if (code <= 0xFFFF) return String.fromCharCode(code);
    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
}
function $45fff29328a4ee5d$var$getEscapedIdentifier() {
    var ch, id;
    ch = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index++);
    id = String.fromCharCode(ch);
    // '\u' (U+005C, U+0075) denotes an escaped character.
    if (ch === 0x5C) {
        if ($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index) !== 0x75) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
        ++$45fff29328a4ee5d$var$index;
        ch = $45fff29328a4ee5d$var$scanHexEscape("u");
        if (!ch || ch === "\\" || !$45fff29328a4ee5d$var$isIdentifierStart(ch.charCodeAt(0))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
        id = ch;
    }
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        ch = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index);
        if (!$45fff29328a4ee5d$var$isIdentifierPart(ch)) break;
        ++$45fff29328a4ee5d$var$index;
        id += String.fromCharCode(ch);
        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
            id = id.substr(0, id.length - 1);
            if ($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index) !== 0x75) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
            ++$45fff29328a4ee5d$var$index;
            ch = $45fff29328a4ee5d$var$scanHexEscape("u");
            if (!ch || ch === "\\" || !$45fff29328a4ee5d$var$isIdentifierPart(ch.charCodeAt(0))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
            id += ch;
        }
    }
    return id;
}
function $45fff29328a4ee5d$var$getIdentifier() {
    var start, ch;
    start = $45fff29328a4ee5d$var$index++;
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        ch = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index);
        if (ch === 0x5C) {
            // Blackslash (U+005C) marks Unicode escape sequence.
            $45fff29328a4ee5d$var$index = start;
            return $45fff29328a4ee5d$var$getEscapedIdentifier();
        }
        if ($45fff29328a4ee5d$var$isIdentifierPart(ch)) ++$45fff29328a4ee5d$var$index;
        else break;
    }
    return $45fff29328a4ee5d$var$source.slice(start, $45fff29328a4ee5d$var$index);
}
function $45fff29328a4ee5d$var$scanIdentifier() {
    var start, id, type;
    start = $45fff29328a4ee5d$var$index;
    // Backslash (U+005C) starts an escaped character.
    id = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index) === 0x5C ? $45fff29328a4ee5d$var$getEscapedIdentifier() : $45fff29328a4ee5d$var$getIdentifier();
    // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.
    if (id.length === 1) type = $45fff29328a4ee5d$var$TokenIdentifier;
    else if ($45fff29328a4ee5d$var$keywords.hasOwnProperty(id)) // eslint-disable-line no-prototype-builtins
    type = $45fff29328a4ee5d$var$TokenKeyword;
    else if (id === "null") type = $45fff29328a4ee5d$var$TokenNullLiteral;
    else if (id === "true" || id === "false") type = $45fff29328a4ee5d$var$TokenBooleanLiteral;
    else type = $45fff29328a4ee5d$var$TokenIdentifier;
    return {
        type: type,
        value: id,
        start: start,
        end: $45fff29328a4ee5d$var$index
    };
}
// 7.7 Punctuators
function $45fff29328a4ee5d$var$scanPunctuator() {
    var start = $45fff29328a4ee5d$var$index, code = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index), code2, ch1 = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index], ch2, ch3, ch4;
    switch(code){
        // Check for most common single-character punctuators.
        case 0x2E:
        case 0x28:
        case 0x29:
        case 0x3B:
        case 0x2C:
        case 0x7B:
        case 0x7D:
        case 0x5B:
        case 0x5D:
        case 0x3A:
        case 0x3F:
        case 0x7E:
            // ~
            ++$45fff29328a4ee5d$var$index;
            return {
                type: $45fff29328a4ee5d$var$TokenPunctuator,
                value: String.fromCharCode(code),
                start: start,
                end: $45fff29328a4ee5d$var$index
            };
        default:
            code2 = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index + 1);
            // '=' (U+003D) marks an assignment or comparison operator.
            if (code2 === 0x3D) switch(code){
                case 0x2B:
                case 0x2D:
                case 0x2F:
                case 0x3C:
                case 0x3E:
                case 0x5E:
                case 0x7C:
                case 0x25:
                case 0x26:
                case 0x2A:
                    // *
                    $45fff29328a4ee5d$var$index += 2;
                    return {
                        type: $45fff29328a4ee5d$var$TokenPunctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        start: start,
                        end: $45fff29328a4ee5d$var$index
                    };
                case 0x21:
                case 0x3D:
                    // =
                    $45fff29328a4ee5d$var$index += 2;
                    // !== and ===
                    if ($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index) === 0x3D) ++$45fff29328a4ee5d$var$index;
                    return {
                        type: $45fff29328a4ee5d$var$TokenPunctuator,
                        value: $45fff29328a4ee5d$var$source.slice(start, $45fff29328a4ee5d$var$index),
                        start: start,
                        end: $45fff29328a4ee5d$var$index
                    };
            }
    }
    // 4-character punctuator: >>>=
    ch4 = $45fff29328a4ee5d$var$source.substr($45fff29328a4ee5d$var$index, 4);
    if (ch4 === ">>>=") {
        $45fff29328a4ee5d$var$index += 4;
        return {
            type: $45fff29328a4ee5d$var$TokenPunctuator,
            value: ch4,
            start: start,
            end: $45fff29328a4ee5d$var$index
        };
    }
    // 3-character punctuators: === !== >>> <<= >>=
    ch3 = ch4.substr(0, 3);
    if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
        $45fff29328a4ee5d$var$index += 3;
        return {
            type: $45fff29328a4ee5d$var$TokenPunctuator,
            value: ch3,
            start: start,
            end: $45fff29328a4ee5d$var$index
        };
    }
    // Other 2-character punctuators: ++ -- << >> && ||
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && "+-<>&|".indexOf(ch1) >= 0 || ch2 === "=>") {
        $45fff29328a4ee5d$var$index += 2;
        return {
            type: $45fff29328a4ee5d$var$TokenPunctuator,
            value: ch2,
            start: start,
            end: $45fff29328a4ee5d$var$index
        };
    }
    if (ch2 === "//") $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    // 1-character punctuators: < > = ! + - * % & | ^ /
    if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
        ++$45fff29328a4ee5d$var$index;
        return {
            type: $45fff29328a4ee5d$var$TokenPunctuator,
            value: ch1,
            start: start,
            end: $45fff29328a4ee5d$var$index
        };
    }
    $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
}
// 7.8.3 Numeric Literals
function $45fff29328a4ee5d$var$scanHexLiteral(start) {
    let number = "";
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        if (!$45fff29328a4ee5d$var$isHexDigit($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index])) break;
        number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
    }
    if (number.length === 0) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    if ($45fff29328a4ee5d$var$isIdentifierStart($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    return {
        type: $45fff29328a4ee5d$var$TokenNumericLiteral,
        value: parseInt("0x" + number, 16),
        start: start,
        end: $45fff29328a4ee5d$var$index
    };
}
function $45fff29328a4ee5d$var$scanOctalLiteral(start) {
    let number = "0" + $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        if (!$45fff29328a4ee5d$var$isOctalDigit($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index])) break;
        number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
    }
    if ($45fff29328a4ee5d$var$isIdentifierStart($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index)) || $45fff29328a4ee5d$var$isDecimalDigit($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    return {
        type: $45fff29328a4ee5d$var$TokenNumericLiteral,
        value: parseInt(number, 8),
        octal: true,
        start: start,
        end: $45fff29328a4ee5d$var$index
    };
}
function $45fff29328a4ee5d$var$scanNumericLiteral() {
    var number, start, ch;
    ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
    $45fff29328a4ee5d$var$assert($45fff29328a4ee5d$var$isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
    start = $45fff29328a4ee5d$var$index;
    number = "";
    if (ch !== ".") {
        number = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
        // Hex number starts with '0x'.
        // Octal number starts with '0'.
        if (number === "0") {
            if (ch === "x" || ch === "X") {
                ++$45fff29328a4ee5d$var$index;
                return $45fff29328a4ee5d$var$scanHexLiteral(start);
            }
            if ($45fff29328a4ee5d$var$isOctalDigit(ch)) return $45fff29328a4ee5d$var$scanOctalLiteral(start);
            // decimal number starts with '0' such as '09' is illegal.
            if (ch && $45fff29328a4ee5d$var$isDecimalDigit(ch.charCodeAt(0))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
        }
        while($45fff29328a4ee5d$var$isDecimalDigit($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index)))number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
    }
    if (ch === ".") {
        number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        while($45fff29328a4ee5d$var$isDecimalDigit($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index)))number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
    }
    if (ch === "e" || ch === "E") {
        number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
        if (ch === "+" || ch === "-") number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        if ($45fff29328a4ee5d$var$isDecimalDigit($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index))) while($45fff29328a4ee5d$var$isDecimalDigit($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index)))number += $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        else $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    }
    if ($45fff29328a4ee5d$var$isIdentifierStart($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    return {
        type: $45fff29328a4ee5d$var$TokenNumericLiteral,
        value: parseFloat(number),
        start: start,
        end: $45fff29328a4ee5d$var$index
    };
}
// 7.8.4 String Literals
function $45fff29328a4ee5d$var$scanStringLiteral() {
    var str = "", quote, start, ch, code, octal = false;
    quote = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
    $45fff29328a4ee5d$var$assert(quote === "'" || quote === '"', "String literal must starts with a quote");
    start = $45fff29328a4ee5d$var$index;
    ++$45fff29328a4ee5d$var$index;
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        if (ch === quote) {
            quote = "";
            break;
        } else if (ch === "\\") {
            ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
            if (!ch || !$45fff29328a4ee5d$var$isLineTerminator(ch.charCodeAt(0))) switch(ch){
                case "u":
                case "x":
                    if ($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index] === "{") {
                        ++$45fff29328a4ee5d$var$index;
                        str += $45fff29328a4ee5d$var$scanUnicodeCodePointEscape();
                    } else str += $45fff29328a4ee5d$var$scanHexEscape(ch);
                    break;
                case "n":
                    str += "\n";
                    break;
                case "r":
                    str += "\r";
                    break;
                case "t":
                    str += "	";
                    break;
                case "b":
                    str += "\b";
                    break;
                case "f":
                    str += "\f";
                    break;
                case "v":
                    str += "\v";
                    break;
                default:
                    if ($45fff29328a4ee5d$var$isOctalDigit(ch)) {
                        code = "01234567".indexOf(ch);
                        // \0 is not octal escape sequence
                        if (code !== 0) octal = true;
                        if ($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length && $45fff29328a4ee5d$var$isOctalDigit($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index])) {
                            octal = true;
                            code = code * 8 + "01234567".indexOf($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++]);
                            // 3 digits are only allowed when string starts
                            // with 0, 1, 2, 3
                            if ("0123".indexOf(ch) >= 0 && $45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length && $45fff29328a4ee5d$var$isOctalDigit($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index])) code = code * 8 + "01234567".indexOf($45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++]);
                        }
                        str += String.fromCharCode(code);
                    } else str += ch;
                    break;
            }
            else if (ch === "\r" && $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index] === "\n") ++$45fff29328a4ee5d$var$index;
        } else if ($45fff29328a4ee5d$var$isLineTerminator(ch.charCodeAt(0))) break;
        else str += ch;
    }
    if (quote !== "") $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
    return {
        type: $45fff29328a4ee5d$var$TokenStringLiteral,
        value: str,
        octal: octal,
        start: start,
        end: $45fff29328a4ee5d$var$index
    };
}
function $45fff29328a4ee5d$var$testRegExp(pattern, flags) {
    let tmp = pattern;
    if (flags.indexOf("u") >= 0) // Replace each astral symbol and every Unicode code point
    // escape sequence with a single ASCII symbol to avoid throwing on
    // regular expressions that are only valid in combination with the
    // `/u` flag.
    // Note: replacing with the ASCII symbol `x` might cause false
    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
    // perfectly valid pattern that is equivalent to `[a-b]`, but it
    // would be replaced by `[x-b]` which throws an error.
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1)=>{
        if (parseInt($1, 16) <= 0x10FFFF) return "x";
        $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
    // First, detect invalid regular expressions.
    try {
        new RegExp(tmp);
    } catch (e) {
        $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageInvalidRegExp);
    }
    // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.
    try {
        return new RegExp(pattern, flags);
    } catch (exception) {
        return null;
    }
}
function $45fff29328a4ee5d$var$scanRegExpBody() {
    var ch, str, classMarker, terminated, body;
    ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
    $45fff29328a4ee5d$var$assert(ch === "/", "Regular expression literal must start with a slash");
    str = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
    classMarker = false;
    terminated = false;
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
        str += ch;
        if (ch === "\\") {
            ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index++];
            // ECMA-262 7.8.5
            if ($45fff29328a4ee5d$var$isLineTerminator(ch.charCodeAt(0))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnterminatedRegExp);
            str += ch;
        } else if ($45fff29328a4ee5d$var$isLineTerminator(ch.charCodeAt(0))) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnterminatedRegExp);
        else if (classMarker) {
            if (ch === "]") classMarker = false;
        } else {
            if (ch === "/") {
                terminated = true;
                break;
            } else if (ch === "[") classMarker = true;
        }
    }
    if (!terminated) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnterminatedRegExp);
    // Exclude leading and trailing slash.
    body = str.substr(1, str.length - 2);
    return {
        value: body,
        literal: str
    };
}
function $45fff29328a4ee5d$var$scanRegExpFlags() {
    var ch, str, flags;
    str = "";
    flags = "";
    while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        ch = $45fff29328a4ee5d$var$source[$45fff29328a4ee5d$var$index];
        if (!$45fff29328a4ee5d$var$isIdentifierPart(ch.charCodeAt(0))) break;
        ++$45fff29328a4ee5d$var$index;
        if (ch === "\\" && $45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageUnexpectedToken, $45fff29328a4ee5d$var$ILLEGAL);
        else {
            flags += ch;
            str += ch;
        }
    }
    if (flags.search(/[^gimuy]/g) >= 0) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageInvalidRegExp, flags);
    return {
        value: flags,
        literal: str
    };
}
function $45fff29328a4ee5d$var$scanRegExp() {
    var start, body, flags, value;
    $45fff29328a4ee5d$var$lookahead = null;
    $45fff29328a4ee5d$var$skipComment();
    start = $45fff29328a4ee5d$var$index;
    body = $45fff29328a4ee5d$var$scanRegExpBody();
    flags = $45fff29328a4ee5d$var$scanRegExpFlags();
    value = $45fff29328a4ee5d$var$testRegExp(body.value, flags.value);
    return {
        literal: body.literal + flags.literal,
        value: value,
        regex: {
            pattern: body.value,
            flags: flags.value
        },
        start: start,
        end: $45fff29328a4ee5d$var$index
    };
}
function $45fff29328a4ee5d$var$isIdentifierName(token) {
    return token.type === $45fff29328a4ee5d$var$TokenIdentifier || token.type === $45fff29328a4ee5d$var$TokenKeyword || token.type === $45fff29328a4ee5d$var$TokenBooleanLiteral || token.type === $45fff29328a4ee5d$var$TokenNullLiteral;
}
function $45fff29328a4ee5d$var$advance() {
    $45fff29328a4ee5d$var$skipComment();
    if ($45fff29328a4ee5d$var$index >= $45fff29328a4ee5d$var$length) return {
        type: $45fff29328a4ee5d$var$TokenEOF,
        start: $45fff29328a4ee5d$var$index,
        end: $45fff29328a4ee5d$var$index
    };
    const ch = $45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index);
    if ($45fff29328a4ee5d$var$isIdentifierStart(ch)) return $45fff29328a4ee5d$var$scanIdentifier();
    // Very common: ( and ) and ;
    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) return $45fff29328a4ee5d$var$scanPunctuator();
    // String literal starts with single quote (U+0027) or double quote (U+0022).
    if (ch === 0x27 || ch === 0x22) return $45fff29328a4ee5d$var$scanStringLiteral();
    // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.
    if (ch === 0x2E) {
        if ($45fff29328a4ee5d$var$isDecimalDigit($45fff29328a4ee5d$var$source.charCodeAt($45fff29328a4ee5d$var$index + 1))) return $45fff29328a4ee5d$var$scanNumericLiteral();
        return $45fff29328a4ee5d$var$scanPunctuator();
    }
    if ($45fff29328a4ee5d$var$isDecimalDigit(ch)) return $45fff29328a4ee5d$var$scanNumericLiteral();
    return $45fff29328a4ee5d$var$scanPunctuator();
}
function $45fff29328a4ee5d$var$lex() {
    const token = $45fff29328a4ee5d$var$lookahead;
    $45fff29328a4ee5d$var$index = token.end;
    $45fff29328a4ee5d$var$lookahead = $45fff29328a4ee5d$var$advance();
    $45fff29328a4ee5d$var$index = token.end;
    return token;
}
function $45fff29328a4ee5d$var$peek() {
    const pos = $45fff29328a4ee5d$var$index;
    $45fff29328a4ee5d$var$lookahead = $45fff29328a4ee5d$var$advance();
    $45fff29328a4ee5d$var$index = pos;
}
function $45fff29328a4ee5d$var$finishArrayExpression(elements) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxArrayExpression);
    node.elements = elements;
    return node;
}
function $45fff29328a4ee5d$var$finishBinaryExpression(operator, left, right) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962(operator === "||" || operator === "&&" ? $45fff29328a4ee5d$var$SyntaxLogicalExpression : $45fff29328a4ee5d$var$SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
}
function $45fff29328a4ee5d$var$finishCallExpression(callee, args) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
}
function $45fff29328a4ee5d$var$finishConditionalExpression(test, consequent, alternate) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
}
function $45fff29328a4ee5d$var$finishIdentifier(name) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxIdentifier);
    node.name = name;
    return node;
}
function $45fff29328a4ee5d$var$finishLiteral(token) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxLiteral);
    node.value = token.value;
    node.raw = $45fff29328a4ee5d$var$source.slice(token.start, token.end);
    if (token.regex) {
        if (node.raw === "//") node.raw = "/(?:)/";
        node.regex = token.regex;
    }
    return node;
}
function $45fff29328a4ee5d$var$finishMemberExpression(accessor, object, property) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxMemberExpression);
    node.computed = accessor === "[";
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
}
function $45fff29328a4ee5d$var$finishObjectExpression(properties) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxObjectExpression);
    node.properties = properties;
    return node;
}
function $45fff29328a4ee5d$var$finishProperty(kind, key, value) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
}
function $45fff29328a4ee5d$var$finishUnaryExpression(operator, argument) {
    const node = new $45fff29328a4ee5d$export$ace047af85406962($45fff29328a4ee5d$var$SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
}
// Throw an exception
function $45fff29328a4ee5d$var$throwError(token, messageFormat) {
    var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index)=>{
        $45fff29328a4ee5d$var$assert(index < args.length, "Message reference must be in range");
        return args[index];
    });
    error = new Error(msg);
    error.index = $45fff29328a4ee5d$var$index;
    error.description = msg;
    throw error;
}
// Throw an exception because of the token.
function $45fff29328a4ee5d$var$throwUnexpected(token) {
    if (token.type === $45fff29328a4ee5d$var$TokenEOF) $45fff29328a4ee5d$var$throwError(token, $45fff29328a4ee5d$var$MessageUnexpectedEOS);
    if (token.type === $45fff29328a4ee5d$var$TokenNumericLiteral) $45fff29328a4ee5d$var$throwError(token, $45fff29328a4ee5d$var$MessageUnexpectedNumber);
    if (token.type === $45fff29328a4ee5d$var$TokenStringLiteral) $45fff29328a4ee5d$var$throwError(token, $45fff29328a4ee5d$var$MessageUnexpectedString);
    if (token.type === $45fff29328a4ee5d$var$TokenIdentifier) $45fff29328a4ee5d$var$throwError(token, $45fff29328a4ee5d$var$MessageUnexpectedIdentifier);
    if (token.type === $45fff29328a4ee5d$var$TokenKeyword) $45fff29328a4ee5d$var$throwError(token, $45fff29328a4ee5d$var$MessageUnexpectedReserved);
    // BooleanLiteral, NullLiteral, or Punctuator.
    $45fff29328a4ee5d$var$throwError(token, $45fff29328a4ee5d$var$MessageUnexpectedToken, token.value);
}
// Expect the next token to match the specified punctuator.
// If not, an exception will be thrown.
function $45fff29328a4ee5d$var$expect(value) {
    const token = $45fff29328a4ee5d$var$lex();
    if (token.type !== $45fff29328a4ee5d$var$TokenPunctuator || token.value !== value) $45fff29328a4ee5d$var$throwUnexpected(token);
}
// Return true if the next token matches the specified punctuator.
function $45fff29328a4ee5d$var$match(value) {
    return $45fff29328a4ee5d$var$lookahead.type === $45fff29328a4ee5d$var$TokenPunctuator && $45fff29328a4ee5d$var$lookahead.value === value;
}
// Return true if the next token matches the specified keyword
function $45fff29328a4ee5d$var$matchKeyword(keyword) {
    return $45fff29328a4ee5d$var$lookahead.type === $45fff29328a4ee5d$var$TokenKeyword && $45fff29328a4ee5d$var$lookahead.value === keyword;
}
// 11.1.4 Array Initialiser
function $45fff29328a4ee5d$var$parseArrayInitialiser() {
    const elements = [];
    $45fff29328a4ee5d$var$index = $45fff29328a4ee5d$var$lookahead.start;
    $45fff29328a4ee5d$var$expect("[");
    while(!$45fff29328a4ee5d$var$match("]"))if ($45fff29328a4ee5d$var$match(",")) {
        $45fff29328a4ee5d$var$lex();
        elements.push(null);
    } else {
        elements.push($45fff29328a4ee5d$var$parseConditionalExpression());
        if (!$45fff29328a4ee5d$var$match("]")) $45fff29328a4ee5d$var$expect(",");
    }
    $45fff29328a4ee5d$var$lex();
    return $45fff29328a4ee5d$var$finishArrayExpression(elements);
}
// 11.1.5 Object Initialiser
function $45fff29328a4ee5d$var$parseObjectPropertyKey() {
    $45fff29328a4ee5d$var$index = $45fff29328a4ee5d$var$lookahead.start;
    const token = $45fff29328a4ee5d$var$lex();
    // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.
    if (token.type === $45fff29328a4ee5d$var$TokenStringLiteral || token.type === $45fff29328a4ee5d$var$TokenNumericLiteral) {
        if (token.octal) $45fff29328a4ee5d$var$throwError(token, $45fff29328a4ee5d$var$MessageStrictOctalLiteral);
        return $45fff29328a4ee5d$var$finishLiteral(token);
    }
    return $45fff29328a4ee5d$var$finishIdentifier(token.value);
}
function $45fff29328a4ee5d$var$parseObjectProperty() {
    var token, key, id, value;
    $45fff29328a4ee5d$var$index = $45fff29328a4ee5d$var$lookahead.start;
    token = $45fff29328a4ee5d$var$lookahead;
    if (token.type === $45fff29328a4ee5d$var$TokenIdentifier) {
        id = $45fff29328a4ee5d$var$parseObjectPropertyKey();
        $45fff29328a4ee5d$var$expect(":");
        value = $45fff29328a4ee5d$var$parseConditionalExpression();
        return $45fff29328a4ee5d$var$finishProperty("init", id, value);
    }
    if (token.type === $45fff29328a4ee5d$var$TokenEOF || token.type === $45fff29328a4ee5d$var$TokenPunctuator) $45fff29328a4ee5d$var$throwUnexpected(token);
    else {
        key = $45fff29328a4ee5d$var$parseObjectPropertyKey();
        $45fff29328a4ee5d$var$expect(":");
        value = $45fff29328a4ee5d$var$parseConditionalExpression();
        return $45fff29328a4ee5d$var$finishProperty("init", key, value);
    }
}
function $45fff29328a4ee5d$var$parseObjectInitialiser() {
    var properties = [], property, name, key, map = {}, toString = String;
    $45fff29328a4ee5d$var$index = $45fff29328a4ee5d$var$lookahead.start;
    $45fff29328a4ee5d$var$expect("{");
    while(!$45fff29328a4ee5d$var$match("}")){
        property = $45fff29328a4ee5d$var$parseObjectProperty();
        if (property.key.type === $45fff29328a4ee5d$var$SyntaxIdentifier) name = property.key.name;
        else name = toString(property.key.value);
        key = "$" + name;
        if (Object.prototype.hasOwnProperty.call(map, key)) $45fff29328a4ee5d$var$throwError({}, $45fff29328a4ee5d$var$MessageStrictDuplicateProperty);
        else map[key] = true;
        properties.push(property);
        if (!$45fff29328a4ee5d$var$match("}")) $45fff29328a4ee5d$var$expect(",");
    }
    $45fff29328a4ee5d$var$expect("}");
    return $45fff29328a4ee5d$var$finishObjectExpression(properties);
}
// 11.1.6 The Grouping Operator
function $45fff29328a4ee5d$var$parseGroupExpression() {
    $45fff29328a4ee5d$var$expect("(");
    const expr = $45fff29328a4ee5d$var$parseExpression();
    $45fff29328a4ee5d$var$expect(")");
    return expr;
}
// 11.1 Primary Expressions
const $45fff29328a4ee5d$var$legalKeywords = {
    "if": 1
};
function $45fff29328a4ee5d$var$parsePrimaryExpression() {
    var type, token, expr;
    if ($45fff29328a4ee5d$var$match("(")) return $45fff29328a4ee5d$var$parseGroupExpression();
    if ($45fff29328a4ee5d$var$match("[")) return $45fff29328a4ee5d$var$parseArrayInitialiser();
    if ($45fff29328a4ee5d$var$match("{")) return $45fff29328a4ee5d$var$parseObjectInitialiser();
    type = $45fff29328a4ee5d$var$lookahead.type;
    $45fff29328a4ee5d$var$index = $45fff29328a4ee5d$var$lookahead.start;
    if (type === $45fff29328a4ee5d$var$TokenIdentifier || $45fff29328a4ee5d$var$legalKeywords[$45fff29328a4ee5d$var$lookahead.value]) expr = $45fff29328a4ee5d$var$finishIdentifier($45fff29328a4ee5d$var$lex().value);
    else if (type === $45fff29328a4ee5d$var$TokenStringLiteral || type === $45fff29328a4ee5d$var$TokenNumericLiteral) {
        if ($45fff29328a4ee5d$var$lookahead.octal) $45fff29328a4ee5d$var$throwError($45fff29328a4ee5d$var$lookahead, $45fff29328a4ee5d$var$MessageStrictOctalLiteral);
        expr = $45fff29328a4ee5d$var$finishLiteral($45fff29328a4ee5d$var$lex());
    } else if (type === $45fff29328a4ee5d$var$TokenKeyword) throw new Error($45fff29328a4ee5d$var$DISABLED);
    else if (type === $45fff29328a4ee5d$var$TokenBooleanLiteral) {
        token = $45fff29328a4ee5d$var$lex();
        token.value = token.value === "true";
        expr = $45fff29328a4ee5d$var$finishLiteral(token);
    } else if (type === $45fff29328a4ee5d$var$TokenNullLiteral) {
        token = $45fff29328a4ee5d$var$lex();
        token.value = null;
        expr = $45fff29328a4ee5d$var$finishLiteral(token);
    } else if ($45fff29328a4ee5d$var$match("/") || $45fff29328a4ee5d$var$match("/=")) {
        expr = $45fff29328a4ee5d$var$finishLiteral($45fff29328a4ee5d$var$scanRegExp());
        $45fff29328a4ee5d$var$peek();
    } else $45fff29328a4ee5d$var$throwUnexpected($45fff29328a4ee5d$var$lex());
    return expr;
}
// 11.2 Left-Hand-Side Expressions
function $45fff29328a4ee5d$var$parseArguments() {
    const args = [];
    $45fff29328a4ee5d$var$expect("(");
    if (!$45fff29328a4ee5d$var$match(")")) while($45fff29328a4ee5d$var$index < $45fff29328a4ee5d$var$length){
        args.push($45fff29328a4ee5d$var$parseConditionalExpression());
        if ($45fff29328a4ee5d$var$match(")")) break;
        $45fff29328a4ee5d$var$expect(",");
    }
    $45fff29328a4ee5d$var$expect(")");
    return args;
}
function $45fff29328a4ee5d$var$parseNonComputedProperty() {
    $45fff29328a4ee5d$var$index = $45fff29328a4ee5d$var$lookahead.start;
    const token = $45fff29328a4ee5d$var$lex();
    if (!$45fff29328a4ee5d$var$isIdentifierName(token)) $45fff29328a4ee5d$var$throwUnexpected(token);
    return $45fff29328a4ee5d$var$finishIdentifier(token.value);
}
function $45fff29328a4ee5d$var$parseNonComputedMember() {
    $45fff29328a4ee5d$var$expect(".");
    return $45fff29328a4ee5d$var$parseNonComputedProperty();
}
function $45fff29328a4ee5d$var$parseComputedMember() {
    $45fff29328a4ee5d$var$expect("[");
    const expr = $45fff29328a4ee5d$var$parseExpression();
    $45fff29328a4ee5d$var$expect("]");
    return expr;
}
function $45fff29328a4ee5d$var$parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;
    expr = $45fff29328a4ee5d$var$parsePrimaryExpression();
    for(;;){
        if ($45fff29328a4ee5d$var$match(".")) {
            property = $45fff29328a4ee5d$var$parseNonComputedMember();
            expr = $45fff29328a4ee5d$var$finishMemberExpression(".", expr, property);
        } else if ($45fff29328a4ee5d$var$match("(")) {
            args = $45fff29328a4ee5d$var$parseArguments();
            expr = $45fff29328a4ee5d$var$finishCallExpression(expr, args);
        } else if ($45fff29328a4ee5d$var$match("[")) {
            property = $45fff29328a4ee5d$var$parseComputedMember();
            expr = $45fff29328a4ee5d$var$finishMemberExpression("[", expr, property);
        } else break;
    }
    return expr;
}
// 11.3 Postfix Expressions
function $45fff29328a4ee5d$var$parsePostfixExpression() {
    const expr = $45fff29328a4ee5d$var$parseLeftHandSideExpressionAllowCall();
    if ($45fff29328a4ee5d$var$lookahead.type === $45fff29328a4ee5d$var$TokenPunctuator) {
        if ($45fff29328a4ee5d$var$match("++") || $45fff29328a4ee5d$var$match("--")) throw new Error($45fff29328a4ee5d$var$DISABLED);
    }
    return expr;
}
// 11.4 Unary Operators
function $45fff29328a4ee5d$var$parseUnaryExpression() {
    var token, expr;
    if ($45fff29328a4ee5d$var$lookahead.type !== $45fff29328a4ee5d$var$TokenPunctuator && $45fff29328a4ee5d$var$lookahead.type !== $45fff29328a4ee5d$var$TokenKeyword) expr = $45fff29328a4ee5d$var$parsePostfixExpression();
    else if ($45fff29328a4ee5d$var$match("++") || $45fff29328a4ee5d$var$match("--")) throw new Error($45fff29328a4ee5d$var$DISABLED);
    else if ($45fff29328a4ee5d$var$match("+") || $45fff29328a4ee5d$var$match("-") || $45fff29328a4ee5d$var$match("~") || $45fff29328a4ee5d$var$match("!")) {
        token = $45fff29328a4ee5d$var$lex();
        expr = $45fff29328a4ee5d$var$parseUnaryExpression();
        expr = $45fff29328a4ee5d$var$finishUnaryExpression(token.value, expr);
    } else if ($45fff29328a4ee5d$var$matchKeyword("delete") || $45fff29328a4ee5d$var$matchKeyword("void") || $45fff29328a4ee5d$var$matchKeyword("typeof")) throw new Error($45fff29328a4ee5d$var$DISABLED);
    else expr = $45fff29328a4ee5d$var$parsePostfixExpression();
    return expr;
}
function $45fff29328a4ee5d$var$binaryPrecedence(token) {
    let prec = 0;
    if (token.type !== $45fff29328a4ee5d$var$TokenPunctuator && token.type !== $45fff29328a4ee5d$var$TokenKeyword) return 0;
    switch(token.value){
        case "||":
            prec = 1;
            break;
        case "&&":
            prec = 2;
            break;
        case "|":
            prec = 3;
            break;
        case "^":
            prec = 4;
            break;
        case "&":
            prec = 5;
            break;
        case "==":
        case "!=":
        case "===":
        case "!==":
            prec = 6;
            break;
        case "<":
        case ">":
        case "<=":
        case ">=":
        case "instanceof":
        case "in":
            prec = 7;
            break;
        case "<<":
        case ">>":
        case ">>>":
            prec = 8;
            break;
        case "+":
        case "-":
            prec = 9;
            break;
        case "*":
        case "/":
        case "%":
            prec = 11;
            break;
    }
    return prec;
}
// 11.5 Multiplicative Operators
// 11.6 Additive Operators
// 11.7 Bitwise Shift Operators
// 11.8 Relational Operators
// 11.9 Equality Operators
// 11.10 Binary Bitwise Operators
// 11.11 Binary Logical Operators
function $45fff29328a4ee5d$var$parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = $45fff29328a4ee5d$var$lookahead;
    left = $45fff29328a4ee5d$var$parseUnaryExpression();
    token = $45fff29328a4ee5d$var$lookahead;
    prec = $45fff29328a4ee5d$var$binaryPrecedence(token);
    if (prec === 0) return left;
    token.prec = prec;
    $45fff29328a4ee5d$var$lex();
    markers = [
        marker,
        $45fff29328a4ee5d$var$lookahead
    ];
    right = $45fff29328a4ee5d$var$parseUnaryExpression();
    stack = [
        left,
        token,
        right
    ];
    while((prec = $45fff29328a4ee5d$var$binaryPrecedence($45fff29328a4ee5d$var$lookahead)) > 0){
        // Reduce: make a binary expression from the three topmost entries.
        while(stack.length > 2 && prec <= stack[stack.length - 2].prec){
            right = stack.pop();
            operator = stack.pop().value;
            left = stack.pop();
            markers.pop();
            expr = $45fff29328a4ee5d$var$finishBinaryExpression(operator, left, right);
            stack.push(expr);
        }
        // Shift.
        token = $45fff29328a4ee5d$var$lex();
        token.prec = prec;
        stack.push(token);
        markers.push($45fff29328a4ee5d$var$lookahead);
        expr = $45fff29328a4ee5d$var$parseUnaryExpression();
        stack.push(expr);
    }
    // Final reduce to clean-up the stack.
    i = stack.length - 1;
    expr = stack[i];
    markers.pop();
    while(i > 1){
        markers.pop();
        expr = $45fff29328a4ee5d$var$finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
        i -= 2;
    }
    return expr;
}
// 11.12 Conditional Operator
function $45fff29328a4ee5d$var$parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = $45fff29328a4ee5d$var$parseBinaryExpression();
    if ($45fff29328a4ee5d$var$match("?")) {
        $45fff29328a4ee5d$var$lex();
        consequent = $45fff29328a4ee5d$var$parseConditionalExpression();
        $45fff29328a4ee5d$var$expect(":");
        alternate = $45fff29328a4ee5d$var$parseConditionalExpression();
        expr = $45fff29328a4ee5d$var$finishConditionalExpression(expr, consequent, alternate);
    }
    return expr;
}
// 11.14 Comma Operator
function $45fff29328a4ee5d$var$parseExpression() {
    const expr = $45fff29328a4ee5d$var$parseConditionalExpression();
    if ($45fff29328a4ee5d$var$match(",")) throw new Error($45fff29328a4ee5d$var$DISABLED); // no sequence expressions
    return expr;
}
function $45fff29328a4ee5d$export$ed9c825e502c46c8(code) {
    $45fff29328a4ee5d$var$source = code;
    $45fff29328a4ee5d$var$index = 0;
    $45fff29328a4ee5d$var$length = $45fff29328a4ee5d$var$source.length;
    $45fff29328a4ee5d$var$lookahead = null;
    $45fff29328a4ee5d$var$peek();
    const expr = $45fff29328a4ee5d$var$parseExpression();
    if ($45fff29328a4ee5d$var$lookahead.type !== $45fff29328a4ee5d$var$TokenEOF) throw new Error("Unexpect token after expression.");
    return expr;
}
var $45fff29328a4ee5d$export$1a988e7317c65621 = {
    NaN: "NaN",
    E: "Math.E",
    LN2: "Math.LN2",
    LN10: "Math.LN10",
    LOG2E: "Math.LOG2E",
    LOG10E: "Math.LOG10E",
    PI: "Math.PI",
    SQRT1_2: "Math.SQRT1_2",
    SQRT2: "Math.SQRT2",
    MIN_VALUE: "Number.MIN_VALUE",
    MAX_VALUE: "Number.MAX_VALUE"
};
function $45fff29328a4ee5d$export$18af1f934c132a41(codegen) {
    function fncall(name, args, cast, type) {
        let obj = codegen(args[0]);
        if (cast) {
            obj = cast + "(" + obj + ")";
            if (cast.lastIndexOf("new ", 0) === 0) obj = "(" + obj + ")";
        }
        return obj + "." + name + (type < 0 ? "" : type === 0 ? "()" : "(" + args.slice(1).map(codegen).join(",") + ")");
    }
    function fn(name, cast, type) {
        return (args)=>fncall(name, args, cast, type);
    }
    const DATE = "new Date", STRING = "String", REGEXP = "RegExp";
    return {
        // MATH functions
        isNaN: "Number.isNaN",
        isFinite: "Number.isFinite",
        abs: "Math.abs",
        acos: "Math.acos",
        asin: "Math.asin",
        atan: "Math.atan",
        atan2: "Math.atan2",
        ceil: "Math.ceil",
        cos: "Math.cos",
        exp: "Math.exp",
        floor: "Math.floor",
        hypot: "Math.hypot",
        log: "Math.log",
        max: "Math.max",
        min: "Math.min",
        pow: "Math.pow",
        random: "Math.random",
        round: "Math.round",
        sin: "Math.sin",
        sqrt: "Math.sqrt",
        tan: "Math.tan",
        clamp: function(args) {
            if (args.length < 3) (0, $4SWbq.error)("Missing arguments to clamp function.");
            if (args.length > 3) (0, $4SWbq.error)("Too many arguments to clamp function.");
            const a = args.map(codegen);
            return "Math.max(" + a[1] + ", Math.min(" + a[2] + "," + a[0] + "))";
        },
        // DATE functions
        now: "Date.now",
        utc: "Date.UTC",
        datetime: DATE,
        date: fn("getDate", DATE, 0),
        day: fn("getDay", DATE, 0),
        year: fn("getFullYear", DATE, 0),
        month: fn("getMonth", DATE, 0),
        hours: fn("getHours", DATE, 0),
        minutes: fn("getMinutes", DATE, 0),
        seconds: fn("getSeconds", DATE, 0),
        milliseconds: fn("getMilliseconds", DATE, 0),
        time: fn("getTime", DATE, 0),
        timezoneoffset: fn("getTimezoneOffset", DATE, 0),
        utcdate: fn("getUTCDate", DATE, 0),
        utcday: fn("getUTCDay", DATE, 0),
        utcyear: fn("getUTCFullYear", DATE, 0),
        utcmonth: fn("getUTCMonth", DATE, 0),
        utchours: fn("getUTCHours", DATE, 0),
        utcminutes: fn("getUTCMinutes", DATE, 0),
        utcseconds: fn("getUTCSeconds", DATE, 0),
        utcmilliseconds: fn("getUTCMilliseconds", DATE, 0),
        // sequence functions
        length: fn("length", null, -1),
        // STRING functions
        parseFloat: "parseFloat",
        parseInt: "parseInt",
        upper: fn("toUpperCase", STRING, 0),
        lower: fn("toLowerCase", STRING, 0),
        substring: fn("substring", STRING),
        split: fn("split", STRING),
        trim: fn("trim", STRING, 0),
        // REGEXP functions
        regexp: REGEXP,
        test: fn("test", REGEXP),
        // Control Flow functions
        if: function(args) {
            if (args.length < 3) (0, $4SWbq.error)("Missing arguments to if function.");
            if (args.length > 3) (0, $4SWbq.error)("Too many arguments to if function.");
            const a = args.map(codegen);
            return "(" + a[0] + "?" + a[1] + ":" + a[2] + ")";
        }
    };
}
function $45fff29328a4ee5d$var$stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === "'" && s[n] === "'") ? s.slice(1, -1) : s;
}
function $45fff29328a4ee5d$export$7be90eb119737cf7(opt) {
    opt = opt || {};
    const allowed = opt.allowed ? (0, $4SWbq.toSet)(opt.allowed) : {}, forbidden = opt.forbidden ? (0, $4SWbq.toSet)(opt.forbidden) : {}, constants = opt.constants || $45fff29328a4ee5d$export$1a988e7317c65621, functions = (opt.functions || $45fff29328a4ee5d$export$18af1f934c132a41)(visit), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = (0, $4SWbq.isFunction)(globalvar) ? globalvar : (id)=>`${globalvar}["${id}"]`;
    let globals = {}, fields = {}, memberDepth = 0;
    function visit(ast) {
        if ((0, $4SWbq.isString)(ast)) return ast;
        const generator = Generators[ast.type];
        if (generator == null) (0, $4SWbq.error)("Unsupported type: " + ast.type);
        return generator(ast);
    }
    const Generators = {
        Literal: (n)=>n.raw,
        Identifier: (n)=>{
            const id = n.name;
            if (memberDepth > 0) return id;
            else if ((0, $4SWbq.hasOwnProperty)(forbidden, id)) return (0, $4SWbq.error)("Illegal identifier: " + id);
            else if ((0, $4SWbq.hasOwnProperty)(constants, id)) return constants[id];
            else if ((0, $4SWbq.hasOwnProperty)(allowed, id)) return id;
            else {
                globals[id] = 1;
                return outputGlobal(id);
            }
        },
        MemberExpression: (n)=>{
            const d = !n.computed, o = visit(n.object);
            if (d) memberDepth += 1;
            const p = visit(n.property);
            if (o === fieldvar) // strip quotes to sanitize field name (#1653)
            fields[$45fff29328a4ee5d$var$stripQuotes(p)] = 1;
            if (d) memberDepth -= 1;
            return o + (d ? "." + p : "[" + p + "]");
        },
        CallExpression: (n)=>{
            if (n.callee.type !== "Identifier") (0, $4SWbq.error)("Illegal callee type: " + n.callee.type);
            const callee = n.callee.name, args = n.arguments, fn = (0, $4SWbq.hasOwnProperty)(functions, callee) && functions[callee];
            if (!fn) (0, $4SWbq.error)("Unrecognized function: " + callee);
            return (0, $4SWbq.isFunction)(fn) ? fn(args) : fn + "(" + args.map(visit).join(",") + ")";
        },
        ArrayExpression: (n)=>"[" + n.elements.map(visit).join(",") + "]",
        BinaryExpression: (n)=>"(" + visit(n.left) + " " + n.operator + " " + visit(n.right) + ")",
        UnaryExpression: (n)=>"(" + n.operator + visit(n.argument) + ")",
        ConditionalExpression: (n)=>"(" + visit(n.test) + "?" + visit(n.consequent) + ":" + visit(n.alternate) + ")",
        LogicalExpression: (n)=>"(" + visit(n.left) + n.operator + visit(n.right) + ")",
        ObjectExpression: (n)=>"{" + n.properties.map(visit).join(",") + "}",
        Property: (n)=>{
            memberDepth += 1;
            const k = visit(n.key);
            memberDepth -= 1;
            return k + ":" + visit(n.value);
        }
    };
    function codegen(ast) {
        const result = {
            code: visit(ast),
            globals: Object.keys(globals),
            fields: Object.keys(fields)
        };
        globals = {};
        fields = {};
        return result;
    }
    codegen.functions = functions;
    codegen.constants = constants;
    return codegen;
}

});

parcelRegister("8TCe3", function(module, exports) {

$parcel$export(module.exports, "areaRingSum", () => $67a11c9a2556a03b$export$bf8f994332070c7f);
$parcel$export(module.exports, "areaStream", () => $67a11c9a2556a03b$export$cb67cfa750ae69dc);
$parcel$export(module.exports, "default", () => $67a11c9a2556a03b$export$2e2bcd8739ae039);

var $2qYWQ = parcelRequire("2qYWQ");

var $9NJu3 = parcelRequire("9NJu3");

var $6A3Rm = parcelRequire("6A3Rm");

var $j0A9E = parcelRequire("j0A9E");
var $67a11c9a2556a03b$export$bf8f994332070c7f = new (0, $2qYWQ.Adder)();
// hello?
var $67a11c9a2556a03b$var$areaSum = new (0, $2qYWQ.Adder)(), $67a11c9a2556a03b$var$lambda00, $67a11c9a2556a03b$var$phi00, $67a11c9a2556a03b$var$lambda0, $67a11c9a2556a03b$var$cosPhi0, $67a11c9a2556a03b$var$sinPhi0;
var $67a11c9a2556a03b$export$cb67cfa750ae69dc = {
    point: (0, $6A3Rm.default),
    lineStart: (0, $6A3Rm.default),
    lineEnd: (0, $6A3Rm.default),
    polygonStart: function() {
        $67a11c9a2556a03b$export$bf8f994332070c7f = new (0, $2qYWQ.Adder)();
        $67a11c9a2556a03b$export$cb67cfa750ae69dc.lineStart = $67a11c9a2556a03b$var$areaRingStart;
        $67a11c9a2556a03b$export$cb67cfa750ae69dc.lineEnd = $67a11c9a2556a03b$var$areaRingEnd;
    },
    polygonEnd: function() {
        var areaRing = +$67a11c9a2556a03b$export$bf8f994332070c7f;
        $67a11c9a2556a03b$var$areaSum.add(areaRing < 0 ? (0, $9NJu3.tau) + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = (0, $6A3Rm.default);
    },
    sphere: function() {
        $67a11c9a2556a03b$var$areaSum.add((0, $9NJu3.tau));
    }
};
function $67a11c9a2556a03b$var$areaRingStart() {
    $67a11c9a2556a03b$export$cb67cfa750ae69dc.point = $67a11c9a2556a03b$var$areaPointFirst;
}
function $67a11c9a2556a03b$var$areaRingEnd() {
    $67a11c9a2556a03b$var$areaPoint($67a11c9a2556a03b$var$lambda00, $67a11c9a2556a03b$var$phi00);
}
function $67a11c9a2556a03b$var$areaPointFirst(lambda, phi) {
    $67a11c9a2556a03b$export$cb67cfa750ae69dc.point = $67a11c9a2556a03b$var$areaPoint;
    $67a11c9a2556a03b$var$lambda00 = lambda, $67a11c9a2556a03b$var$phi00 = phi;
    lambda *= (0, $9NJu3.radians), phi *= (0, $9NJu3.radians);
    $67a11c9a2556a03b$var$lambda0 = lambda, $67a11c9a2556a03b$var$cosPhi0 = (0, $9NJu3.cos)(phi = phi / 2 + (0, $9NJu3.quarterPi)), $67a11c9a2556a03b$var$sinPhi0 = (0, $9NJu3.sin)(phi);
}
function $67a11c9a2556a03b$var$areaPoint(lambda, phi) {
    lambda *= (0, $9NJu3.radians), phi *= (0, $9NJu3.radians);
    phi = phi / 2 + (0, $9NJu3.quarterPi); // half the angular distance from south pole
    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    var dLambda = lambda - $67a11c9a2556a03b$var$lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = (0, $9NJu3.cos)(phi), sinPhi = (0, $9NJu3.sin)(phi), k = $67a11c9a2556a03b$var$sinPhi0 * sinPhi, u = $67a11c9a2556a03b$var$cosPhi0 * cosPhi + k * (0, $9NJu3.cos)(adLambda), v = k * sdLambda * (0, $9NJu3.sin)(adLambda);
    $67a11c9a2556a03b$export$bf8f994332070c7f.add((0, $9NJu3.atan2)(v, u));
    // Advance the previous points.
    $67a11c9a2556a03b$var$lambda0 = lambda, $67a11c9a2556a03b$var$cosPhi0 = cosPhi, $67a11c9a2556a03b$var$sinPhi0 = sinPhi;
}
function $67a11c9a2556a03b$export$2e2bcd8739ae039(object) {
    $67a11c9a2556a03b$var$areaSum = new (0, $2qYWQ.Adder)();
    (0, $j0A9E.default)(object, $67a11c9a2556a03b$export$cb67cfa750ae69dc);
    return $67a11c9a2556a03b$var$areaSum * 2;
}

});

parcelRegister("38Rfr", function(module, exports) {

$parcel$export(module.exports, "default", () => $249b6c6cfd267eeb$export$2e2bcd8739ae039);

var $2qYWQ = parcelRequire("2qYWQ");

var $8TCe3 = parcelRequire("8TCe3");

var $8fcLQ = parcelRequire("8fcLQ");

var $9NJu3 = parcelRequire("9NJu3");

var $j0A9E = parcelRequire("j0A9E");
var $249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$phi0, $249b6c6cfd267eeb$var$lambda1, $249b6c6cfd267eeb$var$phi1, $249b6c6cfd267eeb$var$lambda2, $249b6c6cfd267eeb$var$lambda00, $249b6c6cfd267eeb$var$phi00, $249b6c6cfd267eeb$var$p0, $249b6c6cfd267eeb$var$deltaSum, $249b6c6cfd267eeb$var$ranges, $249b6c6cfd267eeb$var$range;
var $249b6c6cfd267eeb$var$boundsStream = {
    point: $249b6c6cfd267eeb$var$boundsPoint,
    lineStart: $249b6c6cfd267eeb$var$boundsLineStart,
    lineEnd: $249b6c6cfd267eeb$var$boundsLineEnd,
    polygonStart: function() {
        $249b6c6cfd267eeb$var$boundsStream.point = $249b6c6cfd267eeb$var$boundsRingPoint;
        $249b6c6cfd267eeb$var$boundsStream.lineStart = $249b6c6cfd267eeb$var$boundsRingStart;
        $249b6c6cfd267eeb$var$boundsStream.lineEnd = $249b6c6cfd267eeb$var$boundsRingEnd;
        $249b6c6cfd267eeb$var$deltaSum = new (0, $2qYWQ.Adder)();
        (0, $8TCe3.areaStream).polygonStart();
    },
    polygonEnd: function() {
        (0, $8TCe3.areaStream).polygonEnd();
        $249b6c6cfd267eeb$var$boundsStream.point = $249b6c6cfd267eeb$var$boundsPoint;
        $249b6c6cfd267eeb$var$boundsStream.lineStart = $249b6c6cfd267eeb$var$boundsLineStart;
        $249b6c6cfd267eeb$var$boundsStream.lineEnd = $249b6c6cfd267eeb$var$boundsLineEnd;
        if ((0, $8TCe3.areaRingSum) < 0) $249b6c6cfd267eeb$var$lambda0 = -($249b6c6cfd267eeb$var$lambda1 = 180), $249b6c6cfd267eeb$var$phi0 = -($249b6c6cfd267eeb$var$phi1 = 90);
        else if ($249b6c6cfd267eeb$var$deltaSum > (0, $9NJu3.epsilon)) $249b6c6cfd267eeb$var$phi1 = 90;
        else if ($249b6c6cfd267eeb$var$deltaSum < -(0, $9NJu3.epsilon)) $249b6c6cfd267eeb$var$phi0 = -90;
        $249b6c6cfd267eeb$var$range[0] = $249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$range[1] = $249b6c6cfd267eeb$var$lambda1;
    },
    sphere: function() {
        $249b6c6cfd267eeb$var$lambda0 = -($249b6c6cfd267eeb$var$lambda1 = 180), $249b6c6cfd267eeb$var$phi0 = -($249b6c6cfd267eeb$var$phi1 = 90);
    }
};
function $249b6c6cfd267eeb$var$boundsPoint(lambda, phi) {
    $249b6c6cfd267eeb$var$ranges.push($249b6c6cfd267eeb$var$range = [
        $249b6c6cfd267eeb$var$lambda0 = lambda,
        $249b6c6cfd267eeb$var$lambda1 = lambda
    ]);
    if (phi < $249b6c6cfd267eeb$var$phi0) $249b6c6cfd267eeb$var$phi0 = phi;
    if (phi > $249b6c6cfd267eeb$var$phi1) $249b6c6cfd267eeb$var$phi1 = phi;
}
function $249b6c6cfd267eeb$var$linePoint(lambda, phi) {
    var p = (0, $8fcLQ.cartesian)([
        lambda * (0, $9NJu3.radians),
        phi * (0, $9NJu3.radians)
    ]);
    if ($249b6c6cfd267eeb$var$p0) {
        var normal = (0, $8fcLQ.cartesianCross)($249b6c6cfd267eeb$var$p0, p), equatorial = [
            normal[1],
            -normal[0],
            0
        ], inflection = (0, $8fcLQ.cartesianCross)(equatorial, normal);
        (0, $8fcLQ.cartesianNormalizeInPlace)(inflection);
        inflection = (0, $8fcLQ.spherical)(inflection);
        var delta = lambda - $249b6c6cfd267eeb$var$lambda2, sign = delta > 0 ? 1 : -1, lambdai = inflection[0] * (0, $9NJu3.degrees) * sign, phii, antimeridian = (0, $9NJu3.abs)(delta) > 180;
        if (antimeridian ^ (sign * $249b6c6cfd267eeb$var$lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = inflection[1] * (0, $9NJu3.degrees);
            if (phii > $249b6c6cfd267eeb$var$phi1) $249b6c6cfd267eeb$var$phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * $249b6c6cfd267eeb$var$lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = -inflection[1] * (0, $9NJu3.degrees);
            if (phii < $249b6c6cfd267eeb$var$phi0) $249b6c6cfd267eeb$var$phi0 = phii;
        } else {
            if (phi < $249b6c6cfd267eeb$var$phi0) $249b6c6cfd267eeb$var$phi0 = phi;
            if (phi > $249b6c6cfd267eeb$var$phi1) $249b6c6cfd267eeb$var$phi1 = phi;
        }
        if (antimeridian) {
            if (lambda < $249b6c6cfd267eeb$var$lambda2) {
                if ($249b6c6cfd267eeb$var$angle($249b6c6cfd267eeb$var$lambda0, lambda) > $249b6c6cfd267eeb$var$angle($249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$lambda1)) $249b6c6cfd267eeb$var$lambda1 = lambda;
            } else if ($249b6c6cfd267eeb$var$angle(lambda, $249b6c6cfd267eeb$var$lambda1) > $249b6c6cfd267eeb$var$angle($249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$lambda1)) $249b6c6cfd267eeb$var$lambda0 = lambda;
        } else if ($249b6c6cfd267eeb$var$lambda1 >= $249b6c6cfd267eeb$var$lambda0) {
            if (lambda < $249b6c6cfd267eeb$var$lambda0) $249b6c6cfd267eeb$var$lambda0 = lambda;
            if (lambda > $249b6c6cfd267eeb$var$lambda1) $249b6c6cfd267eeb$var$lambda1 = lambda;
        } else {
            if (lambda > $249b6c6cfd267eeb$var$lambda2) {
                if ($249b6c6cfd267eeb$var$angle($249b6c6cfd267eeb$var$lambda0, lambda) > $249b6c6cfd267eeb$var$angle($249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$lambda1)) $249b6c6cfd267eeb$var$lambda1 = lambda;
            } else if ($249b6c6cfd267eeb$var$angle(lambda, $249b6c6cfd267eeb$var$lambda1) > $249b6c6cfd267eeb$var$angle($249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$lambda1)) $249b6c6cfd267eeb$var$lambda0 = lambda;
        }
    } else $249b6c6cfd267eeb$var$ranges.push($249b6c6cfd267eeb$var$range = [
        $249b6c6cfd267eeb$var$lambda0 = lambda,
        $249b6c6cfd267eeb$var$lambda1 = lambda
    ]);
    if (phi < $249b6c6cfd267eeb$var$phi0) $249b6c6cfd267eeb$var$phi0 = phi;
    if (phi > $249b6c6cfd267eeb$var$phi1) $249b6c6cfd267eeb$var$phi1 = phi;
    $249b6c6cfd267eeb$var$p0 = p, $249b6c6cfd267eeb$var$lambda2 = lambda;
}
function $249b6c6cfd267eeb$var$boundsLineStart() {
    $249b6c6cfd267eeb$var$boundsStream.point = $249b6c6cfd267eeb$var$linePoint;
}
function $249b6c6cfd267eeb$var$boundsLineEnd() {
    $249b6c6cfd267eeb$var$range[0] = $249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$range[1] = $249b6c6cfd267eeb$var$lambda1;
    $249b6c6cfd267eeb$var$boundsStream.point = $249b6c6cfd267eeb$var$boundsPoint;
    $249b6c6cfd267eeb$var$p0 = null;
}
function $249b6c6cfd267eeb$var$boundsRingPoint(lambda, phi) {
    if ($249b6c6cfd267eeb$var$p0) {
        var delta = lambda - $249b6c6cfd267eeb$var$lambda2;
        $249b6c6cfd267eeb$var$deltaSum.add((0, $9NJu3.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else $249b6c6cfd267eeb$var$lambda00 = lambda, $249b6c6cfd267eeb$var$phi00 = phi;
    (0, $8TCe3.areaStream).point(lambda, phi);
    $249b6c6cfd267eeb$var$linePoint(lambda, phi);
}
function $249b6c6cfd267eeb$var$boundsRingStart() {
    (0, $8TCe3.areaStream).lineStart();
}
function $249b6c6cfd267eeb$var$boundsRingEnd() {
    $249b6c6cfd267eeb$var$boundsRingPoint($249b6c6cfd267eeb$var$lambda00, $249b6c6cfd267eeb$var$phi00);
    (0, $8TCe3.areaStream).lineEnd();
    if ((0, $9NJu3.abs)($249b6c6cfd267eeb$var$deltaSum) > (0, $9NJu3.epsilon)) $249b6c6cfd267eeb$var$lambda0 = -($249b6c6cfd267eeb$var$lambda1 = 180);
    $249b6c6cfd267eeb$var$range[0] = $249b6c6cfd267eeb$var$lambda0, $249b6c6cfd267eeb$var$range[1] = $249b6c6cfd267eeb$var$lambda1;
    $249b6c6cfd267eeb$var$p0 = null;
}
// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function $249b6c6cfd267eeb$var$angle(lambda0, lambda1) {
    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}
function $249b6c6cfd267eeb$var$rangeCompare(a, b) {
    return a[0] - b[0];
}
function $249b6c6cfd267eeb$var$rangeContains(range, x) {
    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}
function $249b6c6cfd267eeb$export$2e2bcd8739ae039(feature) {
    var i, n, a, b, merged, deltaMax, delta;
    $249b6c6cfd267eeb$var$phi1 = $249b6c6cfd267eeb$var$lambda1 = -($249b6c6cfd267eeb$var$lambda0 = $249b6c6cfd267eeb$var$phi0 = Infinity);
    $249b6c6cfd267eeb$var$ranges = [];
    (0, $j0A9E.default)(feature, $249b6c6cfd267eeb$var$boundsStream);
    // First, sort ranges by their minimum longitudes.
    if (n = $249b6c6cfd267eeb$var$ranges.length) {
        $249b6c6cfd267eeb$var$ranges.sort($249b6c6cfd267eeb$var$rangeCompare);
        // Then, merge any ranges that overlap.
        for(i = 1, a = $249b6c6cfd267eeb$var$ranges[0], merged = [
            a
        ]; i < n; ++i){
            b = $249b6c6cfd267eeb$var$ranges[i];
            if ($249b6c6cfd267eeb$var$rangeContains(a, b[0]) || $249b6c6cfd267eeb$var$rangeContains(a, b[1])) {
                if ($249b6c6cfd267eeb$var$angle(a[0], b[1]) > $249b6c6cfd267eeb$var$angle(a[0], a[1])) a[1] = b[1];
                if ($249b6c6cfd267eeb$var$angle(b[0], a[1]) > $249b6c6cfd267eeb$var$angle(a[0], a[1])) a[0] = b[0];
            } else merged.push(a = b);
        }
        // Finally, find the largest gap between the merged ranges.
        // The final bounding box will be the inverse of this gap.
        for(deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i){
            b = merged[i];
            if ((delta = $249b6c6cfd267eeb$var$angle(a[1], b[0])) > deltaMax) deltaMax = delta, $249b6c6cfd267eeb$var$lambda0 = b[0], $249b6c6cfd267eeb$var$lambda1 = a[1];
        }
    }
    $249b6c6cfd267eeb$var$ranges = $249b6c6cfd267eeb$var$range = null;
    return $249b6c6cfd267eeb$var$lambda0 === Infinity || $249b6c6cfd267eeb$var$phi0 === Infinity ? [
        [
            NaN,
            NaN
        ],
        [
            NaN,
            NaN
        ]
    ] : [
        [
            $249b6c6cfd267eeb$var$lambda0,
            $249b6c6cfd267eeb$var$phi0
        ],
        [
            $249b6c6cfd267eeb$var$lambda1,
            $249b6c6cfd267eeb$var$phi1
        ]
    ];
}

});

parcelRegister("9LyDp", function(module, exports) {

$parcel$export(module.exports, "default", () => $71c35e92a88f8d18$export$2e2bcd8739ae039);

var $2qYWQ = parcelRequire("2qYWQ");

var $9NJu3 = parcelRequire("9NJu3");

var $6A3Rm = parcelRequire("6A3Rm");

var $j0A9E = parcelRequire("j0A9E");
var $71c35e92a88f8d18$var$W0, $71c35e92a88f8d18$var$W1, $71c35e92a88f8d18$var$X0, $71c35e92a88f8d18$var$Y0, $71c35e92a88f8d18$var$Z0, $71c35e92a88f8d18$var$X1, $71c35e92a88f8d18$var$Y1, $71c35e92a88f8d18$var$Z1, $71c35e92a88f8d18$var$X2, $71c35e92a88f8d18$var$Y2, $71c35e92a88f8d18$var$Z2, $71c35e92a88f8d18$var$lambda00, $71c35e92a88f8d18$var$phi00, $71c35e92a88f8d18$var$x0, $71c35e92a88f8d18$var$y0, $71c35e92a88f8d18$var$z0; // previous point
var $71c35e92a88f8d18$var$centroidStream = {
    sphere: (0, $6A3Rm.default),
    point: $71c35e92a88f8d18$var$centroidPoint,
    lineStart: $71c35e92a88f8d18$var$centroidLineStart,
    lineEnd: $71c35e92a88f8d18$var$centroidLineEnd,
    polygonStart: function() {
        $71c35e92a88f8d18$var$centroidStream.lineStart = $71c35e92a88f8d18$var$centroidRingStart;
        $71c35e92a88f8d18$var$centroidStream.lineEnd = $71c35e92a88f8d18$var$centroidRingEnd;
    },
    polygonEnd: function() {
        $71c35e92a88f8d18$var$centroidStream.lineStart = $71c35e92a88f8d18$var$centroidLineStart;
        $71c35e92a88f8d18$var$centroidStream.lineEnd = $71c35e92a88f8d18$var$centroidLineEnd;
    }
};
// Arithmetic mean of Cartesian vectors.
function $71c35e92a88f8d18$var$centroidPoint(lambda, phi) {
    lambda *= (0, $9NJu3.radians), phi *= (0, $9NJu3.radians);
    var cosPhi = (0, $9NJu3.cos)(phi);
    $71c35e92a88f8d18$var$centroidPointCartesian(cosPhi * (0, $9NJu3.cos)(lambda), cosPhi * (0, $9NJu3.sin)(lambda), (0, $9NJu3.sin)(phi));
}
function $71c35e92a88f8d18$var$centroidPointCartesian(x, y, z) {
    ++$71c35e92a88f8d18$var$W0;
    $71c35e92a88f8d18$var$X0 += (x - $71c35e92a88f8d18$var$X0) / $71c35e92a88f8d18$var$W0;
    $71c35e92a88f8d18$var$Y0 += (y - $71c35e92a88f8d18$var$Y0) / $71c35e92a88f8d18$var$W0;
    $71c35e92a88f8d18$var$Z0 += (z - $71c35e92a88f8d18$var$Z0) / $71c35e92a88f8d18$var$W0;
}
function $71c35e92a88f8d18$var$centroidLineStart() {
    $71c35e92a88f8d18$var$centroidStream.point = $71c35e92a88f8d18$var$centroidLinePointFirst;
}
function $71c35e92a88f8d18$var$centroidLinePointFirst(lambda, phi) {
    lambda *= (0, $9NJu3.radians), phi *= (0, $9NJu3.radians);
    var cosPhi = (0, $9NJu3.cos)(phi);
    $71c35e92a88f8d18$var$x0 = cosPhi * (0, $9NJu3.cos)(lambda);
    $71c35e92a88f8d18$var$y0 = cosPhi * (0, $9NJu3.sin)(lambda);
    $71c35e92a88f8d18$var$z0 = (0, $9NJu3.sin)(phi);
    $71c35e92a88f8d18$var$centroidStream.point = $71c35e92a88f8d18$var$centroidLinePoint;
    $71c35e92a88f8d18$var$centroidPointCartesian($71c35e92a88f8d18$var$x0, $71c35e92a88f8d18$var$y0, $71c35e92a88f8d18$var$z0);
}
function $71c35e92a88f8d18$var$centroidLinePoint(lambda, phi) {
    lambda *= (0, $9NJu3.radians), phi *= (0, $9NJu3.radians);
    var cosPhi = (0, $9NJu3.cos)(phi), x = cosPhi * (0, $9NJu3.cos)(lambda), y = cosPhi * (0, $9NJu3.sin)(lambda), z = (0, $9NJu3.sin)(phi), w = (0, $9NJu3.atan2)((0, $9NJu3.sqrt)((w = $71c35e92a88f8d18$var$y0 * z - $71c35e92a88f8d18$var$z0 * y) * w + (w = $71c35e92a88f8d18$var$z0 * x - $71c35e92a88f8d18$var$x0 * z) * w + (w = $71c35e92a88f8d18$var$x0 * y - $71c35e92a88f8d18$var$y0 * x) * w), $71c35e92a88f8d18$var$x0 * x + $71c35e92a88f8d18$var$y0 * y + $71c35e92a88f8d18$var$z0 * z);
    $71c35e92a88f8d18$var$W1 += w;
    $71c35e92a88f8d18$var$X1 += w * ($71c35e92a88f8d18$var$x0 + ($71c35e92a88f8d18$var$x0 = x));
    $71c35e92a88f8d18$var$Y1 += w * ($71c35e92a88f8d18$var$y0 + ($71c35e92a88f8d18$var$y0 = y));
    $71c35e92a88f8d18$var$Z1 += w * ($71c35e92a88f8d18$var$z0 + ($71c35e92a88f8d18$var$z0 = z));
    $71c35e92a88f8d18$var$centroidPointCartesian($71c35e92a88f8d18$var$x0, $71c35e92a88f8d18$var$y0, $71c35e92a88f8d18$var$z0);
}
function $71c35e92a88f8d18$var$centroidLineEnd() {
    $71c35e92a88f8d18$var$centroidStream.point = $71c35e92a88f8d18$var$centroidPoint;
}
// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function $71c35e92a88f8d18$var$centroidRingStart() {
    $71c35e92a88f8d18$var$centroidStream.point = $71c35e92a88f8d18$var$centroidRingPointFirst;
}
function $71c35e92a88f8d18$var$centroidRingEnd() {
    $71c35e92a88f8d18$var$centroidRingPoint($71c35e92a88f8d18$var$lambda00, $71c35e92a88f8d18$var$phi00);
    $71c35e92a88f8d18$var$centroidStream.point = $71c35e92a88f8d18$var$centroidPoint;
}
function $71c35e92a88f8d18$var$centroidRingPointFirst(lambda, phi) {
    $71c35e92a88f8d18$var$lambda00 = lambda, $71c35e92a88f8d18$var$phi00 = phi;
    lambda *= (0, $9NJu3.radians), phi *= (0, $9NJu3.radians);
    $71c35e92a88f8d18$var$centroidStream.point = $71c35e92a88f8d18$var$centroidRingPoint;
    var cosPhi = (0, $9NJu3.cos)(phi);
    $71c35e92a88f8d18$var$x0 = cosPhi * (0, $9NJu3.cos)(lambda);
    $71c35e92a88f8d18$var$y0 = cosPhi * (0, $9NJu3.sin)(lambda);
    $71c35e92a88f8d18$var$z0 = (0, $9NJu3.sin)(phi);
    $71c35e92a88f8d18$var$centroidPointCartesian($71c35e92a88f8d18$var$x0, $71c35e92a88f8d18$var$y0, $71c35e92a88f8d18$var$z0);
}
function $71c35e92a88f8d18$var$centroidRingPoint(lambda, phi) {
    lambda *= (0, $9NJu3.radians), phi *= (0, $9NJu3.radians);
    var cosPhi = (0, $9NJu3.cos)(phi), x = cosPhi * (0, $9NJu3.cos)(lambda), y = cosPhi * (0, $9NJu3.sin)(lambda), z = (0, $9NJu3.sin)(phi), cx = $71c35e92a88f8d18$var$y0 * z - $71c35e92a88f8d18$var$z0 * y, cy = $71c35e92a88f8d18$var$z0 * x - $71c35e92a88f8d18$var$x0 * z, cz = $71c35e92a88f8d18$var$x0 * y - $71c35e92a88f8d18$var$y0 * x, m = (0, $9NJu3.hypot)(cx, cy, cz), w = (0, $9NJu3.asin)(m), v = m && -w / m; // area weight multiplier
    $71c35e92a88f8d18$var$X2.add(v * cx);
    $71c35e92a88f8d18$var$Y2.add(v * cy);
    $71c35e92a88f8d18$var$Z2.add(v * cz);
    $71c35e92a88f8d18$var$W1 += w;
    $71c35e92a88f8d18$var$X1 += w * ($71c35e92a88f8d18$var$x0 + ($71c35e92a88f8d18$var$x0 = x));
    $71c35e92a88f8d18$var$Y1 += w * ($71c35e92a88f8d18$var$y0 + ($71c35e92a88f8d18$var$y0 = y));
    $71c35e92a88f8d18$var$Z1 += w * ($71c35e92a88f8d18$var$z0 + ($71c35e92a88f8d18$var$z0 = z));
    $71c35e92a88f8d18$var$centroidPointCartesian($71c35e92a88f8d18$var$x0, $71c35e92a88f8d18$var$y0, $71c35e92a88f8d18$var$z0);
}
function $71c35e92a88f8d18$export$2e2bcd8739ae039(object) {
    $71c35e92a88f8d18$var$W0 = $71c35e92a88f8d18$var$W1 = $71c35e92a88f8d18$var$X0 = $71c35e92a88f8d18$var$Y0 = $71c35e92a88f8d18$var$Z0 = $71c35e92a88f8d18$var$X1 = $71c35e92a88f8d18$var$Y1 = $71c35e92a88f8d18$var$Z1 = 0;
    $71c35e92a88f8d18$var$X2 = new (0, $2qYWQ.Adder)();
    $71c35e92a88f8d18$var$Y2 = new (0, $2qYWQ.Adder)();
    $71c35e92a88f8d18$var$Z2 = new (0, $2qYWQ.Adder)();
    (0, $j0A9E.default)(object, $71c35e92a88f8d18$var$centroidStream);
    var x = +$71c35e92a88f8d18$var$X2, y = +$71c35e92a88f8d18$var$Y2, z = +$71c35e92a88f8d18$var$Z2, m = (0, $9NJu3.hypot)(x, y, z);
    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
    if (m < (0, $9NJu3.epsilon2)) {
        x = $71c35e92a88f8d18$var$X1, y = $71c35e92a88f8d18$var$Y1, z = $71c35e92a88f8d18$var$Z1;
        // If the feature has zero length, fall back to arithmetic mean of point vectors.
        if ($71c35e92a88f8d18$var$W1 < (0, $9NJu3.epsilon)) x = $71c35e92a88f8d18$var$X0, y = $71c35e92a88f8d18$var$Y0, z = $71c35e92a88f8d18$var$Z0;
        m = (0, $9NJu3.hypot)(x, y, z);
        // If the feature still has an undefined ccentroid, then return.
        if (m < (0, $9NJu3.epsilon2)) return [
            NaN,
            NaN
        ];
    }
    return [
        (0, $9NJu3.atan2)(y, x) * (0, $9NJu3.degrees),
        (0, $9NJu3.asin)(z / m) * (0, $9NJu3.degrees)
    ];
}

});

parcelRegister("lBblC", function(module, exports) {

$parcel$export(module.exports, "selectionTest", () => $fb95db1209d191d9$export$adcef723500ebc2d);
$parcel$export(module.exports, "selectionIdTest", () => $fb95db1209d191d9$export$9304f42b61a42e31);
$parcel$export(module.exports, "selectionTuples", () => $fb95db1209d191d9$export$821f6bcbecd08f95);
$parcel$export(module.exports, "selectionResolve", () => $fb95db1209d191d9$export$635f5eb9063b6d7d);
$parcel$export(module.exports, "selectionVisitor", () => $fb95db1209d191d9$export$e1e0e3715781a992);

var $17rbx = parcelRequire("17rbx");
var $bDstg = parcelRequire("bDstg");
var $7kNnI = parcelRequire("7kNnI");

var $4SWbq = parcelRequire("4SWbq");

var $60BEk = parcelRequire("60BEk");
const $fb95db1209d191d9$var$Intersect = "intersect";
const $fb95db1209d191d9$var$Union = "union";
const $fb95db1209d191d9$var$VlMulti = "vlMulti";
const $fb95db1209d191d9$var$VlPoint = "vlPoint";
const $fb95db1209d191d9$var$Or = "or";
const $fb95db1209d191d9$var$And = "and";
const $fb95db1209d191d9$var$SelectionId = "_vgsid_";
const $fb95db1209d191d9$var$$selectionId = (0, $4SWbq.field)($fb95db1209d191d9$var$SelectionId);
const $fb95db1209d191d9$var$TYPE_ENUM = "E", $fb95db1209d191d9$var$TYPE_RANGE_INC = "R", $fb95db1209d191d9$var$TYPE_RANGE_EXC = "R-E", $fb95db1209d191d9$var$TYPE_RANGE_LE = "R-LE", $fb95db1209d191d9$var$TYPE_RANGE_RE = "R-RE", $fb95db1209d191d9$var$UNIT_INDEX = "index:unit";
// TODO: revisit date coercion?
function $fb95db1209d191d9$var$testPoint(datum, entry) {
    var fields = entry.fields, values = entry.values, n = fields.length, i = 0, dval, f;
    for(; i < n; ++i){
        f = fields[i];
        f.getter = (0, $4SWbq.field).getter || (0, $4SWbq.field)(f.field);
        dval = f.getter(datum);
        if ((0, $4SWbq.isDate)(dval)) dval = (0, $4SWbq.toNumber)(dval);
        if ((0, $4SWbq.isDate)(values[i])) values[i] = (0, $4SWbq.toNumber)(values[i]);
        if ((0, $4SWbq.isDate)(values[i][0])) values[i] = values[i].map((0, $4SWbq.toNumber));
        if (f.type === $fb95db1209d191d9$var$TYPE_ENUM) {
            // Enumerated fields can either specify individual values (single/multi selections)
            // or an array of values (interval selections).
            if ((0, $4SWbq.isArray)(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) return false;
        } else {
            if (f.type === $fb95db1209d191d9$var$TYPE_RANGE_INC) {
                if (!(0, $4SWbq.inrange)(dval, values[i])) return false;
            } else if (f.type === $fb95db1209d191d9$var$TYPE_RANGE_RE) {
                // Discrete selection of bins test within the range [bin_start, bin_end).
                if (!(0, $4SWbq.inrange)(dval, values[i], true, false)) return false;
            } else if (f.type === $fb95db1209d191d9$var$TYPE_RANGE_EXC) {
                // 'R-E'/'R-LE' included for completeness.
                if (!(0, $4SWbq.inrange)(dval, values[i], false, false)) return false;
            } else if (f.type === $fb95db1209d191d9$var$TYPE_RANGE_LE) {
                if (!(0, $4SWbq.inrange)(dval, values[i], false, true)) return false;
            }
        }
    }
    return true;
}
/**
 * Tests if a tuple is contained within an interactive selection.
 * @param {string} name - The name of the data set representing the selection.
 *  Tuples in the dataset are of the form
 *  {unit: string, fields: array<fielddef>, values: array<*>}.
 *  Fielddef is of the form
 *  {field: string, channel: string, type: 'E' | 'R'} where
 *  'type' identifies whether tuples in the dataset enumerate
 *  values for the field, or specify a continuous range.
 * @param {object} datum - The tuple to test for inclusion.
 * @param {string} op - The set operation for combining selections.
 *   One of 'intersect' or 'union' (default).
 * @return {boolean} - True if the datum is in the selection, false otherwise.
 */ function $fb95db1209d191d9$export$adcef723500ebc2d(name, datum, op) {
    var data = this.context.data[name], entries = data ? data.values.value : [], unitIdx = data ? data[$fb95db1209d191d9$var$UNIT_INDEX] && data[$fb95db1209d191d9$var$UNIT_INDEX].value : undefined, intersect = op === $fb95db1209d191d9$var$Intersect, n = entries.length, i = 0, entry, miss, count, unit, b;
    for(; i < n; ++i){
        entry = entries[i];
        if (unitIdx && intersect) {
            // multi selections union within the same unit and intersect across units.
            miss = miss || {};
            count = miss[unit = entry.unit] || 0;
            // if we've already matched this unit, skip.
            if (count === -1) continue;
            b = $fb95db1209d191d9$var$testPoint(datum, entry);
            miss[unit] = b ? -1 : ++count;
            // if we match and there are no other units return true
            // if we've missed against all tuples in this unit return false
            if (b && unitIdx.size === 1) return true;
            if (!b && count === unitIdx.get(unit).count) return false;
        } else {
            b = $fb95db1209d191d9$var$testPoint(datum, entry);
            // if we find a miss and we do require intersection return false
            // if we find a match and we don't require intersection return true
            if (intersect ^ b) return b;
        }
    }
    // if intersecting and we made it here, then we saw no misses
    // if not intersecting, then we saw no matches
    // if no active selections, return false
    return n && intersect;
}
const $fb95db1209d191d9$var$bisect = (0, $17rbx.default)($fb95db1209d191d9$var$$selectionId), $fb95db1209d191d9$var$bisectLeft = $fb95db1209d191d9$var$bisect.left, $fb95db1209d191d9$var$bisectRight = $fb95db1209d191d9$var$bisect.right;
function $fb95db1209d191d9$export$9304f42b61a42e31(name, datum, op) {
    const data = this.context.data[name], entries = data ? data.values.value : [], unitIdx = data ? data[$fb95db1209d191d9$var$UNIT_INDEX] && data[$fb95db1209d191d9$var$UNIT_INDEX].value : undefined, intersect = op === $fb95db1209d191d9$var$Intersect, value = $fb95db1209d191d9$var$$selectionId(datum), index = $fb95db1209d191d9$var$bisectLeft(entries, value);
    if (index === entries.length) return false;
    if ($fb95db1209d191d9$var$$selectionId(entries[index]) !== value) return false;
    if (unitIdx && intersect) {
        if (unitIdx.size === 1) return true;
        if ($fb95db1209d191d9$var$bisectRight(entries, value) - index < unitIdx.size) return false;
    }
    return true;
}
/**
 * Maps an array of scene graph items to an array of selection tuples.
 * @param {string} name  - The name of the dataset representing the selection.
 * @param {string} base  - The base object that generated tuples extend.
 *
 * @returns {array} An array of selection entries for the given unit.
 */ function $fb95db1209d191d9$export$821f6bcbecd08f95(array, base) {
    return array.map((x)=>(0, $4SWbq.extend)(base.fields ? {
            values: base.fields.map((f)=>(f.getter || (f.getter = (0, $4SWbq.field)(f.field)))(x.datum))
        } : {
            [$fb95db1209d191d9$var$SelectionId]: $fb95db1209d191d9$var$$selectionId(x.datum)
        }, base));
}
/**
 * Resolves selection for use as a scale domain or reads via the API.
 * @param {string} name - The name of the dataset representing the selection
 * @param {string} [op='union'] - The set operation for combining selections.
 *                 One of 'intersect' or 'union' (default).
 * @param {boolean} isMulti - Identifies a "multi" selection to perform more
 *                 expensive resolution computation.
 * @param {boolean} vl5 - With Vega-Lite v5, "multi" selections are now called "point"
 *                 selections, and thus the resolved tuple should reflect this name.
 *                 This parameter allows us to reflect this change without triggering
 *                 a major version bump for Vega.
 * @returns {object} An object of selected fields and values.
 */ function $fb95db1209d191d9$export$635f5eb9063b6d7d(name, op, isMulti, vl5) {
    var data = this.context.data[name], entries = data ? data.values.value : [], resolved = {}, multiRes = {}, types = {}, entry, fields, values, unit, field, value, res, resUnit, type, union, n = entries.length, i = 0, j, m;
    // First union all entries within the same unit.
    for(; i < n; ++i){
        entry = entries[i];
        unit = entry.unit;
        fields = entry.fields;
        values = entry.values;
        if (fields && values) {
            // Intentional selection stores
            for(j = 0, m = fields.length; j < m; ++j){
                field = fields[j];
                res = resolved[field.field] || (resolved[field.field] = {});
                resUnit = res[unit] || (res[unit] = []);
                types[field.field] = type = field.type.charAt(0);
                union = $fb95db1209d191d9$var$ops[`${type}_union`];
                res[unit] = union(resUnit, (0, $4SWbq.array)(values[j]));
            }
            // If the same multi-selection is repeated over views and projected over
            // an encoding, it may operate over different fields making it especially
            // tricky to reliably resolve it. At best, we can de-dupe identical entries
            // but doing so may be more computationally expensive than it is worth.
            // Instead, for now, we simply transform our store representation into
            // a more human-friendly one.
            if (isMulti) {
                resUnit = multiRes[unit] || (multiRes[unit] = []);
                resUnit.push((0, $4SWbq.array)(values).reduce((obj, curr, j)=>(obj[fields[j].field] = curr, obj), {}));
            }
        } else {
            // Short circuit extensional selectionId stores which hold sorted IDs unique to each unit.
            field = $fb95db1209d191d9$var$SelectionId;
            value = $fb95db1209d191d9$var$$selectionId(entry);
            res = resolved[field] || (resolved[field] = {});
            resUnit = res[unit] || (res[unit] = []);
            resUnit.push(value);
            if (isMulti) {
                resUnit = multiRes[unit] || (multiRes[unit] = []);
                resUnit.push({
                    [$fb95db1209d191d9$var$SelectionId]: value
                });
            }
        }
    }
    // Then resolve fields across units as per the op.
    op = op || $fb95db1209d191d9$var$Union;
    if (resolved[$fb95db1209d191d9$var$SelectionId]) resolved[$fb95db1209d191d9$var$SelectionId] = $fb95db1209d191d9$var$ops[`${$fb95db1209d191d9$var$SelectionId}_${op}`](...Object.values(resolved[$fb95db1209d191d9$var$SelectionId]));
    else Object.keys(resolved).forEach((field)=>{
        resolved[field] = Object.keys(resolved[field]).map((unit)=>resolved[field][unit]).reduce((acc, curr)=>acc === undefined ? curr : $fb95db1209d191d9$var$ops[`${types[field]}_${op}`](acc, curr));
    });
    entries = Object.keys(multiRes);
    if (isMulti && entries.length) {
        const key = vl5 ? $fb95db1209d191d9$var$VlPoint : $fb95db1209d191d9$var$VlMulti;
        resolved[key] = op === $fb95db1209d191d9$var$Union ? {
            [$fb95db1209d191d9$var$Or]: entries.reduce((acc, k)=>(acc.push(...multiRes[k]), acc), [])
        } : {
            [$fb95db1209d191d9$var$And]: entries.map((k)=>({
                    [$fb95db1209d191d9$var$Or]: multiRes[k]
                }))
        };
    }
    return resolved;
}
var $fb95db1209d191d9$var$ops = {
    [`${$fb95db1209d191d9$var$SelectionId}_union`]: (0, $7kNnI.default),
    [`${$fb95db1209d191d9$var$SelectionId}_intersect`]: (0, $bDstg.default),
    E_union: function(base, value) {
        if (!base.length) return value;
        var i = 0, n = value.length;
        for(; i < n; ++i)if (base.indexOf(value[i]) < 0) base.push(value[i]);
        return base;
    },
    E_intersect: function(base, value) {
        return !base.length ? value : base.filter((v)=>value.indexOf(v) >= 0);
    },
    R_union: function(base, value) {
        var lo = (0, $4SWbq.toNumber)(value[0]), hi = (0, $4SWbq.toNumber)(value[1]);
        if (lo > hi) {
            lo = value[1];
            hi = value[0];
        }
        if (!base.length) return [
            lo,
            hi
        ];
        if (base[0] > lo) base[0] = lo;
        if (base[1] < hi) base[1] = hi;
        return base;
    },
    R_intersect: function(base, value) {
        var lo = (0, $4SWbq.toNumber)(value[0]), hi = (0, $4SWbq.toNumber)(value[1]);
        if (lo > hi) {
            lo = value[1];
            hi = value[0];
        }
        if (!base.length) return [
            lo,
            hi
        ];
        if (hi < base[0] || base[1] < lo) return [];
        else {
            if (base[0] < lo) base[0] = lo;
            if (base[1] > hi) base[1] = hi;
        }
        return base;
    }
};
const $fb95db1209d191d9$var$DataPrefix = ":", $fb95db1209d191d9$var$IndexPrefix = "@";
function $fb95db1209d191d9$export$e1e0e3715781a992(name, args, scope, params) {
    if (args[0].type !== (0, $60BEk.Literal)) (0, $4SWbq.error)("First argument to selection functions must be a string literal.");
    const data = args[0].value, op = args.length >= 2 && (0, $4SWbq.peek)(args).value, field = "unit", indexName = $fb95db1209d191d9$var$IndexPrefix + field, dataName = $fb95db1209d191d9$var$DataPrefix + data;
    // eslint-disable-next-line no-prototype-builtins
    if (op === $fb95db1209d191d9$var$Intersect && !(0, $4SWbq.hasOwnProperty)(params, indexName)) params[indexName] = scope.getData(data).indataRef(scope, field);
    // eslint-disable-next-line no-prototype-builtins
    if (!(0, $4SWbq.hasOwnProperty)(params, dataName)) params[dataName] = scope.getData(data).tuplesRef();
}

});
parcelRegister("17rbx", function(module, exports) {

$parcel$export(module.exports, "default", () => $0d0b8842dae49294$export$2e2bcd8739ae039);

var $hTk8l = parcelRequire("hTk8l");

var $lmrFm = parcelRequire("lmrFm");
function $0d0b8842dae49294$export$2e2bcd8739ae039(f) {
    let compare1, compare2, delta;
    // If an accessor is specified, promote it to a comparator. In this case we
    // can test whether the search value is (self-) comparable. We can’t do this
    // for a comparator (except for specific, known comparators) because we can’t
    // tell if the comparator is symmetric, and an asymmetric comparator can’t be
    // used to test whether a single value is comparable.
    if (f.length !== 2) {
        compare1 = (0, $hTk8l.default);
        compare2 = (d, x)=>(0, $hTk8l.default)(f(d), x);
        delta = (d, x)=>f(d) - x;
    } else {
        compare1 = f === (0, $hTk8l.default) || f === (0, $lmrFm.default) ? f : $0d0b8842dae49294$var$zero;
        compare2 = f;
        delta = f;
    }
    function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) < 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) <= 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
        left: left,
        center: center,
        right: right
    };
}
function $0d0b8842dae49294$var$zero() {
    return 0;
}

});
parcelRegister("hTk8l", function(module, exports) {

$parcel$export(module.exports, "default", () => $d06730d12bd6b334$export$2e2bcd8739ae039);
function $d06730d12bd6b334$export$2e2bcd8739ae039(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

});

parcelRegister("lmrFm", function(module, exports) {

$parcel$export(module.exports, "default", () => $f8d11cf0fd1b839a$export$2e2bcd8739ae039);
function $f8d11cf0fd1b839a$export$2e2bcd8739ae039(a, b) {
    return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

});


parcelRegister("bDstg", function(module, exports) {

$parcel$export(module.exports, "default", () => $87896bfbd3777e82$export$2e2bcd8739ae039);

var $5eARR = parcelRequire("5eARR");
function $87896bfbd3777e82$export$2e2bcd8739ae039(values, ...others) {
    values = new (0, $5eARR.InternSet)(values);
    others = others.map($87896bfbd3777e82$var$set);
    out: for (const value of values){
        for (const other of others)if (!other.has(value)) {
            values.delete(value);
            continue out;
        }
    }
    return values;
}
function $87896bfbd3777e82$var$set(values) {
    return values instanceof (0, $5eARR.InternSet) ? values : new (0, $5eARR.InternSet)(values);
}

});

parcelRegister("7kNnI", function(module, exports) {

$parcel$export(module.exports, "default", () => $5570b4c9d681a152$export$2e2bcd8739ae039);

var $5eARR = parcelRequire("5eARR");
function $5570b4c9d681a152$export$2e2bcd8739ae039(...others) {
    const set = new (0, $5eARR.InternSet)();
    for (const other of others)for (const o of other)set.add(o);
    return set;
}

});



parcelRegister("gDxmt", function(module, exports) {

$parcel$export(module.exports, "context", () => $c1ca2ac36b066a88$export$a078c61943f9dbbe);

var $4SWbq = parcelRequire("4SWbq");

var $4jOgW = parcelRequire("4jOgW");
/**
 * Parse a serialized dataflow specification.
 */ function $c1ca2ac36b066a88$var$parse(spec) {
    const ctx = this, operators = spec.operators || [];
    // parse background
    if (spec.background) ctx.background = spec.background;
    // parse event configuration
    if (spec.eventConfig) ctx.eventConfig = spec.eventConfig;
    // parse locale configuration
    if (spec.locale) ctx.locale = spec.locale;
    // parse operators
    operators.forEach((entry)=>ctx.parseOperator(entry));
    // parse operator parameters
    operators.forEach((entry)=>ctx.parseOperatorParameters(entry));
    // parse streams
    (spec.streams || []).forEach((entry)=>ctx.parseStream(entry));
    // parse updates
    (spec.updates || []).forEach((entry)=>ctx.parseUpdate(entry));
    return ctx.resolve();
}
const $c1ca2ac36b066a88$var$Skip = (0, $4SWbq.toSet)([
    "rule"
]), $c1ca2ac36b066a88$var$Swap = (0, $4SWbq.toSet)([
    "group",
    "image",
    "rect"
]);
function $c1ca2ac36b066a88$var$adjustSpatial(encode, marktype) {
    let code = "";
    if ($c1ca2ac36b066a88$var$Skip[marktype]) return code;
    if (encode.x2) {
        if (encode.x) {
            if ($c1ca2ac36b066a88$var$Swap[marktype]) code += "if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;";
            code += "o.width=o.x2-o.x;";
        } else code += "o.x=o.x2-(o.width||0);";
    }
    if (encode.xc) code += "o.x=o.xc-(o.width||0)/2;";
    if (encode.y2) {
        if (encode.y) {
            if ($c1ca2ac36b066a88$var$Swap[marktype]) code += "if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;";
            code += "o.height=o.y2-o.y;";
        } else code += "o.y=o.y2-(o.height||0);";
    }
    if (encode.yc) code += "o.y=o.yc-(o.height||0)/2;";
    return code;
}
function $c1ca2ac36b066a88$var$canonicalType(type) {
    return (type + "").toLowerCase();
}
function $c1ca2ac36b066a88$var$isOperator(type) {
    return $c1ca2ac36b066a88$var$canonicalType(type) === "operator";
}
function $c1ca2ac36b066a88$var$isCollect(type) {
    return $c1ca2ac36b066a88$var$canonicalType(type) === "collect";
}
function $c1ca2ac36b066a88$var$expression(ctx, args, code) {
    // wrap code in return statement if expression does not terminate
    if (!code.endsWith(";")) code = "return(" + code + ");";
    const fn = Function(...args.concat(code));
    return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
}
// generate code for comparing a single field
function $c1ca2ac36b066a88$var$_compare(u, v, lt, gt) {
    return `((u = ${u}) < (v = ${v}) || u == null) && v != null ? ${lt}
  : (u > v || v == null) && u != null ? ${gt}
  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}
  : v !== v && u === u ? ${gt} : `;
}
var $c1ca2ac36b066a88$var$expressionCodegen = {
    /**
   * Parse an expression used to update an operator value.
   */ operator: (ctx, expr)=>$c1ca2ac36b066a88$var$expression(ctx, [
            "_"
        ], expr.code),
    /**
   * Parse an expression provided as an operator parameter value.
   */ parameter: (ctx, expr)=>$c1ca2ac36b066a88$var$expression(ctx, [
            "datum",
            "_"
        ], expr.code),
    /**
   * Parse an expression applied to an event stream.
   */ event: (ctx, expr)=>$c1ca2ac36b066a88$var$expression(ctx, [
            "event"
        ], expr.code),
    /**
   * Parse an expression used to handle an event-driven operator update.
   */ handler: (ctx, expr)=>{
        const code = `var datum=event.item&&event.item.datum;return ${expr.code};`;
        return $c1ca2ac36b066a88$var$expression(ctx, [
            "_",
            "event"
        ], code);
    },
    /**
   * Parse an expression that performs visual encoding.
   */ encode: (ctx, encode)=>{
        const { marktype: marktype, channels: channels } = encode;
        let code = "var o=item,datum=o.datum,m=0,$;";
        for(const name in channels){
            const o = "o[" + (0, $4SWbq.stringValue)(name) + "]";
            code += `$=${channels[name].code};if(${o}!==$)${o}=$,m=1;`;
        }
        code += $c1ca2ac36b066a88$var$adjustSpatial(channels, marktype);
        code += "return m;";
        return $c1ca2ac36b066a88$var$expression(ctx, [
            "item",
            "_"
        ], code);
    },
    /**
   * Optimized code generators for access and comparison.
   */ codegen: {
        get (path) {
            const ref = `[${path.map((0, $4SWbq.stringValue)).join("][")}]`;
            const get = Function("_", `return _${ref};`);
            get.path = ref;
            return get;
        },
        comparator (fields, orders) {
            let t;
            const map = (f, i)=>{
                const o = orders[i];
                let u, v;
                if (f.path) {
                    u = `a${f.path}`;
                    v = `b${f.path}`;
                } else {
                    (t = t || {})["f" + i] = f;
                    u = `this.f${i}(a)`;
                    v = `this.f${i}(b)`;
                }
                return $c1ca2ac36b066a88$var$_compare(u, v, -o, o);
            };
            const fn = Function("a", "b", "var u, v; return " + fields.map(map).join("") + "0;");
            return t ? fn.bind(t) : fn;
        }
    }
};
/**
 * Parse a dataflow operator.
 */ function $c1ca2ac36b066a88$var$parseOperator(spec) {
    const ctx = this;
    if ($c1ca2ac36b066a88$var$isOperator(spec.type) || !spec.type) ctx.operator(spec, spec.update ? ctx.operatorExpression(spec.update) : null);
    else ctx.transform(spec, spec.type);
}
/**
 * Parse and assign operator parameters.
 */ function $c1ca2ac36b066a88$var$parseOperatorParameters(spec) {
    const ctx = this;
    if (spec.params) {
        const op = ctx.get(spec.id);
        if (!op) (0, $4SWbq.error)("Invalid operator id: " + spec.id);
        ctx.dataflow.connect(op, op.parameters(ctx.parseParameters(spec.params), spec.react, spec.initonly));
    }
}
/**
 * Parse a set of operator parameters.
 */ function $c1ca2ac36b066a88$var$parseParameters(spec, params) {
    params = params || {};
    const ctx = this;
    for(const key in spec){
        const value = spec[key];
        params[key] = (0, $4SWbq.isArray)(value) ? value.map((v)=>$c1ca2ac36b066a88$var$parseParameter(v, ctx, params)) : $c1ca2ac36b066a88$var$parseParameter(value, ctx, params);
    }
    return params;
}
/**
 * Parse a single parameter.
 */ function $c1ca2ac36b066a88$var$parseParameter(spec, ctx, params) {
    if (!spec || !(0, $4SWbq.isObject)(spec)) return spec;
    for(let i = 0, n = $c1ca2ac36b066a88$var$PARSERS.length, p; i < n; ++i){
        p = $c1ca2ac36b066a88$var$PARSERS[i];
        if ((0, $4SWbq.hasOwnProperty)(spec, p.key)) return p.parse(spec, ctx, params);
    }
    return spec;
}
/** Reference parsers. */ var $c1ca2ac36b066a88$var$PARSERS = [
    {
        key: "$ref",
        parse: $c1ca2ac36b066a88$var$getOperator
    },
    {
        key: "$key",
        parse: $c1ca2ac36b066a88$var$getKey
    },
    {
        key: "$expr",
        parse: $c1ca2ac36b066a88$var$getExpression
    },
    {
        key: "$field",
        parse: $c1ca2ac36b066a88$var$getField
    },
    {
        key: "$encode",
        parse: $c1ca2ac36b066a88$var$getEncode
    },
    {
        key: "$compare",
        parse: $c1ca2ac36b066a88$var$getCompare
    },
    {
        key: "$context",
        parse: $c1ca2ac36b066a88$var$getContext
    },
    {
        key: "$subflow",
        parse: $c1ca2ac36b066a88$var$getSubflow
    },
    {
        key: "$tupleid",
        parse: $c1ca2ac36b066a88$var$getTupleId
    }
];
/**
 * Resolve an operator reference.
 */ function $c1ca2ac36b066a88$var$getOperator(_, ctx) {
    return ctx.get(_.$ref) || (0, $4SWbq.error)("Operator not defined: " + _.$ref);
}
/**
 * Resolve an expression reference.
 */ function $c1ca2ac36b066a88$var$getExpression(_, ctx, params) {
    if (_.$params) // parse expression parameters
    ctx.parseParameters(_.$params, params);
    const k = "e:" + _.$expr.code;
    return ctx.fn[k] || (ctx.fn[k] = (0, $4SWbq.accessor)(ctx.parameterExpression(_.$expr), _.$fields));
}
/**
 * Resolve a key accessor reference.
 */ function $c1ca2ac36b066a88$var$getKey(_, ctx) {
    const k = "k:" + _.$key + "_" + !!_.$flat;
    return ctx.fn[k] || (ctx.fn[k] = (0, $4SWbq.key)(_.$key, _.$flat, ctx.expr.codegen));
}
/**
 * Resolve a field accessor reference.
 */ function $c1ca2ac36b066a88$var$getField(_, ctx) {
    if (!_.$field) return null;
    const k = "f:" + _.$field + "_" + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = (0, $4SWbq.field)(_.$field, _.$name, ctx.expr.codegen));
}
/**
 * Resolve a comparator function reference.
 */ function $c1ca2ac36b066a88$var$getCompare(_, ctx) {
    // As of Vega 5.5.3, $tupleid sort is no longer used.
    // Keep here for now for backwards compatibility.
    const k = "c:" + _.$compare + "_" + _.$order, c = (0, $4SWbq.array)(_.$compare).map((_)=>_ && _.$tupleid ? (0, $4jOgW.tupleid) : _);
    return ctx.fn[k] || (ctx.fn[k] = (0, $4SWbq.compare)(c, _.$order, ctx.expr.codegen));
}
/**
 * Resolve an encode operator reference.
 */ function $c1ca2ac36b066a88$var$getEncode(_, ctx) {
    const spec = _.$encode, encode = {};
    for(const name in spec){
        const enc = spec[name];
        encode[name] = (0, $4SWbq.accessor)(ctx.encodeExpression(enc.$expr), enc.$fields);
        encode[name].output = enc.$output;
    }
    return encode;
}
/**
 * Resolve a context reference.
 */ function $c1ca2ac36b066a88$var$getContext(_, ctx) {
    return ctx;
}
/**
 * Resolve a recursive subflow specification.
 */ function $c1ca2ac36b066a88$var$getSubflow(_, ctx) {
    const spec = _.$subflow;
    return function(dataflow, key, parent) {
        const subctx = ctx.fork().parse(spec), op = subctx.get(spec.operators[0].id), p = subctx.signals.parent;
        if (p) p.set(parent);
        op.detachSubflow = ()=>ctx.detach(subctx);
        return op;
    };
}
/**
 * Resolve a tuple id reference.
 */ function $c1ca2ac36b066a88$var$getTupleId() {
    return 0, $4jOgW.tupleid;
}
/**
 * Parse an event stream specification.
 */ function $c1ca2ac36b066a88$var$parseStream(spec) {
    var ctx = this, filter = spec.filter != null ? ctx.eventExpression(spec.filter) : undefined, stream = spec.stream != null ? ctx.get(spec.stream) : undefined, args;
    if (spec.source) stream = ctx.events(spec.source, spec.type, filter);
    else if (spec.merge) {
        args = spec.merge.map((_)=>ctx.get(_));
        stream = args[0].merge.apply(args[0], args.slice(1));
    }
    if (spec.between) {
        args = spec.between.map((_)=>ctx.get(_));
        stream = stream.between(args[0], args[1]);
    }
    if (spec.filter) stream = stream.filter(filter);
    if (spec.throttle != null) stream = stream.throttle(+spec.throttle);
    if (spec.debounce != null) stream = stream.debounce(+spec.debounce);
    if (stream == null) (0, $4SWbq.error)("Invalid stream definition: " + JSON.stringify(spec));
    if (spec.consume) stream.consume(true);
    ctx.stream(spec, stream);
}
/**
 * Parse an event-driven operator update.
 */ function $c1ca2ac36b066a88$var$parseUpdate(spec) {
    var ctx = this, srcid = (0, $4SWbq.isObject)(srcid = spec.source) ? srcid.$ref : srcid, source = ctx.get(srcid), target = null, update = spec.update, params = undefined;
    if (!source) (0, $4SWbq.error)("Source not defined: " + spec.source);
    target = spec.target && spec.target.$expr ? ctx.eventExpression(spec.target.$expr) : ctx.get(spec.target);
    if (update && update.$expr) {
        if (update.$params) params = ctx.parseParameters(update.$params);
        update = ctx.handlerExpression(update.$expr);
    }
    ctx.update(spec, source, target, update, params);
}
const $c1ca2ac36b066a88$var$SKIP = {
    skip: true
};
function $c1ca2ac36b066a88$var$getState(options) {
    var ctx = this, state = {};
    if (options.signals) {
        var signals = state.signals = {};
        Object.keys(ctx.signals).forEach((key)=>{
            const op = ctx.signals[key];
            if (options.signals(key, op)) signals[key] = op.value;
        });
    }
    if (options.data) {
        var data = state.data = {};
        Object.keys(ctx.data).forEach((key)=>{
            const dataset = ctx.data[key];
            if (options.data(key, dataset)) data[key] = dataset.input.value;
        });
    }
    if (ctx.subcontext && options.recurse !== false) state.subcontext = ctx.subcontext.map((ctx)=>ctx.getState(options));
    return state;
}
function $c1ca2ac36b066a88$var$setState(state) {
    var ctx = this, df = ctx.dataflow, data = state.data, signals = state.signals;
    Object.keys(signals || {}).forEach((key)=>{
        df.update(ctx.signals[key], signals[key], $c1ca2ac36b066a88$var$SKIP);
    });
    Object.keys(data || {}).forEach((key)=>{
        df.pulse(ctx.data[key].input, df.changeset().remove((0, $4SWbq.truthy)).insert(data[key]));
    });
    (state.subcontext || []).forEach((substate, i)=>{
        const subctx = ctx.subcontext[i];
        if (subctx) subctx.setState(substate);
    });
}
/**
 * Context objects store the current parse state.
 * Enables lookup of parsed operators, event streams, accessors, etc.
 * Provides a 'fork' method for creating child contexts for subflows.
 */ function $c1ca2ac36b066a88$export$a078c61943f9dbbe(df, transforms, functions, expr) {
    return new $c1ca2ac36b066a88$var$Context(df, transforms, functions, expr);
}
function $c1ca2ac36b066a88$var$Context(df, transforms, functions, expr) {
    this.dataflow = df;
    this.transforms = transforms;
    this.events = df.events.bind(df);
    this.expr = expr || $c1ca2ac36b066a88$var$expressionCodegen, this.signals = {};
    this.scales = {};
    this.nodes = {};
    this.data = {};
    this.fn = {};
    if (functions) {
        this.functions = Object.create(functions);
        this.functions.context = this;
    }
}
function $c1ca2ac36b066a88$var$Subcontext(ctx) {
    this.dataflow = ctx.dataflow;
    this.transforms = ctx.transforms;
    this.events = ctx.events;
    this.expr = ctx.expr;
    this.signals = Object.create(ctx.signals);
    this.scales = Object.create(ctx.scales);
    this.nodes = Object.create(ctx.nodes);
    this.data = Object.create(ctx.data);
    this.fn = Object.create(ctx.fn);
    if (ctx.functions) {
        this.functions = Object.create(ctx.functions);
        this.functions.context = this;
    }
}
$c1ca2ac36b066a88$var$Context.prototype = $c1ca2ac36b066a88$var$Subcontext.prototype = {
    fork () {
        const ctx = new $c1ca2ac36b066a88$var$Subcontext(this);
        (this.subcontext || (this.subcontext = [])).push(ctx);
        return ctx;
    },
    detach (ctx) {
        this.subcontext = this.subcontext.filter((c)=>c !== ctx);
        // disconnect all nodes in the subcontext
        // wipe out targets first for better efficiency
        const keys = Object.keys(ctx.nodes);
        for (const key of keys)ctx.nodes[key]._targets = null;
        for (const key of keys)ctx.nodes[key].detach();
        ctx.nodes = null;
    },
    get (id) {
        return this.nodes[id];
    },
    set (id, node) {
        return this.nodes[id] = node;
    },
    add (spec, op) {
        const ctx = this, df = ctx.dataflow, data = spec.value;
        ctx.set(spec.id, op);
        if ($c1ca2ac36b066a88$var$isCollect(spec.type) && data) {
            if (data.$ingest) df.ingest(op, data.$ingest, data.$format);
            else if (data.$request) df.preload(op, data.$request, data.$format);
            else df.pulse(op, df.changeset().insert(data));
        }
        if (spec.root) ctx.root = op;
        if (spec.parent) {
            let p = ctx.get(spec.parent.$ref);
            if (p) {
                df.connect(p, [
                    op
                ]);
                op.targets().add(p);
            } else (ctx.unresolved = ctx.unresolved || []).push(()=>{
                p = ctx.get(spec.parent.$ref);
                df.connect(p, [
                    op
                ]);
                op.targets().add(p);
            });
        }
        if (spec.signal) ctx.signals[spec.signal] = op;
        if (spec.scale) ctx.scales[spec.scale] = op;
        if (spec.data) for(const name in spec.data){
            const data = ctx.data[name] || (ctx.data[name] = {});
            spec.data[name].forEach((role)=>data[role] = op);
        }
    },
    resolve () {
        (this.unresolved || []).forEach((fn)=>fn());
        delete this.unresolved;
        return this;
    },
    operator (spec, update) {
        this.add(spec, this.dataflow.add(spec.value, update));
    },
    transform (spec, type) {
        this.add(spec, this.dataflow.add(this.transforms[$c1ca2ac36b066a88$var$canonicalType(type)]));
    },
    stream (spec, stream) {
        this.set(spec.id, stream);
    },
    update (spec, stream, target, update, params) {
        this.dataflow.on(stream, target, update, params, spec.options);
    },
    // expression parsing
    operatorExpression (expr) {
        return this.expr.operator(this, expr);
    },
    parameterExpression (expr) {
        return this.expr.parameter(this, expr);
    },
    eventExpression (expr) {
        return this.expr.event(this, expr);
    },
    handlerExpression (expr) {
        return this.expr.handler(this, expr);
    },
    encodeExpression (encode) {
        return this.expr.encode(this, encode);
    },
    parse: // parse methods
    $c1ca2ac36b066a88$var$parse,
    parseOperator: $c1ca2ac36b066a88$var$parseOperator,
    parseOperatorParameters: $c1ca2ac36b066a88$var$parseOperatorParameters,
    parseParameters: $c1ca2ac36b066a88$var$parseParameters,
    parseStream: $c1ca2ac36b066a88$var$parseStream,
    parseUpdate: $c1ca2ac36b066a88$var$parseUpdate,
    getState: // state methods
    $c1ca2ac36b066a88$var$getState,
    setState: $c1ca2ac36b066a88$var$setState
};

});

parcelRegister("aDwtd", function(module, exports) {

$parcel$export(module.exports, "default", () => $7be6bbcc572f965c$export$2e2bcd8739ae039);

var $fMkui = parcelRequire("fMkui");
function $7be6bbcc572f965c$export$2e2bcd8739ae039(callback, delay, time) {
    var t = new (0, $fMkui.Timer), total = delay;
    if (delay == null) return t.restart(callback, delay, time), t;
    t._restart = t.restart;
    t.restart = function(callback, delay, time) {
        delay = +delay, time = time == null ? (0, $fMkui.now)() : +time;
        t._restart(function tick(elapsed) {
            elapsed += total;
            t._restart(tick, total += delay, time);
            callback(elapsed);
        }, delay, time);
    };
    t.restart(callback, delay, time);
    return t;
}

});


parcelRegister("60tJ7", function(module, exports) {

$parcel$export(module.exports, "parse", () => parse);

var $4SWbq = parcelRequire("4SWbq");

var $Us6QS = parcelRequire("Us6QS");

var $jOgxz = parcelRequire("jOgxz");

var $1UqgZ = parcelRequire("1UqgZ");

var $4jOgW = parcelRequire("4jOgW");
function parseAutosize(spec) {
    return (0, $4SWbq.isObject)(spec) ? spec : {
        type: spec || "pad"
    };
}
const number = (_)=>+_ || 0;
const paddingObject = (_)=>({
        top: _,
        bottom: _,
        left: _,
        right: _
    });
function parsePadding(spec) {
    return !(0, $4SWbq.isObject)(spec) ? paddingObject(number(spec)) : spec.signal ? spec : {
        top: number(spec.top),
        bottom: number(spec.bottom),
        left: number(spec.left),
        right: number(spec.right)
    };
}
const encoder = (_)=>(0, $4SWbq.isObject)(_) && !(0, $4SWbq.isArray)(_) ? (0, $4SWbq.extend)({}, _) : {
        value: _
    };
function addEncode(object, name, value, set) {
    if (value != null) {
        const isEncoder = (0, $4SWbq.isObject)(value) && !(0, $4SWbq.isArray)(value) || (0, $4SWbq.isArray)(value) && value.length && (0, $4SWbq.isObject)(value[0]);
        // Always assign signal to update, even if the signal is from the enter block
        if (isEncoder) object.update[name] = value;
        else object[set || "enter"][name] = {
            value: value
        };
        return 1;
    } else return 0;
}
function addEncoders(object, enter, update) {
    for(const name in enter)addEncode(object, name, enter[name]);
    for(const name in update)addEncode(object, name, update[name], "update");
}
function extendEncode(encode, extra, skip) {
    for(const name in extra){
        if (skip && (0, $4SWbq.hasOwnProperty)(skip, name)) continue;
        encode[name] = (0, $4SWbq.extend)(encode[name] || {}, extra[name]);
    }
    return encode;
}
function has(key, encode) {
    return encode && (encode.enter && encode.enter[key] || encode.update && encode.update[key]);
}
const MarkRole = "mark";
const FrameRole = "frame";
const ScopeRole = "scope";
const AxisRole = "axis";
const AxisDomainRole = "axis-domain";
const AxisGridRole = "axis-grid";
const AxisLabelRole = "axis-label";
const AxisTickRole = "axis-tick";
const AxisTitleRole = "axis-title";
const LegendRole = "legend";
const LegendBandRole = "legend-band";
const LegendEntryRole = "legend-entry";
const LegendGradientRole = "legend-gradient";
const LegendLabelRole = "legend-label";
const LegendSymbolRole = "legend-symbol";
const LegendTitleRole = "legend-title";
const TitleRole = "title";
const TitleTextRole = "title-text";
const TitleSubtitleRole = "title-subtitle";
function applyDefaults(encode, type, role, style, config) {
    const defaults = {}, enter = {};
    let update, key, skip, props;
    // if text mark, apply global lineBreak settings (#2370)
    key = "lineBreak";
    if (type === "text" && config[key] != null && !has(key, encode)) applyDefault(defaults, key, config[key]);
    // ignore legend and axis roles
    if (role == "legend" || String(role).startsWith("axis")) role = null;
    // resolve mark config
    props = role === FrameRole ? config.group : role === MarkRole ? (0, $4SWbq.extend)({}, config.mark, config[type]) : null;
    for(key in props){
        // do not apply defaults if relevant fields are defined
        skip = has(key, encode) || (key === "fill" || key === "stroke") && (has("fill", encode) || has("stroke", encode));
        if (!skip) applyDefault(defaults, key, props[key]);
    }
    // resolve styles, apply with increasing precedence
    (0, $4SWbq.array)(style).forEach((name)=>{
        const props = config.style && config.style[name];
        for(const key in props)if (!has(key, encode)) applyDefault(defaults, key, props[key]);
    });
    encode = (0, $4SWbq.extend)({}, encode); // defensive copy
    for(key in defaults){
        props = defaults[key];
        if (props.signal) (update = update || {})[key] = props;
        else enter[key] = props;
    }
    encode.enter = (0, $4SWbq.extend)(enter, encode.enter);
    if (update) encode.update = (0, $4SWbq.extend)(update, encode.update);
    return encode;
}
function applyDefault(defaults, key, value) {
    defaults[key] = value && value.signal ? {
        signal: value.signal
    } : {
        value: value
    };
}
const scaleRef = (scale)=>(0, $4SWbq.isString)(scale) ? (0, $4SWbq.stringValue)(scale) : scale.signal ? `(${scale.signal})` : field(scale);
function entry$1(enc) {
    if (enc.gradient != null) return gradient(enc);
    let value = enc.signal ? `(${enc.signal})` : enc.color ? color(enc.color) : enc.field != null ? field(enc.field) : enc.value !== undefined ? (0, $4SWbq.stringValue)(enc.value) : undefined;
    if (enc.scale != null) value = scale(enc, value);
    if (value === undefined) value = null;
    if (enc.exponent != null) value = `pow(${value},${property(enc.exponent)})`;
    if (enc.mult != null) value += `*${property(enc.mult)}`;
    if (enc.offset != null) value += `+${property(enc.offset)}`;
    if (enc.round) value = `round(${value})`;
    return value;
}
const _color = (type, x, y, z)=>`(${type}(${[
        x,
        y,
        z
    ].map(entry$1).join(",")})+'')`;
function color(enc) {
    return enc.c ? _color("hcl", enc.h, enc.c, enc.l) : enc.h || enc.s ? _color("hsl", enc.h, enc.s, enc.l) : enc.l || enc.a ? _color("lab", enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? _color("rgb", enc.r, enc.g, enc.b) : null;
}
function gradient(enc) {
    // map undefined to null; expression lang does not allow undefined
    const args = [
        enc.start,
        enc.stop,
        enc.count
    ].map((_)=>_ == null ? null : (0, $4SWbq.stringValue)(_));
    // trim null inputs from the end
    while(args.length && (0, $4SWbq.peek)(args) == null)args.pop();
    args.unshift(scaleRef(enc.gradient));
    return `gradient(${args.join(",")})`;
}
function property(property) {
    return (0, $4SWbq.isObject)(property) ? "(" + entry$1(property) + ")" : property;
}
function field(ref) {
    return resolveField((0, $4SWbq.isObject)(ref) ? ref : {
        datum: ref
    });
}
function resolveField(ref) {
    let object, level, field;
    if (ref.signal) {
        object = "datum";
        field = ref.signal;
    } else if (ref.group || ref.parent) {
        level = Math.max(1, ref.level || 1);
        object = "item";
        while(level-- > 0)object += ".mark.group";
        if (ref.parent) {
            field = ref.parent;
            object += ".datum";
        } else field = ref.group;
    } else if (ref.datum) {
        object = "datum";
        field = ref.datum;
    } else (0, $4SWbq.error)("Invalid field reference: " + (0, $4SWbq.stringValue)(ref));
    if (!ref.signal) field = (0, $4SWbq.isString)(field) ? (0, $4SWbq.splitAccessPath)(field).map((0, $4SWbq.stringValue)).join("][") : resolveField(field);
    return object + "[" + field + "]";
}
function scale(enc, value) {
    const scale = scaleRef(enc.scale);
    if (enc.range != null) // pull value from scale range
    value = `lerp(_range(${scale}), ${+enc.range})`;
    else {
        // run value through scale and/or pull scale bandwidth
        if (value !== undefined) value = `_scale(${scale}, ${value})`;
        if (enc.band) {
            value = (value ? value + "+" : "") + `_bandwidth(${scale})` + (+enc.band === 1 ? "" : "*" + property(enc.band));
            if (enc.extra) // include logic to handle extraneous elements
            value = `(datum.extra ? _scale(${scale}, datum.extra.value) : ${value})`;
        }
        if (value == null) value = "0";
    }
    return value;
}
function rule(enc) {
    let code = "";
    enc.forEach((rule)=>{
        const value = entry$1(rule);
        code += rule.test ? `(${rule.test})?${value}:` : value;
    });
    // if no else clause, terminate with null (#1366)
    if ((0, $4SWbq.peek)(code) === ":") code += "null";
    return code;
}
function parseEncode(encode, type, role, style, scope, params) {
    const enc = {};
    params = params || {};
    params.encoders = {
        $encode: enc
    };
    encode = applyDefaults(encode, type, role, style, scope.config);
    for(const key in encode)enc[key] = parseBlock(encode[key], type, params, scope);
    return params;
}
function parseBlock(block, marktype, params, scope) {
    const channels = {}, fields = {};
    for(const name in block)if (block[name] != null) // skip any null entries
    channels[name] = parse$1(expr(block[name]), scope, params, fields);
    return {
        $expr: {
            marktype: marktype,
            channels: channels
        },
        $fields: Object.keys(fields),
        $output: Object.keys(block)
    };
}
function expr(enc) {
    return (0, $4SWbq.isArray)(enc) ? rule(enc) : entry$1(enc);
}
function parse$1(code, scope, params, fields) {
    const expr = (0, $Us6QS.parseExpression)(code, scope);
    expr.$fields.forEach((name)=>fields[name] = 1);
    (0, $4SWbq.extend)(params, expr.$params);
    return expr.$expr;
}
const OUTER = "outer", OUTER_INVALID = [
    "value",
    "update",
    "init",
    "react",
    "bind"
];
function outerError(prefix, name) {
    (0, $4SWbq.error)(prefix + ' for "outer" push: ' + (0, $4SWbq.stringValue)(name));
}
function parseSignal(signal, scope) {
    const name = signal.name;
    if (signal.push === OUTER) {
        // signal must already be defined, raise error if not
        if (!scope.signals[name]) outerError("No prior signal definition", name);
        // signal push must not use properties reserved for standard definition
        OUTER_INVALID.forEach((prop)=>{
            if (signal[prop] !== undefined) outerError("Invalid property ", prop);
        });
    } else {
        // define a new signal in the current scope
        const op = scope.addSignal(name, signal.value);
        if (signal.react === false) op.react = false;
        if (signal.bind) scope.addBinding(name, signal.bind);
    }
}
function Entry(type, value, params, parent) {
    this.id = -1;
    this.type = type;
    this.value = value;
    this.params = params;
    if (parent) this.parent = parent;
}
function entry(type, value, params, parent) {
    return new Entry(type, value, params, parent);
}
function operator(value, params) {
    return entry("operator", value, params);
}
// -----
function ref(op) {
    const ref = {
        $ref: op.id
    };
    // if operator not yet registered, cache ref to resolve later
    if (op.id < 0) (op.refs = op.refs || []).push(ref);
    return ref;
}
function fieldRef$1(field, name) {
    return name ? {
        $field: field,
        $name: name
    } : {
        $field: field
    };
}
const keyFieldRef = fieldRef$1("key");
function compareRef(fields, orders) {
    return {
        $compare: fields,
        $order: orders
    };
}
function keyRef(fields, flat) {
    const ref = {
        $key: fields
    };
    if (flat) ref.$flat = true;
    return ref;
}
// -----
const Ascending = "ascending";
const Descending = "descending";
function sortKey(sort) {
    return !(0, $4SWbq.isObject)(sort) ? "" : (sort.order === Descending ? "-" : "+") + aggrField(sort.op, sort.field);
}
function aggrField(op, field) {
    return (op && op.signal ? "$" + op.signal : op || "") + (op && field ? "_" : "") + (field && field.signal ? "$" + field.signal : field || "");
}
// -----
const Scope$1 = "scope";
const View = "view";
function isSignal(_) {
    return _ && _.signal;
}
function isExpr$1(_) {
    return _ && _.expr;
}
function hasSignal(_) {
    if (isSignal(_)) return true;
    if ((0, $4SWbq.isObject)(_)) for(const key in _){
        if (hasSignal(_[key])) return true;
    }
    return false;
}
function value(specValue, defaultValue) {
    return specValue != null ? specValue : defaultValue;
}
function deref(v) {
    return v && v.signal || v;
}
const Timer = "timer";
function parseStream(stream, scope) {
    const method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : (0, $4SWbq.error)("Invalid stream specification: " + (0, $4SWbq.stringValue)(stream));
    return method(stream, scope);
}
function eventSource(source) {
    return source === Scope$1 ? View : source || View;
}
function mergeStream(stream, scope) {
    const list = stream.merge.map((s)=>parseStream(s, scope)), entry = streamParameters({
        merge: list
    }, stream, scope);
    return scope.addStream(entry).id;
}
function nestedStream(stream, scope) {
    const id = parseStream(stream.stream, scope), entry = streamParameters({
        stream: id
    }, stream, scope);
    return scope.addStream(entry).id;
}
function eventStream(stream, scope) {
    let id;
    if (stream.type === Timer) {
        id = scope.event(Timer, stream.throttle);
        stream = {
            between: stream.between,
            filter: stream.filter
        };
    } else id = scope.event(eventSource(stream.source), stream.type);
    const entry = streamParameters({
        stream: id
    }, stream, scope);
    return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;
}
function streamParameters(entry, stream, scope) {
    let param = stream.between;
    if (param) {
        if (param.length !== 2) (0, $4SWbq.error)('Stream "between" parameter must have 2 entries: ' + (0, $4SWbq.stringValue)(stream));
        entry.between = [
            parseStream(param[0], scope),
            parseStream(param[1], scope)
        ];
    }
    param = stream.filter ? [].concat(stream.filter) : [];
    if (stream.marktype || stream.markname || stream.markrole) // add filter for mark type, name and/or role
    param.push(filterMark(stream.marktype, stream.markname, stream.markrole));
    if (stream.source === Scope$1) // add filter to limit events from sub-scope only
    param.push("inScope(event.item)");
    if (param.length) entry.filter = (0, $Us6QS.parseExpression)("(" + param.join(")&&(") + ")", scope).$expr;
    if ((param = stream.throttle) != null) entry.throttle = +param;
    if ((param = stream.debounce) != null) entry.debounce = +param;
    if (stream.consume) entry.consume = true;
    return entry;
}
function filterMark(type, name, role) {
    const item = "event.item";
    return item + (type && type !== "*" ? "&&" + item + ".mark.marktype==='" + type + "'" : "") + (role ? "&&" + item + ".mark.role==='" + role + "'" : "") + (name ? "&&" + item + ".mark.name==='" + name + "'" : "");
}
// bypass expression parser for internal operator references
const OP_VALUE_EXPR = {
    code: "_.$value",
    ast: {
        type: "Identifier",
        value: "value"
    }
};
function parseUpdate(spec, scope, target) {
    const encode = spec.encode, entry = {
        target: target
    };
    let events = spec.events, update = spec.update, sources = [];
    if (!events) (0, $4SWbq.error)("Signal update missing events specification.");
    // interpret as an event selector string
    if ((0, $4SWbq.isString)(events)) events = (0, $jOgxz.parseSelector)(events, scope.isSubscope() ? Scope$1 : View);
    // separate event streams from signal updates
    events = (0, $4SWbq.array)(events).filter((s)=>s.signal || s.scale ? (sources.push(s), 0) : 1);
    // merge internal operator listeners
    if (sources.length > 1) sources = [
        mergeSources(sources)
    ];
    // merge event streams, include as source
    if (events.length) sources.push(events.length > 1 ? {
        merge: events
    } : events[0]);
    if (encode != null) {
        if (update) (0, $4SWbq.error)("Signal encode and update are mutually exclusive.");
        update = "encode(item()," + (0, $4SWbq.stringValue)(encode) + ")";
    }
    // resolve update value
    entry.update = (0, $4SWbq.isString)(update) ? (0, $Us6QS.parseExpression)(update, scope) : update.expr != null ? (0, $Us6QS.parseExpression)(update.expr, scope) : update.value != null ? update.value : update.signal != null ? {
        $expr: OP_VALUE_EXPR,
        $params: {
            $value: scope.signalRef(update.signal)
        }
    } : (0, $4SWbq.error)("Invalid signal update specification.");
    if (spec.force) entry.options = {
        force: true
    };
    sources.forEach((source)=>scope.addUpdate((0, $4SWbq.extend)(streamSource(source, scope), entry)));
}
function streamSource(stream, scope) {
    return {
        source: stream.signal ? scope.signalRef(stream.signal) : stream.scale ? scope.scaleRef(stream.scale) : parseStream(stream, scope)
    };
}
function mergeSources(sources) {
    return {
        signal: "[" + sources.map((s)=>s.scale ? 'scale("' + s.scale + '")' : s.signal) + "]"
    };
}
function parseSignalUpdates(signal, scope) {
    const op = scope.getSignal(signal.name);
    let expr = signal.update;
    if (signal.init) {
        if (expr) (0, $4SWbq.error)("Signals can not include both init and update expressions.");
        else {
            expr = signal.init;
            op.initonly = true;
        }
    }
    if (expr) {
        expr = (0, $Us6QS.parseExpression)(expr, scope);
        op.update = expr.$expr;
        op.params = expr.$params;
    }
    if (signal.on) signal.on.forEach((_)=>parseUpdate(_, scope, op.id));
}
const transform = (name)=>(params, value, parent)=>entry(name, value, params || undefined, parent);
const Aggregate = transform("aggregate");
const AxisTicks = transform("axisticks");
const Bound = transform("bound");
const Collect = transform("collect");
const Compare = transform("compare");
const DataJoin = transform("datajoin");
const Encode = transform("encode");
const Expression = transform("expression");
const Facet = transform("facet");
const Field = transform("field");
const Key = transform("key");
const LegendEntries = transform("legendentries");
const Load = transform("load");
const Mark = transform("mark");
const MultiExtent = transform("multiextent");
const MultiValues = transform("multivalues");
const Overlap = transform("overlap");
const Params = transform("params");
const PreFacet = transform("prefacet");
const Projection = transform("projection");
const Proxy = transform("proxy");
const Relay = transform("relay");
const Render = transform("render");
const Scale = transform("scale");
const Sieve = transform("sieve");
const SortItems = transform("sortitems");
const ViewLayout = transform("viewlayout");
const Values = transform("values");
let FIELD_REF_ID = 0;
const MULTIDOMAIN_SORT_OPS = {
    min: "min",
    max: "max",
    count: "sum"
};
function initScale(spec, scope) {
    const type = spec.type || "linear";
    if (!(0, $1UqgZ.isValidScaleType)(type)) (0, $4SWbq.error)("Unrecognized scale type: " + (0, $4SWbq.stringValue)(type));
    scope.addScale(spec.name, {
        type: type,
        domain: undefined
    });
}
function parseScale(spec, scope) {
    const params = scope.getScale(spec.name).params;
    let key;
    params.domain = parseScaleDomain(spec.domain, spec, scope);
    if (spec.range != null) params.range = parseScaleRange(spec, scope, params);
    if (spec.interpolate != null) parseScaleInterpolate(spec.interpolate, params);
    if (spec.nice != null) params.nice = parseScaleNice(spec.nice);
    if (spec.bins != null) params.bins = parseScaleBins(spec.bins, scope);
    for(key in spec){
        if ((0, $4SWbq.hasOwnProperty)(params, key) || key === "name") continue;
        params[key] = parseLiteral(spec[key], scope);
    }
}
function parseLiteral(v, scope) {
    return !(0, $4SWbq.isObject)(v) ? v : v.signal ? scope.signalRef(v.signal) : (0, $4SWbq.error)("Unsupported object: " + (0, $4SWbq.stringValue)(v));
}
function parseArray(v, scope) {
    return v.signal ? scope.signalRef(v.signal) : v.map((v)=>parseLiteral(v, scope));
}
function dataLookupError(name) {
    (0, $4SWbq.error)("Can not find data set: " + (0, $4SWbq.stringValue)(name));
}
// -- SCALE DOMAIN ----
function parseScaleDomain(domain, spec, scope) {
    if (!domain) {
        if (spec.domainMin != null || spec.domainMax != null) (0, $4SWbq.error)("No scale domain defined for domainMin/domainMax to override.");
        return; // default domain
    }
    return domain.signal ? scope.signalRef(domain.signal) : ((0, $4SWbq.isArray)(domain) ? explicitDomain : domain.fields ? multipleDomain : singularDomain)(domain, spec, scope);
}
function explicitDomain(domain, spec, scope) {
    return domain.map((v)=>parseLiteral(v, scope));
}
function singularDomain(domain, spec, scope) {
    const data = scope.getData(domain.data);
    if (!data) dataLookupError(domain.data);
    return (0, $1UqgZ.isDiscrete)(spec.type) ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false)) : (0, $1UqgZ.isQuantile)(spec.type) ? data.domainRef(scope, domain.field) : data.extentRef(scope, domain.field);
}
function multipleDomain(domain, spec, scope) {
    const data = domain.data, fields = domain.fields.reduce((dom, d)=>{
        d = (0, $4SWbq.isString)(d) ? {
            data: data,
            field: d
        } : (0, $4SWbq.isArray)(d) || d.signal ? fieldRef(d, scope) : d;
        dom.push(d);
        return dom;
    }, []);
    return ((0, $1UqgZ.isDiscrete)(spec.type) ? ordinalMultipleDomain : (0, $1UqgZ.isQuantile)(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain, scope, fields);
}
function fieldRef(data, scope) {
    const name = "_:vega:_" + FIELD_REF_ID++, coll = Collect({});
    if ((0, $4SWbq.isArray)(data)) coll.value = {
        $ingest: data
    };
    else if (data.signal) {
        const code = "setdata(" + (0, $4SWbq.stringValue)(name) + "," + data.signal + ")";
        coll.params.input = scope.signalRef(code);
    }
    scope.addDataPipeline(name, [
        coll,
        Sieve({})
    ]);
    return {
        data: name,
        field: "data"
    };
}
function ordinalMultipleDomain(domain, scope, fields) {
    const sort = parseSort(domain.sort, true);
    let a, v;
    // get value counts for each domain field
    const counts = fields.map((f)=>{
        const data = scope.getData(f.data);
        if (!data) dataLookupError(f.data);
        return data.countsRef(scope, f.field, sort);
    });
    // aggregate the results from each domain field
    const p = {
        groupby: keyFieldRef,
        pulse: counts
    };
    if (sort) {
        a = sort.op || "count";
        v = sort.field ? aggrField(a, sort.field) : "count";
        p.ops = [
            MULTIDOMAIN_SORT_OPS[a]
        ];
        p.fields = [
            scope.fieldRef(v)
        ];
        p.as = [
            v
        ];
    }
    a = scope.add(Aggregate(p));
    // collect aggregate output
    const c = scope.add(Collect({
        pulse: ref(a)
    }));
    // extract values for combined domain
    v = scope.add(Values({
        field: keyFieldRef,
        sort: scope.sortRef(sort),
        pulse: ref(c)
    }));
    return ref(v);
}
function parseSort(sort, multidomain) {
    if (sort) {
        if (!sort.field && !sort.op) {
            if ((0, $4SWbq.isObject)(sort)) sort.field = "key";
            else sort = {
                field: "key"
            };
        } else if (!sort.field && sort.op !== "count") (0, $4SWbq.error)("No field provided for sort aggregate op: " + sort.op);
        else if (multidomain && sort.field) {
            if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) (0, $4SWbq.error)("Multiple domain scales can not be sorted using " + sort.op);
        }
    }
    return sort;
}
function quantileMultipleDomain(domain, scope, fields) {
    // get value arrays for each domain field
    const values = fields.map((f)=>{
        const data = scope.getData(f.data);
        if (!data) dataLookupError(f.data);
        return data.domainRef(scope, f.field);
    });
    // combine value arrays
    return ref(scope.add(MultiValues({
        values: values
    })));
}
function numericMultipleDomain(domain, scope, fields) {
    // get extents for each domain field
    const extents = fields.map((f)=>{
        const data = scope.getData(f.data);
        if (!data) dataLookupError(f.data);
        return data.extentRef(scope, f.field);
    });
    // combine extents
    return ref(scope.add(MultiExtent({
        extents: extents
    })));
}
// -- SCALE BINS -----
function parseScaleBins(v, scope) {
    return v.signal || (0, $4SWbq.isArray)(v) ? parseArray(v, scope) : scope.objectProperty(v);
}
// -- SCALE NICE -----
function parseScaleNice(nice) {
    return (0, $4SWbq.isObject)(nice) ? {
        interval: parseLiteral(nice.interval),
        step: parseLiteral(nice.step)
    } : parseLiteral(nice);
}
// -- SCALE INTERPOLATION -----
function parseScaleInterpolate(interpolate, params) {
    params.interpolate = parseLiteral(interpolate.type || interpolate);
    if (interpolate.gamma != null) params.interpolateGamma = parseLiteral(interpolate.gamma);
}
// -- SCALE RANGE -----
function parseScaleRange(spec, scope, params) {
    const config = scope.config.range;
    let range = spec.range;
    if (range.signal) return scope.signalRef(range.signal);
    else if ((0, $4SWbq.isString)(range)) {
        if (config && (0, $4SWbq.hasOwnProperty)(config, range)) {
            spec = (0, $4SWbq.extend)({}, spec, {
                range: config[range]
            });
            return parseScaleRange(spec, scope, params);
        } else if (range === "width") range = [
            0,
            {
                signal: "width"
            }
        ];
        else if (range === "height") range = (0, $1UqgZ.isDiscrete)(spec.type) ? [
            0,
            {
                signal: "height"
            }
        ] : [
            {
                signal: "height"
            },
            0
        ];
        else (0, $4SWbq.error)("Unrecognized scale range value: " + (0, $4SWbq.stringValue)(range));
    } else if (range.scheme) {
        params.scheme = (0, $4SWbq.isArray)(range.scheme) ? parseArray(range.scheme, scope) : parseLiteral(range.scheme, scope);
        if (range.extent) params.schemeExtent = parseArray(range.extent, scope);
        if (range.count) params.schemeCount = parseLiteral(range.count, scope);
        return;
    } else if (range.step) {
        params.rangeStep = parseLiteral(range.step, scope);
        return;
    } else if ((0, $1UqgZ.isDiscrete)(spec.type) && !(0, $4SWbq.isArray)(range)) return parseScaleDomain(range, spec, scope);
    else if (!(0, $4SWbq.isArray)(range)) (0, $4SWbq.error)("Unsupported range type: " + (0, $4SWbq.stringValue)(range));
    return range.map((v)=>((0, $4SWbq.isArray)(v) ? parseArray : parseLiteral)(v, scope));
}
function parseProjection(proj, scope) {
    const config = scope.config.projection || {}, params = {};
    for(const name in proj){
        if (name === "name") continue;
        params[name] = parseParameter$1(proj[name], name, scope);
    }
    // apply projection defaults from config
    for(const name in config)if (params[name] == null) params[name] = parseParameter$1(config[name], name, scope);
    scope.addProjection(proj.name, params);
}
function parseParameter$1(_, name, scope) {
    return (0, $4SWbq.isArray)(_) ? _.map((_)=>parseParameter$1(_, name, scope)) : !(0, $4SWbq.isObject)(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === "fit" ? _ : (0, $4SWbq.error)("Unsupported parameter object: " + (0, $4SWbq.stringValue)(_));
}
const Top = "top";
const Left = "left";
const Right = "right";
const Bottom = "bottom";
const Center = "center";
const Vertical = "vertical";
const Start = "start";
const Middle = "middle";
const End = "end";
const Index = "index";
const Label = "label";
const Offset = "offset";
const Perc = "perc";
const Perc2 = "perc2";
const Value = "value";
const GuideLabelStyle = "guide-label";
const GuideTitleStyle = "guide-title";
const GroupTitleStyle = "group-title";
const GroupSubtitleStyle = "group-subtitle";
const Symbols = "symbol";
const Gradient = "gradient";
const Discrete = "discrete";
const Size = "size";
const Shape = "shape";
const Fill = "fill";
const Stroke = "stroke";
const StrokeWidth = "strokeWidth";
const StrokeDash = "strokeDash";
const Opacity = "opacity";
// Encoding channels supported by legends
// In priority order of 'canonical' scale
const LegendScales = [
    Size,
    Shape,
    Fill,
    Stroke,
    StrokeWidth,
    StrokeDash,
    Opacity
];
const Skip = {
    name: 1,
    style: 1,
    interactive: 1
};
const zero = {
    value: 0
};
const one = {
    value: 1
};
const GroupMark = "group";
const RectMark = "rect";
const RuleMark = "rule";
const SymbolMark = "symbol";
const TextMark = "text";
function guideGroup(mark) {
    mark.type = GroupMark;
    mark.interactive = mark.interactive || false;
    return mark;
}
function lookup(spec, config) {
    const _ = (name, dflt)=>value(spec[name], value(config[name], dflt));
    _.isVertical = (s)=>Vertical === value(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));
    _.gradientLength = ()=>value(spec.gradientLength, config.gradientLength || config.gradientWidth);
    _.gradientThickness = ()=>value(spec.gradientThickness, config.gradientThickness || config.gradientHeight);
    _.entryColumns = ()=>value(spec.columns, value(config.columns, +_.isVertical(true)));
    return _;
}
function getEncoding(name, encode) {
    const v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);
    return v && v.signal ? v : v ? v.value : null;
}
function getStyle(name, scope, style) {
    const s = scope.config.style[style];
    return s && s[name];
}
function anchorExpr(s, e, m) {
    return `item.anchor === '${Start}' ? ${s} : item.anchor === '${End}' ? ${e} : ${m}`;
}
const alignExpr$1 = anchorExpr((0, $4SWbq.stringValue)(Left), (0, $4SWbq.stringValue)(Right), (0, $4SWbq.stringValue)(Center));
function tickBand(_) {
    const v = _("tickBand");
    let offset = _("tickOffset"), band, extra;
    if (!v) {
        // if no tick band entry, fall back on other properties
        band = _("bandPosition");
        extra = _("tickExtra");
    } else if (v.signal) {
        // if signal, augment code to interpret values
        band = {
            signal: `(${v.signal}) === 'extent' ? 1 : 0.5`
        };
        extra = {
            signal: `(${v.signal}) === 'extent'`
        };
        if (!(0, $4SWbq.isObject)(offset)) offset = {
            signal: `(${v.signal}) === 'extent' ? 0 : ${offset}`
        };
    } else if (v === "extent") {
        // if constant, simply set values
        band = 1;
        extra = true;
        offset = 0;
    } else {
        band = 0.5;
        extra = false;
    }
    return {
        extra: extra,
        band: band,
        offset: offset
    };
}
function extendOffset(value, offset) {
    return !offset ? value : !value ? offset : !(0, $4SWbq.isObject)(value) ? {
        value: value,
        offset: offset
    } : Object.assign({}, value, {
        offset: extendOffset(value.offset, offset)
    });
}
function guideMark(mark, extras) {
    if (extras) {
        mark.name = extras.name;
        mark.style = extras.style || mark.style;
        mark.interactive = !!extras.interactive;
        mark.encode = extendEncode(mark.encode, extras, Skip);
    } else mark.interactive = false;
    return mark;
}
function legendGradient(spec, scale, config, userEncode) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length = _.gradientLength();
    let enter, start, stop, width, height;
    if (vertical) {
        start = [
            0,
            1
        ];
        stop = [
            0,
            0
        ];
        width = thickness;
        height = length;
    } else {
        start = [
            0,
            0
        ];
        stop = [
            1,
            0
        ];
        width = length;
        height = thickness;
    }
    const encode = {
        enter: enter = {
            opacity: zero,
            x: zero,
            y: zero,
            width: encoder(width),
            height: encoder(height)
        },
        update: (0, $4SWbq.extend)({}, enter, {
            opacity: one,
            fill: {
                gradient: scale,
                start: start,
                stop: stop
            }
        }),
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("gradientStrokeColor"),
        strokeWidth: _("gradientStrokeWidth")
    }, {
        // update
        opacity: _("gradientOpacity")
    });
    return guideMark({
        type: RectMark,
        role: LegendGradientRole,
        encode: encode
    }, userEncode);
}
function legendGradientDiscrete(spec, scale, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length = _.gradientLength();
    let u, v, uu, vv, adjust = "";
    vertical ? (u = "y", uu = "y2", v = "x", vv = "width", adjust = "1-") : (u = "x", uu = "x2", v = "y", vv = "height");
    const enter = {
        opacity: zero,
        fill: {
            scale: scale,
            field: Value
        }
    };
    enter[u] = {
        signal: adjust + "datum." + Perc,
        mult: length
    };
    enter[v] = zero;
    enter[uu] = {
        signal: adjust + "datum." + Perc2,
        mult: length
    };
    enter[vv] = encoder(thickness);
    const encode = {
        enter: enter,
        update: (0, $4SWbq.extend)({}, enter, {
            opacity: one
        }),
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("gradientStrokeColor"),
        strokeWidth: _("gradientStrokeWidth")
    }, {
        // update
        opacity: _("gradientOpacity")
    });
    return guideMark({
        type: RectMark,
        role: LegendBandRole,
        key: Value,
        from: dataRef,
        encode: encode
    }, userEncode);
}
const alignExpr = `datum.${Perc}<=0?"${Left}":datum.${Perc}>=1?"${Right}":"${Center}"`, baselineExpr = `datum.${Perc}<=0?"${Bottom}":datum.${Perc}>=1?"${Top}":"${Middle}"`;
function legendGradientLabels(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), vertical = _.isVertical(), thickness = encoder(_.gradientThickness()), length = _.gradientLength();
    let overlap = _("labelOverlap"), enter, update, u, v, adjust = "";
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one,
            text: {
                field: Label
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        fill: _("labelColor"),
        fillOpacity: _("labelOpacity"),
        font: _("labelFont"),
        fontSize: _("labelFontSize"),
        fontStyle: _("labelFontStyle"),
        fontWeight: _("labelFontWeight"),
        limit: value(spec.labelLimit, config.gradientLabelLimit)
    });
    if (vertical) {
        enter.align = {
            value: "left"
        };
        enter.baseline = update.baseline = {
            signal: baselineExpr
        };
        u = "y";
        v = "x";
        adjust = "1-";
    } else {
        enter.align = update.align = {
            signal: alignExpr
        };
        enter.baseline = {
            value: "top"
        };
        u = "x";
        v = "y";
    }
    enter[u] = update[u] = {
        signal: adjust + "datum." + Perc,
        mult: length
    };
    enter[v] = update[v] = thickness;
    thickness.offset = value(spec.labelOffset, config.gradientLabelOffset) || 0;
    overlap = overlap ? {
        separation: _("labelSeparation"),
        method: overlap,
        order: "datum." + Index
    } : undefined;
    // type, role, style, key, dataRef, encode, extras
    return guideMark({
        type: TextMark,
        role: LegendLabelRole,
        style: GuideLabelStyle,
        key: Value,
        from: dataRef,
        encode: encode,
        overlap: overlap
    }, userEncode);
}
// userEncode is top-level, includes entries, symbols, labels
function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {
    const _ = lookup(spec, config), entries = userEncode.entries, interactive = !!(entries && entries.interactive), name = entries ? entries.name : undefined, height = _("clipHeight"), symbolOffset = _("symbolOffset"), valueRef = {
        data: "value"
    }, xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`, yEncode = height ? encoder(height) : {
        field: Size
    }, index = `datum.${Index}`, ncols = `max(1, ${columns})`;
    let encode, enter, update, nrows, sort;
    yEncode.mult = 0.5;
    // -- LEGEND SYMBOLS --
    encode = {
        enter: enter = {
            opacity: zero,
            x: {
                signal: xSignal,
                mult: 0.5,
                offset: symbolOffset
            },
            y: yEncode
        },
        update: update = {
            opacity: one,
            x: enter.x,
            y: enter.y
        },
        exit: {
            opacity: zero
        }
    };
    let baseFill = null, baseStroke = null;
    if (!spec.fill) {
        baseFill = config.symbolBaseFillColor;
        baseStroke = config.symbolBaseStrokeColor;
    }
    addEncoders(encode, {
        fill: _("symbolFillColor", baseFill),
        shape: _("symbolType"),
        size: _("symbolSize"),
        stroke: _("symbolStrokeColor", baseStroke),
        strokeDash: _("symbolDash"),
        strokeDashOffset: _("symbolDashOffset"),
        strokeWidth: _("symbolStrokeWidth")
    }, {
        // update
        opacity: _("symbolOpacity")
    });
    LegendScales.forEach((scale)=>{
        if (spec[scale]) update[scale] = enter[scale] = {
            scale: spec[scale],
            field: Value
        };
    });
    const symbols = guideMark({
        type: SymbolMark,
        role: LegendSymbolRole,
        key: Value,
        from: valueRef,
        clip: height ? true : undefined,
        encode: encode
    }, userEncode.symbols);
    // -- LEGEND LABELS --
    const labelOffset = encoder(symbolOffset);
    labelOffset.offset = _("labelOffset");
    encode = {
        enter: enter = {
            opacity: zero,
            x: {
                signal: xSignal,
                offset: labelOffset
            },
            y: yEncode
        },
        update: update = {
            opacity: one,
            text: {
                field: Label
            },
            x: enter.x,
            y: enter.y
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        align: _("labelAlign"),
        baseline: _("labelBaseline"),
        fill: _("labelColor"),
        fillOpacity: _("labelOpacity"),
        font: _("labelFont"),
        fontSize: _("labelFontSize"),
        fontStyle: _("labelFontStyle"),
        fontWeight: _("labelFontWeight"),
        limit: _("labelLimit")
    });
    const labels = guideMark({
        type: TextMark,
        role: LegendLabelRole,
        style: GuideLabelStyle,
        key: Value,
        from: valueRef,
        encode: encode
    }, userEncode.labels);
    // -- LEGEND ENTRY GROUPS --
    encode = {
        enter: {
            noBound: {
                value: !height
            },
            // ignore width/height in bounds calc
            width: zero,
            height: height ? encoder(height) : zero,
            opacity: zero
        },
        exit: {
            opacity: zero
        },
        update: update = {
            opacity: one,
            row: {
                signal: null
            },
            column: {
                signal: null
            }
        }
    };
    // annotate and sort groups to ensure correct ordering
    if (_.isVertical(true)) {
        nrows = `ceil(item.mark.items.length / ${ncols})`;
        update.row.signal = `${index}%${nrows}`;
        update.column.signal = `floor(${index} / ${nrows})`;
        sort = {
            field: [
                "row",
                index
            ]
        };
    } else {
        update.row.signal = `floor(${index} / ${ncols})`;
        update.column.signal = `${index} % ${ncols}`;
        sort = {
            field: index
        };
    }
    // handle zero column case (implies infinite columns)
    update.column.signal = `(${columns})?${update.column.signal}:${index}`;
    // facet legend entries into sub-groups
    dataRef = {
        facet: {
            data: dataRef,
            name: "value",
            groupby: Index
        }
    };
    return guideGroup({
        role: ScopeRole,
        from: dataRef,
        encode: extendEncode(encode, entries, Skip),
        marks: [
            symbols,
            labels
        ],
        name: name,
        interactive: interactive,
        sort: sort
    });
}
function legendSymbolLayout(spec, config) {
    const _ = lookup(spec, config);
    // layout parameters for legend entries
    return {
        align: _("gridAlign"),
        columns: _.entryColumns(),
        center: {
            row: true,
            column: false
        },
        padding: {
            row: _("rowPadding"),
            column: _("columnPadding")
        }
    };
}
// expression logic for align, anchor, angle, and baseline calculation
const isL = 'item.orient === "left"', isR = 'item.orient === "right"', isLR = `(${isL} || ${isR})`, isVG = `datum.vgrad && ${isLR}`, baseline = anchorExpr('"top"', '"bottom"', '"middle"'), alignFlip = anchorExpr('"right"', '"left"', '"center"'), exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? "left" : ${alignExpr$1}`, exprAnchor = `item._anchor || (${isLR} ? "middle" : "start")`, exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`, exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? "bottom" : "top") : ${baseline}) : "top"`;
function legendTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config);
    const encode = {
        enter: {
            opacity: zero
        },
        update: {
            opacity: one,
            x: {
                field: {
                    group: "padding"
                }
            },
            y: {
                field: {
                    group: "padding"
                }
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        orient: _("titleOrient"),
        _anchor: _("titleAnchor"),
        anchor: {
            signal: exprAnchor
        },
        angle: {
            signal: exprAngle
        },
        align: {
            signal: exprAlign
        },
        baseline: {
            signal: exprBaseline
        },
        text: spec.title,
        fill: _("titleColor"),
        fillOpacity: _("titleOpacity"),
        font: _("titleFont"),
        fontSize: _("titleFontSize"),
        fontStyle: _("titleFontStyle"),
        fontWeight: _("titleFontWeight"),
        limit: _("titleLimit"),
        lineHeight: _("titleLineHeight")
    }, {
        // require update
        align: _("titleAlign"),
        baseline: _("titleBaseline")
    });
    return guideMark({
        type: TextMark,
        role: LegendTitleRole,
        style: GuideTitleStyle,
        from: dataRef,
        encode: encode
    }, userEncode);
}
function clip(clip, scope) {
    let expr;
    if ((0, $4SWbq.isObject)(clip)) {
        if (clip.signal) expr = clip.signal;
        else if (clip.path) expr = "pathShape(" + param(clip.path) + ")";
        else if (clip.sphere) expr = "geoShape(" + param(clip.sphere) + ', {type: "Sphere"})';
    }
    return expr ? scope.signalRef(expr) : !!clip;
}
function param(value) {
    return (0, $4SWbq.isObject)(value) && value.signal ? value.signal : (0, $4SWbq.stringValue)(value);
}
function getRole(spec) {
    const role = spec.role || "";
    return !role.indexOf("axis") || !role.indexOf("legend") || !role.indexOf("title") ? role : spec.type === GroupMark ? ScopeRole : role || MarkRole;
}
function definition(spec) {
    return {
        marktype: spec.type,
        name: spec.name || undefined,
        role: spec.role || getRole(spec),
        zindex: +spec.zindex || undefined,
        aria: spec.aria,
        description: spec.description
    };
}
function interactive(spec, scope) {
    return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
}
/**
 * Parse a data transform specification.
 */ function parseTransform(spec, scope) {
    const def = (0, $4jOgW.definition)(spec.type);
    if (!def) (0, $4SWbq.error)("Unrecognized transform type: " + (0, $4SWbq.stringValue)(spec.type));
    const t = entry(def.type.toLowerCase(), null, parseParameters(def, spec, scope));
    if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
    t.metadata = def.metadata || {};
    return t;
}
/**
 * Parse all parameters of a data transform.
 */ function parseParameters(def, spec, scope) {
    const params = {}, n = def.params.length;
    for(let i = 0; i < n; ++i){
        const pdef = def.params[i];
        params[pdef.name] = parseParameter(pdef, spec, scope);
    }
    return params;
}
/**
 * Parse a data transform parameter.
 */ function parseParameter(def, spec, scope) {
    const type = def.type, value = spec[def.name];
    if (type === "index") return parseIndexParameter(def, spec, scope);
    else if (value === undefined) {
        if (def.required) (0, $4SWbq.error)("Missing required " + (0, $4SWbq.stringValue)(spec.type) + " parameter: " + (0, $4SWbq.stringValue)(def.name));
        return;
    } else if (type === "param") return parseSubParameters(def, spec, scope);
    else if (type === "projection") return scope.projectionRef(spec[def.name]);
    return def.array && !isSignal(value) ? value.map((v)=>parameterValue(def, v, scope)) : parameterValue(def, value, scope);
}
/**
 * Parse a single parameter value.
 */ function parameterValue(def, value, scope) {
    const type = def.type;
    if (isSignal(value)) return isExpr(type) ? (0, $4SWbq.error)("Expression references can not be signals.") : isField(type) ? scope.fieldRef(value) : isCompare(type) ? scope.compareRef(value) : scope.signalRef(value.signal);
    else {
        const expr = def.expr || isField(type);
        return expr && outerExpr(value) ? scope.exprRef(value.expr, value.as) : expr && outerField(value) ? fieldRef$1(value.field, value.as) : isExpr(type) ? (0, $Us6QS.parseExpression)(value, scope) : isData(type) ? ref(scope.getData(value).values) : isField(type) ? fieldRef$1(value) : isCompare(type) ? scope.compareRef(value) : value;
    }
}
/**
 * Parse parameter for accessing an index of another data set.
 */ function parseIndexParameter(def, spec, scope) {
    if (!(0, $4SWbq.isString)(spec.from)) (0, $4SWbq.error)('Lookup "from" parameter must be a string literal.');
    return scope.getData(spec.from).lookupRef(scope, spec.key);
}
/**
 * Parse a parameter that contains one or more sub-parameter objects.
 */ function parseSubParameters(def, spec, scope) {
    const value = spec[def.name];
    if (def.array) {
        if (!(0, $4SWbq.isArray)(value)) // signals not allowed!
        (0, $4SWbq.error)("Expected an array of sub-parameters. Instead: " + (0, $4SWbq.stringValue)(value));
        return value.map((v)=>parseSubParameter(def, v, scope));
    } else return parseSubParameter(def, value, scope);
}
/**
 * Parse a sub-parameter object.
 */ function parseSubParameter(def, value, scope) {
    const n = def.params.length;
    let pdef;
    // loop over defs to find matching key
    for(let i = 0; i < n; ++i){
        pdef = def.params[i];
        for(const k in pdef.key)if (pdef.key[k] !== value[k]) {
            pdef = null;
            break;
        }
        if (pdef) break;
    }
    // raise error if matching key not found
    if (!pdef) (0, $4SWbq.error)("Unsupported parameter: " + (0, $4SWbq.stringValue)(value));
    // parse params, create Params transform, return ref
    const params = (0, $4SWbq.extend)(parseParameters(pdef, value, scope), pdef.key);
    return ref(scope.add(Params(params)));
}
// -- Utilities -----
const outerExpr = (_)=>_ && _.expr;
const outerField = (_)=>_ && _.field;
const isData = (_)=>_ === "data";
const isExpr = (_)=>_ === "expr";
const isField = (_)=>_ === "field";
const isCompare = (_)=>_ === "compare";
function parseData$1(from, group, scope) {
    let facet, key, op, dataRef, parent;
    // if no source data, generate singleton datum
    if (!from) dataRef = ref(scope.add(Collect(null, [
        {}
    ])));
    else if (facet = from.facet) {
        if (!group) (0, $4SWbq.error)("Only group marks can be faceted.");
        // use pre-faceted source data, if available
        if (facet.field != null) dataRef = parent = getDataRef(facet, scope);
        else {
            // generate facet aggregates if no direct data specification
            if (!from.data) {
                op = parseTransform((0, $4SWbq.extend)({
                    type: "aggregate",
                    groupby: (0, $4SWbq.array)(facet.groupby)
                }, facet.aggregate), scope);
                op.params.key = scope.keyRef(facet.groupby);
                op.params.pulse = getDataRef(facet, scope);
                dataRef = parent = ref(scope.add(op));
            } else parent = ref(scope.getData(from.data).aggregate);
            key = scope.keyRef(facet.groupby, true);
        }
    }
    // if not yet defined, get source data reference
    if (!dataRef) dataRef = getDataRef(from, scope);
    return {
        key: key,
        pulse: dataRef,
        parent: parent
    };
}
function getDataRef(from, scope) {
    return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);
}
function DataScope(scope, input, output, values, aggr) {
    this.scope = scope; // parent scope object
    this.input = input; // first operator in pipeline (tuple input)
    this.output = output; // last operator in pipeline (tuple output)
    this.values = values; // operator for accessing tuples (but not tuple flow)
    // last aggregate in transform pipeline
    this.aggregate = aggr;
    // lookup table of field indices
    this.index = {};
}
DataScope.fromEntries = function(scope, entries) {
    const n = entries.length, values = entries[n - 1], output = entries[n - 2];
    let input = entries[0], aggr = null, i = 1;
    if (input && input.type === "load") input = entries[1];
    // add operator entries to this scope, wire up pulse chain
    scope.add(entries[0]);
    for(; i < n; ++i){
        entries[i].params.pulse = ref(entries[i - 1]);
        scope.add(entries[i]);
        if (entries[i].type === "aggregate") aggr = entries[i];
    }
    return new DataScope(scope, input, output, values, aggr);
};
function fieldKey(field) {
    return (0, $4SWbq.isString)(field) ? field : null;
}
function addSortField(scope, p, sort) {
    const as = aggrField(sort.op, sort.field);
    let s;
    if (p.ops) for(let i = 0, n = p.as.length; i < n; ++i){
        if (p.as[i] === as) return;
    }
    else {
        p.ops = [
            "count"
        ];
        p.fields = [
            null
        ];
        p.as = [
            "count"
        ];
    }
    if (sort.op) {
        p.ops.push((s = sort.op.signal) ? scope.signalRef(s) : sort.op);
        p.fields.push(scope.fieldRef(sort.field));
        p.as.push(as);
    }
}
function cache(scope, ds, name, optype, field, counts, index) {
    const cache = ds[name] || (ds[name] = {}), sort = sortKey(counts);
    let k = fieldKey(field), v, op;
    if (k != null) {
        scope = ds.scope;
        k = k + (sort ? "|" + sort : "");
        v = cache[k];
    }
    if (!v) {
        const params = counts ? {
            field: keyFieldRef,
            pulse: ds.countsRef(scope, field, counts)
        } : {
            field: scope.fieldRef(field),
            pulse: ref(ds.output)
        };
        if (sort) params.sort = scope.sortRef(counts);
        op = scope.add(entry(optype, undefined, params));
        if (index) ds.index[field] = op;
        v = ref(op);
        if (k != null) cache[k] = v;
    }
    return v;
}
DataScope.prototype = {
    countsRef (scope, field, sort) {
        const ds = this, cache = ds.counts || (ds.counts = {}), k = fieldKey(field);
        let v, a, p;
        if (k != null) {
            scope = ds.scope;
            v = cache[k];
        }
        if (!v) {
            p = {
                groupby: scope.fieldRef(field, "key"),
                pulse: ref(ds.output)
            };
            if (sort && sort.field) addSortField(scope, p, sort);
            a = scope.add(Aggregate(p));
            v = scope.add(Collect({
                pulse: ref(a)
            }));
            v = {
                agg: a,
                ref: ref(v)
            };
            if (k != null) cache[k] = v;
        } else if (sort && sort.field) addSortField(scope, v.agg.params, sort);
        return v.ref;
    },
    tuplesRef () {
        return ref(this.values);
    },
    extentRef (scope, field) {
        return cache(scope, this, "extent", "extent", field, false);
    },
    domainRef (scope, field) {
        return cache(scope, this, "domain", "values", field, false);
    },
    valuesRef (scope, field, sort) {
        return cache(scope, this, "vals", "values", field, sort || true);
    },
    lookupRef (scope, field) {
        return cache(scope, this, "lookup", "tupleindex", field, false);
    },
    indataRef (scope, field) {
        return cache(scope, this, "indata", "tupleindex", field, true, true);
    }
};
function parseFacet(spec, scope, group) {
    const facet = spec.from.facet, name = facet.name, data = getDataRef(facet, scope);
    let op;
    if (!facet.name) (0, $4SWbq.error)("Facet must have a name: " + (0, $4SWbq.stringValue)(facet));
    if (!facet.data) (0, $4SWbq.error)("Facet must reference a data set: " + (0, $4SWbq.stringValue)(facet));
    if (facet.field) op = scope.add(PreFacet({
        field: scope.fieldRef(facet.field),
        pulse: data
    }));
    else if (facet.groupby) op = scope.add(Facet({
        key: scope.keyRef(facet.groupby),
        group: ref(scope.proxy(group.parent)),
        pulse: data
    }));
    else (0, $4SWbq.error)("Facet must specify groupby or field: " + (0, $4SWbq.stringValue)(facet));
    // initialize facet subscope
    const subscope = scope.fork(), source = subscope.add(Collect()), values = subscope.add(Sieve({
        pulse: ref(source)
    }));
    subscope.addData(name, new DataScope(subscope, source, source, values));
    subscope.addSignal("parent", null);
    // parse faceted subflow
    op.params.subflow = {
        $subflow: subscope.parse(spec).toRuntime()
    };
}
function parseSubflow(spec, scope, input) {
    const op = scope.add(PreFacet({
        pulse: input.pulse
    })), subscope = scope.fork();
    subscope.add(Sieve());
    subscope.addSignal("parent", null);
    // parse group mark subflow
    op.params.subflow = {
        $subflow: subscope.parse(spec).toRuntime()
    };
}
function parseTrigger(spec, scope, name) {
    const remove = spec.remove, insert = spec.insert, toggle = spec.toggle, modify = spec.modify, values = spec.values, op = scope.add(operator());
    const update = "if(" + spec.trigger + ',modify("' + name + '",' + [
        insert,
        remove,
        toggle,
        modify,
        values
    ].map((_)=>_ == null ? "null" : _).join(",") + "),0)";
    const expr = (0, $Us6QS.parseExpression)(update, scope);
    op.update = expr.$expr;
    op.params = expr.$params;
}
function parseMark(spec, scope) {
    const role = getRole(spec), group = spec.type === GroupMark, facet = spec.from && spec.from.facet, overlap = spec.overlap;
    let layout = spec.layout || role === ScopeRole || role === FrameRole, ops, op, store, enc, name, layoutRef, boundRef;
    const nested = role === MarkRole || layout || facet;
    // resolve input data
    const input = parseData$1(spec.from, group, scope);
    // data join to map tuples to visual items
    op = scope.add(DataJoin({
        key: input.key || (spec.key ? fieldRef$1(spec.key) : undefined),
        pulse: input.pulse,
        clean: !group
    }));
    const joinRef = ref(op);
    // collect visual items
    op = store = scope.add(Collect({
        pulse: joinRef
    }));
    // connect visual items to scenegraph
    op = scope.add(Mark({
        markdef: definition(spec),
        interactive: interactive(spec.interactive, scope),
        clip: clip(spec.clip, scope),
        context: {
            $context: true
        },
        groups: scope.lookup(),
        parent: scope.signals.parent ? scope.signalRef("parent") : null,
        index: scope.markpath(),
        pulse: ref(op)
    }));
    const markRef = ref(op);
    // add visual encoders
    op = enc = scope.add(Encode(parseEncode(spec.encode, spec.type, role, spec.style, scope, {
        mod: false,
        pulse: markRef
    })));
    // monitor parent marks to propagate changes
    op.params.parent = scope.encode();
    // add post-encoding transforms, if defined
    if (spec.transform) spec.transform.forEach((_)=>{
        const tx = parseTransform(_, scope), md = tx.metadata;
        if (md.generates || md.changes) (0, $4SWbq.error)("Mark transforms should not generate new data.");
        if (!md.nomod) enc.params.mod = true; // update encode mod handling
        tx.params.pulse = ref(op);
        scope.add(op = tx);
    });
    // if item sort specified, perform post-encoding
    if (spec.sort) op = scope.add(SortItems({
        sort: scope.compareRef(spec.sort),
        pulse: ref(op)
    }));
    const encodeRef = ref(op);
    // add view layout operator if needed
    if (facet || layout) {
        layout = scope.add(ViewLayout({
            layout: scope.objectProperty(spec.layout),
            legends: scope.legends,
            mark: markRef,
            pulse: encodeRef
        }));
        layoutRef = ref(layout);
    }
    // compute bounding boxes
    const bound = scope.add(Bound({
        mark: markRef,
        pulse: layoutRef || encodeRef
    }));
    boundRef = ref(bound);
    // if group mark, recurse to parse nested content
    if (group) {
        // juggle layout & bounds to ensure they run *after* any faceting transforms
        if (nested) {
            ops = scope.operators;
            ops.pop();
            if (layout) ops.pop();
        }
        scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
        facet ? parseFacet(spec, scope, input) // explicit facet
         : nested ? parseSubflow(spec, scope, input) // standard mark group
         : scope.parse(spec); // guide group, we can avoid nested scopes
        scope.popState();
        if (nested) {
            if (layout) ops.push(layout);
            ops.push(bound);
        }
    }
    // if requested, add overlap removal transform
    if (overlap) boundRef = parseOverlap(overlap, boundRef, scope);
    // render / sieve items
    const render = scope.add(Render({
        pulse: boundRef
    })), sieve = scope.add(Sieve({
        pulse: ref(render)
    }, undefined, scope.parent()));
    // if mark is named, make accessible as reactive geometry
    // add trigger updates if defined
    if (spec.name != null) {
        name = spec.name;
        scope.addData(name, new DataScope(scope, store, render, sieve));
        if (spec.on) spec.on.forEach((on)=>{
            if (on.insert || on.remove || on.toggle) (0, $4SWbq.error)("Marks only support modify triggers.");
            parseTrigger(on, scope, name);
        });
    }
}
function parseOverlap(overlap, source, scope) {
    const method = overlap.method, bound = overlap.bound, sep = overlap.separation;
    const params = {
        separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,
        method: isSignal(method) ? scope.signalRef(method.signal) : method,
        pulse: source
    };
    if (overlap.order) params.sort = scope.compareRef({
        field: overlap.order
    });
    if (bound) {
        const tol = bound.tolerance;
        params.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;
        params.boundScale = scope.scaleRef(bound.scale);
        params.boundOrient = bound.orient;
    }
    return ref(scope.add(Overlap(params)));
}
function parseLegend(spec, scope) {
    const config = scope.config.legend, encode = spec.encode || {}, _ = lookup(spec, config), legendEncode = encode.legend || {}, name = legendEncode.name || undefined, interactive = legendEncode.interactive, style = legendEncode.style, scales = {};
    let scale = 0, entryLayout, params, children;
    // resolve scales and 'canonical' scale name
    LegendScales.forEach((s)=>spec[s] ? (scales[s] = spec[s], scale = scale || spec[s]) : 0);
    if (!scale) (0, $4SWbq.error)("Missing valid scale for legend.");
    // resolve legend type (symbol, gradient, or discrete gradient)
    const type = legendType(spec, scope.scaleType(scale));
    // single-element data source for legend group
    const datum = {
        title: spec.title != null,
        scales: scales,
        type: type,
        vgrad: type !== "symbol" && _.isVertical()
    };
    const dataRef = ref(scope.add(Collect(null, [
        datum
    ])));
    // encoding properties for legend entry sub-group
    const entryEncode = {
        enter: {
            x: {
                value: 0
            },
            y: {
                value: 0
            }
        }
    };
    // data source for legend values
    const entryRef = ref(scope.add(LegendEntries(params = {
        type: type,
        scale: scope.scaleRef(scale),
        count: scope.objectProperty(_("tickCount")),
        limit: scope.property(_("symbolLimit")),
        values: scope.objectProperty(spec.values),
        minstep: scope.property(spec.tickMinStep),
        formatType: scope.property(spec.formatType),
        formatSpecifier: scope.property(spec.format)
    })));
    // continuous gradient legend
    if (type === Gradient) {
        children = [
            legendGradient(spec, scale, config, encode.gradient),
            legendGradientLabels(spec, config, encode.labels, entryRef)
        ];
        // adjust default tick count based on the gradient length
        params.count = params.count || scope.signalRef(`max(2,2*floor((${deref(_.gradientLength())})/100))`);
    } else if (type === Discrete) children = [
        legendGradientDiscrete(spec, scale, config, encode.gradient, entryRef),
        legendGradientLabels(spec, config, encode.labels, entryRef)
    ];
    else {
        // determine legend symbol group layout
        entryLayout = legendSymbolLayout(spec, config);
        children = [
            legendSymbolGroups(spec, config, encode, entryRef, deref(entryLayout.columns))
        ];
        // pass symbol size information to legend entry generator
        params.size = sizeExpression(spec, scope, children[0].marks);
    }
    // generate legend marks
    children = [
        guideGroup({
            role: LegendEntryRole,
            from: dataRef,
            encode: entryEncode,
            marks: children,
            layout: entryLayout,
            interactive: interactive
        })
    ];
    // include legend title if defined
    if (datum.title) children.push(legendTitle(spec, config, encode.title, dataRef));
    // parse legend specification
    return parseMark(guideGroup({
        role: LegendRole,
        from: dataRef,
        encode: extendEncode(buildLegendEncode(_, spec, config), legendEncode, Skip),
        marks: children,
        aria: _("aria"),
        description: _("description"),
        zindex: _("zindex"),
        name: name,
        interactive: interactive,
        style: style
    }), scope);
}
function legendType(spec, scaleType) {
    let type = spec.type || Symbols;
    if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) type = (0, $1UqgZ.isContinuous)(scaleType) ? Gradient : (0, $1UqgZ.isDiscretizing)(scaleType) ? Discrete : Symbols;
    return type !== Gradient ? type : (0, $1UqgZ.isDiscretizing)(scaleType) ? Discrete : Gradient;
}
function scaleCount(spec) {
    return LegendScales.reduce((count, type)=>count + (spec[type] ? 1 : 0), 0);
}
function buildLegendEncode(_, spec, config) {
    const encode = {
        enter: {},
        update: {}
    };
    addEncoders(encode, {
        orient: _("orient"),
        offset: _("offset"),
        padding: _("padding"),
        titlePadding: _("titlePadding"),
        cornerRadius: _("cornerRadius"),
        fill: _("fillColor"),
        stroke: _("strokeColor"),
        strokeWidth: config.strokeWidth,
        strokeDash: config.strokeDash,
        x: _("legendX"),
        y: _("legendY"),
        // accessibility support
        format: spec.format,
        formatType: spec.formatType
    });
    return encode;
}
function sizeExpression(spec, scope, marks) {
    const size = deref(getChannel("size", spec, marks)), strokeWidth = deref(getChannel("strokeWidth", spec, marks)), fontSize = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));
    return (0, $Us6QS.parseExpression)(`max(ceil(sqrt(${size})+${strokeWidth}),${fontSize})`, scope);
}
function getChannel(name, spec, marks) {
    return spec[name] ? `scale("${spec[name]}",datum)` : getEncoding(name, marks[0].encode);
}
function getFontSize(encode, scope, style) {
    return getEncoding("fontSize", encode) || getStyle("fontSize", scope, style);
}
const angleExpr = `item.orient==="${Left}"?-90:item.orient==="${Right}"?90:0`;
function parseTitle(spec, scope) {
    spec = (0, $4SWbq.isString)(spec) ? {
        text: spec
    } : spec;
    const _ = lookup(spec, scope.config.title), encode = spec.encode || {}, userEncode = encode.group || {}, name = userEncode.name || undefined, interactive = userEncode.interactive, style = userEncode.style, children = [];
    // single-element data source for group title
    const datum = {}, dataRef = ref(scope.add(Collect(null, [
        datum
    ])));
    // include title text
    children.push(buildTitle(spec, _, titleEncode(spec), dataRef));
    // include subtitle text
    if (spec.subtitle) children.push(buildSubTitle(spec, _, encode.subtitle, dataRef));
    // parse title specification
    return parseMark(guideGroup({
        role: TitleRole,
        from: dataRef,
        encode: groupEncode(_, userEncode),
        marks: children,
        aria: _("aria"),
        description: _("description"),
        zindex: _("zindex"),
        name: name,
        interactive: interactive,
        style: style
    }), scope);
}
// provide backwards-compatibility for title custom encode;
// the top-level encode block has been *deprecated*.
function titleEncode(spec) {
    const encode = spec.encode;
    return encode && encode.title || (0, $4SWbq.extend)({
        name: spec.name,
        interactive: spec.interactive,
        style: spec.style
    }, encode);
}
function groupEncode(_, userEncode) {
    const encode = {
        enter: {},
        update: {}
    };
    addEncoders(encode, {
        orient: _("orient"),
        anchor: _("anchor"),
        align: {
            signal: alignExpr$1
        },
        angle: {
            signal: angleExpr
        },
        limit: _("limit"),
        frame: _("frame"),
        offset: _("offset") || 0,
        padding: _("subtitlePadding")
    });
    return extendEncode(encode, userEncode, Skip);
}
function buildTitle(spec, _, userEncode, dataRef) {
    const zero = {
        value: 0
    }, text = spec.text, encode = {
        enter: {
            opacity: zero
        },
        update: {
            opacity: {
                value: 1
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        text: text,
        align: {
            signal: "item.mark.group.align"
        },
        angle: {
            signal: "item.mark.group.angle"
        },
        limit: {
            signal: "item.mark.group.limit"
        },
        baseline: "top",
        dx: _("dx"),
        dy: _("dy"),
        fill: _("color"),
        font: _("font"),
        fontSize: _("fontSize"),
        fontStyle: _("fontStyle"),
        fontWeight: _("fontWeight"),
        lineHeight: _("lineHeight")
    }, {
        // update
        align: _("align"),
        angle: _("angle"),
        baseline: _("baseline")
    });
    return guideMark({
        type: TextMark,
        role: TitleTextRole,
        style: GroupTitleStyle,
        from: dataRef,
        encode: encode
    }, userEncode);
}
function buildSubTitle(spec, _, userEncode, dataRef) {
    const zero = {
        value: 0
    }, text = spec.subtitle, encode = {
        enter: {
            opacity: zero
        },
        update: {
            opacity: {
                value: 1
            }
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        text: text,
        align: {
            signal: "item.mark.group.align"
        },
        angle: {
            signal: "item.mark.group.angle"
        },
        limit: {
            signal: "item.mark.group.limit"
        },
        baseline: "top",
        dx: _("dx"),
        dy: _("dy"),
        fill: _("subtitleColor"),
        font: _("subtitleFont"),
        fontSize: _("subtitleFontSize"),
        fontStyle: _("subtitleFontStyle"),
        fontWeight: _("subtitleFontWeight"),
        lineHeight: _("subtitleLineHeight")
    }, {
        // update
        align: _("align"),
        angle: _("angle"),
        baseline: _("baseline")
    });
    return guideMark({
        type: TextMark,
        role: TitleSubtitleRole,
        style: GroupSubtitleStyle,
        from: dataRef,
        encode: encode
    }, userEncode);
}
function parseData(data, scope) {
    const transforms = [];
    if (data.transform) data.transform.forEach((tx)=>{
        transforms.push(parseTransform(tx, scope));
    });
    if (data.on) data.on.forEach((on)=>{
        parseTrigger(on, scope, data.name);
    });
    scope.addDataPipeline(data.name, analyze(data, scope, transforms));
}
/**
 * Analyze a data pipeline, add needed operators.
 */ function analyze(data, scope, ops) {
    const output = [];
    let source = null, modify = false, generate = false, upstream, i, n, t, m;
    if (data.values) {
        // hard-wired input data set
        if (isSignal(data.values) || hasSignal(data.format)) {
            // if either values is signal or format has signal, use dynamic loader
            output.push(load(scope, data));
            output.push(source = collect());
        } else // otherwise, ingest upon dataflow init
        output.push(source = collect({
            $ingest: data.values,
            $format: data.format
        }));
    } else if (data.url) {
        // load data from external source
        if (hasSignal(data.url) || hasSignal(data.format)) {
            // if either url or format has signal, use dynamic loader
            output.push(load(scope, data));
            output.push(source = collect());
        } else // otherwise, request load upon dataflow init
        output.push(source = collect({
            $request: data.url,
            $format: data.format
        }));
    } else if (data.source) {
        // derives from one or more other data sets
        source = upstream = (0, $4SWbq.array)(data.source).map((d)=>ref(scope.getData(d).output));
        output.push(null); // populate later
    }
    // scan data transforms, add collectors as needed
    for(i = 0, n = ops.length; i < n; ++i){
        t = ops[i];
        m = t.metadata;
        if (!source && !m.source) output.push(source = collect());
        output.push(t);
        if (m.generates) generate = true;
        if (m.modifies && !generate) modify = true;
        if (m.source) source = t;
        else if (m.changes) source = null;
    }
    if (upstream) {
        n = upstream.length - 1;
        output[0] = Relay({
            derive: modify,
            pulse: n ? upstream : upstream[0]
        });
        if (modify || n) // collect derived and multi-pulse tuples
        output.splice(1, 0, collect());
    }
    if (!source) output.push(collect());
    output.push(Sieve({}));
    return output;
}
function collect(values) {
    const s = Collect({}, values);
    s.metadata = {
        source: true
    };
    return s;
}
function load(scope, data) {
    return Load({
        url: data.url ? scope.property(data.url) : undefined,
        async: data.async ? scope.property(data.async) : undefined,
        values: data.values ? scope.property(data.values) : undefined,
        format: scope.objectProperty(data.format)
    });
}
const isX = (orient)=>orient === Bottom || orient === Top;
// get sign coefficient based on axis orient
const getSign = (orient, a, b)=>isSignal(orient) ? ifLeftTopExpr(orient.signal, a, b) : orient === Left || orient === Top ? a : b;
// condition on axis x-direction
const ifX = (orient, a, b)=>isSignal(orient) ? ifXEnc(orient.signal, a, b) : isX(orient) ? a : b;
// condition on axis y-direction
const ifY = (orient, a, b)=>isSignal(orient) ? ifYEnc(orient.signal, a, b) : isX(orient) ? b : a;
const ifTop = (orient, a, b)=>isSignal(orient) ? ifTopExpr(orient.signal, a, b) : orient === Top ? {
        value: a
    } : {
        value: b
    };
const ifRight = (orient, a, b)=>isSignal(orient) ? ifRightExpr(orient.signal, a, b) : orient === Right ? {
        value: a
    } : {
        value: b
    };
const ifXEnc = ($orient, a, b)=>ifEnc(`${$orient} === '${Top}' || ${$orient} === '${Bottom}'`, a, b);
const ifYEnc = ($orient, a, b)=>ifEnc(`${$orient} !== '${Top}' && ${$orient} !== '${Bottom}'`, a, b);
const ifLeftTopExpr = ($orient, a, b)=>ifExpr(`${$orient} === '${Left}' || ${$orient} === '${Top}'`, a, b);
const ifTopExpr = ($orient, a, b)=>ifExpr(`${$orient} === '${Top}'`, a, b);
const ifRightExpr = ($orient, a, b)=>ifExpr(`${$orient} === '${Right}'`, a, b);
const ifEnc = (test, a, b)=>{
    // ensure inputs are encoder objects (or null)
    a = a != null ? encoder(a) : a;
    b = b != null ? encoder(b) : b;
    if (isSimple(a) && isSimple(b)) {
        // if possible generate simple signal expression
        a = a ? a.signal || (0, $4SWbq.stringValue)(a.value) : null;
        b = b ? b.signal || (0, $4SWbq.stringValue)(b.value) : null;
        return {
            signal: `${test} ? (${a}) : (${b})`
        };
    } else // otherwise generate rule set
    return [
        (0, $4SWbq.extend)({
            test: test
        }, a)
    ].concat(b || []);
};
const isSimple = (enc)=>enc == null || Object.keys(enc).length === 1;
const ifExpr = (test, a, b)=>({
        signal: `${test} ? (${toExpr(a)}) : (${toExpr(b)})`
    });
const ifOrient = ($orient, t, b, l, r)=>({
        signal: (l != null ? `${$orient} === '${Left}' ? (${toExpr(l)}) : ` : "") + (b != null ? `${$orient} === '${Bottom}' ? (${toExpr(b)}) : ` : "") + (r != null ? `${$orient} === '${Right}' ? (${toExpr(r)}) : ` : "") + (t != null ? `${$orient} === '${Top}' ? (${toExpr(t)}) : ` : "") + "(null)"
    });
const toExpr = (v)=>isSignal(v) ? v.signal : v == null ? null : (0, $4SWbq.stringValue)(v);
const mult = (sign, value)=>value === 0 ? 0 : isSignal(sign) ? {
        signal: `(${sign.signal}) * ${value}`
    } : {
        value: sign * value
    };
const patch = (value, base)=>{
    const s = value.signal;
    return s && s.endsWith("(null)") ? {
        signal: s.slice(0, -6) + base.signal
    } : value;
};
function fallback(prop, config, axisConfig, style) {
    let styleProp;
    if (config && (0, $4SWbq.hasOwnProperty)(config, prop)) return config[prop];
    else if ((0, $4SWbq.hasOwnProperty)(axisConfig, prop)) return axisConfig[prop];
    else if (prop.startsWith("title")) {
        switch(prop){
            case "titleColor":
                styleProp = "fill";
                break;
            case "titleFont":
            case "titleFontSize":
            case "titleFontWeight":
                styleProp = prop[5].toLowerCase() + prop.slice(6);
        }
        return style[GuideTitleStyle][styleProp];
    } else if (prop.startsWith("label")) {
        switch(prop){
            case "labelColor":
                styleProp = "fill";
                break;
            case "labelFont":
            case "labelFontSize":
                styleProp = prop[5].toLowerCase() + prop.slice(6);
        }
        return style[GuideLabelStyle][styleProp];
    }
    return null;
}
function keys(objects) {
    const map = {};
    for (const obj of objects){
        if (!obj) continue;
        for(const key in obj)map[key] = 1;
    }
    return Object.keys(map);
}
function axisConfig(spec, scope) {
    var config = scope.config, style = config.style, axis = config.axis, band = scope.scaleType(spec.scale) === "band" && config.axisBand, orient = spec.orient, xy, or, key;
    if (isSignal(orient)) {
        const xyKeys = keys([
            config.axisX,
            config.axisY
        ]), orientKeys = keys([
            config.axisTop,
            config.axisBottom,
            config.axisLeft,
            config.axisRight
        ]);
        xy = {};
        for (key of xyKeys)xy[key] = ifX(orient, fallback(key, config.axisX, axis, style), fallback(key, config.axisY, axis, style));
        or = {};
        for (key of orientKeys)or[key] = ifOrient(orient.signal, fallback(key, config.axisTop, axis, style), fallback(key, config.axisBottom, axis, style), fallback(key, config.axisLeft, axis, style), fallback(key, config.axisRight, axis, style));
    } else {
        xy = orient === Top || orient === Bottom ? config.axisX : config.axisY;
        or = config["axis" + orient[0].toUpperCase() + orient.slice(1)];
    }
    const result = xy || or || band ? (0, $4SWbq.extend)({}, axis, xy, or, band) : axis;
    return result;
}
function axisDomain(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient = spec.orient;
    let enter, update;
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one
        },
        exit: {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("domainColor"),
        strokeCap: _("domainCap"),
        strokeDash: _("domainDash"),
        strokeDashOffset: _("domainDashOffset"),
        strokeWidth: _("domainWidth"),
        strokeOpacity: _("domainOpacity")
    });
    const pos0 = position(spec, 0);
    const pos1 = position(spec, 1);
    enter.x = update.x = ifX(orient, pos0, zero);
    enter.x2 = update.x2 = ifX(orient, pos1);
    enter.y = update.y = ifY(orient, pos0, zero);
    enter.y2 = update.y2 = ifY(orient, pos1);
    return guideMark({
        type: RuleMark,
        role: AxisDomainRole,
        from: dataRef,
        encode: encode
    }, userEncode);
}
function position(spec, pos) {
    return {
        scale: spec.scale,
        range: pos
    };
}
function axisGrid(spec, config, userEncode, dataRef, band) {
    const _ = lookup(spec, config), orient = spec.orient, vscale = spec.gridScale, sign = getSign(orient, 1, -1), offset = offsetValue(spec.offset, sign);
    let enter, exit, update;
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one
        },
        exit: exit = {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("gridColor"),
        strokeCap: _("gridCap"),
        strokeDash: _("gridDash"),
        strokeDashOffset: _("gridDashOffset"),
        strokeOpacity: _("gridOpacity"),
        strokeWidth: _("gridWidth")
    });
    const tickPos = {
        scale: spec.scale,
        field: Value,
        band: band.band,
        extra: band.extra,
        offset: band.offset,
        round: _("tickRound")
    };
    const sz = ifX(orient, {
        signal: "height"
    }, {
        signal: "width"
    });
    const gridStart = vscale ? {
        scale: vscale,
        range: 0,
        mult: sign,
        offset: offset
    } : {
        value: 0,
        offset: offset
    };
    const gridEnd = vscale ? {
        scale: vscale,
        range: 1,
        mult: sign,
        offset: offset
    } : (0, $4SWbq.extend)(sz, {
        mult: sign,
        offset: offset
    });
    enter.x = update.x = ifX(orient, tickPos, gridStart);
    enter.y = update.y = ifY(orient, tickPos, gridStart);
    enter.x2 = update.x2 = ifY(orient, gridEnd);
    enter.y2 = update.y2 = ifX(orient, gridEnd);
    exit.x = ifX(orient, tickPos);
    exit.y = ifY(orient, tickPos);
    return guideMark({
        type: RuleMark,
        role: AxisGridRole,
        key: Value,
        from: dataRef,
        encode: encode
    }, userEncode);
}
function offsetValue(offset, sign) {
    if (sign === 1) ;
    else if (!(0, $4SWbq.isObject)(offset)) offset = isSignal(sign) ? {
        signal: `(${sign.signal}) * (${offset || 0})`
    } : sign * (offset || 0);
    else {
        let entry = offset = (0, $4SWbq.extend)({}, offset);
        while(entry.mult != null)if (!(0, $4SWbq.isObject)(entry.mult)) {
            entry.mult = isSignal(sign) // no offset if sign === 1
             ? {
                signal: `(${entry.mult}) * (${sign.signal})`
            } : entry.mult * sign;
            return offset;
        } else entry = entry.mult = (0, $4SWbq.extend)({}, entry.mult);
        entry.mult = sign;
    }
    return offset;
}
function axisTicks(spec, config, userEncode, dataRef, size, band) {
    const _ = lookup(spec, config), orient = spec.orient, sign = getSign(orient, -1, 1);
    let enter, exit, update;
    const encode = {
        enter: enter = {
            opacity: zero
        },
        update: update = {
            opacity: one
        },
        exit: exit = {
            opacity: zero
        }
    };
    addEncoders(encode, {
        stroke: _("tickColor"),
        strokeCap: _("tickCap"),
        strokeDash: _("tickDash"),
        strokeDashOffset: _("tickDashOffset"),
        strokeOpacity: _("tickOpacity"),
        strokeWidth: _("tickWidth")
    });
    const tickSize = encoder(size);
    tickSize.mult = sign;
    const tickPos = {
        scale: spec.scale,
        field: Value,
        band: band.band,
        extra: band.extra,
        offset: band.offset,
        round: _("tickRound")
    };
    update.y = enter.y = ifX(orient, zero, tickPos);
    update.y2 = enter.y2 = ifX(orient, tickSize);
    exit.x = ifX(orient, tickPos);
    update.x = enter.x = ifY(orient, zero, tickPos);
    update.x2 = enter.x2 = ifY(orient, tickSize);
    exit.y = ifY(orient, tickPos);
    return guideMark({
        type: RuleMark,
        role: AxisTickRole,
        key: Value,
        from: dataRef,
        encode: encode
    }, userEncode);
}
function flushExpr(scale, threshold, a, b, c) {
    return {
        signal: 'flush(range("' + scale + '"), ' + 'scale("' + scale + '", datum.value), ' + threshold + "," + a + "," + b + "," + c + ")"
    };
}
function axisLabels(spec, config, userEncode, dataRef, size, band) {
    const _ = lookup(spec, config), orient = spec.orient, scale = spec.scale, sign = getSign(orient, -1, 1), flush = deref(_("labelFlush")), flushOffset = deref(_("labelFlushOffset")), labelAlign = _("labelAlign"), labelBaseline = _("labelBaseline");
    let flushOn = flush === 0 || !!flush, update;
    const tickSize = encoder(size);
    tickSize.mult = sign;
    tickSize.offset = encoder(_("labelPadding") || 0);
    tickSize.offset.mult = sign;
    const tickPos = {
        scale: scale,
        field: Value,
        band: 0.5,
        offset: extendOffset(band.offset, _("labelOffset"))
    };
    const align = ifX(orient, flushOn ? flushExpr(scale, flush, '"left"', '"right"', '"center"') : {
        value: "center"
    }, ifRight(orient, "left", "right"));
    const baseline = ifX(orient, ifTop(orient, "bottom", "top"), flushOn ? flushExpr(scale, flush, '"top"', '"bottom"', '"middle"') : {
        value: "middle"
    });
    const offsetExpr = flushExpr(scale, flush, `-(${flushOffset})`, flushOffset, 0);
    flushOn = flushOn && flushOffset;
    const enter = {
        opacity: zero,
        x: ifX(orient, tickPos, tickSize),
        y: ifY(orient, tickPos, tickSize)
    };
    const encode = {
        enter: enter,
        update: update = {
            opacity: one,
            text: {
                field: Label
            },
            x: enter.x,
            y: enter.y,
            align: align,
            baseline: baseline
        },
        exit: {
            opacity: zero,
            x: enter.x,
            y: enter.y
        }
    };
    addEncoders(encode, {
        dx: !labelAlign && flushOn ? ifX(orient, offsetExpr) : null,
        dy: !labelBaseline && flushOn ? ifY(orient, offsetExpr) : null
    });
    addEncoders(encode, {
        angle: _("labelAngle"),
        fill: _("labelColor"),
        fillOpacity: _("labelOpacity"),
        font: _("labelFont"),
        fontSize: _("labelFontSize"),
        fontWeight: _("labelFontWeight"),
        fontStyle: _("labelFontStyle"),
        limit: _("labelLimit"),
        lineHeight: _("labelLineHeight")
    }, {
        align: labelAlign,
        baseline: labelBaseline
    });
    const bound = _("labelBound");
    let overlap = _("labelOverlap");
    // if overlap method or bound defined, request label overlap removal
    overlap = overlap || bound ? {
        separation: _("labelSeparation"),
        method: overlap,
        order: "datum.index",
        bound: bound ? {
            scale: scale,
            orient: orient,
            tolerance: bound
        } : null
    } : undefined;
    if (update.align !== align) update.align = patch(update.align, align);
    if (update.baseline !== baseline) update.baseline = patch(update.baseline, baseline);
    return guideMark({
        type: TextMark,
        role: AxisLabelRole,
        style: GuideLabelStyle,
        key: Value,
        from: dataRef,
        encode: encode,
        overlap: overlap
    }, userEncode);
}
function axisTitle(spec, config, userEncode, dataRef) {
    const _ = lookup(spec, config), orient = spec.orient, sign = getSign(orient, -1, 1);
    let enter, update;
    const encode = {
        enter: enter = {
            opacity: zero,
            anchor: encoder(_("titleAnchor", null)),
            align: {
                signal: alignExpr$1
            }
        },
        update: update = (0, $4SWbq.extend)({}, enter, {
            opacity: one,
            text: encoder(spec.title)
        }),
        exit: {
            opacity: zero
        }
    };
    const titlePos = {
        signal: `lerp(range("${spec.scale}"), ${anchorExpr(0, 1, 0.5)})`
    };
    update.x = ifX(orient, titlePos);
    update.y = ifY(orient, titlePos);
    enter.angle = ifX(orient, zero, mult(sign, 90));
    enter.baseline = ifX(orient, ifTop(orient, Bottom, Top), {
        value: Bottom
    });
    update.angle = enter.angle;
    update.baseline = enter.baseline;
    addEncoders(encode, {
        fill: _("titleColor"),
        fillOpacity: _("titleOpacity"),
        font: _("titleFont"),
        fontSize: _("titleFontSize"),
        fontStyle: _("titleFontStyle"),
        fontWeight: _("titleFontWeight"),
        limit: _("titleLimit"),
        lineHeight: _("titleLineHeight")
    }, {
        // require update
        align: _("titleAlign"),
        angle: _("titleAngle"),
        baseline: _("titleBaseline")
    });
    autoLayout(_, orient, encode, userEncode);
    encode.update.align = patch(encode.update.align, enter.align);
    encode.update.angle = patch(encode.update.angle, enter.angle);
    encode.update.baseline = patch(encode.update.baseline, enter.baseline);
    return guideMark({
        type: TextMark,
        role: AxisTitleRole,
        style: GuideTitleStyle,
        from: dataRef,
        encode: encode
    }, userEncode);
}
function autoLayout(_, orient, encode, userEncode) {
    const auto = (value, dim)=>value != null ? (encode.update[dim] = patch(encoder(value), encode.update[dim]), false) : !has(dim, userEncode) ? true : false;
    const autoY = auto(_("titleX"), "x"), autoX = auto(_("titleY"), "y");
    encode.enter.auto = autoX === autoY ? encoder(autoX) : ifX(orient, encoder(autoX), encoder(autoY));
}
function parseAxis(spec, scope) {
    const config = axisConfig(spec, scope), encode = spec.encode || {}, axisEncode = encode.axis || {}, name = axisEncode.name || undefined, interactive = axisEncode.interactive, style = axisEncode.style, _ = lookup(spec, config), band = tickBand(_);
    // single-element data source for axis group
    const datum = {
        scale: spec.scale,
        ticks: !!_("ticks"),
        labels: !!_("labels"),
        grid: !!_("grid"),
        domain: !!_("domain"),
        title: spec.title != null
    };
    const dataRef = ref(scope.add(Collect({}, [
        datum
    ])));
    // data source for axis ticks
    const ticksRef = ref(scope.add(AxisTicks({
        scale: scope.scaleRef(spec.scale),
        extra: scope.property(band.extra),
        count: scope.objectProperty(spec.tickCount),
        values: scope.objectProperty(spec.values),
        minstep: scope.property(spec.tickMinStep),
        formatType: scope.property(spec.formatType),
        formatSpecifier: scope.property(spec.format)
    })));
    // generate axis marks
    const children = [];
    let size;
    // include axis gridlines if requested
    if (datum.grid) children.push(axisGrid(spec, config, encode.grid, ticksRef, band));
    // include axis ticks if requested
    if (datum.ticks) {
        size = _("tickSize");
        children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));
    }
    // include axis labels if requested
    if (datum.labels) {
        size = datum.ticks ? size : 0;
        children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));
    }
    // include axis domain path if requested
    if (datum.domain) children.push(axisDomain(spec, config, encode.domain, dataRef));
    // include axis title if defined
    if (datum.title) children.push(axisTitle(spec, config, encode.title, dataRef));
    // parse axis specification
    return parseMark(guideGroup({
        role: AxisRole,
        from: dataRef,
        encode: extendEncode(buildAxisEncode(_, spec), axisEncode, Skip),
        marks: children,
        aria: _("aria"),
        description: _("description"),
        zindex: _("zindex"),
        name: name,
        interactive: interactive,
        style: style
    }), scope);
}
function buildAxisEncode(_, spec) {
    const encode = {
        enter: {},
        update: {}
    };
    addEncoders(encode, {
        orient: _("orient"),
        offset: _("offset") || 0,
        position: value(spec.position, 0),
        titlePadding: _("titlePadding"),
        minExtent: _("minExtent"),
        maxExtent: _("maxExtent"),
        range: {
            signal: `abs(span(range("${spec.scale}")))`
        },
        translate: _("translate"),
        // accessibility support
        format: spec.format,
        formatType: spec.formatType
    });
    return encode;
}
function parseScope(spec, scope, preprocessed) {
    const signals = (0, $4SWbq.array)(spec.signals), scales = (0, $4SWbq.array)(spec.scales);
    // parse signal definitions, if not already preprocessed
    if (!preprocessed) signals.forEach((_)=>parseSignal(_, scope));
    // parse cartographic projection definitions
    (0, $4SWbq.array)(spec.projections).forEach((_)=>parseProjection(_, scope));
    // initialize scale references
    scales.forEach((_)=>initScale(_, scope));
    // parse data sources
    (0, $4SWbq.array)(spec.data).forEach((_)=>parseData(_, scope));
    // parse scale definitions
    scales.forEach((_)=>parseScale(_, scope));
    // parse signal updates
    (preprocessed || signals).forEach((_)=>parseSignalUpdates(_, scope));
    // parse axis definitions
    (0, $4SWbq.array)(spec.axes).forEach((_)=>parseAxis(_, scope));
    // parse mark definitions
    (0, $4SWbq.array)(spec.marks).forEach((_)=>parseMark(_, scope));
    // parse legend definitions
    (0, $4SWbq.array)(spec.legends).forEach((_)=>parseLegend(_, scope));
    // parse title, if defined
    if (spec.title) parseTitle(spec.title, scope);
    // parse collected lambda (anonymous) expressions
    scope.parseLambdas();
    return scope;
}
const rootEncode = (spec)=>extendEncode({
        enter: {
            x: {
                value: 0
            },
            y: {
                value: 0
            }
        },
        update: {
            width: {
                signal: "width"
            },
            height: {
                signal: "height"
            }
        }
    }, spec);
function parseView(spec, scope) {
    const config = scope.config;
    // add scenegraph root
    const root = ref(scope.root = scope.add(operator()));
    // parse top-level signal definitions
    const signals = collectSignals(spec, config);
    signals.forEach((_)=>parseSignal(_, scope));
    // assign description, event, legend, and locale configuration
    scope.description = spec.description || config.description;
    scope.eventConfig = config.events;
    scope.legends = scope.objectProperty(config.legend && config.legend.layout);
    scope.locale = config.locale;
    // store root group item
    const input = scope.add(Collect());
    // encode root group item
    const encode = scope.add(Encode(parseEncode(rootEncode(spec.encode), GroupMark, FrameRole, spec.style, scope, {
        pulse: ref(input)
    })));
    // perform view layout
    const parent = scope.add(ViewLayout({
        layout: scope.objectProperty(spec.layout),
        legends: scope.legends,
        autosize: scope.signalRef("autosize"),
        mark: root,
        pulse: ref(encode)
    }));
    scope.operators.pop();
    // parse remainder of specification
    scope.pushState(ref(encode), ref(parent), null);
    parseScope(spec, scope, signals);
    scope.operators.push(parent);
    // bound / render / sieve root item
    let op = scope.add(Bound({
        mark: root,
        pulse: ref(parent)
    }));
    op = scope.add(Render({
        pulse: ref(op)
    }));
    op = scope.add(Sieve({
        pulse: ref(op)
    }));
    // track metadata for root item
    scope.addData("root", new DataScope(scope, input, input, op));
    return scope;
}
function signalObject(name, value) {
    return value && value.signal ? {
        name: name,
        update: value.signal
    } : {
        name: name,
        value: value
    };
}
/**
 * Collect top-level signals, merging values as needed. Signals
 * defined in the config signals arrays are added only if that
 * signal is not explicitly defined in the specification.
 * Built-in signals (autosize, background, padding, width, height)
 * receive special treatment. They are initialized using the
 * top-level spec property, or, if undefined in the spec, using
 * the corresponding top-level config property. If this property
 * is a signal reference object, the signal expression maps to the
 * signal 'update' property. If the spec's top-level signal array
 * contains an entry that matches a built-in signal, that entry
 * will be merged with the built-in specification, potentially
 * overwriting existing 'value' or 'update' properties.
 */ function collectSignals(spec, config) {
    const _ = (name)=>value(spec[name], config[name]), signals = [
        signalObject("background", _("background")),
        signalObject("autosize", parseAutosize(_("autosize"))),
        signalObject("padding", parsePadding(_("padding"))),
        signalObject("width", _("width") || 0),
        signalObject("height", _("height") || 0)
    ], pre = signals.reduce((p, s)=>(p[s.name] = s, p), {}), map = {};
    // add spec signal array
    (0, $4SWbq.array)(spec.signals).forEach((s)=>{
        if ((0, $4SWbq.hasOwnProperty)(pre, s.name)) // merge if built-in signal
        s = (0, $4SWbq.extend)(pre[s.name], s);
        else // otherwise add to signal list
        signals.push(s);
        map[s.name] = s;
    });
    // add config signal array
    (0, $4SWbq.array)(config.signals).forEach((s)=>{
        if (!(0, $4SWbq.hasOwnProperty)(map, s.name) && !(0, $4SWbq.hasOwnProperty)(pre, s.name)) // add to signal list if not already defined
        signals.push(s);
    });
    return signals;
}
function Scope(config, options) {
    this.config = config || {};
    this.options = options || {};
    this.bindings = [];
    this.field = {};
    this.signals = {};
    this.lambdas = {};
    this.scales = {};
    this.events = {};
    this.data = {};
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this.eventConfig = null;
    this.locale = null;
    this._id = 0;
    this._subid = 0;
    this._nextsub = [
        0
    ];
    this._parent = [];
    this._encode = [];
    this._lookup = [];
    this._markpath = [];
}
function Subscope(scope) {
    this.config = scope.config;
    this.options = scope.options;
    this.legends = scope.legends;
    this.field = Object.create(scope.field);
    this.signals = Object.create(scope.signals);
    this.lambdas = Object.create(scope.lambdas);
    this.scales = Object.create(scope.scales);
    this.events = Object.create(scope.events);
    this.data = Object.create(scope.data);
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this._id = 0;
    this._subid = ++scope._nextsub[0];
    this._nextsub = scope._nextsub;
    this._parent = scope._parent.slice();
    this._encode = scope._encode.slice();
    this._lookup = scope._lookup.slice();
    this._markpath = scope._markpath;
}
Scope.prototype = Subscope.prototype = {
    parse (spec) {
        return parseScope(spec, this);
    },
    fork () {
        return new Subscope(this);
    },
    isSubscope () {
        return this._subid > 0;
    },
    toRuntime () {
        this.finish();
        return {
            description: this.description,
            operators: this.operators,
            streams: this.streams,
            updates: this.updates,
            bindings: this.bindings,
            eventConfig: this.eventConfig,
            locale: this.locale
        };
    },
    id () {
        return (this._subid ? this._subid + ":" : 0) + this._id++;
    },
    add (op) {
        this.operators.push(op);
        op.id = this.id();
        // if pre-registration references exist, resolve them now
        if (op.refs) {
            op.refs.forEach((ref)=>{
                ref.$ref = op.id;
            });
            op.refs = null;
        }
        return op;
    },
    proxy (op) {
        const vref = op instanceof Entry ? ref(op) : op;
        return this.add(Proxy({
            value: vref
        }));
    },
    addStream (stream) {
        this.streams.push(stream);
        stream.id = this.id();
        return stream;
    },
    addUpdate (update) {
        this.updates.push(update);
        return update;
    },
    // Apply metadata
    finish () {
        let name, ds;
        // annotate root
        if (this.root) this.root.root = true;
        // annotate signals
        for(name in this.signals)this.signals[name].signal = name;
        // annotate scales
        for(name in this.scales)this.scales[name].scale = name;
        // annotate data sets
        function annotate(op, name, type) {
            let data, list;
            if (op) {
                data = op.data || (op.data = {});
                list = data[name] || (data[name] = []);
                list.push(type);
            }
        }
        for(name in this.data){
            ds = this.data[name];
            annotate(ds.input, name, "input");
            annotate(ds.output, name, "output");
            annotate(ds.values, name, "values");
            for(const field in ds.index)annotate(ds.index[field], name, "index:" + field);
        }
        return this;
    },
    // ----
    pushState (encode, parent, lookup) {
        this._encode.push(ref(this.add(Sieve({
            pulse: encode
        }))));
        this._parent.push(parent);
        this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);
        this._markpath.push(-1);
    },
    popState () {
        this._encode.pop();
        this._parent.pop();
        this._lookup.pop();
        this._markpath.pop();
    },
    parent () {
        return (0, $4SWbq.peek)(this._parent);
    },
    encode () {
        return (0, $4SWbq.peek)(this._encode);
    },
    lookup () {
        return (0, $4SWbq.peek)(this._lookup);
    },
    markpath () {
        const p = this._markpath;
        return ++p[p.length - 1];
    },
    // ----
    fieldRef (field, name) {
        if ((0, $4SWbq.isString)(field)) return fieldRef$1(field, name);
        if (!field.signal) (0, $4SWbq.error)("Unsupported field reference: " + (0, $4SWbq.stringValue)(field));
        const s = field.signal;
        let f = this.field[s];
        if (!f) {
            const params = {
                name: this.signalRef(s)
            };
            if (name) params.as = name;
            this.field[s] = f = ref(this.add(Field(params)));
        }
        return f;
    },
    compareRef (cmp) {
        let signal = false;
        const check = (_)=>isSignal(_) ? (signal = true, this.signalRef(_.signal)) : isExpr$1(_) ? (signal = true, this.exprRef(_.expr)) : _;
        const fields = (0, $4SWbq.array)(cmp.field).map(check), orders = (0, $4SWbq.array)(cmp.order).map(check);
        return signal ? ref(this.add(Compare({
            fields: fields,
            orders: orders
        }))) : compareRef(fields, orders);
    },
    keyRef (fields, flat) {
        let signal = false;
        const check = (_)=>isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;
        const sig = this.signals;
        fields = (0, $4SWbq.array)(fields).map(check);
        return signal ? ref(this.add(Key({
            fields: fields,
            flat: flat
        }))) : keyRef(fields, flat);
    },
    sortRef (sort) {
        if (!sort) return sort;
        // including id ensures stable sorting
        const a = aggrField(sort.op, sort.field), o = sort.order || Ascending;
        return o.signal ? ref(this.add(Compare({
            fields: a,
            orders: this.signalRef(o.signal)
        }))) : compareRef(a, o);
    },
    // ----
    event (source, type) {
        const key = source + ":" + type;
        if (!this.events[key]) {
            const id = this.id();
            this.streams.push({
                id: id,
                source: source,
                type: type
            });
            this.events[key] = id;
        }
        return this.events[key];
    },
    // ----
    hasOwnSignal (name) {
        return (0, $4SWbq.hasOwnProperty)(this.signals, name);
    },
    addSignal (name, value) {
        if (this.hasOwnSignal(name)) (0, $4SWbq.error)("Duplicate signal name: " + (0, $4SWbq.stringValue)(name));
        const op = value instanceof Entry ? value : this.add(operator(value));
        return this.signals[name] = op;
    },
    getSignal (name) {
        if (!this.signals[name]) (0, $4SWbq.error)("Unrecognized signal name: " + (0, $4SWbq.stringValue)(name));
        return this.signals[name];
    },
    signalRef (s) {
        if (this.signals[s]) return ref(this.signals[s]);
        else if (!(0, $4SWbq.hasOwnProperty)(this.lambdas, s)) this.lambdas[s] = this.add(operator(null));
        return ref(this.lambdas[s]);
    },
    parseLambdas () {
        const code = Object.keys(this.lambdas);
        for(let i = 0, n = code.length; i < n; ++i){
            const s = code[i], e = (0, $Us6QS.parseExpression)(s, this), op = this.lambdas[s];
            op.params = e.$params;
            op.update = e.$expr;
        }
    },
    property (spec) {
        return spec && spec.signal ? this.signalRef(spec.signal) : spec;
    },
    objectProperty (spec) {
        return !spec || !(0, $4SWbq.isObject)(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
    },
    exprRef (code, name) {
        const params = {
            expr: (0, $Us6QS.parseExpression)(code, this)
        };
        if (name) params.expr.$name = name;
        return ref(this.add(Expression(params)));
    },
    addBinding (name, bind) {
        if (!this.bindings) (0, $4SWbq.error)("Nested signals do not support binding: " + (0, $4SWbq.stringValue)(name));
        this.bindings.push((0, $4SWbq.extend)({
            signal: name
        }, bind));
    },
    // ----
    addScaleProj (name, transform) {
        if ((0, $4SWbq.hasOwnProperty)(this.scales, name)) (0, $4SWbq.error)("Duplicate scale or projection name: " + (0, $4SWbq.stringValue)(name));
        this.scales[name] = this.add(transform);
    },
    addScale (name, params) {
        this.addScaleProj(name, Scale(params));
    },
    addProjection (name, params) {
        this.addScaleProj(name, Projection(params));
    },
    getScale (name) {
        if (!this.scales[name]) (0, $4SWbq.error)("Unrecognized scale name: " + (0, $4SWbq.stringValue)(name));
        return this.scales[name];
    },
    scaleRef (name) {
        return ref(this.getScale(name));
    },
    scaleType (name) {
        return this.getScale(name).params.type;
    },
    projectionRef (name) {
        return this.scaleRef(name);
    },
    projectionType (name) {
        return this.scaleType(name);
    },
    // ----
    addData (name, dataScope) {
        if ((0, $4SWbq.hasOwnProperty)(this.data, name)) (0, $4SWbq.error)("Duplicate data set name: " + (0, $4SWbq.stringValue)(name));
        return this.data[name] = dataScope;
    },
    getData (name) {
        if (!this.data[name]) (0, $4SWbq.error)("Undefined data set name: " + (0, $4SWbq.stringValue)(name));
        return this.data[name];
    },
    addDataPipeline (name, entries) {
        if ((0, $4SWbq.hasOwnProperty)(this.data, name)) (0, $4SWbq.error)("Duplicate data set name: " + (0, $4SWbq.stringValue)(name));
        return this.addData(name, DataScope.fromEntries(this, entries));
    }
};
function propertyLambda(spec) {
    return ((0, $4SWbq.isArray)(spec) ? arrayLambda : objectLambda)(spec);
}
function arrayLambda(array) {
    const n = array.length;
    let code = "[";
    for(let i = 0; i < n; ++i){
        const value = array[i];
        code += (i > 0 ? "," : "") + ((0, $4SWbq.isObject)(value) ? value.signal || propertyLambda(value) : (0, $4SWbq.stringValue)(value));
    }
    return code + "]";
}
function objectLambda(obj) {
    let code = "{", i = 0, key, value;
    for(key in obj){
        value = obj[key];
        code += (++i > 1 ? "," : "") + (0, $4SWbq.stringValue)(key) + ":" + ((0, $4SWbq.isObject)(value) ? value.signal || propertyLambda(value) : (0, $4SWbq.stringValue)(value));
    }
    return code + "}";
}
/**
 * Standard configuration defaults for Vega specification parsing.
 * Users can provide their own (sub-)set of these default values
 * by passing in a config object to the top-level parse method.
 */ function defaults() {
    const defaultFont = "sans-serif", defaultSymbolSize = 30, defaultStrokeWidth = 2, defaultColor = "#4c78a8", black = "#000", gray = "#888", lightGray = "#ddd";
    return {
        // default visualization description
        description: "Vega visualization",
        // default padding around visualization
        padding: 0,
        // default for automatic sizing; options: 'none', 'pad', 'fit'
        // or provide an object (e.g., {'type': 'pad', 'resize': true})
        autosize: "pad",
        // default view background color
        // covers the entire view component
        background: null,
        // default event handling configuration
        // preventDefault for view-sourced event types except 'wheel'
        events: {
            defaults: {
                allow: [
                    "wheel"
                ]
            }
        },
        // defaults for top-level group marks
        // accepts mark properties (fill, stroke, etc)
        // covers the data rectangle within group width/height
        group: null,
        // defaults for basic mark types
        // each subset accepts mark properties (fill, stroke, etc)
        mark: null,
        arc: {
            fill: defaultColor
        },
        area: {
            fill: defaultColor
        },
        image: null,
        line: {
            stroke: defaultColor,
            strokeWidth: defaultStrokeWidth
        },
        path: {
            stroke: defaultColor
        },
        rect: {
            fill: defaultColor
        },
        rule: {
            stroke: black
        },
        shape: {
            stroke: defaultColor
        },
        symbol: {
            fill: defaultColor,
            size: 64
        },
        text: {
            fill: black,
            font: defaultFont,
            fontSize: 11
        },
        trail: {
            fill: defaultColor,
            size: defaultStrokeWidth
        },
        // style definitions
        style: {
            // axis & legend labels
            "guide-label": {
                fill: black,
                font: defaultFont,
                fontSize: 10
            },
            // axis & legend titles
            "guide-title": {
                fill: black,
                font: defaultFont,
                fontSize: 11,
                fontWeight: "bold"
            },
            // headers, including chart title
            "group-title": {
                fill: black,
                font: defaultFont,
                fontSize: 13,
                fontWeight: "bold"
            },
            // chart subtitle
            "group-subtitle": {
                fill: black,
                font: defaultFont,
                fontSize: 12
            },
            // defaults for styled point marks in Vega-Lite
            point: {
                size: defaultSymbolSize,
                strokeWidth: defaultStrokeWidth,
                shape: "circle"
            },
            circle: {
                size: defaultSymbolSize,
                strokeWidth: defaultStrokeWidth
            },
            square: {
                size: defaultSymbolSize,
                strokeWidth: defaultStrokeWidth,
                shape: "square"
            },
            // defaults for styled group marks in Vega-Lite
            cell: {
                fill: "transparent",
                stroke: lightGray
            },
            view: {
                fill: "transparent"
            }
        },
        // defaults for title
        title: {
            orient: "top",
            anchor: "middle",
            offset: 4,
            subtitlePadding: 3
        },
        // defaults for axes
        axis: {
            minExtent: 0,
            maxExtent: 200,
            bandPosition: 0.5,
            domain: true,
            domainWidth: 1,
            domainColor: gray,
            grid: false,
            gridWidth: 1,
            gridColor: lightGray,
            labels: true,
            labelAngle: 0,
            labelLimit: 180,
            labelOffset: 0,
            labelPadding: 2,
            ticks: true,
            tickColor: gray,
            tickOffset: 0,
            tickRound: true,
            tickSize: 5,
            tickWidth: 1,
            titlePadding: 4
        },
        // correction for centering bias
        axisBand: {
            tickOffset: -0.5
        },
        // defaults for cartographic projection
        projection: {
            type: "mercator"
        },
        // defaults for legends
        legend: {
            orient: "right",
            padding: 0,
            gridAlign: "each",
            columnPadding: 10,
            rowPadding: 2,
            symbolDirection: "vertical",
            gradientDirection: "vertical",
            gradientLength: 200,
            gradientThickness: 16,
            gradientStrokeColor: lightGray,
            gradientStrokeWidth: 0,
            gradientLabelOffset: 2,
            labelAlign: "left",
            labelBaseline: "middle",
            labelLimit: 160,
            labelOffset: 4,
            labelOverlap: true,
            symbolLimit: 30,
            symbolType: "circle",
            symbolSize: 100,
            symbolOffset: 0,
            symbolStrokeWidth: 1.5,
            symbolBaseFillColor: "transparent",
            symbolBaseStrokeColor: gray,
            titleLimit: 180,
            titleOrient: "top",
            titlePadding: 5,
            layout: {
                offset: 18,
                direction: "horizontal",
                left: {
                    direction: "vertical"
                },
                right: {
                    direction: "vertical"
                }
            }
        },
        // defaults for scale ranges
        range: {
            category: {
                scheme: "tableau10"
            },
            ordinal: {
                scheme: "blues"
            },
            heatmap: {
                scheme: "yellowgreenblue"
            },
            ramp: {
                scheme: "blues"
            },
            diverging: {
                scheme: "blueorange",
                extent: [
                    1,
                    0
                ]
            },
            symbol: [
                "circle",
                "square",
                "triangle-up",
                "cross",
                "diamond",
                "triangle-right",
                "triangle-down",
                "triangle-left"
            ]
        }
    };
}
function parse(spec, config, options) {
    if (!(0, $4SWbq.isObject)(spec)) (0, $4SWbq.error)("Input Vega specification must be an object.");
    config = (0, $4SWbq.mergeConfig)(defaults(), config, spec.config);
    return parseView(spec, new Scope(config, options)).toRuntime();
}

});
parcelRegister("jOgxz", function(module, exports) {

$parcel$export(module.exports, "parseSelector", () => $e6bf84672c8a633b$export$529769e360e2fa1b);
const $e6bf84672c8a633b$var$VIEW = "view", $e6bf84672c8a633b$var$LBRACK = "[", $e6bf84672c8a633b$var$RBRACK = "]", $e6bf84672c8a633b$var$LBRACE = "{", $e6bf84672c8a633b$var$RBRACE = "}", $e6bf84672c8a633b$var$COLON = ":", $e6bf84672c8a633b$var$COMMA = ",", $e6bf84672c8a633b$var$NAME = "@", $e6bf84672c8a633b$var$GT = ">", $e6bf84672c8a633b$var$ILLEGAL = /[[\]{}]/, $e6bf84672c8a633b$var$DEFAULT_MARKS = {
    "*": 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
};
let $e6bf84672c8a633b$var$DEFAULT_SOURCE, $e6bf84672c8a633b$var$MARKS;
/**
 * Parse an event selector string.
 * Returns an array of event stream definitions.
 */ function $e6bf84672c8a633b$export$529769e360e2fa1b(selector, source, marks) {
    $e6bf84672c8a633b$var$DEFAULT_SOURCE = source || $e6bf84672c8a633b$var$VIEW;
    $e6bf84672c8a633b$var$MARKS = marks || $e6bf84672c8a633b$var$DEFAULT_MARKS;
    return $e6bf84672c8a633b$var$parseMerge(selector.trim()).map($e6bf84672c8a633b$var$parseSelector);
}
function $e6bf84672c8a633b$var$isMarkType(type) {
    return $e6bf84672c8a633b$var$MARKS[type];
}
function $e6bf84672c8a633b$var$find(s, i, endChar, pushChar, popChar) {
    const n = s.length;
    let count = 0, c;
    for(; i < n; ++i){
        c = s[i];
        if (!count && c === endChar) return i;
        else if (popChar && popChar.indexOf(c) >= 0) --count;
        else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
    }
    return i;
}
function $e6bf84672c8a633b$var$parseMerge(s) {
    const output = [], n = s.length;
    let start = 0, i = 0;
    while(i < n){
        i = $e6bf84672c8a633b$var$find(s, i, $e6bf84672c8a633b$var$COMMA, $e6bf84672c8a633b$var$LBRACK + $e6bf84672c8a633b$var$LBRACE, $e6bf84672c8a633b$var$RBRACK + $e6bf84672c8a633b$var$RBRACE);
        output.push(s.substring(start, i).trim());
        start = ++i;
    }
    if (output.length === 0) throw "Empty event selector: " + s;
    return output;
}
function $e6bf84672c8a633b$var$parseSelector(s) {
    return s[0] === "[" ? $e6bf84672c8a633b$var$parseBetween(s) : $e6bf84672c8a633b$var$parseStream(s);
}
function $e6bf84672c8a633b$var$parseBetween(s) {
    const n = s.length;
    let i = 1, b;
    i = $e6bf84672c8a633b$var$find(s, i, $e6bf84672c8a633b$var$RBRACK, $e6bf84672c8a633b$var$LBRACK, $e6bf84672c8a633b$var$RBRACK);
    if (i === n) throw "Empty between selector: " + s;
    b = $e6bf84672c8a633b$var$parseMerge(s.substring(1, i));
    if (b.length !== 2) throw "Between selector must have two elements: " + s;
    s = s.slice(i + 1).trim();
    if (s[0] !== $e6bf84672c8a633b$var$GT) throw "Expected '>' after between selector: " + s;
    b = b.map($e6bf84672c8a633b$var$parseSelector);
    const stream = $e6bf84672c8a633b$var$parseSelector(s.slice(1).trim());
    if (stream.between) return {
        between: b,
        stream: stream
    };
    else stream.between = b;
    return stream;
}
function $e6bf84672c8a633b$var$parseStream(s) {
    const stream = {
        source: $e6bf84672c8a633b$var$DEFAULT_SOURCE
    }, source = [];
    let throttle = [
        0,
        0
    ], markname = 0, start = 0, n = s.length, i = 0, j, filter;
    // extract throttle from end
    if (s[n - 1] === $e6bf84672c8a633b$var$RBRACE) {
        i = s.lastIndexOf($e6bf84672c8a633b$var$LBRACE);
        if (i >= 0) {
            try {
                throttle = $e6bf84672c8a633b$var$parseThrottle(s.substring(i + 1, n - 1));
            } catch (e) {
                throw "Invalid throttle specification: " + s;
            }
            s = s.slice(0, i).trim();
            n = s.length;
        } else throw "Unmatched right brace: " + s;
        i = 0;
    }
    if (!n) throw s;
    // set name flag based on first char
    if (s[0] === $e6bf84672c8a633b$var$NAME) markname = ++i;
    // extract first part of multi-part stream selector
    j = $e6bf84672c8a633b$var$find(s, i, $e6bf84672c8a633b$var$COLON);
    if (j < n) {
        source.push(s.substring(start, j).trim());
        start = i = ++j;
    }
    // extract remaining part of stream selector
    i = $e6bf84672c8a633b$var$find(s, i, $e6bf84672c8a633b$var$LBRACK);
    if (i === n) source.push(s.substring(start, n).trim());
    else {
        source.push(s.substring(start, i).trim());
        filter = [];
        start = ++i;
        if (start === n) throw "Unmatched left bracket: " + s;
    }
    // extract filters
    while(i < n){
        i = $e6bf84672c8a633b$var$find(s, i, $e6bf84672c8a633b$var$RBRACK);
        if (i === n) throw "Unmatched left bracket: " + s;
        filter.push(s.substring(start, i).trim());
        if (i < n - 1 && s[++i] !== $e6bf84672c8a633b$var$LBRACK) throw "Expected left bracket: " + s;
        start = ++i;
    }
    // marshall event stream specification
    if (!(n = source.length) || $e6bf84672c8a633b$var$ILLEGAL.test(source[n - 1])) throw "Invalid event selector: " + s;
    if (n > 1) {
        stream.type = source[1];
        if (markname) stream.markname = source[0].slice(1);
        else if ($e6bf84672c8a633b$var$isMarkType(source[0])) stream.marktype = source[0];
        else stream.source = source[0];
    } else stream.type = source[0];
    if (stream.type.slice(-1) === "!") {
        stream.consume = true;
        stream.type = stream.type.slice(0, -1);
    }
    if (filter != null) stream.filter = filter;
    if (throttle[0]) stream.throttle = throttle[0];
    if (throttle[1]) stream.debounce = throttle[1];
    return stream;
}
function $e6bf84672c8a633b$var$parseThrottle(s) {
    const a = s.split($e6bf84672c8a633b$var$COMMA);
    if (!s.length || a.length > 2) throw s;
    return a.map((_)=>{
        const x = +_;
        if (x !== x) throw s;
        return x;
    });
}

});



parcelRegister("fUe3S", function(module, exports) {

$parcel$export(module.exports, "expressionInterpreter", () => $b946fe5010e471c8$export$ed69611323c88451);
function $b946fe5010e471c8$var$adjustSpatial(item, encode, swap) {
    let t;
    if (encode.x2) {
        if (encode.x) {
            if (swap && item.x > item.x2) {
                t = item.x;
                item.x = item.x2;
                item.x2 = t;
            }
            item.width = item.x2 - item.x;
        } else item.x = item.x2 - (item.width || 0);
    }
    if (encode.xc) item.x = item.xc - (item.width || 0) / 2;
    if (encode.y2) {
        if (encode.y) {
            if (swap && item.y > item.y2) {
                t = item.y;
                item.y = item.y2;
                item.y2 = t;
            }
            item.height = item.y2 - item.y;
        } else item.y = item.y2 - (item.height || 0);
    }
    if (encode.yc) item.y = item.yc - (item.height || 0) / 2;
}
var $b946fe5010e471c8$var$Constants = {
    NaN: NaN,
    E: Math.E,
    LN2: Math.LN2,
    LN10: Math.LN10,
    LOG2E: Math.LOG2E,
    LOG10E: Math.LOG10E,
    PI: Math.PI,
    SQRT1_2: Math.SQRT1_2,
    SQRT2: Math.SQRT2,
    MIN_VALUE: Number.MIN_VALUE,
    MAX_VALUE: Number.MAX_VALUE
};
var $b946fe5010e471c8$var$Ops = {
    "*": (a, b)=>a * b,
    "+": (a, b)=>a + b,
    "-": (a, b)=>a - b,
    "/": (a, b)=>a / b,
    "%": (a, b)=>a % b,
    ">": (a, b)=>a > b,
    "<": (a, b)=>a < b,
    "<=": (a, b)=>a <= b,
    ">=": (a, b)=>a >= b,
    "==": (a, b)=>a == b,
    "!=": (a, b)=>a != b,
    "===": (a, b)=>a === b,
    "!==": (a, b)=>a !== b,
    "&": (a, b)=>a & b,
    "|": (a, b)=>a | b,
    "^": (a, b)=>a ^ b,
    "<<": (a, b)=>a << b,
    ">>": (a, b)=>a >> b,
    ">>>": (a, b)=>a >>> b
};
var $b946fe5010e471c8$var$Unary = {
    "+": (a)=>+a,
    "-": (a)=>-a,
    "~": (a)=>~a,
    "!": (a)=>!a
};
const $b946fe5010e471c8$var$slice = Array.prototype.slice;
const $b946fe5010e471c8$var$apply = (m, args, cast)=>{
    const obj = cast ? cast(args[0]) : args[0];
    return obj[m].apply(obj, $b946fe5010e471c8$var$slice.call(args, 1));
};
const $b946fe5010e471c8$var$datetime = (y, m, d, H, M, S, ms)=>new Date(y, m || 0, d != null ? d : 1, H || 0, M || 0, S || 0, ms || 0);
var $b946fe5010e471c8$var$Functions = {
    // math functions
    isNaN: Number.isNaN,
    isFinite: Number.isFinite,
    abs: Math.abs,
    acos: Math.acos,
    asin: Math.asin,
    atan: Math.atan,
    atan2: Math.atan2,
    ceil: Math.ceil,
    cos: Math.cos,
    exp: Math.exp,
    floor: Math.floor,
    log: Math.log,
    max: Math.max,
    min: Math.min,
    pow: Math.pow,
    random: Math.random,
    round: Math.round,
    sin: Math.sin,
    sqrt: Math.sqrt,
    tan: Math.tan,
    clamp: (a, b, c)=>Math.max(b, Math.min(c, a)),
    // date functions
    now: Date.now,
    utc: Date.UTC,
    datetime: $b946fe5010e471c8$var$datetime,
    date: (d)=>new Date(d).getDate(),
    day: (d)=>new Date(d).getDay(),
    year: (d)=>new Date(d).getFullYear(),
    month: (d)=>new Date(d).getMonth(),
    hours: (d)=>new Date(d).getHours(),
    minutes: (d)=>new Date(d).getMinutes(),
    seconds: (d)=>new Date(d).getSeconds(),
    milliseconds: (d)=>new Date(d).getMilliseconds(),
    time: (d)=>new Date(d).getTime(),
    timezoneoffset: (d)=>new Date(d).getTimezoneOffset(),
    utcdate: (d)=>new Date(d).getUTCDate(),
    utcday: (d)=>new Date(d).getUTCDay(),
    utcyear: (d)=>new Date(d).getUTCFullYear(),
    utcmonth: (d)=>new Date(d).getUTCMonth(),
    utchours: (d)=>new Date(d).getUTCHours(),
    utcminutes: (d)=>new Date(d).getUTCMinutes(),
    utcseconds: (d)=>new Date(d).getUTCSeconds(),
    utcmilliseconds: (d)=>new Date(d).getUTCMilliseconds(),
    // sequence functions
    length: (x)=>x.length,
    join: function() {
        return $b946fe5010e471c8$var$apply("join", arguments);
    },
    indexof: function() {
        return $b946fe5010e471c8$var$apply("indexOf", arguments);
    },
    lastindexof: function() {
        return $b946fe5010e471c8$var$apply("lastIndexOf", arguments);
    },
    slice: function() {
        return $b946fe5010e471c8$var$apply("slice", arguments);
    },
    reverse: (x)=>x.slice().reverse(),
    // string functions
    parseFloat: parseFloat,
    parseInt: parseInt,
    upper: (x)=>String(x).toUpperCase(),
    lower: (x)=>String(x).toLowerCase(),
    substring: function() {
        return $b946fe5010e471c8$var$apply("substring", arguments, String);
    },
    split: function() {
        return $b946fe5010e471c8$var$apply("split", arguments, String);
    },
    replace: function() {
        return $b946fe5010e471c8$var$apply("replace", arguments, String);
    },
    trim: (x)=>String(x).trim(),
    // regexp functions
    regexp: RegExp,
    test: (r, t)=>RegExp(r).test(t)
};
const $b946fe5010e471c8$var$EventFunctions = [
    "view",
    "item",
    "group",
    "xy",
    "x",
    "y"
];
const $b946fe5010e471c8$var$DisallowedMethods = new Set([
    Function,
    eval,
    setTimeout,
    setInterval
]);
if (typeof setImmediate === "function") $b946fe5010e471c8$var$DisallowedMethods.add(setImmediate);
const $b946fe5010e471c8$var$Visitors = {
    Literal: ($, n)=>n.value,
    Identifier: ($, n)=>{
        const id = n.name;
        return $.memberDepth > 0 ? id : id === "datum" ? $.datum : id === "event" ? $.event : id === "item" ? $.item : $b946fe5010e471c8$var$Constants[id] || $.params["$" + id];
    },
    MemberExpression: ($, n)=>{
        const d = !n.computed, o = $(n.object);
        if (d) $.memberDepth += 1;
        const p = $(n.property);
        if (d) $.memberDepth -= 1;
        if ($b946fe5010e471c8$var$DisallowedMethods.has(o[p])) {
            // eslint-disable-next-line no-console
            console.error(`Prevented interpretation of member "${p}" which could lead to insecure code execution`);
            return;
        }
        return o[p];
    },
    CallExpression: ($, n)=>{
        const args = n.arguments;
        let name = n.callee.name;
        // handle special internal functions used by encoders
        // re-route to corresponding standard function
        if (name.startsWith("_")) name = name.slice(1);
        // special case "if" due to conditional evaluation of branches
        return name === "if" ? $(args[0]) ? $(args[1]) : $(args[2]) : ($.fn[name] || $b946fe5010e471c8$var$Functions[name]).apply($.fn, args.map($));
    },
    ArrayExpression: ($, n)=>n.elements.map($),
    BinaryExpression: ($, n)=>$b946fe5010e471c8$var$Ops[n.operator]($(n.left), $(n.right)),
    UnaryExpression: ($, n)=>$b946fe5010e471c8$var$Unary[n.operator]($(n.argument)),
    ConditionalExpression: ($, n)=>$(n.test) ? $(n.consequent) : $(n.alternate),
    LogicalExpression: ($, n)=>n.operator === "&&" ? $(n.left) && $(n.right) : $(n.left) || $(n.right),
    ObjectExpression: ($, n)=>n.properties.reduce((o, p)=>{
            $.memberDepth += 1;
            const k = $(p.key);
            $.memberDepth -= 1;
            if ($b946fe5010e471c8$var$DisallowedMethods.has($(p.value))) // eslint-disable-next-line no-console
            console.error(`Prevented interpretation of property "${k}" which could lead to insecure code execution`);
            else o[k] = $(p.value);
            return o;
        }, {})
};
function $b946fe5010e471c8$var$interpret(ast, fn, params, datum, event, item) {
    const $ = (n)=>$b946fe5010e471c8$var$Visitors[n.type]($, n);
    $.memberDepth = 0;
    $.fn = Object.create(fn);
    $.params = params;
    $.datum = datum;
    $.event = event;
    $.item = item;
    // route event functions to annotated vega event context
    $b946fe5010e471c8$var$EventFunctions.forEach((f)=>$.fn[f] = function() {
            return event.vega[f](...arguments);
        });
    return $(ast);
}
var $b946fe5010e471c8$export$ed69611323c88451 = {
    /**
   * Parse an expression used to update an operator value.
   */ operator (ctx, expr) {
        const ast = expr.ast, fn = ctx.functions;
        return (_)=>$b946fe5010e471c8$var$interpret(ast, fn, _);
    },
    /**
   * Parse an expression provided as an operator parameter value.
   */ parameter (ctx, expr) {
        const ast = expr.ast, fn = ctx.functions;
        return (datum, _)=>$b946fe5010e471c8$var$interpret(ast, fn, _, datum);
    },
    /**
   * Parse an expression applied to an event stream.
   */ event (ctx, expr) {
        const ast = expr.ast, fn = ctx.functions;
        return (event)=>$b946fe5010e471c8$var$interpret(ast, fn, undefined, undefined, event);
    },
    /**
   * Parse an expression used to handle an event-driven operator update.
   */ handler (ctx, expr) {
        const ast = expr.ast, fn = ctx.functions;
        return (_, event)=>{
            const datum = event.item && event.item.datum;
            return $b946fe5010e471c8$var$interpret(ast, fn, _, datum, event);
        };
    },
    /**
   * Parse an expression that performs visual encoding.
   */ encode (ctx, encode) {
        const { marktype: marktype, channels: channels } = encode, fn = ctx.functions, swap = marktype === "group" || marktype === "image" || marktype === "rect";
        return (item, _)=>{
            const datum = item.datum;
            let m = 0, v;
            for(const name in channels){
                v = $b946fe5010e471c8$var$interpret(channels[name].ast, fn, _, datum, undefined, item);
                if (item[name] !== v) {
                    item[name] = v;
                    m = 1;
                }
            }
            if (marktype !== "rule") $b946fe5010e471c8$var$adjustSpatial(item, channels, swap);
            return m;
        };
    }
};

});

parcelRegister("1DNFM", function(module, exports) {

$parcel$export(module.exports, "compile", () => (parcelRequire("5gbsw")).compile);
$parcel$export(module.exports, "normalize", () => (parcelRequire("6kDXm")).normalize);
$parcel$export(module.exports, "version", () => (parcelRequire("fGaTl")).version);

var $fGaTl = parcelRequire("fGaTl");

var $6kDXm = parcelRequire("6kDXm");

var $5gbsw = parcelRequire("5gbsw");

var $7k4G6 = parcelRequire("7k4G6");
$parcel$exportWildcard(module.exports, $7k4G6);

});
parcelRegister("fGaTl", function(module, exports) {
module.exports = JSON.parse('{"name":"vega-lite","author":"Dominik Moritz, Kanit \\"Ham\\" Wongsuphasawat, Arvind Satyanarayan, Jeffrey Heer","version":"4.17.0","collaborators":["Kanit Wongsuphasawat (http://kanitw.yellowpigz.com)","Dominik Moritz (https://www.domoritz.de)","Arvind Satyanarayan (https://arvindsatya.com)","Jeffrey Heer (https://jheer.org)"],"homepage":"https://vega.github.io/vega-lite/","description":"Vega-Lite is a concise high-level language for interactive visualization.","main":"build/vega-lite.js","unpkg":"build/vega-lite.min.js","jsdelivr":"build/vega-lite.min.js","module":"build/src/index","types":"build/src/index.d.ts","bin":{"vl2png":"./bin/vl2png","vl2svg":"./bin/vl2svg","vl2pdf":"./bin/vl2pdf","vl2vg":"./bin/vl2vg"},"directories":{"test":"test"},"files":["bin","build","build-es5","src","vega-lite*"],"scripts":{"changelog":"conventional-changelog -p angular -r 2","prebuild":"yarn clean:build","build":"yarn build:only","build:only":"tsc -p tsconfig.build.json && rollup -c","prebuild:examples":"yarn build:only","build:examples":"yarn data && TZ=America/Los_Angeles scripts/build-examples.sh","prebuild:examples-full":"yarn build:only","build:examples-full":"TZ=America/Los_Angeles scripts/build-examples.sh 1","build:example":"TZ=America/Los_Angeles scripts/build-example.sh","build:toc":"yarn build:jekyll && scripts/generate-toc","build:site":"rollup -c site/rollup.config.js","build:jekyll":"pushd site && bundle exec jekyll build -q && popd","build:versions":"scripts/update-version.sh","clean":"yarn clean:build && rimraf site/data/* && rimraf examples/compiled/*.png && find site/examples ! -name \'index.md\' ! -name \'data\' -type f -delete","clean:build":"find build ! -name \'vega-lite-schema.json\' -type f -delete && rimraf build/src && rimraf build-es5","predeploy:site":"yarn presite","deploy:site":"gh-pages -d site","data":"rsync -r node_modules/vega-datasets/data/* site/data","schema":"mkdir -p build && ts-json-schema-generator -f tsconfig.json -p src/index.ts -t TopLevelSpec --no-type-check --no-ref-encode > build/vega-lite-schema.json && yarn renameschema && cp build/vega-lite-schema.json site/_data/","renameschema":"scripts/rename-schema.sh","presite":"yarn data && yarn schema && yarn build:site && yarn build:versions && scripts/create-example-pages.sh","site":"yarn site:only","site:only":"pushd site && bundle exec jekyll serve -I -l && popd","prettierbase":"prettier \'**/*.{md,css,yml}\'","eslintbase":"eslint .","format":"yarn eslintbase --fix && yarn prettierbase --write","lint":"yarn eslintbase && yarn prettierbase --check","test":"jest test/ && yarn lint && yarn schema && jest examples/ && yarn test:runtime","test:inspect":"node --inspect-brk ./node_modules/.bin/jest --runInBand test","test:runtime":"TZ=America/Los_Angeles jest test-runtime/","test:runtime:generate":"yarn build:only && rimraf test-runtime/resources && VL_GENERATE_TESTS=true yarn test:runtime","watch":"tsc -p tsconfig.build.json -w","watch:site":"yarn build:site -w","watch:test":"jest --watch"},"repository":{"type":"git","url":"https://github.com/vega/vega-lite.git"},"license":"BSD-3-Clause","bugs":{"url":"https://github.com/vega/vega-lite/issues"},"devDependencies":{"@babel/core":"^7.11.6","@babel/preset-env":"^7.11.5","@babel/preset-typescript":"^7.10.4","@rollup/plugin-babel":"^5.2.1","@rollup/plugin-commonjs":"^15.1.0","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^9.0.0","@types/chai":"^4.2.13","@types/d3":"^5.16.3","@types/jest":"^26.0.14","@types/mkdirp":"^1.0.1","@types/pako":"^1.0.1","@types/puppeteer":"^3.0.2","@typescript-eslint/eslint-plugin":"^4.4.0","@typescript-eslint/parser":"^4.4.0","ajv":"^6.12.6","chai":"^4.2.0","cheerio":"^1.0.0-rc.3","conventional-changelog-cli":"^2.1.0","d3":"^6.2.0","eslint":"^7.11.0","eslint-config-prettier":"^6.12.0","eslint-plugin-jest":"^24.1.0","eslint-plugin-prettier":"^3.1.4","gh-pages":"^3.1.0","highlight.js":"^10.2.1","jest":"^26.5.3","jest-puppeteer":"^4.4.0","mkdirp":"^1.0.4","pako":"^1.0.11","prettier":"^2.1.2","puppeteer":"^5.3.1","rollup":"^2.29.0","rollup-plugin-bundle-size":"^1.0.3","rollup-plugin-sourcemaps":"^0.6.3","rollup-plugin-terser":"^7.0.2","serve":"^11.3.2","terser":"^5.3.5","ts-json-schema-generator":"^0.76.1","typescript":"~4.0.3","vega-cli":"^5.17.0","vega-datasets":"~2.2.0","vega-embed":"^6.12.2","vega-tooltip":"^0.24.2","yaml-front-matter":"^4.1.0"},"dependencies":{"@types/clone":"~2.1.0","@types/fast-json-stable-stringify":"^2.0.0","array-flat-polyfill":"^1.0.1","clone":"~2.1.2","fast-deep-equal":"~3.1.3","fast-json-stable-stringify":"~2.1.0","json-stringify-pretty-compact":"~2.0.0","tslib":"~2.0.3","vega-event-selector":"~2.0.6","vega-expression":"~3.0.0","vega-util":"~1.16.0","yargs":"~16.0.3"},"peerDependencies":{"vega":"^5.17.0"},"jest":{"preset":"jest-puppeteer","testPathIgnorePatterns":["<rootDir>/node_modules","<rootDir>/build","<rootDir>/_site","<rootDir>/src"],"coverageDirectory":"./coverage/","collectCoverage":false,"setupFiles":["./test/jest.overrides.ts"]}}');

});

parcelRegister("6kDXm", function(module, exports) {

$parcel$export(module.exports, "normalize", () => $49c39add59b94f15$export$a3295358bff77e);

var $2bi3s = parcelRequire("2bi3s");

var $iX9mu = parcelRequire("iX9mu");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");
parcelRequire("5zWAp");
var $78jSz = parcelRequire("78jSz");
var $7Mulx = parcelRequire("7Mulx");

var $7k4G6 = parcelRequire("7k4G6");

var $dRmk6 = parcelRequire("dRmk6");
function $49c39add59b94f15$export$a3295358bff77e(spec, config) {
    if (config === undefined) config = (0, $iX9mu.initConfig)(spec.config);
    const normalizedSpec = $49c39add59b94f15$var$normalizeGenericSpec(spec, config);
    const { width: width, height: height } = spec;
    const autosize = $49c39add59b94f15$export$df3e4d039c7bd0e9(normalizedSpec, {
        width: width,
        height: height,
        autosize: spec.autosize
    }, config);
    return Object.assign(Object.assign({}, normalizedSpec), autosize ? {
        autosize: autosize
    } : {});
}
const $49c39add59b94f15$var$normalizer = new (0, $dRmk6.CoreNormalizer)();
/**
 * Decompose extended unit specs into composition of pure unit specs.
 */ function $49c39add59b94f15$var$normalizeGenericSpec(spec, config = {}) {
    return $49c39add59b94f15$var$normalizer.map(spec, {
        config: config
    });
}
function $49c39add59b94f15$var$_normalizeAutoSize(autosize) {
    return (0, $2bi3s.isString)(autosize) ? {
        type: autosize
    } : autosize !== null && autosize !== void 0 ? autosize : {};
}
function $49c39add59b94f15$export$df3e4d039c7bd0e9(spec, sizeInfo, config) {
    let { width: width, height: height } = sizeInfo;
    const isFitCompatible = (0, $78jSz.isUnitSpec)(spec) || (0, $7Mulx.isLayerSpec)(spec);
    const autosizeDefault = {};
    if (!isFitCompatible) {
        // If spec is not compatible with autosize == "fit", discard width/height == container
        if (width == "container") {
            $3XBQv.warn($bHNid.containerSizeNonSingle("width"));
            width = undefined;
        }
        if (height == "container") {
            $3XBQv.warn($bHNid.containerSizeNonSingle("height"));
            height = undefined;
        }
    } else {
        // Default autosize parameters to fit when width/height is "container"
        if (width == "container" && height == "container") {
            autosizeDefault.type = "fit";
            autosizeDefault.contains = "padding";
        } else if (width == "container") {
            autosizeDefault.type = "fit-x";
            autosizeDefault.contains = "padding";
        } else if (height == "container") {
            autosizeDefault.type = "fit-y";
            autosizeDefault.contains = "padding";
        }
    }
    const autosize = Object.assign(Object.assign(Object.assign({
        type: "pad"
    }, autosizeDefault), config ? $49c39add59b94f15$var$_normalizeAutoSize(config.autosize) : {}), $49c39add59b94f15$var$_normalizeAutoSize(spec.autosize));
    if (autosize.type === "fit" && !isFitCompatible) {
        $3XBQv.warn($bHNid.FIT_NON_SINGLE);
        autosize.type = "pad";
    }
    if (width == "container" && !(autosize.type == "fit" || autosize.type == "fit-x")) $3XBQv.warn($bHNid.containerSizeNotCompatibleWithAutosize("width"));
    if (height == "container" && !(autosize.type == "fit" || autosize.type == "fit-y")) $3XBQv.warn($bHNid.containerSizeNotCompatibleWithAutosize("height"));
    // Delete autosize property if it's Vega's default
    if ((0, $7k4G6.deepEqual)(autosize, {
        type: "pad"
    })) return undefined;
    return autosize;
}

});
parcelRegister("2bi3s", function(module, exports) {

$parcel$export(module.exports, "splitAccessPath", () => $196a9d2370f94734$export$91fa45d315aa4370);
$parcel$export(module.exports, "identity", () => $196a9d2370f94734$export$f0954fd7d5368655);
$parcel$export(module.exports, "Error", () => $196a9d2370f94734$export$edf27be85e5f6da0);
$parcel$export(module.exports, "Warn", () => $196a9d2370f94734$export$6c2e13f7f67a7c09);
$parcel$export(module.exports, "Info", () => $196a9d2370f94734$export$c4868e4a24d48fad);
$parcel$export(module.exports, "Debug", () => $196a9d2370f94734$export$153e5dc2c098b35c);
$parcel$export(module.exports, "logger", () => $196a9d2370f94734$export$af88d00dbe7f521);
$parcel$export(module.exports, "isArray", () => $196a9d2370f94734$export$43bee75e5e14138e);
$parcel$export(module.exports, "isObject", () => $196a9d2370f94734$export$a6cdc56e425d0d0a);
$parcel$export(module.exports, "mergeConfig", () => $196a9d2370f94734$export$7ec1ebcfa9d8bd6a);
$parcel$export(module.exports, "writeConfig", () => $196a9d2370f94734$export$62c85832a8c2c892);
$parcel$export(module.exports, "array", () => $196a9d2370f94734$export$2f23118c22fb2630);
$parcel$export(module.exports, "isFunction", () => $196a9d2370f94734$export$f6e2535fb5126e54);
$parcel$export(module.exports, "hasOwnProperty", () => $196a9d2370f94734$export$5a15a386532a5ea4);
$parcel$export(module.exports, "isBoolean", () => $196a9d2370f94734$export$f9ce7b637dfbe238);
$parcel$export(module.exports, "isNumber", () => $196a9d2370f94734$export$7e4aa119212bc614);
$parcel$export(module.exports, "isString", () => $196a9d2370f94734$export$844ec244b1367d54);
$parcel$export(module.exports, "stringValue", () => $196a9d2370f94734$export$732844b3d45b53a1);
$parcel$export(module.exports, "toSet", () => $196a9d2370f94734$export$f416efe173c6901c);
function $196a9d2370f94734$export$db0b1f6ca4bf0c76(fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
}
function $196a9d2370f94734$export$1653da1e2ededc21(fn) {
    return fn == null ? null : fn.fname;
}
function $196a9d2370f94734$export$68502a055ebe78c2(fn) {
    return fn == null ? null : fn.fields;
}
function $196a9d2370f94734$var$getter(path) {
    return path.length === 1 ? $196a9d2370f94734$var$get1(path[0]) : $196a9d2370f94734$var$getN(path);
}
const $196a9d2370f94734$var$get1 = (field)=>function(obj) {
        return obj[field];
    };
const $196a9d2370f94734$var$getN = (path)=>{
    const len = path.length;
    return function(obj) {
        for(let i = 0; i < len; ++i)obj = obj[path[i]];
        return obj;
    };
};
function $196a9d2370f94734$export$a3bc9b8ed74fc(message) {
    throw Error(message);
}
function $196a9d2370f94734$export$91fa45d315aa4370(p) {
    const path = [], n = p.length;
    let q = null, b = 0, s = "", i, j, c;
    p = p + "";
    function push() {
        path.push(s + p.substring(i, j));
        s = "";
        i = j + 1;
    }
    for(i = j = 0; j < n; ++j){
        c = p[j];
        if (c === "\\") {
            s += p.substring(i, j);
            s += p.substring(++j, ++j);
            i = j;
        } else if (c === q) {
            push();
            q = null;
            b = -1;
        } else if (q) continue;
        else if (i === b && c === '"') {
            i = j + 1;
            q = c;
        } else if (i === b && c === "'") {
            i = j + 1;
            q = c;
        } else if (c === "." && !b) {
            if (j > i) push();
            else i = j + 1;
        } else if (c === "[") {
            if (j > i) push();
            b = i = j + 1;
        } else if (c === "]") {
            if (!b) $196a9d2370f94734$export$a3bc9b8ed74fc("Access path missing open bracket: " + p);
            if (b > 0) push();
            b = 0;
            i = j + 1;
        }
    }
    if (b) $196a9d2370f94734$export$a3bc9b8ed74fc("Access path missing closing bracket: " + p);
    if (q) $196a9d2370f94734$export$a3bc9b8ed74fc("Access path missing closing quote: " + p);
    if (j > i) {
        j++;
        push();
    }
    return path;
}
function $196a9d2370f94734$export$e0f35d825088c098(field, name, opt) {
    const path = $196a9d2370f94734$export$91fa45d315aa4370(field);
    field = path.length === 1 ? path[0] : field;
    return $196a9d2370f94734$export$db0b1f6ca4bf0c76((opt && opt.get || $196a9d2370f94734$var$getter)(path), [
        field
    ], name || field);
}
const $196a9d2370f94734$export$d560c7e4a29451c2 = $196a9d2370f94734$export$e0f35d825088c098("id");
const $196a9d2370f94734$export$f0954fd7d5368655 = $196a9d2370f94734$export$db0b1f6ca4bf0c76((_)=>_, [], "identity");
const $196a9d2370f94734$export$7f9972325ebfd559 = $196a9d2370f94734$export$db0b1f6ca4bf0c76(()=>0, [], "zero");
const $196a9d2370f94734$export$80bf7733f1207381 = $196a9d2370f94734$export$db0b1f6ca4bf0c76(()=>1, [], "one");
const $196a9d2370f94734$export$b07e0827c17e3bee = $196a9d2370f94734$export$db0b1f6ca4bf0c76(()=>true, [], "true");
const $196a9d2370f94734$export$74775dafe30d0d0a = $196a9d2370f94734$export$db0b1f6ca4bf0c76(()=>false, [], "false");
function $196a9d2370f94734$var$log$1(method, level, input) {
    const args = [
        level
    ].concat([].slice.call(input));
    console[method].apply(console, args); // eslint-disable-line no-console
}
const $196a9d2370f94734$export$57ca7e07b341709d = 0;
const $196a9d2370f94734$export$edf27be85e5f6da0 = 1;
const $196a9d2370f94734$export$6c2e13f7f67a7c09 = 2;
const $196a9d2370f94734$export$c4868e4a24d48fad = 3;
const $196a9d2370f94734$export$153e5dc2c098b35c = 4;
function $196a9d2370f94734$export$af88d00dbe7f521(_, method) {
    let level = _ || $196a9d2370f94734$export$57ca7e07b341709d;
    return {
        level (_) {
            if (arguments.length) {
                level = +_;
                return this;
            } else return level;
        },
        error () {
            if (level >= $196a9d2370f94734$export$edf27be85e5f6da0) $196a9d2370f94734$var$log$1(method || "error", "ERROR", arguments);
            return this;
        },
        warn () {
            if (level >= $196a9d2370f94734$export$6c2e13f7f67a7c09) $196a9d2370f94734$var$log$1(method || "warn", "WARN", arguments);
            return this;
        },
        info () {
            if (level >= $196a9d2370f94734$export$c4868e4a24d48fad) $196a9d2370f94734$var$log$1(method || "log", "INFO", arguments);
            return this;
        },
        debug () {
            if (level >= $196a9d2370f94734$export$153e5dc2c098b35c) $196a9d2370f94734$var$log$1(method || "log", "DEBUG", arguments);
            return this;
        }
    };
}
var $196a9d2370f94734$export$43bee75e5e14138e = Array.isArray;
function $196a9d2370f94734$export$a6cdc56e425d0d0a(_) {
    return _ === Object(_);
}
const $196a9d2370f94734$var$isLegalKey = (key)=>key !== "__proto__";
function $196a9d2370f94734$export$7ec1ebcfa9d8bd6a(...configs) {
    return configs.reduce((out, source)=>{
        for(const key in source)if (key === "signals") // for signals, we merge the signals arrays
        // source signals take precedence over
        // existing signals with the same name
        out.signals = $196a9d2370f94734$var$mergeNamed(out.signals, source.signals);
        else {
            // otherwise, merge objects subject to recursion constraints
            // for legend block, recurse for the layout entry only
            // for style block, recurse for all properties
            // otherwise, no recursion: objects overwrite, no merging
            const r = key === "legend" ? {
                layout: 1
            } : key === "style" ? true : null;
            $196a9d2370f94734$export$62c85832a8c2c892(out, key, source[key], r);
        }
        return out;
    }, {});
}
function $196a9d2370f94734$export$62c85832a8c2c892(output, key, value, recurse) {
    if (!$196a9d2370f94734$var$isLegalKey(key)) return;
    let k, o;
    if ($196a9d2370f94734$export$a6cdc56e425d0d0a(value) && !$196a9d2370f94734$export$43bee75e5e14138e(value)) {
        o = $196a9d2370f94734$export$a6cdc56e425d0d0a(output[key]) ? output[key] : output[key] = {};
        for(k in value){
            if (recurse && (recurse === true || recurse[k])) $196a9d2370f94734$export$62c85832a8c2c892(o, k, value[k]);
            else if ($196a9d2370f94734$var$isLegalKey(k)) o[k] = value[k];
        }
    } else output[key] = value;
}
function $196a9d2370f94734$var$mergeNamed(a, b) {
    if (a == null) return b;
    const map = {}, out = [];
    function add(_) {
        if (!map[_.name]) {
            map[_.name] = 1;
            out.push(_);
        }
    }
    b.forEach(add);
    a.forEach(add);
    return out;
}
function $196a9d2370f94734$export$4d3fb11e950abb9e(array) {
    return array[array.length - 1];
}
function $196a9d2370f94734$export$a0a81dc3380ce7d3(_) {
    return _ == null || _ === "" ? null : +_;
}
const $196a9d2370f94734$var$exp = (sign)=>(x)=>sign * Math.exp(x);
const $196a9d2370f94734$var$log = (sign)=>(x)=>Math.log(sign * x);
const $196a9d2370f94734$var$symlog = (c)=>(x)=>Math.sign(x) * Math.log1p(Math.abs(x / c));
const $196a9d2370f94734$var$symexp = (c)=>(x)=>Math.sign(x) * Math.expm1(Math.abs(x)) * c;
const $196a9d2370f94734$var$pow = (exponent)=>(x)=>x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
function $196a9d2370f94734$var$pan(domain, delta, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift($196a9d2370f94734$export$4d3fb11e950abb9e(domain)), dd = (d1 - d0) * delta;
    return [
        ground(d0 - dd),
        ground(d1 - dd)
    ];
}
function $196a9d2370f94734$export$3df8aabe23053c01(domain, delta) {
    return $196a9d2370f94734$var$pan(domain, delta, $196a9d2370f94734$export$a0a81dc3380ce7d3, $196a9d2370f94734$export$f0954fd7d5368655);
}
function $196a9d2370f94734$export$7f25d74341d88ff6(domain, delta) {
    var sign = Math.sign(domain[0]);
    return $196a9d2370f94734$var$pan(domain, delta, $196a9d2370f94734$var$log(sign), $196a9d2370f94734$var$exp(sign));
}
function $196a9d2370f94734$export$a3d506d9803d02dc(domain, delta, exponent) {
    return $196a9d2370f94734$var$pan(domain, delta, $196a9d2370f94734$var$pow(exponent), $196a9d2370f94734$var$pow(1 / exponent));
}
function $196a9d2370f94734$export$b2c2ea35dd107bb6(domain, delta, constant) {
    return $196a9d2370f94734$var$pan(domain, delta, $196a9d2370f94734$var$symlog(constant), $196a9d2370f94734$var$symexp(constant));
}
function $196a9d2370f94734$var$zoom(domain, anchor, scale, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift($196a9d2370f94734$export$4d3fb11e950abb9e(domain)), da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
    return [
        ground(da + (d0 - da) * scale),
        ground(da + (d1 - da) * scale)
    ];
}
function $196a9d2370f94734$export$7e8a2f109f59f2ae(domain, anchor, scale) {
    return $196a9d2370f94734$var$zoom(domain, anchor, scale, $196a9d2370f94734$export$a0a81dc3380ce7d3, $196a9d2370f94734$export$f0954fd7d5368655);
}
function $196a9d2370f94734$export$c0b18e310866ea9a(domain, anchor, scale) {
    const sign = Math.sign(domain[0]);
    return $196a9d2370f94734$var$zoom(domain, anchor, scale, $196a9d2370f94734$var$log(sign), $196a9d2370f94734$var$exp(sign));
}
function $196a9d2370f94734$export$5f95cf1bf58f5b95(domain, anchor, scale, exponent) {
    return $196a9d2370f94734$var$zoom(domain, anchor, scale, $196a9d2370f94734$var$pow(exponent), $196a9d2370f94734$var$pow(1 / exponent));
}
function $196a9d2370f94734$export$d68222fc4b6defa1(domain, anchor, scale, constant) {
    return $196a9d2370f94734$var$zoom(domain, anchor, scale, $196a9d2370f94734$var$symlog(constant), $196a9d2370f94734$var$symexp(constant));
}
function $196a9d2370f94734$export$813f5834b9d5379d(date) {
    return 1 + ~~(new Date(date).getMonth() / 3);
}
function $196a9d2370f94734$export$db9b119ae18dbbed(date) {
    return 1 + ~~(new Date(date).getUTCMonth() / 3);
}
function $196a9d2370f94734$export$2f23118c22fb2630(_) {
    return _ != null ? $196a9d2370f94734$export$43bee75e5e14138e(_) ? _ : [
        _
    ] : [];
}
/**
 * Span-preserving range clamp. If the span of the input range is less
 * than (max - min) and an endpoint exceeds either the min or max value,
 * the range is translated such that the span is preserved and one
 * endpoint touches the boundary of the min/max range.
 * If the span exceeds (max - min), the range [min, max] is returned.
 */ function $196a9d2370f94734$export$e9d4863bcce07ce9(range, min, max) {
    let lo = range[0], hi = range[1], span;
    if (hi < lo) {
        span = hi;
        hi = lo;
        lo = span;
    }
    span = hi - lo;
    return span >= max - min ? [
        min,
        max
    ] : [
        lo = Math.min(Math.max(lo, min), max - span),
        lo + span
    ];
}
function $196a9d2370f94734$export$f6e2535fb5126e54(_) {
    return typeof _ === "function";
}
const $196a9d2370f94734$var$DESCENDING = "descending";
function $196a9d2370f94734$export$398604a469f7de9a(fields, orders, opt) {
    opt = opt || {};
    orders = $196a9d2370f94734$export$2f23118c22fb2630(orders) || [];
    const ord = [], get = [], fmap = {}, gen = opt.comparator || $196a9d2370f94734$var$comparator;
    $196a9d2370f94734$export$2f23118c22fb2630(fields).forEach((f, i)=>{
        if (f == null) return;
        ord.push(orders[i] === $196a9d2370f94734$var$DESCENDING ? -1 : 1);
        get.push(f = $196a9d2370f94734$export$f6e2535fb5126e54(f) ? f : $196a9d2370f94734$export$e0f35d825088c098(f, null, opt));
        ($196a9d2370f94734$export$68502a055ebe78c2(f) || []).forEach((_)=>fmap[_] = 1);
    });
    return get.length === 0 ? null : $196a9d2370f94734$export$db0b1f6ca4bf0c76(gen(get, ord), Object.keys(fmap));
}
const $196a9d2370f94734$export$fcb633242ef15540 = (u, v)=>(u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
const $196a9d2370f94734$var$comparator = (fields, orders)=>fields.length === 1 ? $196a9d2370f94734$var$compare1(fields[0], orders[0]) : $196a9d2370f94734$var$compareN(fields, orders, fields.length);
const $196a9d2370f94734$var$compare1 = (field, order)=>function(a, b) {
        return $196a9d2370f94734$export$fcb633242ef15540(field(a), field(b)) * order;
    };
const $196a9d2370f94734$var$compareN = (fields, orders, n)=>{
    orders.push(0); // pad zero for convenient lookup
    return function(a, b) {
        let f, c = 0, i = -1;
        while(c === 0 && ++i < n){
            f = fields[i];
            c = $196a9d2370f94734$export$fcb633242ef15540(f(a), f(b));
        }
        return c * orders[i];
    };
};
function $196a9d2370f94734$export$c983f826f44ff86(_) {
    return $196a9d2370f94734$export$f6e2535fb5126e54(_) ? _ : ()=>_;
}
function $196a9d2370f94734$export$61fc7d43ac8f84b0(delay, handler) {
    let tid;
    return (e)=>{
        if (tid) clearTimeout(tid);
        tid = setTimeout(()=>(handler(e), tid = null), delay);
    };
}
function $196a9d2370f94734$export$8b58be045bf06082(_) {
    for(let x, k, i = 1, len = arguments.length; i < len; ++i){
        x = arguments[i];
        for(k in x)_[k] = x[k];
    }
    return _;
}
/**
 * Return an array with minimum and maximum values, in the
 * form [min, max]. Ignores null, undefined, and NaN values.
 */ function $196a9d2370f94734$export$6d28227ee394ab2a(array, f) {
    let i = 0, n, v, min, max;
    if (array && (n = array.length)) {
        if (f == null) {
            // find first valid value
            for(v = array[i]; i < n && (v == null || v !== v); v = array[++i]);
            min = max = v; // visit all other values
            for(; i < n; ++i){
                v = array[i]; // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        } else {
            // find first valid value
            for(v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i]));
            min = max = v; // visit all other values
            for(; i < n; ++i){
                v = f(array[i]); // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        }
    }
    return [
        min,
        max
    ];
}
function $196a9d2370f94734$export$c35a1b04c3b4912b(array, f) {
    const n = array.length;
    let i = -1, a, b, c, u, v;
    if (f == null) {
        while(++i < n){
            b = array[i];
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = array[i];
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    } else {
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    }
    return [
        u,
        v
    ];
}
const $196a9d2370f94734$var$hop = Object.prototype.hasOwnProperty;
function $196a9d2370f94734$export$5a15a386532a5ea4(object, property) {
    return $196a9d2370f94734$var$hop.call(object, property);
}
const $196a9d2370f94734$var$NULL = {};
function $196a9d2370f94734$export$a9f822e144f35d84(input) {
    let obj = {}, test;
    function has$1(key) {
        return $196a9d2370f94734$export$5a15a386532a5ea4(obj, key) && obj[key] !== $196a9d2370f94734$var$NULL;
    }
    const map = {
        size: 0,
        empty: 0,
        object: obj,
        has: has$1,
        get (key) {
            return has$1(key) ? obj[key] : undefined;
        },
        set (key, value) {
            if (!has$1(key)) {
                ++map.size;
                if (obj[key] === $196a9d2370f94734$var$NULL) --map.empty;
            }
            obj[key] = value;
            return this;
        },
        delete (key) {
            if (has$1(key)) {
                --map.size;
                ++map.empty;
                obj[key] = $196a9d2370f94734$var$NULL;
            }
            return this;
        },
        clear () {
            map.size = map.empty = 0;
            map.object = obj = {};
        },
        test (_) {
            if (arguments.length) {
                test = _;
                return map;
            } else return test;
        },
        clean () {
            const next = {};
            let size = 0;
            for(const key in obj){
                const value = obj[key];
                if (value !== $196a9d2370f94734$var$NULL && (!test || !test(value))) {
                    next[key] = value;
                    ++size;
                }
            }
            map.size = size;
            map.empty = 0;
            map.object = obj = next;
        }
    };
    if (input) Object.keys(input).forEach((key)=>{
        map.set(key, input[key]);
    });
    return map;
}
function $196a9d2370f94734$export$4909b86c8034bf73(range, value, threshold, left, right, center) {
    if (!threshold && threshold !== 0) return center;
    const t = +threshold;
    let a = range[0], b = $196a9d2370f94734$export$4d3fb11e950abb9e(range), l; // swap endpoints if range is reversed
    if (b < a) {
        l = a;
        a = b;
        b = l;
    } // compare value to endpoints
    l = Math.abs(value - a);
    const r = Math.abs(b - value); // adjust if value is within threshold distance of endpoint
    return l < r && l <= t ? left : r <= t ? right : center;
}
function $196a9d2370f94734$export$69f1b2dcda23c5f8(child, parent, members) {
    const proto = child.prototype = Object.create(parent.prototype);
    Object.defineProperty(proto, "constructor", {
        value: child,
        writable: true,
        enumerable: true,
        configurable: true
    });
    return $196a9d2370f94734$export$8b58be045bf06082(proto, members);
}
/**
 * Predicate that returns true if the value lies within the span
 * of the given range. The left and right flags control the use
 * of inclusive (true) or exclusive (false) comparisons.
 */ function $196a9d2370f94734$export$ee19ee26d8849835(value, range, left, right) {
    let r0 = range[0], r1 = range[range.length - 1], t;
    if (r0 > r1) {
        t = r0;
        r0 = r1;
        r1 = t;
    }
    left = left === undefined || left;
    right = right === undefined || right;
    return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
}
function $196a9d2370f94734$export$f9ce7b637dfbe238(_) {
    return typeof _ === "boolean";
}
function $196a9d2370f94734$export$871608497c498473(_) {
    return Object.prototype.toString.call(_) === "[object Date]";
}
function $196a9d2370f94734$export$9652023d9040757(_) {
    return _ && $196a9d2370f94734$export$f6e2535fb5126e54(_[Symbol.iterator]);
}
function $196a9d2370f94734$export$7e4aa119212bc614(_) {
    return typeof _ === "number";
}
function $196a9d2370f94734$export$49841c62b9eff15(_) {
    return Object.prototype.toString.call(_) === "[object RegExp]";
}
function $196a9d2370f94734$export$844ec244b1367d54(_) {
    return typeof _ === "string";
}
function $196a9d2370f94734$export$df61b30b684217c0(fields, flat, opt) {
    if (fields) fields = flat ? $196a9d2370f94734$export$2f23118c22fb2630(fields).map((f)=>f.replace(/\\(.)/g, "$1")) : $196a9d2370f94734$export$2f23118c22fb2630(fields);
    const len = fields && fields.length, gen = opt && opt.get || $196a9d2370f94734$var$getter, map = (f)=>gen(flat ? [
            f
        ] : $196a9d2370f94734$export$91fa45d315aa4370(f));
    let fn;
    if (!len) fn = function() {
        return "";
    };
    else if (len === 1) {
        const get = map(fields[0]);
        fn = function(_) {
            return "" + get(_);
        };
    } else {
        const get = fields.map(map);
        fn = function(_) {
            let s = "" + get[0](_), i = 0;
            while(++i < len)s += "|" + get[i](_);
            return s;
        };
    }
    return $196a9d2370f94734$export$db0b1f6ca4bf0c76(fn, fields, "key");
}
function $196a9d2370f94734$export$3a89f8d6f6bf6c9f(array, frac) {
    const lo = array[0], hi = $196a9d2370f94734$export$4d3fb11e950abb9e(array), f = +frac;
    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}
const $196a9d2370f94734$var$DEFAULT_MAX_SIZE = 10000; // adapted from https://github.com/dominictarr/hashlru/ (MIT License)
function $196a9d2370f94734$export$441692190ec1da48(maxsize) {
    maxsize = +maxsize || $196a9d2370f94734$var$DEFAULT_MAX_SIZE;
    let curr, prev, size;
    const clear = ()=>{
        curr = {};
        prev = {};
        size = 0;
    };
    const update = (key, value)=>{
        if (++size > maxsize) {
            prev = curr;
            curr = {};
            size = 1;
        }
        return curr[key] = value;
    };
    clear();
    return {
        clear: clear,
        has: (key)=>$196a9d2370f94734$export$5a15a386532a5ea4(curr, key) || $196a9d2370f94734$export$5a15a386532a5ea4(prev, key),
        get: (key)=>$196a9d2370f94734$export$5a15a386532a5ea4(curr, key) ? curr[key] : $196a9d2370f94734$export$5a15a386532a5ea4(prev, key) ? update(key, prev[key]) : undefined,
        set: (key, value)=>$196a9d2370f94734$export$5a15a386532a5ea4(curr, key) ? curr[key] = value : update(key, value)
    };
}
function $196a9d2370f94734$export$4950aa0f605343fb(compare, array0, array1, output) {
    const n0 = array0.length, n1 = array1.length;
    if (!n1) return array0;
    if (!n0) return array1;
    const merged = output || new array0.constructor(n0 + n1);
    let i0 = 0, i1 = 0, i = 0;
    for(; i0 < n0 && i1 < n1; ++i)merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
    for(; i0 < n0; ++i0, ++i)merged[i] = array0[i0];
    for(; i1 < n1; ++i1, ++i)merged[i] = array1[i1];
    return merged;
}
function $196a9d2370f94734$export$76d90c956114f2c2(str, reps) {
    let s = "";
    while(--reps >= 0)s += str;
    return s;
}
function $196a9d2370f94734$export$5d04458e2a6c373e(str, length, padchar, align) {
    const c = padchar || " ", s = str + "", n = length - s.length;
    return n <= 0 ? s : align === "left" ? $196a9d2370f94734$export$76d90c956114f2c2(c, n) + s : align === "center" ? $196a9d2370f94734$export$76d90c956114f2c2(c, ~~(n / 2)) + s + $196a9d2370f94734$export$76d90c956114f2c2(c, Math.ceil(n / 2)) : s + $196a9d2370f94734$export$76d90c956114f2c2(c, n);
}
/**
 * Return the numerical span of an array: the difference between
 * the last and first values.
 */ function $196a9d2370f94734$export$afc1bfabebaf28a2(array) {
    return array && $196a9d2370f94734$export$4d3fb11e950abb9e(array) - array[0] || 0;
}
function $196a9d2370f94734$export$732844b3d45b53a1(x) {
    return $196a9d2370f94734$export$43bee75e5e14138e(x) ? "[" + x.map($196a9d2370f94734$export$732844b3d45b53a1) + "]" : $196a9d2370f94734$export$a6cdc56e425d0d0a(x) || $196a9d2370f94734$export$844ec244b1367d54(x) ? // See http://timelessrepo.com/json-isnt-a-javascript-subset
    JSON.stringify(x).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029") : x;
}
function $196a9d2370f94734$export$3c2e6d1b7583eee6(_) {
    return _ == null || _ === "" ? null : !_ || _ === "false" || _ === "0" ? false : !!_;
}
const $196a9d2370f94734$var$defaultParser = (_)=>$196a9d2370f94734$export$7e4aa119212bc614(_) ? _ : $196a9d2370f94734$export$871608497c498473(_) ? _ : Date.parse(_);
function $196a9d2370f94734$export$e67a095c620b86fe(_, parser) {
    parser = parser || $196a9d2370f94734$var$defaultParser;
    return _ == null || _ === "" ? null : parser(_);
}
function $196a9d2370f94734$export$f84e8e69fd4488a5(_) {
    return _ == null || _ === "" ? null : _ + "";
}
function $196a9d2370f94734$export$f416efe173c6901c(_) {
    const s = {}, n = _.length;
    for(let i = 0; i < n; ++i)s[_[i]] = true;
    return s;
}
function $196a9d2370f94734$export$6a506b36fdea397d(str, length, align, ellipsis) {
    const e = ellipsis != null ? ellipsis : "\u2026", s = str + "", n = s.length, l = Math.max(0, length - e.length);
    return n <= length ? s : align === "left" ? e + s.slice(n - l) : align === "center" ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
}
function $196a9d2370f94734$export$62940ad51e5012c2(array, filter, visitor) {
    if (array) {
        if (filter) {
            const n = array.length;
            for(let i = 0; i < n; ++i){
                const t = filter(array[i]);
                if (t) visitor(t, i, array);
            }
        } else array.forEach(visitor);
    }
}

});

parcelRegister("iX9mu", function(module, exports) {

$parcel$export(module.exports, "getViewConfigContinuousSize", () => $dcc4ffbe0aa257a1$export$f6b59683ea413344);
$parcel$export(module.exports, "getViewConfigDiscreteStep", () => $dcc4ffbe0aa257a1$export$4c71e5cc60f9e098);
$parcel$export(module.exports, "getViewConfigDiscreteSize", () => $dcc4ffbe0aa257a1$export$6b218c37f85f4a13);
$parcel$export(module.exports, "DEFAULT_STEP", () => $dcc4ffbe0aa257a1$export$84cd9b1ff2925cc4);
$parcel$export(module.exports, "initConfig", () => $dcc4ffbe0aa257a1$export$b9b9cdb96b829919);
$parcel$export(module.exports, "stripAndRedirectConfig", () => $dcc4ffbe0aa257a1$export$7452eb94819ca5ce);

var $2bi3s = parcelRequire("2bi3s");

var $lUV6x = parcelRequire("lUV6x");

var $9ulW1 = parcelRequire("9ulW1");

var $4MTlU = parcelRequire("4MTlU");

var $5C8w7 = parcelRequire("5C8w7");

var $g6jVE = parcelRequire("g6jVE");

var $947ka = parcelRequire("947ka");

var $kMFrr = parcelRequire("kMFrr");

var $9mRLv = parcelRequire("9mRLv");

var $9j78H = parcelRequire("9j78H");

var $9rekY = parcelRequire("9rekY");

var $2zU89 = parcelRequire("2zU89");

var $7Eu98 = parcelRequire("7Eu98");

var $ahFi3 = parcelRequire("ahFi3");

var $7k4G6 = parcelRequire("7k4G6");
var $dcc4ffbe0aa257a1$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $dcc4ffbe0aa257a1$export$f6b59683ea413344(viewConfig, channel) {
    var _a;
    return (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === "width" ? "continuousWidth" : "continuousHeight"]; // get width/height for backwards compatibility
}
function $dcc4ffbe0aa257a1$export$4c71e5cc60f9e098(viewConfig, channel) {
    const size = $dcc4ffbe0aa257a1$export$6b218c37f85f4a13(viewConfig, channel);
    return (0, $7Eu98.isStep)(size) ? size.step : $dcc4ffbe0aa257a1$export$84cd9b1ff2925cc4;
}
function $dcc4ffbe0aa257a1$export$6b218c37f85f4a13(viewConfig, channel) {
    var _a;
    const size = (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === "width" ? "discreteWidth" : "discreteHeight"]; // get width/height for backwards compatibility
    return (0, $7k4G6.getFirstDefined)(size, {
        step: viewConfig.step
    });
}
const $dcc4ffbe0aa257a1$export$84cd9b1ff2925cc4 = 20;
const $dcc4ffbe0aa257a1$export$97f2da28a013897a = {
    continuousWidth: 200,
    continuousHeight: 200,
    step: $dcc4ffbe0aa257a1$export$84cd9b1ff2925cc4
};
function $dcc4ffbe0aa257a1$export$661c035d89624bb4(rangeScheme) {
    return rangeScheme && !!rangeScheme["scheme"];
}
const $dcc4ffbe0aa257a1$export$f84bd70098573c5c = {
    background: "white",
    padding: 5,
    timeFormat: "%b %d, %Y",
    countTitle: "Count of Records",
    view: $dcc4ffbe0aa257a1$export$97f2da28a013897a,
    mark: $9mRLv.defaultMarkConfig,
    arc: {},
    area: {},
    bar: $9mRLv.defaultBarConfig,
    circle: {},
    geoshape: {},
    image: {},
    line: {},
    point: {},
    rect: $9mRLv.defaultRectConfig,
    rule: {
        color: "black"
    },
    square: {},
    text: {
        color: "black"
    },
    tick: $9mRLv.defaultTickConfig,
    trail: {},
    boxplot: {
        size: 14,
        extent: 1.5,
        box: {},
        median: {
            color: "white"
        },
        outliers: {},
        rule: {},
        ticks: null
    },
    errorbar: {
        center: "mean",
        rule: true,
        ticks: false
    },
    errorband: {
        band: {
            opacity: 0.3
        },
        borders: false
    },
    scale: (0, $9rekY.defaultScaleConfig),
    projection: {},
    legend: (0, $kMFrr.defaultLegendConfig),
    header: {
        titlePadding: 10,
        labelPadding: 10
    },
    headerColumn: {},
    headerRow: {},
    headerFacet: {},
    selection: (0, $2zU89.defaultConfig),
    style: {},
    title: {},
    facet: {
        spacing: (0, $7Eu98.DEFAULT_SPACING)
    },
    concat: {
        spacing: (0, $7Eu98.DEFAULT_SPACING)
    }
};
// Tableau10 color palette, copied from `vegaScale.scheme('tableau10')`
const $dcc4ffbe0aa257a1$var$tab10 = [
    "#4c78a8",
    "#f58518",
    "#e45756",
    "#72b7b2",
    "#54a24b",
    "#eeca3b",
    "#b279a2",
    "#ff9da6",
    "#9d755d",
    "#bab0ac"
];
const $dcc4ffbe0aa257a1$export$b1461457ea2c1179 = {
    text: 11,
    guideLabel: 10,
    guideTitle: 11,
    groupTitle: 13,
    groupSubtitle: 12
};
const $dcc4ffbe0aa257a1$export$37394b0fa44b998c = {
    blue: $dcc4ffbe0aa257a1$var$tab10[0],
    orange: $dcc4ffbe0aa257a1$var$tab10[1],
    red: $dcc4ffbe0aa257a1$var$tab10[2],
    teal: $dcc4ffbe0aa257a1$var$tab10[3],
    green: $dcc4ffbe0aa257a1$var$tab10[4],
    yellow: $dcc4ffbe0aa257a1$var$tab10[5],
    purple: $dcc4ffbe0aa257a1$var$tab10[6],
    pink: $dcc4ffbe0aa257a1$var$tab10[7],
    brown: $dcc4ffbe0aa257a1$var$tab10[8],
    gray0: "#000",
    gray1: "#111",
    gray2: "#222",
    gray3: "#333",
    gray4: "#444",
    gray5: "#555",
    gray6: "#666",
    gray7: "#777",
    gray8: "#888",
    gray9: "#999",
    gray10: "#aaa",
    gray11: "#bbb",
    gray12: "#ccc",
    gray13: "#ddd",
    gray14: "#eee",
    gray15: "#fff"
};
function $dcc4ffbe0aa257a1$export$f214258dd111a2b7(color = {}) {
    return {
        signals: [
            {
                name: "color",
                value: (0, $2bi3s.isObject)(color) ? Object.assign(Object.assign({}, $dcc4ffbe0aa257a1$export$37394b0fa44b998c), color) : $dcc4ffbe0aa257a1$export$37394b0fa44b998c
            }
        ],
        mark: {
            color: {
                signal: "color.blue"
            }
        },
        rule: {
            color: {
                signal: "color.gray0"
            }
        },
        text: {
            color: {
                signal: "color.gray0"
            }
        },
        style: {
            "guide-label": {
                fill: {
                    signal: "color.gray0"
                }
            },
            "guide-title": {
                fill: {
                    signal: "color.gray0"
                }
            },
            "group-title": {
                fill: {
                    signal: "color.gray0"
                }
            },
            "group-subtitle": {
                fill: {
                    signal: "color.gray0"
                }
            },
            cell: {
                stroke: {
                    signal: "color.gray8"
                }
            }
        },
        axis: {
            domainColor: {
                signal: "color.gray13"
            },
            gridColor: {
                signal: "color.gray8"
            },
            tickColor: {
                signal: "color.gray13"
            }
        },
        range: {
            category: [
                {
                    signal: "color.blue"
                },
                {
                    signal: "color.orange"
                },
                {
                    signal: "color.red"
                },
                {
                    signal: "color.teal"
                },
                {
                    signal: "color.green"
                },
                {
                    signal: "color.yellow"
                },
                {
                    signal: "color.purple"
                },
                {
                    signal: "color.pink"
                },
                {
                    signal: "color.brown"
                },
                {
                    signal: "color.grey8"
                }
            ]
        }
    };
}
function $dcc4ffbe0aa257a1$export$3cb5a4a451142b63(fontSize) {
    return {
        signals: [
            {
                name: "fontSize",
                value: (0, $2bi3s.isObject)(fontSize) ? Object.assign(Object.assign({}, $dcc4ffbe0aa257a1$export$b1461457ea2c1179), fontSize) : $dcc4ffbe0aa257a1$export$b1461457ea2c1179
            }
        ],
        text: {
            fontSize: {
                signal: "fontSize.text"
            }
        },
        style: {
            "guide-label": {
                fontSize: {
                    signal: "fontSize.guideLabel"
                }
            },
            "guide-title": {
                fontSize: {
                    signal: "fontSize.guideTitle"
                }
            },
            "group-title": {
                fontSize: {
                    signal: "fontSize.groupTitle"
                }
            },
            "group-subtitle": {
                fontSize: {
                    signal: "fontSize.groupSubtitle"
                }
            }
        }
    };
}
function $dcc4ffbe0aa257a1$export$564ea6a7d6ab0c3c(font) {
    return {
        text: {
            font: font
        },
        style: {
            "guide-label": {
                font: font
            },
            "guide-title": {
                font: font
            },
            "group-title": {
                font: font
            },
            "group-subtitle": {
                font: font
            }
        }
    };
}
function $dcc4ffbe0aa257a1$var$getAxisConfigInternal(axisConfig) {
    const props = (0, $7k4G6.keys)(axisConfig || {});
    const axisConfigInternal = {};
    for (const prop of props){
        const val = axisConfig[prop];
        axisConfigInternal[prop] = (0, $lUV6x.isConditionalAxisValue)(val) ? (0, $9ulW1.signalOrValueRefWithCondition)(val) : (0, $9ulW1.signalRefOrValue)(val);
    }
    return axisConfigInternal;
}
function $dcc4ffbe0aa257a1$var$getStyleConfigInternal(styleConfig) {
    const props = (0, $7k4G6.keys)(styleConfig);
    const styleConfigInternal = {};
    for (const prop of props)// We need to cast to cheat a bit here since styleConfig can be either mark config or axis config
    styleConfigInternal[prop] = $dcc4ffbe0aa257a1$var$getAxisConfigInternal(styleConfig[prop]);
    return styleConfigInternal;
}
const $dcc4ffbe0aa257a1$var$configPropsWithExpr = [
    ...(0, $9mRLv.MARK_CONFIGS),
    ...(0, $lUV6x.AXIS_CONFIGS),
    ...(0, $947ka.HEADER_CONFIGS),
    "background",
    "padding",
    "legend",
    "lineBreak",
    "scale",
    "style",
    "title",
    "view"
];
function $dcc4ffbe0aa257a1$export$b9b9cdb96b829919(specifiedConfig = {}) {
    const { color: color, font: font, fontSize: fontSize } = specifiedConfig, restConfig = $dcc4ffbe0aa257a1$var$__rest(specifiedConfig, [
        "color",
        "font",
        "fontSize"
    ]);
    const mergedConfig = (0, $2bi3s.mergeConfig)({}, $dcc4ffbe0aa257a1$export$f84bd70098573c5c, font ? $dcc4ffbe0aa257a1$export$564ea6a7d6ab0c3c(font) : {}, color ? $dcc4ffbe0aa257a1$export$f214258dd111a2b7(color) : {}, fontSize ? $dcc4ffbe0aa257a1$export$3cb5a4a451142b63(fontSize) : {}, restConfig || {});
    const outputConfig = (0, $7k4G6.omit)(mergedConfig, $dcc4ffbe0aa257a1$var$configPropsWithExpr);
    for (const prop of [
        "background",
        "lineBreak",
        "padding"
    ])if (mergedConfig[prop]) outputConfig[prop] = (0, $9ulW1.signalRefOrValue)(mergedConfig[prop]);
    for (const markConfigType of $9mRLv.MARK_CONFIGS)if (mergedConfig[markConfigType]) outputConfig[markConfigType] = (0, $5C8w7.replaceExprRefInIndex)(mergedConfig[markConfigType]);
    for (const axisConfigType of (0, $lUV6x.AXIS_CONFIGS))if (mergedConfig[axisConfigType]) outputConfig[axisConfigType] = $dcc4ffbe0aa257a1$var$getAxisConfigInternal(mergedConfig[axisConfigType]);
    for (const headerConfigType of (0, $947ka.HEADER_CONFIGS))if (mergedConfig[headerConfigType]) outputConfig[headerConfigType] = (0, $5C8w7.replaceExprRefInIndex)(mergedConfig[headerConfigType]);
    if (mergedConfig.legend) outputConfig.legend = (0, $5C8w7.replaceExprRefInIndex)(mergedConfig.legend);
    if (mergedConfig.scale) outputConfig.scale = (0, $5C8w7.replaceExprRefInIndex)(mergedConfig.scale);
    if (mergedConfig.style) outputConfig.style = $dcc4ffbe0aa257a1$var$getStyleConfigInternal(mergedConfig.style);
    if (mergedConfig.title) outputConfig.title = (0, $5C8w7.replaceExprRefInIndex)(mergedConfig.title);
    if (mergedConfig.view) outputConfig.view = (0, $5C8w7.replaceExprRefInIndex)(mergedConfig.view);
    return outputConfig;
}
const $dcc4ffbe0aa257a1$var$MARK_STYLES = [
    "view",
    ...(0, $9mRLv.PRIMITIVE_MARKS)
];
const $dcc4ffbe0aa257a1$var$VL_ONLY_CONFIG_PROPERTIES = [
    "color",
    "fontSize",
    "background",
    "padding",
    "facet",
    "concat",
    "numberFormat",
    "timeFormat",
    "countTitle",
    "header",
    "axisQuantitative",
    "axisTemporal",
    "axisDiscrete",
    "axisPoint",
    "axisXBand",
    "axisXPoint",
    "axisXDiscrete",
    "axisXQuantitative",
    "axisXTemporal",
    "axisYBand",
    "axisYPoint",
    "axisYDiscrete",
    "axisYQuantitative",
    "axisYTemporal",
    "scale",
    "selection",
    "overlay" // FIXME: Redesign and unhide this
];
const $dcc4ffbe0aa257a1$var$VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({
    view: [
        "continuousWidth",
        "continuousHeight",
        "discreteWidth",
        "discreteHeight",
        "step"
    ]
}, (0, $9mRLv.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX));
function $dcc4ffbe0aa257a1$export$7452eb94819ca5ce(config) {
    config = (0, $7k4G6.duplicate)(config);
    for (const prop of $dcc4ffbe0aa257a1$var$VL_ONLY_CONFIG_PROPERTIES)delete config[prop];
    if (config.axis) {
        // delete condition axis config
        for(const prop in config.axis)if ((0, $lUV6x.isConditionalAxisValue)(config.axis[prop])) delete config.axis[prop];
    }
    if (config.legend) for (const prop of (0, $g6jVE.VL_ONLY_LEGEND_CONFIG))delete config.legend[prop];
    // Remove Vega-Lite only generic mark config
    if (config.mark) {
        for (const prop of (0, $9mRLv.VL_ONLY_MARK_CONFIG_PROPERTIES))delete config.mark[prop];
        if (config.mark.tooltip && (0, $2bi3s.isObject)(config.mark.tooltip)) delete config.mark.tooltip;
    }
    if (config.params) {
        config.signals = (config.signals || []).concat((0, $9j78H.assembleParameterSignals)(config.params));
        delete config.params;
    }
    for (const markType of $dcc4ffbe0aa257a1$var$MARK_STYLES){
        // Remove Vega-Lite-only mark config
        for (const prop of (0, $9mRLv.VL_ONLY_MARK_CONFIG_PROPERTIES))delete config[markType][prop];
        // Remove Vega-Lite only mark-specific config
        const vlOnlyMarkSpecificConfigs = $dcc4ffbe0aa257a1$var$VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];
        if (vlOnlyMarkSpecificConfigs) for (const prop of vlOnlyMarkSpecificConfigs)delete config[markType][prop];
        // Redirect mark config to config.style so that mark config only affect its own mark type
        // without affecting other marks that share the same underlying Vega marks.
        // For example, config.rect should not affect bar marks.
        $dcc4ffbe0aa257a1$var$redirectConfigToStyleConfig(config, markType);
    }
    for (const m of (0, $4MTlU.getAllCompositeMarks)())// Clean up the composite mark config as we don't need them in the output specs anymore
    delete config[m];
    $dcc4ffbe0aa257a1$var$redirectTitleConfig(config);
    // Remove empty config objects.
    for(const prop in config)if ((0, $2bi3s.isObject)(config[prop]) && (0, $7k4G6.isEmpty)(config[prop])) delete config[prop];
    return (0, $7k4G6.isEmpty)(config) ? undefined : config;
}
/**
 *
 * Redirect config.title -- so that title config do not affect header labels,
 * which also uses `title` directive to implement.
 *
 * For subtitle configs in config.title, keep them in config.title as header titles never have subtitles.
 */ function $dcc4ffbe0aa257a1$var$redirectTitleConfig(config) {
    const { titleMarkConfig: titleMarkConfig, subtitleMarkConfig: subtitleMarkConfig, subtitle: subtitle } = (0, $ahFi3.extractTitleConfig)(config.title);
    // set config.style if title/subtitleMarkConfig is not an empty object
    if (!(0, $7k4G6.isEmpty)(titleMarkConfig)) config.style["group-title"] = Object.assign(Object.assign({}, config.style["group-title"]), titleMarkConfig // config.title has higher precedence than config.style.group-title in Vega
    );
    if (!(0, $7k4G6.isEmpty)(subtitleMarkConfig)) config.style["group-subtitle"] = Object.assign(Object.assign({}, config.style["group-subtitle"]), subtitleMarkConfig);
    // subtitle part can stay in config.title since header titles do not use subtitle
    if (!(0, $7k4G6.isEmpty)(subtitle)) config.title = subtitle;
    else delete config.title;
}
function $dcc4ffbe0aa257a1$var$redirectConfigToStyleConfig(config, prop, toProp, compositeMarkPart) {
    const propConfig = compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];
    if (prop === "view") toProp = "cell"; // View's default style is "cell"
    const style = Object.assign(Object.assign({}, propConfig), config.style[toProp !== null && toProp !== void 0 ? toProp : prop]);
    // set config.style if it is not an empty object
    if (!(0, $7k4G6.isEmpty)(style)) config.style[toProp !== null && toProp !== void 0 ? toProp : prop] = style;
    if (!compositeMarkPart) // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.
    delete config[prop];
}

});
parcelRegister("lUV6x", function(module, exports) {

$parcel$export(module.exports, "CONDITIONAL_AXIS_PROP_INDEX", () => $ff4b1fae321f2c61$export$ae5f396e2fc3caa7);
$parcel$export(module.exports, "isConditionalAxisValue", () => $ff4b1fae321f2c61$export$5515e46f84045b9c);
$parcel$export(module.exports, "AXIS_PARTS", () => $ff4b1fae321f2c61$export$992b1e37ec2d8f31);
$parcel$export(module.exports, "AXIS_PROPERTY_TYPE", () => $ff4b1fae321f2c61$export$f86c5d70ad7d2ac9);
$parcel$export(module.exports, "COMMON_AXIS_PROPERTIES_INDEX", () => $ff4b1fae321f2c61$export$891ce962b59e7120);
$parcel$export(module.exports, "isAxisProperty", () => $ff4b1fae321f2c61$export$97fe3dcd047cb696);
$parcel$export(module.exports, "AXIS_CONFIGS", () => $ff4b1fae321f2c61$export$6fbe621ecb3dfbe1);

var $7k4G6 = parcelRequire("7k4G6");
const $ff4b1fae321f2c61$export$ae5f396e2fc3caa7 = {
    labelAlign: {
        part: "labels",
        vgProp: "align"
    },
    labelBaseline: {
        part: "labels",
        vgProp: "baseline"
    },
    labelColor: {
        part: "labels",
        vgProp: "fill"
    },
    labelFont: {
        part: "labels",
        vgProp: "font"
    },
    labelFontSize: {
        part: "labels",
        vgProp: "fontSize"
    },
    labelFontStyle: {
        part: "labels",
        vgProp: "fontStyle"
    },
    labelFontWeight: {
        part: "labels",
        vgProp: "fontWeight"
    },
    labelOpacity: {
        part: "labels",
        vgProp: "opacity"
    },
    labelOffset: null,
    labelPadding: null,
    gridColor: {
        part: "grid",
        vgProp: "stroke"
    },
    gridDash: {
        part: "grid",
        vgProp: "strokeDash"
    },
    gridDashOffset: {
        part: "grid",
        vgProp: "strokeDashOffset"
    },
    gridOpacity: {
        part: "grid",
        vgProp: "opacity"
    },
    gridWidth: {
        part: "grid",
        vgProp: "strokeWidth"
    },
    tickColor: {
        part: "ticks",
        vgProp: "stroke"
    },
    tickDash: {
        part: "ticks",
        vgProp: "strokeDash"
    },
    tickDashOffset: {
        part: "ticks",
        vgProp: "strokeDashOffset"
    },
    tickOpacity: {
        part: "ticks",
        vgProp: "opacity"
    },
    tickSize: null,
    tickWidth: {
        part: "ticks",
        vgProp: "strokeWidth"
    }
};
function $ff4b1fae321f2c61$export$5515e46f84045b9c(v) {
    return v && v["condition"];
}
const $ff4b1fae321f2c61$export$992b1e37ec2d8f31 = [
    "domain",
    "grid",
    "labels",
    "ticks",
    "title"
];
const $ff4b1fae321f2c61$export$f86c5d70ad7d2ac9 = {
    grid: "grid",
    gridCap: "grid",
    gridColor: "grid",
    gridDash: "grid",
    gridDashOffset: "grid",
    gridOpacity: "grid",
    gridScale: "grid",
    gridWidth: "grid",
    orient: "main",
    bandPosition: "both",
    aria: "main",
    description: "main",
    domain: "main",
    domainCap: "main",
    domainColor: "main",
    domainDash: "main",
    domainDashOffset: "main",
    domainOpacity: "main",
    domainWidth: "main",
    format: "main",
    formatType: "main",
    labelAlign: "main",
    labelAngle: "main",
    labelBaseline: "main",
    labelBound: "main",
    labelColor: "main",
    labelFlush: "main",
    labelFlushOffset: "main",
    labelFont: "main",
    labelFontSize: "main",
    labelFontStyle: "main",
    labelFontWeight: "main",
    labelLimit: "main",
    labelLineHeight: "main",
    labelOffset: "main",
    labelOpacity: "main",
    labelOverlap: "main",
    labelPadding: "main",
    labels: "main",
    labelSeparation: "main",
    maxExtent: "main",
    minExtent: "main",
    offset: "both",
    position: "main",
    tickCap: "main",
    tickColor: "main",
    tickDash: "main",
    tickDashOffset: "main",
    tickMinStep: "main",
    tickOffset: "both",
    tickOpacity: "main",
    tickRound: "both",
    ticks: "main",
    tickSize: "main",
    tickWidth: "both",
    title: "main",
    titleAlign: "main",
    titleAnchor: "main",
    titleAngle: "main",
    titleBaseline: "main",
    titleColor: "main",
    titleFont: "main",
    titleFontSize: "main",
    titleFontStyle: "main",
    titleFontWeight: "main",
    titleLimit: "main",
    titleLineHeight: "main",
    titleOpacity: "main",
    titlePadding: "main",
    titleX: "main",
    titleY: "main",
    encode: "both",
    scale: "both",
    tickBand: "both",
    tickCount: "both",
    tickExtra: "both",
    translate: "both",
    values: "both",
    zindex: "both" // this is actually set afterward, so it doesn't matter
};
const $ff4b1fae321f2c61$export$891ce962b59e7120 = {
    orient: 1,
    aria: 1,
    bandPosition: 1,
    description: 1,
    domain: 1,
    domainCap: 1,
    domainColor: 1,
    domainDash: 1,
    domainDashOffset: 1,
    domainOpacity: 1,
    domainWidth: 1,
    format: 1,
    formatType: 1,
    grid: 1,
    gridCap: 1,
    gridColor: 1,
    gridDash: 1,
    gridDashOffset: 1,
    gridOpacity: 1,
    gridWidth: 1,
    labelAlign: 1,
    labelAngle: 1,
    labelBaseline: 1,
    labelBound: 1,
    labelColor: 1,
    labelFlush: 1,
    labelFlushOffset: 1,
    labelFont: 1,
    labelFontSize: 1,
    labelFontStyle: 1,
    labelFontWeight: 1,
    labelLimit: 1,
    labelLineHeight: 1,
    labelOffset: 1,
    labelOpacity: 1,
    labelOverlap: 1,
    labelPadding: 1,
    labels: 1,
    labelSeparation: 1,
    maxExtent: 1,
    minExtent: 1,
    offset: 1,
    position: 1,
    tickBand: 1,
    tickCap: 1,
    tickColor: 1,
    tickCount: 1,
    tickDash: 1,
    tickDashOffset: 1,
    tickExtra: 1,
    tickMinStep: 1,
    tickOffset: 1,
    tickOpacity: 1,
    tickRound: 1,
    ticks: 1,
    tickSize: 1,
    tickWidth: 1,
    title: 1,
    titleAlign: 1,
    titleAnchor: 1,
    titleAngle: 1,
    titleBaseline: 1,
    titleColor: 1,
    titleFont: 1,
    titleFontSize: 1,
    titleFontStyle: 1,
    titleFontWeight: 1,
    titleLimit: 1,
    titleLineHeight: 1,
    titleOpacity: 1,
    titlePadding: 1,
    titleX: 1,
    titleY: 1,
    translate: 1,
    values: 1,
    zindex: 1
};
const $ff4b1fae321f2c61$var$AXIS_PROPERTIES_INDEX = Object.assign(Object.assign({}, $ff4b1fae321f2c61$export$891ce962b59e7120), {
    style: 1,
    labelExpr: 1,
    encoding: 1
});
function $ff4b1fae321f2c61$export$97fe3dcd047cb696(prop) {
    return !!$ff4b1fae321f2c61$var$AXIS_PROPERTIES_INDEX[prop];
}
const $ff4b1fae321f2c61$export$1123381a6260c2d3 = (0, $7k4G6.keys)($ff4b1fae321f2c61$var$AXIS_PROPERTIES_INDEX);
const $ff4b1fae321f2c61$var$AXIS_CONFIGS_INDEX = {
    axis: 1,
    axisBand: 1,
    axisBottom: 1,
    axisDiscrete: 1,
    axisLeft: 1,
    axisPoint: 1,
    axisQuantitative: 1,
    axisRight: 1,
    axisTemporal: 1,
    axisTop: 1,
    axisX: 1,
    axisXBand: 1,
    axisXDiscrete: 1,
    axisXPoint: 1,
    axisXQuantitative: 1,
    axisXTemporal: 1,
    axisY: 1,
    axisYBand: 1,
    axisYDiscrete: 1,
    axisYPoint: 1,
    axisYQuantitative: 1,
    axisYTemporal: 1
};
const $ff4b1fae321f2c61$export$6fbe621ecb3dfbe1 = (0, $7k4G6.keys)($ff4b1fae321f2c61$var$AXIS_CONFIGS_INDEX);

});
parcelRegister("7k4G6", function(module, exports) {

$parcel$export(module.exports, "deepEqual", () => $554e07a49424e6a4$export$9cb4719e2e525b7a);
$parcel$export(module.exports, "duplicate", () => $554e07a49424e6a4$export$ecd5e8ace626722c);
$parcel$export(module.exports, "pick", () => $554e07a49424e6a4$export$357523c63a2253b9);
$parcel$export(module.exports, "omit", () => $554e07a49424e6a4$export$30a06c8d3562193f);
$parcel$export(module.exports, "stringify", () => $554e07a49424e6a4$export$fac44ee5b035f737);
$parcel$export(module.exports, "hash", () => $554e07a49424e6a4$export$d6af199866bfb566);
$parcel$export(module.exports, "isNullOrFalse", () => $554e07a49424e6a4$export$a30de39998a8930e);
$parcel$export(module.exports, "contains", () => $554e07a49424e6a4$export$2344b14b097df817);
$parcel$export(module.exports, "some", () => $554e07a49424e6a4$export$ad14ef4001db2bcd);
$parcel$export(module.exports, "every", () => $554e07a49424e6a4$export$7ecc1a3b11b57dab);
$parcel$export(module.exports, "mergeDeep", () => $554e07a49424e6a4$export$dd702b3c8240390c);
$parcel$export(module.exports, "keys", () => $554e07a49424e6a4$export$ed97f33186d4b816);
$parcel$export(module.exports, "unique", () => $554e07a49424e6a4$export$7a5d5c156e7dc406);
$parcel$export(module.exports, "isEqual", () => $554e07a49424e6a4$export$248d38f6296296c5);
$parcel$export(module.exports, "setEqual", () => $554e07a49424e6a4$export$dd7d5a65a6b6780f);
$parcel$export(module.exports, "hasIntersection", () => $554e07a49424e6a4$export$a4b6266f08fabd24);
$parcel$export(module.exports, "prefixGenerator", () => $554e07a49424e6a4$export$d0d0518be6ead6a1);
$parcel$export(module.exports, "fieldIntersection", () => $554e07a49424e6a4$export$dca5c61468c20b1f);
$parcel$export(module.exports, "isEmpty", () => $554e07a49424e6a4$export$dd1bc94b04021eeb);
$parcel$export(module.exports, "vals", () => $554e07a49424e6a4$export$f339bd56eda7a190);
$parcel$export(module.exports, "entries", () => $554e07a49424e6a4$export$3e9f948b41964866);
$parcel$export(module.exports, "isBoolean", () => $554e07a49424e6a4$export$f9ce7b637dfbe238);
$parcel$export(module.exports, "varName", () => $554e07a49424e6a4$export$b0844dbb2617eca3);
$parcel$export(module.exports, "logicalExpr", () => $554e07a49424e6a4$export$7eb81a7f590df2da);
$parcel$export(module.exports, "deleteNestedProperty", () => $554e07a49424e6a4$export$699d2008fec6573a);
$parcel$export(module.exports, "titleCase", () => $554e07a49424e6a4$export$348afa8c9ff47183);
$parcel$export(module.exports, "accessPathWithDatum", () => $554e07a49424e6a4$export$2419bac062c16e69);
$parcel$export(module.exports, "flatAccessWithDatum", () => $554e07a49424e6a4$export$4f52e6e44ee45af6);
$parcel$export(module.exports, "replacePathInField", () => $554e07a49424e6a4$export$e48c90028420537);
$parcel$export(module.exports, "replaceAll", () => $554e07a49424e6a4$export$b8b3234b4edfc4c2);
$parcel$export(module.exports, "removePathFromField", () => $554e07a49424e6a4$export$b1a0ed05d2842075);
$parcel$export(module.exports, "accessPathDepth", () => $554e07a49424e6a4$export$ff2cbe6fe9ee22b5);
$parcel$export(module.exports, "getFirstDefined", () => $554e07a49424e6a4$export$62b1acf2e63fe0ef);
$parcel$export(module.exports, "uniqueId", () => $554e07a49424e6a4$export$8b15d37bc3f197d4);
$parcel$export(module.exports, "resetIdCounter", () => $554e07a49424e6a4$export$4fba683129f6ab1e);
$parcel$export(module.exports, "internalField", () => $554e07a49424e6a4$export$cc2b325c25d33924);
$parcel$export(module.exports, "isInternalField", () => $554e07a49424e6a4$export$dae4cc87e23bc959);
$parcel$export(module.exports, "normalizeAngle", () => $554e07a49424e6a4$export$e3df76cf4464bc81);
$parcel$export(module.exports, "isNumeric", () => $554e07a49424e6a4$export$e90fb89750dba83f);
parcelRequire("6ET3w");

var $7lQ0U = parcelRequire("7lQ0U");

var $2cv1H = parcelRequire("2cv1H");

var $8d45l = parcelRequire("8d45l");

var $2bi3s = parcelRequire("2bi3s");

var $bJN6D = parcelRequire("bJN6D");
const $554e07a49424e6a4$export$9cb4719e2e525b7a = (0, (/*@__PURE__*/$parcel$interopDefault($2cv1H)));
const $554e07a49424e6a4$export$ecd5e8ace626722c = (0, (/*@__PURE__*/$parcel$interopDefault($7lQ0U)));
function $554e07a49424e6a4$export$357523c63a2253b9(obj, props) {
    const copy = {};
    for (const prop of props)if ((0, $2bi3s.hasOwnProperty)(obj, prop)) copy[prop] = obj[prop];
    return copy;
}
function $554e07a49424e6a4$export$30a06c8d3562193f(obj, props) {
    const copy = Object.assign({}, obj);
    for (const prop of props)delete copy[prop];
    return copy;
}
/**
 * Monkey patch Set so that `stringify` produces a string representation of sets.
 */ Set.prototype["toJSON"] = function() {
    return `Set(${[
        ...this
    ].map((x)=>(0, (/*@__PURE__*/$parcel$interopDefault($8d45l)))(x)).join(",")})`;
};
const $554e07a49424e6a4$export$fac44ee5b035f737 = (0, (/*@__PURE__*/$parcel$interopDefault($8d45l)));
function $554e07a49424e6a4$export$d6af199866bfb566(a) {
    if ((0, $2bi3s.isNumber)(a)) return a;
    const str = (0, $2bi3s.isString)(a) ? a : (0, (/*@__PURE__*/$parcel$interopDefault($8d45l)))(a);
    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage
    if (str.length < 250) return str;
    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
    let h = 0;
    for(let i = 0; i < str.length; i++){
        const char = str.charCodeAt(i);
        h = (h << 5) - h + char;
        h = h & h; // Convert to 32bit integer
    }
    return h;
}
function $554e07a49424e6a4$export$a30de39998a8930e(x) {
    return x === false || x === null;
}
function $554e07a49424e6a4$export$2344b14b097df817(array, item) {
    return array.indexOf(item) > -1;
}
function $554e07a49424e6a4$export$ad14ef4001db2bcd(arr, f) {
    let i = 0;
    for (const [k, a] of arr.entries()){
        if (f(a, k, i++)) return true;
    }
    return false;
}
function $554e07a49424e6a4$export$7ecc1a3b11b57dab(arr, f) {
    let i = 0;
    for (const [k, a] of arr.entries()){
        if (!f(a, k, i++)) return false;
    }
    return true;
}
function $554e07a49424e6a4$export$dd702b3c8240390c(dest, ...src) {
    for (const s of src)$554e07a49424e6a4$var$deepMerge_(dest, s !== null && s !== void 0 ? s : {});
    return dest;
}
function $554e07a49424e6a4$var$deepMerge_(dest, src) {
    for (const property of $554e07a49424e6a4$export$ed97f33186d4b816(src))(0, $2bi3s.writeConfig)(dest, property, src[property], true);
}
function $554e07a49424e6a4$export$7a5d5c156e7dc406(values, f) {
    const results = [];
    const u = {};
    let v;
    for (const val of values){
        v = f(val);
        if (v in u) continue;
        u[v] = 1;
        results.push(val);
    }
    return results;
}
function $554e07a49424e6a4$export$248d38f6296296c5(dict, other) {
    const dictKeys = $554e07a49424e6a4$export$ed97f33186d4b816(dict);
    const otherKeys = $554e07a49424e6a4$export$ed97f33186d4b816(other);
    if (dictKeys.length !== otherKeys.length) return false;
    for (const key of dictKeys){
        if (dict[key] !== other[key]) return false;
    }
    return true;
}
function $554e07a49424e6a4$export$dd7d5a65a6b6780f(a, b) {
    if (a.size !== b.size) return false;
    for (const e of a){
        if (!b.has(e)) return false;
    }
    return true;
}
function $554e07a49424e6a4$export$a4b6266f08fabd24(a, b) {
    for (const key of a){
        if (b.has(key)) return true;
    }
    return false;
}
function $554e07a49424e6a4$export$d0d0518be6ead6a1(a) {
    const prefixes = new Set();
    for (const x of a){
        const splitField = (0, $2bi3s.splitAccessPath)(x);
        // Wrap every element other than the first in `[]`
        const wrappedWithAccessors = splitField.map((y, i)=>i === 0 ? y : `[${y}]`);
        const computedPrefixes = wrappedWithAccessors.map((_, i)=>wrappedWithAccessors.slice(0, i + 1).join(""));
        for (const y of computedPrefixes)prefixes.add(y);
    }
    return prefixes;
}
function $554e07a49424e6a4$export$dca5c61468c20b1f(a, b) {
    if (a === undefined || b === undefined) return true;
    return $554e07a49424e6a4$export$a4b6266f08fabd24($554e07a49424e6a4$export$d0d0518be6ead6a1(a), $554e07a49424e6a4$export$d0d0518be6ead6a1(b));
}
function $554e07a49424e6a4$export$dd1bc94b04021eeb(obj) {
    return $554e07a49424e6a4$export$ed97f33186d4b816(obj).length === 0;
}
const $554e07a49424e6a4$export$ed97f33186d4b816 = Object.keys;
const $554e07a49424e6a4$export$f339bd56eda7a190 = Object.values;
const $554e07a49424e6a4$export$3e9f948b41964866 = Object.entries;
function $554e07a49424e6a4$export$f9ce7b637dfbe238(b) {
    return b === true || b === false;
}
function $554e07a49424e6a4$export$b0844dbb2617eca3(s) {
    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _
    const alphanumericS = s.replace(/\W/g, "_");
    // Add _ if the string has leading numbers.
    return (s.match(/^\d+/) ? "_" : "") + alphanumericS;
}
function $554e07a49424e6a4$export$7eb81a7f590df2da(op, cb) {
    if ((0, $bJN6D.isLogicalNot)(op)) return "!(" + $554e07a49424e6a4$export$7eb81a7f590df2da(op.not, cb) + ")";
    else if ((0, $bJN6D.isLogicalAnd)(op)) return "(" + op.and.map((and)=>$554e07a49424e6a4$export$7eb81a7f590df2da(and, cb)).join(") && (") + ")";
    else if ((0, $bJN6D.isLogicalOr)(op)) return "(" + op.or.map((or)=>$554e07a49424e6a4$export$7eb81a7f590df2da(or, cb)).join(") || (") + ")";
    else return cb(op);
}
function $554e07a49424e6a4$export$699d2008fec6573a(obj, orderedProps) {
    if (orderedProps.length === 0) return true;
    const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion
    if (prop in obj && $554e07a49424e6a4$export$699d2008fec6573a(obj[prop], orderedProps)) delete obj[prop];
    return $554e07a49424e6a4$export$dd1bc94b04021eeb(obj);
}
function $554e07a49424e6a4$export$348afa8c9ff47183(s) {
    return s.charAt(0).toUpperCase() + s.substr(1);
}
function $554e07a49424e6a4$export$2419bac062c16e69(path, datum = "datum") {
    const pieces = (0, $2bi3s.splitAccessPath)(path);
    const prefixes = [];
    for(let i = 1; i <= pieces.length; i++){
        const prefix = `[${pieces.slice(0, i).map((0, $2bi3s.stringValue)).join("][")}]`;
        prefixes.push(`${datum}${prefix}`);
    }
    return prefixes.join(" && ");
}
function $554e07a49424e6a4$export$4f52e6e44ee45af6(path, datum = "datum") {
    return `${datum}[${(0, $2bi3s.stringValue)((0, $2bi3s.splitAccessPath)(path).join("."))}]`;
}
function $554e07a49424e6a4$var$escapePathAccess(string) {
    return string.replace(/(\[|\]|\.|'|")/g, "\\$1");
}
function $554e07a49424e6a4$export$e48c90028420537(path) {
    return `${(0, $2bi3s.splitAccessPath)(path).map($554e07a49424e6a4$var$escapePathAccess).join("\\.")}`;
}
function $554e07a49424e6a4$export$b8b3234b4edfc4c2(string, find, replacement) {
    return string.replace(new RegExp(find.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), replacement);
}
function $554e07a49424e6a4$export$b1a0ed05d2842075(path) {
    return `${(0, $2bi3s.splitAccessPath)(path).join(".")}`;
}
function $554e07a49424e6a4$export$ff2cbe6fe9ee22b5(path) {
    if (!path) return 0;
    return (0, $2bi3s.splitAccessPath)(path).length;
}
function $554e07a49424e6a4$export$62b1acf2e63fe0ef(...args) {
    for (const arg of args){
        if (arg !== undefined) return arg;
    }
    return undefined;
}
// variable used to generate id
let $554e07a49424e6a4$var$idCounter = 42;
function $554e07a49424e6a4$export$8b15d37bc3f197d4(prefix) {
    const id = ++$554e07a49424e6a4$var$idCounter;
    return prefix ? String(prefix) + id : id;
}
function $554e07a49424e6a4$export$4fba683129f6ab1e() {
    $554e07a49424e6a4$var$idCounter = 42;
}
function $554e07a49424e6a4$export$cc2b325c25d33924(name) {
    return $554e07a49424e6a4$export$dae4cc87e23bc959(name) ? name : `__${name}`;
}
function $554e07a49424e6a4$export$dae4cc87e23bc959(name) {
    return name.indexOf("__") === 0;
}
function $554e07a49424e6a4$export$e3df76cf4464bc81(angle) {
    if (angle === undefined) return undefined;
    return (angle % 360 + 360) % 360;
}
function $554e07a49424e6a4$export$e90fb89750dba83f(value) {
    if ((0, $2bi3s.isNumber)(value)) return true;
    return !isNaN(value) && !isNaN(parseFloat(value));
}

});
parcelRegister("6ET3w", function(module, exports) {
Array.prototype.flat || Object.defineProperty(Array.prototype, "flat", {
    configurable: !0,
    value: function r() {
        var t = isNaN(arguments[0]) ? 1 : Number(arguments[0]);
        return t ? Array.prototype.reduce.call(this, function(a, e) {
            return Array.isArray(e) ? a.push.apply(a, r.call(e, t - 1)) : a.push(e), a;
        }, []) : Array.prototype.slice.call(this);
    },
    writable: !0
}), Array.prototype.flatMap || Object.defineProperty(Array.prototype, "flatMap", {
    configurable: !0,
    value: function(r) {
        return Array.prototype.map.apply(this, arguments).flat();
    },
    writable: !0
});

});

parcelRegister("7lQ0U", function(module, exports) {

var $bI7tl = parcelRequire("bI7tl");
var $55a2d75fa73ed67e$require$Buffer = $bI7tl.Buffer;
var $55a2d75fa73ed67e$var$clone = function() {
    "use strict";
    function _instanceof(obj, type) {
        return type != null && obj instanceof type;
    }
    var nativeMap;
    try {
        nativeMap = Map;
    } catch (_) {
        // maybe a reference error because no `Map`. Give it a dummy value that no
        // value will ever be an instanceof.
        nativeMap = function() {};
    }
    var nativeSet;
    try {
        nativeSet = Set;
    } catch (_) {
        nativeSet = function() {};
    }
    var nativePromise;
    try {
        nativePromise = Promise;
    } catch (_) {
        nativePromise = function() {};
    }
    /**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/ function clone(parent, circular, depth, prototype, includeNonEnumerable) {
        if (typeof circular === "object") {
            depth = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
        }
        // maintain two arrays for circular references, where corresponding parents
        // and children have the same index
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof $55a2d75fa73ed67e$require$Buffer != "undefined";
        if (typeof circular == "undefined") circular = true;
        if (typeof depth == "undefined") depth = Infinity;
        // recurse this function so we don't reset allParents and allChildren
        function _clone(parent, depth) {
            // cloning null always returns null
            if (parent === null) return null;
            if (depth === 0) return parent;
            var child;
            var proto;
            if (typeof parent != "object") return parent;
            if (_instanceof(parent, nativeMap)) child = new nativeMap();
            else if (_instanceof(parent, nativeSet)) child = new nativeSet();
            else if (_instanceof(parent, nativePromise)) child = new nativePromise(function(resolve, reject) {
                parent.then(function(value) {
                    resolve(_clone(value, depth - 1));
                }, function(err) {
                    reject(_clone(err, depth - 1));
                });
            });
            else if (clone.__isArray(parent)) child = [];
            else if (clone.__isRegExp(parent)) {
                child = new RegExp(parent.source, __getRegExpFlags(parent));
                if (parent.lastIndex) child.lastIndex = parent.lastIndex;
            } else if (clone.__isDate(parent)) child = new Date(parent.getTime());
            else if (useBuffer && $55a2d75fa73ed67e$require$Buffer.isBuffer(parent)) {
                if ($55a2d75fa73ed67e$require$Buffer.allocUnsafe) // Node.js >= 4.5.0
                child = $55a2d75fa73ed67e$require$Buffer.allocUnsafe(parent.length);
                else // Older Node.js versions
                child = new $55a2d75fa73ed67e$require$Buffer(parent.length);
                parent.copy(child);
                return child;
            } else if (_instanceof(parent, Error)) child = Object.create(parent);
            else if (typeof prototype == "undefined") {
                proto = Object.getPrototypeOf(parent);
                child = Object.create(proto);
            } else {
                child = Object.create(prototype);
                proto = prototype;
            }
            if (circular) {
                var index = allParents.indexOf(parent);
                if (index != -1) return allChildren[index];
                allParents.push(parent);
                allChildren.push(child);
            }
            if (_instanceof(parent, nativeMap)) parent.forEach(function(value, key) {
                var keyChild = _clone(key, depth - 1);
                var valueChild = _clone(value, depth - 1);
                child.set(keyChild, valueChild);
            });
            if (_instanceof(parent, nativeSet)) parent.forEach(function(value) {
                var entryChild = _clone(value, depth - 1);
                child.add(entryChild);
            });
            for(var i in parent){
                var attrs;
                if (proto) attrs = Object.getOwnPropertyDescriptor(proto, i);
                if (attrs && attrs.set == null) continue;
                child[i] = _clone(parent[i], depth - 1);
            }
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(parent);
                for(var i = 0; i < symbols.length; i++){
                    // Don't need to worry about cloning a symbol because it is a primitive,
                    // like a number or string.
                    var symbol = symbols[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) continue;
                    child[symbol] = _clone(parent[symbol], depth - 1);
                    if (!descriptor.enumerable) Object.defineProperty(child, symbol, {
                        enumerable: false
                    });
                }
            }
            if (includeNonEnumerable) {
                var allPropertyNames = Object.getOwnPropertyNames(parent);
                for(var i = 0; i < allPropertyNames.length; i++){
                    var propertyName = allPropertyNames[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
                    if (descriptor && descriptor.enumerable) continue;
                    child[propertyName] = _clone(parent[propertyName], depth - 1);
                    Object.defineProperty(child, propertyName, {
                        enumerable: false
                    });
                }
            }
            return child;
        }
        return _clone(parent, depth);
    }
    /**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */ clone.clonePrototype = function clonePrototype(parent) {
        if (parent === null) return null;
        var c = function() {};
        c.prototype = parent;
        return new c();
    };
    // private utility functions
    function __objToStr(o) {
        return Object.prototype.toString.call(o);
    }
    clone.__objToStr = __objToStr;
    function __isDate(o) {
        return typeof o === "object" && __objToStr(o) === "[object Date]";
    }
    clone.__isDate = __isDate;
    function __isArray(o) {
        return typeof o === "object" && __objToStr(o) === "[object Array]";
    }
    clone.__isArray = __isArray;
    function __isRegExp(o) {
        return typeof o === "object" && __objToStr(o) === "[object RegExp]";
    }
    clone.__isRegExp = __isRegExp;
    function __getRegExpFlags(re) {
        var flags = "";
        if (re.global) flags += "g";
        if (re.ignoreCase) flags += "i";
        if (re.multiline) flags += "m";
        return flags;
    }
    clone.__getRegExpFlags = __getRegExpFlags;
    return clone;
}();
if (0, module.exports) module.exports = $55a2d75fa73ed67e$var$clone;

});

parcelRegister("2cv1H", function(module, exports) {
"use strict";
// do not edit .js files directly - edit src/index.jst
module.exports = function equal(a, b) {
    if (a === b) return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for(i = length; i-- !== 0;){
            var key = keys[i];
            if (!equal(a[key], b[key])) return false;
        }
        return true;
    }
    // true if both NaN, false otherwise
    return a !== a && b !== b;
};

});

parcelRegister("8d45l", function(module, exports) {
"use strict";
module.exports = function(data, opts) {
    if (!opts) opts = {};
    if (typeof opts === "function") opts = {
        cmp: opts
    };
    var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
    var cmp = opts.cmp && function(f) {
        return function(node) {
            return function(a, b) {
                var aobj = {
                    key: a,
                    value: node[a]
                };
                var bobj = {
                    key: b,
                    value: node[b]
                };
                return f(aobj, bobj);
            };
        };
    }(opts.cmp);
    var seen = [];
    return function stringify(node) {
        if (node && node.toJSON && typeof node.toJSON === "function") node = node.toJSON();
        if (node === undefined) return;
        if (typeof node == "number") return isFinite(node) ? "" + node : "null";
        if (typeof node !== "object") return JSON.stringify(node);
        var i, out;
        if (Array.isArray(node)) {
            out = "[";
            for(i = 0; i < node.length; i++){
                if (i) out += ",";
                out += stringify(node[i]) || "null";
            }
            return out + "]";
        }
        if (node === null) return "null";
        if (seen.indexOf(node) !== -1) {
            if (cycles) return JSON.stringify("__cycle__");
            throw new TypeError("Converting circular structure to JSON");
        }
        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = "";
        for(i = 0; i < keys.length; i++){
            var key = keys[i];
            var value = stringify(node[key]);
            if (!value) continue;
            if (out) out += ",";
            out += JSON.stringify(key) + ":" + value;
        }
        seen.splice(seenIndex, 1);
        return "{" + out + "}";
    }(data);
};

});

parcelRegister("bJN6D", function(module, exports) {

$parcel$export(module.exports, "isLogicalOr", () => $88b9fd1dcfef6704$export$7daa7d92ff037cac);
$parcel$export(module.exports, "isLogicalAnd", () => $88b9fd1dcfef6704$export$23bdd2b95d9b1251);
$parcel$export(module.exports, "isLogicalNot", () => $88b9fd1dcfef6704$export$9bba228b6971e7e1);
$parcel$export(module.exports, "forEachLeaf", () => $88b9fd1dcfef6704$export$afc149d7eff25c5d);
$parcel$export(module.exports, "normalizeLogicalComposition", () => $88b9fd1dcfef6704$export$b89bb304716ddcce);
function $88b9fd1dcfef6704$export$7daa7d92ff037cac(op) {
    return !!op.or;
}
function $88b9fd1dcfef6704$export$23bdd2b95d9b1251(op) {
    return !!op.and;
}
function $88b9fd1dcfef6704$export$9bba228b6971e7e1(op) {
    return !!op.not;
}
function $88b9fd1dcfef6704$export$afc149d7eff25c5d(op, fn) {
    if ($88b9fd1dcfef6704$export$9bba228b6971e7e1(op)) $88b9fd1dcfef6704$export$afc149d7eff25c5d(op.not, fn);
    else if ($88b9fd1dcfef6704$export$23bdd2b95d9b1251(op)) for (const subop of op.and)$88b9fd1dcfef6704$export$afc149d7eff25c5d(subop, fn);
    else if ($88b9fd1dcfef6704$export$7daa7d92ff037cac(op)) for (const subop of op.or)$88b9fd1dcfef6704$export$afc149d7eff25c5d(subop, fn);
    else fn(op);
}
function $88b9fd1dcfef6704$export$b89bb304716ddcce(op, normalizer) {
    if ($88b9fd1dcfef6704$export$9bba228b6971e7e1(op)) return {
        not: $88b9fd1dcfef6704$export$b89bb304716ddcce(op.not, normalizer)
    };
    else if ($88b9fd1dcfef6704$export$23bdd2b95d9b1251(op)) return {
        and: op.and.map((o)=>$88b9fd1dcfef6704$export$b89bb304716ddcce(o, normalizer))
    };
    else if ($88b9fd1dcfef6704$export$7daa7d92ff037cac(op)) return {
        or: op.or.map((o)=>$88b9fd1dcfef6704$export$b89bb304716ddcce(o, normalizer))
    };
    else return normalizer(op);
}

});



parcelRegister("9ulW1", function(module, exports) {

$parcel$export(module.exports, "signalOrValueRefWithCondition", () => $6e87ee35ee18862a$export$3fcc72fd59ab4960);
$parcel$export(module.exports, "signalRefOrValue", () => $6e87ee35ee18862a$export$b87362cbc995e0b6);
$parcel$export(module.exports, "signalOrValueRef", () => $6e87ee35ee18862a$export$11988fc6ccc80171);
$parcel$export(module.exports, "exprFromValueOrSignalRef", () => $6e87ee35ee18862a$export$b89adbaeba3a0223);
$parcel$export(module.exports, "signalOrStringValue", () => $6e87ee35ee18862a$export$d23e53c02fec6a13);
$parcel$export(module.exports, "applyMarkConfig", () => $6e87ee35ee18862a$export$79c379d1146c68d2);
$parcel$export(module.exports, "getMarkConfig", () => $6e87ee35ee18862a$export$4dd1c725cdef9c46);
$parcel$export(module.exports, "getStyles", () => $6e87ee35ee18862a$export$ffd58b7f6f099a57);
$parcel$export(module.exports, "getMarkPropOrConfig", () => $6e87ee35ee18862a$export$75cd85f09f65c42c);
$parcel$export(module.exports, "getMarkStyleConfig", () => $6e87ee35ee18862a$export$1f28a9166f3147ef);
$parcel$export(module.exports, "getStyleConfig", () => $6e87ee35ee18862a$export$de4db7228865a2d7);
$parcel$export(module.exports, "sortParams", () => $6e87ee35ee18862a$export$43e8c1cad285848b);
$parcel$export(module.exports, "mergeTitleFieldDefs", () => $6e87ee35ee18862a$export$7ce80dd517166947);
$parcel$export(module.exports, "mergeTitle", () => $6e87ee35ee18862a$export$2f5b06f12def1732);
$parcel$export(module.exports, "mergeTitleComponent", () => $6e87ee35ee18862a$export$8efec87c8e6612d0);

var $2bi3s = parcelRequire("2bi3s");

var $2hAmp = parcelRequire("2hAmp");

var $5C8w7 = parcelRequire("5C8w7");

var $ahFi3 = parcelRequire("ahFi3");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");
var $6e87ee35ee18862a$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $6e87ee35ee18862a$export$f2f47f2815d8e8b = " \u2013 ";
function $6e87ee35ee18862a$export$3fcc72fd59ab4960(val) {
    const condition = (0, $2bi3s.isArray)(val.condition) ? val.condition.map($6e87ee35ee18862a$export$a2a5c71efa808c20) : $6e87ee35ee18862a$export$a2a5c71efa808c20(val.condition);
    return Object.assign(Object.assign({}, $6e87ee35ee18862a$export$b87362cbc995e0b6(val)), {
        condition: condition
    });
}
function $6e87ee35ee18862a$export$b87362cbc995e0b6(value) {
    if ((0, $5C8w7.isExprRef)(value)) {
        const { expr: expr } = value, rest = $6e87ee35ee18862a$var$__rest(value, [
            "expr"
        ]);
        return Object.assign({
            signal: expr
        }, rest);
    }
    return value;
}
function $6e87ee35ee18862a$export$a2a5c71efa808c20(value) {
    if ((0, $5C8w7.isExprRef)(value)) {
        const { expr: expr } = value, rest = $6e87ee35ee18862a$var$__rest(value, [
            "expr"
        ]);
        return Object.assign({
            signal: expr
        }, rest);
    }
    return value;
}
function $6e87ee35ee18862a$export$11988fc6ccc80171(value) {
    if ((0, $5C8w7.isExprRef)(value)) {
        const { expr: expr } = value, rest = $6e87ee35ee18862a$var$__rest(value, [
            "expr"
        ]);
        return Object.assign({
            signal: expr
        }, rest);
    }
    if ((0, $4xdf1.isSignalRef)(value)) return value;
    return value !== undefined ? {
        value: value
    } : undefined;
}
function $6e87ee35ee18862a$export$b89adbaeba3a0223(ref) {
    if ((0, $4xdf1.isSignalRef)(ref)) return ref.signal;
    return (0, $2bi3s.stringValue)(ref.value);
}
function $6e87ee35ee18862a$export$d23e53c02fec6a13(v) {
    if ((0, $4xdf1.isSignalRef)(v)) return v.signal;
    return v == null ? null : (0, $2bi3s.stringValue)(v);
}
function $6e87ee35ee18862a$export$79c379d1146c68d2(e, model, propsList) {
    for (const property of propsList){
        const value = $6e87ee35ee18862a$export$4dd1c725cdef9c46(property, model.markDef, model.config);
        if (value !== undefined) e[property] = $6e87ee35ee18862a$export$11988fc6ccc80171(value);
    }
    return e;
}
function $6e87ee35ee18862a$export$ffd58b7f6f099a57(mark) {
    var _a;
    return [].concat(mark.type, (_a = mark.style) !== null && _a !== void 0 ? _a : []);
}
function $6e87ee35ee18862a$export$75cd85f09f65c42c(channel, mark, config, opt = {}) {
    const { vgChannel: vgChannel, ignoreVgConfig: ignoreVgConfig } = opt;
    if (vgChannel && mark[vgChannel] !== undefined) return mark[vgChannel];
    else if (mark[channel] !== undefined) return mark[channel];
    else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) return undefined;
    return $6e87ee35ee18862a$export$4dd1c725cdef9c46(channel, mark, config, opt);
}
function $6e87ee35ee18862a$export$4dd1c725cdef9c46(channel, mark, config, { vgChannel: vgChannel } = {}) {
    return (0, $7k4G6.getFirstDefined)(// style config has highest precedence
    vgChannel ? $6e87ee35ee18862a$export$1f28a9166f3147ef(channel, mark, config.style) : undefined, $6e87ee35ee18862a$export$1f28a9166f3147ef(channel, mark, config.style), // then mark-specific config
    vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], // If there is vgChannel, skip vl channel.
    // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.
    vgChannel ? config.mark[vgChannel] : config.mark[channel] // Need to cast for the same reason as above
    );
}
function $6e87ee35ee18862a$export$1f28a9166f3147ef(prop, mark, styleConfigIndex) {
    return $6e87ee35ee18862a$export$de4db7228865a2d7(prop, $6e87ee35ee18862a$export$ffd58b7f6f099a57(mark), styleConfigIndex);
}
function $6e87ee35ee18862a$export$de4db7228865a2d7(p, styles, styleConfigIndex) {
    styles = (0, $2bi3s.array)(styles);
    let value;
    for (const style of styles){
        const styleConfig = styleConfigIndex[style];
        if (styleConfig && styleConfig[p] !== undefined) value = styleConfig[p];
    }
    return value;
}
function $6e87ee35ee18862a$export$43e8c1cad285848b(orderDef, fieldRefOption) {
    return (0, $2bi3s.array)(orderDef).reduce((s, orderChannelDef)=>{
        var _a;
        s.field.push((0, $2hAmp.vgField)(orderChannelDef, fieldRefOption));
        s.order.push((_a = orderChannelDef.sort) !== null && _a !== void 0 ? _a : "ascending");
        return s;
    }, {
        field: [],
        order: []
    });
}
function $6e87ee35ee18862a$export$7ce80dd517166947(f1, f2) {
    const merged = [
        ...f1
    ];
    f2.forEach((fdToMerge)=>{
        for (const fieldDef1 of merged){
            // If already exists, no need to append to merged array
            if ((0, $7k4G6.deepEqual)(fieldDef1, fdToMerge)) return;
        }
        merged.push(fdToMerge);
    });
    return merged;
}
function $6e87ee35ee18862a$export$2f5b06f12def1732(title1, title2) {
    if ((0, $7k4G6.deepEqual)(title1, title2) || !title2) // if titles are the same or title2 is falsy
    return title1;
    else if (!title1) // if title1 is falsy
    return title2;
    else return [
        ...(0, $2bi3s.array)(title1),
        ...(0, $2bi3s.array)(title2)
    ].join(", ");
}
function $6e87ee35ee18862a$export$8efec87c8e6612d0(v1, v2) {
    const v1Val = v1.value;
    const v2Val = v2.value;
    if (v1Val == null || v2Val === null) return {
        explicit: v1.explicit,
        value: null
    };
    else if (((0, $ahFi3.isText)(v1Val) || (0, $4xdf1.isSignalRef)(v1Val)) && ((0, $ahFi3.isText)(v2Val) || (0, $4xdf1.isSignalRef)(v2Val))) return {
        explicit: v1.explicit,
        value: $6e87ee35ee18862a$export$2f5b06f12def1732(v1Val, v2Val)
    };
    else if ((0, $ahFi3.isText)(v1Val) || (0, $4xdf1.isSignalRef)(v1Val)) return {
        explicit: v1.explicit,
        value: v1Val
    };
    else if ((0, $ahFi3.isText)(v2Val) || (0, $4xdf1.isSignalRef)(v2Val)) return {
        explicit: v1.explicit,
        value: v2Val
    };
    else if (!(0, $ahFi3.isText)(v1Val) && !(0, $4xdf1.isSignalRef)(v1Val) && !(0, $ahFi3.isText)(v2Val) && !(0, $4xdf1.isSignalRef)(v2Val)) return {
        explicit: v1.explicit,
        value: $6e87ee35ee18862a$export$7ce80dd517166947(v1Val, v2Val)
    };
    /* istanbul ignore next: Condition should not happen -- only for warning in development. */ throw new Error("It should never reach here");
}

});
parcelRegister("2hAmp", function(module, exports) {

$parcel$export(module.exports, "isConditionalSelection", () => $1a995fb4407d83d6$export$ea402117a5ee3b5a);
$parcel$export(module.exports, "isRepeatRef", () => $1a995fb4407d83d6$export$102b9826242873e8);
$parcel$export(module.exports, "toFieldDefBase", () => $1a995fb4407d83d6$export$c1eb562b1bd510c4);
$parcel$export(module.exports, "isSortableFieldDef", () => $1a995fb4407d83d6$export$5b4addc0c1dec364);
$parcel$export(module.exports, "getBand", () => $1a995fb4407d83d6$export$f3f16cc4baf298b9);
$parcel$export(module.exports, "isFieldOrDatumDef", () => $1a995fb4407d83d6$export$d0a51f9a549c6494);
$parcel$export(module.exports, "isFieldDef", () => $1a995fb4407d83d6$export$30d766f04de993d6);
$parcel$export(module.exports, "hasBand", () => $1a995fb4407d83d6$export$cf24a7de8408a5b8);
$parcel$export(module.exports, "isTypedFieldDef", () => $1a995fb4407d83d6$export$ba0d9356bd7ef71d);
$parcel$export(module.exports, "isConditionalDef", () => $1a995fb4407d83d6$export$8d4c4c9a27904da0);
$parcel$export(module.exports, "hasConditionalFieldDef", () => $1a995fb4407d83d6$export$60672716468123bd);
$parcel$export(module.exports, "hasConditionalFieldOrDatumDef", () => $1a995fb4407d83d6$export$35e2be3651217cfc);
$parcel$export(module.exports, "hasConditionalValueDef", () => $1a995fb4407d83d6$export$287cb1a1451878a8);
$parcel$export(module.exports, "isValueDef", () => $1a995fb4407d83d6$export$78c069c86d81613d);
$parcel$export(module.exports, "channelDefType", () => $1a995fb4407d83d6$export$4fb9850c42580011);
$parcel$export(module.exports, "isDatumDef", () => $1a995fb4407d83d6$export$74aac43082d8f304);
$parcel$export(module.exports, "isContinuousFieldOrDatumDef", () => $1a995fb4407d83d6$export$775c570caa4eb0e1);
$parcel$export(module.exports, "isNumericDataDef", () => $1a995fb4407d83d6$export$df9f699c17cd46a4);
$parcel$export(module.exports, "isScaleFieldDef", () => $1a995fb4407d83d6$export$b644b8dbcb1d8e2f);
$parcel$export(module.exports, "isPositionFieldOrDatumDef", () => $1a995fb4407d83d6$export$cc5ef675881b4d41);
$parcel$export(module.exports, "toStringFieldDef", () => $1a995fb4407d83d6$export$f173191093616da8);
$parcel$export(module.exports, "vgField", () => $1a995fb4407d83d6$export$46dab832e8a989a0);
$parcel$export(module.exports, "isDiscrete", () => $1a995fb4407d83d6$export$8725cd2ead9e13f9);
$parcel$export(module.exports, "setTitleFormatter", () => $1a995fb4407d83d6$export$ab21482a8ed1db95);
$parcel$export(module.exports, "resetTitleFormatter", () => $1a995fb4407d83d6$export$924cfb0ccf6de438);
$parcel$export(module.exports, "title", () => $1a995fb4407d83d6$export$fb184b623420d9be);
$parcel$export(module.exports, "getGuide", () => $1a995fb4407d83d6$export$f78b47ac13035ac1);
$parcel$export(module.exports, "defaultTitle", () => $1a995fb4407d83d6$export$4581aa2548f408c);
$parcel$export(module.exports, "getFormatMixins", () => $1a995fb4407d83d6$export$696703e3b1321a12);
$parcel$export(module.exports, "getFieldDef", () => $1a995fb4407d83d6$export$dab6dcab745bb1b6);
$parcel$export(module.exports, "getFieldOrDatumDef", () => $1a995fb4407d83d6$export$a4117650df697419);
$parcel$export(module.exports, "initChannelDef", () => $1a995fb4407d83d6$export$9347af3d0f58037c);
$parcel$export(module.exports, "initFieldDef", () => $1a995fb4407d83d6$export$6f1bec9d726877dc);
$parcel$export(module.exports, "normalizeBin", () => $1a995fb4407d83d6$export$ed3642a1c31dbbc0);
$parcel$export(module.exports, "isFieldOrDatumDefForTimeFormat", () => $1a995fb4407d83d6$export$da86b4a538d55b9e);
$parcel$export(module.exports, "valueExpr", () => $1a995fb4407d83d6$export$e11da76cc534972);
$parcel$export(module.exports, "valueArray", () => $1a995fb4407d83d6$export$f003bc8843ece81);
$parcel$export(module.exports, "binRequiresRange", () => $1a995fb4407d83d6$export$71982631770d854b);

var $2bi3s = parcelRequire("2bi3s");

var $7sjJm = parcelRequire("7sjJm");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $9ulW1 = parcelRequire("9ulW1");

var $7oTmT = parcelRequire("7oTmT");

var $8PxNP = parcelRequire("8PxNP");

var $5C8w7 = parcelRequire("5C8w7");
parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");
var $3XBQv = parcelRequire("3XBQv");

var $9mRLv = parcelRequire("9mRLv");

var $9rekY = parcelRequire("9rekY");

var $Xb2We = parcelRequire("Xb2We");

var $1mvM3 = parcelRequire("1mvM3");

var $aMeqD = parcelRequire("aMeqD");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");
var $1a995fb4407d83d6$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $1a995fb4407d83d6$export$ea402117a5ee3b5a(c) {
    return c["selection"];
}
function $1a995fb4407d83d6$export$102b9826242873e8(field) {
    return field && !(0, $2bi3s.isString)(field) && "repeat" in field;
}
function $1a995fb4407d83d6$export$c1eb562b1bd510c4(fieldDef) {
    const { field: field, timeUnit: timeUnit, bin: bin, aggregate: aggregate } = fieldDef;
    return Object.assign(Object.assign(Object.assign(Object.assign({}, timeUnit ? {
        timeUnit: timeUnit
    } : {}), bin ? {
        bin: bin
    } : {}), aggregate ? {
        aggregate: aggregate
    } : {}), {
        field: field
    });
}
function $1a995fb4407d83d6$export$5b4addc0c1dec364(fieldDef) {
    return "sort" in fieldDef;
}
function $1a995fb4407d83d6$export$f3f16cc4baf298b9({ channel: channel, fieldDef: fieldDef, fieldDef2: fieldDef2, markDef: mark, stack: stack, config: config, isMidPoint: isMidPoint }) {
    if ($1a995fb4407d83d6$export$d0a51f9a549c6494(fieldDef) && fieldDef.band !== undefined) return fieldDef.band;
    if ($1a995fb4407d83d6$export$30d766f04de993d6(fieldDef)) {
        const { timeUnit: timeUnit, bin: bin } = fieldDef;
        if (timeUnit && !fieldDef2) {
            if (isMidPoint) return (0, $9ulW1.getMarkConfig)("timeUnitBandPosition", mark, config);
            else return (0, $9mRLv.isRectBasedMark)(mark.type) ? (0, $9ulW1.getMarkConfig)("timeUnitBand", mark, config) : 0;
        } else if ((0, $iR8lA.isBinning)(bin)) return (0, $9mRLv.isRectBasedMark)(mark.type) && !isMidPoint ? 1 : 0.5;
    }
    if ((stack === null || stack === void 0 ? void 0 : stack.fieldChannel) === channel && isMidPoint) return 0.5;
    return undefined;
}
function $1a995fb4407d83d6$export$cf24a7de8408a5b8(channel, fieldDef, fieldDef2, stack, markDef, config) {
    if ((0, $iR8lA.isBinning)(fieldDef.bin) || fieldDef.timeUnit && $1a995fb4407d83d6$export$ba0d9356bd7ef71d(fieldDef) && fieldDef.type === "temporal") return !!$1a995fb4407d83d6$export$f3f16cc4baf298b9({
        channel: channel,
        fieldDef: fieldDef,
        fieldDef2: fieldDef2,
        stack: stack,
        markDef: markDef,
        config: config
    });
    return false;
}
function $1a995fb4407d83d6$export$8d4c4c9a27904da0(channelDef) {
    return !!channelDef && "condition" in channelDef;
}
function $1a995fb4407d83d6$export$60672716468123bd(channelDef) {
    const condition = channelDef && channelDef["condition"];
    return !!condition && !(0, $2bi3s.isArray)(condition) && $1a995fb4407d83d6$export$30d766f04de993d6(condition);
}
function $1a995fb4407d83d6$export$35e2be3651217cfc(channelDef) {
    const condition = channelDef && channelDef["condition"];
    return !!condition && !(0, $2bi3s.isArray)(condition) && $1a995fb4407d83d6$export$d0a51f9a549c6494(condition);
}
function $1a995fb4407d83d6$export$287cb1a1451878a8(channelDef) {
    const condition = channelDef && channelDef["condition"];
    return !!condition && ((0, $2bi3s.isArray)(condition) || $1a995fb4407d83d6$export$78c069c86d81613d(condition));
}
function $1a995fb4407d83d6$export$30d766f04de993d6(channelDef) {
    // TODO: we can't use field in channelDef here as it's somehow failing runtime test
    return !!channelDef && (!!channelDef["field"] || channelDef["aggregate"] === "count");
}
function $1a995fb4407d83d6$export$4fb9850c42580011(channelDef) {
    return channelDef && channelDef["type"];
}
function $1a995fb4407d83d6$export$74aac43082d8f304(channelDef) {
    return !!channelDef && "datum" in channelDef;
}
function $1a995fb4407d83d6$export$775c570caa4eb0e1(cd) {
    // TODO: make datum support DateTime object
    return $1a995fb4407d83d6$export$ba0d9356bd7ef71d(cd) && $1a995fb4407d83d6$export$cb77cf646c77209a(cd) || $1a995fb4407d83d6$export$df9f699c17cd46a4(cd);
}
function $1a995fb4407d83d6$export$2ee84f89affde334(cd) {
    // TODO: make datum support DateTime object
    return $1a995fb4407d83d6$export$4fb9850c42580011(cd) === "quantitative" || $1a995fb4407d83d6$export$df9f699c17cd46a4(cd);
}
function $1a995fb4407d83d6$export$df9f699c17cd46a4(cd) {
    return $1a995fb4407d83d6$export$74aac43082d8f304(cd) && (0, $2bi3s.isNumber)(cd.datum);
}
function $1a995fb4407d83d6$export$d0a51f9a549c6494(channelDef) {
    return $1a995fb4407d83d6$export$30d766f04de993d6(channelDef) || $1a995fb4407d83d6$export$74aac43082d8f304(channelDef);
}
function $1a995fb4407d83d6$export$ba0d9356bd7ef71d(channelDef) {
    return !!channelDef && ("field" in channelDef || channelDef["aggregate"] === "count") && "type" in channelDef;
}
function $1a995fb4407d83d6$export$78c069c86d81613d(channelDef) {
    return channelDef && "value" in channelDef && "value" in channelDef;
}
function $1a995fb4407d83d6$export$b644b8dbcb1d8e2f(channelDef) {
    return !!channelDef && ("scale" in channelDef || "sort" in channelDef);
}
function $1a995fb4407d83d6$export$cc5ef675881b4d41(channelDef) {
    return channelDef && ("axis" in channelDef || "stack" in channelDef || "impute" in channelDef);
}
function $1a995fb4407d83d6$export$6d76b54c55f3517a(channelDef) {
    return !!channelDef && "legend" in channelDef;
}
function $1a995fb4407d83d6$export$c284e499a9b77176(channelDef) {
    return !!channelDef && ("format" in channelDef || "formatType" in channelDef);
}
function $1a995fb4407d83d6$export$f173191093616da8(fieldDef) {
    // omit properties that don't exist in string field defs
    return (0, $7k4G6.omit)(fieldDef, [
        "legend",
        "axis",
        "header",
        "scale"
    ]);
}
function $1a995fb4407d83d6$var$isOpFieldDef(fieldDef) {
    return "op" in fieldDef;
}
function $1a995fb4407d83d6$export$46dab832e8a989a0(fieldDef, opt = {}) {
    var _a, _b, _c;
    let field = fieldDef.field;
    const prefix = opt.prefix;
    let suffix = opt.suffix;
    let argAccessor = ""; // for accessing argmin/argmax field at the end without getting escaped
    if ($1a995fb4407d83d6$export$1d3e8a8fa5a367e6(fieldDef)) field = (0, $7k4G6.internalField)("count");
    else {
        let fn;
        if (!opt.nofn) {
            if ($1a995fb4407d83d6$var$isOpFieldDef(fieldDef)) fn = fieldDef.op;
            else {
                const { bin: bin, aggregate: aggregate, timeUnit: timeUnit } = fieldDef;
                if ((0, $iR8lA.isBinning)(bin)) {
                    fn = (0, $iR8lA.binToString)(bin);
                    suffix = ((_a = opt.binSuffix) !== null && _a !== void 0 ? _a : "") + ((_b = opt.suffix) !== null && _b !== void 0 ? _b : "");
                } else if (aggregate) {
                    if ((0, $7sjJm.isArgmaxDef)(aggregate)) {
                        argAccessor = `["${field}"]`;
                        field = `argmax_${aggregate.argmax}`;
                    } else if ((0, $7sjJm.isArgminDef)(aggregate)) {
                        argAccessor = `["${field}"]`;
                        field = `argmin_${aggregate.argmin}`;
                    } else fn = String(aggregate);
                } else if (timeUnit) {
                    fn = (0, $aMeqD.timeUnitToString)(timeUnit);
                    suffix = (!(0, $7k4G6.contains)([
                        "range",
                        "mid"
                    ], opt.binSuffix) && opt.binSuffix || "") + ((_c = opt.suffix) !== null && _c !== void 0 ? _c : "");
                }
            }
        }
        if (fn) field = field ? `${fn}_${field}` : fn;
    }
    if (suffix) field = `${field}_${suffix}`;
    if (prefix) field = `${prefix}_${field}`;
    if (opt.forAs) return (0, $7k4G6.removePathFromField)(field);
    else if (opt.expr) // Expression to access flattened field. No need to escape dots.
    return (0, $7k4G6.flatAccessWithDatum)(field, opt.expr) + argAccessor;
    else // We flattened all fields so paths should have become dot.
    return (0, $7k4G6.replacePathInField)(field) + argAccessor;
}
function $1a995fb4407d83d6$export$8725cd2ead9e13f9(def) {
    switch(def.type){
        case "nominal":
        case "ordinal":
        case "geojson":
            return true;
        case "quantitative":
            return $1a995fb4407d83d6$export$30d766f04de993d6(def) && !!def.bin;
        case "temporal":
            return false;
    }
    throw new Error($bHNid.invalidFieldType(def.type));
}
function $1a995fb4407d83d6$export$cb77cf646c77209a(fieldDef) {
    return !$1a995fb4407d83d6$export$8725cd2ead9e13f9(fieldDef);
}
function $1a995fb4407d83d6$export$1d3e8a8fa5a367e6(fieldDef) {
    return fieldDef.aggregate === "count";
}
function $1a995fb4407d83d6$export$e36f140922d860bc(fieldDef, config) {
    var _a;
    const { field: field, bin: bin, timeUnit: timeUnit, aggregate: aggregate } = fieldDef;
    if (aggregate === "count") return config.countTitle;
    else if ((0, $iR8lA.isBinning)(bin)) return `${field} (binned)`;
    else if (timeUnit) {
        const unit = (_a = (0, $aMeqD.normalizeTimeUnit)(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
        if (unit) return `${field} (${(0, $aMeqD.getTimeUnitParts)(unit).join("-")})`;
    } else if (aggregate) {
        if ((0, $7sjJm.isArgmaxDef)(aggregate)) return `${field} for max ${aggregate.argmax}`;
        else if ((0, $7sjJm.isArgminDef)(aggregate)) return `${field} for min ${aggregate.argmin}`;
        else return `${(0, $7k4G6.titleCase)(aggregate)} of ${field}`;
    }
    return field;
}
function $1a995fb4407d83d6$export$38f39b8648c796a5(fieldDef) {
    const { aggregate: aggregate, bin: bin, timeUnit: timeUnit, field: field } = fieldDef;
    if ((0, $7sjJm.isArgmaxDef)(aggregate)) return `${field} for argmax(${aggregate.argmax})`;
    else if ((0, $7sjJm.isArgminDef)(aggregate)) return `${field} for argmin(${aggregate.argmin})`;
    const timeUnitParams = (0, $aMeqD.normalizeTimeUnit)(timeUnit);
    const fn = aggregate || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.unit) || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.maxbins) && "timeunit" || (0, $iR8lA.isBinning)(bin) && "bin";
    if (fn) return fn.toUpperCase() + "(" + field + ")";
    else return field;
}
const $1a995fb4407d83d6$export$84347ef36cd5651b = (fieldDef, config)=>{
    switch(config.fieldTitle){
        case "plain":
            return fieldDef.field;
        case "functional":
            return $1a995fb4407d83d6$export$38f39b8648c796a5(fieldDef);
        default:
            return $1a995fb4407d83d6$export$e36f140922d860bc(fieldDef, config);
    }
};
let $1a995fb4407d83d6$var$titleFormatter = $1a995fb4407d83d6$export$84347ef36cd5651b;
function $1a995fb4407d83d6$export$ab21482a8ed1db95(formatter) {
    $1a995fb4407d83d6$var$titleFormatter = formatter;
}
function $1a995fb4407d83d6$export$924cfb0ccf6de438() {
    $1a995fb4407d83d6$export$ab21482a8ed1db95($1a995fb4407d83d6$export$84347ef36cd5651b);
}
function $1a995fb4407d83d6$export$fb184b623420d9be(fieldOrDatumDef, config, { allowDisabling: allowDisabling, includeDefault: includeDefault = true }) {
    var _a, _b;
    const guideTitle = (_a = $1a995fb4407d83d6$export$f78b47ac13035ac1(fieldOrDatumDef)) === null || _a === void 0 ? void 0 : _a.title;
    if (!$1a995fb4407d83d6$export$30d766f04de993d6(fieldOrDatumDef)) return guideTitle;
    const fieldDef = fieldOrDatumDef;
    const def = includeDefault ? $1a995fb4407d83d6$export$4581aa2548f408c(fieldDef, config) : undefined;
    if (allowDisabling) return (0, $7k4G6.getFirstDefined)(guideTitle, fieldDef.title, def);
    else return (_b = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title) !== null && _b !== void 0 ? _b : def;
}
function $1a995fb4407d83d6$export$f78b47ac13035ac1(fieldDef) {
    if ($1a995fb4407d83d6$export$cc5ef675881b4d41(fieldDef) && fieldDef.axis) return fieldDef.axis;
    else if ($1a995fb4407d83d6$export$6d76b54c55f3517a(fieldDef) && fieldDef.legend) return fieldDef.legend;
    else if ((0, $1mvM3.isFacetFieldDef)(fieldDef) && fieldDef.header) return fieldDef.header;
    return undefined;
}
function $1a995fb4407d83d6$export$4581aa2548f408c(fieldDef, config) {
    return $1a995fb4407d83d6$var$titleFormatter(fieldDef, config);
}
function $1a995fb4407d83d6$export$696703e3b1321a12(fieldDef) {
    var _a;
    if ($1a995fb4407d83d6$export$c284e499a9b77176(fieldDef)) {
        const { format: format, formatType: formatType } = fieldDef;
        return {
            format: format,
            formatType: formatType
        };
    } else {
        const guide = (_a = $1a995fb4407d83d6$export$f78b47ac13035ac1(fieldDef)) !== null && _a !== void 0 ? _a : {};
        const { format: format, formatType: formatType } = guide;
        return {
            format: format,
            formatType: formatType
        };
    }
}
function $1a995fb4407d83d6$export$64535dc40d6d3d0(fieldDef, channel) {
    var _a;
    switch(channel){
        case "latitude":
        case "longitude":
            return "quantitative";
        case "row":
        case "column":
        case "facet":
        case "shape":
        case "strokeDash":
            return "nominal";
        case "order":
            return "ordinal";
    }
    if ($1a995fb4407d83d6$export$5b4addc0c1dec364(fieldDef) && (0, $2bi3s.isArray)(fieldDef.sort)) return "ordinal";
    const { aggregate: aggregate, bin: bin, timeUnit: timeUnit } = fieldDef;
    if (timeUnit) return "temporal";
    if (bin || aggregate && !(0, $7sjJm.isArgmaxDef)(aggregate) && !(0, $7sjJm.isArgminDef)(aggregate)) return "quantitative";
    if ($1a995fb4407d83d6$export$b644b8dbcb1d8e2f(fieldDef) && ((_a = fieldDef.scale) === null || _a === void 0 ? void 0 : _a.type)) switch((0, $9rekY.SCALE_CATEGORY_INDEX)[fieldDef.scale.type]){
        case "numeric":
        case "discretizing":
            return "quantitative";
        case "time":
            return "temporal";
    }
    return "nominal";
}
function $1a995fb4407d83d6$export$dab6dcab745bb1b6(channelDef) {
    if ($1a995fb4407d83d6$export$30d766f04de993d6(channelDef)) return channelDef;
    else if ($1a995fb4407d83d6$export$60672716468123bd(channelDef)) return channelDef.condition;
    return undefined;
}
function $1a995fb4407d83d6$export$a4117650df697419(channelDef) {
    if ($1a995fb4407d83d6$export$d0a51f9a549c6494(channelDef)) return channelDef;
    else if ($1a995fb4407d83d6$export$35e2be3651217cfc(channelDef)) return channelDef.condition;
    return undefined;
}
function $1a995fb4407d83d6$export$9347af3d0f58037c(channelDef, channel, config, opt = {}) {
    if ((0, $2bi3s.isString)(channelDef) || (0, $2bi3s.isNumber)(channelDef) || (0, $2bi3s.isBoolean)(channelDef)) {
        const primitiveType = (0, $2bi3s.isString)(channelDef) ? "string" : (0, $2bi3s.isNumber)(channelDef) ? "number" : "boolean";
        $3XBQv.warn($bHNid.primitiveChannelDef(channel, primitiveType, channelDef));
        return {
            value: channelDef
        };
    }
    // If a fieldDef contains a field, we need type.
    if ($1a995fb4407d83d6$export$d0a51f9a549c6494(channelDef)) return $1a995fb4407d83d6$export$8f38758e9f6ed67e(channelDef, channel, config, opt);
    else if ($1a995fb4407d83d6$export$35e2be3651217cfc(channelDef)) return Object.assign(Object.assign({}, channelDef), {
        // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
        condition: $1a995fb4407d83d6$export$8f38758e9f6ed67e(channelDef.condition, channel, config, opt)
    });
    return channelDef;
}
function $1a995fb4407d83d6$export$8f38758e9f6ed67e(fd, channel, config, opt) {
    if ($1a995fb4407d83d6$export$c284e499a9b77176(fd)) {
        const { format: format, formatType: formatType } = fd, rest = $1a995fb4407d83d6$var$__rest(fd, [
            "format",
            "formatType"
        ]);
        if ((0, $7oTmT.isCustomFormatType)(formatType) && !config.customFormatTypes) {
            $3XBQv.warn($bHNid.customFormatTypeNotAllowed(channel));
            return $1a995fb4407d83d6$export$8f38758e9f6ed67e(rest, channel, config, opt);
        }
    } else {
        const guideType = $1a995fb4407d83d6$export$cc5ef675881b4d41(fd) ? "axis" : $1a995fb4407d83d6$export$6d76b54c55f3517a(fd) ? "legend" : (0, $1mvM3.isFacetFieldDef)(fd) ? "header" : null;
        if (guideType && fd[guideType]) {
            const _a = fd[guideType], { format: format, formatType: formatType } = _a, newGuide = $1a995fb4407d83d6$var$__rest(_a, [
                "format",
                "formatType"
            ]);
            if ((0, $7oTmT.isCustomFormatType)(formatType) && !config.customFormatTypes) {
                $3XBQv.warn($bHNid.customFormatTypeNotAllowed(channel));
                return $1a995fb4407d83d6$export$8f38758e9f6ed67e(Object.assign(Object.assign({}, fd), {
                    [guideType]: newGuide
                }), channel, config, opt);
            }
        }
    }
    if ($1a995fb4407d83d6$export$30d766f04de993d6(fd)) return $1a995fb4407d83d6$export$6f1bec9d726877dc(fd, channel, opt);
    return $1a995fb4407d83d6$var$initDatumDef(fd);
}
function $1a995fb4407d83d6$var$initDatumDef(datumDef) {
    let type = datumDef["type"];
    if (type) return datumDef;
    const { datum: datum } = datumDef;
    type = (0, $2bi3s.isNumber)(datum) ? "quantitative" : (0, $2bi3s.isString)(datum) ? "nominal" : (0, $8PxNP.isDateTime)(datum) ? "temporal" : undefined;
    return Object.assign(Object.assign({}, datumDef), {
        type: type
    });
}
function $1a995fb4407d83d6$export$6f1bec9d726877dc(fd, channel, { compositeMark: compositeMark = false } = {}) {
    const { aggregate: aggregate, timeUnit: timeUnit, bin: bin, field: field } = fd;
    const fieldDef = Object.assign({}, fd);
    // Drop invalid aggregate
    if (!compositeMark && aggregate && !(0, $7sjJm.isAggregateOp)(aggregate) && !(0, $7sjJm.isArgmaxDef)(aggregate) && !(0, $7sjJm.isArgminDef)(aggregate)) {
        $3XBQv.warn($bHNid.invalidAggregate(aggregate));
        delete fieldDef.aggregate;
    }
    // Normalize Time Unit
    if (timeUnit) fieldDef.timeUnit = (0, $aMeqD.normalizeTimeUnit)(timeUnit);
    if (field) fieldDef.field = `${field}`;
    // Normalize bin
    if ((0, $iR8lA.isBinning)(bin)) fieldDef.bin = $1a995fb4407d83d6$export$ed3642a1c31dbbc0(bin, channel);
    if ((0, $iR8lA.isBinned)(bin) && !(0, $fWfT0.isXorY)(channel)) $3XBQv.warn($bHNid.channelShouldNotBeUsedForBinned(channel));
    // Normalize Type
    if ($1a995fb4407d83d6$export$ba0d9356bd7ef71d(fieldDef)) {
        const { type: type } = fieldDef;
        const fullType = (0, $9LX7L.getFullName)(type);
        if (type !== fullType) // convert short type to full type
        fieldDef.type = fullType;
        if (type !== "quantitative") {
            if ((0, $7sjJm.isCountingAggregateOp)(aggregate)) {
                $3XBQv.warn($bHNid.invalidFieldTypeForCountAggregate(type, aggregate));
                fieldDef.type = "quantitative";
            }
        }
    } else if (!(0, $fWfT0.isSecondaryRangeChannel)(channel)) {
        // If type is empty / invalid, then augment with default type
        const newType = $1a995fb4407d83d6$export$64535dc40d6d3d0(fieldDef, channel);
        fieldDef["type"] = newType;
    }
    if ($1a995fb4407d83d6$export$ba0d9356bd7ef71d(fieldDef)) {
        const { compatible: compatible, warning: warning } = $1a995fb4407d83d6$export$f6bf7f42c4f993b3(fieldDef, channel) || {};
        if (compatible === false) $3XBQv.warn(warning);
    }
    if ($1a995fb4407d83d6$export$5b4addc0c1dec364(fieldDef) && (0, $2bi3s.isString)(fieldDef.sort)) {
        const { sort: sort } = fieldDef;
        if ((0, $Xb2We.isSortByChannel)(sort)) return Object.assign(Object.assign({}, fieldDef), {
            sort: {
                encoding: sort
            }
        });
        const sub = sort.substr(1);
        if (sort.charAt(0) === "-" && (0, $Xb2We.isSortByChannel)(sub)) return Object.assign(Object.assign({}, fieldDef), {
            sort: {
                encoding: sub,
                order: "descending"
            }
        });
    }
    if ((0, $1mvM3.isFacetFieldDef)(fieldDef)) {
        const { header: header } = fieldDef;
        const { orient: orient } = header, rest = $1a995fb4407d83d6$var$__rest(header, [
            "orient"
        ]);
        if (orient) return Object.assign(Object.assign({}, fieldDef), {
            header: Object.assign(Object.assign({}, rest), {
                labelOrient: header.labelOrient || orient,
                titleOrient: header.titleOrient || orient
            })
        });
    }
    return fieldDef;
}
function $1a995fb4407d83d6$export$ed3642a1c31dbbc0(bin, channel) {
    if ((0, $2bi3s.isBoolean)(bin)) return {
        maxbins: (0, $iR8lA.autoMaxBins)(channel)
    };
    else if (bin === "binned") return {
        binned: true
    };
    else if (!bin.maxbins && !bin.step) return Object.assign(Object.assign({}, bin), {
        maxbins: (0, $iR8lA.autoMaxBins)(channel)
    });
    else return bin;
}
const $1a995fb4407d83d6$var$COMPATIBLE = {
    compatible: true
};
function $1a995fb4407d83d6$export$f6bf7f42c4f993b3(fieldDef, channel) {
    const type = fieldDef.type;
    if (type === "geojson" && channel !== "shape") return {
        compatible: false,
        warning: `Channel ${channel} should not be used with a geojson data.`
    };
    switch(channel){
        case 0, $fWfT0.ROW:
        case 0, $fWfT0.COLUMN:
        case 0, $fWfT0.FACET:
            if ($1a995fb4407d83d6$export$cb77cf646c77209a(fieldDef)) return {
                compatible: false,
                warning: $bHNid.facetChannelShouldBeDiscrete(channel)
            };
            return $1a995fb4407d83d6$var$COMPATIBLE;
        case 0, $fWfT0.X:
        case 0, $fWfT0.Y:
        case 0, $fWfT0.COLOR:
        case 0, $fWfT0.FILL:
        case 0, $fWfT0.STROKE:
        case 0, $fWfT0.TEXT:
        case 0, $fWfT0.DETAIL:
        case 0, $fWfT0.KEY:
        case 0, $fWfT0.TOOLTIP:
        case 0, $fWfT0.HREF:
        case 0, $fWfT0.URL:
        case 0, $fWfT0.ANGLE:
        case 0, $fWfT0.THETA:
        case 0, $fWfT0.RADIUS:
        case 0, $fWfT0.DESCRIPTION:
            return $1a995fb4407d83d6$var$COMPATIBLE;
        case 0, $fWfT0.LONGITUDE:
        case 0, $fWfT0.LONGITUDE2:
        case 0, $fWfT0.LATITUDE:
        case 0, $fWfT0.LATITUDE2:
            if (type !== (0, $9LX7L.QUANTITATIVE)) return {
                compatible: false,
                warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`
            };
            return $1a995fb4407d83d6$var$COMPATIBLE;
        case 0, $fWfT0.OPACITY:
        case 0, $fWfT0.FILLOPACITY:
        case 0, $fWfT0.STROKEOPACITY:
        case 0, $fWfT0.STROKEWIDTH:
        case 0, $fWfT0.SIZE:
        case 0, $fWfT0.THETA2:
        case 0, $fWfT0.RADIUS2:
        case 0, $fWfT0.X2:
        case 0, $fWfT0.Y2:
            if (type === "nominal" && !fieldDef["sort"]) return {
                compatible: false,
                warning: `Channel ${channel} should not be used with an unsorted discrete field.`
            };
            return $1a995fb4407d83d6$var$COMPATIBLE;
        case 0, $fWfT0.STROKEDASH:
            if (!(0, $7k4G6.contains)([
                "ordinal",
                "nominal"
            ], fieldDef.type)) return {
                compatible: false,
                warning: "StrokeDash channel should be used with only discrete data."
            };
            return $1a995fb4407d83d6$var$COMPATIBLE;
        case 0, $fWfT0.SHAPE:
            if (!(0, $7k4G6.contains)([
                "ordinal",
                "nominal",
                "geojson"
            ], fieldDef.type)) return {
                compatible: false,
                warning: "Shape channel should be used with only either discrete or geojson data."
            };
            return $1a995fb4407d83d6$var$COMPATIBLE;
        case 0, $fWfT0.ORDER:
            if (fieldDef.type === "nominal" && !("sort" in fieldDef)) return {
                compatible: false,
                warning: `Channel order is inappropriate for nominal field, which has no inherent order.`
            };
            return $1a995fb4407d83d6$var$COMPATIBLE;
    }
}
function $1a995fb4407d83d6$export$da86b4a538d55b9e(fieldOrDatumDef) {
    const { formatType: formatType } = $1a995fb4407d83d6$export$696703e3b1321a12(fieldOrDatumDef);
    return formatType === "time" || !formatType && $1a995fb4407d83d6$export$c45a977fb0184442(fieldOrDatumDef);
}
function $1a995fb4407d83d6$export$c45a977fb0184442(def) {
    return def && (def["type"] === "temporal" || $1a995fb4407d83d6$export$30d766f04de993d6(def) && !!def.timeUnit);
}
function $1a995fb4407d83d6$export$e11da76cc534972(v, { timeUnit: timeUnit, type: type, wrapTime: wrapTime, undefinedIfExprNotRequired: undefinedIfExprNotRequired }) {
    var _a;
    const unit = timeUnit && ((_a = (0, $aMeqD.normalizeTimeUnit)(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit);
    let isTime = unit || type === "temporal";
    let expr;
    if ((0, $5C8w7.isExprRef)(v)) expr = v.expr;
    else if ((0, $4xdf1.isSignalRef)(v)) expr = v.signal;
    else if ((0, $8PxNP.isDateTime)(v)) {
        isTime = true;
        expr = (0, $8PxNP.dateTimeToExpr)(v);
    } else if ((0, $2bi3s.isString)(v) || (0, $2bi3s.isNumber)(v)) {
        if (isTime) {
            expr = `datetime(${JSON.stringify(v)})`;
            if ((0, $aMeqD.isLocalSingleTimeUnit)(unit)) // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit
            {
                if ((0, $2bi3s.isNumber)(v) && v < 10000 || (0, $2bi3s.isString)(v) && isNaN(Date.parse(v))) expr = (0, $8PxNP.dateTimeToExpr)({
                    [unit]: v
                });
            }
        }
    }
    if (expr) return wrapTime && isTime ? `time(${expr})` : expr;
    // number or boolean or normal string
    return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);
}
function $1a995fb4407d83d6$export$f003bc8843ece81(fieldOrDatumDef, values) {
    const { type: type } = fieldOrDatumDef;
    return values.map((v)=>{
        const expr = $1a995fb4407d83d6$export$e11da76cc534972(v, {
            timeUnit: $1a995fb4407d83d6$export$30d766f04de993d6(fieldOrDatumDef) ? fieldOrDatumDef.timeUnit : undefined,
            type: type,
            undefinedIfExprNotRequired: true
        });
        // return signal for the expression if we need an expression
        if (expr !== undefined) return {
            signal: expr
        };
        // otherwise just return the original value
        return v;
    });
}
function $1a995fb4407d83d6$export$71982631770d854b(fieldDef, channel) {
    if (!(0, $iR8lA.isBinning)(fieldDef.bin)) {
        console.warn("Only call this method for binned field defs.");
        return false;
    }
    // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.
    // We could check whether the axis or legend exists (not disabled) but that seems overkill.
    return (0, $fWfT0.isScaleChannel)(channel) && (0, $7k4G6.contains)([
        "ordinal",
        "nominal"
    ], fieldDef.type);
}

});
parcelRegister("7sjJm", function(module, exports) {

$parcel$export(module.exports, "MULTIDOMAIN_SORT_OP_INDEX", () => $56da74025176c80d$export$25b4b133e7adedd6);
$parcel$export(module.exports, "isArgminDef", () => $56da74025176c80d$export$6742a6f7355a0f5c);
$parcel$export(module.exports, "isArgmaxDef", () => $56da74025176c80d$export$4e72190875121d39);
$parcel$export(module.exports, "isAggregateOp", () => $56da74025176c80d$export$69caa18d4a5f9e6f);
$parcel$export(module.exports, "isCountingAggregateOp", () => $56da74025176c80d$export$505051ddc698d57d);
$parcel$export(module.exports, "isMinMaxOp", () => $56da74025176c80d$export$73ddd46ca213960e);
$parcel$export(module.exports, "SUM_OPS", () => $56da74025176c80d$export$16a2e323c4bd0bfb);
$parcel$export(module.exports, "SHARED_DOMAIN_OP_INDEX", () => $56da74025176c80d$export$3ac2d8ed0953b96);

var $2bi3s = parcelRequire("2bi3s");

var $7k4G6 = parcelRequire("7k4G6");
const $56da74025176c80d$var$AGGREGATE_OP_INDEX = {
    argmax: 1,
    argmin: 1,
    average: 1,
    count: 1,
    distinct: 1,
    product: 1,
    max: 1,
    mean: 1,
    median: 1,
    min: 1,
    missing: 1,
    q1: 1,
    q3: 1,
    ci0: 1,
    ci1: 1,
    stderr: 1,
    stdev: 1,
    stdevp: 1,
    sum: 1,
    valid: 1,
    values: 1,
    variance: 1,
    variancep: 1
};
const $56da74025176c80d$export$25b4b133e7adedd6 = {
    count: 1,
    min: 1,
    max: 1
};
function $56da74025176c80d$export$6742a6f7355a0f5c(a) {
    return !!a && !!a["argmin"];
}
function $56da74025176c80d$export$4e72190875121d39(a) {
    return !!a && !!a["argmax"];
}
const $56da74025176c80d$export$ac595f78070e32b7 = (0, $7k4G6.keys)($56da74025176c80d$var$AGGREGATE_OP_INDEX);
function $56da74025176c80d$export$69caa18d4a5f9e6f(a) {
    return (0, $2bi3s.isString)(a) && !!$56da74025176c80d$var$AGGREGATE_OP_INDEX[a];
}
const $56da74025176c80d$export$3f4caa27e544679c = [
    "count",
    "valid",
    "missing",
    "distinct"
];
function $56da74025176c80d$export$505051ddc698d57d(aggregate) {
    return (0, $2bi3s.isString)(aggregate) && (0, $7k4G6.contains)($56da74025176c80d$export$3f4caa27e544679c, aggregate);
}
function $56da74025176c80d$export$73ddd46ca213960e(aggregate) {
    return (0, $2bi3s.isString)(aggregate) && (0, $7k4G6.contains)([
        "min",
        "max"
    ], aggregate);
}
const $56da74025176c80d$export$16a2e323c4bd0bfb = [
    "count",
    "sum",
    "distinct",
    "valid",
    "missing"
];
const $56da74025176c80d$export$5b4fe33fc15eede0 = [
    "mean",
    "average",
    "median",
    "q1",
    "q3",
    "min",
    "max"
];
const $56da74025176c80d$export$3ac2d8ed0953b96 = (0, $2bi3s.toSet)($56da74025176c80d$export$5b4fe33fc15eede0);

});

parcelRegister("iR8lA", function(module, exports) {

$parcel$export(module.exports, "binToString", () => $dba3a6c983d06d66$export$cd9a125ee89ea65a);
$parcel$export(module.exports, "isSelectionExtent", () => $dba3a6c983d06d66$export$94a359ce1d98e56b);
$parcel$export(module.exports, "isBinning", () => $dba3a6c983d06d66$export$86da62520c0f1006);
$parcel$export(module.exports, "isBinParams", () => $dba3a6c983d06d66$export$80babc486ba81a70);
$parcel$export(module.exports, "isBinned", () => $dba3a6c983d06d66$export$9965852343130716);
$parcel$export(module.exports, "autoMaxBins", () => $dba3a6c983d06d66$export$c98fc137ae766386);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");
function $dba3a6c983d06d66$export$cd9a125ee89ea65a(bin) {
    if ((0, $2bi3s.isBoolean)(bin)) bin = (0, $2hAmp.normalizeBin)(bin, undefined);
    return "bin" + (0, $7k4G6.keys)(bin).map((p)=>$dba3a6c983d06d66$export$94a359ce1d98e56b(bin[p]) ? (0, $7k4G6.varName)(`_${p}_${(0, $7k4G6.entries)(bin[p])}`) : (0, $7k4G6.varName)(`_${p}_${bin[p]}`)).join("");
}
function $dba3a6c983d06d66$export$86da62520c0f1006(bin) {
    return bin === true || $dba3a6c983d06d66$export$80babc486ba81a70(bin) && !bin.binned;
}
function $dba3a6c983d06d66$export$9965852343130716(bin) {
    return bin === "binned" || $dba3a6c983d06d66$export$80babc486ba81a70(bin) && bin.binned === true;
}
function $dba3a6c983d06d66$export$80babc486ba81a70(bin) {
    return (0, $2bi3s.isObject)(bin);
}
function $dba3a6c983d06d66$export$94a359ce1d98e56b(extent) {
    return extent === null || extent === void 0 ? void 0 : extent["selection"];
}
function $dba3a6c983d06d66$export$c98fc137ae766386(channel) {
    switch(channel){
        case 0, $fWfT0.ROW:
        case 0, $fWfT0.COLUMN:
        case 0, $fWfT0.SIZE:
        case 0, $fWfT0.COLOR:
        case 0, $fWfT0.FILL:
        case 0, $fWfT0.STROKE:
        case 0, $fWfT0.STROKEWIDTH:
        case 0, $fWfT0.OPACITY:
        case 0, $fWfT0.FILLOPACITY:
        case 0, $fWfT0.STROKEOPACITY:
        // Facets and Size shouldn't have too many bins
        // We choose 6 like shape to simplify the rule [falls through]
        case 0, $fWfT0.SHAPE:
            return 6; // Vega's "shape" has 6 distinct values
        case 0, $fWfT0.STROKEDASH:
            return 4; // We only provide 5 different stroke dash values (but 4 is more effective)
        default:
            return 10;
    }
}

});
parcelRegister("fWfT0", function(module, exports) {

$parcel$export(module.exports, "ROW", () => $b9a8986fc55eb497$export$7d8b172d5f206b6c);
$parcel$export(module.exports, "COLUMN", () => $b9a8986fc55eb497$export$7f092194d45e1f0d);
$parcel$export(module.exports, "FACET", () => $b9a8986fc55eb497$export$4c1aa30d5b3a2210);
$parcel$export(module.exports, "X", () => $b9a8986fc55eb497$export$78acf4525d8a74c4);
$parcel$export(module.exports, "Y", () => $b9a8986fc55eb497$export$8743009a87fcb00f);
$parcel$export(module.exports, "X2", () => $b9a8986fc55eb497$export$3d76695dcdb4727a);
$parcel$export(module.exports, "Y2", () => $b9a8986fc55eb497$export$2f0e6bc49da0388c);
$parcel$export(module.exports, "RADIUS", () => $b9a8986fc55eb497$export$2d2c9be8b5b863f);
$parcel$export(module.exports, "RADIUS2", () => $b9a8986fc55eb497$export$3ed0ae0720518274);
$parcel$export(module.exports, "THETA", () => $b9a8986fc55eb497$export$9fbe230a20fa9389);
$parcel$export(module.exports, "THETA2", () => $b9a8986fc55eb497$export$477ae7bf3697f322);
$parcel$export(module.exports, "LATITUDE", () => $b9a8986fc55eb497$export$b43499a9478fd1a4);
$parcel$export(module.exports, "LONGITUDE", () => $b9a8986fc55eb497$export$37b64a7831e8cd22);
$parcel$export(module.exports, "LATITUDE2", () => $b9a8986fc55eb497$export$23aa794e9ca4596b);
$parcel$export(module.exports, "LONGITUDE2", () => $b9a8986fc55eb497$export$141af2b2eda89ea8);
$parcel$export(module.exports, "COLOR", () => $b9a8986fc55eb497$export$9b982809044276a6);
$parcel$export(module.exports, "FILL", () => $b9a8986fc55eb497$export$5672a3e1deb5b505);
$parcel$export(module.exports, "STROKE", () => $b9a8986fc55eb497$export$2609b86bb01b3619);
$parcel$export(module.exports, "SHAPE", () => $b9a8986fc55eb497$export$ca76e41b0fc0de7e);
$parcel$export(module.exports, "SIZE", () => $b9a8986fc55eb497$export$8d4e26484c874870);
$parcel$export(module.exports, "ANGLE", () => $b9a8986fc55eb497$export$760ba9986fa77dbf);
$parcel$export(module.exports, "OPACITY", () => $b9a8986fc55eb497$export$5bc4767b9a431a41);
$parcel$export(module.exports, "FILLOPACITY", () => $b9a8986fc55eb497$export$38ebf7c0ec8e5ff);
$parcel$export(module.exports, "STROKEOPACITY", () => $b9a8986fc55eb497$export$8a0a699d02197203);
$parcel$export(module.exports, "STROKEWIDTH", () => $b9a8986fc55eb497$export$4d51ed50047d9f04);
$parcel$export(module.exports, "STROKEDASH", () => $b9a8986fc55eb497$export$737c607c38ad8bb4);
$parcel$export(module.exports, "TEXT", () => $b9a8986fc55eb497$export$d597759d33be802e);
$parcel$export(module.exports, "ORDER", () => $b9a8986fc55eb497$export$11e75bce9f7ea886);
$parcel$export(module.exports, "DETAIL", () => $b9a8986fc55eb497$export$dd29af371efd7894);
$parcel$export(module.exports, "KEY", () => $b9a8986fc55eb497$export$7167c830cefcb6b5);
$parcel$export(module.exports, "TOOLTIP", () => $b9a8986fc55eb497$export$1517edb21b105800);
$parcel$export(module.exports, "HREF", () => $b9a8986fc55eb497$export$74921a9774a80542);
$parcel$export(module.exports, "URL", () => $b9a8986fc55eb497$export$61abde59b50deb8e);
$parcel$export(module.exports, "DESCRIPTION", () => $b9a8986fc55eb497$export$d44826c816b5619b);
$parcel$export(module.exports, "isPolarPositionChannel", () => $b9a8986fc55eb497$export$5048e87506847715);
$parcel$export(module.exports, "getPositionChannelFromLatLong", () => $b9a8986fc55eb497$export$2489325badcee159);
$parcel$export(module.exports, "isGeoPositionChannel", () => $b9a8986fc55eb497$export$f1c3607f817ec90d);
$parcel$export(module.exports, "GEOPOSITION_CHANNELS", () => $b9a8986fc55eb497$export$df36539089e7f7fd);
$parcel$export(module.exports, "isColorChannel", () => $b9a8986fc55eb497$export$8df38354a17c7ff);
$parcel$export(module.exports, "FACET_CHANNELS", () => $b9a8986fc55eb497$export$30dc35be17000ebd);
$parcel$export(module.exports, "CHANNELS", () => $b9a8986fc55eb497$export$6ed507336478440d);
$parcel$export(module.exports, "isSingleDefUnitChannel", () => $b9a8986fc55eb497$export$439bd329c8cbfece);
$parcel$export(module.exports, "isChannel", () => $b9a8986fc55eb497$export$e45abad29e079b2a);
$parcel$export(module.exports, "SECONDARY_RANGE_CHANNEL", () => $b9a8986fc55eb497$export$a2012a70ed6585f9);
$parcel$export(module.exports, "isSecondaryRangeChannel", () => $b9a8986fc55eb497$export$8b2078c62ed93627);
$parcel$export(module.exports, "getMainRangeChannel", () => $b9a8986fc55eb497$export$4d9e7f88c118a531);
$parcel$export(module.exports, "getVgPositionChannel", () => $b9a8986fc55eb497$export$e232c768aa4519be);
$parcel$export(module.exports, "getSecondaryRangeChannel", () => $b9a8986fc55eb497$export$38424e100e5e8f59);
$parcel$export(module.exports, "getSizeChannel", () => $b9a8986fc55eb497$export$8dd9eedc9b5c85e8);
$parcel$export(module.exports, "getOffsetChannel", () => $b9a8986fc55eb497$export$72f50a0799db381);
$parcel$export(module.exports, "NONPOSITION_CHANNELS", () => $b9a8986fc55eb497$export$fb63f373f4620bf);
$parcel$export(module.exports, "POSITION_SCALE_CHANNEL_INDEX", () => $b9a8986fc55eb497$export$14cba263caed17c3);
$parcel$export(module.exports, "POSITION_SCALE_CHANNELS", () => $b9a8986fc55eb497$export$6052d97728bd9151);
$parcel$export(module.exports, "isXorY", () => $b9a8986fc55eb497$export$a6f35038bf15e9cd);
$parcel$export(module.exports, "POLAR_POSITION_SCALE_CHANNEL_INDEX", () => $b9a8986fc55eb497$export$5cb866310f22b644);
$parcel$export(module.exports, "POLAR_POSITION_SCALE_CHANNELS", () => $b9a8986fc55eb497$export$611c8817a9eb6d99);
$parcel$export(module.exports, "getPositionScaleChannel", () => $b9a8986fc55eb497$export$d78cc6f1ff56c75c);
$parcel$export(module.exports, "NONPOSITION_SCALE_CHANNELS", () => $b9a8986fc55eb497$export$e07a3d2cad0d30e9);
$parcel$export(module.exports, "isNonPositionScaleChannel", () => $b9a8986fc55eb497$export$4db96a8c96f34408);
$parcel$export(module.exports, "supportLegend", () => $b9a8986fc55eb497$export$a293d4d0637448f);
$parcel$export(module.exports, "SCALE_CHANNELS", () => $b9a8986fc55eb497$export$3a29505a58a6150c);
$parcel$export(module.exports, "isScaleChannel", () => $b9a8986fc55eb497$export$5900b6c7b1ef3b2);
$parcel$export(module.exports, "supportMark", () => $b9a8986fc55eb497$export$b8c5a7620785a596);
$parcel$export(module.exports, "rangeType", () => $b9a8986fc55eb497$export$3c877cc13024d016);
/*
 * Constants and utilities for encoding channels (Visual variables)
 * such as 'x', 'y', 'color'.
 */ 
var $7k4G6 = parcelRequire("7k4G6");
var $b9a8986fc55eb497$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $b9a8986fc55eb497$export$7d8b172d5f206b6c = "row";
const $b9a8986fc55eb497$export$7f092194d45e1f0d = "column";
const $b9a8986fc55eb497$export$4c1aa30d5b3a2210 = "facet";
const $b9a8986fc55eb497$export$78acf4525d8a74c4 = "x";
const $b9a8986fc55eb497$export$8743009a87fcb00f = "y";
const $b9a8986fc55eb497$export$3d76695dcdb4727a = "x2";
const $b9a8986fc55eb497$export$2f0e6bc49da0388c = "y2";
const $b9a8986fc55eb497$export$2d2c9be8b5b863f = "radius";
const $b9a8986fc55eb497$export$3ed0ae0720518274 = "radius2";
const $b9a8986fc55eb497$export$9fbe230a20fa9389 = "theta";
const $b9a8986fc55eb497$export$477ae7bf3697f322 = "theta2";
const $b9a8986fc55eb497$export$b43499a9478fd1a4 = "latitude";
const $b9a8986fc55eb497$export$37b64a7831e8cd22 = "longitude";
const $b9a8986fc55eb497$export$23aa794e9ca4596b = "latitude2";
const $b9a8986fc55eb497$export$141af2b2eda89ea8 = "longitude2";
const $b9a8986fc55eb497$export$9b982809044276a6 = "color";
const $b9a8986fc55eb497$export$5672a3e1deb5b505 = "fill";
const $b9a8986fc55eb497$export$2609b86bb01b3619 = "stroke";
const $b9a8986fc55eb497$export$ca76e41b0fc0de7e = "shape";
const $b9a8986fc55eb497$export$8d4e26484c874870 = "size";
const $b9a8986fc55eb497$export$760ba9986fa77dbf = "angle";
const $b9a8986fc55eb497$export$5bc4767b9a431a41 = "opacity";
const $b9a8986fc55eb497$export$38ebf7c0ec8e5ff = "fillOpacity";
const $b9a8986fc55eb497$export$8a0a699d02197203 = "strokeOpacity";
const $b9a8986fc55eb497$export$4d51ed50047d9f04 = "strokeWidth";
const $b9a8986fc55eb497$export$737c607c38ad8bb4 = "strokeDash";
const $b9a8986fc55eb497$export$d597759d33be802e = "text";
const $b9a8986fc55eb497$export$11e75bce9f7ea886 = "order";
const $b9a8986fc55eb497$export$dd29af371efd7894 = "detail";
const $b9a8986fc55eb497$export$7167c830cefcb6b5 = "key";
const $b9a8986fc55eb497$export$1517edb21b105800 = "tooltip";
const $b9a8986fc55eb497$export$74921a9774a80542 = "href";
const $b9a8986fc55eb497$export$61abde59b50deb8e = "url";
const $b9a8986fc55eb497$export$d44826c816b5619b = "description";
const $b9a8986fc55eb497$var$POSITION_CHANNEL_INDEX = {
    x: 1,
    y: 1,
    x2: 1,
    y2: 1
};
const $b9a8986fc55eb497$var$POLAR_POSITION_CHANNEL_INDEX = {
    theta: 1,
    theta2: 1,
    radius: 1,
    radius2: 1
};
function $b9a8986fc55eb497$export$5048e87506847715(c) {
    return c in $b9a8986fc55eb497$var$POLAR_POSITION_CHANNEL_INDEX;
}
const $b9a8986fc55eb497$var$GEO_POSIITON_CHANNEL_INDEX = {
    longitude: 1,
    longitude2: 1,
    latitude: 1,
    latitude2: 1
};
function $b9a8986fc55eb497$export$2489325badcee159(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$b43499a9478fd1a4:
            return "y";
        case $b9a8986fc55eb497$export$23aa794e9ca4596b:
            return "y2";
        case $b9a8986fc55eb497$export$37b64a7831e8cd22:
            return "x";
        case $b9a8986fc55eb497$export$141af2b2eda89ea8:
            return "x2";
    }
}
function $b9a8986fc55eb497$export$f1c3607f817ec90d(c) {
    return c in $b9a8986fc55eb497$var$GEO_POSIITON_CHANNEL_INDEX;
}
const $b9a8986fc55eb497$export$df36539089e7f7fd = (0, $7k4G6.keys)($b9a8986fc55eb497$var$GEO_POSIITON_CHANNEL_INDEX);
const $b9a8986fc55eb497$var$UNIT_CHANNEL_INDEX = Object.assign(Object.assign(Object.assign(Object.assign({}, $b9a8986fc55eb497$var$POSITION_CHANNEL_INDEX), $b9a8986fc55eb497$var$POLAR_POSITION_CHANNEL_INDEX), $b9a8986fc55eb497$var$GEO_POSIITON_CHANNEL_INDEX), {
    // color
    color: 1,
    fill: 1,
    stroke: 1,
    // other non-position with scale
    opacity: 1,
    fillOpacity: 1,
    strokeOpacity: 1,
    strokeWidth: 1,
    strokeDash: 1,
    size: 1,
    angle: 1,
    shape: 1,
    // channels without scales
    order: 1,
    text: 1,
    detail: 1,
    key: 1,
    tooltip: 1,
    href: 1,
    url: 1,
    description: 1
});
function $b9a8986fc55eb497$export$8df38354a17c7ff(channel) {
    return channel === $b9a8986fc55eb497$export$9b982809044276a6 || channel === $b9a8986fc55eb497$export$5672a3e1deb5b505 || channel === $b9a8986fc55eb497$export$2609b86bb01b3619;
}
const $b9a8986fc55eb497$var$FACET_CHANNEL_INDEX = {
    row: 1,
    column: 1,
    facet: 1
};
const $b9a8986fc55eb497$export$30dc35be17000ebd = (0, $7k4G6.keys)($b9a8986fc55eb497$var$FACET_CHANNEL_INDEX);
const $b9a8986fc55eb497$var$CHANNEL_INDEX = Object.assign(Object.assign({}, $b9a8986fc55eb497$var$UNIT_CHANNEL_INDEX), $b9a8986fc55eb497$var$FACET_CHANNEL_INDEX);
const $b9a8986fc55eb497$export$6ed507336478440d = (0, $7k4G6.keys)($b9a8986fc55eb497$var$CHANNEL_INDEX);
const { order: $b9a8986fc55eb497$var$_o, detail: $b9a8986fc55eb497$var$_d, tooltip: $b9a8986fc55eb497$var$_tt1 } = $b9a8986fc55eb497$var$CHANNEL_INDEX, $b9a8986fc55eb497$var$SINGLE_DEF_CHANNEL_INDEX = $b9a8986fc55eb497$var$__rest($b9a8986fc55eb497$var$CHANNEL_INDEX, [
    "order",
    "detail",
    "tooltip"
]);
const { row: $b9a8986fc55eb497$var$_r, column: $b9a8986fc55eb497$var$_c, facet: $b9a8986fc55eb497$var$_f } = $b9a8986fc55eb497$var$SINGLE_DEF_CHANNEL_INDEX, $b9a8986fc55eb497$var$SINGLE_DEF_UNIT_CHANNEL_INDEX = $b9a8986fc55eb497$var$__rest($b9a8986fc55eb497$var$SINGLE_DEF_CHANNEL_INDEX, [
    "row",
    "column",
    "facet"
]);
const $b9a8986fc55eb497$export$422ef70683a13996 = (0, $7k4G6.keys)($b9a8986fc55eb497$var$SINGLE_DEF_CHANNEL_INDEX);
const $b9a8986fc55eb497$export$d930d2f1b9a9b089 = (0, $7k4G6.keys)($b9a8986fc55eb497$var$SINGLE_DEF_UNIT_CHANNEL_INDEX);
function $b9a8986fc55eb497$export$439bd329c8cbfece(str) {
    return !!$b9a8986fc55eb497$var$SINGLE_DEF_UNIT_CHANNEL_INDEX[str];
}
function $b9a8986fc55eb497$export$e45abad29e079b2a(str) {
    return !!$b9a8986fc55eb497$var$CHANNEL_INDEX[str];
}
const $b9a8986fc55eb497$export$a2012a70ed6585f9 = [
    $b9a8986fc55eb497$export$3d76695dcdb4727a,
    $b9a8986fc55eb497$export$2f0e6bc49da0388c,
    $b9a8986fc55eb497$export$23aa794e9ca4596b,
    $b9a8986fc55eb497$export$141af2b2eda89ea8,
    $b9a8986fc55eb497$export$477ae7bf3697f322,
    $b9a8986fc55eb497$export$3ed0ae0720518274
];
function $b9a8986fc55eb497$export$8b2078c62ed93627(c) {
    const main = $b9a8986fc55eb497$export$4d9e7f88c118a531(c);
    return main !== c;
}
function $b9a8986fc55eb497$export$4d9e7f88c118a531(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$3d76695dcdb4727a:
            return $b9a8986fc55eb497$export$78acf4525d8a74c4;
        case $b9a8986fc55eb497$export$2f0e6bc49da0388c:
            return $b9a8986fc55eb497$export$8743009a87fcb00f;
        case $b9a8986fc55eb497$export$23aa794e9ca4596b:
            return $b9a8986fc55eb497$export$b43499a9478fd1a4;
        case $b9a8986fc55eb497$export$141af2b2eda89ea8:
            return $b9a8986fc55eb497$export$37b64a7831e8cd22;
        case $b9a8986fc55eb497$export$477ae7bf3697f322:
            return $b9a8986fc55eb497$export$9fbe230a20fa9389;
        case $b9a8986fc55eb497$export$3ed0ae0720518274:
            return $b9a8986fc55eb497$export$2d2c9be8b5b863f;
    }
    return channel;
}
function $b9a8986fc55eb497$export$e232c768aa4519be(channel) {
    if ($b9a8986fc55eb497$export$5048e87506847715(channel)) switch(channel){
        case $b9a8986fc55eb497$export$9fbe230a20fa9389:
            return "startAngle";
        case $b9a8986fc55eb497$export$477ae7bf3697f322:
            return "endAngle";
        case $b9a8986fc55eb497$export$2d2c9be8b5b863f:
            return "outerRadius";
        case $b9a8986fc55eb497$export$3ed0ae0720518274:
            return "innerRadius";
    }
    return channel;
}
function $b9a8986fc55eb497$export$38424e100e5e8f59(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$78acf4525d8a74c4:
            return $b9a8986fc55eb497$export$3d76695dcdb4727a;
        case $b9a8986fc55eb497$export$8743009a87fcb00f:
            return $b9a8986fc55eb497$export$2f0e6bc49da0388c;
        case $b9a8986fc55eb497$export$b43499a9478fd1a4:
            return $b9a8986fc55eb497$export$23aa794e9ca4596b;
        case $b9a8986fc55eb497$export$37b64a7831e8cd22:
            return $b9a8986fc55eb497$export$141af2b2eda89ea8;
        case $b9a8986fc55eb497$export$9fbe230a20fa9389:
            return $b9a8986fc55eb497$export$477ae7bf3697f322;
        case $b9a8986fc55eb497$export$2d2c9be8b5b863f:
            return $b9a8986fc55eb497$export$3ed0ae0720518274;
    }
    return undefined;
}
function $b9a8986fc55eb497$export$8dd9eedc9b5c85e8(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$78acf4525d8a74c4:
        case $b9a8986fc55eb497$export$3d76695dcdb4727a:
            return "width";
        case $b9a8986fc55eb497$export$8743009a87fcb00f:
        case $b9a8986fc55eb497$export$2f0e6bc49da0388c:
            return "height";
    }
    return undefined;
}
function $b9a8986fc55eb497$export$72f50a0799db381(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$78acf4525d8a74c4:
            return "xOffset";
        case $b9a8986fc55eb497$export$8743009a87fcb00f:
            return "yOffset";
        case $b9a8986fc55eb497$export$3d76695dcdb4727a:
            return "x2Offset";
        case $b9a8986fc55eb497$export$2f0e6bc49da0388c:
            return "y2Offset";
        case $b9a8986fc55eb497$export$9fbe230a20fa9389:
            return "thetaOffset";
        case $b9a8986fc55eb497$export$2d2c9be8b5b863f:
            return "radiusOffset";
        case $b9a8986fc55eb497$export$477ae7bf3697f322:
            return "theta2Offset";
        case $b9a8986fc55eb497$export$3ed0ae0720518274:
            return "radius2Offset";
    }
    return undefined;
}
const $b9a8986fc55eb497$export$6bf501d6a2da5e70 = (0, $7k4G6.keys)($b9a8986fc55eb497$var$UNIT_CHANNEL_INDEX);
// NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;
const { x: $b9a8986fc55eb497$var$_x, y: $b9a8986fc55eb497$var$_y, // x2 and y2 share the same scale as x and y
x2: $b9a8986fc55eb497$var$_x2, y2: $b9a8986fc55eb497$var$_y2, latitude: $b9a8986fc55eb497$var$_latitude, longitude: $b9a8986fc55eb497$var$_longitude, latitude2: $b9a8986fc55eb497$var$_latitude2, longitude2: $b9a8986fc55eb497$var$_longitude2, theta: $b9a8986fc55eb497$var$_theta, theta2: $b9a8986fc55eb497$var$_theta2, radius: $b9a8986fc55eb497$var$_radius, radius2: $b9a8986fc55eb497$var$_radius2 } = $b9a8986fc55eb497$var$UNIT_CHANNEL_INDEX, // The rest of unit channels then have scale
$b9a8986fc55eb497$var$NONPOSITION_CHANNEL_INDEX = $b9a8986fc55eb497$var$__rest($b9a8986fc55eb497$var$UNIT_CHANNEL_INDEX, [
    "x",
    "y",
    "x2",
    "y2",
    "latitude",
    "longitude",
    "latitude2",
    "longitude2",
    "theta",
    "theta2",
    "radius",
    "radius2"
]);
const $b9a8986fc55eb497$export$fb63f373f4620bf = (0, $7k4G6.keys)($b9a8986fc55eb497$var$NONPOSITION_CHANNEL_INDEX);
const $b9a8986fc55eb497$export$14cba263caed17c3 = {
    x: 1,
    y: 1
};
const $b9a8986fc55eb497$export$6052d97728bd9151 = (0, $7k4G6.keys)($b9a8986fc55eb497$export$14cba263caed17c3);
function $b9a8986fc55eb497$export$a6f35038bf15e9cd(channel) {
    return channel in $b9a8986fc55eb497$export$14cba263caed17c3;
}
const $b9a8986fc55eb497$export$5cb866310f22b644 = {
    theta: 1,
    radius: 1
};
const $b9a8986fc55eb497$export$611c8817a9eb6d99 = (0, $7k4G6.keys)($b9a8986fc55eb497$export$5cb866310f22b644);
function $b9a8986fc55eb497$export$d78cc6f1ff56c75c(sizeType) {
    return sizeType === "width" ? $b9a8986fc55eb497$export$78acf4525d8a74c4 : $b9a8986fc55eb497$export$8743009a87fcb00f;
}
// NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y
const { // x2 and y2 share the same scale as x and y
// text and tooltip have format instead of scale,
// href has neither format, nor scale
text: $b9a8986fc55eb497$var$_t, tooltip: $b9a8986fc55eb497$var$_tt, href: $b9a8986fc55eb497$var$_hr, url: $b9a8986fc55eb497$var$_u, description: $b9a8986fc55eb497$var$_al, // detail and order have no scale
detail: $b9a8986fc55eb497$var$_dd, key: $b9a8986fc55eb497$var$_k, order: $b9a8986fc55eb497$var$_oo } = $b9a8986fc55eb497$var$NONPOSITION_CHANNEL_INDEX, $b9a8986fc55eb497$var$NONPOSITION_SCALE_CHANNEL_INDEX = $b9a8986fc55eb497$var$__rest($b9a8986fc55eb497$var$NONPOSITION_CHANNEL_INDEX, [
    "text",
    "tooltip",
    "href",
    "url",
    "description",
    "detail",
    "key",
    "order"
]);
const $b9a8986fc55eb497$export$e07a3d2cad0d30e9 = (0, $7k4G6.keys)($b9a8986fc55eb497$var$NONPOSITION_SCALE_CHANNEL_INDEX);
function $b9a8986fc55eb497$export$4db96a8c96f34408(channel) {
    return !!$b9a8986fc55eb497$var$NONPOSITION_CHANNEL_INDEX[channel];
}
function $b9a8986fc55eb497$export$a293d4d0637448f(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$9b982809044276a6:
        case $b9a8986fc55eb497$export$5672a3e1deb5b505:
        case $b9a8986fc55eb497$export$2609b86bb01b3619:
        case $b9a8986fc55eb497$export$8d4e26484c874870:
        case $b9a8986fc55eb497$export$ca76e41b0fc0de7e:
        case $b9a8986fc55eb497$export$5bc4767b9a431a41:
        case $b9a8986fc55eb497$export$4d51ed50047d9f04:
        case $b9a8986fc55eb497$export$737c607c38ad8bb4:
            return true;
        case $b9a8986fc55eb497$export$38ebf7c0ec8e5ff:
        case $b9a8986fc55eb497$export$8a0a699d02197203:
        case $b9a8986fc55eb497$export$760ba9986fa77dbf:
            return false;
    }
}
// Declare SCALE_CHANNEL_INDEX
const $b9a8986fc55eb497$var$SCALE_CHANNEL_INDEX = Object.assign(Object.assign(Object.assign({}, $b9a8986fc55eb497$export$14cba263caed17c3), $b9a8986fc55eb497$export$5cb866310f22b644), $b9a8986fc55eb497$var$NONPOSITION_SCALE_CHANNEL_INDEX);
const $b9a8986fc55eb497$export$3a29505a58a6150c = (0, $7k4G6.keys)($b9a8986fc55eb497$var$SCALE_CHANNEL_INDEX);
function $b9a8986fc55eb497$export$5900b6c7b1ef3b2(channel) {
    return !!$b9a8986fc55eb497$var$SCALE_CHANNEL_INDEX[channel];
}
function $b9a8986fc55eb497$export$b8c5a7620785a596(channel, mark) {
    return $b9a8986fc55eb497$var$getSupportedMark(channel)[mark];
}
const $b9a8986fc55eb497$var$ALL_MARKS = {
    // all marks
    arc: "always",
    area: "always",
    bar: "always",
    circle: "always",
    geoshape: "always",
    image: "always",
    line: "always",
    rule: "always",
    point: "always",
    rect: "always",
    square: "always",
    trail: "always",
    text: "always",
    tick: "always"
};
const { geoshape: $b9a8986fc55eb497$var$_g } = $b9a8986fc55eb497$var$ALL_MARKS, $b9a8986fc55eb497$var$ALL_MARKS_EXCEPT_GEOSHAPE = $b9a8986fc55eb497$var$__rest($b9a8986fc55eb497$var$ALL_MARKS, [
    "geoshape"
]);
/**
 * Return a dictionary showing whether a channel supports mark type.
 * @param channel
 * @return A dictionary mapping mark types to 'always', 'binned', or undefined
 */ function $b9a8986fc55eb497$var$getSupportedMark(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$9b982809044276a6:
        case $b9a8986fc55eb497$export$5672a3e1deb5b505:
        case $b9a8986fc55eb497$export$2609b86bb01b3619:
        // falls through
        case $b9a8986fc55eb497$export$d44826c816b5619b:
        case $b9a8986fc55eb497$export$dd29af371efd7894:
        case $b9a8986fc55eb497$export$7167c830cefcb6b5:
        case $b9a8986fc55eb497$export$1517edb21b105800:
        case $b9a8986fc55eb497$export$74921a9774a80542:
        case $b9a8986fc55eb497$export$11e75bce9f7ea886:
        case $b9a8986fc55eb497$export$5bc4767b9a431a41:
        case $b9a8986fc55eb497$export$38ebf7c0ec8e5ff:
        case $b9a8986fc55eb497$export$8a0a699d02197203:
        case $b9a8986fc55eb497$export$4d51ed50047d9f04:
        // falls through
        case $b9a8986fc55eb497$export$4c1aa30d5b3a2210:
        case $b9a8986fc55eb497$export$7d8b172d5f206b6c:
        case $b9a8986fc55eb497$export$7f092194d45e1f0d:
            return $b9a8986fc55eb497$var$ALL_MARKS;
        case $b9a8986fc55eb497$export$78acf4525d8a74c4:
        case $b9a8986fc55eb497$export$8743009a87fcb00f:
        case $b9a8986fc55eb497$export$b43499a9478fd1a4:
        case $b9a8986fc55eb497$export$37b64a7831e8cd22:
            // all marks except geoshape. geoshape does not use X, Y -- it uses a projection
            return $b9a8986fc55eb497$var$ALL_MARKS_EXCEPT_GEOSHAPE;
        case $b9a8986fc55eb497$export$3d76695dcdb4727a:
        case $b9a8986fc55eb497$export$2f0e6bc49da0388c:
        case $b9a8986fc55eb497$export$23aa794e9ca4596b:
        case $b9a8986fc55eb497$export$141af2b2eda89ea8:
            return {
                area: "always",
                bar: "always",
                image: "always",
                rect: "always",
                rule: "always",
                circle: "binned",
                point: "binned",
                square: "binned",
                tick: "binned",
                line: "binned",
                trail: "binned"
            };
        case $b9a8986fc55eb497$export$8d4e26484c874870:
            return {
                point: "always",
                tick: "always",
                rule: "always",
                circle: "always",
                square: "always",
                bar: "always",
                text: "always",
                line: "always",
                trail: "always"
            };
        case $b9a8986fc55eb497$export$737c607c38ad8bb4:
            return {
                line: "always",
                point: "always",
                tick: "always",
                rule: "always",
                circle: "always",
                square: "always",
                bar: "always",
                geoshape: "always"
            };
        case $b9a8986fc55eb497$export$ca76e41b0fc0de7e:
            return {
                point: "always",
                geoshape: "always"
            };
        case $b9a8986fc55eb497$export$d597759d33be802e:
            return {
                text: "always"
            };
        case $b9a8986fc55eb497$export$760ba9986fa77dbf:
            return {
                point: "always",
                square: "always",
                text: "always"
            };
        case $b9a8986fc55eb497$export$61abde59b50deb8e:
            return {
                image: "always"
            };
        case $b9a8986fc55eb497$export$9fbe230a20fa9389:
            return {
                text: "always",
                arc: "always"
            };
        case $b9a8986fc55eb497$export$2d2c9be8b5b863f:
            return {
                text: "always",
                arc: "always"
            };
        case $b9a8986fc55eb497$export$477ae7bf3697f322:
        case $b9a8986fc55eb497$export$3ed0ae0720518274:
            return {
                arc: "always"
            };
    }
}
function $b9a8986fc55eb497$export$3c877cc13024d016(channel) {
    switch(channel){
        case $b9a8986fc55eb497$export$78acf4525d8a74c4:
        case $b9a8986fc55eb497$export$8743009a87fcb00f:
        case $b9a8986fc55eb497$export$9fbe230a20fa9389:
        case $b9a8986fc55eb497$export$2d2c9be8b5b863f:
        case $b9a8986fc55eb497$export$8d4e26484c874870:
        case $b9a8986fc55eb497$export$760ba9986fa77dbf:
        case $b9a8986fc55eb497$export$4d51ed50047d9f04:
        case $b9a8986fc55eb497$export$5bc4767b9a431a41:
        case $b9a8986fc55eb497$export$38ebf7c0ec8e5ff:
        case $b9a8986fc55eb497$export$8a0a699d02197203:
        // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]
        case $b9a8986fc55eb497$export$3d76695dcdb4727a:
        case $b9a8986fc55eb497$export$2f0e6bc49da0388c:
        case $b9a8986fc55eb497$export$477ae7bf3697f322:
        case $b9a8986fc55eb497$export$3ed0ae0720518274:
            return undefined;
        case $b9a8986fc55eb497$export$4c1aa30d5b3a2210:
        case $b9a8986fc55eb497$export$7d8b172d5f206b6c:
        case $b9a8986fc55eb497$export$7f092194d45e1f0d:
        case $b9a8986fc55eb497$export$ca76e41b0fc0de7e:
        case $b9a8986fc55eb497$export$737c607c38ad8bb4:
        // TEXT, TOOLTIP, URL, and HREF have no scale but have discrete output [falls through]
        case $b9a8986fc55eb497$export$d597759d33be802e:
        case $b9a8986fc55eb497$export$1517edb21b105800:
        case $b9a8986fc55eb497$export$74921a9774a80542:
        case $b9a8986fc55eb497$export$61abde59b50deb8e:
        case $b9a8986fc55eb497$export$d44826c816b5619b:
            return "discrete";
        // Color can be either continuous or discrete, depending on scale type.
        case $b9a8986fc55eb497$export$9b982809044276a6:
        case $b9a8986fc55eb497$export$5672a3e1deb5b505:
        case $b9a8986fc55eb497$export$2609b86bb01b3619:
            return "flexible";
        // No scale, no range type.
        case $b9a8986fc55eb497$export$b43499a9478fd1a4:
        case $b9a8986fc55eb497$export$37b64a7831e8cd22:
        case $b9a8986fc55eb497$export$23aa794e9ca4596b:
        case $b9a8986fc55eb497$export$141af2b2eda89ea8:
        case $b9a8986fc55eb497$export$dd29af371efd7894:
        case $b9a8986fc55eb497$export$7167c830cefcb6b5:
        case $b9a8986fc55eb497$export$11e75bce9f7ea886:
            return undefined;
    }
}

});


parcelRegister("7oTmT", function(module, exports) {

$parcel$export(module.exports, "isCustomFormatType", () => $5635b9434d5f29af$export$d3118478e73d0a2c);
$parcel$export(module.exports, "formatSignalRef", () => $5635b9434d5f29af$export$2b49ae0c5eea8da);
$parcel$export(module.exports, "formatCustomType", () => $5635b9434d5f29af$export$ec1131d12592892c);
$parcel$export(module.exports, "binFormatExpression", () => $5635b9434d5f29af$export$107ddc23e03004c4);
$parcel$export(module.exports, "guideFormat", () => $5635b9434d5f29af$export$e19375ff6d228513);
$parcel$export(module.exports, "guideFormatType", () => $5635b9434d5f29af$export$8c6660a058edcba1);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $2hAmp = parcelRequire("2hAmp");

var $6EUuI = parcelRequire("6EUuI");

var $9rekY = parcelRequire("9rekY");

var $aMeqD = parcelRequire("aMeqD");

var $9LX7L = parcelRequire("9LX7L");

var $4xdf1 = parcelRequire("4xdf1");

var $gx1vn = parcelRequire("gx1vn");
function $5635b9434d5f29af$export$d3118478e73d0a2c(formatType) {
    return formatType && formatType !== "number" && formatType !== "time";
}
function $5635b9434d5f29af$var$customFormatExpr(formatType, field, format) {
    return `${formatType}(${field}${format ? `, ${JSON.stringify(format)}` : ""})`;
}
const $5635b9434d5f29af$export$f2f47f2815d8e8b = " \u2013 ";
function $5635b9434d5f29af$export$2b49ae0c5eea8da({ fieldOrDatumDef: fieldOrDatumDef, format: format, formatType: formatType, expr: expr, normalizeStack: normalizeStack, config: config }) {
    var _a, _b;
    if ($5635b9434d5f29af$export$d3118478e73d0a2c(formatType)) return $5635b9434d5f29af$export$ec1131d12592892c({
        fieldOrDatumDef: fieldOrDatumDef,
        format: format,
        formatType: formatType,
        expr: expr,
        config: config
    });
    const field = $5635b9434d5f29af$var$fieldToFormat(fieldOrDatumDef, expr, normalizeStack);
    if ((0, $2hAmp.isFieldOrDatumDefForTimeFormat)(fieldOrDatumDef)) {
        const signal = $5635b9434d5f29af$export$372886808459361b(field, (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? (_a = (0, $aMeqD.normalizeTimeUnit)(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined, format, config.timeFormat, (0, $2hAmp.isScaleFieldDef)(fieldOrDatumDef) && ((_b = fieldOrDatumDef.scale) === null || _b === void 0 ? void 0 : _b.type) === (0, $9rekY.ScaleType).UTC);
        return signal ? {
            signal: signal
        } : undefined;
    }
    format = $5635b9434d5f29af$export$688d13a530c5dcbc((0, $2hAmp.channelDefType)(fieldOrDatumDef), format, config);
    if ((0, $2hAmp.isFieldDef)(fieldOrDatumDef) && (0, $iR8lA.isBinning)(fieldOrDatumDef.bin)) {
        const endField = (0, $2hAmp.vgField)(fieldOrDatumDef, {
            expr: expr,
            binSuffix: "end"
        });
        return {
            signal: $5635b9434d5f29af$export$107ddc23e03004c4(field, endField, format, formatType, config)
        };
    } else if (format || (0, $2hAmp.channelDefType)(fieldOrDatumDef) === "quantitative") return {
        signal: `${$5635b9434d5f29af$var$formatExpr(field, format)}`
    };
    else return {
        signal: `isValid(${field}) ? ${field} : ""+${field}`
    };
}
function $5635b9434d5f29af$var$fieldToFormat(fieldOrDatumDef, expr, normalizeStack) {
    if ((0, $2hAmp.isFieldDef)(fieldOrDatumDef)) {
        if (normalizeStack) return `${(0, $2hAmp.vgField)(fieldOrDatumDef, {
            expr: expr,
            suffix: "end"
        })}-${(0, $2hAmp.vgField)(fieldOrDatumDef, {
            expr: expr,
            suffix: "start"
        })}`;
        else return (0, $2hAmp.vgField)(fieldOrDatumDef, {
            expr: expr
        });
    } else return (0, $gx1vn.datumDefToExpr)(fieldOrDatumDef);
}
function $5635b9434d5f29af$export$ec1131d12592892c({ fieldOrDatumDef: fieldOrDatumDef, format: format, formatType: formatType, expr: expr, normalizeStack: normalizeStack, config: config, field: field }) {
    field = field !== null && field !== void 0 ? field : $5635b9434d5f29af$var$fieldToFormat(fieldOrDatumDef, expr, normalizeStack);
    if ((0, $2hAmp.isFieldDef)(fieldOrDatumDef) && (0, $iR8lA.isBinning)(fieldOrDatumDef.bin)) {
        const endField = (0, $2hAmp.vgField)(fieldOrDatumDef, {
            expr: expr,
            binSuffix: "end"
        });
        return {
            signal: $5635b9434d5f29af$export$107ddc23e03004c4(field, endField, format, formatType, config)
        };
    }
    return {
        signal: $5635b9434d5f29af$var$customFormatExpr(formatType, field, format)
    };
}
function $5635b9434d5f29af$export$e19375ff6d228513(fieldOrDatumDef, type, format, formatType, config, omitTimeFormatConfig // axis doesn't use config.timeFormat
) {
    var _a;
    if ($5635b9434d5f29af$export$d3118478e73d0a2c(formatType)) return undefined; // handled in encode block
    if ((0, $2hAmp.isFieldOrDatumDefForTimeFormat)(fieldOrDatumDef)) {
        const timeUnit = (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? (_a = (0, $aMeqD.normalizeTimeUnit)(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined;
        return $5635b9434d5f29af$export$94f4d87fad5dcf9a(format, timeUnit, config, omitTimeFormatConfig);
    }
    return $5635b9434d5f29af$export$688d13a530c5dcbc(type, format, config);
}
function $5635b9434d5f29af$export$8c6660a058edcba1(formatType, fieldOrDatumDef, scaleType) {
    if (formatType && ((0, $4xdf1.isSignalRef)(formatType) || formatType === "number" || formatType === "time")) return formatType;
    if ((0, $2hAmp.isFieldOrDatumDefForTimeFormat)(fieldOrDatumDef) && scaleType !== "time" && scaleType !== "utc") return "time";
    return undefined;
}
function $5635b9434d5f29af$export$688d13a530c5dcbc(type, specifiedFormat, config) {
    // Specified format in axis/legend has higher precedence than fieldDef.format
    if ((0, $2bi3s.isString)(specifiedFormat)) return specifiedFormat;
    if (type === (0, $9LX7L.QUANTITATIVE)) // we only apply the default if the field is quantitative
    return config.numberFormat;
    return undefined;
}
function $5635b9434d5f29af$export$94f4d87fad5dcf9a(specifiedFormat, timeUnit, config, omitTimeFormatConfig) {
    if (specifiedFormat) return specifiedFormat;
    if (timeUnit) return {
        signal: (0, $aMeqD.timeUnitSpecifierExpression)(timeUnit)
    };
    return omitTimeFormatConfig ? undefined : config.timeFormat;
}
function $5635b9434d5f29af$var$formatExpr(field, format) {
    return `format(${field}, "${format || ""}")`;
}
function $5635b9434d5f29af$var$binNumberFormatExpr(field, format, formatType, config) {
    var _a;
    if ($5635b9434d5f29af$export$d3118478e73d0a2c(formatType)) return $5635b9434d5f29af$var$customFormatExpr(formatType, field, format);
    return $5635b9434d5f29af$var$formatExpr(field, (_a = (0, $2bi3s.isString)(format) ? format : undefined) !== null && _a !== void 0 ? _a : config.numberFormat);
}
function $5635b9434d5f29af$export$107ddc23e03004c4(startField, endField, format, formatType, config) {
    const start = $5635b9434d5f29af$var$binNumberFormatExpr(startField, format, formatType, config);
    const end = $5635b9434d5f29af$var$binNumberFormatExpr(endField, format, formatType, config);
    return `${(0, $6EUuI.fieldValidPredicate)(startField, false)} ? "null" : ${start} + "${$5635b9434d5f29af$export$f2f47f2815d8e8b}" + ${end}`;
}
function $5635b9434d5f29af$export$372886808459361b(field, timeUnit, format, rawTimeFormat, isUTCScale) {
    if (!timeUnit || format) {
        // If there is no time unit, or if user explicitly specifies format for axis/legend/text.
        format = (0, $2bi3s.isString)(format) ? format : rawTimeFormat; // only use provided timeFormat if there is no timeUnit.
        return `${isUTCScale ? "utc" : "time"}Format(${field}, '${format}')`;
    } else return (0, $aMeqD.formatExpression)(timeUnit, field, isUTCScale);
}

});
parcelRegister("6EUuI", function(module, exports) {

$parcel$export(module.exports, "isSelectionPredicate", () => $4d924d1879a30878$export$9954e9ebec7fc7d4);
$parcel$export(module.exports, "isFieldEqualPredicate", () => $4d924d1879a30878$export$2ea36cd00a47a8fb);
$parcel$export(module.exports, "isFieldLTPredicate", () => $4d924d1879a30878$export$7bf75761d56e830e);
$parcel$export(module.exports, "isFieldLTEPredicate", () => $4d924d1879a30878$export$3701e3cfbb1a4ac3);
$parcel$export(module.exports, "isFieldGTPredicate", () => $4d924d1879a30878$export$e70a9a6917847b35);
$parcel$export(module.exports, "isFieldGTEPredicate", () => $4d924d1879a30878$export$7e83617ec620bdd7);
$parcel$export(module.exports, "isFieldRangePredicate", () => $4d924d1879a30878$export$437884ef5409405);
$parcel$export(module.exports, "isFieldOneOfPredicate", () => $4d924d1879a30878$export$afe0c8f1ac5f1b7e);
$parcel$export(module.exports, "isFieldPredicate", () => $4d924d1879a30878$export$adf2eec34a56c783);
$parcel$export(module.exports, "fieldFilterExpression", () => $4d924d1879a30878$export$ccb5f51d28404da3);
$parcel$export(module.exports, "fieldValidPredicate", () => $4d924d1879a30878$export$1df0dac7a76481ec);
$parcel$export(module.exports, "normalizePredicate", () => $4d924d1879a30878$export$991a3c8a0a0c0b5b);

var $2bi3s = parcelRequire("2bi3s");

var $2hAmp = parcelRequire("2hAmp");

var $aMeqD = parcelRequire("aMeqD");

var $4xdf1 = parcelRequire("4xdf1");
function $4d924d1879a30878$export$9954e9ebec7fc7d4(predicate) {
    return predicate === null || predicate === void 0 ? void 0 : predicate["selection"];
}
function $4d924d1879a30878$export$2ea36cd00a47a8fb(predicate) {
    return predicate && !!predicate.field && predicate.equal !== undefined;
}
function $4d924d1879a30878$export$7bf75761d56e830e(predicate) {
    return predicate && !!predicate.field && predicate.lt !== undefined;
}
function $4d924d1879a30878$export$3701e3cfbb1a4ac3(predicate) {
    return predicate && !!predicate.field && predicate.lte !== undefined;
}
function $4d924d1879a30878$export$e70a9a6917847b35(predicate) {
    return predicate && !!predicate.field && predicate.gt !== undefined;
}
function $4d924d1879a30878$export$7e83617ec620bdd7(predicate) {
    return predicate && !!predicate.field && predicate.gte !== undefined;
}
function $4d924d1879a30878$export$437884ef5409405(predicate) {
    if (predicate && predicate.field) {
        if ((0, $2bi3s.isArray)(predicate.range) && predicate.range.length === 2) return true;
        else if ((0, $4xdf1.isSignalRef)(predicate.range)) return true;
    }
    return false;
}
function $4d924d1879a30878$export$afe0c8f1ac5f1b7e(predicate) {
    return predicate && !!predicate.field && ((0, $2bi3s.isArray)(predicate.oneOf) || (0, $2bi3s.isArray)(predicate.in) // backward compatibility
    );
}
function $4d924d1879a30878$export$4a642032cb594497(predicate) {
    return predicate && !!predicate.field && predicate.valid !== undefined;
}
function $4d924d1879a30878$export$adf2eec34a56c783(predicate) {
    return $4d924d1879a30878$export$afe0c8f1ac5f1b7e(predicate) || $4d924d1879a30878$export$2ea36cd00a47a8fb(predicate) || $4d924d1879a30878$export$437884ef5409405(predicate) || $4d924d1879a30878$export$7bf75761d56e830e(predicate) || $4d924d1879a30878$export$e70a9a6917847b35(predicate) || $4d924d1879a30878$export$3701e3cfbb1a4ac3(predicate) || $4d924d1879a30878$export$7e83617ec620bdd7(predicate);
}
function $4d924d1879a30878$var$predicateValueExpr(v, timeUnit) {
    return (0, $2hAmp.valueExpr)(v, {
        timeUnit: timeUnit,
        wrapTime: true
    });
}
function $4d924d1879a30878$var$predicateValuesExpr(vals, timeUnit) {
    return vals.map((v)=>$4d924d1879a30878$var$predicateValueExpr(v, timeUnit));
}
function $4d924d1879a30878$export$ccb5f51d28404da3(predicate, useInRange = true) {
    var _a;
    const { field: field } = predicate;
    const timeUnit = (_a = (0, $aMeqD.normalizeTimeUnit)(predicate.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
    const fieldExpr = timeUnit ? // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
    // TODO: support utc
    "time(" + (0, $aMeqD.fieldExpr)(timeUnit, field) + ")" : (0, $2hAmp.vgField)(predicate, {
        expr: "datum"
    });
    if ($4d924d1879a30878$export$2ea36cd00a47a8fb(predicate)) return fieldExpr + "===" + $4d924d1879a30878$var$predicateValueExpr(predicate.equal, timeUnit);
    else if ($4d924d1879a30878$export$7bf75761d56e830e(predicate)) {
        const upper = predicate.lt;
        return `${fieldExpr}<${$4d924d1879a30878$var$predicateValueExpr(upper, timeUnit)}`;
    } else if ($4d924d1879a30878$export$e70a9a6917847b35(predicate)) {
        const lower = predicate.gt;
        return `${fieldExpr}>${$4d924d1879a30878$var$predicateValueExpr(lower, timeUnit)}`;
    } else if ($4d924d1879a30878$export$3701e3cfbb1a4ac3(predicate)) {
        const upper = predicate.lte;
        return `${fieldExpr}<=${$4d924d1879a30878$var$predicateValueExpr(upper, timeUnit)}`;
    } else if ($4d924d1879a30878$export$7e83617ec620bdd7(predicate)) {
        const lower = predicate.gte;
        return `${fieldExpr}>=${$4d924d1879a30878$var$predicateValueExpr(lower, timeUnit)}`;
    } else if ($4d924d1879a30878$export$afe0c8f1ac5f1b7e(predicate)) return `indexof([${$4d924d1879a30878$var$predicateValuesExpr(predicate.oneOf, timeUnit).join(",")}], ${fieldExpr}) !== -1`;
    else if ($4d924d1879a30878$export$4a642032cb594497(predicate)) return $4d924d1879a30878$export$1df0dac7a76481ec(fieldExpr, predicate.valid);
    else if ($4d924d1879a30878$export$437884ef5409405(predicate)) {
        const { range: range } = predicate;
        const lower = (0, $4xdf1.isSignalRef)(range) ? {
            signal: `${range.signal}[0]`
        } : range[0];
        const upper = (0, $4xdf1.isSignalRef)(range) ? {
            signal: `${range.signal}[1]`
        } : range[1];
        if (lower !== null && upper !== null && useInRange) return "inrange(" + fieldExpr + ", [" + $4d924d1879a30878$var$predicateValueExpr(lower, timeUnit) + ", " + $4d924d1879a30878$var$predicateValueExpr(upper, timeUnit) + "])";
        const exprs = [];
        if (lower !== null) exprs.push(`${fieldExpr} >= ${$4d924d1879a30878$var$predicateValueExpr(lower, timeUnit)}`);
        if (upper !== null) exprs.push(`${fieldExpr} <= ${$4d924d1879a30878$var$predicateValueExpr(upper, timeUnit)}`);
        return exprs.length > 0 ? exprs.join(" && ") : "true";
    }
    /* istanbul ignore next: it should never reach here */ throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);
}
function $4d924d1879a30878$export$1df0dac7a76481ec(fieldExpr, valid = true) {
    if (valid) return `isValid(${fieldExpr}) && isFinite(+${fieldExpr})`;
    else return `!isValid(${fieldExpr}) || !isFinite(+${fieldExpr})`;
}
function $4d924d1879a30878$export$991a3c8a0a0c0b5b(f) {
    var _a;
    if ($4d924d1879a30878$export$adf2eec34a56c783(f) && f.timeUnit) return Object.assign(Object.assign({}, f), {
        timeUnit: (_a = (0, $aMeqD.normalizeTimeUnit)(f.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit
    });
    return f;
}

});
parcelRegister("aMeqD", function(module, exports) {

$parcel$export(module.exports, "TIMEUNIT_PARTS", () => $7d89944965267650$export$9e75d2d0857e5b89);
$parcel$export(module.exports, "isLocalSingleTimeUnit", () => $7d89944965267650$export$482cc3bc9ded6549);
$parcel$export(module.exports, "getTimeUnitParts", () => $7d89944965267650$export$62ffb54904f46716);
$parcel$export(module.exports, "fieldExpr", () => $7d89944965267650$export$8ea2dcfc52d30df8);
$parcel$export(module.exports, "timeUnitSpecifierExpression", () => $7d89944965267650$export$7e5106db74098d91);
$parcel$export(module.exports, "formatExpression", () => $7d89944965267650$export$495510c2c593da91);
$parcel$export(module.exports, "normalizeTimeUnit", () => $7d89944965267650$export$55772a278571a5e);
$parcel$export(module.exports, "timeUnitToString", () => $7d89944965267650$export$bf3ff4bb58078437);

var $8d45l = parcelRequire("8d45l");

var $2bi3s = parcelRequire("2bi3s");

var $8PxNP = parcelRequire("8PxNP");

var $7k4G6 = parcelRequire("7k4G6");
var $7d89944965267650$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $7d89944965267650$export$7f041f81d36fb4a3 = {
    year: 1,
    quarter: 1,
    month: 1,
    week: 1,
    day: 1,
    dayofyear: 1,
    date: 1,
    hours: 1,
    minutes: 1,
    seconds: 1,
    milliseconds: 1
};
const $7d89944965267650$export$9e75d2d0857e5b89 = (0, $7k4G6.keys)($7d89944965267650$export$7f041f81d36fb4a3);
function $7d89944965267650$export$482cc3bc9ded6549(timeUnit) {
    return !!$7d89944965267650$export$7f041f81d36fb4a3[timeUnit];
}
const $7d89944965267650$export$3a43e58f45587b4f = {
    utcyear: 1,
    utcquarter: 1,
    utcmonth: 1,
    utcweek: 1,
    utcday: 1,
    utcdayofyear: 1,
    utcdate: 1,
    utchours: 1,
    utcminutes: 1,
    utcseconds: 1,
    utcmilliseconds: 1
};
const $7d89944965267650$export$6608fc3c407b4d13 = {
    yearquarter: 1,
    yearquartermonth: 1,
    yearmonth: 1,
    yearmonthdate: 1,
    yearmonthdatehours: 1,
    yearmonthdatehoursminutes: 1,
    yearmonthdatehoursminutesseconds: 1,
    yearweek: 1,
    yearweekday: 1,
    yearweekdayhours: 1,
    yearweekdayhoursminutes: 1,
    yearweekdayhoursminutesseconds: 1,
    yeardayofyear: 1,
    quartermonth: 1,
    monthdate: 1,
    monthdatehours: 1,
    monthdatehoursminutes: 1,
    monthdatehoursminutesseconds: 1,
    weekday: 1,
    weeksdayhours: 1,
    weekdayhoursminutes: 1,
    weekdayhoursminutesseconds: 1,
    dayhours: 1,
    dayhoursminutes: 1,
    dayhoursminutesseconds: 1,
    hoursminutes: 1,
    hoursminutesseconds: 1,
    minutesseconds: 1,
    secondsmilliseconds: 1
};
const $7d89944965267650$export$50d21df1e8000ea2 = {
    utcyearquarter: 1,
    utcyearquartermonth: 1,
    utcyearmonth: 1,
    utcyearmonthdate: 1,
    utcyearmonthdatehours: 1,
    utcyearmonthdatehoursminutes: 1,
    utcyearmonthdatehoursminutesseconds: 1,
    utcyearweek: 1,
    utcyearweekday: 1,
    utcyearweekdayhours: 1,
    utcyearweekdayhoursminutes: 1,
    utcyearweekdayhoursminutesseconds: 1,
    utcyeardayofyear: 1,
    utcquartermonth: 1,
    utcmonthdate: 1,
    utcmonthdatehours: 1,
    utcmonthdatehoursminutes: 1,
    utcmonthdatehoursminutesseconds: 1,
    utcweekday: 1,
    utcweeksdayhours: 1,
    utcweekdayhoursminutes: 1,
    utcweekdayhoursminutesseconds: 1,
    utcdayhours: 1,
    utcdayhoursminutes: 1,
    utcdayhoursminutesseconds: 1,
    utchoursminutes: 1,
    utchoursminutesseconds: 1,
    utcminutesseconds: 1,
    utcsecondsmilliseconds: 1
};
function $7d89944965267650$export$329168b9189fae3b(t) {
    return t.startsWith("utc");
}
function $7d89944965267650$export$58d57095e6d508bd(t) {
    return t.substr(3);
}
const $7d89944965267650$export$855c4b797bb51ff0 = {
    "year-month": "%b %Y ",
    "year-month-date": "%b %d, %Y "
};
function $7d89944965267650$export$62ffb54904f46716(timeUnit) {
    const parts = [];
    for (const part of $7d89944965267650$export$9e75d2d0857e5b89)if ($7d89944965267650$export$fde95e8dc26dfc9e(timeUnit, part)) parts.push(part);
    return parts;
}
function $7d89944965267650$export$fde95e8dc26dfc9e(fullTimeUnit, timeUnit) {
    const index = fullTimeUnit.indexOf(timeUnit);
    if (index < 0) return false;
    // exclude milliseconds
    if (index > 0 && timeUnit === "seconds" && fullTimeUnit.charAt(index - 1) === "i") return false;
    // exclude dayofyear
    if (fullTimeUnit.length > index + 3 && timeUnit === "day" && fullTimeUnit.charAt(index + 3) === "o") return false;
    if (index > 0 && timeUnit === "year" && fullTimeUnit.charAt(index - 1) === "f") return false;
    return true;
}
function $7d89944965267650$export$8ea2dcfc52d30df8(fullTimeUnit, field, { end: end } = {
    end: false
}) {
    const fieldRef = (0, $7k4G6.accessPathWithDatum)(field);
    const utc = $7d89944965267650$export$329168b9189fae3b(fullTimeUnit) ? "utc" : "";
    function func(timeUnit) {
        if (timeUnit === "quarter") // quarter starting at 0 (0,3,6,9).
        return `(${utc}quarter(${fieldRef})-1)`;
        else return `${utc}${timeUnit}(${fieldRef})`;
    }
    let lastTimeUnit;
    const dateExpr = {};
    for (const part of $7d89944965267650$export$9e75d2d0857e5b89)if ($7d89944965267650$export$fde95e8dc26dfc9e(fullTimeUnit, part)) {
        dateExpr[part] = func(part);
        lastTimeUnit = part;
    }
    if (end) dateExpr[lastTimeUnit] += "+1";
    return (0, $8PxNP.dateTimeExprToExpr)(dateExpr);
}
function $7d89944965267650$export$7e5106db74098d91(timeUnit) {
    if (!timeUnit) return undefined;
    const timeUnitParts = $7d89944965267650$export$62ffb54904f46716(timeUnit);
    return `timeUnitSpecifier(${(0, (/*@__PURE__*/$parcel$interopDefault($8d45l)))(timeUnitParts)}, ${(0, (/*@__PURE__*/$parcel$interopDefault($8d45l)))($7d89944965267650$export$855c4b797bb51ff0)})`;
}
function $7d89944965267650$export$495510c2c593da91(timeUnit, field, isUTCScale) {
    if (!timeUnit) return undefined;
    const expr = $7d89944965267650$export$7e5106db74098d91(timeUnit);
    // We only use utcFormat for utc scale
    // For utc time units, the data is already converted as a part of timeUnit transform.
    // Thus, utc time units should use timeFormat to avoid shifting the time twice.
    const utc = isUTCScale || $7d89944965267650$export$329168b9189fae3b(timeUnit);
    return `${utc ? "utc" : "time"}Format(${field}, ${expr})`;
}
function $7d89944965267650$export$55772a278571a5e(timeUnit) {
    if (!timeUnit) return undefined;
    let params;
    if ((0, $2bi3s.isString)(timeUnit)) params = {
        unit: timeUnit
    };
    else if ((0, $2bi3s.isObject)(timeUnit)) params = Object.assign(Object.assign({}, timeUnit), timeUnit.unit ? {
        unit: timeUnit.unit
    } : {});
    if ($7d89944965267650$export$329168b9189fae3b(params.unit)) {
        params.utc = true;
        params.unit = $7d89944965267650$export$58d57095e6d508bd(params.unit);
    }
    return params;
}
function $7d89944965267650$export$bf3ff4bb58078437(tu) {
    const _a = $7d89944965267650$export$55772a278571a5e(tu), { utc: utc } = _a, rest = $7d89944965267650$var$__rest(_a, [
        "utc"
    ]);
    if (rest.unit) return (utc ? "utc" : "") + (0, $7k4G6.keys)(rest).map((p)=>(0, $7k4G6.varName)(`${p === "unit" ? "" : `_${p}_`}${rest[p]}`)).join("");
    else // when maxbins is specified instead of units
    return (utc ? "utc" : "") + "timeunit" + (0, $7k4G6.keys)(rest).map((p)=>(0, $7k4G6.varName)(`_${p}_${rest[p]}`)).join("");
}

});
parcelRegister("8PxNP", function(module, exports) {

$parcel$export(module.exports, "isDateTime", () => $66dd4ea53831443f$export$d1ee9fa22c2003b7);
$parcel$export(module.exports, "dateTimeToExpr", () => $66dd4ea53831443f$export$b4f4f581d712e8);
$parcel$export(module.exports, "dateTimeExprToExpr", () => $66dd4ea53831443f$export$c3999828ca4d09b9);
$parcel$export(module.exports, "dateTimeToTimestamp", () => $66dd4ea53831443f$export$dde8ee3c6f45f49a);
// DateTime definition object

var $2bi3s = parcelRequire("2bi3s");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $aMeqD = parcelRequire("aMeqD");

var $7k4G6 = parcelRequire("7k4G6");
function $66dd4ea53831443f$export$d1ee9fa22c2003b7(o) {
    if (o && (0, $2bi3s.isObject)(o)) for (const part of (0, $aMeqD.TIMEUNIT_PARTS)){
        if (part in o) return true;
    }
    return false;
}
const $66dd4ea53831443f$export$f9a766aa2475e8ba = [
    "january",
    "february",
    "march",
    "april",
    "may",
    "june",
    "july",
    "august",
    "september",
    "october",
    "november",
    "december"
];
const $66dd4ea53831443f$export$77dc783e1d256619 = $66dd4ea53831443f$export$f9a766aa2475e8ba.map((m)=>m.substr(0, 3));
const $66dd4ea53831443f$export$b387b66963374517 = [
    "sunday",
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday"
];
const $66dd4ea53831443f$export$f07d8e0f382b7f9d = $66dd4ea53831443f$export$b387b66963374517.map((d)=>d.substr(0, 3));
function $66dd4ea53831443f$var$normalizeQuarter(q) {
    if ((0, $7k4G6.isNumeric)(q)) q = +q;
    if ((0, $2bi3s.isNumber)(q)) {
        if (q > 4) $3XBQv.warn($bHNid.invalidTimeUnit("quarter", q));
        // We accept 1-based quarter, so need to readjust to 0-based quarter
        return q - 1;
    } else // Invalid quarter
    throw new Error($bHNid.invalidTimeUnit("quarter", q));
}
function $66dd4ea53831443f$var$normalizeMonth(m) {
    if ((0, $7k4G6.isNumeric)(m)) m = +m;
    if ((0, $2bi3s.isNumber)(m)) // We accept 1-based month, so need to readjust to 0-based month
    return m - 1;
    else {
        const lowerM = m.toLowerCase();
        const monthIndex = $66dd4ea53831443f$export$f9a766aa2475e8ba.indexOf(lowerM);
        if (monthIndex !== -1) return monthIndex; // 0 for january, ...
        const shortM = lowerM.substr(0, 3);
        const shortMonthIndex = $66dd4ea53831443f$export$77dc783e1d256619.indexOf(shortM);
        if (shortMonthIndex !== -1) return shortMonthIndex;
        // Invalid month
        throw new Error($bHNid.invalidTimeUnit("month", m));
    }
}
function $66dd4ea53831443f$var$normalizeDay(d) {
    if ((0, $7k4G6.isNumeric)(d)) d = +d;
    if ((0, $2bi3s.isNumber)(d)) // mod so that this can be both 0-based where 0 = sunday
    // and 1-based where 7=sunday
    return d % 7;
    else {
        const lowerD = d.toLowerCase();
        const dayIndex = $66dd4ea53831443f$export$b387b66963374517.indexOf(lowerD);
        if (dayIndex !== -1) return dayIndex; // 0 for january, ...
        const shortD = lowerD.substr(0, 3);
        const shortDayIndex = $66dd4ea53831443f$export$f07d8e0f382b7f9d.indexOf(shortD);
        if (shortDayIndex !== -1) return shortDayIndex;
        // Invalid day
        throw new Error($bHNid.invalidTimeUnit("day", d));
    }
}
/**
 * @param d the date.
 * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.
 * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]
 */ function $66dd4ea53831443f$var$dateTimeParts(d, normalize) {
    const parts = [];
    if (normalize && d.day !== undefined) {
        if ((0, $7k4G6.keys)(d).length > 1) {
            $3XBQv.warn($bHNid.droppedDay(d));
            d = (0, $7k4G6.duplicate)(d);
            delete d.day;
        }
    }
    if (d.year !== undefined) parts.push(d.year);
    else // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega
    // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).
    parts.push(2012);
    if (d.month !== undefined) {
        const month = normalize ? $66dd4ea53831443f$var$normalizeMonth(d.month) : d.month;
        parts.push(month);
    } else if (d.quarter !== undefined) {
        const quarter = normalize ? $66dd4ea53831443f$var$normalizeQuarter(d.quarter) : d.quarter;
        parts.push((0, $2bi3s.isNumber)(quarter) ? quarter * 3 : quarter + "*3");
    } else parts.push(0); // months start at zero in JS
    if (d.date !== undefined) parts.push(d.date);
    else if (d.day !== undefined) {
        // HACK: Day only works as a standalone unit
        // This is only correct because we always set year to 2006 for day
        const day = normalize ? $66dd4ea53831443f$var$normalizeDay(d.day) : d.day;
        parts.push((0, $2bi3s.isNumber)(day) ? day + 1 : day + "+1");
    } else parts.push(1); // Date starts at 1 in JS
    // Note: can't use TimeUnit enum here as importing it will create
    // circular dependency problem!
    for (const timeUnit of [
        "hours",
        "minutes",
        "seconds",
        "milliseconds"
    ]){
        const unit = d[timeUnit];
        parts.push(typeof unit === "undefined" ? 0 : unit);
    }
    return parts;
}
function $66dd4ea53831443f$export$b4f4f581d712e8(d) {
    const parts = $66dd4ea53831443f$var$dateTimeParts(d, true);
    const string = parts.join(", ");
    if (d.utc) return `utc(${string})`;
    else return `datetime(${string})`;
}
function $66dd4ea53831443f$export$c3999828ca4d09b9(d) {
    const parts = $66dd4ea53831443f$var$dateTimeParts(d, false);
    const string = parts.join(", ");
    if (d.utc) return `utc(${string})`;
    else return `datetime(${string})`;
}
function $66dd4ea53831443f$export$dde8ee3c6f45f49a(d) {
    const parts = $66dd4ea53831443f$var$dateTimeParts(d, true);
    if (d.utc) return +new Date(Date.UTC(...parts));
    else return +new Date(...parts);
}

});
parcelRegister("3XBQv", function(module, exports) {

$parcel$export(module.exports, "reset", () => $2e243d2a66d5fc67$export$aad8462122ac592b);
$parcel$export(module.exports, "set", () => $2e243d2a66d5fc67$export$adaa4cf7ef1b65be);
$parcel$export(module.exports, "warn", () => $2e243d2a66d5fc67$export$c106dd0671a0fc2d);
$parcel$export(module.exports, "debug", () => $2e243d2a66d5fc67$export$1c9f709888824e05);
$parcel$export(module.exports, "message", () => (parcelRequire("bHNid")));
/**
 * Vega-Lite's singleton logger utility.
 */ 
var $2bi3s = parcelRequire("2bi3s");

var $bHNid = parcelRequire("bHNid");
var $2e243d2a66d5fc67$var$__classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
};
var $2e243d2a66d5fc67$var$__classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
};
var $2e243d2a66d5fc67$var$_level;
/**
 * Main (default) Vega Logger instance for Vega-Lite.
 */ const $2e243d2a66d5fc67$var$main = (0, $2bi3s.logger)((0, $2bi3s.Warn));
let $2e243d2a66d5fc67$var$current = $2e243d2a66d5fc67$var$main;
class $2e243d2a66d5fc67$export$58610b8a4e0592d7 {
    constructor(){
        this.warns = [];
        this.infos = [];
        this.debugs = [];
        $2e243d2a66d5fc67$var$_level.set(this, (0, $2bi3s.Warn));
    }
    level(_) {
        if (_) {
            $2e243d2a66d5fc67$var$__classPrivateFieldSet(this, $2e243d2a66d5fc67$var$_level, _);
            return this;
        }
        return $2e243d2a66d5fc67$var$__classPrivateFieldGet(this, $2e243d2a66d5fc67$var$_level);
    }
    warn(...args) {
        if ($2e243d2a66d5fc67$var$__classPrivateFieldGet(this, $2e243d2a66d5fc67$var$_level) >= (0, $2bi3s.Warn)) this.warns.push(...args);
        return this;
    }
    info(...args) {
        if ($2e243d2a66d5fc67$var$__classPrivateFieldGet(this, $2e243d2a66d5fc67$var$_level) >= (0, $2bi3s.Info)) this.infos.push(...args);
        return this;
    }
    debug(...args) {
        if ($2e243d2a66d5fc67$var$__classPrivateFieldGet(this, $2e243d2a66d5fc67$var$_level) >= (0, $2bi3s.Debug)) this.debugs.push(...args);
        return this;
    }
    error(...args) {
        if ($2e243d2a66d5fc67$var$__classPrivateFieldGet(this, $2e243d2a66d5fc67$var$_level) >= (0, $2bi3s.Error)) throw Error(...args);
        return this;
    }
}
$2e243d2a66d5fc67$var$_level = new WeakMap();
function $2e243d2a66d5fc67$export$4997ffc0176396a6(f) {
    return ()=>{
        $2e243d2a66d5fc67$var$current = new $2e243d2a66d5fc67$export$58610b8a4e0592d7();
        f($2e243d2a66d5fc67$var$current);
        $2e243d2a66d5fc67$export$aad8462122ac592b();
    };
}
function $2e243d2a66d5fc67$export$adaa4cf7ef1b65be(newLogger) {
    $2e243d2a66d5fc67$var$current = newLogger;
    return $2e243d2a66d5fc67$var$current;
}
function $2e243d2a66d5fc67$export$aad8462122ac592b() {
    $2e243d2a66d5fc67$var$current = $2e243d2a66d5fc67$var$main;
    return $2e243d2a66d5fc67$var$current;
}
function $2e243d2a66d5fc67$export$a3bc9b8ed74fc(...args) {
    $2e243d2a66d5fc67$var$current.error(...args);
}
function $2e243d2a66d5fc67$export$c106dd0671a0fc2d(...args) {
    $2e243d2a66d5fc67$var$current.warn(...args);
}
function $2e243d2a66d5fc67$export$a80b3bd66acc52ff(...args) {
    $2e243d2a66d5fc67$var$current.info(...args);
}
function $2e243d2a66d5fc67$export$1c9f709888824e05(...args) {
    $2e243d2a66d5fc67$var$current.debug(...args);
}

});
parcelRegister("bHNid", function(module, exports) {

$parcel$export(module.exports, "invalidSpec", () => $8859f260fc521db9$export$9dbcd1c8a2b5bd91);
$parcel$export(module.exports, "FIT_NON_SINGLE", () => $8859f260fc521db9$export$f837cf7e79336c44);
$parcel$export(module.exports, "containerSizeNonSingle", () => $8859f260fc521db9$export$7fb0aac21a98bc42);
$parcel$export(module.exports, "containerSizeNotCompatibleWithAutosize", () => $8859f260fc521db9$export$52d1c815f3cbd863);
$parcel$export(module.exports, "droppingFit", () => $8859f260fc521db9$export$fe156dce5af1de33);
$parcel$export(module.exports, "unknownField", () => $8859f260fc521db9$export$b5ee26b2ac11a6e2);
$parcel$export(module.exports, "cannotProjectOnChannelWithoutField", () => $8859f260fc521db9$export$31a799dad16547cd);
$parcel$export(module.exports, "cannotProjectAggregate", () => $8859f260fc521db9$export$1780eb534fc00a06);
$parcel$export(module.exports, "nearestNotSupportForContinuous", () => $8859f260fc521db9$export$dc469a728284d594);
$parcel$export(module.exports, "selectionNotSupported", () => $8859f260fc521db9$export$636d86a842a1746a);
$parcel$export(module.exports, "selectionNotFound", () => $8859f260fc521db9$export$4825c2b25249ed73);
$parcel$export(module.exports, "SCALE_BINDINGS_CONTINUOUS", () => $8859f260fc521db9$export$6f0e5222e762211);
$parcel$export(module.exports, "LEGEND_BINDINGS_MUST_HAVE_PROJECTION", () => $8859f260fc521db9$export$63a5a95b87db521d);
$parcel$export(module.exports, "noSameUnitLookup", () => $8859f260fc521db9$export$702504df6930becc);
$parcel$export(module.exports, "NEEDS_SAME_SELECTION", () => $8859f260fc521db9$export$7783bac94618e06d);
$parcel$export(module.exports, "INTERVAL_INITIALIZED_WITH_X_Y", () => $8859f260fc521db9$export$8c02fd48657c359d);
$parcel$export(module.exports, "noSuchRepeatedValue", () => $8859f260fc521db9$export$a3d609a8b8e32a2a);
$parcel$export(module.exports, "columnsNotSupportByRowCol", () => $8859f260fc521db9$export$19aa1f4dd1f11e3b);
$parcel$export(module.exports, "CONCAT_CANNOT_SHARE_AXIS", () => $8859f260fc521db9$export$6236bdf2743542b);
$parcel$export(module.exports, "unrecognizedParse", () => $8859f260fc521db9$export$f52a4fa5cebf18b);
$parcel$export(module.exports, "differentParse", () => $8859f260fc521db9$export$4f65c15d22c33aba);
$parcel$export(module.exports, "ADD_SAME_CHILD_TWICE", () => $8859f260fc521db9$export$805736ea1d39b442);
$parcel$export(module.exports, "invalidTransformIgnored", () => $8859f260fc521db9$export$d5245352863e7696);
$parcel$export(module.exports, "NO_FIELDS_NEEDS_AS", () => $8859f260fc521db9$export$5535f3f922bb00dd);
$parcel$export(module.exports, "customFormatTypeNotAllowed", () => $8859f260fc521db9$export$238ce4d06faaf572);
$parcel$export(module.exports, "projectionOverridden", () => $8859f260fc521db9$export$120d81a66821ac64);
$parcel$export(module.exports, "REPLACE_ANGLE_WITH_THETA", () => $8859f260fc521db9$export$2867d30ae3103d74);
$parcel$export(module.exports, "primitiveChannelDef", () => $8859f260fc521db9$export$540326b476f9ba);
$parcel$export(module.exports, "invalidFieldType", () => $8859f260fc521db9$export$ae2715b5267eede1);
$parcel$export(module.exports, "invalidFieldTypeForCountAggregate", () => $8859f260fc521db9$export$92ecf1860d3e800b);
$parcel$export(module.exports, "invalidAggregate", () => $8859f260fc521db9$export$37afcc8be0ded3d6);
$parcel$export(module.exports, "missingFieldType", () => $8859f260fc521db9$export$6500e180308aa3f9);
$parcel$export(module.exports, "droppingColor", () => $8859f260fc521db9$export$90aaf5a4116f943d);
$parcel$export(module.exports, "emptyFieldDef", () => $8859f260fc521db9$export$f69516b16d241448);
$parcel$export(module.exports, "latLongDeprecated", () => $8859f260fc521db9$export$f4747bc51a5f12df);
$parcel$export(module.exports, "LINE_WITH_VARYING_SIZE", () => $8859f260fc521db9$export$4332252cd6830792);
$parcel$export(module.exports, "incompatibleChannel", () => $8859f260fc521db9$export$31361d6ceb402d24);
$parcel$export(module.exports, "invalidEncodingChannel", () => $8859f260fc521db9$export$b5c8a1b8defb0fc5);
$parcel$export(module.exports, "facetChannelShouldBeDiscrete", () => $8859f260fc521db9$export$34157aac56fef6ac);
$parcel$export(module.exports, "facetChannelDropped", () => $8859f260fc521db9$export$edc611c9363003f3);
$parcel$export(module.exports, "discreteChannelCannotEncode", () => $8859f260fc521db9$export$c448ee6ca9b87fb6);
$parcel$export(module.exports, "rangeMarkAlignmentCannotBeExpression", () => $8859f260fc521db9$export$2f8c2e07f005232f);
$parcel$export(module.exports, "lineWithRange", () => $8859f260fc521db9$export$358a68a16e8c941f);
$parcel$export(module.exports, "orientOverridden", () => $8859f260fc521db9$export$a3eed06d0a8a43f1);
$parcel$export(module.exports, "CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN", () => $8859f260fc521db9$export$409c4b4527b85810);
$parcel$export(module.exports, "RANGE_STEP_DEPRECATED", () => $8859f260fc521db9$export$1ec9c3dd323afa52);
$parcel$export(module.exports, "cannotUseScalePropertyWithNonColor", () => $8859f260fc521db9$export$3e67e2f3443e71f3);
$parcel$export(module.exports, "unaggregateDomainHasNoEffectForRawField", () => $8859f260fc521db9$export$e88ddedf09f217cd);
$parcel$export(module.exports, "unaggregateDomainWithNonSharedDomainOp", () => $8859f260fc521db9$export$f9ed6fb8ade901dd);
$parcel$export(module.exports, "unaggregatedDomainWithLogScale", () => $8859f260fc521db9$export$e28b272b8ad97ff4);
$parcel$export(module.exports, "cannotApplySizeToNonOrientedMark", () => $8859f260fc521db9$export$47982f53f583df49);
$parcel$export(module.exports, "scaleTypeNotWorkWithChannel", () => $8859f260fc521db9$export$4eae8a97df34b3dc);
$parcel$export(module.exports, "scaleTypeNotWorkWithFieldDef", () => $8859f260fc521db9$export$34c1afc246351594);
$parcel$export(module.exports, "scalePropertyNotWorkWithScaleType", () => $8859f260fc521db9$export$9c1237b965734d64);
$parcel$export(module.exports, "scaleTypeNotWorkWithMark", () => $8859f260fc521db9$export$84371cca1c8bc6b);
$parcel$export(module.exports, "stepDropped", () => $8859f260fc521db9$export$8b922b89109186ab);
$parcel$export(module.exports, "mergeConflictingProperty", () => $8859f260fc521db9$export$26b0f4b4435a0f9d);
$parcel$export(module.exports, "mergeConflictingDomainProperty", () => $8859f260fc521db9$export$fd9834435ad34942);
$parcel$export(module.exports, "independentScaleMeansIndependentGuide", () => $8859f260fc521db9$export$349bd5821c91f771);
$parcel$export(module.exports, "domainSortDropped", () => $8859f260fc521db9$export$2af377f98834b39a);
$parcel$export(module.exports, "MORE_THAN_ONE_SORT", () => $8859f260fc521db9$export$b033b609d9291c78);
$parcel$export(module.exports, "FACETED_INDEPENDENT_DIFFERENT_SOURCES", () => $8859f260fc521db9$export$bd98fdf4be3d6748);
$parcel$export(module.exports, "FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES", () => $8859f260fc521db9$export$317b4ff94e837f04);
$parcel$export(module.exports, "FACETED_INDEPENDENT_SAME_SOURCE", () => $8859f260fc521db9$export$8a84a5cb7afcc421);
$parcel$export(module.exports, "INVALID_CHANNEL_FOR_AXIS", () => $8859f260fc521db9$export$3ab2dfecb25c8f3f);
$parcel$export(module.exports, "cannotStackRangedMark", () => $8859f260fc521db9$export$dba813791b44e9ff);
$parcel$export(module.exports, "cannotStackNonLinearScale", () => $8859f260fc521db9$export$61123262282a2051);
$parcel$export(module.exports, "stackNonSummativeAggregate", () => $8859f260fc521db9$export$3815f2d91e7c3c0a);
$parcel$export(module.exports, "invalidTimeUnit", () => $8859f260fc521db9$export$4c0d7d399be83160);
$parcel$export(module.exports, "droppedDay", () => $8859f260fc521db9$export$f7f253f533415f05);
$parcel$export(module.exports, "errorBarCenterAndExtentAreNotNeeded", () => $8859f260fc521db9$export$4fb29ee2692e3f98);
$parcel$export(module.exports, "errorBarCenterIsUsedWithWrongExtent", () => $8859f260fc521db9$export$460befd539733d2a);
$parcel$export(module.exports, "errorBarContinuousAxisHasCustomizedAggregate", () => $8859f260fc521db9$export$8a8d31ace4eab1cd);
$parcel$export(module.exports, "errorBand1DNotSupport", () => $8859f260fc521db9$export$51ef607cac541ab4);
$parcel$export(module.exports, "channelRequiredForBinned", () => $8859f260fc521db9$export$3bd9f708f3c80dee);
$parcel$export(module.exports, "channelShouldNotBeUsedForBinned", () => $8859f260fc521db9$export$e38a6e73d839cd74);
$parcel$export(module.exports, "domainRequiredForThresholdScale", () => $8859f260fc521db9$export$5ae688fe1cca7965);

var $fWfT0 = parcelRequire("fWfT0");

var $7k4G6 = parcelRequire("7k4G6");
function $8859f260fc521db9$export$9dbcd1c8a2b5bd91(spec) {
    return `Invalid specification ${JSON.stringify(spec)}. Make sure the specification includes at least one of the following properties: "mark", "layer", "facet", "hconcat", "vconcat", "concat", or "repeat".`;
}
const $8859f260fc521db9$export$f837cf7e79336c44 = 'Autosize "fit" only works for single views and layered views.';
function $8859f260fc521db9$export$7fb0aac21a98bc42(name) {
    const uName = name == "width" ? "Width" : "Height";
    return `${uName} "container" only works for single views and layered views.`;
}
function $8859f260fc521db9$export$52d1c815f3cbd863(name) {
    const uName = name == "width" ? "Width" : "Height";
    const fitDirection = name == "width" ? "x" : "y";
    return `${uName} "container" only works well with autosize "fit" or "fit-${fitDirection}".`;
}
function $8859f260fc521db9$export$fe156dce5af1de33(channel) {
    return channel ? `Dropping "fit-${channel}" because spec has discrete ${(0, $fWfT0.getSizeChannel)(channel)}.` : `Dropping "fit" because spec has discrete size.`;
}
function $8859f260fc521db9$export$b5ee26b2ac11a6e2(channel) {
    return `Unknown field for ${channel}. Cannot calculate view size.`;
}
function $8859f260fc521db9$export$31a799dad16547cd(channel) {
    return `Cannot project a selection on encoding channel "${channel}", which has no field.`;
}
function $8859f260fc521db9$export$1780eb534fc00a06(channel, aggregate) {
    return `Cannot project a selection on encoding channel "${channel}" as it uses an aggregate function ("${aggregate}").`;
}
function $8859f260fc521db9$export$dc469a728284d594(mark) {
    return `The "nearest" transform is not supported for ${mark} marks.`;
}
function $8859f260fc521db9$export$636d86a842a1746a(mark) {
    return `Selection not supported for ${mark} yet.`;
}
function $8859f260fc521db9$export$4825c2b25249ed73(name) {
    return `Cannot find a selection named "${name}".`;
}
const $8859f260fc521db9$export$6f0e5222e762211 = "Scale bindings are currently only supported for scales with unbinned, continuous domains.";
const $8859f260fc521db9$export$63a5a95b87db521d = "Legend bindings are only supported for selections over an individual field or encoding channel.";
function $8859f260fc521db9$export$702504df6930becc(name) {
    return `Cannot define and lookup the "${name}" selection in the same view. ` + `Try moving the lookup into a second, layered view?`;
}
const $8859f260fc521db9$export$7783bac94618e06d = "The same selection must be used to override scale domains in a layered view.";
const $8859f260fc521db9$export$8c02fd48657c359d = 'Interval selections should be initialized using "x" and/or "y" keys.';
function $8859f260fc521db9$export$a3d609a8b8e32a2a(field) {
    return `Unknown repeated value "${field}".`;
}
function $8859f260fc521db9$export$19aa1f4dd1f11e3b(type) {
    return `The "columns" property cannot be used when "${type}" has nested row/column.`;
}
const $8859f260fc521db9$export$6236bdf2743542b = "Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).";
function $8859f260fc521db9$export$f52a4fa5cebf18b(p) {
    return `Unrecognized parse "${p}".`;
}
function $8859f260fc521db9$export$4f65c15d22c33aba(field, local, ancestor) {
    return `An ancestor parsed field "${field}" as ${ancestor} but a child wants to parse the field as ${local}.`;
}
const $8859f260fc521db9$export$805736ea1d39b442 = "Attempt to add the same child twice.";
function $8859f260fc521db9$export$d5245352863e7696(transform) {
    return `Ignoring an invalid transform: ${(0, $7k4G6.stringify)(transform)}.`;
}
const $8859f260fc521db9$export$5535f3f922bb00dd = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.';
function $8859f260fc521db9$export$238ce4d06faaf572(channel) {
    return `Config.customFormatTypes is not true, thus custom format type and format for channel ${channel} are dropped.`;
}
function $8859f260fc521db9$export$120d81a66821ac64(opt) {
    const { parentProjection: parentProjection, projection: projection } = opt;
    return `Layer's shared projection ${(0, $7k4G6.stringify)(parentProjection)} is overridden by a child projection ${(0, $7k4G6.stringify)(projection)}.`;
}
const $8859f260fc521db9$export$2867d30ae3103d74 = "Arc marks uses theta channel rather than angle, replacing angle with theta.";
function $8859f260fc521db9$export$540326b476f9ba(channel, type, value) {
    return `Channel ${channel} is a ${type}. Converted to {value: ${(0, $7k4G6.stringify)(value)}}.`;
}
function $8859f260fc521db9$export$ae2715b5267eede1(type) {
    return `Invalid field type "${type}".`;
}
function $8859f260fc521db9$export$92ecf1860d3e800b(type, aggregate) {
    return `Invalid field type "${type}" for aggregate: "${aggregate}", using "quantitative" instead.`;
}
function $8859f260fc521db9$export$37afcc8be0ded3d6(aggregate) {
    return `Invalid aggregation operator "${aggregate}".`;
}
function $8859f260fc521db9$export$6500e180308aa3f9(channel, newType) {
    return `Missing type for channel "${channel}", using "${newType}" instead.`;
}
function $8859f260fc521db9$export$90aaf5a4116f943d(type, opt) {
    const { fill: fill, stroke: stroke } = opt;
    return `Dropping color ${type} as the plot also has ${fill && stroke ? "fill and stroke" : fill ? "fill" : "stroke"}.`;
}
function $8859f260fc521db9$export$f69516b16d241448(fieldDef, channel) {
    return `Dropping ${(0, $7k4G6.stringify)(fieldDef)} from channel "${channel}" since it does not contain any data field, datum, value, or signal.`;
}
function $8859f260fc521db9$export$f4747bc51a5f12df(channel, type, newChannel) {
    return `${channel}-encoding with type ${type} is deprecated. Replacing with ${newChannel}-encoding.`;
}
const $8859f260fc521db9$export$4332252cd6830792 = "Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.";
function $8859f260fc521db9$export$31361d6ceb402d24(channel, markOrFacet, when) {
    return `${channel} dropped as it is incompatible with "${markOrFacet}"${when ? ` when ${when}` : ""}.`;
}
function $8859f260fc521db9$export$b5c8a1b8defb0fc5(channel) {
    return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;
}
function $8859f260fc521db9$export$34157aac56fef6ac(channel) {
    return `${channel} encoding should be discrete (ordinal / nominal / binned).`;
}
function $8859f260fc521db9$export$edc611c9363003f3(channels) {
    return `Facet encoding dropped as ${channels.join(" and ")} ${channels.length > 1 ? "are" : "is"} also specified.`;
}
function $8859f260fc521db9$export$c448ee6ca9b87fb6(channel, type) {
    return `Using discrete channel "${channel}" to encode "${type}" field can be misleading as it does not encode ${type === "ordinal" ? "order" : "magnitude"}.`;
}
function $8859f260fc521db9$export$2f8c2e07f005232f(align) {
    return `The ${align} for range marks cannot be an expression`;
}
function $8859f260fc521db9$export$358a68a16e8c941f(hasX2, hasY2) {
    const channels = hasX2 && hasY2 ? "x2 and y2" : hasX2 ? "x2" : "y2";
    return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;
}
function $8859f260fc521db9$export$a3eed06d0a8a43f1(original, actual) {
    return `Specified orient "${original}" overridden with "${actual}".`;
}
const $8859f260fc521db9$export$409c4b4527b85810 = "Custom domain scale cannot be unioned with default field-based domain.";
const $8859f260fc521db9$export$1ec9c3dd323afa52 = `Scale's "rangeStep" is deprecated and will be removed in Vega-Lite 5.0. Please use "width"/"height": {"step": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.`;
function $8859f260fc521db9$export$3e67e2f3443e71f3(prop) {
    return `Cannot use the scale property "${prop}" with non-color channel.`;
}
function $8859f260fc521db9$export$e88ddedf09f217cd(fieldDef) {
    return `Using unaggregated domain with raw field has no effect (${(0, $7k4G6.stringify)(fieldDef)}).`;
}
function $8859f260fc521db9$export$f9ed6fb8ade901dd(aggregate) {
    return `Unaggregated domain not applicable for "${aggregate}" since it produces values outside the origin domain of the source data.`;
}
function $8859f260fc521db9$export$e28b272b8ad97ff4(fieldDef) {
    return `Unaggregated domain is currently unsupported for log scale (${(0, $7k4G6.stringify)(fieldDef)}).`;
}
function $8859f260fc521db9$export$47982f53f583df49(mark) {
    return `Cannot apply size to non-oriented mark "${mark}".`;
}
function $8859f260fc521db9$export$4eae8a97df34b3dc(channel, scaleType, defaultScaleType) {
    return `Channel "${channel}" does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
}
function $8859f260fc521db9$export$34c1afc246351594(scaleType, defaultScaleType) {
    return `FieldDef does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
}
function $8859f260fc521db9$export$9c1237b965734d64(scaleType, propName, channel) {
    return `${channel}-scale's "${propName}" is dropped as it does not work with ${scaleType} scale.`;
}
function $8859f260fc521db9$export$84371cca1c8bc6b(mark, scaleType) {
    return `Scale type "${scaleType}" does not work with mark "${mark}".`;
}
function $8859f260fc521db9$export$8b922b89109186ab(channel) {
    return `The step for "${channel}" is dropped because the ${channel === "width" ? "x" : "y"} is continuous.`;
}
function $8859f260fc521db9$export$26b0f4b4435a0f9d(property, propertyOf, v1, v2) {
    return `Conflicting ${propertyOf.toString()} property "${property.toString()}" (${(0, $7k4G6.stringify)(v1)} and ${(0, $7k4G6.stringify)(v2)}). Using ${(0, $7k4G6.stringify)(v1)}.`;
}
function $8859f260fc521db9$export$fd9834435ad34942(property, propertyOf, v1, v2) {
    return `Conflicting ${propertyOf.toString()} property "${property.toString()}" (${(0, $7k4G6.stringify)(v1)} and ${(0, $7k4G6.stringify)(v2)}). Using the union of the two domains.`;
}
function $8859f260fc521db9$export$349bd5821c91f771(channel) {
    return `Setting the scale to be independent for "${channel}" means we also have to set the guide (axis or legend) to be independent.`;
}
function $8859f260fc521db9$export$2af377f98834b39a(sort) {
    return `Dropping sort property ${(0, $7k4G6.stringify)(sort)} as unioned domains only support boolean or op "count", "min", and "max".`;
}
const $8859f260fc521db9$export$b033b609d9291c78 = "Domains that should be unioned has conflicting sort properties. Sort will be set to true.";
const $8859f260fc521db9$export$bd98fdf4be3d6748 = "Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.";
const $8859f260fc521db9$export$317b4ff94e837f04 = "Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.";
const $8859f260fc521db9$export$8a84a5cb7afcc421 = "Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.";
const $8859f260fc521db9$export$3ab2dfecb25c8f3f = "Invalid channel for axis.";
function $8859f260fc521db9$export$dba813791b44e9ff(channel) {
    return `Cannot stack "${channel}" if there is already "${channel}2".`;
}
function $8859f260fc521db9$export$61123262282a2051(scaleType) {
    return `Cannot stack non-linear scale (${scaleType}).`;
}
function $8859f260fc521db9$export$3815f2d91e7c3c0a(aggregate) {
    return `Stacking is applied even though the aggregate function is non-summative ("${aggregate}").`;
}
function $8859f260fc521db9$export$4c0d7d399be83160(unitName, value) {
    return `Invalid ${unitName}: ${(0, $7k4G6.stringify)(value)}.`;
}
function $8859f260fc521db9$export$f7f253f533415f05(d) {
    return `Dropping day from datetime ${(0, $7k4G6.stringify)(d)} as day cannot be combined with other units.`;
}
function $8859f260fc521db9$export$4fb29ee2692e3f98(center, extent) {
    return `${extent ? "extent " : ""}${extent && center ? "and " : ""}${center ? "center " : ""}${extent && center ? "are " : "is "}not needed when data are aggregated.`;
}
function $8859f260fc521db9$export$460befd539733d2a(center, extent, mark) {
    return `${center} is not usually used with ${extent} for ${mark}.`;
}
function $8859f260fc521db9$export$8a8d31ace4eab1cd(aggregate, compositeMark) {
    return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;
}
function $8859f260fc521db9$export$51ef607cac541ab4(property) {
    return `1D error band does not support ${property}.`;
}
function $8859f260fc521db9$export$3bd9f708f3c80dee(channel) {
    return `Channel ${channel} is required for "binned" bin.`;
}
function $8859f260fc521db9$export$e38a6e73d839cd74(channel) {
    return `Channel ${channel} should not be used with "binned" bin.`;
}
function $8859f260fc521db9$export$5ae688fe1cca7965(channel) {
    return `Domain for ${channel} is required for threshold scale.`;
}

});




parcelRegister("4xdf1", function(module, exports) {

$parcel$export(module.exports, "isSignalRef", () => $34d483ec462e5eff$export$b9c2fd7fdbc75fbd);
$parcel$export(module.exports, "isVgRangeStep", () => $34d483ec462e5eff$export$b81f57658b1fe58a);
$parcel$export(module.exports, "isDataRefUnionedDomain", () => $34d483ec462e5eff$export$f8d5290fd9a7bbd9);
$parcel$export(module.exports, "isFieldRefUnionDomain", () => $34d483ec462e5eff$export$b929491f09d4612e);
$parcel$export(module.exports, "isDataRefDomain", () => $34d483ec462e5eff$export$c75b658aa042103);
$parcel$export(module.exports, "VG_MARK_CONFIGS", () => $34d483ec462e5eff$export$d6d3f5312ebc73a3);
$parcel$export(module.exports, "VG_MARK_INDEX", () => $34d483ec462e5eff$export$5b404e1a20356101);
$parcel$export(module.exports, "VG_CORNERRADIUS_CHANNELS", () => $34d483ec462e5eff$export$e42aa9e69e941aa2);

var $2bi3s = parcelRequire("2bi3s");

var $7k4G6 = parcelRequire("7k4G6");
function $34d483ec462e5eff$export$b9c2fd7fdbc75fbd(o) {
    return o && !!o["signal"];
}
function $34d483ec462e5eff$export$b81f57658b1fe58a(range) {
    return !!range["step"];
}
function $34d483ec462e5eff$export$f8d5290fd9a7bbd9(domain) {
    if (!(0, $2bi3s.isArray)(domain)) return "fields" in domain && !("data" in domain);
    return false;
}
function $34d483ec462e5eff$export$b929491f09d4612e(domain) {
    if (!(0, $2bi3s.isArray)(domain)) return "fields" in domain && "data" in domain;
    return false;
}
function $34d483ec462e5eff$export$c75b658aa042103(domain) {
    if (!(0, $2bi3s.isArray)(domain)) return "field" in domain && "data" in domain;
    return false;
}
const $34d483ec462e5eff$var$VG_MARK_CONFIG_INDEX = {
    aria: 1,
    description: 1,
    ariaRole: 1,
    ariaRoleDescription: 1,
    blend: 1,
    opacity: 1,
    fill: 1,
    fillOpacity: 1,
    stroke: 1,
    strokeCap: 1,
    strokeWidth: 1,
    strokeOpacity: 1,
    strokeDash: 1,
    strokeDashOffset: 1,
    strokeJoin: 1,
    strokeOffset: 1,
    strokeMiterLimit: 1,
    startAngle: 1,
    endAngle: 1,
    padAngle: 1,
    innerRadius: 1,
    outerRadius: 1,
    size: 1,
    shape: 1,
    interpolate: 1,
    tension: 1,
    orient: 1,
    align: 1,
    baseline: 1,
    text: 1,
    dir: 1,
    dx: 1,
    dy: 1,
    ellipsis: 1,
    limit: 1,
    radius: 1,
    theta: 1,
    angle: 1,
    font: 1,
    fontSize: 1,
    fontWeight: 1,
    fontStyle: 1,
    lineBreak: 1,
    lineHeight: 1,
    cursor: 1,
    href: 1,
    tooltip: 1,
    cornerRadius: 1,
    cornerRadiusTopLeft: 1,
    cornerRadiusTopRight: 1,
    cornerRadiusBottomLeft: 1,
    cornerRadiusBottomRight: 1,
    aspect: 1,
    width: 1,
    height: 1,
    url: 1,
    smooth: 1
};
const $34d483ec462e5eff$export$d6d3f5312ebc73a3 = (0, $7k4G6.keys)($34d483ec462e5eff$var$VG_MARK_CONFIG_INDEX);
const $34d483ec462e5eff$export$5b404e1a20356101 = {
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
};
const $34d483ec462e5eff$export$e42aa9e69e941aa2 = [
    "cornerRadius",
    "cornerRadiusTopLeft",
    "cornerRadiusTopRight",
    "cornerRadiusBottomLeft",
    "cornerRadiusBottomRight"
];

});


parcelRegister("9rekY", function(module, exports) {

$parcel$export(module.exports, "ScaleType", () => $6df1c1bd26020972$export$a5d761e91a3d89c6);
$parcel$export(module.exports, "SCALE_CATEGORY_INDEX", () => $6df1c1bd26020972$export$205d1dfdaeff0829);
$parcel$export(module.exports, "scaleCompatible", () => $6df1c1bd26020972$export$993c59e767be30f5);
$parcel$export(module.exports, "scaleTypePrecedence", () => $6df1c1bd26020972$export$64a2ee0bf344b261);
$parcel$export(module.exports, "isQuantitative", () => $6df1c1bd26020972$export$133e1c446a214d9e);
$parcel$export(module.exports, "hasDiscreteDomain", () => $6df1c1bd26020972$export$f652dd67f0e16571);
$parcel$export(module.exports, "hasContinuousDomain", () => $6df1c1bd26020972$export$fe4df43b3440c3b0);
$parcel$export(module.exports, "isContinuousToContinuous", () => $6df1c1bd26020972$export$8db1842cb1bb0e24);
$parcel$export(module.exports, "isContinuousToDiscrete", () => $6df1c1bd26020972$export$a180fd4b0a2d071f);
$parcel$export(module.exports, "defaultScaleConfig", () => $6df1c1bd26020972$export$6f5688a3436cf0b8);
$parcel$export(module.exports, "isExtendedScheme", () => $6df1c1bd26020972$export$9b4bbea8d7c61066);
$parcel$export(module.exports, "isSelectionDomain", () => $6df1c1bd26020972$export$18cb227e10949429);
$parcel$export(module.exports, "isDomainUnionWith", () => $6df1c1bd26020972$export$ae463ed29b8506ad);
$parcel$export(module.exports, "NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES", () => $6df1c1bd26020972$export$697c5d5983fee528);
$parcel$export(module.exports, "scaleTypeSupportProperty", () => $6df1c1bd26020972$export$e0b19c0919600217);
$parcel$export(module.exports, "channelScalePropertyIncompatability", () => $6df1c1bd26020972$export$8d97aaa53c233f5a);
$parcel$export(module.exports, "scaleTypeSupportDataType", () => $6df1c1bd26020972$export$cebdb4b6964e0ea7);
$parcel$export(module.exports, "channelSupportScaleType", () => $6df1c1bd26020972$export$4292f24db102521c);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");
parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");
var $6df1c1bd26020972$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $6df1c1bd26020972$export$a5d761e91a3d89c6 = {
    // Continuous - Quantitative
    LINEAR: "linear",
    LOG: "log",
    POW: "pow",
    SQRT: "sqrt",
    SYMLOG: "symlog",
    IDENTITY: "identity",
    SEQUENTIAL: "sequential",
    // Continuous - Time
    TIME: "time",
    UTC: "utc",
    // Discretizing scales
    QUANTILE: "quantile",
    QUANTIZE: "quantize",
    THRESHOLD: "threshold",
    BIN_ORDINAL: "bin-ordinal",
    // Discrete scales
    ORDINAL: "ordinal",
    POINT: "point",
    BAND: "band"
};
const $6df1c1bd26020972$export$205d1dfdaeff0829 = {
    linear: "numeric",
    log: "numeric",
    pow: "numeric",
    sqrt: "numeric",
    symlog: "numeric",
    identity: "numeric",
    sequential: "numeric",
    time: "time",
    utc: "time",
    ordinal: "ordinal",
    "bin-ordinal": "bin-ordinal",
    point: "ordinal-position",
    band: "ordinal-position",
    quantile: "discretizing",
    quantize: "discretizing",
    threshold: "discretizing"
};
const $6df1c1bd26020972$export$e65e0ff8d3882b46 = (0, $7k4G6.keys)($6df1c1bd26020972$export$205d1dfdaeff0829);
function $6df1c1bd26020972$export$993c59e767be30f5(scaleType1, scaleType2) {
    const scaleCategory1 = $6df1c1bd26020972$export$205d1dfdaeff0829[scaleType1];
    const scaleCategory2 = $6df1c1bd26020972$export$205d1dfdaeff0829[scaleType2];
    return scaleCategory1 === scaleCategory2 || scaleCategory1 === "ordinal-position" && scaleCategory2 === "time" || scaleCategory2 === "ordinal-position" && scaleCategory1 === "time";
}
/**
 * Index for scale precedence -- high score = higher priority for merging.
 */ const $6df1c1bd26020972$var$SCALE_PRECEDENCE_INDEX = {
    // numeric
    linear: 0,
    log: 1,
    pow: 1,
    sqrt: 1,
    symlog: 1,
    identity: 1,
    sequential: 1,
    // time
    time: 0,
    utc: 0,
    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
    point: 10,
    band: 11,
    // non grouped types
    ordinal: 0,
    "bin-ordinal": 0,
    quantile: 0,
    quantize: 0,
    threshold: 0
};
function $6df1c1bd26020972$export$64a2ee0bf344b261(scaleType) {
    return $6df1c1bd26020972$var$SCALE_PRECEDENCE_INDEX[scaleType];
}
const $6df1c1bd26020972$export$a8047f2519fba696 = [
    "linear",
    "log",
    "pow",
    "sqrt",
    "symlog",
    "time",
    "utc"
];
const $6df1c1bd26020972$var$CONTINUOUS_TO_CONTINUOUS_INDEX = (0, $2bi3s.toSet)($6df1c1bd26020972$export$a8047f2519fba696);
const $6df1c1bd26020972$export$272e99d160e3ba4c = [
    "linear",
    "log",
    "pow",
    "sqrt",
    "symlog"
];
const $6df1c1bd26020972$var$QUANTITATIVE_SCALES_INDEX = (0, $2bi3s.toSet)($6df1c1bd26020972$export$272e99d160e3ba4c);
function $6df1c1bd26020972$export$133e1c446a214d9e(type) {
    return type in $6df1c1bd26020972$var$QUANTITATIVE_SCALES_INDEX;
}
const $6df1c1bd26020972$export$bfb722024d29c171 = [
    "quantile",
    "quantize",
    "threshold"
];
const $6df1c1bd26020972$var$CONTINUOUS_TO_DISCRETE_INDEX = (0, $2bi3s.toSet)($6df1c1bd26020972$export$bfb722024d29c171);
const $6df1c1bd26020972$export$2b301ea5c07672fa = $6df1c1bd26020972$export$a8047f2519fba696.concat([
    "quantile",
    "quantize",
    "threshold",
    "sequential",
    "identity"
]);
const $6df1c1bd26020972$var$CONTINUOUS_DOMAIN_INDEX = (0, $2bi3s.toSet)($6df1c1bd26020972$export$2b301ea5c07672fa);
const $6df1c1bd26020972$export$daaf5aea5e8c577b = [
    "ordinal",
    "bin-ordinal",
    "point",
    "band"
];
const $6df1c1bd26020972$var$DISCRETE_DOMAIN_INDEX = (0, $2bi3s.toSet)($6df1c1bd26020972$export$daaf5aea5e8c577b);
const $6df1c1bd26020972$export$e0047dd795a2f6b6 = [
    "time",
    "utc"
];
function $6df1c1bd26020972$export$f652dd67f0e16571(type) {
    return type in $6df1c1bd26020972$var$DISCRETE_DOMAIN_INDEX;
}
function $6df1c1bd26020972$export$fe4df43b3440c3b0(type) {
    return type in $6df1c1bd26020972$var$CONTINUOUS_DOMAIN_INDEX;
}
function $6df1c1bd26020972$export$8db1842cb1bb0e24(type) {
    return type in $6df1c1bd26020972$var$CONTINUOUS_TO_CONTINUOUS_INDEX;
}
function $6df1c1bd26020972$export$a180fd4b0a2d071f(type) {
    return type in $6df1c1bd26020972$var$CONTINUOUS_TO_DISCRETE_INDEX;
}
const $6df1c1bd26020972$export$6f5688a3436cf0b8 = {
    pointPadding: 0.5,
    barBandPaddingInner: 0.1,
    rectBandPaddingInner: 0,
    minBandSize: 2,
    minFontSize: 8,
    maxFontSize: 40,
    minOpacity: 0.3,
    maxOpacity: 0.8,
    // FIXME: revise if these *can* become ratios of width/height step
    minSize: 9,
    minStrokeWidth: 1,
    maxStrokeWidth: 4,
    quantileCount: 4,
    quantizeCount: 4
};
function $6df1c1bd26020972$export$9b4bbea8d7c61066(scheme) {
    return !(0, $2bi3s.isString)(scheme) && !!scheme["name"];
}
function $6df1c1bd26020972$export$18cb227e10949429(domain) {
    return domain === null || domain === void 0 ? void 0 : domain["selection"];
}
function $6df1c1bd26020972$export$ae463ed29b8506ad(domain) {
    return domain && domain["unionWith"];
}
const $6df1c1bd26020972$var$SCALE_PROPERTY_INDEX = {
    type: 1,
    domain: 1,
    domainMax: 1,
    domainMin: 1,
    domainMid: 1,
    align: 1,
    range: 1,
    rangeMax: 1,
    rangeMin: 1,
    scheme: 1,
    bins: 1,
    // Other properties
    reverse: 1,
    round: 1,
    // quantitative / time
    clamp: 1,
    nice: 1,
    // quantitative
    base: 1,
    exponent: 1,
    constant: 1,
    interpolate: 1,
    zero: 1,
    // band/point
    padding: 1,
    paddingInner: 1,
    paddingOuter: 1
};
const $6df1c1bd26020972$export$a385bd8486a42633 = (0, $7k4G6.keys)($6df1c1bd26020972$var$SCALE_PROPERTY_INDEX);
const { type: $6df1c1bd26020972$var$type, domain: $6df1c1bd26020972$var$domain, range: $6df1c1bd26020972$var$range, rangeMax: $6df1c1bd26020972$var$rangeMax, rangeMin: $6df1c1bd26020972$var$rangeMin, scheme: $6df1c1bd26020972$var$scheme } = $6df1c1bd26020972$var$SCALE_PROPERTY_INDEX, $6df1c1bd26020972$var$NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = $6df1c1bd26020972$var$__rest($6df1c1bd26020972$var$SCALE_PROPERTY_INDEX, [
    "type",
    "domain",
    "range",
    "rangeMax",
    "rangeMin",
    "scheme"
]);
const $6df1c1bd26020972$export$697c5d5983fee528 = (0, $7k4G6.keys)($6df1c1bd26020972$var$NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
function $6df1c1bd26020972$export$e0b19c0919600217(scaleType, propName) {
    switch(propName){
        case "type":
        case "domain":
        case "reverse":
        case "range":
            return true;
        case "scheme":
        case "interpolate":
            return !(0, $7k4G6.contains)([
                "point",
                "band",
                "identity"
            ], scaleType);
        case "bins":
            return !(0, $7k4G6.contains)([
                "point",
                "band",
                "identity",
                "ordinal"
            ], scaleType);
        case "round":
            return $6df1c1bd26020972$export$8db1842cb1bb0e24(scaleType) || scaleType === "band" || scaleType === "point";
        case "padding":
        case "rangeMin":
        case "rangeMax":
            return $6df1c1bd26020972$export$8db1842cb1bb0e24(scaleType) || (0, $7k4G6.contains)([
                "point",
                "band"
            ], scaleType);
        case "paddingOuter":
        case "align":
            return (0, $7k4G6.contains)([
                "point",
                "band"
            ], scaleType);
        case "paddingInner":
            return scaleType === "band";
        case "domainMax":
        case "domainMid":
        case "domainMin":
        case "clamp":
            return $6df1c1bd26020972$export$8db1842cb1bb0e24(scaleType);
        case "nice":
            return $6df1c1bd26020972$export$8db1842cb1bb0e24(scaleType) || scaleType === "quantize" || scaleType === "threshold";
        case "exponent":
            return scaleType === "pow";
        case "base":
            return scaleType === "log";
        case "constant":
            return scaleType === "symlog";
        case "zero":
            return $6df1c1bd26020972$export$fe4df43b3440c3b0(scaleType) && !(0, $7k4G6.contains)([
                "log",
                "time",
                "utc",
                "threshold",
                "quantile" // quantile depends on distribution so zero does not matter
            ], scaleType);
    }
}
function $6df1c1bd26020972$export$8d97aaa53c233f5a(channel, propName) {
    switch(propName){
        case "interpolate":
        case "scheme":
        case "domainMid":
            if (!(0, $fWfT0.isColorChannel)(channel)) return $bHNid.cannotUseScalePropertyWithNonColor(channel);
            return undefined;
        case "align":
        case "type":
        case "bins":
        case "domain":
        case "domainMax":
        case "domainMin":
        case "range":
        case "base":
        case "exponent":
        case "constant":
        case "nice":
        case "padding":
        case "paddingInner":
        case "paddingOuter":
        case "rangeMax":
        case "rangeMin":
        case "reverse":
        case "round":
        case "clamp":
        case "zero":
            return undefined; // GOOD!
    }
}
function $6df1c1bd26020972$export$cebdb4b6964e0ea7(specifiedType, fieldDefType) {
    if ((0, $7k4G6.contains)([
        (0, $9LX7L.ORDINAL),
        (0, $9LX7L.NOMINAL)
    ], fieldDefType)) return specifiedType === undefined || $6df1c1bd26020972$export$f652dd67f0e16571(specifiedType);
    else if (fieldDefType === (0, $9LX7L.TEMPORAL)) return (0, $7k4G6.contains)([
        $6df1c1bd26020972$export$a5d761e91a3d89c6.TIME,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.UTC,
        undefined
    ], specifiedType);
    else if (fieldDefType === (0, $9LX7L.QUANTITATIVE)) return (0, $7k4G6.contains)([
        $6df1c1bd26020972$export$a5d761e91a3d89c6.LOG,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.POW,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.SQRT,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.SYMLOG,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.QUANTILE,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.QUANTIZE,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.THRESHOLD,
        $6df1c1bd26020972$export$a5d761e91a3d89c6.LINEAR,
        undefined
    ], specifiedType);
    return true;
}
function $6df1c1bd26020972$export$4292f24db102521c(channel, scaleType) {
    if (!$fWfT0.isScaleChannel(channel)) return false;
    switch(channel){
        case $fWfT0.X:
        case $fWfT0.Y:
        case $fWfT0.THETA:
        case $fWfT0.RADIUS:
            return $6df1c1bd26020972$export$8db1842cb1bb0e24(scaleType) || (0, $7k4G6.contains)([
                "band",
                "point"
            ], scaleType);
        case $fWfT0.SIZE:
        case $fWfT0.STROKEWIDTH:
        case $fWfT0.OPACITY:
        case $fWfT0.FILLOPACITY:
        case $fWfT0.STROKEOPACITY:
        case $fWfT0.ANGLE:
            // Although it generally doesn't make sense to use band with size and opacity,
            // it can also work since we use band: 0.5 to get midpoint.
            return $6df1c1bd26020972$export$8db1842cb1bb0e24(scaleType) || $6df1c1bd26020972$export$a180fd4b0a2d071f(scaleType) || (0, $7k4G6.contains)([
                "band",
                "point",
                "ordinal"
            ], scaleType);
        case $fWfT0.COLOR:
        case $fWfT0.FILL:
        case $fWfT0.STROKE:
            return scaleType !== "band"; // band does not make sense with color
        case $fWfT0.STROKEDASH:
            return scaleType === "ordinal" || $6df1c1bd26020972$export$a180fd4b0a2d071f(scaleType);
        case $fWfT0.SHAPE:
            return scaleType === "ordinal"; // shape = lookup only
    }
}

});
parcelRegister("9LX7L", function(module, exports) {

$parcel$export(module.exports, "QUANTITATIVE", () => $71d65daf6b3cbb00$export$9229e42038aab7e5);
$parcel$export(module.exports, "ORDINAL", () => $71d65daf6b3cbb00$export$3fd025869e0b4485);
$parcel$export(module.exports, "TEMPORAL", () => $71d65daf6b3cbb00$export$1a1fc0f23ee07def);
$parcel$export(module.exports, "NOMINAL", () => $71d65daf6b3cbb00$export$afc8e5e6aacf465b);
$parcel$export(module.exports, "GEOJSON", () => $71d65daf6b3cbb00$export$8fe19a6ad44e5e6b);
$parcel$export(module.exports, "getFullName", () => $71d65daf6b3cbb00$export$155800cbebf9d04f);

var $7k4G6 = parcelRequire("7k4G6");
const $71d65daf6b3cbb00$export$92738401e1603719 = {
    quantitative: "quantitative",
    ordinal: "ordinal",
    temporal: "temporal",
    nominal: "nominal",
    geojson: "geojson"
};
function $71d65daf6b3cbb00$export$26b9f946b448f23e(t) {
    return t in $71d65daf6b3cbb00$export$92738401e1603719;
}
const $71d65daf6b3cbb00$export$9229e42038aab7e5 = $71d65daf6b3cbb00$export$92738401e1603719.quantitative;
const $71d65daf6b3cbb00$export$3fd025869e0b4485 = $71d65daf6b3cbb00$export$92738401e1603719.ordinal;
const $71d65daf6b3cbb00$export$1a1fc0f23ee07def = $71d65daf6b3cbb00$export$92738401e1603719.temporal;
const $71d65daf6b3cbb00$export$afc8e5e6aacf465b = $71d65daf6b3cbb00$export$92738401e1603719.nominal;
const $71d65daf6b3cbb00$export$8fe19a6ad44e5e6b = $71d65daf6b3cbb00$export$92738401e1603719.geojson;
const $71d65daf6b3cbb00$export$426db7a6155b7a80 = (0, $7k4G6.keys)($71d65daf6b3cbb00$export$92738401e1603719);
function $71d65daf6b3cbb00$export$155800cbebf9d04f(type) {
    if (type) {
        type = type.toLowerCase();
        switch(type){
            case "q":
            case $71d65daf6b3cbb00$export$9229e42038aab7e5:
                return "quantitative";
            case "t":
            case $71d65daf6b3cbb00$export$1a1fc0f23ee07def:
                return "temporal";
            case "o":
            case $71d65daf6b3cbb00$export$3fd025869e0b4485:
                return "ordinal";
            case "n":
            case $71d65daf6b3cbb00$export$afc8e5e6aacf465b:
                return "nominal";
            case $71d65daf6b3cbb00$export$8fe19a6ad44e5e6b:
                return "geojson";
        }
    }
    // If we get invalid input, return undefined type.
    return undefined;
}

});


parcelRegister("gx1vn", function(module, exports) {

$parcel$export(module.exports, "midPointRefWithPositionInvalidTest", () => $c090e546f0164a5b$export$94bf76f0b4b99407);
$parcel$export(module.exports, "midPoint", () => $c090e546f0164a5b$export$58ee41e7a61980d3);
$parcel$export(module.exports, "wrapPositionInvalidTest", () => $c090e546f0164a5b$export$6f317e91f34f804c);
$parcel$export(module.exports, "fieldInvalidPredicate", () => $c090e546f0164a5b$export$adcba6fb254a9012);
$parcel$export(module.exports, "datumDefToExpr", () => $c090e546f0164a5b$export$b9d70ae98e43f257);
$parcel$export(module.exports, "valueRefForFieldOrDatumDef", () => $c090e546f0164a5b$export$c7c43fa3a490e9c3);
$parcel$export(module.exports, "interpolatedSignalRef", () => $c090e546f0164a5b$export$6a4f2f8df3a9967d);
$parcel$export(module.exports, "widthHeightValueOrSignalRef", () => $c090e546f0164a5b$export$da76dd317f959cee);

var $2bi3s = parcelRequire("2bi3s");

var $7sjJm = parcelRequire("7sjJm");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $8PxNP = parcelRequire("8PxNP");

var $5C8w7 = parcelRequire("5C8w7");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9mRLv = parcelRequire("9mRLv");

var $6EUuI = parcelRequire("6EUuI");

var $9rekY = parcelRequire("9rekY");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");
function $c090e546f0164a5b$export$94bf76f0b4b99407(params) {
    const { channel: channel, channelDef: channelDef, markDef: markDef, scale: scale, config: config } = params;
    const ref = $c090e546f0164a5b$export$58ee41e7a61980d3(params);
    // Wrap to check if the positional value is invalid, if so, plot the point on the min value
    if (// Only this for field def without counting aggregate (as count wouldn't be null)
    (0, $2hAmp.isFieldDef)(channelDef) && !(0, $7sjJm.isCountingAggregateOp)(channelDef.aggregate) && // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)
    scale && (0, $9rekY.isContinuousToContinuous)(scale.get("type")) && scale.get("zero") === false) return $c090e546f0164a5b$export$6f317e91f34f804c({
        fieldDef: channelDef,
        channel: channel,
        markDef: markDef,
        ref: ref,
        config: config
    });
    return ref;
}
function $c090e546f0164a5b$export$6f317e91f34f804c({ fieldDef: fieldDef, channel: channel, markDef: markDef, ref: ref, config: config }) {
    if ((0, $9mRLv.isPathMark)(markDef.type)) // path mark already use defined to skip points, no need to do it here.
    return ref;
    const invalid = (0, $9ulW1.getMarkPropOrConfig)("invalid", markDef, config);
    if (invalid === null) // if there is no invalid filter, don't do the invalid test
    return ref;
    return [
        $c090e546f0164a5b$export$7f057529e450540e(fieldDef, channel),
        ref
    ];
}
function $c090e546f0164a5b$export$7f057529e450540e(fieldDef, channel) {
    const test = $c090e546f0164a5b$export$adcba6fb254a9012(fieldDef, true);
    const mainChannel = (0, $fWfT0.getMainRangeChannel)(channel); // we can cast here as the output can't be other things.
    const zeroValueRef = mainChannel === "y" ? {
        field: {
            group: "height"
        }
    } : {
        value: 0
    };
    return Object.assign({
        test: test
    }, zeroValueRef);
}
function $c090e546f0164a5b$export$adcba6fb254a9012(field, invalid = true) {
    return (0, $6EUuI.fieldValidPredicate)((0, $2bi3s.isString)(field) ? field : (0, $2hAmp.vgField)(field, {
        expr: "datum"
    }), !invalid);
}
function $c090e546f0164a5b$export$b9d70ae98e43f257(datumDef) {
    const { datum: datum } = datumDef;
    if ((0, $8PxNP.isDateTime)(datum)) return (0, $8PxNP.dateTimeToExpr)(datum);
    return `${JSON.stringify(datum)}`;
}
function $c090e546f0164a5b$export$c7c43fa3a490e9c3(fieldDef, scaleName, opt, encode) {
    const ref = {};
    if (scaleName) ref.scale = scaleName;
    if ((0, $2hAmp.isDatumDef)(fieldDef)) {
        const { datum: datum } = fieldDef;
        if ((0, $8PxNP.isDateTime)(datum)) ref.signal = (0, $8PxNP.dateTimeToExpr)(datum);
        else if ((0, $4xdf1.isSignalRef)(datum)) ref.signal = datum.signal;
        else if ((0, $5C8w7.isExprRef)(datum)) ref.signal = datum.expr;
        else ref.value = datum;
    } else ref.field = (0, $2hAmp.vgField)(fieldDef, opt);
    if (encode) {
        const { offset: offset, band: band } = encode;
        if (offset) ref.offset = offset;
        if (band) ref.band = band;
    }
    return ref;
}
function $c090e546f0164a5b$export$6a4f2f8df3a9967d({ scaleName: scaleName, fieldOrDatumDef: fieldOrDatumDef, fieldOrDatumDef2: fieldOrDatumDef2, offset: offset, startSuffix: startSuffix, band: band = 0.5 }) {
    const expr = 0 < band && band < 1 ? "datum" : undefined;
    const start = (0, $2hAmp.vgField)(fieldOrDatumDef, {
        expr: expr,
        suffix: startSuffix
    });
    const end = fieldOrDatumDef2 !== undefined ? (0, $2hAmp.vgField)(fieldOrDatumDef2, {
        expr: expr
    }) : (0, $2hAmp.vgField)(fieldOrDatumDef, {
        suffix: "end",
        expr: expr
    });
    const ref = {};
    if (band === 0 || band === 1) {
        ref.scale = scaleName;
        const val = band === 0 ? start : end;
        ref.field = val;
    } else {
        const datum = `${band} * ${start} + ${1 - band} * ${end}`;
        ref.signal = `scale("${scaleName}", ${datum})`;
    }
    if (offset) ref.offset = offset;
    return ref;
}
function $c090e546f0164a5b$export$58ee41e7a61980d3({ channel: channel, channelDef: channelDef, channel2Def: channel2Def, markDef: markDef, config: config, scaleName: scaleName, scale: scale, stack: stack, offset: offset, defaultRef: defaultRef, band: band }) {
    var _a;
    // TODO: datum support
    if (channelDef) {
        /* istanbul ignore else */ if ((0, $2hAmp.isFieldOrDatumDef)(channelDef)) {
            if ((0, $2hAmp.isTypedFieldDef)(channelDef)) {
                band = band !== null && band !== void 0 ? band : (0, $2hAmp.getBand)({
                    channel: channel,
                    fieldDef: channelDef,
                    fieldDef2: channel2Def,
                    markDef: markDef,
                    stack: stack,
                    config: config,
                    isMidPoint: true
                });
                const { bin: bin, timeUnit: timeUnit, type: type } = channelDef;
                if ((0, $iR8lA.isBinning)(bin) || band && timeUnit && type === (0, $9LX7L.TEMPORAL)) {
                    // Use middle only for x an y to place marks in the center between start and end of the bin range.
                    // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
                    if (stack && stack.impute) // For stack, we computed bin_mid so we can impute.
                    return $c090e546f0164a5b$export$c7c43fa3a490e9c3(channelDef, scaleName, {
                        binSuffix: "mid"
                    }, {
                        offset: offset
                    });
                    if (band) // if band = 0, no need to call interpolation
                    // For non-stack, we can just calculate bin mid on the fly using signal.
                    return $c090e546f0164a5b$export$6a4f2f8df3a9967d({
                        scaleName: scaleName,
                        fieldOrDatumDef: channelDef,
                        band: band,
                        offset: offset
                    });
                    return $c090e546f0164a5b$export$c7c43fa3a490e9c3(channelDef, scaleName, (0, $2hAmp.binRequiresRange)(channelDef, channel) ? {
                        binSuffix: "range"
                    } : {}, {
                        offset: offset
                    });
                } else if ((0, $iR8lA.isBinned)(bin)) {
                    if ((0, $2hAmp.isFieldDef)(channel2Def)) return $c090e546f0164a5b$export$6a4f2f8df3a9967d({
                        scaleName: scaleName,
                        fieldOrDatumDef: channelDef,
                        fieldOrDatumDef2: channel2Def,
                        band: band,
                        offset: offset
                    });
                    else {
                        const channel2 = channel === (0, $fWfT0.X) ? (0, $fWfT0.X2) : (0, $fWfT0.Y2);
                        $3XBQv.warn($bHNid.channelRequiredForBinned(channel2));
                    }
                }
            }
            const scaleType = scale === null || scale === void 0 ? void 0 : scale.get("type");
            return $c090e546f0164a5b$export$c7c43fa3a490e9c3(channelDef, scaleName, (0, $9rekY.hasDiscreteDomain)(scaleType) ? {
                binSuffix: "range"
            } : {}, {
                offset: offset,
                // For band, to get mid point, need to offset by half of the band
                band: scaleType === "band" ? (_a = band !== null && band !== void 0 ? band : channelDef.band) !== null && _a !== void 0 ? _a : 0.5 : undefined
            });
        } else if ((0, $2hAmp.isValueDef)(channelDef)) {
            const value = channelDef.value;
            const offsetMixins = offset ? {
                offset: offset
            } : {};
            return Object.assign(Object.assign({}, $c090e546f0164a5b$export$da76dd317f959cee(channel, value)), offsetMixins);
        }
    // If channelDef is neither field def or value def, it's a condition-only def.
    // In such case, we will use default ref.
    }
    if ((0, $2bi3s.isFunction)(defaultRef)) defaultRef = defaultRef();
    if (defaultRef) // for non-position, ref could be undefined.
    return Object.assign(Object.assign({}, defaultRef), offset ? {
        offset: offset
    } : {});
    return defaultRef;
}
function $c090e546f0164a5b$export$da76dd317f959cee(channel, value) {
    if ((0, $7k4G6.contains)([
        "x",
        "x2"
    ], channel) && value === "width") return {
        field: {
            group: "width"
        }
    };
    else if ((0, $7k4G6.contains)([
        "y",
        "y2"
    ], channel) && value === "height") return {
        field: {
            group: "height"
        }
    };
    return (0, $9ulW1.signalOrValueRef)(value);
}

});
parcelRegister("5C8w7", function(module, exports) {

$parcel$export(module.exports, "isExprRef", () => $41671bae1d575fb3$export$735c334fba27a380);
$parcel$export(module.exports, "replaceExprRefInIndex", () => $41671bae1d575fb3$export$1a576a0016f0d938);

var $9ulW1 = parcelRequire("9ulW1");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");
function $41671bae1d575fb3$export$735c334fba27a380(o) {
    return o && !!o["expr"];
}
function $41671bae1d575fb3$export$1aab31983dac9fd5(o) {
    return $41671bae1d575fb3$export$735c334fba27a380(o) || (0, $4xdf1.isSignalRef)(o);
}
function $41671bae1d575fb3$export$1a576a0016f0d938(index) {
    const props = (0, $7k4G6.keys)(index || {});
    const newIndex = {};
    for (const prop of props)newIndex[prop] = (0, $9ulW1.signalRefOrValue)(index[prop]);
    return newIndex;
}

});

parcelRegister("9mRLv", function(module, exports) {

$parcel$export(module.exports, "ARC", () => $6d1fdfc9d635b06a$export$60c3724dc1c8df5c);
$parcel$export(module.exports, "AREA", () => $6d1fdfc9d635b06a$export$33c749e6887d5e1d);
$parcel$export(module.exports, "BAR", () => $6d1fdfc9d635b06a$export$f36c43b473e31092);
$parcel$export(module.exports, "IMAGE", () => $6d1fdfc9d635b06a$export$74f94c628b84d921);
$parcel$export(module.exports, "LINE", () => $6d1fdfc9d635b06a$export$f4dbacc416028787);
$parcel$export(module.exports, "POINT", () => $6d1fdfc9d635b06a$export$a80a24d37f0f1279);
$parcel$export(module.exports, "RECT", () => $6d1fdfc9d635b06a$export$1e530543ba1d4b12);
$parcel$export(module.exports, "RULE", () => $6d1fdfc9d635b06a$export$bb0a446c22f826c7);
$parcel$export(module.exports, "TEXT", () => $6d1fdfc9d635b06a$export$d597759d33be802e);
$parcel$export(module.exports, "TICK", () => $6d1fdfc9d635b06a$export$ba7e350edd65b83a);
$parcel$export(module.exports, "TRAIL", () => $6d1fdfc9d635b06a$export$9a2effe7997ad081);
$parcel$export(module.exports, "CIRCLE", () => $6d1fdfc9d635b06a$export$2b4cb8204be4ae5e);
$parcel$export(module.exports, "SQUARE", () => $6d1fdfc9d635b06a$export$b3f6956f963758ad);
$parcel$export(module.exports, "GEOSHAPE", () => $6d1fdfc9d635b06a$export$fa7332f23f5cdaa8);
$parcel$export(module.exports, "isPathMark", () => $6d1fdfc9d635b06a$export$1958260eddabb7ce);
$parcel$export(module.exports, "isRectBasedMark", () => $6d1fdfc9d635b06a$export$b55ff3ac67e54474);
$parcel$export(module.exports, "PRIMITIVE_MARKS", () => $6d1fdfc9d635b06a$export$95a58d9d4852dc94);
$parcel$export(module.exports, "isMarkDef", () => $6d1fdfc9d635b06a$export$d7f1cb5bb2eba904);
$parcel$export(module.exports, "FILL_STROKE_CONFIG", () => $6d1fdfc9d635b06a$export$bd77ad66fc536acb);
$parcel$export(module.exports, "VL_ONLY_MARK_CONFIG_PROPERTIES", () => $6d1fdfc9d635b06a$export$54a0555fb01c9a93);
$parcel$export(module.exports, "VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX", () => $6d1fdfc9d635b06a$export$937f90cc2f11933a);
$parcel$export(module.exports, "defaultMarkConfig", () => $6d1fdfc9d635b06a$export$f588f967ee4882a5);
$parcel$export(module.exports, "MARK_CONFIGS", () => $6d1fdfc9d635b06a$export$fedfc811dff28c33);
$parcel$export(module.exports, "BAR_CORNER_RADIUS_INDEX", () => $6d1fdfc9d635b06a$export$9fcc23e584852ef8);
$parcel$export(module.exports, "defaultBarConfig", () => $6d1fdfc9d635b06a$export$50c65d5b7147d321);
$parcel$export(module.exports, "defaultRectConfig", () => $6d1fdfc9d635b06a$export$88798ee4e3416425);
$parcel$export(module.exports, "defaultTickConfig", () => $6d1fdfc9d635b06a$export$2e5298c94792c641);
$parcel$export(module.exports, "getMarkType", () => $6d1fdfc9d635b06a$export$b1269d6bf6e491ec);

var $2bi3s = parcelRequire("2bi3s");

var $7k4G6 = parcelRequire("7k4G6");
const $6d1fdfc9d635b06a$export$c9d15bcfc6d42044 = {
    arc: "arc",
    area: "area",
    bar: "bar",
    image: "image",
    line: "line",
    point: "point",
    rect: "rect",
    rule: "rule",
    text: "text",
    tick: "tick",
    trail: "trail",
    circle: "circle",
    square: "square",
    geoshape: "geoshape"
};
const $6d1fdfc9d635b06a$export$60c3724dc1c8df5c = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.arc;
const $6d1fdfc9d635b06a$export$33c749e6887d5e1d = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.area;
const $6d1fdfc9d635b06a$export$f36c43b473e31092 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.bar;
const $6d1fdfc9d635b06a$export$74f94c628b84d921 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.image;
const $6d1fdfc9d635b06a$export$f4dbacc416028787 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.line;
const $6d1fdfc9d635b06a$export$a80a24d37f0f1279 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.point;
const $6d1fdfc9d635b06a$export$1e530543ba1d4b12 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.rect;
const $6d1fdfc9d635b06a$export$bb0a446c22f826c7 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.rule;
const $6d1fdfc9d635b06a$export$d597759d33be802e = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.text;
const $6d1fdfc9d635b06a$export$ba7e350edd65b83a = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.tick;
const $6d1fdfc9d635b06a$export$9a2effe7997ad081 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.trail;
const $6d1fdfc9d635b06a$export$2b4cb8204be4ae5e = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.circle;
const $6d1fdfc9d635b06a$export$b3f6956f963758ad = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.square;
const $6d1fdfc9d635b06a$export$fa7332f23f5cdaa8 = $6d1fdfc9d635b06a$export$c9d15bcfc6d42044.geoshape;
function $6d1fdfc9d635b06a$export$e33ad6871e762338(m) {
    return m in $6d1fdfc9d635b06a$export$c9d15bcfc6d42044;
}
function $6d1fdfc9d635b06a$export$1958260eddabb7ce(m) {
    return (0, $7k4G6.contains)([
        "line",
        "area",
        "trail"
    ], m);
}
function $6d1fdfc9d635b06a$export$b55ff3ac67e54474(m) {
    return (0, $7k4G6.contains)([
        "rect",
        "bar",
        "image",
        "arc" /* arc is rect/interval in polar coordinate */ 
    ], m);
}
const $6d1fdfc9d635b06a$export$95a58d9d4852dc94 = (0, $7k4G6.keys)($6d1fdfc9d635b06a$export$c9d15bcfc6d42044);
function $6d1fdfc9d635b06a$export$d7f1cb5bb2eba904(mark) {
    return mark["type"];
}
const $6d1fdfc9d635b06a$var$PRIMITIVE_MARK_INDEX = (0, $2bi3s.toSet)($6d1fdfc9d635b06a$export$95a58d9d4852dc94);
function $6d1fdfc9d635b06a$export$d148ad171fe6a1d4(mark) {
    const markType = $6d1fdfc9d635b06a$export$d7f1cb5bb2eba904(mark) ? mark.type : mark;
    return markType in $6d1fdfc9d635b06a$var$PRIMITIVE_MARK_INDEX;
}
const $6d1fdfc9d635b06a$export$68f4dfd6e3a1731f = [
    "stroke",
    "strokeWidth",
    "strokeDash",
    "strokeDashOffset",
    "strokeOpacity",
    "strokeJoin",
    "strokeMiterLimit"
];
const $6d1fdfc9d635b06a$export$6aedda7b5467d134 = [
    "fill",
    "fillOpacity"
];
const $6d1fdfc9d635b06a$export$bd77ad66fc536acb = [
    ...$6d1fdfc9d635b06a$export$68f4dfd6e3a1731f,
    ...$6d1fdfc9d635b06a$export$6aedda7b5467d134
];
const $6d1fdfc9d635b06a$var$VL_ONLY_MARK_CONFIG_INDEX = {
    color: 1,
    filled: 1,
    invalid: 1,
    order: 1,
    radius2: 1,
    theta2: 1,
    timeUnitBand: 1,
    timeUnitBandPosition: 1
};
const $6d1fdfc9d635b06a$export$54a0555fb01c9a93 = (0, $7k4G6.keys)($6d1fdfc9d635b06a$var$VL_ONLY_MARK_CONFIG_INDEX);
const $6d1fdfc9d635b06a$export$937f90cc2f11933a = {
    area: [
        "line",
        "point"
    ],
    bar: [
        "binSpacing",
        "continuousBandSize",
        "discreteBandSize"
    ],
    rect: [
        "binSpacing",
        "continuousBandSize",
        "discreteBandSize"
    ],
    line: [
        "point"
    ],
    tick: [
        "bandSize",
        "thickness"
    ]
};
const $6d1fdfc9d635b06a$export$f588f967ee4882a5 = {
    color: "#4c78a8",
    invalid: "filter",
    timeUnitBand: 1
};
const $6d1fdfc9d635b06a$var$MARK_CONFIG_INDEX = {
    mark: 1,
    arc: 1,
    area: 1,
    bar: 1,
    circle: 1,
    image: 1,
    line: 1,
    point: 1,
    rect: 1,
    rule: 1,
    square: 1,
    text: 1,
    tick: 1,
    trail: 1,
    geoshape: 1
};
const $6d1fdfc9d635b06a$export$fedfc811dff28c33 = (0, $7k4G6.keys)($6d1fdfc9d635b06a$var$MARK_CONFIG_INDEX);
const $6d1fdfc9d635b06a$export$9fcc23e584852ef8 = {
    horizontal: [
        "cornerRadiusTopRight",
        "cornerRadiusBottomRight"
    ],
    vertical: [
        "cornerRadiusTopLeft",
        "cornerRadiusTopRight"
    ]
};
const $6d1fdfc9d635b06a$var$DEFAULT_RECT_BAND_SIZE = 5;
const $6d1fdfc9d635b06a$export$50c65d5b7147d321 = {
    binSpacing: 1,
    continuousBandSize: $6d1fdfc9d635b06a$var$DEFAULT_RECT_BAND_SIZE,
    timeUnitBandPosition: 0.5
};
const $6d1fdfc9d635b06a$export$88798ee4e3416425 = {
    binSpacing: 0,
    continuousBandSize: $6d1fdfc9d635b06a$var$DEFAULT_RECT_BAND_SIZE,
    timeUnitBandPosition: 0.5
};
const $6d1fdfc9d635b06a$export$2e5298c94792c641 = {
    thickness: 1
};
function $6d1fdfc9d635b06a$export$b1269d6bf6e491ec(m) {
    return $6d1fdfc9d635b06a$export$d7f1cb5bb2eba904(m) ? m.type : m;
}

});



parcelRegister("Xb2We", function(module, exports) {

$parcel$export(module.exports, "DEFAULT_SORT_OP", () => $0b1e1462d459bd91$export$2a0d377cd3c84525);
$parcel$export(module.exports, "isSortByChannel", () => $0b1e1462d459bd91$export$13ed711c10d29c0b);
$parcel$export(module.exports, "isSortByEncoding", () => $0b1e1462d459bd91$export$91d7423f3dc7a74f);
$parcel$export(module.exports, "isSortField", () => $0b1e1462d459bd91$export$66df400cef8b8990);
$parcel$export(module.exports, "isSortArray", () => $0b1e1462d459bd91$export$2bd1d02ad0ef35fd);

var $2bi3s = parcelRequire("2bi3s");
const $0b1e1462d459bd91$export$2a0d377cd3c84525 = "min";
const $0b1e1462d459bd91$var$SORT_BY_CHANNEL_INDEX = {
    x: 1,
    y: 1,
    color: 1,
    fill: 1,
    stroke: 1,
    strokeWidth: 1,
    size: 1,
    shape: 1,
    fillOpacity: 1,
    strokeOpacity: 1,
    opacity: 1,
    text: 1
};
function $0b1e1462d459bd91$export$13ed711c10d29c0b(c) {
    return c in $0b1e1462d459bd91$var$SORT_BY_CHANNEL_INDEX;
}
function $0b1e1462d459bd91$export$91d7423f3dc7a74f(sort) {
    return !!sort && !!sort["encoding"];
}
function $0b1e1462d459bd91$export$66df400cef8b8990(sort) {
    return !!sort && (sort["op"] === "count" || !!sort["field"]);
}
function $0b1e1462d459bd91$export$2bd1d02ad0ef35fd(sort) {
    return !!sort && (0, $2bi3s.isArray)(sort);
}

});

parcelRegister("1mvM3", function(module, exports) {

$parcel$export(module.exports, "isFacetMapping", () => $0fe07e2ac4898f31$export$e0127c46cfdf268a);
$parcel$export(module.exports, "isFacetFieldDef", () => $0fe07e2ac4898f31$export$78d5256aae52c8bc);
$parcel$export(module.exports, "isFacetSpec", () => $0fe07e2ac4898f31$export$a3c4cb7b040f7d42);
function $0fe07e2ac4898f31$export$e0127c46cfdf268a(f) {
    return "row" in f || "column" in f;
}
function $0fe07e2ac4898f31$export$78d5256aae52c8bc(channelDef) {
    return !!channelDef && "header" in channelDef;
}
function $0fe07e2ac4898f31$export$a3c4cb7b040f7d42(spec) {
    return "facet" in spec;
}

});


parcelRegister("ahFi3", function(module, exports) {

$parcel$export(module.exports, "extractTitleConfig", () => $77cb854735a07626$export$4de24853e0316ddf);
$parcel$export(module.exports, "isText", () => $77cb854735a07626$export$1879817ac5c922b7);

var $2bi3s = parcelRequire("2bi3s");

var $7k4G6 = parcelRequire("7k4G6");
var $77cb854735a07626$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $77cb854735a07626$export$4de24853e0316ddf(titleConfig) {
    const { anchor: // These are non-mark title config that need to be hardcoded
    anchor, frame: frame, offset: offset, orient: orient, color: // color needs to be redirect to fill
    color, subtitleColor: // subtitle properties
    subtitleColor, subtitleFont: subtitleFont, subtitleFontSize: subtitleFontSize, subtitleFontStyle: subtitleFontStyle, subtitleFontWeight: subtitleFontWeight, subtitleLineHeight: subtitleLineHeight, subtitlePadding: subtitlePadding } = titleConfig, // The rest are mark config.
    rest = $77cb854735a07626$var$__rest(titleConfig, [
        "anchor",
        "frame",
        "offset",
        "orient",
        "color",
        "subtitleColor",
        "subtitleFont",
        "subtitleFontSize",
        "subtitleFontStyle",
        "subtitleFontWeight",
        "subtitleLineHeight",
        "subtitlePadding"
    ]);
    const titleMarkConfig = Object.assign(Object.assign({}, rest), color ? {
        fill: color
    } : {});
    // These are non-mark title config that need to be hardcoded
    const nonMark = Object.assign(Object.assign(Object.assign(Object.assign({}, anchor ? {
        anchor: anchor
    } : {}), frame ? {
        frame: frame
    } : {}), offset ? {
        offset: offset
    } : {}), orient ? {
        orient: orient
    } : {});
    // subtitle part can stay in config.title since header titles do not use subtitle
    const subtitle = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, subtitleColor ? {
        subtitleColor: subtitleColor
    } : {}), subtitleFont ? {
        subtitleFont: subtitleFont
    } : {}), subtitleFontSize ? {
        subtitleFontSize: subtitleFontSize
    } : {}), subtitleFontStyle ? {
        subtitleFontStyle: subtitleFontStyle
    } : {}), subtitleFontWeight ? {
        subtitleFontWeight: subtitleFontWeight
    } : {}), subtitleLineHeight ? {
        subtitleLineHeight: subtitleLineHeight
    } : {}), subtitlePadding ? {
        subtitlePadding: subtitlePadding
    } : {});
    const subtitleMarkConfig = (0, $7k4G6.pick)(titleMarkConfig, [
        "align",
        "baseline",
        "dx",
        "dy",
        "limit"
    ]);
    return {
        titleMarkConfig: titleMarkConfig,
        subtitleMarkConfig: subtitleMarkConfig,
        nonMark: nonMark,
        subtitle: subtitle
    };
}
function $77cb854735a07626$export$1879817ac5c922b7(v) {
    return (0, $2bi3s.isString)(v) || (0, $2bi3s.isArray)(v) && (0, $2bi3s.isString)(v[0]);
}

});


parcelRegister("4MTlU", function(module, exports) {

$parcel$export(module.exports, "getAllCompositeMarks", () => $37c694f0a61a1863$export$cf8244224838ab1);

var $7k4G6 = parcelRequire("7k4G6");

var $aQdkk = parcelRequire("aQdkk");

var $d7bcc = parcelRequire("d7bcc");

var $6hRqK = parcelRequire("6hRqK");

var $i2qjf = parcelRequire("i2qjf");
/**
 * Registry index for all composite mark's normalizer
 */ const $37c694f0a61a1863$var$compositeMarkRegistry = {};
function $37c694f0a61a1863$export$e16d8520af44a096(mark, run, parts) {
    const normalizer = new (0, $aQdkk.CompositeMarkNormalizer)(mark, run);
    $37c694f0a61a1863$var$compositeMarkRegistry[mark] = {
        normalizer: normalizer,
        parts: parts
    };
}
function $37c694f0a61a1863$export$cd7f480d6b8286c3(mark) {
    delete $37c694f0a61a1863$var$compositeMarkRegistry[mark];
}
function $37c694f0a61a1863$export$cf8244224838ab1() {
    return (0, $7k4G6.keys)($37c694f0a61a1863$var$compositeMarkRegistry);
}
$37c694f0a61a1863$export$e16d8520af44a096((0, $d7bcc.BOXPLOT), (0, $d7bcc.normalizeBoxPlot), (0, $d7bcc.BOXPLOT_PARTS));
$37c694f0a61a1863$export$e16d8520af44a096((0, $i2qjf.ERRORBAR), (0, $i2qjf.normalizeErrorBar), (0, $i2qjf.ERRORBAR_PARTS));
$37c694f0a61a1863$export$e16d8520af44a096((0, $6hRqK.ERRORBAND), (0, $6hRqK.normalizeErrorBand), (0, $6hRqK.ERRORBAND_PARTS));

});
parcelRegister("aQdkk", function(module, exports) {

$parcel$export(module.exports, "CompositeMarkNormalizer", () => $7e491928b973902f$export$1b392b966028d0ef);

var $9mRLv = parcelRequire("9mRLv");

var $78jSz = parcelRequire("78jSz");
class $7e491928b973902f$export$1b392b966028d0ef {
    constructor(name, run){
        this.name = name;
        this.run = run;
    }
    hasMatchingType(spec) {
        if ((0, $78jSz.isUnitSpec)(spec)) return (0, $9mRLv.getMarkType)(spec.mark) === this.name;
        return false;
    }
}

});
parcelRegister("78jSz", function(module, exports) {

$parcel$export(module.exports, "isUnitSpec", () => $5318b353bca58ffa$export$42fa827cf13b5e4a);
function $5318b353bca58ffa$export$42fa827cf13b5e4a(spec) {
    return "mark" in spec;
}

});


parcelRegister("d7bcc", function(module, exports) {

$parcel$export(module.exports, "BOXPLOT", () => $98c49d077f6771dd$export$b4cf695207fee992);
$parcel$export(module.exports, "BOXPLOT_PARTS", () => $98c49d077f6771dd$export$5b9a4c028c0298bd);
$parcel$export(module.exports, "boxPlotNormalizer", () => $98c49d077f6771dd$export$2bd89061a043e33d);
$parcel$export(module.exports, "normalizeBoxPlot", () => $98c49d077f6771dd$export$905e7656c51d3703);

var $2bi3s = parcelRequire("2bi3s");

var $9ulW1 = parcelRequire("9ulW1");

var $8eU8A = parcelRequire("8eU8A");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9mRLv = parcelRequire("9mRLv");

var $7k4G6 = parcelRequire("7k4G6");

var $aQdkk = parcelRequire("aQdkk");

var $ac0yE = parcelRequire("ac0yE");
var $98c49d077f6771dd$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $98c49d077f6771dd$export$b4cf695207fee992 = "boxplot";
const $98c49d077f6771dd$export$5b9a4c028c0298bd = [
    "box",
    "median",
    "outliers",
    "rule",
    "ticks"
];
const $98c49d077f6771dd$export$2bd89061a043e33d = new (0, $aQdkk.CompositeMarkNormalizer)($98c49d077f6771dd$export$b4cf695207fee992, $98c49d077f6771dd$export$905e7656c51d3703);
function $98c49d077f6771dd$export$d414c5d3255db8a5(extent) {
    if ((0, $2bi3s.isNumber)(extent)) return "tukey";
    // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.
    return extent;
}
function $98c49d077f6771dd$export$905e7656c51d3703(spec, { config: config }) {
    var _a, _b;
    // Need to initEncoding first so we can infer type
    spec = Object.assign(Object.assign({}, spec), {
        encoding: (0, $8eU8A.normalizeEncoding)(spec.encoding, config)
    });
    const { mark: mark, encoding: _encoding, selection: selection, projection: _p } = spec, outerSpec = $98c49d077f6771dd$var$__rest(spec, [
        "mark",
        "encoding",
        "selection",
        "projection"
    ]);
    const markDef = (0, $9mRLv.isMarkDef)(mark) ? mark : {
        type: mark
    };
    // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support
    if (selection) $3XBQv.warn($bHNid.selectionNotSupported("boxplot"));
    const extent = (_a = markDef.extent) !== null && _a !== void 0 ? _a : config.boxplot.extent;
    const sizeValue = (0, $9ulW1.getMarkPropOrConfig)("size", markDef, config);
    const boxPlotType = $98c49d077f6771dd$export$d414c5d3255db8a5(extent);
    const { bins: bins, timeUnits: timeUnits, transform: transform, continuousAxisChannelDef: continuousAxisChannelDef, continuousAxis: continuousAxis, groupby: groupby, aggregate: aggregate, encodingWithoutContinuousAxis: encodingWithoutContinuousAxis, ticksOrient: ticksOrient, boxOrient: boxOrient, customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField } = $98c49d077f6771dd$var$boxParams(spec, extent, config);
    const { color: color, size: size } = encodingWithoutContinuousAxis, encodingWithoutSizeColorAndContinuousAxis = $98c49d077f6771dd$var$__rest(encodingWithoutContinuousAxis, [
        "color",
        "size"
    ]);
    const makeBoxPlotPart = (sharedEncoding)=>{
        return (0, $ac0yE.makeCompositeAggregatePartFactory)(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
    };
    const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
    const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
    const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis), size ? {
        size: size
    } : {}));
    const fiveSummaryTooltipEncoding = (0, $ac0yE.getCompositeMarkTooltip)([
        {
            fieldPrefix: boxPlotType === "min-max" ? "upper_whisker_" : "max_",
            titlePrefix: "Max"
        },
        {
            fieldPrefix: "upper_box_",
            titlePrefix: "Q3"
        },
        {
            fieldPrefix: "mid_box_",
            titlePrefix: "Median"
        },
        {
            fieldPrefix: "lower_box_",
            titlePrefix: "Q1"
        },
        {
            fieldPrefix: boxPlotType === "min-max" ? "lower_whisker_" : "min_",
            titlePrefix: "Min"
        }
    ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
    // ## Whisker Layers
    const endTick = {
        type: "tick",
        color: "black",
        opacity: 1,
        orient: ticksOrient,
        invalid: null,
        aria: false
    };
    const whiskerTooltipEncoding = boxPlotType === "min-max" ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker
     : (0, $ac0yE.getCompositeMarkTooltip)([
        {
            fieldPrefix: "upper_whisker_",
            titlePrefix: "Upper Whisker"
        },
        {
            fieldPrefix: "lower_whisker_",
            titlePrefix: "Lower Whisker"
        }
    ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
    const whiskerLayers = [
        ...makeBoxPlotExtent({
            partName: "rule",
            mark: {
                type: "rule",
                invalid: null,
                aria: false
            },
            positionPrefix: "lower_whisker",
            endPositionPrefix: "lower_box",
            extraEncoding: whiskerTooltipEncoding
        }),
        ...makeBoxPlotExtent({
            partName: "rule",
            mark: {
                type: "rule",
                invalid: null,
                aria: false
            },
            positionPrefix: "upper_box",
            endPositionPrefix: "upper_whisker",
            extraEncoding: whiskerTooltipEncoding
        }),
        ...makeBoxPlotExtent({
            partName: "ticks",
            mark: endTick,
            positionPrefix: "lower_whisker",
            extraEncoding: whiskerTooltipEncoding
        }),
        ...makeBoxPlotExtent({
            partName: "ticks",
            mark: endTick,
            positionPrefix: "upper_whisker",
            extraEncoding: whiskerTooltipEncoding
        })
    ];
    // ## Box Layers
    // TODO: support hiding certain mark parts
    const boxLayers = [
        ...boxPlotType !== "tukey" ? whiskerLayers : [],
        ...makeBoxPlotBox({
            partName: "box",
            mark: Object.assign(Object.assign({
                type: "bar"
            }, sizeValue ? {
                size: sizeValue
            } : {}), {
                orient: boxOrient,
                invalid: null,
                ariaRoleDescription: "box"
            }),
            positionPrefix: "lower_box",
            endPositionPrefix: "upper_box",
            extraEncoding: fiveSummaryTooltipEncoding
        }),
        ...makeBoxPlotMidTick({
            partName: "median",
            mark: Object.assign(Object.assign(Object.assign({
                type: "tick",
                invalid: null
            }, (0, $2bi3s.isObject)(config.boxplot.median) && config.boxplot.median.color ? {
                color: config.boxplot.median.color
            } : {}), sizeValue ? {
                size: sizeValue
            } : {}), {
                orient: ticksOrient,
                aria: false
            }),
            positionPrefix: "mid_box",
            extraEncoding: fiveSummaryTooltipEncoding
        })
    ];
    if (boxPlotType === "min-max") return Object.assign(Object.assign({}, outerSpec), {
        transform: ((_b = outerSpec.transform) !== null && _b !== void 0 ? _b : []).concat(transform),
        layer: boxLayers
    });
    // Tukey Box Plot
    const lowerBoxExpr = `datum["lower_box_${continuousAxisChannelDef.field}"]`;
    const upperBoxExpr = `datum["upper_box_${continuousAxisChannelDef.field}"]`;
    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;
    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;
    const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;
    const fieldExpr = `datum["${continuousAxisChannelDef.field}"]`;
    const joinaggregateTransform = {
        joinaggregate: $98c49d077f6771dd$var$boxParamsQuartiles(continuousAxisChannelDef.field),
        groupby: groupby
    };
    const filteredWhiskerSpec = {
        transform: [
            {
                filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`
            },
            {
                aggregate: [
                    {
                        op: "min",
                        field: continuousAxisChannelDef.field,
                        as: "lower_whisker_" + continuousAxisChannelDef.field
                    },
                    {
                        op: "max",
                        field: continuousAxisChannelDef.field,
                        as: "upper_whisker_" + continuousAxisChannelDef.field
                    },
                    // preserve lower_box / upper_box
                    {
                        op: "min",
                        field: "lower_box_" + continuousAxisChannelDef.field,
                        as: "lower_box_" + continuousAxisChannelDef.field
                    },
                    {
                        op: "max",
                        field: "upper_box_" + continuousAxisChannelDef.field,
                        as: "upper_box_" + continuousAxisChannelDef.field
                    },
                    ...aggregate
                ],
                groupby: groupby
            }
        ],
        layer: whiskerLayers
    };
    const { tooltip: tooltip } = encodingWithoutSizeColorAndContinuousAxis, encodingWithoutSizeColorContinuousAxisAndTooltip = $98c49d077f6771dd$var$__rest(encodingWithoutSizeColorAndContinuousAxis, [
        "tooltip"
    ]);
    const { scale: scale, axis: axis } = continuousAxisChannelDef;
    const title = (0, $ac0yE.getTitle)(continuousAxisChannelDef);
    const axisWithoutTitle = (0, $7k4G6.omit)(axis, [
        "title"
    ]);
    const outlierLayersMixins = (0, $ac0yE.partLayerMixins)(markDef, "outliers", config.boxplot, {
        transform: [
            {
                filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})`
            }
        ],
        mark: "point",
        encoding: Object.assign(Object.assign(Object.assign({
            [continuousAxis]: Object.assign(Object.assign(Object.assign({
                field: continuousAxisChannelDef.field,
                type: continuousAxisChannelDef.type
            }, title !== undefined ? {
                title: title
            } : {}), scale !== undefined ? {
                scale: scale
            } : {}), (0, $7k4G6.isEmpty)(axisWithoutTitle) ? {} : {
                axis: axisWithoutTitle
            })
        }, encodingWithoutSizeColorContinuousAxisAndTooltip), color ? {
            color: color
        } : {}), customTooltipWithoutAggregatedField ? {
            tooltip: customTooltipWithoutAggregatedField
        } : {})
    })[0];
    let filteredLayersMixins;
    const filteredLayersMixinsTransforms = [
        ...bins,
        ...timeUnits,
        joinaggregateTransform
    ];
    if (outlierLayersMixins) filteredLayersMixins = {
        transform: filteredLayersMixinsTransforms,
        layer: [
            outlierLayersMixins,
            filteredWhiskerSpec
        ]
    };
    else {
        filteredLayersMixins = filteredWhiskerSpec;
        filteredLayersMixins.transform.unshift(...filteredLayersMixinsTransforms);
    }
    return Object.assign(Object.assign({}, outerSpec), {
        layer: [
            filteredLayersMixins,
            {
                transform: // boxplot
                transform,
                layer: boxLayers
            }
        ]
    });
}
function $98c49d077f6771dd$var$boxParamsQuartiles(continousAxisField) {
    return [
        {
            op: "q1",
            field: continousAxisField,
            as: "lower_box_" + continousAxisField
        },
        {
            op: "q3",
            field: continousAxisField,
            as: "upper_box_" + continousAxisField
        }
    ];
}
function $98c49d077f6771dd$var$boxParams(spec, extent, config) {
    const orient = (0, $ac0yE.compositeMarkOrient)(spec, $98c49d077f6771dd$export$b4cf695207fee992);
    const { continuousAxisChannelDef: continuousAxisChannelDef, continuousAxis: continuousAxis } = (0, $ac0yE.compositeMarkContinuousAxis)(spec, orient, $98c49d077f6771dd$export$b4cf695207fee992);
    const continuousFieldName = continuousAxisChannelDef.field;
    const boxPlotType = $98c49d077f6771dd$export$d414c5d3255db8a5(extent);
    const boxplotSpecificAggregate = [
        ...$98c49d077f6771dd$var$boxParamsQuartiles(continuousFieldName),
        {
            op: "median",
            field: continuousFieldName,
            as: "mid_box_" + continuousFieldName
        },
        {
            op: "min",
            field: continuousFieldName,
            as: (boxPlotType === "min-max" ? "lower_whisker_" : "min_") + continuousFieldName
        },
        {
            op: "max",
            field: continuousFieldName,
            as: (boxPlotType === "min-max" ? "upper_whisker_" : "max_") + continuousFieldName
        }
    ];
    const postAggregateCalculates = boxPlotType === "min-max" || boxPlotType === "tukey" ? [] : [
        // This is for the  original k-IQR, which we do not expose
        {
            calculate: `datum["upper_box_${continuousFieldName}"] - datum["lower_box_${continuousFieldName}"]`,
            as: "iqr_" + continuousFieldName
        },
        {
            calculate: `min(datum["upper_box_${continuousFieldName}"] + datum["iqr_${continuousFieldName}"] * ${extent}, datum["max_${continuousFieldName}"])`,
            as: "upper_whisker_" + continuousFieldName
        },
        {
            calculate: `max(datum["lower_box_${continuousFieldName}"] - datum["iqr_${continuousFieldName}"] * ${extent}, datum["min_${continuousFieldName}"])`,
            as: "lower_whisker_" + continuousFieldName
        }
    ];
    const _a = spec.encoding, _b = continuousAxis, oldContinuousAxisChannelDef = _a[_b], oldEncodingWithoutContinuousAxis = $98c49d077f6771dd$var$__rest(_a, [
        typeof _b === "symbol" ? _b : _b + ""
    ]);
    const { customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField, filteredEncoding: filteredEncoding } = (0, $ac0yE.filterTooltipWithAggregatedField)(oldEncodingWithoutContinuousAxis);
    const { bins: bins, timeUnits: timeUnits, aggregate: aggregate, groupby: groupby, encoding: encodingWithoutContinuousAxis } = (0, $8eU8A.extractTransformsFromEncoding)(filteredEncoding, config);
    const ticksOrient = orient === "vertical" ? "horizontal" : "vertical";
    const boxOrient = orient;
    const transform = [
        ...bins,
        ...timeUnits,
        {
            aggregate: [
                ...aggregate,
                ...boxplotSpecificAggregate
            ],
            groupby: groupby
        },
        ...postAggregateCalculates
    ];
    return {
        bins: bins,
        timeUnits: timeUnits,
        transform: transform,
        groupby: groupby,
        aggregate: aggregate,
        continuousAxisChannelDef: continuousAxisChannelDef,
        continuousAxis: continuousAxis,
        encodingWithoutContinuousAxis: encodingWithoutContinuousAxis,
        ticksOrient: ticksOrient,
        boxOrient: boxOrient,
        customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField
    };
}

});
parcelRegister("8eU8A", function(module, exports) {

$parcel$export(module.exports, "channelHasField", () => $5ffb2d4450ad0c64$export$a7c91f6c94571abe);
$parcel$export(module.exports, "isAggregate", () => $5ffb2d4450ad0c64$export$cc2e3d03e914de66);
$parcel$export(module.exports, "extractTransformsFromEncoding", () => $5ffb2d4450ad0c64$export$b7072d75387f6adc);
$parcel$export(module.exports, "forEach", () => $5ffb2d4450ad0c64$export$4b80e395e36b5a56);
$parcel$export(module.exports, "initEncoding", () => $5ffb2d4450ad0c64$export$8b09501b7485100a);
$parcel$export(module.exports, "normalizeEncoding", () => $5ffb2d4450ad0c64$export$9eac13ae8fddd5de);
$parcel$export(module.exports, "fieldDefs", () => $5ffb2d4450ad0c64$export$d315cb23b302cf68);
$parcel$export(module.exports, "reduce", () => $5ffb2d4450ad0c64$export$533b26079ad0b4b);
$parcel$export(module.exports, "pathGroupingFields", () => $5ffb2d4450ad0c64$export$e6c007dc7bd05bbd);

var $2bi3s = parcelRequire("2bi3s");

var $7sjJm = parcelRequire("7sjJm");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");
var $5ffb2d4450ad0c64$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $5ffb2d4450ad0c64$export$a7c91f6c94571abe(encoding, channel) {
    const channelDef = encoding && encoding[channel];
    if (channelDef) {
        if ((0, $2bi3s.isArray)(channelDef)) return (0, $7k4G6.some)(channelDef, (fieldDef)=>!!fieldDef.field);
        else return (0, $2hAmp.isFieldDef)(channelDef) || (0, $2hAmp.hasConditionalFieldDef)(channelDef);
    }
    return false;
}
function $5ffb2d4450ad0c64$export$cc2e3d03e914de66(encoding) {
    return (0, $7k4G6.some)((0, $fWfT0.CHANNELS), (channel)=>{
        if ($5ffb2d4450ad0c64$export$a7c91f6c94571abe(encoding, channel)) {
            const channelDef = encoding[channel];
            if ((0, $2bi3s.isArray)(channelDef)) return (0, $7k4G6.some)(channelDef, (fieldDef)=>!!fieldDef.aggregate);
            else {
                const fieldDef = (0, $2hAmp.getFieldDef)(channelDef);
                return fieldDef && !!fieldDef.aggregate;
            }
        }
        return false;
    });
}
function $5ffb2d4450ad0c64$export$b7072d75387f6adc(oldEncoding, config) {
    const groupby = [];
    const bins = [];
    const timeUnits = [];
    const aggregate = [];
    const encoding = {};
    $5ffb2d4450ad0c64$export$4b80e395e36b5a56(oldEncoding, (channelDef, channel)=>{
        // Extract potential embedded transformations along with remaining properties
        if ((0, $2hAmp.isFieldDef)(channelDef)) {
            const { field: field, aggregate: aggOp, bin: bin, timeUnit: timeUnit } = channelDef, remaining = $5ffb2d4450ad0c64$var$__rest(channelDef, [
                "field",
                "aggregate",
                "bin",
                "timeUnit"
            ]);
            if (aggOp || timeUnit || bin) {
                const guide = (0, $2hAmp.getGuide)(channelDef);
                const isTitleDefined = guide && guide.title;
                let newField = (0, $2hAmp.vgField)(channelDef, {
                    forAs: true
                });
                const newFieldDef = Object.assign(Object.assign(Object.assign({}, isTitleDefined ? [] : {
                    title: (0, $2hAmp.title)(channelDef, config, {
                        allowDisabling: true
                    })
                }), remaining), {
                    // Always overwrite field
                    field: newField
                });
                if (aggOp) {
                    let op;
                    if ((0, $7sjJm.isArgmaxDef)(aggOp)) {
                        op = "argmax";
                        newField = (0, $2hAmp.vgField)({
                            op: "argmax",
                            field: aggOp.argmax
                        }, {
                            forAs: true
                        });
                        newFieldDef.field = `${newField}.${field}`;
                    } else if ((0, $7sjJm.isArgminDef)(aggOp)) {
                        op = "argmin";
                        newField = (0, $2hAmp.vgField)({
                            op: "argmin",
                            field: aggOp.argmin
                        }, {
                            forAs: true
                        });
                        newFieldDef.field = `${newField}.${field}`;
                    } else if (aggOp !== "boxplot" && aggOp !== "errorbar" && aggOp !== "errorband") op = aggOp;
                    if (op) {
                        const aggregateEntry = {
                            op: op,
                            as: newField
                        };
                        if (field) aggregateEntry.field = field;
                        aggregate.push(aggregateEntry);
                    }
                } else {
                    groupby.push(newField);
                    if ((0, $2hAmp.isTypedFieldDef)(channelDef) && (0, $iR8lA.isBinning)(bin)) {
                        bins.push({
                            bin: bin,
                            field: field,
                            as: newField
                        });
                        // Add additional groupbys for range and end of bins
                        groupby.push((0, $2hAmp.vgField)(channelDef, {
                            binSuffix: "end"
                        }));
                        if ((0, $2hAmp.binRequiresRange)(channelDef, channel)) groupby.push((0, $2hAmp.vgField)(channelDef, {
                            binSuffix: "range"
                        }));
                        // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively
                        if ((0, $fWfT0.isXorY)(channel)) {
                            const secondaryChannel = {
                                field: newField + "_end"
                            };
                            encoding[channel + "2"] = secondaryChannel;
                        }
                        newFieldDef.bin = "binned";
                        if (!(0, $fWfT0.isSecondaryRangeChannel)(channel)) newFieldDef["type"] = (0, $9LX7L.QUANTITATIVE);
                    } else if (timeUnit) {
                        timeUnits.push({
                            timeUnit: timeUnit,
                            field: field,
                            as: newField
                        });
                        // define the format type for later compilation
                        const formatType = (0, $2hAmp.isTypedFieldDef)(channelDef) && channelDef.type !== (0, $9LX7L.TEMPORAL) && "time";
                        if (formatType) {
                            if (channel === (0, $fWfT0.TEXT) || channel === (0, $fWfT0.TOOLTIP)) newFieldDef["formatType"] = formatType;
                            else if ((0, $fWfT0.isNonPositionScaleChannel)(channel)) newFieldDef["legend"] = Object.assign({
                                formatType: formatType
                            }, newFieldDef["legend"]);
                            else if ((0, $fWfT0.isXorY)(channel)) newFieldDef["axis"] = Object.assign({
                                formatType: formatType
                            }, newFieldDef["axis"]);
                        }
                    }
                }
                // now the field should refer to post-transformed field instead
                encoding[channel] = newFieldDef;
            } else {
                groupby.push(field);
                encoding[channel] = oldEncoding[channel];
            }
        } else // For value def / signal ref / datum def, just copy
        encoding[channel] = oldEncoding[channel];
    });
    return {
        bins: bins,
        timeUnits: timeUnits,
        aggregate: aggregate,
        groupby: groupby,
        encoding: encoding
    };
}
function $5ffb2d4450ad0c64$export$8cf1849a4299aaf5(encoding, channel, mark) {
    const markSupported = (0, $fWfT0.supportMark)(channel, mark);
    if (!markSupported) return false;
    else if (markSupported === "binned") {
        const primaryFieldDef = encoding[channel === (0, $fWfT0.X2) ? (0, $fWfT0.X) : (0, $fWfT0.Y)];
        // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef
        // has "binned" data and thus need x2/y2 to specify the bin-end field.
        if ((0, $2hAmp.isFieldDef)(primaryFieldDef) && (0, $2hAmp.isFieldDef)(encoding[channel]) && (0, $iR8lA.isBinned)(primaryFieldDef.bin)) return true;
        else return false;
    }
    return true;
}
function $5ffb2d4450ad0c64$export$8b09501b7485100a(encoding, mark, filled, config) {
    return (0, $7k4G6.keys)(encoding).reduce((normalizedEncoding, channel)=>{
        if (!(0, $fWfT0.isChannel)(channel)) {
            // Drop invalid channel
            $3XBQv.warn($bHNid.invalidEncodingChannel(channel));
            return normalizedEncoding;
        }
        const channelDef = encoding[channel];
        if (channel === "angle" && mark === "arc" && !encoding.theta) {
            $3XBQv.warn($bHNid.REPLACE_ANGLE_WITH_THETA);
            channel = (0, $fWfT0.THETA);
        }
        if (!$5ffb2d4450ad0c64$export$8cf1849a4299aaf5(encoding, channel, mark)) {
            // Drop unsupported channel
            $3XBQv.warn($bHNid.incompatibleChannel(channel, mark));
            return normalizedEncoding;
        }
        // Drop line's size if the field is aggregated.
        if (channel === (0, $fWfT0.SIZE) && mark === "line") {
            const fieldDef = (0, $2hAmp.getFieldDef)(encoding[channel]);
            if (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.aggregate) {
                $3XBQv.warn($bHNid.LINE_WITH_VARYING_SIZE);
                return normalizedEncoding;
            }
        }
        // Drop color if either fill or stroke is specified
        if (channel === (0, $fWfT0.COLOR) && (filled ? "fill" in encoding : "stroke" in encoding)) {
            $3XBQv.warn($bHNid.droppingColor("encoding", {
                fill: "fill" in encoding,
                stroke: "stroke" in encoding
            }));
            return normalizedEncoding;
        }
        if (channel === (0, $fWfT0.DETAIL) || channel === (0, $fWfT0.ORDER) && !(0, $2bi3s.isArray)(channelDef) && !(0, $2hAmp.isValueDef)(channelDef) || channel === (0, $fWfT0.TOOLTIP) && (0, $2bi3s.isArray)(channelDef)) {
            if (channelDef) // Array of fieldDefs for detail channel (or production rule)
            normalizedEncoding[channel] = (0, $2bi3s.array)(channelDef).reduce((defs, fieldDef)=>{
                if (!(0, $2hAmp.isFieldDef)(fieldDef)) $3XBQv.warn($bHNid.emptyFieldDef(fieldDef, channel));
                else defs.push((0, $2hAmp.initFieldDef)(fieldDef, channel));
                return defs;
            }, []);
        } else {
            if (channel === (0, $fWfT0.TOOLTIP) && channelDef === null) // Preserve null so we can use it to disable tooltip
            normalizedEncoding[channel] = null;
            else if (!(0, $2hAmp.isFieldDef)(channelDef) && !(0, $2hAmp.isDatumDef)(channelDef) && !(0, $2hAmp.isValueDef)(channelDef) && !(0, $2hAmp.isConditionalDef)(channelDef) && !(0, $4xdf1.isSignalRef)(channelDef)) {
                $3XBQv.warn($bHNid.emptyFieldDef(channelDef, channel));
                return normalizedEncoding;
            }
            normalizedEncoding[channel] = (0, $2hAmp.initChannelDef)(channelDef, channel, config);
        }
        return normalizedEncoding;
    }, {});
}
function $5ffb2d4450ad0c64$export$9eac13ae8fddd5de(encoding, config) {
    const normalizedEncoding = {};
    for (const channel of (0, $7k4G6.keys)(encoding)){
        const newChannelDef = (0, $2hAmp.initChannelDef)(encoding[channel], channel, config, {
            compositeMark: true
        });
        normalizedEncoding[channel] = newChannelDef;
    }
    return normalizedEncoding;
}
function $5ffb2d4450ad0c64$export$d315cb23b302cf68(encoding) {
    const arr = [];
    for (const channel of (0, $7k4G6.keys)(encoding))if ($5ffb2d4450ad0c64$export$a7c91f6c94571abe(encoding, channel)) {
        const channelDef = encoding[channel];
        const channelDefArray = (0, $2bi3s.array)(channelDef);
        for (const def of channelDefArray){
            if ((0, $2hAmp.isFieldDef)(def)) arr.push(def);
            else if ((0, $2hAmp.hasConditionalFieldDef)(def)) arr.push(def.condition);
        }
    }
    return arr;
}
function $5ffb2d4450ad0c64$export$4b80e395e36b5a56(mapping, f, thisArg) {
    if (!mapping) return;
    for (const channel of (0, $7k4G6.keys)(mapping)){
        const el = mapping[channel];
        if ((0, $2bi3s.isArray)(el)) for (const channelDef of el)f.call(thisArg, channelDef, channel);
        else f.call(thisArg, el, channel);
    }
}
function $5ffb2d4450ad0c64$export$533b26079ad0b4b(mapping, f, init, thisArg) {
    if (!mapping) return init;
    return (0, $7k4G6.keys)(mapping).reduce((r, channel)=>{
        const map = mapping[channel];
        if ((0, $2bi3s.isArray)(map)) return map.reduce((r1, channelDef)=>{
            return f.call(thisArg, r1, channelDef, channel);
        }, r);
        else return f.call(thisArg, r, map, channel);
    }, init);
}
function $5ffb2d4450ad0c64$export$e6c007dc7bd05bbd(mark, encoding) {
    return (0, $7k4G6.keys)(encoding).reduce((details, channel)=>{
        switch(channel){
            // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, aria label, cursor should not cause lines to group
            case 0, $fWfT0.X:
            case 0, $fWfT0.Y:
            case 0, $fWfT0.HREF:
            case 0, $fWfT0.DESCRIPTION:
            case 0, $fWfT0.URL:
            case 0, $fWfT0.X2:
            case 0, $fWfT0.Y2:
            case 0, $fWfT0.THETA:
            case 0, $fWfT0.THETA2:
            case 0, $fWfT0.RADIUS:
            case 0, $fWfT0.RADIUS2:
            // falls through
            case 0, $fWfT0.LATITUDE:
            case 0, $fWfT0.LONGITUDE:
            case 0, $fWfT0.LATITUDE2:
            case 0, $fWfT0.LONGITUDE2:
            // TODO: case 'cursor':
            // text, shape, shouldn't be a part of line/trail/area [falls through]
            case 0, $fWfT0.TEXT:
            case 0, $fWfT0.SHAPE:
            case 0, $fWfT0.ANGLE:
            // falls through
            // tooltip fields should not be added to group by [falls through]
            case 0, $fWfT0.TOOLTIP:
                return details;
            case 0, $fWfT0.ORDER:
                // order should not group line / trail
                if (mark === "line" || mark === "trail") return details;
            // but order should group area for stacking (falls through)
            case 0, $fWfT0.DETAIL:
            case 0, $fWfT0.KEY:
                {
                    const channelDef = encoding[channel];
                    if ((0, $2bi3s.isArray)(channelDef) || (0, $2hAmp.isFieldDef)(channelDef)) {
                        for (const fieldDef of (0, $2bi3s.array)(channelDef))if (!fieldDef.aggregate) details.push((0, $2hAmp.vgField)(fieldDef, {}));
                    }
                    return details;
                }
            case 0, $fWfT0.SIZE:
                if (mark === "trail") // For trail, size should not group trail lines.
                return details;
            // For line, size should group lines.
            // falls through
            case 0, $fWfT0.COLOR:
            case 0, $fWfT0.FILL:
            case 0, $fWfT0.STROKE:
            case 0, $fWfT0.OPACITY:
            case 0, $fWfT0.FILLOPACITY:
            case 0, $fWfT0.STROKEOPACITY:
            case 0, $fWfT0.STROKEDASH:
            case 0, $fWfT0.STROKEWIDTH:
                {
                    // TODO strokeDashOffset:
                    // falls through
                    const fieldDef = (0, $2hAmp.getFieldDef)(encoding[channel]);
                    if (fieldDef && !fieldDef.aggregate) details.push((0, $2hAmp.vgField)(fieldDef, {}));
                    return details;
                }
        }
    }, []);
}

});

parcelRegister("ac0yE", function(module, exports) {

$parcel$export(module.exports, "filterTooltipWithAggregatedField", () => $76bb752d9c42f164$export$f7450d2a7fe649ba);
$parcel$export(module.exports, "getCompositeMarkTooltip", () => $76bb752d9c42f164$export$38569c85dd3d2d72);
$parcel$export(module.exports, "getTitle", () => $76bb752d9c42f164$export$70d1bf7729efff40);
$parcel$export(module.exports, "makeCompositeAggregatePartFactory", () => $76bb752d9c42f164$export$7773ab08410c860b);
$parcel$export(module.exports, "partLayerMixins", () => $76bb752d9c42f164$export$5fc7eee740e4ea4f);
$parcel$export(module.exports, "compositeMarkContinuousAxis", () => $76bb752d9c42f164$export$a68b2a572feea4f8);
$parcel$export(module.exports, "compositeMarkOrient", () => $76bb752d9c42f164$export$dd042d3643c3bcc4);

var $2bi3s = parcelRequire("2bi3s");

var $2hAmp = parcelRequire("2hAmp");

var $8eU8A = parcelRequire("8eU8A");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9mRLv = parcelRequire("9mRLv");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $2hAmp = parcelRequire("2hAmp");
var $76bb752d9c42f164$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $76bb752d9c42f164$export$f7450d2a7fe649ba(oldEncoding) {
    const { tooltip: tooltip } = oldEncoding, filteredEncoding = $76bb752d9c42f164$var$__rest(oldEncoding, [
        "tooltip"
    ]);
    if (!tooltip) return {
        filteredEncoding: filteredEncoding
    };
    let customTooltipWithAggregatedField;
    let customTooltipWithoutAggregatedField;
    if ((0, $2bi3s.isArray)(tooltip)) {
        for (const t of tooltip)if (t.aggregate) {
            if (!customTooltipWithAggregatedField) customTooltipWithAggregatedField = [];
            customTooltipWithAggregatedField.push(t);
        } else {
            if (!customTooltipWithoutAggregatedField) customTooltipWithoutAggregatedField = [];
            customTooltipWithoutAggregatedField.push(t);
        }
        if (customTooltipWithAggregatedField) filteredEncoding.tooltip = customTooltipWithAggregatedField;
    } else if (tooltip["aggregate"]) filteredEncoding.tooltip = tooltip;
    else customTooltipWithoutAggregatedField = tooltip;
    if ((0, $2bi3s.isArray)(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];
    return {
        customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField,
        filteredEncoding: filteredEncoding
    };
}
function $76bb752d9c42f164$export$38569c85dd3d2d72(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {
    if ("tooltip" in encodingWithoutContinuousAxis) return {
        tooltip: encodingWithoutContinuousAxis.tooltip
    };
    const fiveSummaryTooltip = tooltipSummary.map(({ fieldPrefix: fieldPrefix, titlePrefix: titlePrefix })=>{
        const mainTitle = withFieldName ? ` of ${$76bb752d9c42f164$export$70d1bf7729efff40(continuousAxisChannelDef)}` : "";
        return {
            field: fieldPrefix + continuousAxisChannelDef.field,
            type: continuousAxisChannelDef.type,
            title: (0, $4xdf1.isSignalRef)(titlePrefix) ? {
                signal: titlePrefix + `"${escape(mainTitle)}"`
            } : titlePrefix + mainTitle
        };
    });
    const tooltipFieldDefs = (0, $8eU8A.fieldDefs)(encodingWithoutContinuousAxis).map((0, $2hAmp.toStringFieldDef));
    return {
        tooltip: [
            ...fiveSummaryTooltip,
            // need to cast because TextFieldDef supports fewer types of bin
            ...(0, $7k4G6.unique)(tooltipFieldDefs, (0, $7k4G6.hash))
        ]
    };
}
function $76bb752d9c42f164$export$70d1bf7729efff40(continuousAxisChannelDef) {
    const { title: title, field: field } = continuousAxisChannelDef;
    return (0, $7k4G6.getFirstDefined)(title, field);
}
function $76bb752d9c42f164$export$7773ab08410c860b(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
    const { scale: scale, axis: axis } = continuousAxisChannelDef;
    return ({ partName: partName, mark: mark, positionPrefix: positionPrefix, endPositionPrefix: endPositionPrefix, extraEncoding: extraEncoding = {} })=>{
        const title = $76bb752d9c42f164$export$70d1bf7729efff40(continuousAxisChannelDef);
        return $76bb752d9c42f164$export$5fc7eee740e4ea4f(compositeMarkDef, partName, compositeMarkConfig, {
            mark: mark,
            encoding: Object.assign(Object.assign(Object.assign({
                [continuousAxis]: Object.assign(Object.assign(Object.assign({
                    field: positionPrefix + "_" + continuousAxisChannelDef.field,
                    type: continuousAxisChannelDef.type
                }, title !== undefined ? {
                    title: title
                } : {}), scale !== undefined ? {
                    scale: scale
                } : {}), axis !== undefined ? {
                    axis: axis
                } : {})
            }, (0, $2bi3s.isString)(endPositionPrefix) ? {
                [continuousAxis + "2"]: {
                    field: endPositionPrefix + "_" + continuousAxisChannelDef.field
                }
            } : {}), sharedEncoding), extraEncoding)
        });
    };
}
function $76bb752d9c42f164$export$5fc7eee740e4ea4f(markDef, part, compositeMarkConfig, partBaseSpec) {
    const { clip: clip, color: color, opacity: opacity } = markDef;
    const mark = markDef.type;
    if (markDef[part] || markDef[part] === undefined && compositeMarkConfig[part]) return [
        Object.assign(Object.assign({}, partBaseSpec), {
            mark: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, compositeMarkConfig[part]), clip ? {
                clip: clip
            } : {}), color ? {
                color: color
            } : {}), opacity ? {
                opacity: opacity
            } : {}), (0, $9mRLv.isMarkDef)(partBaseSpec.mark) ? partBaseSpec.mark : {
                type: partBaseSpec.mark
            }), {
                style: `${mark}-${part}`
            }), (0, $2bi3s.isBoolean)(markDef[part]) ? {} : markDef[part])
        })
    ];
    return [];
}
function $76bb752d9c42f164$export$a68b2a572feea4f8(spec, orient, compositeMark) {
    const { encoding: encoding } = spec;
    const continuousAxis = orient === "vertical" ? "y" : "x";
    const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.
    const continuousAxisChannelDef2 = encoding[continuousAxis + "2"];
    const continuousAxisChannelDefError = encoding[continuousAxis + "Error"];
    const continuousAxisChannelDefError2 = encoding[continuousAxis + "Error2"];
    return {
        continuousAxisChannelDef: $76bb752d9c42f164$var$filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
        continuousAxisChannelDef2: $76bb752d9c42f164$var$filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
        continuousAxisChannelDefError: $76bb752d9c42f164$var$filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
        continuousAxisChannelDefError2: $76bb752d9c42f164$var$filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
        continuousAxis: continuousAxis
    };
}
function $76bb752d9c42f164$var$filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {
        const { aggregate: aggregate } = continuousAxisChannelDef, continuousAxisWithoutAggregate = $76bb752d9c42f164$var$__rest(continuousAxisChannelDef, [
            "aggregate"
        ]);
        if (aggregate !== compositeMark) $3XBQv.warn($bHNid.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
        return continuousAxisWithoutAggregate;
    } else return continuousAxisChannelDef;
}
function $76bb752d9c42f164$export$dd042d3643c3bcc4(spec, compositeMark) {
    const { mark: mark, encoding: encoding } = spec;
    const { x: x, y: y } = encoding;
    if ((0, $9mRLv.isMarkDef)(mark) && mark.orient) return mark.orient;
    if ((0, $2hAmp.isContinuousFieldOrDatumDef)(x)) {
        // x is continuous
        if ((0, $2hAmp.isContinuousFieldOrDatumDef)(y)) {
            // both x and y are continuous
            const xAggregate = (0, $2hAmp.isFieldDef)(x) && x.aggregate;
            const yAggregate = (0, $2hAmp.isFieldDef)(y) && y.aggregate;
            if (!xAggregate && yAggregate === compositeMark) return "vertical";
            else if (!yAggregate && xAggregate === compositeMark) return "horizontal";
            else if (xAggregate === compositeMark && yAggregate === compositeMark) throw new Error("Both x and y cannot have aggregate");
            else {
                if ((0, $2hAmp.isFieldOrDatumDefForTimeFormat)(y) && !(0, $2hAmp.isFieldOrDatumDefForTimeFormat)(x)) // y is temporal but x is not
                return "horizontal";
                // default orientation for two continuous
                return "vertical";
            }
        }
        return "horizontal";
    } else if ((0, $2hAmp.isContinuousFieldOrDatumDef)(y)) // y is continuous but x is not
    return "vertical";
    else // Neither x nor y is continuous.
    throw new Error(`Need a valid continuous axis for ${compositeMark}s`);
}

});


parcelRegister("6hRqK", function(module, exports) {

$parcel$export(module.exports, "ERRORBAND", () => $493dc6c2b1fd1e58$export$f412a6e5728fef51);
$parcel$export(module.exports, "ERRORBAND_PARTS", () => $493dc6c2b1fd1e58$export$fffd1534bec4424f);
$parcel$export(module.exports, "errorBandNormalizer", () => $493dc6c2b1fd1e58$export$39e7a2c55244413c);
$parcel$export(module.exports, "normalizeErrorBand", () => $493dc6c2b1fd1e58$export$fc97ccc44f4a9a8c);

var $8eU8A = parcelRequire("8eU8A");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $aQdkk = parcelRequire("aQdkk");

var $ac0yE = parcelRequire("ac0yE");

var $i2qjf = parcelRequire("i2qjf");
const $493dc6c2b1fd1e58$export$f412a6e5728fef51 = "errorband";
const $493dc6c2b1fd1e58$export$fffd1534bec4424f = [
    "band",
    "borders"
];
const $493dc6c2b1fd1e58$export$39e7a2c55244413c = new (0, $aQdkk.CompositeMarkNormalizer)($493dc6c2b1fd1e58$export$f412a6e5728fef51, $493dc6c2b1fd1e58$export$fc97ccc44f4a9a8c);
function $493dc6c2b1fd1e58$export$fc97ccc44f4a9a8c(spec, { config: config }) {
    // Need to initEncoding first so we can infer type
    spec = Object.assign(Object.assign({}, spec), {
        encoding: (0, $8eU8A.normalizeEncoding)(spec.encoding, config)
    });
    const { transform: transform, continuousAxisChannelDef: continuousAxisChannelDef, continuousAxis: continuousAxis, encodingWithoutContinuousAxis: encodingWithoutContinuousAxis, markDef: markDef, outerSpec: outerSpec, tooltipEncoding: tooltipEncoding } = (0, $i2qjf.errorBarParams)(spec, $493dc6c2b1fd1e58$export$f412a6e5728fef51, config);
    const errorBandDef = markDef;
    const makeErrorBandPart = (0, $ac0yE.makeCompositeAggregatePartFactory)(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
    const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;
    let bandMark = {
        type: is2D ? "area" : "rect"
    };
    let bordersMark = {
        type: is2D ? "line" : "rule"
    };
    const interpolate = Object.assign(Object.assign({}, errorBandDef.interpolate ? {
        interpolate: errorBandDef.interpolate
    } : {}), errorBandDef.tension && errorBandDef.interpolate ? {
        tension: errorBandDef.tension
    } : {});
    if (is2D) {
        bandMark = Object.assign(Object.assign(Object.assign({}, bandMark), interpolate), {
            ariaRoleDescription: "errorband"
        });
        bordersMark = Object.assign(Object.assign(Object.assign({}, bordersMark), interpolate), {
            aria: false
        });
    } else if (errorBandDef.interpolate) $3XBQv.warn($bHNid.errorBand1DNotSupport("interpolate"));
    else if (errorBandDef.tension) $3XBQv.warn($bHNid.errorBand1DNotSupport("tension"));
    return Object.assign(Object.assign({}, outerSpec), {
        transform: transform,
        layer: [
            ...makeErrorBandPart({
                partName: "band",
                mark: bandMark,
                positionPrefix: "lower",
                endPositionPrefix: "upper",
                extraEncoding: tooltipEncoding
            }),
            ...makeErrorBandPart({
                partName: "borders",
                mark: bordersMark,
                positionPrefix: "lower",
                extraEncoding: tooltipEncoding
            }),
            ...makeErrorBandPart({
                partName: "borders",
                mark: bordersMark,
                positionPrefix: "upper",
                extraEncoding: tooltipEncoding
            })
        ]
    });
}

});
parcelRegister("i2qjf", function(module, exports) {

$parcel$export(module.exports, "ERRORBAR", () => $d21cd269636cb348$export$6dfc255d321435fd);
$parcel$export(module.exports, "ERRORBAR_PARTS", () => $d21cd269636cb348$export$20cd17cd913c9c1a);
$parcel$export(module.exports, "errorBarNormalizer", () => $d21cd269636cb348$export$24c8351decac1695);
$parcel$export(module.exports, "normalizeErrorBar", () => $d21cd269636cb348$export$74047bf63a62c20f);
$parcel$export(module.exports, "errorBarParams", () => $d21cd269636cb348$export$27eb447838dae1aa);

var $2hAmp = parcelRequire("2hAmp");

var $8eU8A = parcelRequire("8eU8A");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9mRLv = parcelRequire("9mRLv");

var $7k4G6 = parcelRequire("7k4G6");

var $aQdkk = parcelRequire("aQdkk");

var $ac0yE = parcelRequire("ac0yE");
var $d21cd269636cb348$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $d21cd269636cb348$export$6dfc255d321435fd = "errorbar";
const $d21cd269636cb348$export$20cd17cd913c9c1a = [
    "ticks",
    "rule"
];
const $d21cd269636cb348$export$24c8351decac1695 = new (0, $aQdkk.CompositeMarkNormalizer)($d21cd269636cb348$export$6dfc255d321435fd, $d21cd269636cb348$export$74047bf63a62c20f);
function $d21cd269636cb348$export$74047bf63a62c20f(spec, { config: config }) {
    // Need to initEncoding first so we can infer type
    spec = Object.assign(Object.assign({}, spec), {
        encoding: (0, $8eU8A.normalizeEncoding)(spec.encoding, config)
    });
    const { transform: transform, continuousAxisChannelDef: continuousAxisChannelDef, continuousAxis: continuousAxis, encodingWithoutContinuousAxis: encodingWithoutContinuousAxis, ticksOrient: ticksOrient, markDef: markDef, outerSpec: outerSpec, tooltipEncoding: tooltipEncoding } = $d21cd269636cb348$export$27eb447838dae1aa(spec, $d21cd269636cb348$export$6dfc255d321435fd, config);
    delete encodingWithoutContinuousAxis["size"];
    const makeErrorBarPart = (0, $ac0yE.makeCompositeAggregatePartFactory)(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
    const thickness = markDef.thickness;
    const size = markDef.size;
    const tick = Object.assign(Object.assign({
        type: "tick",
        orient: ticksOrient,
        aria: false
    }, thickness !== undefined ? {
        thickness: thickness
    } : {}), size !== undefined ? {
        size: size
    } : {});
    const layer = [
        ...makeErrorBarPart({
            partName: "ticks",
            mark: tick,
            positionPrefix: "lower",
            extraEncoding: tooltipEncoding
        }),
        ...makeErrorBarPart({
            partName: "ticks",
            mark: tick,
            positionPrefix: "upper",
            extraEncoding: tooltipEncoding
        }),
        ...makeErrorBarPart({
            partName: "rule",
            mark: Object.assign({
                type: "rule",
                ariaRoleDescription: "errorbar"
            }, thickness !== undefined ? {
                size: thickness
            } : {}),
            positionPrefix: "lower",
            endPositionPrefix: "upper",
            extraEncoding: tooltipEncoding
        })
    ];
    return Object.assign(Object.assign(Object.assign({}, outerSpec), {
        transform: transform
    }), layer.length > 1 ? {
        layer: layer
    } : Object.assign({}, layer[0]));
}
function $d21cd269636cb348$var$errorBarOrientAndInputType(spec, compositeMark) {
    const { encoding: encoding } = spec;
    if ($d21cd269636cb348$var$errorBarIsInputTypeRaw(encoding)) return {
        orient: (0, $ac0yE.compositeMarkOrient)(spec, compositeMark),
        inputType: "raw"
    };
    const isTypeAggregatedUpperLower = $d21cd269636cb348$var$errorBarIsInputTypeAggregatedUpperLower(encoding);
    const isTypeAggregatedError = $d21cd269636cb348$var$errorBarIsInputTypeAggregatedError(encoding);
    const x = encoding.x;
    const y = encoding.y;
    if (isTypeAggregatedUpperLower) {
        // type is aggregated-upper-lower
        if (isTypeAggregatedError) throw new Error(`${compositeMark} cannot be both type aggregated-upper-lower and aggregated-error`);
        const x2 = encoding.x2;
        const y2 = encoding.y2;
        if ((0, $2hAmp.isFieldOrDatumDef)(x2) && (0, $2hAmp.isFieldOrDatumDef)(y2)) // having both x, x2 and y, y2
        throw new Error(`${compositeMark} cannot have both x2 and y2`);
        else if ((0, $2hAmp.isFieldOrDatumDef)(x2)) {
            if ((0, $2hAmp.isContinuousFieldOrDatumDef)(x)) // having x, x2 quantitative and field y, y2 are not specified
            return {
                orient: "horizontal",
                inputType: "aggregated-upper-lower"
            };
            else // having x, x2 that are not both quantitative
            throw new Error(`Both x and x2 have to be quantitative in ${compositeMark}`);
        } else if ((0, $2hAmp.isFieldOrDatumDef)(y2)) {
            // y2 is a FieldDef
            if ((0, $2hAmp.isContinuousFieldOrDatumDef)(y)) // having y, y2 quantitative and field x, x2 are not specified
            return {
                orient: "vertical",
                inputType: "aggregated-upper-lower"
            };
            else // having y, y2 that are not both quantitative
            throw new Error(`Both y and y2 have to be quantitative in ${compositeMark}`);
        }
        throw new Error("No ranged axis");
    } else {
        // type is aggregated-error
        const xError = encoding.xError;
        const xError2 = encoding.xError2;
        const yError = encoding.yError;
        const yError2 = encoding.yError2;
        if ((0, $2hAmp.isFieldOrDatumDef)(xError2) && !(0, $2hAmp.isFieldOrDatumDef)(xError)) // having xError2 without xError
        throw new Error(`${compositeMark} cannot have xError2 without xError`);
        if ((0, $2hAmp.isFieldOrDatumDef)(yError2) && !(0, $2hAmp.isFieldOrDatumDef)(yError)) // having yError2 without yError
        throw new Error(`${compositeMark} cannot have yError2 without yError`);
        if ((0, $2hAmp.isFieldOrDatumDef)(xError) && (0, $2hAmp.isFieldOrDatumDef)(yError)) // having both xError and yError
        throw new Error(`${compositeMark} cannot have both xError and yError with both are quantiative`);
        else if ((0, $2hAmp.isFieldOrDatumDef)(xError)) {
            if ((0, $2hAmp.isContinuousFieldOrDatumDef)(x)) // having x and xError that are all quantitative
            return {
                orient: "horizontal",
                inputType: "aggregated-error"
            };
            else // having x, xError, and xError2 that are not all quantitative
            throw new Error("All x, xError, and xError2 (if exist) have to be quantitative");
        } else if ((0, $2hAmp.isFieldOrDatumDef)(yError)) {
            if ((0, $2hAmp.isContinuousFieldOrDatumDef)(y)) // having y and yError that are all quantitative
            return {
                orient: "vertical",
                inputType: "aggregated-error"
            };
            else // having y, yError, and yError2 that are not all quantitative
            throw new Error("All y, yError, and yError2 (if exist) have to be quantitative");
        }
        throw new Error("No ranged axis");
    }
}
function $d21cd269636cb348$var$errorBarIsInputTypeRaw(encoding) {
    return ((0, $2hAmp.isFieldOrDatumDef)(encoding.x) || (0, $2hAmp.isFieldOrDatumDef)(encoding.y)) && !(0, $2hAmp.isFieldOrDatumDef)(encoding.x2) && !(0, $2hAmp.isFieldOrDatumDef)(encoding.y2) && !(0, $2hAmp.isFieldOrDatumDef)(encoding.xError) && !(0, $2hAmp.isFieldOrDatumDef)(encoding.xError2) && !(0, $2hAmp.isFieldOrDatumDef)(encoding.yError) && !(0, $2hAmp.isFieldOrDatumDef)(encoding.yError2);
}
function $d21cd269636cb348$var$errorBarIsInputTypeAggregatedUpperLower(encoding) {
    return (0, $2hAmp.isFieldOrDatumDef)(encoding.x2) || (0, $2hAmp.isFieldOrDatumDef)(encoding.y2);
}
function $d21cd269636cb348$var$errorBarIsInputTypeAggregatedError(encoding) {
    return (0, $2hAmp.isFieldOrDatumDef)(encoding.xError) || (0, $2hAmp.isFieldOrDatumDef)(encoding.xError2) || (0, $2hAmp.isFieldOrDatumDef)(encoding.yError) || (0, $2hAmp.isFieldOrDatumDef)(encoding.yError2);
}
function $d21cd269636cb348$export$27eb447838dae1aa(spec, compositeMark, config) {
    var _a;
    // TODO: use selection
    const { mark: mark, encoding: encoding, selection: selection, projection: _p } = spec, outerSpec = $d21cd269636cb348$var$__rest(spec, [
        "mark",
        "encoding",
        "selection",
        "projection"
    ]);
    const markDef = (0, $9mRLv.isMarkDef)(mark) ? mark : {
        type: mark
    };
    // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support
    if (selection) $3XBQv.warn($bHNid.selectionNotSupported(compositeMark));
    const { orient: orient, inputType: inputType } = $d21cd269636cb348$var$errorBarOrientAndInputType(spec, compositeMark);
    const { continuousAxisChannelDef: continuousAxisChannelDef, continuousAxisChannelDef2: continuousAxisChannelDef2, continuousAxisChannelDefError: continuousAxisChannelDefError, continuousAxisChannelDefError2: continuousAxisChannelDefError2, continuousAxis: continuousAxis } = (0, $ac0yE.compositeMarkContinuousAxis)(spec, orient, compositeMark);
    const { errorBarSpecificAggregate: errorBarSpecificAggregate, postAggregateCalculates: postAggregateCalculates, tooltipSummary: tooltipSummary, tooltipTitleWithFieldName: tooltipTitleWithFieldName } = $d21cd269636cb348$var$errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);
    const _b = encoding, _c = continuousAxis, oldContinuousAxisChannelDef = _b[_c], _d = continuousAxis === "x" ? "x2" : "y2", oldContinuousAxisChannelDef2 = _b[_d], _e = continuousAxis === "x" ? "xError" : "yError", oldContinuousAxisChannelDefError = _b[_e], _f = continuousAxis === "x" ? "xError2" : "yError2", oldContinuousAxisChannelDefError2 = _b[_f], oldEncodingWithoutContinuousAxis = $d21cd269636cb348$var$__rest(_b, [
        typeof _c === "symbol" ? _c : _c + "",
        typeof _d === "symbol" ? _d : _d + "",
        typeof _e === "symbol" ? _e : _e + "",
        typeof _f === "symbol" ? _f : _f + ""
    ]);
    const { bins: bins, timeUnits: timeUnits, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = (0, $8eU8A.extractTransformsFromEncoding)(oldEncodingWithoutContinuousAxis, config);
    const aggregate = [
        ...oldAggregate,
        ...errorBarSpecificAggregate
    ];
    const groupby = inputType !== "raw" ? [] : oldGroupBy;
    const tooltipEncoding = (0, $ac0yE.getCompositeMarkTooltip)(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
    return {
        transform: [
            ...(_a = outerSpec.transform) !== null && _a !== void 0 ? _a : [],
            ...bins,
            ...timeUnits,
            ...aggregate.length === 0 ? [] : [
                {
                    aggregate: aggregate,
                    groupby: groupby
                }
            ],
            ...postAggregateCalculates
        ],
        groupby: groupby,
        continuousAxisChannelDef: continuousAxisChannelDef,
        continuousAxis: continuousAxis,
        encodingWithoutContinuousAxis: encodingWithoutContinuousAxis,
        ticksOrient: orient === "vertical" ? "horizontal" : "vertical",
        markDef: markDef,
        outerSpec: outerSpec,
        tooltipEncoding: tooltipEncoding
    };
}
function $d21cd269636cb348$var$errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
    let errorBarSpecificAggregate = [];
    let postAggregateCalculates = [];
    const continuousFieldName = continuousAxisChannelDef.field;
    let tooltipSummary;
    let tooltipTitleWithFieldName = false;
    if (inputType === "raw") {
        const center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === "iqr" ? "median" : "mean" : config.errorbar.center;
        const extent = markDef.extent ? markDef.extent : center === "mean" ? "stderr" : "iqr";
        if (center === "median" !== (extent === "iqr")) $3XBQv.warn($bHNid.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));
        if (extent === "stderr" || extent === "stdev") {
            errorBarSpecificAggregate = [
                {
                    op: extent,
                    field: continuousFieldName,
                    as: "extent_" + continuousFieldName
                },
                {
                    op: center,
                    field: continuousFieldName,
                    as: "center_" + continuousFieldName
                }
            ];
            postAggregateCalculates = [
                {
                    calculate: `datum["center_${continuousFieldName}"] + datum["extent_${continuousFieldName}"]`,
                    as: "upper_" + continuousFieldName
                },
                {
                    calculate: `datum["center_${continuousFieldName}"] - datum["extent_${continuousFieldName}"]`,
                    as: "lower_" + continuousFieldName
                }
            ];
            tooltipSummary = [
                {
                    fieldPrefix: "center_",
                    titlePrefix: (0, $7k4G6.titleCase)(center)
                },
                {
                    fieldPrefix: "upper_",
                    titlePrefix: $d21cd269636cb348$var$getTitlePrefix(center, extent, "+")
                },
                {
                    fieldPrefix: "lower_",
                    titlePrefix: $d21cd269636cb348$var$getTitlePrefix(center, extent, "-")
                }
            ];
            tooltipTitleWithFieldName = true;
        } else {
            let centerOp;
            let lowerExtentOp;
            let upperExtentOp;
            if (extent === "ci") {
                centerOp = "mean";
                lowerExtentOp = "ci0";
                upperExtentOp = "ci1";
            } else {
                centerOp = "median";
                lowerExtentOp = "q1";
                upperExtentOp = "q3";
            }
            errorBarSpecificAggregate = [
                {
                    op: lowerExtentOp,
                    field: continuousFieldName,
                    as: "lower_" + continuousFieldName
                },
                {
                    op: upperExtentOp,
                    field: continuousFieldName,
                    as: "upper_" + continuousFieldName
                },
                {
                    op: centerOp,
                    field: continuousFieldName,
                    as: "center_" + continuousFieldName
                }
            ];
            tooltipSummary = [
                {
                    fieldPrefix: "upper_",
                    titlePrefix: (0, $2hAmp.title)({
                        field: continuousFieldName,
                        aggregate: upperExtentOp,
                        type: "quantitative"
                    }, config, {
                        allowDisabling: false
                    })
                },
                {
                    fieldPrefix: "lower_",
                    titlePrefix: (0, $2hAmp.title)({
                        field: continuousFieldName,
                        aggregate: lowerExtentOp,
                        type: "quantitative"
                    }, config, {
                        allowDisabling: false
                    })
                },
                {
                    fieldPrefix: "center_",
                    titlePrefix: (0, $2hAmp.title)({
                        field: continuousFieldName,
                        aggregate: centerOp,
                        type: "quantitative"
                    }, config, {
                        allowDisabling: false
                    })
                }
            ];
        }
    } else {
        if (markDef.center || markDef.extent) $3XBQv.warn($bHNid.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
        if (inputType === "aggregated-upper-lower") {
            tooltipSummary = [];
            postAggregateCalculates = [
                {
                    calculate: `datum["${continuousAxisChannelDef2.field}"]`,
                    as: "upper_" + continuousFieldName
                },
                {
                    calculate: `datum["${continuousFieldName}"]`,
                    as: "lower_" + continuousFieldName
                }
            ];
        } else if (inputType === "aggregated-error") {
            tooltipSummary = [
                {
                    fieldPrefix: "",
                    titlePrefix: continuousFieldName
                }
            ];
            postAggregateCalculates = [
                {
                    calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError.field}"]`,
                    as: "upper_" + continuousFieldName
                }
            ];
            if (continuousAxisChannelDefError2) postAggregateCalculates.push({
                calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError2.field}"]`,
                as: "lower_" + continuousFieldName
            });
            else postAggregateCalculates.push({
                calculate: `datum["${continuousFieldName}"] - datum["${continuousAxisChannelDefError.field}"]`,
                as: "lower_" + continuousFieldName
            });
        }
        for (const postAggregateCalculate of postAggregateCalculates)tooltipSummary.push({
            fieldPrefix: postAggregateCalculate.as.substring(0, 6),
            titlePrefix: (0, $7k4G6.replaceAll)((0, $7k4G6.replaceAll)(postAggregateCalculate.calculate, 'datum["', ""), '"]', "")
        });
    }
    return {
        postAggregateCalculates: postAggregateCalculates,
        errorBarSpecificAggregate: errorBarSpecificAggregate,
        tooltipSummary: tooltipSummary,
        tooltipTitleWithFieldName: tooltipTitleWithFieldName
    };
}
function $d21cd269636cb348$var$getTitlePrefix(center, extent, operation) {
    return (0, $7k4G6.titleCase)(center) + " " + operation + " " + extent;
}

});



parcelRegister("g6jVE", function(module, exports) {

$parcel$export(module.exports, "VL_ONLY_LEGEND_CONFIG", () => $bb8caa521fdeeba6$export$f081ae1439555c9a);
const $bb8caa521fdeeba6$export$f081ae1439555c9a = [
    "gradientHorizontalMaxLength",
    "gradientHorizontalMinLength",
    "gradientVerticalMaxLength",
    "gradientVerticalMinLength",
    "unselectedOpacity"
];

});

parcelRegister("947ka", function(module, exports) {

$parcel$export(module.exports, "HEADER_TITLE_PROPERTIES_MAP", () => $699a2b36379ec792$export$4268f3d7ddf8b26f);
$parcel$export(module.exports, "HEADER_LABEL_PROPERTIES_MAP", () => $699a2b36379ec792$export$4c99a20fd336e7e5);
$parcel$export(module.exports, "HEADER_TITLE_PROPERTIES", () => $699a2b36379ec792$export$71488c4df72ac2e2);
$parcel$export(module.exports, "HEADER_LABEL_PROPERTIES", () => $699a2b36379ec792$export$db4e7935e2b2cd4);
$parcel$export(module.exports, "HEADER_CONFIGS", () => $699a2b36379ec792$export$27c84393fefa762c);

var $7k4G6 = parcelRequire("7k4G6");
const $699a2b36379ec792$export$4268f3d7ddf8b26f = {
    titleAlign: "align",
    titleAnchor: "anchor",
    titleAngle: "angle",
    titleBaseline: "baseline",
    titleColor: "color",
    titleFont: "font",
    titleFontSize: "fontSize",
    titleFontStyle: "fontStyle",
    titleFontWeight: "fontWeight",
    titleLimit: "limit",
    titleLineHeight: "lineHeight",
    titleOrient: "orient",
    titlePadding: "offset"
};
const $699a2b36379ec792$export$4c99a20fd336e7e5 = {
    labelAlign: "align",
    labelAnchor: "anchor",
    labelAngle: "angle",
    labelBaseline: "baseline",
    labelColor: "color",
    labelFont: "font",
    labelFontSize: "fontSize",
    labelFontStyle: "fontStyle",
    labelFontWeight: "fontWeight",
    labelLimit: "limit",
    labelLineHeight: "lineHeight",
    labelOrient: "orient",
    labelPadding: "offset"
};
const $699a2b36379ec792$export$71488c4df72ac2e2 = (0, $7k4G6.keys)($699a2b36379ec792$export$4268f3d7ddf8b26f);
const $699a2b36379ec792$export$db4e7935e2b2cd4 = (0, $7k4G6.keys)($699a2b36379ec792$export$4c99a20fd336e7e5);
const $699a2b36379ec792$var$HEADER_CONFIGS_INDEX = {
    header: 1,
    headerRow: 1,
    headerColumn: 1,
    headerFacet: 1
};
const $699a2b36379ec792$export$27c84393fefa762c = (0, $7k4G6.keys)($699a2b36379ec792$var$HEADER_CONFIGS_INDEX);

});

parcelRegister("kMFrr", function(module, exports) {

$parcel$export(module.exports, "LEGEND_SCALE_CHANNELS", () => $f2186fc9a10e71c3$export$7be67af322277e0c);
$parcel$export(module.exports, "defaultLegendConfig", () => $f2186fc9a10e71c3$export$ec0a1b88e444c2e6);
$parcel$export(module.exports, "COMMON_LEGEND_PROPERTY_INDEX", () => $f2186fc9a10e71c3$export$9bee91827f7a381c);

var $7k4G6 = parcelRequire("7k4G6");
const $f2186fc9a10e71c3$export$7be67af322277e0c = [
    "size",
    "shape",
    "fill",
    "stroke",
    "strokeDash",
    "strokeWidth",
    "opacity"
];
const $f2186fc9a10e71c3$export$ec0a1b88e444c2e6 = {
    gradientHorizontalMaxLength: 200,
    gradientHorizontalMinLength: 100,
    gradientVerticalMaxLength: 200,
    gradientVerticalMinLength: 64,
    unselectedOpacity: 0.35
};
const $f2186fc9a10e71c3$export$9bee91827f7a381c = {
    aria: 1,
    clipHeight: 1,
    columnPadding: 1,
    columns: 1,
    cornerRadius: 1,
    description: 1,
    direction: 1,
    fillColor: 1,
    format: 1,
    formatType: 1,
    gradientLength: 1,
    gradientOpacity: 1,
    gradientStrokeColor: 1,
    gradientStrokeWidth: 1,
    gradientThickness: 1,
    gridAlign: 1,
    labelAlign: 1,
    labelBaseline: 1,
    labelColor: 1,
    labelFont: 1,
    labelFontSize: 1,
    labelFontStyle: 1,
    labelFontWeight: 1,
    labelLimit: 1,
    labelOffset: 1,
    labelOpacity: 1,
    labelOverlap: 1,
    labelPadding: 1,
    labelSeparation: 1,
    legendX: 1,
    legendY: 1,
    offset: 1,
    orient: 1,
    padding: 1,
    rowPadding: 1,
    strokeColor: 1,
    symbolDash: 1,
    symbolDashOffset: 1,
    symbolFillColor: 1,
    symbolLimit: 1,
    symbolOffset: 1,
    symbolOpacity: 1,
    symbolSize: 1,
    symbolStrokeColor: 1,
    symbolStrokeWidth: 1,
    symbolType: 1,
    tickCount: 1,
    tickMinStep: 1,
    title: 1,
    titleAlign: 1,
    titleAnchor: 1,
    titleBaseline: 1,
    titleColor: 1,
    titleFont: 1,
    titleFontSize: 1,
    titleFontStyle: 1,
    titleFontWeight: 1,
    titleLimit: 1,
    titleLineHeight: 1,
    titleOpacity: 1,
    titleOrient: 1,
    titlePadding: 1,
    type: 1,
    values: 1,
    zindex: 1
};
const $f2186fc9a10e71c3$export$758c101f610892b1 = (0, $7k4G6.keys)($f2186fc9a10e71c3$export$9bee91827f7a381c);

});

parcelRegister("9j78H", function(module, exports) {

$parcel$export(module.exports, "assembleParameterSignals", () => $6c6b6d24036f7935$export$62df7255f55a24f1);
var $6c6b6d24036f7935$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $6c6b6d24036f7935$export$62df7255f55a24f1(params) {
    const signals = [];
    for (const param of params || []){
        const { expr: expr, bind: bind } = param, rest = $6c6b6d24036f7935$var$__rest(param, [
            "expr",
            "bind"
        ]);
        if (bind && expr) {
            // Vega's InitSignal -- apply expr to "init"
            const signal = Object.assign(Object.assign({}, rest), {
                bind: bind,
                init: expr
            });
            signals.push(signal);
        } else {
            const signal = Object.assign(Object.assign(Object.assign({}, rest), expr ? {
                update: expr
            } : {}), bind ? {
                bind: bind
            } : {});
            signals.push(signal);
        }
    }
    return signals;
}

});

parcelRegister("2zU89", function(module, exports) {

$parcel$export(module.exports, "SELECTION_ID", () => $1e0a6403fa10480b$export$89b797ed232cda2f);
$parcel$export(module.exports, "defaultConfig", () => $1e0a6403fa10480b$export$f84bd70098573c5c);
$parcel$export(module.exports, "isLegendBinding", () => $1e0a6403fa10480b$export$7f5e64185fdb44f3);
$parcel$export(module.exports, "isLegendStreamBinding", () => $1e0a6403fa10480b$export$d595c7f22e65e026);

var $2bi3s = parcelRequire("2bi3s");
const $1e0a6403fa10480b$export$89b797ed232cda2f = "_vgsid_";
const $1e0a6403fa10480b$export$f84bd70098573c5c = {
    single: {
        on: "click",
        fields: [
            $1e0a6403fa10480b$export$89b797ed232cda2f
        ],
        resolve: "global",
        empty: "all",
        clear: "dblclick"
    },
    multi: {
        on: "click",
        fields: [
            $1e0a6403fa10480b$export$89b797ed232cda2f
        ],
        toggle: "event.shiftKey",
        resolve: "global",
        empty: "all",
        clear: "dblclick"
    },
    interval: {
        on: "[mousedown, window:mouseup] > window:mousemove!",
        encodings: [
            "x",
            "y"
        ],
        translate: "[mousedown, window:mouseup] > window:mousemove!",
        zoom: "wheel!",
        mark: {
            fill: "#333",
            fillOpacity: 0.125,
            stroke: "white"
        },
        resolve: "global",
        clear: "dblclick"
    }
};
function $1e0a6403fa10480b$export$7f5e64185fdb44f3(bind) {
    return !!bind && (bind === "legend" || !!bind.legend);
}
function $1e0a6403fa10480b$export$d595c7f22e65e026(bind) {
    return $1e0a6403fa10480b$export$7f5e64185fdb44f3(bind) && (0, $2bi3s.isObject)(bind);
}

});

parcelRegister("7Eu98", function(module, exports) {

$parcel$export(module.exports, "isStep", () => $5923a744467d40f1$export$21684750287da054);
$parcel$export(module.exports, "isFrameMixins", () => $5923a744467d40f1$export$5acdc2214903e08f);
$parcel$export(module.exports, "DEFAULT_SPACING", () => $5923a744467d40f1$export$923491db79f010fc);
$parcel$export(module.exports, "extractCompositionLayout", () => $5923a744467d40f1$export$9103d5bd25766f13);

var $2bi3s = parcelRequire("2bi3s");

var $7k4G6 = parcelRequire("7k4G6");

var $dZ3kS = parcelRequire("dZ3kS");

var $1mvM3 = parcelRequire("1mvM3");
function $5923a744467d40f1$export$21684750287da054(size) {
    return (0, $2bi3s.isObject)(size) && size["step"] !== undefined;
}
function $5923a744467d40f1$export$5acdc2214903e08f(o) {
    return o["view"] || o["width"] || o["height"];
}
const $5923a744467d40f1$export$923491db79f010fc = 20;
const $5923a744467d40f1$var$COMPOSITION_LAYOUT_INDEX = {
    align: 1,
    bounds: 1,
    center: 1,
    columns: 1,
    spacing: 1
};
const $5923a744467d40f1$var$COMPOSITION_LAYOUT_PROPERTIES = (0, $7k4G6.keys)($5923a744467d40f1$var$COMPOSITION_LAYOUT_INDEX);
function $5923a744467d40f1$export$9103d5bd25766f13(spec, specType, config) {
    var _a, _b;
    const compositionConfig = config[specType];
    const layout = {};
    // Apply config first
    const { spacing: spacingConfig, columns: columns } = compositionConfig;
    if (spacingConfig !== undefined) layout.spacing = spacingConfig;
    if (columns !== undefined) {
        if ((0, $1mvM3.isFacetSpec)(spec) && !(0, $1mvM3.isFacetMapping)(spec.facet) || (0, $dZ3kS.isConcatSpec)(spec)) layout.columns = columns;
    }
    if ((0, $dZ3kS.isVConcatSpec)(spec)) layout.columns = 1;
    // Then copy properties from the spec
    for (const prop of $5923a744467d40f1$var$COMPOSITION_LAYOUT_PROPERTIES)if (spec[prop] !== undefined) {
        if (prop === "spacing") {
            const spacing = spec[prop];
            layout[prop] = (0, $2bi3s.isNumber)(spacing) ? spacing : {
                row: (_a = spacing.row) !== null && _a !== void 0 ? _a : spacingConfig,
                column: (_b = spacing.column) !== null && _b !== void 0 ? _b : spacingConfig
            };
        } else layout[prop] = spec[prop];
    }
    return layout;
}

});
parcelRegister("dZ3kS", function(module, exports) {

$parcel$export(module.exports, "isAnyConcatSpec", () => $a2e38f47486ec4a1$export$4aa188ad94fb8e28);
$parcel$export(module.exports, "isVConcatSpec", () => $a2e38f47486ec4a1$export$6f00bf0e17fed317);
$parcel$export(module.exports, "isHConcatSpec", () => $a2e38f47486ec4a1$export$8ee3595ed4a1eb99);
$parcel$export(module.exports, "isConcatSpec", () => $a2e38f47486ec4a1$export$ea473ea832fb6df8);
function $a2e38f47486ec4a1$export$4aa188ad94fb8e28(spec) {
    return $a2e38f47486ec4a1$export$6f00bf0e17fed317(spec) || $a2e38f47486ec4a1$export$8ee3595ed4a1eb99(spec) || $a2e38f47486ec4a1$export$ea473ea832fb6df8(spec);
}
function $a2e38f47486ec4a1$export$ea473ea832fb6df8(spec) {
    return "concat" in spec;
}
function $a2e38f47486ec4a1$export$6f00bf0e17fed317(spec) {
    return "vconcat" in spec;
}
function $a2e38f47486ec4a1$export$8ee3595ed4a1eb99(spec) {
    return "hconcat" in spec;
}

});



parcelRegister("5zWAp", function(module, exports) {

$parcel$export(module.exports, "isAnyConcatSpec", () => (parcelRequire("dZ3kS")).isAnyConcatSpec);
$parcel$export(module.exports, "isHConcatSpec", () => (parcelRequire("dZ3kS")).isHConcatSpec);
$parcel$export(module.exports, "isVConcatSpec", () => (parcelRequire("dZ3kS")).isVConcatSpec);
$parcel$export(module.exports, "isFacetSpec", () => (parcelRequire("1mvM3")).isFacetSpec);
$parcel$export(module.exports, "isLayerSpec", () => (parcelRequire("7Mulx")).isLayerSpec);
$parcel$export(module.exports, "isUnitSpec", () => (parcelRequire("78jSz")).isUnitSpec);

var $dZ3kS = parcelRequire("dZ3kS");

var $1mvM3 = parcelRequire("1mvM3");

var $7Mulx = parcelRequire("7Mulx");

var $8Cnui = parcelRequire("8Cnui");

var $78jSz = parcelRequire("78jSz");

});
parcelRegister("7Mulx", function(module, exports) {

$parcel$export(module.exports, "isLayerSpec", () => $5aa48e45fa767398$export$eac428991be82692);
function $5aa48e45fa767398$export$eac428991be82692(spec) {
    return "layer" in spec;
}

});

parcelRegister("8Cnui", function(module, exports) {

$parcel$export(module.exports, "isRepeatSpec", () => $646417853bfd0210$export$a6c4c47657fe2e75);
$parcel$export(module.exports, "isLayerRepeatSpec", () => $646417853bfd0210$export$3c9bac6827612121);

var $2bi3s = parcelRequire("2bi3s");
function $646417853bfd0210$export$a6c4c47657fe2e75(spec) {
    return "repeat" in spec;
}
function $646417853bfd0210$export$3c9bac6827612121(spec) {
    return !(0, $2bi3s.isArray)(spec.repeat) && spec.repeat["layer"];
}

});


parcelRegister("dRmk6", function(module, exports) {

$parcel$export(module.exports, "CoreNormalizer", () => $a1718a825286389c$export$aa6205df2e24e11);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $d7bcc = parcelRequire("d7bcc");

var $6hRqK = parcelRequire("6hRqK");

var $i2qjf = parcelRequire("i2qjf");

var $8eU8A = parcelRequire("8eU8A");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $1mvM3 = parcelRequire("1mvM3");

var $80HNU = parcelRequire("80HNU");

var $8Cnui = parcelRequire("8Cnui");

var $78jSz = parcelRequire("78jSz");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $lBlz4 = parcelRequire("lBlz4");

var $4ss53 = parcelRequire("4ss53");

var $kBEvK = parcelRequire("kBEvK");

var $a3uhZ = parcelRequire("a3uhZ");
var $a1718a825286389c$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $a1718a825286389c$export$aa6205df2e24e11 extends (0, $80HNU.SpecMapper) {
    constructor(){
        super(...arguments);
        this.nonFacetUnitNormalizers = [
            (0, $d7bcc.boxPlotNormalizer),
            (0, $i2qjf.errorBarNormalizer),
            (0, $6hRqK.errorBandNormalizer),
            new (0, $lBlz4.PathOverlayNormalizer)(),
            new (0, $a3uhZ.RuleForRangedLineNormalizer)(),
            new (0, $4ss53.RangeStepNormalizer)()
        ];
    }
    map(spec, params) {
        // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.
        if ((0, $78jSz.isUnitSpec)(spec)) {
            const hasRow = (0, $8eU8A.channelHasField)(spec.encoding, (0, $fWfT0.ROW));
            const hasColumn = (0, $8eU8A.channelHasField)(spec.encoding, (0, $fWfT0.COLUMN));
            const hasFacet = (0, $8eU8A.channelHasField)(spec.encoding, (0, $fWfT0.FACET));
            if (hasRow || hasColumn || hasFacet) return this.mapFacetedUnit(spec, params);
        }
        return super.map(spec, params);
    }
    // This is for normalizing non-facet unit
    mapUnit(spec, params) {
        const { parentEncoding: parentEncoding, parentProjection: parentProjection } = params;
        const encoding = (0, $kBEvK.replaceRepeaterInEncoding)(spec.encoding, params.repeater);
        const specWithReplacedEncoding = Object.assign(Object.assign({}, spec), encoding ? {
            encoding: encoding
        } : {});
        if (parentEncoding || parentProjection) return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params);
        const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);
        for (const unitNormalizer of this.nonFacetUnitNormalizers){
            if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params.config)) return unitNormalizer.run(specWithReplacedEncoding, params, normalizeLayerOrUnit);
        }
        return specWithReplacedEncoding;
    }
    mapRepeat(spec, params) {
        if ((0, $8Cnui.isLayerRepeatSpec)(spec)) return this.mapLayerRepeat(spec, params);
        else return this.mapNonLayerRepeat(spec, params);
    }
    mapLayerRepeat(spec, params) {
        const { repeat: repeat, spec: childSpec } = spec, rest = $a1718a825286389c$var$__rest(spec, [
            "repeat",
            "spec"
        ]);
        const { row: row, column: column, layer: layer } = repeat;
        const { repeater: repeater = {}, repeaterPrefix: repeaterPrefix = "" } = params;
        if (row || column) return this.mapRepeat(Object.assign(Object.assign({}, spec), {
            repeat: Object.assign(Object.assign({}, row ? {
                row: row
            } : {}), column ? {
                column: column
            } : {}),
            spec: {
                repeat: {
                    layer: layer
                },
                spec: childSpec
            }
        }), params);
        else return Object.assign(Object.assign({}, rest), {
            layer: layer.map((layerValue)=>{
                const childRepeater = Object.assign(Object.assign({}, repeater), {
                    layer: layerValue
                });
                const childName = (childSpec.name || "") + repeaterPrefix + `child__layer_${(0, $7k4G6.varName)(layerValue)}`;
                const child = this.mapLayerOrUnit(childSpec, Object.assign(Object.assign({}, params), {
                    repeater: childRepeater,
                    repeaterPrefix: childName
                }));
                child.name = childName;
                return child;
            })
        });
    }
    mapNonLayerRepeat(spec, params) {
        var _a;
        const { repeat: repeat, spec: childSpec, data: data } = spec, remainingProperties = $a1718a825286389c$var$__rest(spec, [
            "repeat",
            "spec",
            "data"
        ]);
        if (!(0, $2bi3s.isArray)(repeat) && spec.columns) {
            // is repeat with row/column
            spec = (0, $7k4G6.omit)(spec, [
                "columns"
            ]);
            $3XBQv.warn($bHNid.columnsNotSupportByRowCol("repeat"));
        }
        const concat = [];
        const { repeater: repeater = {}, repeaterPrefix: repeaterPrefix = "" } = params;
        const row = !(0, $2bi3s.isArray)(repeat) && repeat.row || [
            repeater ? repeater.row : null
        ];
        const column = !(0, $2bi3s.isArray)(repeat) && repeat.column || [
            repeater ? repeater.column : null
        ];
        const repeatValues = (0, $2bi3s.isArray)(repeat) && repeat || [
            repeater ? repeater.repeat : null
        ];
        // cross product
        for (const repeatValue of repeatValues){
            for (const rowValue of row)for (const columnValue of column){
                const childRepeater = {
                    repeat: repeatValue,
                    row: rowValue,
                    column: columnValue,
                    layer: repeater.layer
                };
                const childName = (childSpec.name || "") + repeaterPrefix + "child__" + ((0, $2bi3s.isArray)(repeat) ? `${(0, $7k4G6.varName)(repeatValue)}` : (repeat.row ? `row_${(0, $7k4G6.varName)(rowValue)}` : "") + (repeat.column ? `column_${(0, $7k4G6.varName)(columnValue)}` : ""));
                const child = this.map(childSpec, Object.assign(Object.assign({}, params), {
                    repeater: childRepeater,
                    repeaterPrefix: childName
                }));
                child.name = childName;
                // we move data up
                concat.push((0, $7k4G6.omit)(child, [
                    "data"
                ]));
            }
        }
        const columns = (0, $2bi3s.isArray)(repeat) ? spec.columns : repeat.column ? repeat.column.length : 1;
        return Object.assign(Object.assign({
            data: (_a = childSpec.data) !== null && _a !== void 0 ? _a : data,
            align: "all"
        }, remainingProperties), {
            columns: columns,
            concat: concat
        });
    }
    mapFacet(spec, params) {
        const { facet: facet } = spec;
        if ((0, $1mvM3.isFacetMapping)(facet) && spec.columns) {
            // is facet with row/column
            spec = (0, $7k4G6.omit)(spec, [
                "columns"
            ]);
            $3XBQv.warn($bHNid.columnsNotSupportByRowCol("facet"));
        }
        return super.mapFacet(spec, params);
    }
    mapUnitWithParentEncodingOrProjection(spec, params) {
        const { encoding: encoding, projection: projection } = spec;
        const { parentEncoding: parentEncoding, parentProjection: parentProjection, config: config } = params;
        const mergedProjection = $a1718a825286389c$var$mergeProjection({
            parentProjection: parentProjection,
            projection: projection
        });
        const mergedEncoding = $a1718a825286389c$var$mergeEncoding({
            parentEncoding: parentEncoding,
            encoding: (0, $kBEvK.replaceRepeaterInEncoding)(encoding, params.repeater)
        });
        return this.mapUnit(Object.assign(Object.assign(Object.assign({}, spec), mergedProjection ? {
            projection: mergedProjection
        } : {}), mergedEncoding ? {
            encoding: mergedEncoding
        } : {}), {
            config: config
        });
    }
    mapFacetedUnit(spec, params) {
        // New encoding in the inside spec should not contain row / column
        // as row/column should be moved to facet
        const _a = spec.encoding, { row: row, column: column, facet: facet } = _a, encoding = $a1718a825286389c$var$__rest(_a, [
            "row",
            "column",
            "facet"
        ]);
        // Mark and encoding should be moved into the inner spec
        const { mark: mark, width: width, projection: projection, height: height, view: view, selection: selection, encoding: _ } = spec, outerSpec = $a1718a825286389c$var$__rest(spec, [
            "mark",
            "width",
            "projection",
            "height",
            "view",
            "selection",
            "encoding"
        ]);
        const { facetMapping: facetMapping, layout: layout } = this.getFacetMappingAndLayout({
            row: row,
            column: column,
            facet: facet
        }, params);
        const newEncoding = (0, $kBEvK.replaceRepeaterInEncoding)(encoding, params.repeater);
        return this.mapFacet(Object.assign(Object.assign(Object.assign({}, outerSpec), layout), {
            // row / column has higher precedence than facet
            facet: facetMapping,
            spec: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, width ? {
                width: width
            } : {}), height ? {
                height: height
            } : {}), view ? {
                view: view
            } : {}), projection ? {
                projection: projection
            } : {}), {
                mark: mark,
                encoding: newEncoding
            }), selection ? {
                selection: selection
            } : {})
        }), params);
    }
    getFacetMappingAndLayout(facets, params) {
        var _a;
        const { row: row, column: column, facet: facet } = facets;
        if (row || column) {
            if (facet) $3XBQv.warn($bHNid.facetChannelDropped([
                ...row ? [
                    (0, $fWfT0.ROW)
                ] : [],
                ...column ? [
                    (0, $fWfT0.COLUMN)
                ] : []
            ]));
            const facetMapping = {};
            const layout = {};
            for (const channel of [
                (0, $fWfT0.ROW),
                (0, $fWfT0.COLUMN)
            ]){
                const def = facets[channel];
                if (def) {
                    const { align: align, center: center, spacing: spacing, columns: columns } = def, defWithoutLayout = $a1718a825286389c$var$__rest(def, [
                        "align",
                        "center",
                        "spacing",
                        "columns"
                    ]);
                    facetMapping[channel] = defWithoutLayout;
                    for (const prop of [
                        "align",
                        "center",
                        "spacing"
                    ])if (def[prop] !== undefined) {
                        layout[prop] = (_a = layout[prop]) !== null && _a !== void 0 ? _a : {};
                        layout[prop][channel] = def[prop];
                    }
                }
            }
            return {
                facetMapping: facetMapping,
                layout: layout
            };
        } else {
            const { align: align, center: center, spacing: spacing, columns: columns } = facet, facetMapping = $a1718a825286389c$var$__rest(facet, [
                "align",
                "center",
                "spacing",
                "columns"
            ]);
            return {
                facetMapping: (0, $kBEvK.replaceRepeaterInFacet)(facetMapping, params.repeater),
                layout: Object.assign(Object.assign(Object.assign(Object.assign({}, align ? {
                    align: align
                } : {}), center ? {
                    center: center
                } : {}), spacing ? {
                    spacing: spacing
                } : {}), columns ? {
                    columns: columns
                } : {})
            };
        }
    }
    mapLayer(spec, _a) {
        // Special handling for extended layer spec
        var { parentEncoding: parentEncoding, parentProjection: parentProjection } = _a, otherParams = $a1718a825286389c$var$__rest(_a, [
            "parentEncoding",
            "parentProjection"
        ]);
        const { encoding: encoding, projection: projection } = spec, rest = $a1718a825286389c$var$__rest(spec, [
            "encoding",
            "projection"
        ]);
        const params = Object.assign(Object.assign({}, otherParams), {
            parentEncoding: $a1718a825286389c$var$mergeEncoding({
                parentEncoding: parentEncoding,
                encoding: encoding,
                layer: true
            }),
            parentProjection: $a1718a825286389c$var$mergeProjection({
                parentProjection: parentProjection,
                projection: projection
            })
        });
        return super.mapLayer(rest, params);
    }
}
function $a1718a825286389c$var$mergeEncoding({ parentEncoding: parentEncoding, encoding: encoding = {}, layer: layer }) {
    let merged = {};
    if (parentEncoding) {
        const channels = new Set([
            ...(0, $7k4G6.keys)(parentEncoding),
            ...(0, $7k4G6.keys)(encoding)
        ]);
        for (const channel of channels){
            const channelDef = encoding[channel];
            const parentChannelDef = parentEncoding[channel];
            if ((0, $2hAmp.isFieldOrDatumDef)(channelDef)) {
                // Field/Datum Def can inherit properties from its parent
                // Note that parentChannelDef doesn't have to be a field/datum def if the channelDef is already one.
                const mergedChannelDef = Object.assign(Object.assign({}, parentChannelDef), channelDef);
                merged[channel] = mergedChannelDef;
            } else if ((0, $2hAmp.hasConditionalFieldOrDatumDef)(channelDef)) merged[channel] = Object.assign(Object.assign({}, channelDef), {
                condition: Object.assign(Object.assign({}, parentChannelDef), channelDef.condition)
            });
            else if (channelDef || channelDef === null) merged[channel] = channelDef;
            else if (layer || (0, $2hAmp.isValueDef)(parentChannelDef) || (0, $4xdf1.isSignalRef)(parentChannelDef) || (0, $2hAmp.isFieldOrDatumDef)(parentChannelDef) || (0, $2bi3s.isArray)(parentChannelDef)) merged[channel] = parentChannelDef;
        }
    } else merged = encoding;
    return !merged || (0, $7k4G6.isEmpty)(merged) ? undefined : merged;
}
function $a1718a825286389c$var$mergeProjection(opt) {
    const { parentProjection: parentProjection, projection: projection } = opt;
    if (parentProjection && projection) $3XBQv.warn($bHNid.projectionOverridden({
        parentProjection: parentProjection,
        projection: projection
    }));
    return projection !== null && projection !== void 0 ? projection : parentProjection;
}

});
parcelRegister("80HNU", function(module, exports) {

$parcel$export(module.exports, "SpecMapper", () => $5d504d5bbd69c494$export$fe319c6e53f19100);
parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $dZ3kS = parcelRequire("dZ3kS");

var $1mvM3 = parcelRequire("1mvM3");

var $7Mulx = parcelRequire("7Mulx");

var $8Cnui = parcelRequire("8Cnui");

var $78jSz = parcelRequire("78jSz");
var $5d504d5bbd69c494$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $5d504d5bbd69c494$export$fe319c6e53f19100 {
    map(spec, params) {
        if ((0, $1mvM3.isFacetSpec)(spec)) return this.mapFacet(spec, params);
        else if ((0, $8Cnui.isRepeatSpec)(spec)) return this.mapRepeat(spec, params);
        else if ((0, $dZ3kS.isHConcatSpec)(spec)) return this.mapHConcat(spec, params);
        else if ((0, $dZ3kS.isVConcatSpec)(spec)) return this.mapVConcat(spec, params);
        else if ((0, $dZ3kS.isConcatSpec)(spec)) return this.mapConcat(spec, params);
        else return this.mapLayerOrUnit(spec, params);
    }
    mapLayerOrUnit(spec, params) {
        if ((0, $7Mulx.isLayerSpec)(spec)) return this.mapLayer(spec, params);
        else if ((0, $78jSz.isUnitSpec)(spec)) return this.mapUnit(spec, params);
        throw new Error($bHNid.invalidSpec(spec));
    }
    mapLayer(spec, params) {
        return Object.assign(Object.assign({}, spec), {
            layer: spec.layer.map((subspec)=>this.mapLayerOrUnit(subspec, params))
        });
    }
    mapHConcat(spec, params) {
        return Object.assign(Object.assign({}, spec), {
            hconcat: spec.hconcat.map((subspec)=>this.map(subspec, params))
        });
    }
    mapVConcat(spec, params) {
        return Object.assign(Object.assign({}, spec), {
            vconcat: spec.vconcat.map((subspec)=>this.map(subspec, params))
        });
    }
    mapConcat(spec, params) {
        const { concat: concat } = spec, rest = $5d504d5bbd69c494$var$__rest(spec, [
            "concat"
        ]);
        return Object.assign(Object.assign({}, rest), {
            concat: concat.map((subspec)=>this.map(subspec, params))
        });
    }
    mapFacet(spec, params) {
        return Object.assign(Object.assign({}, spec), {
            // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
            spec: this.map(spec.spec, params)
        });
    }
    mapRepeat(spec, params) {
        return Object.assign(Object.assign({}, spec), {
            // as any is required here since TS cannot infer that the output type satisfies the input type
            spec: this.map(spec.spec, params)
        });
    }
}

});

parcelRegister("lBlz4", function(module, exports) {

$parcel$export(module.exports, "PathOverlayNormalizer", () => $fb9dc7f4382152cd$export$d6d9d060953f03c5);

var $2bi3s = parcelRequire("2bi3s");

var $8eU8A = parcelRequire("8eU8A");

var $9mRLv = parcelRequire("9mRLv");

var $78jSz = parcelRequire("78jSz");

var $7QxS6 = parcelRequire("7QxS6");

var $7k4G6 = parcelRequire("7k4G6");
var $fb9dc7f4382152cd$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $fb9dc7f4382152cd$var$dropLineAndPoint(markDef) {
    const { point: _point, line: _line } = markDef, mark = $fb9dc7f4382152cd$var$__rest(markDef, [
        "point",
        "line"
    ]);
    return (0, $7k4G6.keys)(mark).length > 1 ? mark : mark.type;
}
function $fb9dc7f4382152cd$var$dropLineAndPointFromConfig(config) {
    for (const mark of [
        "line",
        "area",
        "rule",
        "trail"
    ])if (config[mark]) config = Object.assign(Object.assign({}, config), {
        // TODO: remove as any
        [mark]: (0, $7k4G6.omit)(config[mark], [
            "point",
            "line"
        ])
    });
    return config;
}
function $fb9dc7f4382152cd$var$getPointOverlay(markDef, markConfig = {}, encoding) {
    if (markDef.point === "transparent") return {
        opacity: 0
    };
    else if (markDef.point) // truthy : true or object
    return (0, $2bi3s.isObject)(markDef.point) ? markDef.point : {};
    else if (markDef.point !== undefined) // false or null
    return null;
    else {
        // undefined (not disabled)
        if (markConfig.point || encoding.shape) // enable point overlay if config[mark].point is truthy or if encoding.shape is provided
        return (0, $2bi3s.isObject)(markConfig.point) ? markConfig.point : {};
        // markDef.point is defined as falsy
        return undefined;
    }
}
function $fb9dc7f4382152cd$var$getLineOverlay(markDef, markConfig = {}) {
    if (markDef.line) // true or object
    return markDef.line === true ? {} : markDef.line;
    else if (markDef.line !== undefined) // false or null
    return null;
    else {
        // undefined (not disabled)
        if (markConfig.line) // enable line overlay if config[mark].line is truthy
        return markConfig.line === true ? {} : markConfig.line;
        // markDef.point is defined as falsy
        return undefined;
    }
}
class $fb9dc7f4382152cd$export$d6d9d060953f03c5 {
    constructor(){
        this.name = "path-overlay";
    }
    hasMatchingType(spec, config) {
        if ((0, $78jSz.isUnitSpec)(spec)) {
            const { mark: mark, encoding: encoding } = spec;
            const markDef = (0, $9mRLv.isMarkDef)(mark) ? mark : {
                type: mark
            };
            switch(markDef.type){
                case "line":
                case "rule":
                case "trail":
                    return !!$fb9dc7f4382152cd$var$getPointOverlay(markDef, config[markDef.type], encoding);
                case "area":
                    return(// false / null are also included as we want to remove the properties
                    !!$fb9dc7f4382152cd$var$getPointOverlay(markDef, config[markDef.type], encoding) || !!$fb9dc7f4382152cd$var$getLineOverlay(markDef, config[markDef.type]));
            }
        }
        return false;
    }
    run(spec, params, normalize) {
        const { config: config } = params;
        const { selection: selection, projection: projection, mark: mark, encoding: e } = spec, outerSpec = $fb9dc7f4382152cd$var$__rest(spec, [
            "selection",
            "projection",
            "mark",
            "encoding"
        ]);
        // Need to call normalizeEncoding because we need the inferred types to correctly determine stack
        const encoding = (0, $8eU8A.normalizeEncoding)(e, config);
        const markDef = (0, $9mRLv.isMarkDef)(mark) ? mark : {
            type: mark
        };
        const pointOverlay = $fb9dc7f4382152cd$var$getPointOverlay(markDef, config[markDef.type], encoding);
        const lineOverlay = markDef.type === "area" && $fb9dc7f4382152cd$var$getLineOverlay(markDef, config[markDef.type]);
        const layer = [
            Object.assign(Object.assign({}, selection ? {
                selection: selection
            } : {}), {
                mark: $fb9dc7f4382152cd$var$dropLineAndPoint(Object.assign(Object.assign({}, markDef.type === "area" && markDef.opacity === undefined && markDef.fillOpacity === undefined ? {
                    opacity: 0.7
                } : {}), markDef)),
                // drop shape from encoding as this might be used to trigger point overlay
                encoding: (0, $7k4G6.omit)(encoding, [
                    "shape"
                ])
            })
        ];
        // FIXME: determine rules for applying selections.
        // Need to copy stack config to overlayed layer
        const stackProps = (0, $7QxS6.stack)(markDef, encoding);
        let overlayEncoding = encoding;
        if (stackProps) {
            const { fieldChannel: stackFieldChannel, offset: offset } = stackProps;
            overlayEncoding = Object.assign(Object.assign({}, encoding), {
                [stackFieldChannel]: Object.assign(Object.assign({}, encoding[stackFieldChannel]), offset ? {
                    stack: offset
                } : {})
            });
        }
        if (lineOverlay) layer.push(Object.assign(Object.assign({}, projection ? {
            projection: projection
        } : {}), {
            mark: Object.assign(Object.assign({
                type: "line"
            }, (0, $7k4G6.pick)(markDef, [
                "clip",
                "interpolate",
                "tension",
                "tooltip"
            ])), lineOverlay),
            encoding: overlayEncoding
        }));
        if (pointOverlay) layer.push(Object.assign(Object.assign({}, projection ? {
            projection: projection
        } : {}), {
            mark: Object.assign(Object.assign({
                type: "point",
                opacity: 1,
                filled: true
            }, (0, $7k4G6.pick)(markDef, [
                "clip",
                "tooltip"
            ])), pointOverlay),
            encoding: overlayEncoding
        }));
        return normalize(Object.assign(Object.assign({}, outerSpec), {
            layer: layer
        }), Object.assign(Object.assign({}, params), {
            config: $fb9dc7f4382152cd$var$dropLineAndPointFromConfig(config)
        }));
    }
}

});
parcelRegister("7QxS6", function(module, exports) {

$parcel$export(module.exports, "stack", () => $5b67a9ebb88b56bc$export$a57ab32f40f83ea9);

var $2bi3s = parcelRequire("2bi3s");

var $7sjJm = parcelRequire("7sjJm");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $8eU8A = parcelRequire("8eU8A");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9mRLv = parcelRequire("9mRLv");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");
const $5b67a9ebb88b56bc$var$STACK_OFFSET_INDEX = {
    zero: 1,
    center: 1,
    normalize: 1
};
function $5b67a9ebb88b56bc$export$a9777f9b42d18ae6(s) {
    return s in $5b67a9ebb88b56bc$var$STACK_OFFSET_INDEX;
}
const $5b67a9ebb88b56bc$export$dc3cc62a5cb549d5 = new Set([
    (0, $9mRLv.ARC),
    (0, $9mRLv.BAR),
    (0, $9mRLv.AREA),
    (0, $9mRLv.RULE),
    (0, $9mRLv.POINT),
    (0, $9mRLv.CIRCLE),
    (0, $9mRLv.SQUARE),
    (0, $9mRLv.LINE),
    (0, $9mRLv.TEXT),
    (0, $9mRLv.TICK)
]);
const $5b67a9ebb88b56bc$export$edfc2ff4395f3ef4 = new Set([
    (0, $9mRLv.BAR),
    (0, $9mRLv.AREA),
    (0, $9mRLv.ARC)
]);
function $5b67a9ebb88b56bc$var$potentialStackedChannel(encoding, x) {
    var _a, _b;
    const y = x === "x" ? "y" : "radius";
    const xDef = encoding[x];
    const yDef = encoding[y];
    if ((0, $2hAmp.isFieldDef)(xDef) && (0, $2hAmp.isFieldDef)(yDef)) {
        if ((0, $2hAmp.channelDefType)(xDef) === "quantitative" && (0, $2hAmp.channelDefType)(yDef) === "quantitative") {
            if (xDef.stack) return x;
            else if (yDef.stack) return y;
            const xAggregate = (0, $2hAmp.isFieldDef)(xDef) && !!xDef.aggregate;
            const yAggregate = (0, $2hAmp.isFieldDef)(yDef) && !!yDef.aggregate;
            // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y
            if (xAggregate !== yAggregate) return xAggregate ? x : y;
            else {
                const xScale = (_a = xDef.scale) === null || _a === void 0 ? void 0 : _a.type;
                const yScale = (_b = yDef.scale) === null || _b === void 0 ? void 0 : _b.type;
                if (xScale && xScale !== "linear") return y;
                else if (yScale && yScale !== "linear") return x;
            }
        } else if ((0, $2hAmp.channelDefType)(xDef) === "quantitative") return x;
        else if ((0, $2hAmp.channelDefType)(yDef) === "quantitative") return y;
    } else if ((0, $2hAmp.channelDefType)(xDef) === "quantitative") return x;
    else if ((0, $2hAmp.channelDefType)(yDef) === "quantitative") return y;
    return undefined;
}
function $5b67a9ebb88b56bc$var$getDimensionChannel(channel) {
    switch(channel){
        case "x":
            return "y";
        case "y":
            return "x";
        case "theta":
            return "radius";
        case "radius":
            return "theta";
    }
}
function $5b67a9ebb88b56bc$export$a57ab32f40f83ea9(m, encoding, opt = {}) {
    const mark = (0, $9mRLv.isMarkDef)(m) ? m.type : m;
    // Should have stackable mark
    if (!$5b67a9ebb88b56bc$export$dc3cc62a5cb549d5.has(mark)) return null;
    // Run potential stacked twice, one for Cartesian and another for Polar,
    // so text marks can be stacked in any of the coordinates.
    // Note: The logic here is not perfectly correct.  If we want to support stacked dot plots where each dot is a pie chart with label, we have to change the stack logic here to separate Cartesian stacking for polar stacking.
    // However, since we probably never want to do that, let's just note the limitation here.
    const fieldChannel = $5b67a9ebb88b56bc$var$potentialStackedChannel(encoding, "x") || $5b67a9ebb88b56bc$var$potentialStackedChannel(encoding, "theta");
    if (!fieldChannel) return null;
    const stackedFieldDef = encoding[fieldChannel];
    const stackedField = (0, $2hAmp.isFieldDef)(stackedFieldDef) ? (0, $2hAmp.vgField)(stackedFieldDef, {}) : undefined;
    let dimensionChannel = $5b67a9ebb88b56bc$var$getDimensionChannel(fieldChannel);
    let dimensionDef = encoding[dimensionChannel];
    let dimensionField = (0, $2hAmp.isFieldDef)(dimensionDef) ? (0, $2hAmp.vgField)(dimensionDef, {}) : undefined;
    // avoid grouping by the stacked field
    if (dimensionField === stackedField) {
        dimensionField = undefined;
        dimensionDef = undefined;
        dimensionChannel = undefined;
    }
    // Should have grouping level of detail that is different from the dimension field
    const stackBy = (0, $fWfT0.NONPOSITION_CHANNELS).reduce((sc, channel)=>{
        // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)
        if (channel !== "tooltip" && (0, $8eU8A.channelHasField)(encoding, channel)) {
            const channelDef = encoding[channel];
            for (const cDef of (0, $2bi3s.array)(channelDef)){
                const fieldDef = (0, $2hAmp.getFieldDef)(cDef);
                if (fieldDef.aggregate) continue;
                // Check whether the channel's field is identical to x/y's field or if the channel is a repeat
                const f = (0, $2hAmp.vgField)(fieldDef, {});
                if (// if fielddef is a repeat, just include it in the stack by
                !f || // otherwise, the field must be different from x and y fields.
                f !== dimensionField) sc.push({
                    channel: channel,
                    fieldDef: fieldDef
                });
            }
        }
        return sc;
    }, []);
    // Automatically determine offset
    let offset;
    if (stackedFieldDef.stack !== undefined) {
        if ((0, $2bi3s.isBoolean)(stackedFieldDef.stack)) offset = stackedFieldDef.stack ? "zero" : null;
        else offset = stackedFieldDef.stack;
    } else if (stackBy.length > 0 && $5b67a9ebb88b56bc$export$edfc2ff4395f3ef4.has(mark)) // Bar and Area with sum ops are automatically stacked by default
    offset = "zero";
    if (!offset || !$5b67a9ebb88b56bc$export$a9777f9b42d18ae6(offset)) return null;
    if ((0, $8eU8A.isAggregate)(encoding) && stackBy.length === 0) return null;
    // warn when stacking non-linear
    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== (0, $9rekY.ScaleType).LINEAR) {
        if (opt.disallowNonLinearStack) return null;
        else $3XBQv.warn($bHNid.cannotStackNonLinearScale(stackedFieldDef.scale.type));
    }
    // Check if it is a ranged mark
    if ((0, $2hAmp.isFieldOrDatumDef)(encoding[(0, $fWfT0.getSecondaryRangeChannel)(fieldChannel)])) {
        if (stackedFieldDef.stack !== undefined) $3XBQv.warn($bHNid.cannotStackRangedMark(fieldChannel));
        return null;
    }
    // Warn if stacking non-summative aggregate
    if ((0, $2hAmp.isFieldDef)(stackedFieldDef) && stackedFieldDef.aggregate && !(0, $7k4G6.contains)((0, $7sjJm.SUM_OPS), stackedFieldDef.aggregate)) $3XBQv.warn($bHNid.stackNonSummativeAggregate(stackedFieldDef.aggregate));
    return {
        groupbyChannel: dimensionDef ? dimensionChannel : undefined,
        groupbyField: dimensionField,
        fieldChannel: fieldChannel,
        impute: stackedFieldDef.impute === null ? false : (0, $9mRLv.isPathMark)(mark),
        stackBy: stackBy,
        offset: offset
    };
}

});


parcelRegister("4ss53", function(module, exports) {

$parcel$export(module.exports, "RangeStepNormalizer", () => $33ef8f272dee41ec$export$ac76deb7e8fb8eb6);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $78jSz = parcelRequire("78jSz");

var $7k4G6 = parcelRequire("7k4G6");
var $33ef8f272dee41ec$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $33ef8f272dee41ec$export$ac76deb7e8fb8eb6 {
    constructor(){
        this.name = "RangeStep";
    }
    hasMatchingType(spec) {
        var _a;
        if ((0, $78jSz.isUnitSpec)(spec) && spec.encoding) for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS)){
            const def = spec.encoding[channel];
            if (def && (0, $2hAmp.isFieldOrDatumDef)(def)) {
                if ((_a = def === null || def === void 0 ? void 0 : def.scale) === null || _a === void 0 ? void 0 : _a["rangeStep"]) return true;
            }
        }
        return false;
    }
    run(spec) {
        var _a;
        const sizeMixins = {};
        let encoding = Object.assign({}, spec.encoding);
        for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS)){
            const sizeType = (0, $fWfT0.getSizeChannel)(channel);
            const def = encoding[channel];
            if (def && (0, $2hAmp.isFieldOrDatumDef)(def)) {
                if ((_a = def === null || def === void 0 ? void 0 : def.scale) === null || _a === void 0 ? void 0 : _a["rangeStep"]) {
                    const { scale: scale } = def, defWithoutScale = $33ef8f272dee41ec$var$__rest(def, [
                        "scale"
                    ]);
                    const _b = scale, { rangeStep: rangeStep } = _b, scaleWithoutRangeStep = $33ef8f272dee41ec$var$__rest(_b, [
                        "rangeStep"
                    ]);
                    sizeMixins[sizeType] = {
                        step: scale["rangeStep"]
                    };
                    $3XBQv.warn($bHNid.RANGE_STEP_DEPRECATED);
                    encoding = Object.assign(Object.assign({}, encoding), {
                        [channel]: Object.assign(Object.assign({}, defWithoutScale), (0, $7k4G6.isEmpty)(scaleWithoutRangeStep) ? {} : {
                            scale: scaleWithoutRangeStep
                        })
                    });
                }
            }
        }
        return Object.assign(Object.assign(Object.assign({}, sizeMixins), spec), {
            encoding: encoding
        });
    }
}

});

parcelRegister("kBEvK", function(module, exports) {

$parcel$export(module.exports, "replaceRepeaterInFacet", () => $f006b003ccaaf443$export$d82b60bd96f65059);
$parcel$export(module.exports, "replaceRepeaterInEncoding", () => $f006b003ccaaf443$export$f51b95ddd4cea8f4);

var $2bi3s = parcelRequire("2bi3s");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $Xb2We = parcelRequire("Xb2We");

var $1mvM3 = parcelRequire("1mvM3");
var $f006b003ccaaf443$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $f006b003ccaaf443$export$d82b60bd96f65059(facet, repeater) {
    if (!repeater) return facet;
    if ((0, $1mvM3.isFacetMapping)(facet)) return $f006b003ccaaf443$var$replaceRepeaterInMapping(facet, repeater);
    return $f006b003ccaaf443$var$replaceRepeaterInFieldDef(facet, repeater);
}
function $f006b003ccaaf443$export$f51b95ddd4cea8f4(encoding, repeater) {
    if (!repeater) return encoding;
    return $f006b003ccaaf443$var$replaceRepeaterInMapping(encoding, repeater);
}
/**
 * Replaces repeated value and returns if the repeated value is valid.
 */ function $f006b003ccaaf443$var$replaceRepeatInProp(prop, o, repeater) {
    const val = o[prop];
    if ((0, $2hAmp.isRepeatRef)(val)) {
        if (val.repeat in repeater) return Object.assign(Object.assign({}, o), {
            [prop]: repeater[val.repeat]
        });
        else {
            $3XBQv.warn($bHNid.noSuchRepeatedValue(val.repeat));
            return undefined;
        }
    }
    return o;
}
/**
 * Replace repeater values in a field def with the concrete field name.
 */ function $f006b003ccaaf443$var$replaceRepeaterInFieldDef(fieldDef, repeater) {
    fieldDef = $f006b003ccaaf443$var$replaceRepeatInProp("field", fieldDef, repeater);
    if (fieldDef === undefined) // the field def should be ignored
    return undefined;
    else if (fieldDef === null) return null;
    if ((0, $2hAmp.isSortableFieldDef)(fieldDef) && (0, $Xb2We.isSortField)(fieldDef.sort)) {
        const sort = $f006b003ccaaf443$var$replaceRepeatInProp("field", fieldDef.sort, repeater);
        fieldDef = Object.assign(Object.assign({}, fieldDef), sort ? {
            sort: sort
        } : {});
    }
    return fieldDef;
}
function $f006b003ccaaf443$var$replaceRepeaterInFieldOrDatumDef(def, repeater) {
    if ((0, $2hAmp.isFieldDef)(def)) return $f006b003ccaaf443$var$replaceRepeaterInFieldDef(def, repeater);
    else {
        const datumDef = $f006b003ccaaf443$var$replaceRepeatInProp("datum", def, repeater);
        if (datumDef !== def && !datumDef.type) datumDef.type = "nominal";
        return datumDef;
    }
}
function $f006b003ccaaf443$var$replaceRepeaterInChannelDef(channelDef, repeater) {
    if ((0, $2hAmp.isFieldOrDatumDef)(channelDef)) {
        const fd = $f006b003ccaaf443$var$replaceRepeaterInFieldOrDatumDef(channelDef, repeater);
        if (fd) return fd;
        else if ((0, $2hAmp.isConditionalDef)(channelDef)) return {
            condition: channelDef.condition
        };
    } else {
        if ((0, $2hAmp.hasConditionalFieldOrDatumDef)(channelDef)) {
            const fd = $f006b003ccaaf443$var$replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);
            if (fd) return Object.assign(Object.assign({}, channelDef), {
                condition: fd
            });
            else {
                const { condition: condition } = channelDef, channelDefWithoutCondition = $f006b003ccaaf443$var$__rest(channelDef, [
                    "condition"
                ]);
                return channelDefWithoutCondition;
            }
        }
        return channelDef;
    }
    return undefined;
}
function $f006b003ccaaf443$var$replaceRepeaterInMapping(mapping, repeater) {
    const out = {};
    for(const channel in mapping)if ((0, $2bi3s.hasOwnProperty)(mapping, channel)) {
        const channelDef = mapping[channel];
        if ((0, $2bi3s.isArray)(channelDef)) // array cannot have condition
        out[channel] = channelDef // somehow we need to cast it here
        .map((cd)=>$f006b003ccaaf443$var$replaceRepeaterInChannelDef(cd, repeater)).filter((cd)=>cd);
        else {
            const cd = $f006b003ccaaf443$var$replaceRepeaterInChannelDef(channelDef, repeater);
            if (cd !== undefined) out[channel] = cd;
        }
    }
    return out;
}

});

parcelRegister("a3uhZ", function(module, exports) {

$parcel$export(module.exports, "RuleForRangedLineNormalizer", () => $7521ae01b28fcdf5$export$52d3c0137dd87f88);

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $78jSz = parcelRequire("78jSz");
class $7521ae01b28fcdf5$export$52d3c0137dd87f88 {
    constructor(){
        this.name = "RuleForRangedLine";
    }
    hasMatchingType(spec) {
        if ((0, $78jSz.isUnitSpec)(spec)) {
            const { encoding: encoding, mark: mark } = spec;
            if (mark === "line") for (const channel of (0, $fWfT0.SECONDARY_RANGE_CHANNEL)){
                const mainChannel = (0, $fWfT0.getMainRangeChannel)(channel);
                const mainChannelDef = encoding[mainChannel];
                if (encoding[channel]) {
                    if ((0, $2hAmp.isFieldDef)(mainChannelDef) && !(0, $iR8lA.isBinned)(mainChannelDef.bin) || (0, $2hAmp.isDatumDef)(mainChannelDef)) return true;
                }
            }
        }
        return false;
    }
    run(spec, params, normalize) {
        const { encoding: encoding } = spec;
        $3XBQv.warn($bHNid.lineWithRange(!!encoding.x2, !!encoding.y2));
        return normalize(Object.assign(Object.assign({}, spec), {
            mark: "rule"
        }), params);
    }
}

});



parcelRegister("5gbsw", function(module, exports) {

$parcel$export(module.exports, "compile", () => $3d4755e5dad7e77d$export$ef7acd7185315e22);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iX9mu = parcelRequire("iX9mu");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $6kDXm = parcelRequire("6kDXm");

var $9j78H = parcelRequire("9j78H");

var $lmJyE = parcelRequire("lmJyE");

var $7k4G6 = parcelRequire("7k4G6");

var $7ugB1 = parcelRequire("7ugB1");

var $iUJlm = parcelRequire("iUJlm");

var $aSQVj = parcelRequire("aSQVj");
var $3d4755e5dad7e77d$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $3d4755e5dad7e77d$export$ef7acd7185315e22(inputSpec, opt = {}) {
    // 0. Augment opt with default opts
    if (opt.logger) // set the singleton logger to the provided logger
    $3XBQv.set(opt.logger);
    if (opt.fieldTitle) // set the singleton field title formatter
    $2hAmp.setTitleFormatter(opt.fieldTitle);
    try {
        // 1. Initialize config by deep merging default config with the config provided via option and the input spec.
        const config = (0, $iX9mu.initConfig)((0, $2bi3s.mergeConfig)(opt.config, inputSpec.config));
        // 2. Normalize: Convert input spec -> normalized spec
        // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.
        // - Normalize autosize and width or height spec
        const spec = (0, $6kDXm.normalize)(inputSpec, config);
        // 3. Build Model: normalized spec -> Model (a tree structure)
        // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.
        // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.
        const model = (0, $7ugB1.buildModel)(spec, null, "", undefined, config);
        // 4 Parse: Model --> Model with components
        // Note that components = intermediate representations that are equivalent to Vega specs.
        // We need these intermediate representation because we need to merge many visualization "components" like projections, scales, axes, and legends.
        // We will later convert these components into actual Vega specs in the assemble phase.
        // In this phase, we do a bottom-up traversal over the whole tree to
        // parse for each type of components once (e.g., data, layout, mark, scale).
        // By doing bottom-up traversal, we start parsing components of unit specs and
        // then merge child components of parent composite specs.
        //
        // Please see inside model.parse() for order of different components parsed.
        model.parse();
        // drawDataflow(model.component.data.sources);
        // 5. Optimize the dataflow. This will modify the data component of the model.
        (0, $aSQVj.optimizeDataflow)(model.component.data, model);
        // drawDataflow(model.component.data.sources);
        // 6. Assemble: convert model components --> Vega Spec.
        const vgSpec = $3d4755e5dad7e77d$var$assembleTopLevelModel(model, $3d4755e5dad7e77d$var$getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);
        return {
            spec: vgSpec,
            normalized: spec
        };
    } finally{
        // Reset the singleton logger if a logger is provided
        if (opt.logger) $3XBQv.reset();
        // Reset the singleton field title formatter if provided
        if (opt.fieldTitle) $2hAmp.resetTitleFormatter();
    }
}
function $3d4755e5dad7e77d$var$getTopLevelProperties(inputSpec, autosize, config, model) {
    const width = model.component.layoutSize.get("width");
    const height = model.component.layoutSize.get("height");
    if (autosize === undefined) {
        autosize = {
            type: "pad"
        };
        if (model.hasAxisOrientSignalRef()) autosize.resize = true;
    } else if ((0, $2bi3s.isString)(autosize)) autosize = {
        type: autosize
    };
    if (width && height && (0, $lmJyE.isFitType)(autosize.type)) {
        if (width === "step" && height === "step") {
            $3XBQv.warn($bHNid.droppingFit());
            autosize.type = "pad";
        } else if (width === "step" || height === "step") {
            // effectively XOR, because else if
            // get step dimension
            const sizeType = width === "step" ? "width" : "height";
            // log that we're dropping fit for respective channel
            $3XBQv.warn($bHNid.droppingFit((0, $fWfT0.getPositionScaleChannel)(sizeType)));
            // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)
            const inverseSizeType = sizeType === "width" ? "height" : "width";
            autosize.type = (0, $lmJyE.getFitType)(inverseSizeType);
        }
    }
    return Object.assign(Object.assign(Object.assign({}, (0, $7k4G6.keys)(autosize).length === 1 && autosize.type ? autosize.type === "pad" ? {} : {
        autosize: autosize.type
    } : {
        autosize: autosize
    }), (0, $lmJyE.extractTopLevelProperties)(config, false)), (0, $lmJyE.extractTopLevelProperties)(inputSpec, true));
}
/*
 * Assemble the top-level model to a Vega spec.
 *
 * Note: this couldn't be `model.assemble()` since the top-level model
 * needs some special treatment to generate top-level properties.
 */ function $3d4755e5dad7e77d$var$assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {
    // Config with Vega-Lite only config removed.
    const vgConfig = model.config ? (0, $iX9mu.stripAndRedirectConfig)(model.config) : undefined;
    const data = [].concat(model.assembleSelectionData([]), // only assemble data in the root
    (0, $iUJlm.assembleRootData)(model.component.data, datasets));
    const projections = model.assembleProjections();
    const title = model.assembleTitle();
    const style = model.assembleGroupStyle();
    const encodeEntry = model.assembleGroupEncodeEntry(true);
    let layoutSignals = model.assembleLayoutSignals();
    // move width and height signals with values to top level
    layoutSignals = layoutSignals.filter((signal)=>{
        if ((signal.name === "width" || signal.name === "height") && signal.value !== undefined) {
            topLevelProperties[signal.name] = +signal.value;
            return false;
        }
        return true;
    });
    const { params: params } = topLevelProperties, otherTopLevelProps = $3d4755e5dad7e77d$var$__rest(topLevelProperties, [
        "params"
    ]);
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
        $schema: "https://vega.github.io/schema/vega/v5.json"
    }, model.description ? {
        description: model.description
    } : {}), otherTopLevelProps), title ? {
        title: title
    } : {}), style ? {
        style: style
    } : {}), encodeEntry ? {
        encode: {
            update: encodeEntry
        }
    } : {}), {
        data: data
    }), projections.length > 0 ? {
        projections: projections
    } : {}), model.assembleGroup([
        ...layoutSignals,
        ...model.assembleSelectionTopLevelSignals([]),
        ...(0, $9j78H.assembleParameterSignals)(params)
    ])), vgConfig ? {
        config: vgConfig
    } : {}), usermeta ? {
        usermeta: usermeta
    } : {});
}

});
parcelRegister("lmJyE", function(module, exports) {

$parcel$export(module.exports, "isFitType", () => $f8defde87e88f0f9$export$4e0577dbd0fe27ba);
$parcel$export(module.exports, "getFitType", () => $f8defde87e88f0f9$export$4a8521dc576f36e8);
$parcel$export(module.exports, "extractTopLevelProperties", () => $f8defde87e88f0f9$export$ffc1030c6f39909a);

var $fWfT0 = parcelRequire("fWfT0");

var $9ulW1 = parcelRequire("9ulW1");
function $f8defde87e88f0f9$export$4e0577dbd0fe27ba(autoSizeType) {
    return autoSizeType === "fit" || autoSizeType === "fit-x" || autoSizeType === "fit-y";
}
function $f8defde87e88f0f9$export$4a8521dc576f36e8(sizeType) {
    return sizeType ? `fit-${(0, $fWfT0.getPositionScaleChannel)(sizeType)}` : "fit";
}
const $f8defde87e88f0f9$var$TOP_LEVEL_PROPERTIES = [
    "background",
    "padding"
];
function $f8defde87e88f0f9$export$ffc1030c6f39909a(t, includeParams) {
    const o = {};
    for (const p of $f8defde87e88f0f9$var$TOP_LEVEL_PROPERTIES)if (t && t[p] !== undefined) o[p] = (0, $9ulW1.signalRefOrValue)(t[p]);
    if (includeParams) o.params = t.params;
    return o;
}

});

parcelRegister("7ugB1", function(module, exports) {

$parcel$export(module.exports, "buildModel", () => $5738355e4b1e2772$export$c7350a533853b958);
parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");
parcelRequire("5zWAp");
var $1mvM3 = parcelRequire("1mvM3");
var $7Mulx = parcelRequire("7Mulx");
var $78jSz = parcelRequire("78jSz");
var $dZ3kS = parcelRequire("dZ3kS");

var $7x8Yh = parcelRequire("7x8Yh");

var $hJLz9 = parcelRequire("hJLz9");

var $3MQFF = parcelRequire("3MQFF");

var $gJzO9 = parcelRequire("gJzO9");
function $5738355e4b1e2772$export$c7350a533853b958(spec, parent, parentGivenName, unitSize, config) {
    if ((0, $1mvM3.isFacetSpec)(spec)) return new (0, $hJLz9.FacetModel)(spec, parent, parentGivenName, config);
    else if ((0, $7Mulx.isLayerSpec)(spec)) return new (0, $3MQFF.LayerModel)(spec, parent, parentGivenName, unitSize, config);
    else if ((0, $78jSz.isUnitSpec)(spec)) return new (0, $gJzO9.UnitModel)(spec, parent, parentGivenName, unitSize, config);
    else if ((0, $dZ3kS.isAnyConcatSpec)(spec)) return new (0, $7x8Yh.ConcatModel)(spec, parent, parentGivenName, config);
    throw new Error($bHNid.invalidSpec(spec));
}

});
parcelRegister("7x8Yh", function(module, exports) {

$parcel$export(module.exports, "ConcatModel", () => $57c292fd5b1ba9fb$export$d051788a2cb05f62);

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");
parcelRequire("5zWAp");
var $dZ3kS = parcelRequire("dZ3kS");

var $7k4G6 = parcelRequire("7k4G6");

var $7ugB1 = parcelRequire("7ugB1");

var $iRvxE = parcelRequire("iRvxE");

var $eGXJ8 = parcelRequire("eGXJ8");

var $6aA2s = parcelRequire("6aA2s");

var $jkJyY = parcelRequire("jkJyY");
class $57c292fd5b1ba9fb$export$d051788a2cb05f62 extends (0, $jkJyY.Model) {
    constructor(spec, parent, parentGivenName, config){
        var _a, _b, _c, _d;
        super(spec, "concat", parent, parentGivenName, config, spec.resolve);
        if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === "shared" || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === "shared") $3XBQv.warn($bHNid.CONCAT_CANNOT_SHARE_AXIS);
        this.children = this.getChildren(spec).map((child, i)=>{
            return (0, $7ugB1.buildModel)(child, this, this.getName("concat_" + i), undefined, config);
        });
    }
    parseData() {
        this.component.data = (0, $iRvxE.parseData)(this);
        for (const child of this.children)child.parseData();
    }
    parseSelections() {
        // Merge selections up the hierarchy so that they may be referenced
        // across unit specs. Persist their definitions within each child
        // to assemble signals which remain within output Vega unit groups.
        this.component.selection = {};
        for (const child of this.children){
            child.parseSelections();
            for (const key of (0, $7k4G6.keys)(child.component.selection))this.component.selection[key] = child.component.selection[key];
        }
    }
    parseMarkGroup() {
        for (const child of this.children)child.parseMarkGroup();
    }
    parseAxesAndHeaders() {
        for (const child of this.children)child.parseAxesAndHeaders();
    // TODO(#2415): support shared axes
    }
    getChildren(spec) {
        if ((0, $dZ3kS.isVConcatSpec)(spec)) return spec.vconcat;
        else if ((0, $dZ3kS.isHConcatSpec)(spec)) return spec.hconcat;
        return spec.concat;
    }
    parseLayoutSize() {
        (0, $6aA2s.parseConcatLayoutSize)(this);
    }
    parseAxisGroup() {
        return null;
    }
    assembleSelectionTopLevelSignals(signals) {
        return this.children.reduce((sg, child)=>child.assembleSelectionTopLevelSignals(sg), signals);
    }
    assembleSignals() {
        this.children.forEach((child)=>child.assembleSignals());
        return [];
    }
    assembleLayoutSignals() {
        const layoutSignals = (0, $eGXJ8.assembleLayoutSignals)(this);
        for (const child of this.children)layoutSignals.push(...child.assembleLayoutSignals());
        return layoutSignals;
    }
    assembleSelectionData(data) {
        return this.children.reduce((db, child)=>child.assembleSelectionData(db), data);
    }
    assembleMarks() {
        // only children have marks
        return this.children.map((child)=>{
            const title = child.assembleTitle();
            const style = child.assembleGroupStyle();
            const encodeEntry = child.assembleGroupEncodeEntry(false);
            return Object.assign(Object.assign(Object.assign(Object.assign({
                type: "group",
                name: child.getName("group")
            }, title ? {
                title: title
            } : {}), style ? {
                style: style
            } : {}), encodeEntry ? {
                encode: {
                    update: encodeEntry
                }
            } : {}), child.assembleGroup());
        });
    }
    assembleDefaultLayout() {
        const columns = this.layout.columns;
        return Object.assign(Object.assign({}, columns != null ? {
            columns: columns
        } : {}), {
            bounds: "full",
            // Use align each so it can work with multiple plots with different size
            align: "each"
        });
    }
}

});
parcelRegister("iRvxE", function(module, exports) {

$parcel$export(module.exports, "findSource", () => $dbb5a4c3dd7bbc85$export$d2d587b58f33c71d);
$parcel$export(module.exports, "parseData", () => $dbb5a4c3dd7bbc85$export$4c0e6fff2d4abe18);

var $cDKnR = parcelRequire("cDKnR");

var $iK8OT = parcelRequire("iK8OT");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $20qnG = parcelRequire("20qnG");

var $7k4G6 = parcelRequire("7k4G6");

var $jkJyY = parcelRequire("jkJyY");

var $Wddys = parcelRequire("Wddys");

var $dNHyS = parcelRequire("dNHyS");

var $7hYDh = parcelRequire("7hYDh");

var $69ADH = parcelRequire("69ADH");

var $8IEdE = parcelRequire("8IEdE");

var $71IWl = parcelRequire("71IWl");

var $2fEVC = parcelRequire("2fEVC");

var $3WhAB = parcelRequire("3WhAB");

var $hgVkC = parcelRequire("hgVkC");

var $12cAY = parcelRequire("12cAY");

var $8hWdk = parcelRequire("8hWdk");

var $dPoAS = parcelRequire("dPoAS");

var $fShv6 = parcelRequire("fShv6");

var $fgoUf = parcelRequire("fgoUf");

var $jzV9L = parcelRequire("jzV9L");

var $bXOrP = parcelRequire("bXOrP");

var $lIzph = parcelRequire("lIzph");

var $hHNlB = parcelRequire("hHNlB");

var $hjAkP = parcelRequire("hjAkP");

var $4PfXh = parcelRequire("4PfXh");

var $bFEmy = parcelRequire("bFEmy");

var $bG5pi = parcelRequire("bG5pi");

var $8UlmV = parcelRequire("8UlmV");

var $40XYD = parcelRequire("40XYD");

var $1UWTp = parcelRequire("1UWTp");

var $7cPMs = parcelRequire("7cPMs");

var $cetJA = parcelRequire("cetJA");

var $a74BM = parcelRequire("a74BM");

var $6GmKA = parcelRequire("6GmKA");

var $1MK7y = parcelRequire("1MK7y");

var $msAWv = parcelRequire("msAWv");
function $dbb5a4c3dd7bbc85$export$d2d587b58f33c71d(data, sources) {
    var _a, _b, _c, _d;
    for (const other of sources){
        const otherData = other.data;
        // if both datasets have a name defined, we cannot merge
        if (data.name && other.hasName() && data.name !== other.dataName) continue;
        const formatMesh = (_a = data["format"]) === null || _a === void 0 ? void 0 : _a.mesh;
        const otherFeature = (_b = otherData.format) === null || _b === void 0 ? void 0 : _b.feature;
        // feature and mesh are mutually exclusive
        if (formatMesh && otherFeature) continue;
        // we have to extract the same feature or mesh
        const formatFeature = (_c = data["format"]) === null || _c === void 0 ? void 0 : _c.feature;
        if ((formatFeature || otherFeature) && formatFeature !== otherFeature) continue;
        const otherMesh = (_d = otherData.format) === null || _d === void 0 ? void 0 : _d.mesh;
        if ((formatMesh || otherMesh) && formatMesh !== otherMesh) continue;
        if ((0, $iK8OT.isInlineData)(data) && (0, $iK8OT.isInlineData)(otherData)) {
            if ((0, $7k4G6.deepEqual)(data.values, otherData.values)) return other;
        } else if ((0, $iK8OT.isUrlData)(data) && (0, $iK8OT.isUrlData)(otherData)) {
            if (data.url === otherData.url) return other;
        } else if ((0, $iK8OT.isNamedData)(data)) {
            if (data.name === other.dataName) return other;
        }
    }
    return null;
}
function $dbb5a4c3dd7bbc85$var$parseRoot(model, sources) {
    if (model.data || !model.parent) {
        // if the model defines a data source or is the root, create a source node
        if (model.data === null) {
            // data: null means we should ignore the parent's data so we just create a new data source
            const source = new (0, $a74BM.SourceNode)({
                values: []
            });
            sources.push(source);
            return source;
        }
        const existingSource = $dbb5a4c3dd7bbc85$export$d2d587b58f33c71d(model.data, sources);
        if (existingSource) {
            if (!(0, $iK8OT.isGenerator)(model.data)) existingSource.data.format = (0, $7k4G6.mergeDeep)({}, model.data.format, existingSource.data.format);
            // if the new source has a name but the existing one does not, we can set it
            if (!existingSource.hasName() && model.data.name) existingSource.dataName = model.data.name;
            return existingSource;
        } else {
            const source = new (0, $a74BM.SourceNode)(model.data);
            sources.push(source);
            return source;
        }
    } else // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.
    return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;
}
function $dbb5a4c3dd7bbc85$export$9a6af860077df8df(head, model, ancestorParse) {
    var _a, _b;
    let lookupCounter = 0;
    for (const t of model.transforms){
        let derivedType = undefined;
        let transformNode;
        if ((0, $20qnG.isCalculate)(t)) {
            transformNode = head = new (0, $8IEdE.CalculateNode)(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isFilter)(t)) {
            const implicit = (0, $fShv6.getImplicitFromFilterTransform)(t);
            transformNode = head = (_a = (0, $fShv6.ParseNode).makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _a !== void 0 ? _a : head;
            head = new (0, $hgVkC.FilterNode)(head, model, t.filter);
        } else if ((0, $20qnG.isBin)(t)) {
            transformNode = head = (0, $69ADH.BinNode).makeFromTransform(head, t, model);
            derivedType = "number";
        } else if ((0, $20qnG.isTimeUnit)(t)) {
            derivedType = "date";
            const parsedAs = ancestorParse.getWithExplicit(t.field);
            // Create parse node because the input to time unit is always date.
            if (parsedAs.value === undefined) {
                head = new (0, $fShv6.ParseNode)(head, {
                    [t.field]: derivedType
                });
                ancestorParse.set(t.field, derivedType, false);
            }
            transformNode = head = (0, $1MK7y.TimeUnitNode).makeFromTransform(head, t);
        } else if ((0, $20qnG.isAggregate)(t)) {
            transformNode = head = (0, $7hYDh.AggregateNode).makeFromTransform(head, t);
            derivedType = "number";
            if ((0, $Wddys.requiresSelectionId)(model)) head = new (0, $lIzph.IdentifierNode)(head);
        } else if ((0, $20qnG.isLookup)(t)) {
            transformNode = head = (0, $bG5pi.LookupNode).make(head, model, t, lookupCounter++);
            derivedType = "derived";
        } else if ((0, $20qnG.isWindow)(t)) {
            transformNode = head = new (0, $msAWv.WindowTransformNode)(head, t);
            derivedType = "number";
        } else if ((0, $20qnG.isJoinAggregate)(t)) {
            transformNode = head = new (0, $hjAkP.JoinAggregateTransformNode)(head, t);
            derivedType = "number";
        } else if ((0, $20qnG.isStack)(t)) {
            transformNode = head = (0, $6GmKA.StackNode).makeFromTransform(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isFold)(t)) {
            transformNode = head = new (0, $dPoAS.FoldTransformNode)(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isFlatten)(t)) {
            transformNode = head = new (0, $8hWdk.FlattenTransformNode)(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isPivot)(t)) {
            transformNode = head = new (0, $8UlmV.PivotTransformNode)(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isSample)(t)) head = new (0, $7cPMs.SampleTransformNode)(head, t);
        else if ((0, $20qnG.isImpute)(t)) {
            transformNode = head = (0, $hHNlB.ImputeNode).makeFromTransform(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isDensity)(t)) {
            transformNode = head = new (0, $2fEVC.DensityTransformNode)(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isQuantile)(t)) {
            transformNode = head = new (0, $40XYD.QuantileTransformNode)(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isRegression)(t)) {
            transformNode = head = new (0, $1UWTp.RegressionTransformNode)(head, t);
            derivedType = "derived";
        } else if ((0, $20qnG.isLoess)(t)) {
            transformNode = head = new (0, $bFEmy.LoessTransformNode)(head, t);
            derivedType = "derived";
        } else {
            $3XBQv.warn($bHNid.invalidTransformIgnored(t));
            continue;
        }
        if (transformNode && derivedType !== undefined) for (const field of (_b = transformNode.producedFields()) !== null && _b !== void 0 ? _b : [])ancestorParse.set(field, derivedType, false);
    }
    return head;
}
function $dbb5a4c3dd7bbc85$export$4c0e6fff2d4abe18(model) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    let head = $dbb5a4c3dd7bbc85$var$parseRoot(model, model.component.data.sources);
    const { outputNodes: outputNodes, outputNodeRefCounts: outputNodeRefCounts } = model.component.data;
    const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new (0, $cDKnR.AncestorParse)();
    const data = model.data;
    if ((0, $iK8OT.isGenerator)(data)) {
        // insert generator transform
        if ((0, $iK8OT.isSequenceGenerator)(data)) head = new (0, $cetJA.SequenceNode)(head, data.sequence);
        else if ((0, $iK8OT.isGraticuleGenerator)(data)) head = new (0, $bXOrP.GraticuleNode)(head, data.graticule);
        // no parsing necessary for generator
        ancestorParse.parseNothing = true;
    } else if (((_a = data === null || data === void 0 ? void 0 : data.format) === null || _a === void 0 ? void 0 : _a.parse) === null) // format.parse: null means disable parsing
    ancestorParse.parseNothing = true;
    head = (_b = (0, $fShv6.ParseNode).makeExplicit(head, model, ancestorParse)) !== null && _b !== void 0 ? _b : head;
    // Default discrete selections require an identifer transform to
    // uniquely identify data points. Add this transform at the head of
    // the pipeline such that the identifier field is available for all
    // subsequent datasets. During optimization, we will remove this
    // transform if it proves to be unnecessary. Additional identifier
    // transforms will be necessary when new tuples are constructed
    // (e.g., post-aggregation).
    head = new (0, $lIzph.IdentifierNode)(head);
    // HACK: This is equivalent for merging bin extent for union scale.
    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale
    const parentIsLayer = model.parent && (0, $jkJyY.isLayerModel)(model.parent);
    if ((0, $jkJyY.isUnitModel)(model) || (0, $jkJyY.isFacetModel)(model)) {
        if (parentIsLayer) head = (_c = (0, $69ADH.BinNode).makeFromEncoding(head, model)) !== null && _c !== void 0 ? _c : head;
    }
    if (model.transforms.length > 0) head = $dbb5a4c3dd7bbc85$export$9a6af860077df8df(head, model, ancestorParse);
    // create parse nodes for fields that need to be parsed (or flattened) implicitly
    const implicitSelection = (0, $fShv6.getImplicitFromSelection)(model);
    const implicitEncoding = (0, $fShv6.getImplicitFromEncoding)(model);
    head = (_d = (0, $fShv6.ParseNode).makeWithAncestors(head, {}, Object.assign(Object.assign({}, implicitSelection), implicitEncoding), ancestorParse)) !== null && _d !== void 0 ? _d : head;
    if ((0, $jkJyY.isUnitModel)(model)) {
        head = (0, $fgoUf.GeoJSONNode).parseAll(head, model);
        head = (0, $jzV9L.GeoPointNode).parseAll(head, model);
    }
    if ((0, $jkJyY.isUnitModel)(model) || (0, $jkJyY.isFacetModel)(model)) {
        if (!parentIsLayer) head = (_e = (0, $69ADH.BinNode).makeFromEncoding(head, model)) !== null && _e !== void 0 ? _e : head;
        head = (_f = (0, $1MK7y.TimeUnitNode).makeFromEncoding(head, model)) !== null && _f !== void 0 ? _f : head;
        head = (0, $8IEdE.CalculateNode).parseAllForSortIndex(head, model);
    }
    // add an output node pre aggregation
    const rawName = model.getDataName((0, $iK8OT.DataSourceType).Raw);
    const raw = new (0, $71IWl.OutputNode)(head, rawName, (0, $iK8OT.DataSourceType).Raw, outputNodeRefCounts);
    outputNodes[rawName] = raw;
    head = raw;
    if ((0, $jkJyY.isUnitModel)(model)) {
        const agg = (0, $7hYDh.AggregateNode).makeFromEncoding(head, model);
        if (agg) {
            head = agg;
            if ((0, $Wddys.requiresSelectionId)(model)) head = new (0, $lIzph.IdentifierNode)(head);
        }
        head = (_g = (0, $hHNlB.ImputeNode).makeFromEncoding(head, model)) !== null && _g !== void 0 ? _g : head;
        head = (_h = (0, $6GmKA.StackNode).makeFromEncoding(head, model)) !== null && _h !== void 0 ? _h : head;
    }
    if ((0, $jkJyY.isUnitModel)(model)) head = (_j = (0, $12cAY.FilterInvalidNode).make(head, model)) !== null && _j !== void 0 ? _j : head;
    // output node for marks
    const mainName = model.getDataName((0, $iK8OT.DataSourceType).Main);
    const main = new (0, $71IWl.OutputNode)(head, mainName, (0, $iK8OT.DataSourceType).Main, outputNodeRefCounts);
    outputNodes[mainName] = main;
    head = main;
    if ((0, $jkJyY.isUnitModel)(model)) (0, $dNHyS.materializeSelections)(model, main);
    // add facet marker
    let facetRoot = null;
    if ((0, $jkJyY.isFacetModel)(model)) {
        const facetName = model.getName("facet");
        // Derive new aggregate for facet's sort field
        // augment data source with new fields for crossed facet
        head = (_k = (0, $4PfXh.makeJoinAggregateFromFacet)(head, model.facet)) !== null && _k !== void 0 ? _k : head;
        facetRoot = new (0, $3WhAB.FacetNode)(head, model, facetName, main.getSource());
        outputNodes[facetName] = facetRoot;
    }
    return Object.assign(Object.assign({}, model.component.data), {
        outputNodes: outputNodes,
        outputNodeRefCounts: outputNodeRefCounts,
        raw: raw,
        main: main,
        facetRoot: facetRoot,
        ancestorParse: ancestorParse
    });
}

});
parcelRegister("cDKnR", function(module, exports) {

$parcel$export(module.exports, "AncestorParse", () => $933d1b6f88c7b93b$export$331af23342a0b58a);

var $5T1O4 = parcelRequire("5T1O4");
class $933d1b6f88c7b93b$export$331af23342a0b58a extends (0, $5T1O4.Split) {
    constructor(explicit = {}, implicit = {}, parseNothing = false){
        super(explicit, implicit);
        this.explicit = explicit;
        this.implicit = implicit;
        this.parseNothing = parseNothing;
    }
    clone() {
        const clone = super.clone();
        clone.parseNothing = this.parseNothing;
        return clone;
    }
}

});
parcelRegister("5T1O4", function(module, exports) {

$parcel$export(module.exports, "Split", () => $44937d91b5460b61$export$f836382419f64c98);
$parcel$export(module.exports, "makeExplicit", () => $44937d91b5460b61$export$bd2822caf4b745be);
$parcel$export(module.exports, "makeImplicit", () => $44937d91b5460b61$export$1e5fb6cf785564ab);
$parcel$export(module.exports, "tieBreakByComparing", () => $44937d91b5460b61$export$c67caa4c26b19da5);
$parcel$export(module.exports, "defaultTieBreaker", () => $44937d91b5460b61$export$e92f56f0b0aef4d);
$parcel$export(module.exports, "mergeValuesWithExplicit", () => $44937d91b5460b61$export$2543cb6c5b3f4361);

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $7k4G6 = parcelRequire("7k4G6");
class $44937d91b5460b61$export$f836382419f64c98 {
    constructor(explicit = {}, implicit = {}){
        this.explicit = explicit;
        this.implicit = implicit;
    }
    clone() {
        return new $44937d91b5460b61$export$f836382419f64c98((0, $7k4G6.duplicate)(this.explicit), (0, $7k4G6.duplicate)(this.implicit));
    }
    combine() {
        // FIXME remove "as any".
        // Add "as any" to avoid an error "Spread types may only be created from object types".
        return Object.assign(Object.assign({}, this.explicit), this.implicit);
    }
    get(key) {
        // Explicit has higher precedence
        return (0, $7k4G6.getFirstDefined)(this.explicit[key], this.implicit[key]);
    }
    getWithExplicit(key) {
        // Explicit has higher precedence
        if (this.explicit[key] !== undefined) return {
            explicit: true,
            value: this.explicit[key]
        };
        else if (this.implicit[key] !== undefined) return {
            explicit: false,
            value: this.implicit[key]
        };
        return {
            explicit: false,
            value: undefined
        };
    }
    setWithExplicit(key, value) {
        if (value.value !== undefined) this.set(key, value.value, value.explicit);
    }
    set(key, value, explicit) {
        delete this[explicit ? "implicit" : "explicit"][key];
        this[explicit ? "explicit" : "implicit"][key] = value;
        return this;
    }
    copyKeyFromSplit(key, s) {
        // Explicit has higher precedence
        if (s.explicit[key] !== undefined) this.set(key, s.explicit[key], true);
        else if (s.implicit[key] !== undefined) this.set(key, s.implicit[key], false);
    }
    copyKeyFromObject(key, s) {
        // Explicit has higher precedence
        if (s[key] !== undefined) this.set(key, s[key], true);
    }
    /**
     * Merge split object into this split object. Properties from the other split
     * overwrite properties from this split.
     */ copyAll(other) {
        for (const key of (0, $7k4G6.keys)(other.combine())){
            const val = other.getWithExplicit(key);
            this.setWithExplicit(key, val);
        }
    }
}
function $44937d91b5460b61$export$bd2822caf4b745be(value) {
    return {
        explicit: true,
        value: value
    };
}
function $44937d91b5460b61$export$1e5fb6cf785564ab(value) {
    return {
        explicit: false,
        value: value
    };
}
function $44937d91b5460b61$export$c67caa4c26b19da5(compare) {
    return (v1, v2, property, propertyOf)=>{
        const diff = compare(v1.value, v2.value);
        if (diff > 0) return v1;
        else if (diff < 0) return v2;
        return $44937d91b5460b61$export$e92f56f0b0aef4d(v1, v2, property, propertyOf);
    };
}
function $44937d91b5460b61$export$e92f56f0b0aef4d(v1, v2, property, propertyOf) {
    if (v1.explicit && v2.explicit) $3XBQv.warn($bHNid.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));
    // If equal score, prefer v1.
    return v1;
}
function $44937d91b5460b61$export$2543cb6c5b3f4361(v1, v2, property, propertyOf, tieBreaker = $44937d91b5460b61$export$e92f56f0b0aef4d) {
    if (v1 === undefined || v1.value === undefined) // For first run
    return v2;
    if (v1.explicit && !v2.explicit) return v1;
    else if (v2.explicit && !v1.explicit) return v2;
    else if ((0, $7k4G6.deepEqual)(v1.value, v2.value)) return v1;
    else return tieBreaker(v1, v2, property, propertyOf);
}

});


parcelRegister("iK8OT", function(module, exports) {

$parcel$export(module.exports, "isUrlData", () => $da535d4dacec0d5b$export$c2fc10dbe0397712);
$parcel$export(module.exports, "isInlineData", () => $da535d4dacec0d5b$export$f5e14e4ae58dd8b9);
$parcel$export(module.exports, "isNamedData", () => $da535d4dacec0d5b$export$30d6afebd1a48328);
$parcel$export(module.exports, "isGenerator", () => $da535d4dacec0d5b$export$6ab7812f1bac68be);
$parcel$export(module.exports, "isSequenceGenerator", () => $da535d4dacec0d5b$export$5fd747b74d868352);
$parcel$export(module.exports, "isSphereGenerator", () => $da535d4dacec0d5b$export$674e1c60fcf8e9b4);
$parcel$export(module.exports, "isGraticuleGenerator", () => $da535d4dacec0d5b$export$cda52dfec24e7e70);
$parcel$export(module.exports, "DataSourceType", () => $da535d4dacec0d5b$export$308a1fd8aa90c8ab);
function $da535d4dacec0d5b$export$c2fc10dbe0397712(data) {
    return "url" in data;
}
function $da535d4dacec0d5b$export$f5e14e4ae58dd8b9(data) {
    return "values" in data;
}
function $da535d4dacec0d5b$export$30d6afebd1a48328(data) {
    return "name" in data && !$da535d4dacec0d5b$export$c2fc10dbe0397712(data) && !$da535d4dacec0d5b$export$f5e14e4ae58dd8b9(data) && !$da535d4dacec0d5b$export$6ab7812f1bac68be(data);
}
function $da535d4dacec0d5b$export$6ab7812f1bac68be(data) {
    return data && ($da535d4dacec0d5b$export$5fd747b74d868352(data) || $da535d4dacec0d5b$export$674e1c60fcf8e9b4(data) || $da535d4dacec0d5b$export$cda52dfec24e7e70(data));
}
function $da535d4dacec0d5b$export$5fd747b74d868352(data) {
    return "sequence" in data;
}
function $da535d4dacec0d5b$export$674e1c60fcf8e9b4(data) {
    return "sphere" in data;
}
function $da535d4dacec0d5b$export$cda52dfec24e7e70(data) {
    return "graticule" in data;
}
var $da535d4dacec0d5b$export$308a1fd8aa90c8ab;
(function(DataSourceType) {
    DataSourceType[DataSourceType["Raw"] = 0] = "Raw";
    DataSourceType[DataSourceType["Main"] = 1] = "Main";
    DataSourceType[DataSourceType["Row"] = 2] = "Row";
    DataSourceType[DataSourceType["Column"] = 3] = "Column";
    DataSourceType[DataSourceType["Lookup"] = 4] = "Lookup";
})($da535d4dacec0d5b$export$308a1fd8aa90c8ab || ($da535d4dacec0d5b$export$308a1fd8aa90c8ab = {}));

});

parcelRegister("20qnG", function(module, exports) {

$parcel$export(module.exports, "isFilter", () => $17600b90cd0f168e$export$b169a94581f05ec);
$parcel$export(module.exports, "isImputeSequence", () => $17600b90cd0f168e$export$676553797b0d0065);
$parcel$export(module.exports, "isLookup", () => $17600b90cd0f168e$export$9c2f237c4decd4d8);
$parcel$export(module.exports, "isLookupData", () => $17600b90cd0f168e$export$6eba778d5ff2c8ce);
$parcel$export(module.exports, "isLookupSelection", () => $17600b90cd0f168e$export$6c3840c779792b57);
$parcel$export(module.exports, "isPivot", () => $17600b90cd0f168e$export$9f7ad1f98aa554d1);
$parcel$export(module.exports, "isDensity", () => $17600b90cd0f168e$export$f663522ce4e3e4c0);
$parcel$export(module.exports, "isQuantile", () => $17600b90cd0f168e$export$3c2550d9de517431);
$parcel$export(module.exports, "isRegression", () => $17600b90cd0f168e$export$c9d64a70a62fbf4f);
$parcel$export(module.exports, "isLoess", () => $17600b90cd0f168e$export$f3ff612a109ce5fb);
$parcel$export(module.exports, "isSample", () => $17600b90cd0f168e$export$f6668ecf3c0b5a43);
$parcel$export(module.exports, "isWindow", () => $17600b90cd0f168e$export$5a096129d439f843);
$parcel$export(module.exports, "isJoinAggregate", () => $17600b90cd0f168e$export$85fcbd2825ad11ee);
$parcel$export(module.exports, "isFlatten", () => $17600b90cd0f168e$export$28c7560752bfdb49);
$parcel$export(module.exports, "isCalculate", () => $17600b90cd0f168e$export$66ae17bc667654d6);
$parcel$export(module.exports, "isBin", () => $17600b90cd0f168e$export$d13722425607b2fd);
$parcel$export(module.exports, "isImpute", () => $17600b90cd0f168e$export$44ca662d896cc9d0);
$parcel$export(module.exports, "isTimeUnit", () => $17600b90cd0f168e$export$422789958d8174dd);
$parcel$export(module.exports, "isAggregate", () => $17600b90cd0f168e$export$cc2e3d03e914de66);
$parcel$export(module.exports, "isStack", () => $17600b90cd0f168e$export$db58588880737c1c);
$parcel$export(module.exports, "isFold", () => $17600b90cd0f168e$export$dc406f81c1d423fb);
$parcel$export(module.exports, "normalizeTransform", () => $17600b90cd0f168e$export$791782b3a3c7e211);

var $bJN6D = parcelRequire("bJN6D");

var $6EUuI = parcelRequire("6EUuI");
function $17600b90cd0f168e$export$b169a94581f05ec(t) {
    return "filter" in t;
}
function $17600b90cd0f168e$export$676553797b0d0065(t) {
    return (t === null || t === void 0 ? void 0 : t["stop"]) !== undefined;
}
function $17600b90cd0f168e$export$9c2f237c4decd4d8(t) {
    return "lookup" in t;
}
function $17600b90cd0f168e$export$6eba778d5ff2c8ce(from) {
    return "data" in from;
}
function $17600b90cd0f168e$export$6c3840c779792b57(from) {
    return "selection" in from;
}
function $17600b90cd0f168e$export$9f7ad1f98aa554d1(t) {
    return "pivot" in t;
}
function $17600b90cd0f168e$export$f663522ce4e3e4c0(t) {
    return "density" in t;
}
function $17600b90cd0f168e$export$3c2550d9de517431(t) {
    return "quantile" in t;
}
function $17600b90cd0f168e$export$c9d64a70a62fbf4f(t) {
    return "regression" in t;
}
function $17600b90cd0f168e$export$f3ff612a109ce5fb(t) {
    return "loess" in t;
}
function $17600b90cd0f168e$export$f6668ecf3c0b5a43(t) {
    return "sample" in t;
}
function $17600b90cd0f168e$export$5a096129d439f843(t) {
    return "window" in t;
}
function $17600b90cd0f168e$export$85fcbd2825ad11ee(t) {
    return "joinaggregate" in t;
}
function $17600b90cd0f168e$export$28c7560752bfdb49(t) {
    return "flatten" in t;
}
function $17600b90cd0f168e$export$66ae17bc667654d6(t) {
    return "calculate" in t;
}
function $17600b90cd0f168e$export$d13722425607b2fd(t) {
    return "bin" in t;
}
function $17600b90cd0f168e$export$44ca662d896cc9d0(t) {
    return "impute" in t;
}
function $17600b90cd0f168e$export$422789958d8174dd(t) {
    return "timeUnit" in t;
}
function $17600b90cd0f168e$export$cc2e3d03e914de66(t) {
    return "aggregate" in t;
}
function $17600b90cd0f168e$export$db58588880737c1c(t) {
    return "stack" in t;
}
function $17600b90cd0f168e$export$dc406f81c1d423fb(t) {
    return "fold" in t;
}
function $17600b90cd0f168e$export$791782b3a3c7e211(transform) {
    return transform.map((t)=>{
        if ($17600b90cd0f168e$export$b169a94581f05ec(t)) return {
            filter: (0, $bJN6D.normalizeLogicalComposition)(t.filter, (0, $6EUuI.normalizePredicate))
        };
        return t;
    });
}

});

parcelRegister("jkJyY", function(module, exports) {

$parcel$export(module.exports, "isUnitModel", () => $e1333a792aa591cd$export$c0385eaad84d892d);
$parcel$export(module.exports, "isFacetModel", () => $e1333a792aa591cd$export$d41e22e290105a87);
$parcel$export(module.exports, "isConcatModel", () => $e1333a792aa591cd$export$e44a6201e53b65f6);
$parcel$export(module.exports, "isLayerModel", () => $e1333a792aa591cd$export$a14d2111c86e77b3);
$parcel$export(module.exports, "Model", () => $e1333a792aa591cd$export$a1edc412be3e1841);
$parcel$export(module.exports, "ModelWithField", () => $e1333a792aa591cd$export$d87ddc34337be94d);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iK8OT = parcelRequire("iK8OT");

var $8eU8A = parcelRequire("8eU8A");

var $5C8w7 = parcelRequire("5C8w7");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");
parcelRequire("5zWAp");
var $1mvM3 = parcelRequire("1mvM3");

var $7Eu98 = parcelRequire("7Eu98");

var $ahFi3 = parcelRequire("ahFi3");

var $20qnG = parcelRequire("20qnG");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $dCse2 = parcelRequire("dCse2");

var $9ulW1 = parcelRequire("9ulW1");

var $49Viv = parcelRequire("49Viv");

var $hkDCc = parcelRequire("hkDCc");

var $eGXJ8 = parcelRequire("eGXJ8");

var $H6zbC = parcelRequire("H6zbC");

var $7Igmf = parcelRequire("7Igmf");

var $dTZ5J = parcelRequire("dTZ5J");

var $6GNmX = parcelRequire("6GNmX");

var $evLlF = parcelRequire("evLlF");

var $96xGQ = parcelRequire("96xGQ");

var $91e8H = parcelRequire("91e8H");

var $gUNQa = parcelRequire("gUNQa");

var $5T1O4 = parcelRequire("5T1O4");
var $e1333a792aa591cd$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $e1333a792aa591cd$export$ac6e1c51dc7b1284 {
    constructor(){
        this.nameMap = {};
    }
    rename(oldName, newName) {
        this.nameMap[oldName] = newName;
    }
    has(name) {
        return this.nameMap[name] !== undefined;
    }
    get(name) {
        // If the name appears in the _nameMap, we need to read its new name.
        // We have to loop over the dict just in case the new name also gets renamed.
        while(this.nameMap[name] && name !== this.nameMap[name])name = this.nameMap[name];
        return name;
    }
}
function $e1333a792aa591cd$export$c0385eaad84d892d(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === "unit";
}
function $e1333a792aa591cd$export$d41e22e290105a87(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === "facet";
}
function $e1333a792aa591cd$export$e44a6201e53b65f6(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === "concat";
}
function $e1333a792aa591cd$export$a14d2111c86e77b3(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === "layer";
}
class $e1333a792aa591cd$export$a1edc412be3e1841 {
    constructor(spec, type, parent, parentGivenName, config, resolve, view){
        var _a, _b;
        this.type = type;
        this.parent = parent;
        this.config = config;
        this.children = [];
        /**
         * Corrects the data references in marks after assemble.
         */ this.correctDataNames = (mark)=>{
            // TODO: make this correct
            // for normal data references
            if (mark.from && mark.from.data) mark.from.data = this.lookupDataSource(mark.from.data);
            // for access to facet data
            if (mark.from && mark.from.facet && mark.from.facet.data) mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);
            return mark;
        };
        this.parent = parent;
        this.config = config;
        this.view = (0, $5C8w7.replaceExprRefInIndex)(view);
        // If name is not provided, always use parent's givenName to avoid name conflicts.
        this.name = (_a = spec.name) !== null && _a !== void 0 ? _a : parentGivenName;
        this.title = (0, $ahFi3.isText)(spec.title) ? {
            text: spec.title
        } : spec.title ? this.initTitle(spec.title) : undefined;
        // Shared name maps
        this.scaleNameMap = parent ? parent.scaleNameMap : new $e1333a792aa591cd$export$ac6e1c51dc7b1284();
        this.projectionNameMap = parent ? parent.projectionNameMap : new $e1333a792aa591cd$export$ac6e1c51dc7b1284();
        this.signalNameMap = parent ? parent.signalNameMap : new $e1333a792aa591cd$export$ac6e1c51dc7b1284();
        this.data = spec.data;
        this.description = spec.description;
        this.transforms = (0, $20qnG.normalizeTransform)((_b = spec.transform) !== null && _b !== void 0 ? _b : []);
        this.layout = type === "layer" || type === "unit" ? {} : (0, $7Eu98.extractCompositionLayout)(spec, type, config);
        this.component = {
            data: {
                sources: parent ? parent.component.data.sources : [],
                outputNodes: parent ? parent.component.data.outputNodes : {},
                outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
                // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined
                isFaceted: (0, $1mvM3.isFacetSpec)(spec) || parent && parent.component.data.isFaceted && spec.data === undefined
            },
            layoutSize: new (0, $5T1O4.Split)(),
            layoutHeaders: {
                row: {},
                column: {},
                facet: {}
            },
            mark: null,
            resolve: Object.assign({
                scale: {},
                axis: {},
                legend: {}
            }, resolve ? (0, $7k4G6.duplicate)(resolve) : {}),
            selection: null,
            scales: null,
            projection: null,
            axes: {},
            legends: {}
        };
    }
    initTitle(title) {
        const props = (0, $7k4G6.keys)(title);
        const titleInternal = {
            text: (0, $9ulW1.signalRefOrValue)(title.text)
        };
        for (const prop of props)titleInternal[prop] = (0, $9ulW1.signalRefOrValue)(title[prop]);
        return titleInternal;
    }
    get width() {
        return this.getSizeSignalRef("width");
    }
    get height() {
        return this.getSizeSignalRef("height");
    }
    parse() {
        this.parseScale();
        this.parseLayoutSize(); // depends on scale
        this.renameTopLevelLayoutSizeSignal();
        this.parseSelections();
        this.parseProjection();
        this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.
        this.parseAxesAndHeaders(); // depends on scale and layout size
        this.parseLegends(); // depends on scale, markDef
        this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.
    }
    parseScale() {
        (0, $gUNQa.parseScales)(this);
    }
    parseProjection() {
        (0, $evLlF.parseProjection)(this);
    }
    /**
     * Rename top-level spec's size to be just width / height, ignoring model name.
     * This essentially merges the top-level spec's width/height signals with the width/height signals
     * to help us reduce redundant signals declaration.
     */ renameTopLevelLayoutSizeSignal() {
        if (this.getName("width") !== "width") this.renameSignal(this.getName("width"), "width");
        if (this.getName("height") !== "height") this.renameSignal(this.getName("height"), "height");
    }
    parseLegends() {
        (0, $dTZ5J.parseLegend)(this);
    }
    assembleGroupStyle() {
        var _a, _b;
        if (this.type === "unit" || this.type === "layer") return (_b = (_a = this.view) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : "cell";
        return undefined;
    }
    assembleEncodeFromView(view) {
        // Exclude "style"
        const { style: _ } = view, baseView = $e1333a792aa591cd$var$__rest(view, [
            "style"
        ]);
        const e = {};
        for (const property of (0, $7k4G6.keys)(baseView)){
            const value = baseView[property];
            if (value !== undefined) e[property] = (0, $9ulW1.signalOrValueRef)(value);
        }
        return e;
    }
    assembleGroupEncodeEntry(isTopLevel) {
        let encodeEntry = {};
        if (this.view) encodeEntry = this.assembleEncodeFromView(this.view);
        if (!isTopLevel) {
            // Descriptions are already added to the top-level description so we only need to add them to the inner views.
            if (this.description) encodeEntry["description"] = (0, $9ulW1.signalOrValueRef)(this.description);
            // For top-level spec, we can set the global width and height signal to adjust the group size.
            // For other child specs, we have to manually set width and height in the encode entry.
            if (this.type === "unit" || this.type === "layer") return Object.assign({
                width: this.getSizeSignalRef("width"),
                height: this.getSizeSignalRef("height")
            }, encodeEntry !== null && encodeEntry !== void 0 ? encodeEntry : {});
        }
        return (0, $7k4G6.isEmpty)(encodeEntry) ? undefined : encodeEntry;
    }
    assembleLayout() {
        if (!this.layout) return undefined;
        const _a = this.layout, { spacing: spacing } = _a, layout = $e1333a792aa591cd$var$__rest(_a, [
            "spacing"
        ]);
        const { component: component, config: config } = this;
        const titleBand = (0, $49Viv.assembleLayoutTitleBand)(component.layoutHeaders, config);
        return Object.assign(Object.assign(Object.assign({
            padding: spacing
        }, this.assembleDefaultLayout()), layout), titleBand ? {
            titleBand: titleBand
        } : {});
    }
    assembleDefaultLayout() {
        return {};
    }
    assembleHeaderMarks() {
        const { layoutHeaders: layoutHeaders } = this.component;
        let headerMarks = [];
        for (const channel of (0, $fWfT0.FACET_CHANNELS))if (layoutHeaders[channel].title) headerMarks.push((0, $49Viv.assembleTitleGroup)(this, channel));
        for (const channel of (0, $hkDCc.HEADER_CHANNELS))headerMarks = headerMarks.concat((0, $49Viv.assembleHeaderGroups)(this, channel));
        return headerMarks;
    }
    assembleAxes() {
        return (0, $dCse2.assembleAxes)(this.component.axes, this.config);
    }
    assembleLegends() {
        return (0, $7Igmf.assembleLegends)(this);
    }
    assembleProjections() {
        return (0, $6GNmX.assembleProjections)(this);
    }
    assembleTitle() {
        var _a, _b, _c;
        const _d = (_a = this.title) !== null && _a !== void 0 ? _a : {}, { encoding: encoding } = _d, titleNoEncoding = $e1333a792aa591cd$var$__rest(_d, [
            "encoding"
        ]);
        const title = Object.assign(Object.assign(Object.assign({}, (0, $ahFi3.extractTitleConfig)(this.config.title).nonMark), titleNoEncoding), encoding ? {
            encode: {
                update: encoding
            }
        } : {});
        if (title.text) {
            if ((0, $7k4G6.contains)([
                "unit",
                "layer"
            ], this.type)) // Unit/Layer
            {
                if ((0, $7k4G6.contains)([
                    "middle",
                    undefined
                ], title.anchor)) title.frame = (_b = title.frame) !== null && _b !== void 0 ? _b : "group";
            } else // composition with Vega layout
            // Set title = "start" by default for composition as "middle" does not look nice
            // https://github.com/vega/vega/issues/960#issuecomment-471360328
            title.anchor = (_c = title.anchor) !== null && _c !== void 0 ? _c : "start";
            return (0, $7k4G6.isEmpty)(title) ? undefined : title;
        }
        return undefined;
    }
    /**
     * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
     */ assembleGroup(signals = []) {
        const group = {};
        signals = signals.concat(this.assembleSignals());
        if (signals.length > 0) group.signals = signals;
        const layout = this.assembleLayout();
        if (layout) group.layout = layout;
        group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());
        // Only include scales if this spec is top-level or if parent is facet.
        // (Otherwise, it will be merged with upper-level's scope.)
        const scales = !this.parent || $e1333a792aa591cd$export$d41e22e290105a87(this.parent) ? (0, $96xGQ.assembleScales)(this) : [];
        if (scales.length > 0) group.scales = scales;
        const axes = this.assembleAxes();
        if (axes.length > 0) group.axes = axes;
        const legends = this.assembleLegends();
        if (legends.length > 0) group.legends = legends;
        return group;
    }
    getName(text) {
        return (0, $7k4G6.varName)((this.name ? this.name + "_" : "") + text);
    }
    getDataName(type) {
        return this.getName((0, $iK8OT.DataSourceType)[type].toLowerCase());
    }
    /**
     * Request a data source name for the given data source type and mark that data source as required.
     * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
     * You can lookup the correct dataset name in assemble with `lookupDataSource`.
     */ requestDataName(name) {
        const fullName = this.getDataName(name);
        // Increase ref count. This is critical because otherwise we won't create a data source.
        // We also increase the ref counts on OutputNode.getSource() calls.
        const refCounts = this.component.data.outputNodeRefCounts;
        refCounts[fullName] = (refCounts[fullName] || 0) + 1;
        return fullName;
    }
    getSizeSignalRef(layoutSizeType) {
        if ($e1333a792aa591cd$export$d41e22e290105a87(this.parent)) {
            const sizeType = (0, $H6zbC.getSizeTypeFromLayoutSizeType)(layoutSizeType);
            const channel = (0, $fWfT0.getPositionScaleChannel)(sizeType);
            const scaleComponent = this.component.scales[channel];
            if (scaleComponent && !scaleComponent.merged) {
                // independent scale
                const type = scaleComponent.get("type");
                const range = scaleComponent.get("range");
                if ((0, $9rekY.hasDiscreteDomain)(type) && (0, $4xdf1.isVgRangeStep)(range)) {
                    const scaleName = scaleComponent.get("name");
                    const domain = (0, $91e8H.assembleDomain)(this, channel);
                    const field = (0, $91e8H.getFieldFromDomain)(domain);
                    if (field) {
                        const fieldRef = (0, $2hAmp.vgField)({
                            aggregate: "distinct",
                            field: field
                        }, {
                            expr: "datum"
                        });
                        return {
                            signal: (0, $eGXJ8.sizeExpr)(scaleName, scaleComponent, fieldRef)
                        };
                    } else {
                        $3XBQv.warn($bHNid.unknownField(channel));
                        return null;
                    }
                }
            }
        }
        return {
            signal: this.signalNameMap.get(this.getName(layoutSizeType))
        };
    }
    /**
     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
     */ lookupDataSource(name) {
        const node = this.component.data.outputNodes[name];
        if (!node) // Name not found in map so let's just return what we got.
        // This can happen if we already have the correct name.
        return name;
        return node.getSource();
    }
    getSignalName(oldSignalName) {
        return this.signalNameMap.get(oldSignalName);
    }
    renameSignal(oldName, newName) {
        this.signalNameMap.rename(oldName, newName);
    }
    renameScale(oldName, newName) {
        this.scaleNameMap.rename(oldName, newName);
    }
    renameProjection(oldName, newName) {
        this.projectionNameMap.rename(oldName, newName);
    }
    /**
     * @return scale name for a given channel after the scale has been parsed and named.
     */ scaleName(originalScaleName, parse) {
        if (parse) // During the parse phase always return a value
        // No need to refer to rename map because a scale can't be renamed
        // before it has the original name.
        return this.getName(originalScaleName);
        // If there is a scale for the channel, it should either
        // be in the scale component or exist in the name map
        if (// If there is a scale for the channel, there should be a local scale component for it
        (0, $fWfT0.isChannel)(originalScaleName) && (0, $fWfT0.isScaleChannel)(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)
        this.scaleNameMap.has(this.getName(originalScaleName))) return this.scaleNameMap.get(this.getName(originalScaleName));
        return undefined;
    }
    /**
     * @return projection name after the projection has been parsed and named.
     */ projectionName(parse) {
        if (parse) // During the parse phase always return a value
        // No need to refer to rename map because a projection can't be renamed
        // before it has the original name.
        return this.getName("projection");
        if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName("projection"))) return this.projectionNameMap.get(this.getName("projection"));
        return undefined;
    }
    /**
     * Traverse a model's hierarchy to get the scale component for a particular channel.
     */ getScaleComponent(channel) {
        /* istanbul ignore next: This is warning for debugging test */ if (!this.component.scales) throw new Error("getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().");
        const localScaleComponent = this.component.scales[channel];
        if (localScaleComponent && !localScaleComponent.merged) return localScaleComponent;
        return this.parent ? this.parent.getScaleComponent(channel) : undefined;
    }
    /**
     * Traverse a model's hierarchy to get a particular selection component.
     */ getSelectionComponent(variableName, origName) {
        let sel = this.component.selection[variableName];
        if (!sel && this.parent) sel = this.parent.getSelectionComponent(variableName, origName);
        if (!sel) throw new Error($bHNid.selectionNotFound(origName));
        return sel;
    }
    /**
     * Returns true if the model has a signalRef for an axis orient.
     */ hasAxisOrientSignalRef() {
        var _a, _b;
        return ((_a = this.component.axes.x) === null || _a === void 0 ? void 0 : _a.some((a)=>a.hasOrientSignalRef())) || ((_b = this.component.axes.y) === null || _b === void 0 ? void 0 : _b.some((a)=>a.hasOrientSignalRef()));
    }
}
class $e1333a792aa591cd$export$d87ddc34337be94d extends $e1333a792aa591cd$export$a1edc412be3e1841 {
    /** Get "field" reference for Vega */ vgField(channel, opt = {}) {
        const fieldDef = this.fieldDef(channel);
        if (!fieldDef) return undefined;
        return (0, $2hAmp.vgField)(fieldDef, opt);
    }
    reduceFieldDef(f, init) {
        return (0, $8eU8A.reduce)(this.getMapping(), (acc, cd, c)=>{
            const fieldDef = (0, $2hAmp.getFieldDef)(cd);
            if (fieldDef) return f(acc, fieldDef, c);
            return acc;
        }, init);
    }
    forEachFieldDef(f, t) {
        (0, $8eU8A.forEach)(this.getMapping(), (cd, c)=>{
            const fieldDef = (0, $2hAmp.getFieldDef)(cd);
            if (fieldDef) f(fieldDef, c);
        }, t);
    }
}

});
parcelRegister("dCse2", function(module, exports) {

$parcel$export(module.exports, "assembleAxis", () => $9ea4b7f72cc38de3$export$85e61b9f2486a87f);
$parcel$export(module.exports, "assembleAxisSignals", () => $9ea4b7f72cc38de3$export$88365eafb52b0b56);
$parcel$export(module.exports, "assembleAxes", () => $9ea4b7f72cc38de3$export$a3af687e2706ddcb);

var $2bi3s = parcelRequire("2bi3s");

var $lUV6x = parcelRequire("lUV6x");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $ahFi3 = parcelRequire("ahFi3");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $in3G6 = parcelRequire("in3G6");
var $9ea4b7f72cc38de3$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $9ea4b7f72cc38de3$var$assembleTitle(title, config) {
    if (!title) return undefined;
    if ((0, $2bi3s.isArray)(title) && !(0, $ahFi3.isText)(title)) return title.map((fieldDef)=>(0, $2hAmp.defaultTitle)(fieldDef, config)).join(", ");
    return title;
}
function $9ea4b7f72cc38de3$var$setAxisEncode(axis, part, vgProp, vgRef) {
    var _a, _b, _c;
    axis.encode = (_a = axis.encode) !== null && _a !== void 0 ? _a : {};
    axis.encode[part] = (_b = axis.encode[part]) !== null && _b !== void 0 ? _b : {};
    axis.encode[part].update = (_c = axis.encode[part].update) !== null && _c !== void 0 ? _c : {};
    // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291
    axis.encode[part].update[vgProp] = vgRef;
}
function $9ea4b7f72cc38de3$export$85e61b9f2486a87f(axisCmpt, kind, config, opt = {
    header: false
}) {
    var _a, _b;
    const _c = axisCmpt.combine(), { disable: disable, orient: orient, scale: scale, labelExpr: labelExpr, title: title, zindex: zindex } = _c, axis = $9ea4b7f72cc38de3$var$__rest(_c, [
        "disable",
        "orient",
        "scale",
        "labelExpr",
        "title",
        "zindex"
    ]);
    if (disable) return undefined;
    for(const prop in axis){
        const propType = (0, $lUV6x.AXIS_PROPERTY_TYPE)[prop];
        const propValue = axis[prop];
        if (propType && propType !== kind && propType !== "both") // Remove properties that are not valid for this kind of axis
        delete axis[prop];
        else if ((0, $lUV6x.isConditionalAxisValue)(propValue)) {
            // deal with conditional axis value
            const { condition: condition } = propValue, valueOrSignalRef = $9ea4b7f72cc38de3$var$__rest(propValue, [
                "condition"
            ]);
            const conditions = (0, $2bi3s.array)(condition);
            const propIndex = (0, $lUV6x.CONDITIONAL_AXIS_PROP_INDEX)[prop];
            if (propIndex) {
                const { vgProp: vgProp, part: part } = propIndex;
                // If there is a corresponding Vega property for the channel,
                // use Vega's custom axis encoding and delete the original axis property to avoid conflicts
                const vgRef = [
                    ...conditions.map((c)=>{
                        const { test: test } = c, valueOrSignalCRef = $9ea4b7f72cc38de3$var$__rest(c, [
                            "test"
                        ]);
                        return Object.assign({
                            test: (0, $in3G6.expression)(null, test)
                        }, valueOrSignalCRef);
                    }),
                    valueOrSignalRef
                ];
                $9ea4b7f72cc38de3$var$setAxisEncode(axis, part, vgProp, vgRef);
                delete axis[prop];
            } else if (propIndex === null) {
                // If propIndex is null, this means we support conditional axis property by converting the condition to signal instead.
                const signalRef = {
                    signal: conditions.map((c)=>{
                        const { test: test } = c, valueOrSignalCRef = $9ea4b7f72cc38de3$var$__rest(c, [
                            "test"
                        ]);
                        return `${(0, $in3G6.expression)(null, test)} ? ${(0, $9ulW1.exprFromValueOrSignalRef)(valueOrSignalCRef)} : `;
                    }).join("") + (0, $9ulW1.exprFromValueOrSignalRef)(valueOrSignalRef)
                };
                axis[prop] = signalRef;
            }
        } else if ((0, $4xdf1.isSignalRef)(propValue)) {
            const propIndex = (0, $lUV6x.CONDITIONAL_AXIS_PROP_INDEX)[prop];
            if (propIndex) {
                const { vgProp: vgProp, part: part } = propIndex;
                $9ea4b7f72cc38de3$var$setAxisEncode(axis, part, vgProp, propValue);
                delete axis[prop];
            } // else do nothing since the property already supports signal
        }
    }
    if (kind === "grid") {
        if (!axis.grid) return undefined;
        // Remove unnecessary encode block
        if (axis.encode) {
            // Only need to keep encode block for grid
            const { grid: grid } = axis.encode;
            axis.encode = Object.assign({}, grid ? {
                grid: grid
            } : {});
            if ((0, $7k4G6.isEmpty)(axis.encode)) delete axis.encode;
        }
        return Object.assign(Object.assign({
            scale: scale,
            orient: orient
        }, axis), {
            domain: false,
            labels: false,
            aria: false,
            // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`
            // would not affect gridAxis
            maxExtent: 0,
            minExtent: 0,
            ticks: false,
            zindex: (0, $7k4G6.getFirstDefined)(zindex, 0) // put grid behind marks by default
        });
    } else {
        // kind === 'main'
        if (!opt.header && axisCmpt.mainExtracted) // if mainExtracted has been extracted to a separate facet
        return undefined;
        if (labelExpr !== undefined) {
            let expr = labelExpr;
            if (((_b = (_a = axis.encode) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b.update) && (0, $4xdf1.isSignalRef)(axis.encode.labels.update.text)) expr = (0, $7k4G6.replaceAll)(labelExpr, "datum.label", axis.encode.labels.update.text.signal);
            $9ea4b7f72cc38de3$var$setAxisEncode(axis, "labels", "text", {
                signal: expr
            });
        }
        if (axis.labelAlign === null) delete axis.labelAlign;
        // Remove unnecessary encode block
        if (axis.encode) {
            for (const part of (0, $lUV6x.AXIS_PARTS))if (!axisCmpt.hasAxisPart(part)) delete axis.encode[part];
            if ((0, $7k4G6.isEmpty)(axis.encode)) delete axis.encode;
        }
        const titleString = $9ea4b7f72cc38de3$var$assembleTitle(title, config);
        return Object.assign(Object.assign(Object.assign(Object.assign({
            scale: scale,
            orient: orient,
            grid: false
        }, titleString ? {
            title: titleString
        } : {}), axis), config.aria === false ? {
            aria: false
        } : {}), {
            zindex: (0, $7k4G6.getFirstDefined)(zindex, 0) // put axis line above marks by default
        });
    }
}
function $9ea4b7f72cc38de3$export$88365eafb52b0b56(model) {
    const { axes: axes } = model.component;
    const signals = [];
    for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS))if (axes[channel]) {
        for (const axis of axes[channel])if (!axis.get("disable") && !axis.get("gridScale")) {
            // If there is x-axis but no y-scale for gridScale, need to set height/width so x-axis can draw the grid with the right height. Same for y-axis and width.
            const sizeType = channel === "x" ? "height" : "width";
            const update = model.getSizeSignalRef(sizeType).signal;
            if (sizeType !== update) signals.push({
                name: sizeType,
                update: update
            });
        }
    }
    return signals;
}
function $9ea4b7f72cc38de3$export$a3af687e2706ddcb(axisComponents, config) {
    const { x: x = [], y: y = [] } = axisComponents;
    return [
        ...x.map((a)=>$9ea4b7f72cc38de3$export$85e61b9f2486a87f(a, "grid", config)),
        ...y.map((a)=>$9ea4b7f72cc38de3$export$85e61b9f2486a87f(a, "grid", config)),
        ...x.map((a)=>$9ea4b7f72cc38de3$export$85e61b9f2486a87f(a, "main", config)),
        ...y.map((a)=>$9ea4b7f72cc38de3$export$85e61b9f2486a87f(a, "main", config))
    ].filter((a)=>a); // filter undefined
}

});
parcelRegister("in3G6", function(module, exports) {

$parcel$export(module.exports, "expression", () => $d5fd3a57a5600e31$export$743d82c2fd345b72);

var $2bi3s = parcelRequire("2bi3s");

var $6EUuI = parcelRequire("6EUuI");

var $7k4G6 = parcelRequire("7k4G6");

var $dNHyS = parcelRequire("dNHyS");
function $d5fd3a57a5600e31$export$743d82c2fd345b72(model, filterOp, node) {
    return (0, $7k4G6.logicalExpr)(filterOp, (predicate)=>{
        if ((0, $2bi3s.isString)(predicate)) return predicate;
        else if ((0, $6EUuI.isSelectionPredicate)(predicate)) return (0, $dNHyS.parseSelectionPredicate)(model, predicate.selection, node);
        else // Filter Object
        return (0, $6EUuI.fieldFilterExpression)(predicate);
    });
}

});
parcelRegister("dNHyS", function(module, exports) {

$parcel$export(module.exports, "parseUnitSelection", () => $a0c1a45c4fbac2dc$export$ff1c4ba7cfa59592);
$parcel$export(module.exports, "parseSelectionPredicate", () => $a0c1a45c4fbac2dc$export$3dcf27a14f67e1a6);
$parcel$export(module.exports, "parseSelectionBinExtent", () => $a0c1a45c4fbac2dc$export$166914f9b3da334e);
$parcel$export(module.exports, "materializeSelections", () => $a0c1a45c4fbac2dc$export$abee3a4723e0b11e);

var $bFDDQ = parcelRequire("bFDDQ");

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $3XBQv = parcelRequire("3XBQv");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");

var $hgVkC = parcelRequire("hgVkC");

var $hHAUn = parcelRequire("hHAUn");

var $iK8OT = parcelRequire("iK8OT");
var $a0c1a45c4fbac2dc$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $a0c1a45c4fbac2dc$export$ff1c4ba7cfa59592(model, selDefs) {
    var _a;
    const selCmpts = {};
    const selectionConfig = model.config.selection;
    for (const name of (0, $7k4G6.keys)(selDefs !== null && selDefs !== void 0 ? selDefs : {})){
        const selDef = (0, $7k4G6.duplicate)(selDefs[name]);
        const _b = selectionConfig[selDef.type], { fields: fields, encodings: encodings } = _b, cfg = $a0c1a45c4fbac2dc$var$__rest(_b, [
            "fields",
            "encodings"
        ]); // Project transform applies its defaults.
        // Set default values from config if a property hasn't been specified,
        // or if it is true. E.g., "translate": true should use the default
        // event handlers for translate. However, true may be a valid value for
        // a property (e.g., "nearest": true).
        for(const key in cfg){
            // A selection should contain either `encodings` or `fields`, only use
            // default values for these two values if neither of them is specified.
            if (key === "encodings" && selDef.fields || key === "fields" && selDef.encodings) continue;
            if (key === "mark") selDef[key] = Object.assign(Object.assign({}, cfg[key]), selDef[key]);
            if (selDef[key] === undefined || selDef[key] === true) selDef[key] = (_a = cfg[key]) !== null && _a !== void 0 ? _a : selDef[key];
        }
        const safeName = (0, $7k4G6.varName)(name);
        const selCmpt = selCmpts[safeName] = Object.assign(Object.assign({}, selDef), {
            name: safeName,
            events: (0, $2bi3s.isString)(selDef.on) ? (0, $bFDDQ.selector)(selDef.on, "scope") : (0, $7k4G6.duplicate)(selDef.on)
        });
        (0, $hHAUn.forEachTransform)(selCmpt, (txCompiler)=>{
            if (txCompiler.has(selCmpt) && txCompiler.parse) txCompiler.parse(model, selCmpt, selDef, selDefs[name]);
        });
    }
    return selCmpts;
}
function $a0c1a45c4fbac2dc$export$3dcf27a14f67e1a6(model, selections, dfnode, datum = "datum") {
    const stores = [];
    function expr(name) {
        const vname = (0, $7k4G6.varName)(name);
        const selCmpt = model.getSelectionComponent(vname, name);
        const store = (0, $2bi3s.stringValue)(vname + (0, $Wddys.STORE));
        if (selCmpt.project.timeUnit) {
            const child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;
            const tunode = selCmpt.project.timeUnit.clone();
            if (child.parent) tunode.insertAsParentOf(child);
            else child.parent = tunode;
        }
        if (selCmpt.empty !== "none") stores.push(store);
        return `vlSelectionTest(${store}, ${datum}` + (selCmpt.resolve === "global" ? ")" : `, ${(0, $2bi3s.stringValue)(selCmpt.resolve)})`);
    }
    const predicateStr = (0, $7k4G6.logicalExpr)(selections, expr);
    return (stores.length ? "!(" + stores.map((s)=>`length(data(${s}))`).join(" || ") + ") || " : "") + `(${predicateStr})`;
}
function $a0c1a45c4fbac2dc$export$166914f9b3da334e(selCmpt, extent) {
    const encoding = extent["encoding"];
    let field = extent["field"];
    if (!encoding && !field) {
        field = selCmpt.project.items[0].field;
        if (selCmpt.project.items.length > 1) (0, $3XBQv.warn)('A "field" or "encoding" must be specified when using a selection as a scale domain. ' + `Using "field": ${(0, $2bi3s.stringValue)(field)}.`);
    } else if (encoding && !field) {
        const encodings = selCmpt.project.items.filter((p)=>p.channel === encoding);
        if (!encodings.length || encodings.length > 1) {
            field = selCmpt.project.items[0].field;
            (0, $3XBQv.warn)((!encodings.length ? "No " : "Multiple ") + `matching ${(0, $2bi3s.stringValue)(encoding)} encoding found for selection ${(0, $2bi3s.stringValue)(extent.selection)}. ` + `Using "field": ${(0, $2bi3s.stringValue)(field)}.`);
        } else field = encodings[0].field;
    }
    return `${selCmpt.name}[${(0, $2bi3s.stringValue)(field)}]`;
}
function $a0c1a45c4fbac2dc$export$abee3a4723e0b11e(model, main) {
    (0, $Wddys.forEachSelection)(model, (selCmpt)=>{
        const selection = selCmpt.name;
        const lookupName = model.getName(`lookup_${selection}`);
        model.component.data.outputNodes[lookupName] = selCmpt.materialized = new (0, $71IWl.OutputNode)(new (0, $hgVkC.FilterNode)(main, model, {
            selection: selection
        }), lookupName, (0, $iK8OT.DataSourceType).Lookup, model.component.data.outputNodeRefCounts);
    });
}

});
parcelRegister("bFDDQ", function(module, exports) {

$parcel$export(module.exports, "selector", () => $87f246139d807e1b$export$aea217a45095ce11);
const $87f246139d807e1b$var$VIEW = "view", $87f246139d807e1b$var$LBRACK = "[", $87f246139d807e1b$var$RBRACK = "]", $87f246139d807e1b$var$LBRACE = "{", $87f246139d807e1b$var$RBRACE = "}", $87f246139d807e1b$var$COLON = ":", $87f246139d807e1b$var$COMMA = ",", $87f246139d807e1b$var$NAME = "@", $87f246139d807e1b$var$GT = ">", $87f246139d807e1b$var$ILLEGAL = /[[\]{}]/, $87f246139d807e1b$var$DEFAULT_MARKS = {
    "*": 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
};
let $87f246139d807e1b$var$DEFAULT_SOURCE, $87f246139d807e1b$var$MARKS;
/**
 * Parse an event selector string.
 * Returns an array of event stream definitions.
 */ function $87f246139d807e1b$export$aea217a45095ce11(selector, source, marks) {
    $87f246139d807e1b$var$DEFAULT_SOURCE = source || $87f246139d807e1b$var$VIEW;
    $87f246139d807e1b$var$MARKS = marks || $87f246139d807e1b$var$DEFAULT_MARKS;
    return $87f246139d807e1b$var$parseMerge(selector.trim()).map($87f246139d807e1b$var$parseSelector);
}
function $87f246139d807e1b$var$isMarkType(type) {
    return $87f246139d807e1b$var$MARKS[type];
}
function $87f246139d807e1b$var$find(s, i, endChar, pushChar, popChar) {
    const n = s.length;
    let count = 0, c;
    for(; i < n; ++i){
        c = s[i];
        if (!count && c === endChar) return i;
        else if (popChar && popChar.indexOf(c) >= 0) --count;
        else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
    }
    return i;
}
function $87f246139d807e1b$var$parseMerge(s) {
    const output = [], n = s.length;
    let start = 0, i = 0;
    while(i < n){
        i = $87f246139d807e1b$var$find(s, i, $87f246139d807e1b$var$COMMA, $87f246139d807e1b$var$LBRACK + $87f246139d807e1b$var$LBRACE, $87f246139d807e1b$var$RBRACK + $87f246139d807e1b$var$RBRACE);
        output.push(s.substring(start, i).trim());
        start = ++i;
    }
    if (output.length === 0) throw "Empty event selector: " + s;
    return output;
}
function $87f246139d807e1b$var$parseSelector(s) {
    return s[0] === "[" ? $87f246139d807e1b$var$parseBetween(s) : $87f246139d807e1b$var$parseStream(s);
}
function $87f246139d807e1b$var$parseBetween(s) {
    const n = s.length;
    let i = 1, b;
    i = $87f246139d807e1b$var$find(s, i, $87f246139d807e1b$var$RBRACK, $87f246139d807e1b$var$LBRACK, $87f246139d807e1b$var$RBRACK);
    if (i === n) throw "Empty between selector: " + s;
    b = $87f246139d807e1b$var$parseMerge(s.substring(1, i));
    if (b.length !== 2) throw "Between selector must have two elements: " + s;
    s = s.slice(i + 1).trim();
    if (s[0] !== $87f246139d807e1b$var$GT) throw "Expected '>' after between selector: " + s;
    b = b.map($87f246139d807e1b$var$parseSelector);
    const stream = $87f246139d807e1b$var$parseSelector(s.slice(1).trim());
    if (stream.between) return {
        between: b,
        stream: stream
    };
    else stream.between = b;
    return stream;
}
function $87f246139d807e1b$var$parseStream(s) {
    const stream = {
        source: $87f246139d807e1b$var$DEFAULT_SOURCE
    }, source = [];
    let throttle = [
        0,
        0
    ], markname = 0, start = 0, n = s.length, i = 0, j, filter; // extract throttle from end
    if (s[n - 1] === $87f246139d807e1b$var$RBRACE) {
        i = s.lastIndexOf($87f246139d807e1b$var$LBRACE);
        if (i >= 0) {
            try {
                throttle = $87f246139d807e1b$var$parseThrottle(s.substring(i + 1, n - 1));
            } catch (e) {
                throw "Invalid throttle specification: " + s;
            }
            s = s.slice(0, i).trim();
            n = s.length;
        } else throw "Unmatched right brace: " + s;
        i = 0;
    }
    if (!n) throw s; // set name flag based on first char
    if (s[0] === $87f246139d807e1b$var$NAME) markname = ++i; // extract first part of multi-part stream selector
    j = $87f246139d807e1b$var$find(s, i, $87f246139d807e1b$var$COLON);
    if (j < n) {
        source.push(s.substring(start, j).trim());
        start = i = ++j;
    } // extract remaining part of stream selector
    i = $87f246139d807e1b$var$find(s, i, $87f246139d807e1b$var$LBRACK);
    if (i === n) source.push(s.substring(start, n).trim());
    else {
        source.push(s.substring(start, i).trim());
        filter = [];
        start = ++i;
        if (start === n) throw "Unmatched left bracket: " + s;
    } // extract filters
    while(i < n){
        i = $87f246139d807e1b$var$find(s, i, $87f246139d807e1b$var$RBRACK);
        if (i === n) throw "Unmatched left bracket: " + s;
        filter.push(s.substring(start, i).trim());
        if (i < n - 1 && s[++i] !== $87f246139d807e1b$var$LBRACK) throw "Expected left bracket: " + s;
        start = ++i;
    } // marshall event stream specification
    if (!(n = source.length) || $87f246139d807e1b$var$ILLEGAL.test(source[n - 1])) throw "Invalid event selector: " + s;
    if (n > 1) {
        stream.type = source[1];
        if (markname) stream.markname = source[0].slice(1);
        else if ($87f246139d807e1b$var$isMarkType(source[0])) stream.marktype = source[0];
        else stream.source = source[0];
    } else stream.type = source[0];
    if (stream.type.slice(-1) === "!") {
        stream.consume = true;
        stream.type = stream.type.slice(0, -1);
    }
    if (filter != null) stream.filter = filter;
    if (throttle[0]) stream.throttle = throttle[0];
    if (throttle[1]) stream.debounce = throttle[1];
    return stream;
}
function $87f246139d807e1b$var$parseThrottle(s) {
    const a = s.split($87f246139d807e1b$var$COMMA);
    if (!s.length || a.length > 2) throw s;
    return a.map((_)=>{
        const x = +_;
        if (x !== x) throw s;
        return x;
    });
}

});

parcelRegister("Wddys", function(module, exports) {

$parcel$export(module.exports, "STORE", () => $0aefaba3b51e1a3f$export$530776c2ce1cbec2);
$parcel$export(module.exports, "TUPLE", () => $0aefaba3b51e1a3f$export$6dc052180ce7965c);
$parcel$export(module.exports, "MODIFY", () => $0aefaba3b51e1a3f$export$c6b4bf0fc1976daf);
$parcel$export(module.exports, "VL_SELECTION_RESOLVE", () => $0aefaba3b51e1a3f$export$b14cf82d57fc22c3);
$parcel$export(module.exports, "forEachSelection", () => $0aefaba3b51e1a3f$export$199335b5a2895624);
$parcel$export(module.exports, "unitName", () => $0aefaba3b51e1a3f$export$49521abcae12cfa);
$parcel$export(module.exports, "requiresSelectionId", () => $0aefaba3b51e1a3f$export$2a228a0e782c88bd);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2zU89 = parcelRequire("2zU89");

var $7k4G6 = parcelRequire("7k4G6");

var $jkJyY = parcelRequire("jkJyY");

var $7LjUF = parcelRequire("7LjUF");

var $fR44M = parcelRequire("fR44M");

var $6Qsjr = parcelRequire("6Qsjr");
const $0aefaba3b51e1a3f$export$530776c2ce1cbec2 = "_store";
const $0aefaba3b51e1a3f$export$6dc052180ce7965c = "_tuple";
const $0aefaba3b51e1a3f$export$c6b4bf0fc1976daf = "_modify";
const $0aefaba3b51e1a3f$export$be06f07d752740cd = "_selection_domain_";
const $0aefaba3b51e1a3f$export$b14cf82d57fc22c3 = "vlSelectionResolve";
const $0aefaba3b51e1a3f$var$compilers = {
    single: $6Qsjr.default,
    multi: $fR44M.default,
    interval: $7LjUF.default
};
function $0aefaba3b51e1a3f$export$199335b5a2895624(model, cb) {
    const selections = model.component.selection;
    if (selections) for (const sel of (0, $7k4G6.vals)(selections)){
        const success = cb(sel, $0aefaba3b51e1a3f$var$compilers[sel.type]);
        if (success === true) break;
    }
}
function $0aefaba3b51e1a3f$var$getFacetModel(model) {
    let parent = model.parent;
    while(parent){
        if ((0, $jkJyY.isFacetModel)(parent)) break;
        parent = parent.parent;
    }
    return parent;
}
function $0aefaba3b51e1a3f$export$49521abcae12cfa(model, { escape: escape } = {
    escape: true
}) {
    let name = escape ? (0, $2bi3s.stringValue)(model.name) : model.name;
    const facetModel = $0aefaba3b51e1a3f$var$getFacetModel(model);
    if (facetModel) {
        const { facet: facet } = facetModel;
        for (const channel of (0, $fWfT0.FACET_CHANNELS))if (facet[channel]) name += ` + '__facet_${channel}_' + (facet[${(0, $2bi3s.stringValue)(facetModel.vgField(channel))}])`;
    }
    return name;
}
function $0aefaba3b51e1a3f$export$2a228a0e782c88bd(model) {
    let identifier = false;
    $0aefaba3b51e1a3f$export$199335b5a2895624(model, (selCmpt)=>{
        identifier = identifier || selCmpt.project.items.some((proj)=>proj.field === (0, $2zU89.SELECTION_ID));
    });
    return identifier;
}

});
parcelRegister("7LjUF", function(module, exports) {

$parcel$export(module.exports, "BRUSH", () => $5a6c5e7b1ad89b41$export$20644b0b257a8c5a);
$parcel$export(module.exports, "default", () => $5a6c5e7b1ad89b41$export$2e2bcd8739ae039);

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $fWfT0 = parcelRequire("fWfT0");

var $3XBQv = parcelRequire("3XBQv");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $ls1My = parcelRequire("ls1My");

var $hsVt4 = parcelRequire("hsVt4");

var $giuv5 = parcelRequire("giuv5");
var $5a6c5e7b1ad89b41$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $5a6c5e7b1ad89b41$export$20644b0b257a8c5a = "_brush";
const $5a6c5e7b1ad89b41$export$270fbac12e49e39 = "_scale_trigger";
const $5a6c5e7b1ad89b41$var$interval = {
    signals: (model, selCmpt)=>{
        const name = selCmpt.name;
        const fieldsSg = name + (0, $hsVt4.TUPLE_FIELDS);
        const hasScales = (0, $giuv5.default).has(selCmpt);
        const signals = [];
        const dataSignals = [];
        const scaleTriggers = [];
        if (selCmpt.translate && !hasScales) {
            const filterExpr = `!event.item || event.item.mark.name !== ${(0, $2bi3s.stringValue)(name + $5a6c5e7b1ad89b41$export$20644b0b257a8c5a)}`;
            $5a6c5e7b1ad89b41$var$events(selCmpt, (on, evt)=>{
                var _a;
                const filters = (0, $2bi3s.array)((_a = evt.between[0].filter) !== null && _a !== void 0 ? _a : evt.between[0].filter = []);
                if (filters.indexOf(filterExpr) < 0) filters.push(filterExpr);
                return on;
            });
        }
        selCmpt.project.items.forEach((proj, i)=>{
            const channel = proj.channel;
            if (channel !== (0, $fWfT0.X) && channel !== (0, $fWfT0.Y)) {
                (0, $3XBQv.warn)("Interval selections only support x and y encoding channels.");
                return;
            }
            const init = selCmpt.init ? selCmpt.init[i] : null;
            const cs = $5a6c5e7b1ad89b41$var$channelSignals(model, selCmpt, proj, init);
            const dname = proj.signals.data;
            const vname = proj.signals.visual;
            const scaleName = (0, $2bi3s.stringValue)(model.scaleName(channel));
            const scaleType = model.getScaleComponent(channel).get("type");
            const toNum = (0, $9rekY.hasContinuousDomain)(scaleType) ? "+" : "";
            signals.push(...cs);
            dataSignals.push(dname);
            scaleTriggers.push({
                scaleName: model.scaleName(channel),
                expr: `(!isArray(${dname}) || ` + `(${toNum}invert(${scaleName}, ${vname})[0] === ${toNum}${dname}[0] && ` + `${toNum}invert(${scaleName}, ${vname})[1] === ${toNum}${dname}[1]))`
            });
        });
        // Proxy scale reactions to ensure that an infinite loop doesn't occur
        // when an interval selection filter touches the scale.
        if (!hasScales) signals.push({
            name: name + $5a6c5e7b1ad89b41$export$270fbac12e49e39,
            value: {},
            on: [
                {
                    events: scaleTriggers.map((t)=>({
                            scale: t.scaleName
                        })),
                    update: scaleTriggers.map((t)=>t.expr).join(" && ") + ` ? ${name + $5a6c5e7b1ad89b41$export$270fbac12e49e39} : {}`
                }
            ]
        });
        // Only add an interval to the store if it has valid data extents. Data extents
        // are set to null if pixel extents are equal to account for intervals over
        // ordinal/nominal domains which, when inverted, will still produce a valid datum.
        const init = selCmpt.init;
        const update = `unit: ${(0, $Wddys.unitName)(model)}, fields: ${fieldsSg}, values`;
        return signals.concat(Object.assign(Object.assign({
            name: name + (0, $Wddys.TUPLE)
        }, init ? {
            init: `{${update}: ${(0, $ls1My.assembleInit)(init)}}`
        } : {}), {
            on: [
                {
                    events: [
                        {
                            signal: dataSignals.join(" || ")
                        }
                    ],
                    update: dataSignals.join(" && ") + ` ? {${update}: [${dataSignals}]} : null`
                }
            ]
        }));
    },
    modifyExpr: (model, selCmpt)=>{
        const tpl = selCmpt.name + (0, $Wddys.TUPLE);
        return tpl + ", " + (selCmpt.resolve === "global" ? "true" : `{unit: ${(0, $Wddys.unitName)(model)}}`);
    },
    marks: (model, selCmpt, marks)=>{
        const name = selCmpt.name;
        const { x: x, y: y } = selCmpt.project.hasChannel;
        const xvname = x && x.signals.visual;
        const yvname = y && y.signals.visual;
        const store = `data(${(0, $2bi3s.stringValue)(selCmpt.name + (0, $Wddys.STORE))})`;
        // Do not add a brush if we're binding to scales.
        if ((0, $giuv5.default).has(selCmpt)) return marks;
        const update = {
            x: x !== undefined ? {
                signal: `${xvname}[0]`
            } : {
                value: 0
            },
            y: y !== undefined ? {
                signal: `${yvname}[0]`
            } : {
                value: 0
            },
            x2: x !== undefined ? {
                signal: `${xvname}[1]`
            } : {
                field: {
                    group: "width"
                }
            },
            y2: y !== undefined ? {
                signal: `${yvname}[1]`
            } : {
                field: {
                    group: "height"
                }
            }
        };
        // If the selection is resolved to global, only a single interval is in
        // the store. Wrap brush mark's encodings with a production rule to test
        // this based on the `unit` property. Hide the brush mark if it corresponds
        // to a unit different from the one in the store.
        if (selCmpt.resolve === "global") for (const key of (0, $7k4G6.keys)(update))update[key] = [
            Object.assign({
                test: `${store}.length && ${store}[0].unit === ${(0, $Wddys.unitName)(model)}`
            }, update[key]),
            {
                value: 0
            }
        ];
        // Two brush marks ensure that fill colors and other aesthetic choices do
        // not interefere with the core marks, but that the brushed region can still
        // be interacted with (e.g., dragging it around).
        const _a = selCmpt.mark, { fill: fill, fillOpacity: fillOpacity, cursor: cursor } = _a, stroke = $5a6c5e7b1ad89b41$var$__rest(_a, [
            "fill",
            "fillOpacity",
            "cursor"
        ]);
        const vgStroke = (0, $7k4G6.keys)(stroke).reduce((def, k)=>{
            def[k] = [
                {
                    test: [
                        x !== undefined && `${xvname}[0] !== ${xvname}[1]`,
                        y !== undefined && `${yvname}[0] !== ${yvname}[1]`
                    ].filter((t)=>t).join(" && "),
                    value: stroke[k]
                },
                {
                    value: null
                }
            ];
            return def;
        }, {});
        return [
            {
                name: name + $5a6c5e7b1ad89b41$export$20644b0b257a8c5a + "_bg",
                type: "rect",
                clip: true,
                encode: {
                    enter: {
                        fill: {
                            value: fill
                        },
                        fillOpacity: {
                            value: fillOpacity
                        }
                    },
                    update: update
                }
            },
            ...marks,
            {
                name: name + $5a6c5e7b1ad89b41$export$20644b0b257a8c5a,
                type: "rect",
                clip: true,
                encode: {
                    enter: Object.assign(Object.assign({}, cursor ? {
                        cursor: {
                            value: cursor
                        }
                    } : {}), {
                        fill: {
                            value: "transparent"
                        }
                    }),
                    update: Object.assign(Object.assign({}, update), vgStroke)
                }
            }
        ];
    }
};
var $5a6c5e7b1ad89b41$export$2e2bcd8739ae039 = $5a6c5e7b1ad89b41$var$interval;
/**
 * Returns the visual and data signals for an interval selection.
 */ function $5a6c5e7b1ad89b41$var$channelSignals(model, selCmpt, proj, init) {
    const channel = proj.channel;
    const vname = proj.signals.visual;
    const dname = proj.signals.data;
    const hasScales = (0, $giuv5.default).has(selCmpt);
    const scaleName = (0, $2bi3s.stringValue)(model.scaleName(channel));
    const scale = model.getScaleComponent(channel);
    const scaleType = scale ? scale.get("type") : undefined;
    const scaled = (str)=>`scale(${scaleName}, ${str})`;
    const size = model.getSizeSignalRef(channel === (0, $fWfT0.X) ? "width" : "height").signal;
    const coord = `${channel}(unit)`;
    const on = $5a6c5e7b1ad89b41$var$events(selCmpt, (def, evt)=>{
        return [
            ...def,
            {
                events: evt.between[0],
                update: `[${coord}, ${coord}]`
            },
            {
                events: evt,
                update: `[${vname}[0], clamp(${coord}, 0, ${size})]`
            } // Brush End
        ];
    });
    // React to pan/zooms of continuous scales. Non-continuous scales
    // (band, point) cannot be pan/zoomed and any other changes
    // to their domains (e.g., filtering) should clear the brushes.
    on.push({
        events: {
            signal: selCmpt.name + $5a6c5e7b1ad89b41$export$270fbac12e49e39
        },
        update: (0, $9rekY.hasContinuousDomain)(scaleType) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`
    });
    return hasScales ? [
        {
            name: dname,
            on: []
        }
    ] : [
        Object.assign(Object.assign({
            name: vname
        }, init ? {
            init: (0, $ls1My.assembleInit)(init, true, scaled)
        } : {
            value: []
        }), {
            on: on
        }),
        Object.assign(Object.assign({
            name: dname
        }, init ? {
            init: (0, $ls1My.assembleInit)(init)
        } : {}), {
            on: [
                {
                    events: {
                        signal: vname
                    },
                    update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`
                }
            ]
        })
    ];
}
function $5a6c5e7b1ad89b41$var$events(selCmpt, cb) {
    return selCmpt.events.reduce((on, evt)=>{
        if (!evt.between) {
            (0, $3XBQv.warn)(`${evt} is not an ordered event stream for interval selections.`);
            return on;
        }
        return cb(on, evt);
    }, []);
}

});
parcelRegister("ls1My", function(module, exports) {

$parcel$export(module.exports, "assembleInit", () => $f9dd98695dec4986$export$f4a1327dd4ba3f93);
$parcel$export(module.exports, "assembleUnitSelectionSignals", () => $f9dd98695dec4986$export$f664aff836c9e636);
$parcel$export(module.exports, "assembleFacetSignals", () => $f9dd98695dec4986$export$32796ec9c060c305);
$parcel$export(module.exports, "assembleTopLevelSignals", () => $f9dd98695dec4986$export$cb70d52914c1902f);
$parcel$export(module.exports, "assembleUnitSelectionData", () => $f9dd98695dec4986$export$193ca019051a9cfc);
$parcel$export(module.exports, "assembleUnitSelectionMarks", () => $f9dd98695dec4986$export$ad35a651fe5d8b6);
$parcel$export(module.exports, "assembleLayerSelectionMarks", () => $f9dd98695dec4986$export$68321ad9cb4603c5);
$parcel$export(module.exports, "assembleSelectionScaleDomain", () => $f9dd98695dec4986$export$1be254dcdb90f9b3);

var $bFDDQ = parcelRequire("bFDDQ");

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $8PxNP = parcelRequire("8PxNP");

var $7k4G6 = parcelRequire("7k4G6");

var $jkJyY = parcelRequire("jkJyY");

var $hHAUn = parcelRequire("hHAUn");

var $dNHyS = parcelRequire("dNHyS");
var $f9dd98695dec4986$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $f9dd98695dec4986$export$f4a1327dd4ba3f93(init, isExpr = true, wrap = (0, $2bi3s.identity)) {
    if ((0, $2bi3s.isArray)(init)) {
        const assembled = init.map((v)=>$f9dd98695dec4986$export$f4a1327dd4ba3f93(v, isExpr, wrap));
        return isExpr ? `[${assembled.join(", ")}]` : assembled;
    } else if ((0, $8PxNP.isDateTime)(init)) {
        if (isExpr) return wrap((0, $8PxNP.dateTimeToExpr)(init));
        else return wrap((0, $8PxNP.dateTimeToTimestamp)(init));
    }
    return isExpr ? wrap(JSON.stringify(init)) : init;
}
function $f9dd98695dec4986$export$f664aff836c9e636(model, signals) {
    (0, $Wddys.forEachSelection)(model, (selCmpt, selCompiler)=>{
        const name = selCmpt.name;
        let modifyExpr = selCompiler.modifyExpr(model, selCmpt);
        signals.push(...selCompiler.signals(model, selCmpt));
        (0, $hHAUn.forEachTransform)(selCmpt, (txCompiler)=>{
            if (txCompiler.signals) signals = txCompiler.signals(model, selCmpt, signals);
            if (txCompiler.modifyExpr) modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
        });
        signals.push({
            name: name + (0, $Wddys.MODIFY),
            on: [
                {
                    events: {
                        signal: selCmpt.name + (0, $Wddys.TUPLE)
                    },
                    update: `modify(${(0, $2bi3s.stringValue)(selCmpt.name + (0, $Wddys.STORE))}, ${modifyExpr})`
                }
            ]
        });
    });
    return $f9dd98695dec4986$var$cleanupEmptyOnArray(signals);
}
function $f9dd98695dec4986$export$32796ec9c060c305(model, signals) {
    if (model.component.selection && (0, $7k4G6.keys)(model.component.selection).length) {
        const name = (0, $2bi3s.stringValue)(model.getName("cell"));
        signals.unshift({
            name: "facet",
            value: {},
            on: [
                {
                    events: (0, $bFDDQ.selector)("mousemove", "scope"),
                    update: `isTuple(facet) ? facet : group(${name}).datum`
                }
            ]
        });
    }
    return $f9dd98695dec4986$var$cleanupEmptyOnArray(signals);
}
function $f9dd98695dec4986$export$cb70d52914c1902f(model, signals) {
    let hasSelections = false;
    (0, $Wddys.forEachSelection)(model, (selCmpt, selCompiler)=>{
        const name = selCmpt.name;
        const store = (0, $2bi3s.stringValue)(name + (0, $Wddys.STORE));
        const hasSg = signals.filter((s)=>s.name === name);
        if (hasSg.length === 0) {
            const resolve = selCmpt.resolve === "global" ? "union" : selCmpt.resolve;
            const isMulti = selCmpt.type === "multi" ? ", true)" : ")";
            signals.push({
                name: selCmpt.name,
                update: `${(0, $Wddys.VL_SELECTION_RESOLVE)}(${store}, ${(0, $2bi3s.stringValue)(resolve)}${isMulti}`
            });
        }
        hasSelections = true;
        if (selCompiler.topLevelSignals) signals = selCompiler.topLevelSignals(model, selCmpt, signals);
        (0, $hHAUn.forEachTransform)(selCmpt, (txCompiler)=>{
            if (txCompiler.topLevelSignals) signals = txCompiler.topLevelSignals(model, selCmpt, signals);
        });
    });
    if (hasSelections) {
        const hasUnit = signals.filter((s)=>s.name === "unit");
        if (hasUnit.length === 0) signals.unshift({
            name: "unit",
            value: {},
            on: [
                {
                    events: "mousemove",
                    update: "isTuple(group()) ? group() : unit"
                }
            ]
        });
    }
    return $f9dd98695dec4986$var$cleanupEmptyOnArray(signals);
}
function $f9dd98695dec4986$export$193ca019051a9cfc(model, data) {
    const dataCopy = [
        ...data
    ];
    (0, $Wddys.forEachSelection)(model, (selCmpt)=>{
        const init = {
            name: selCmpt.name + (0, $Wddys.STORE)
        };
        if (selCmpt.init) {
            const fields = selCmpt.project.items.map((proj)=>{
                const { signals: signals } = proj, rest = $f9dd98695dec4986$var$__rest(proj, [
                    "signals"
                ]);
                return rest;
            });
            const insert = selCmpt.init.map((i)=>$f9dd98695dec4986$export$f4a1327dd4ba3f93(i, false));
            init.values = selCmpt.type === "interval" ? [
                {
                    unit: (0, $Wddys.unitName)(model, {
                        escape: false
                    }),
                    fields: fields,
                    values: insert
                }
            ] : insert.map((i)=>({
                    unit: (0, $Wddys.unitName)(model, {
                        escape: false
                    }),
                    fields: fields,
                    values: i
                }));
        }
        const contains = dataCopy.filter((d)=>d.name === selCmpt.name + (0, $Wddys.STORE));
        if (!contains.length) dataCopy.push(init);
    });
    return dataCopy;
}
function $f9dd98695dec4986$export$ad35a651fe5d8b6(model, marks) {
    (0, $Wddys.forEachSelection)(model, (selCmpt, selCompiler)=>{
        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
        (0, $hHAUn.forEachTransform)(selCmpt, (txCompiler)=>{
            if (txCompiler.marks) marks = txCompiler.marks(model, selCmpt, marks);
        });
    });
    return marks;
}
function $f9dd98695dec4986$export$68321ad9cb4603c5(model, marks) {
    for (const child of model.children)if ((0, $jkJyY.isUnitModel)(child)) marks = $f9dd98695dec4986$export$ad35a651fe5d8b6(child, marks);
    return marks;
}
function $f9dd98695dec4986$export$1be254dcdb90f9b3(model, extent) {
    const name = extent.selection;
    const selCmpt = model.getSelectionComponent(name, (0, $7k4G6.varName)(name));
    return {
        signal: (0, $dNHyS.parseSelectionBinExtent)(selCmpt, extent)
    };
}
function $f9dd98695dec4986$var$cleanupEmptyOnArray(signals) {
    return signals.map((s)=>{
        if (s.on && !s.on.length) delete s.on;
        return s;
    });
}

});
parcelRegister("hHAUn", function(module, exports) {

$parcel$export(module.exports, "forEachTransform", () => $ce331503eaf00e28$export$16664464d4e2e79d);

var $3j1U5 = parcelRequire("3j1U5");

var $blJUG = parcelRequire("blJUG");

var $bVbuA = parcelRequire("bVbuA");

var $hsVt4 = parcelRequire("hsVt4");

var $giuv5 = parcelRequire("giuv5");

var $eTqRr = parcelRequire("eTqRr");

var $dL6Fh = parcelRequire("dL6Fh");

var $dafT5 = parcelRequire("dafT5");

var $gwz4h = parcelRequire("gwz4h");
const $ce331503eaf00e28$var$compilers = [
    (0, $hsVt4.default),
    (0, $dL6Fh.default),
    (0, $giuv5.default),
    (0, $eTqRr.default),
    (0, $dafT5.default),
    (0, $gwz4h.default),
    (0, $blJUG.default),
    (0, $bVbuA.default),
    (0, $3j1U5.default)
];
function $ce331503eaf00e28$export$16664464d4e2e79d(selCmpt, cb) {
    for (const t of $ce331503eaf00e28$var$compilers)if (t.has(selCmpt)) cb(t);
}

});
parcelRegister("3j1U5", function(module, exports) {

$parcel$export(module.exports, "default", () => $26849f782aed3fd3$export$2e2bcd8739ae039);

var $bFDDQ = parcelRequire("bFDDQ");

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $7k4G6 = parcelRequire("7k4G6");

var $blJUG = parcelRequire("blJUG");

var $dL6Fh = parcelRequire("dL6Fh");
const $26849f782aed3fd3$var$clear = {
    has: (selCmpt)=>{
        return selCmpt.clear !== undefined && selCmpt.clear !== false;
    },
    parse: (model, selCmpt, selDef)=>{
        if (selDef.clear) selCmpt.clear = (0, $2bi3s.isString)(selDef.clear) ? (0, $bFDDQ.selector)(selDef.clear, "scope") : selDef.clear;
    },
    topLevelSignals: (model, selCmpt, signals)=>{
        if ((0, $blJUG.default).has(selCmpt)) for (const proj of selCmpt.project.items){
            const idx = signals.findIndex((n)=>n.name === (0, $7k4G6.varName)(`${selCmpt.name}_${proj.field}`));
            if (idx !== -1) signals[idx].on.push({
                events: selCmpt.clear,
                update: "null"
            });
        }
        return signals;
    },
    signals: (model, selCmpt, signals)=>{
        function addClear(idx, update) {
            if (idx !== -1 && signals[idx].on) signals[idx].on.push({
                events: selCmpt.clear,
                update: update
            });
        }
        // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.
        if (selCmpt.type === "interval") for (const proj of selCmpt.project.items){
            const vIdx = signals.findIndex((n)=>n.name === proj.signals.visual);
            addClear(vIdx, "[0, 0]");
            if (vIdx === -1) {
                const dIdx = signals.findIndex((n)=>n.name === proj.signals.data);
                addClear(dIdx, "null");
            }
        }
        else {
            let tIdx = signals.findIndex((n)=>n.name === selCmpt.name + (0, $Wddys.TUPLE));
            addClear(tIdx, "null");
            if ((0, $dL6Fh.default).has(selCmpt)) {
                tIdx = signals.findIndex((n)=>n.name === selCmpt.name + (0, $dL6Fh.TOGGLE));
                addClear(tIdx, "false");
            }
        }
        return signals;
    }
};
var $26849f782aed3fd3$export$2e2bcd8739ae039 = $26849f782aed3fd3$var$clear;

});
parcelRegister("blJUG", function(module, exports) {

$parcel$export(module.exports, "default", () => $84354543a0f4b705$export$2e2bcd8739ae039);

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $7k4G6 = parcelRequire("7k4G6");

var $ls1My = parcelRequire("ls1My");

var $bVbuA = parcelRequire("bVbuA");

var $hsVt4 = parcelRequire("hsVt4");

var $2zU89 = parcelRequire("2zU89");
const $84354543a0f4b705$var$inputBindings = {
    has: (selCmpt)=>{
        return selCmpt.type === "single" && selCmpt.resolve === "global" && selCmpt.bind && selCmpt.bind !== "scales" && !(0, $2zU89.isLegendBinding)(selCmpt.bind);
    },
    parse: (model, selCmpt, selDef, origDef)=>{
        // Binding a selection to input widgets disables default direct manipulation interaction.
        // A user can choose to re-enable it by explicitly specifying triggering input events.
        if (!origDef.on) delete selCmpt.events;
        if (!origDef.clear) delete selCmpt.clear;
    },
    topLevelSignals: (model, selCmpt, signals)=>{
        const name = selCmpt.name;
        const proj = selCmpt.project;
        const bind = selCmpt.bind;
        const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).
        const datum = (0, $bVbuA.default).has(selCmpt) ? "(item().isVoronoi ? datum.datum : datum)" : "datum";
        proj.items.forEach((p, i)=>{
            var _a, _b;
            const sgname = (0, $7k4G6.varName)(`${name}_${p.field}`);
            const hasSignal = signals.filter((s)=>s.name === sgname);
            if (!hasSignal.length) signals.unshift(Object.assign(Object.assign({
                name: sgname
            }, init ? {
                init: (0, $ls1My.assembleInit)(init[i])
            } : {
                value: null
            }), {
                on: selCmpt.events ? [
                    {
                        events: selCmpt.events,
                        update: `datum && item().mark.marktype !== 'group' ? ${datum}[${(0, $2bi3s.stringValue)(p.field)}] : null`
                    }
                ] : [],
                bind: (_b = (_a = bind[p.field]) !== null && _a !== void 0 ? _a : bind[p.channel]) !== null && _b !== void 0 ? _b : bind
            }));
        });
        return signals;
    },
    signals: (model, selCmpt, signals)=>{
        const name = selCmpt.name;
        const proj = selCmpt.project;
        const signal = signals.filter((s)=>s.name === name + (0, $Wddys.TUPLE))[0];
        const fields = name + (0, $hsVt4.TUPLE_FIELDS);
        const values = proj.items.map((p)=>(0, $7k4G6.varName)(`${name}_${p.field}`));
        const valid = values.map((v)=>`${v} !== null`).join(" && ");
        if (values.length) signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(", ")}]} : null`;
        delete signal.value;
        delete signal.on;
        return signals;
    }
};
var $84354543a0f4b705$export$2e2bcd8739ae039 = $84354543a0f4b705$var$inputBindings;

});
parcelRegister("bVbuA", function(module, exports) {

$parcel$export(module.exports, "default", () => $8addeeb1c0032d36$export$2e2bcd8739ae039);

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9mRLv = parcelRequire("9mRLv");
parcelRequire("6gzdc");
var $fuBoL = parcelRequire("fuBoL");
const $8addeeb1c0032d36$var$VORONOI = "voronoi";
const $8addeeb1c0032d36$var$nearest = {
    has: (selCmpt)=>{
        return selCmpt.type !== "interval" && selCmpt.nearest;
    },
    parse: (model, selCmpt)=>{
        // Scope selection events to the voronoi mark to prevent capturing
        // events that occur on the group mark (https://github.com/vega/vega/issues/2112).
        if (selCmpt.events) for (const s of selCmpt.events)s.markname = model.getName($8addeeb1c0032d36$var$VORONOI);
    },
    marks: (model, selCmpt, marks)=>{
        const { x: x, y: y } = selCmpt.project.hasChannel;
        const markType = model.mark;
        if ((0, $9mRLv.isPathMark)(markType)) {
            $3XBQv.warn($bHNid.nearestNotSupportForContinuous(markType));
            return marks;
        }
        const cellDef = {
            name: model.getName($8addeeb1c0032d36$var$VORONOI),
            type: "path",
            interactive: true,
            from: {
                data: model.getName("marks")
            },
            encode: {
                update: Object.assign({
                    fill: {
                        value: "transparent"
                    },
                    strokeWidth: {
                        value: 0.35
                    },
                    stroke: {
                        value: "transparent"
                    },
                    isVoronoi: {
                        value: true
                    }
                }, (0, $fuBoL.tooltip)(model, {
                    reactiveGeom: true
                }))
            },
            transform: [
                {
                    type: "voronoi",
                    x: {
                        expr: x || !y ? "datum.datum.x || 0" : "0"
                    },
                    y: {
                        expr: y || !x ? "datum.datum.y || 0" : "0"
                    },
                    size: [
                        model.getSizeSignalRef("width"),
                        model.getSizeSignalRef("height")
                    ]
                }
            ]
        };
        let index = 0;
        let exists = false;
        marks.forEach((mark, i)=>{
            var _a;
            const name = (_a = mark.name) !== null && _a !== void 0 ? _a : "";
            if (name === model.component.mark[0].name) index = i;
            else if (name.indexOf($8addeeb1c0032d36$var$VORONOI) >= 0) exists = true;
        });
        if (!exists) marks.splice(index + 1, 0, cellDef);
        return marks;
    }
};
var $8addeeb1c0032d36$export$2e2bcd8739ae039 = $8addeeb1c0032d36$var$nearest;

});
parcelRegister("6gzdc", function(module, exports) {

$parcel$export(module.exports, "baseEncodeEntry", () => (parcelRequire("a8fbs")).baseEncodeEntry);
$parcel$export(module.exports, "color", () => (parcelRequire("blSq9")).color);
$parcel$export(module.exports, "wrapCondition", () => (parcelRequire("4qTOo")).wrapCondition);
$parcel$export(module.exports, "defined", () => (parcelRequire("rytcO")).defined);
$parcel$export(module.exports, "valueIfDefined", () => (parcelRequire("rytcO")).valueIfDefined);
$parcel$export(module.exports, "nonPosition", () => (parcelRequire("1WaxU")).nonPosition);
$parcel$export(module.exports, "pointPosition", () => (parcelRequire("e5Unf")).pointPosition);
$parcel$export(module.exports, "pointOrRangePosition", () => (parcelRequire("StYuR")).pointOrRangePosition);
$parcel$export(module.exports, "rectPosition", () => (parcelRequire("8i09u")).rectPosition);
$parcel$export(module.exports, "text", () => (parcelRequire("j0sD1")).text);
$parcel$export(module.exports, "tooltip", () => (parcelRequire("fuBoL")).tooltip);

var $a8fbs = parcelRequire("a8fbs");

var $blSq9 = parcelRequire("blSq9");

var $4qTOo = parcelRequire("4qTOo");

var $rytcO = parcelRequire("rytcO");

var $1WaxU = parcelRequire("1WaxU");

var $e5Unf = parcelRequire("e5Unf");

var $StYuR = parcelRequire("StYuR");

var $8i09u = parcelRequire("8i09u");

var $j0sD1 = parcelRequire("j0sD1");

var $fuBoL = parcelRequire("fuBoL");

var $3YEGf = parcelRequire("3YEGf");

});
parcelRegister("a8fbs", function(module, exports) {

$parcel$export(module.exports, "baseEncodeEntry", () => $76066df0d78dd432$export$e8c4fb713f54ad0);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $9mRLv = parcelRequire("9mRLv");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $3YEGf = parcelRequire("3YEGf");

var $blSq9 = parcelRequire("blSq9");

var $1WaxU = parcelRequire("1WaxU");

var $j0sD1 = parcelRequire("j0sD1");

var $fuBoL = parcelRequire("fuBoL");

var $gx1vn = parcelRequire("gx1vn");

var $2y9Ve = parcelRequire("2y9Ve");

var $4qTOo = parcelRequire("4qTOo");

var $e5Unf = parcelRequire("e5Unf");

var $StYuR = parcelRequire("StYuR");

var $8i09u = parcelRequire("8i09u");
const $76066df0d78dd432$var$ALWAYS_IGNORE = new Set([
    "aria"
]);
function $76066df0d78dd432$export$e8c4fb713f54ad0(model, ignore) {
    const { fill: fill, stroke: stroke } = ignore.color === "include" ? (0, $blSq9.color)(model) : {};
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, $76066df0d78dd432$var$markDefProperties(model.markDef, ignore)), $76066df0d78dd432$var$wrapAllFieldsInvalid(model, "fill", fill)), $76066df0d78dd432$var$wrapAllFieldsInvalid(model, "stroke", stroke)), (0, $1WaxU.nonPosition)("opacity", model)), (0, $1WaxU.nonPosition)("fillOpacity", model)), (0, $1WaxU.nonPosition)("strokeOpacity", model)), (0, $1WaxU.nonPosition)("strokeWidth", model)), (0, $1WaxU.nonPosition)("strokeDash", model)), (0, $2y9Ve.zindex)(model)), (0, $fuBoL.tooltip)(model)), (0, $j0sD1.text)(model, "href")), (0, $3YEGf.aria)(model));
}
// TODO: mark VgValueRef[] as readonly after https://github.com/vega/vega/pull/1987
function $76066df0d78dd432$var$wrapAllFieldsInvalid(model, channel, valueRef) {
    const { config: config, mark: mark, markDef: markDef } = model;
    const invalid = (0, $9ulW1.getMarkPropOrConfig)("invalid", markDef, config);
    if (invalid === "hide" && valueRef && !(0, $9mRLv.isPathMark)(mark)) {
        // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.
        // For path marks, we will use "defined" property and skip these values instead.
        const test = $76066df0d78dd432$var$allFieldsInvalidPredicate(model, {
            invalid: true,
            channels: (0, $fWfT0.SCALE_CHANNELS)
        });
        if (test) return {
            [channel]: [
                // prepend the invalid case
                // TODO: support custom value
                {
                    test: test,
                    value: null
                },
                ...(0, $2bi3s.array)(valueRef)
            ]
        };
    }
    return valueRef ? {
        [channel]: valueRef
    } : {};
}
function $76066df0d78dd432$var$markDefProperties(mark, ignore) {
    return (0, $4xdf1.VG_MARK_CONFIGS).reduce((m, prop)=>{
        if (!$76066df0d78dd432$var$ALWAYS_IGNORE.has(prop) && mark[prop] !== undefined && ignore[prop] !== "ignore") m[prop] = (0, $9ulW1.signalOrValueRef)(mark[prop]);
        return m;
    }, {});
}
function $76066df0d78dd432$var$allFieldsInvalidPredicate(model, { invalid: invalid = false, channels: channels }) {
    const filterIndex = channels.reduce((aggregator, channel)=>{
        const scaleComponent = model.getScaleComponent(channel);
        if (scaleComponent) {
            const scaleType = scaleComponent.get("type");
            const field = model.vgField(channel, {
                expr: "datum"
            });
            // While discrete domain scales can handle invalid values, continuous scales can't.
            if (field && (0, $9rekY.hasContinuousDomain)(scaleType)) aggregator[field] = true;
        }
        return aggregator;
    }, {});
    const fields = (0, $7k4G6.keys)(filterIndex);
    if (fields.length > 0) {
        const op = invalid ? "||" : "&&";
        return fields.map((field)=>(0, $gx1vn.fieldInvalidPredicate)(field, invalid)).join(` ${op} `);
    }
    return undefined;
}

});
parcelRegister("3YEGf", function(module, exports) {

$parcel$export(module.exports, "aria", () => $2e5687f5a576f9ee$export$4d2d26490572750a);

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $4xdf1 = parcelRequire("4xdf1");

var $4qTOo = parcelRequire("4qTOo");

var $j0sD1 = parcelRequire("j0sD1");

var $fuBoL = parcelRequire("fuBoL");
function $2e5687f5a576f9ee$export$4d2d26490572750a(model) {
    const { markDef: markDef, config: config } = model;
    const enableAria = (0, $9ulW1.getMarkPropOrConfig)("aria", markDef, config);
    // We can ignore other aria properties if ariaHidden is true.
    if (enableAria === false) // getMarkGroups sets aria to false already so we don't have to set it in the encode block
    return {};
    return Object.assign(Object.assign(Object.assign({}, enableAria ? {
        aria: enableAria
    } : {}), $2e5687f5a576f9ee$var$ariaRoleDescription(model)), $2e5687f5a576f9ee$export$6d59db4903f20f7d(model));
}
function $2e5687f5a576f9ee$var$ariaRoleDescription(model) {
    const { mark: mark, markDef: markDef, config: config } = model;
    if (config.aria === false) return {};
    const ariaRoleDesc = (0, $9ulW1.getMarkPropOrConfig)("ariaRoleDescription", markDef, config);
    if (ariaRoleDesc != null) return {
        ariaRoleDescription: {
            value: ariaRoleDesc
        }
    };
    return mark in (0, $4xdf1.VG_MARK_INDEX) ? {} : {
        ariaRoleDescription: {
            value: mark
        }
    };
}
function $2e5687f5a576f9ee$export$6d59db4903f20f7d(model) {
    const { encoding: encoding, markDef: markDef, config: config, stack: stack } = model;
    const channelDef = encoding.description;
    if (channelDef) return (0, $4qTOo.wrapCondition)(model, channelDef, "description", (cDef)=>(0, $j0sD1.textRef)(cDef, model.config));
    // Use default from mark def or config if defined.
    // Functions in encode usually just return undefined but since we are defining a default below, we need to check the default here.
    const descriptionValue = (0, $9ulW1.getMarkPropOrConfig)("description", markDef, config);
    if (descriptionValue != null) return {
        description: (0, $9ulW1.signalOrValueRef)(descriptionValue)
    };
    if (config.aria === false) return {};
    const data = (0, $fuBoL.tooltipData)(encoding, stack, config);
    if ((0, $7k4G6.isEmpty)(data)) return undefined;
    return {
        description: {
            signal: (0, $7k4G6.entries)(data).map(([key, value], index)=>`"${index > 0 ? "; " : ""}${key}: " + (${value})`).join(" + ")
        }
    };
}

});
parcelRegister("4qTOo", function(module, exports) {

$parcel$export(module.exports, "wrapCondition", () => $33a4e23089333b61$export$3d5dd6d379ca2b48);

var $2bi3s = parcelRequire("2bi3s");

var $2hAmp = parcelRequire("2hAmp");

var $in3G6 = parcelRequire("in3G6");

var $dNHyS = parcelRequire("dNHyS");
function $33a4e23089333b61$export$3d5dd6d379ca2b48(model, channelDef, vgChannel, refFn) {
    const condition = (0, $2hAmp.isConditionalDef)(channelDef) && channelDef.condition;
    const valueRef = refFn(channelDef);
    if (condition) {
        const conditions = (0, $2bi3s.array)(condition);
        const vgConditions = conditions.map((c)=>{
            const conditionValueRef = refFn(c);
            const test = (0, $2hAmp.isConditionalSelection)(c) ? (0, $dNHyS.parseSelectionPredicate)(model, c.selection) // FIXME: remove casting once TS is no longer dumb about it
             : (0, $in3G6.expression)(model, c.test); // FIXME: remove casting once TS is no longer dumb about it
            return Object.assign({
                test: test
            }, conditionValueRef);
        });
        return {
            [vgChannel]: [
                ...vgConditions,
                ...valueRef !== undefined ? [
                    valueRef
                ] : []
            ]
        };
    } else return valueRef !== undefined ? {
        [vgChannel]: valueRef
    } : {};
}

});

parcelRegister("j0sD1", function(module, exports) {

$parcel$export(module.exports, "text", () => $dd64396e50abedf0$export$6f093cfa640b7166);
$parcel$export(module.exports, "textRef", () => $dd64396e50abedf0$export$6e303d2d913d28d8);

var $2hAmp = parcelRequire("2hAmp");

var $9ulW1 = parcelRequire("9ulW1");

var $7oTmT = parcelRequire("7oTmT");

var $4qTOo = parcelRequire("4qTOo");
function $dd64396e50abedf0$export$6f093cfa640b7166(model, channel = "text") {
    const channelDef = model.encoding[channel];
    return (0, $4qTOo.wrapCondition)(model, channelDef, channel, (cDef)=>$dd64396e50abedf0$export$6e303d2d913d28d8(cDef, model.config));
}
function $dd64396e50abedf0$export$6e303d2d913d28d8(channelDef, config, expr = "datum") {
    // text
    if (channelDef) {
        if ((0, $2hAmp.isValueDef)(channelDef)) return (0, $9ulW1.signalOrValueRef)(channelDef.value);
        if ((0, $2hAmp.isFieldOrDatumDef)(channelDef)) {
            const { format: format, formatType: formatType } = (0, $2hAmp.getFormatMixins)(channelDef);
            return (0, $7oTmT.formatSignalRef)({
                fieldOrDatumDef: channelDef,
                format: format,
                formatType: formatType,
                expr: expr,
                config: config
            });
        }
    }
    return undefined;
}

});

parcelRegister("fuBoL", function(module, exports) {

$parcel$export(module.exports, "tooltip", () => $b476aae70dbaae46$export$4e6f96734dfe12f4);
$parcel$export(module.exports, "tooltipData", () => $b476aae70dbaae46$export$35cead2048b19f2b);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $8eU8A = parcelRequire("8eU8A");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $7oTmT = parcelRequire("7oTmT");

var $4qTOo = parcelRequire("4qTOo");

var $j0sD1 = parcelRequire("j0sD1");
function $b476aae70dbaae46$export$4e6f96734dfe12f4(model, opt = {}) {
    const { encoding: encoding, markDef: markDef, config: config, stack: stack } = model;
    const channelDef = encoding.tooltip;
    if ((0, $2bi3s.isArray)(channelDef)) return {
        tooltip: $b476aae70dbaae46$export$5774c6d23f8314a8({
            tooltip: channelDef
        }, stack, config, opt)
    };
    else {
        const datum = opt.reactiveGeom ? "datum.datum" : "datum";
        return (0, $4qTOo.wrapCondition)(model, channelDef, "tooltip", (cDef)=>{
            // use valueRef based on channelDef first
            const tooltipRefFromChannelDef = (0, $j0sD1.textRef)(cDef, config, datum);
            if (tooltipRefFromChannelDef) return tooltipRefFromChannelDef;
            if (cDef === null) // Allow using encoding.tooltip = null to disable tooltip
            return undefined;
            let markTooltip = (0, $9ulW1.getMarkPropOrConfig)("tooltip", markDef, config);
            if (markTooltip === true) markTooltip = {
                content: "encoding"
            };
            if ((0, $2bi3s.isString)(markTooltip)) return {
                value: markTooltip
            };
            else if ((0, $2bi3s.isObject)(markTooltip)) {
                // `tooltip` is `{fields: 'encodings' | 'fields'}`
                if ((0, $4xdf1.isSignalRef)(markTooltip)) return markTooltip;
                else if (markTooltip.content === "encoding") return $b476aae70dbaae46$export$5774c6d23f8314a8(encoding, stack, config, opt);
                else return {
                    signal: datum
                };
            }
            return undefined;
        });
    }
}
function $b476aae70dbaae46$export$35cead2048b19f2b(encoding, stack, config, { reactiveGeom: reactiveGeom } = {}) {
    const toSkip = {};
    const expr = reactiveGeom ? "datum.datum" : "datum";
    const tuples = [];
    function add(fDef, channel) {
        const mainChannel = (0, $fWfT0.getMainRangeChannel)(channel);
        const fieldDef = (0, $2hAmp.isTypedFieldDef)(fDef) ? fDef : Object.assign(Object.assign({}, fDef), {
            type: encoding[mainChannel].type // for secondary field def, copy type from main channel
        });
        const title = fieldDef.title || (0, $2hAmp.defaultTitle)(fieldDef, config);
        const key = (0, $2bi3s.array)(title).join(", ");
        let value;
        if ((0, $fWfT0.isXorY)(channel)) {
            const channel2 = channel === "x" ? "x2" : "y2";
            const fieldDef2 = (0, $2hAmp.getFieldDef)(encoding[channel2]);
            if ((0, $iR8lA.isBinned)(fieldDef.bin) && fieldDef2) {
                const startField = (0, $2hAmp.vgField)(fieldDef, {
                    expr: expr
                });
                const endField = (0, $2hAmp.vgField)(fieldDef2, {
                    expr: expr
                });
                const { format: format, formatType: formatType } = (0, $2hAmp.getFormatMixins)(fieldDef);
                value = (0, $7oTmT.binFormatExpression)(startField, endField, format, formatType, config);
                toSkip[channel2] = true;
            } else if (stack && stack.fieldChannel === channel && stack.offset === "normalize") {
                const { format: format, formatType: formatType } = (0, $2hAmp.getFormatMixins)(fieldDef);
                value = (0, $7oTmT.formatSignalRef)({
                    fieldOrDatumDef: fieldDef,
                    format: format,
                    formatType: formatType,
                    expr: expr,
                    config: config,
                    normalizeStack: true
                }).signal;
            }
        }
        value = value !== null && value !== void 0 ? value : (0, $j0sD1.textRef)(fieldDef, config, expr).signal;
        tuples.push({
            channel: channel,
            key: key,
            value: value
        });
    }
    (0, $8eU8A.forEach)(encoding, (channelDef, channel)=>{
        if ((0, $2hAmp.isFieldDef)(channelDef)) add(channelDef, channel);
        else if ((0, $2hAmp.hasConditionalFieldDef)(channelDef)) add(channelDef.condition, channel);
    });
    const out = {};
    for (const { channel: channel, key: key, value: value } of tuples)if (!toSkip[channel] && !out[key]) out[key] = value;
    return out;
}
function $b476aae70dbaae46$export$5774c6d23f8314a8(encoding, stack, config, { reactiveGeom: reactiveGeom } = {}) {
    const data = $b476aae70dbaae46$export$35cead2048b19f2b(encoding, stack, config, {
        reactiveGeom: reactiveGeom
    });
    const keyValues = (0, $7k4G6.entries)(data).map(([key, value])=>`"${key}": ${value}`);
    return keyValues.length > 0 ? {
        signal: `{${keyValues.join(", ")}}`
    } : undefined;
}

});


parcelRegister("blSq9", function(module, exports) {

$parcel$export(module.exports, "color", () => $843bdeb4352e26cd$export$35e9368ef982300f);

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $1WaxU = parcelRequire("1WaxU");
function $843bdeb4352e26cd$export$35e9368ef982300f(model, opt = {
    filled: undefined
}) {
    var _a, _b, _c, _d;
    const { markDef: markDef, encoding: encoding, config: config } = model;
    const { type: markType } = markDef;
    // Allow filled to be overridden (for trail's "filled")
    const filled = (_a = opt.filled) !== null && _a !== void 0 ? _a : (0, $9ulW1.getMarkPropOrConfig)("filled", markDef, config);
    const transparentIfNeeded = (0, $7k4G6.contains)([
        "bar",
        "point",
        "circle",
        "square",
        "geoshape"
    ], markType) ? "transparent" : undefined;
    const defaultFill = (_c = (_b = (0, $9ulW1.getMarkPropOrConfig)(filled === true ? "color" : undefined, markDef, config, {
        vgChannel: "fill"
    })) !== null && _b !== void 0 ? _b : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
    config.mark[filled === true && "color"]) !== null && _c !== void 0 ? _c : // If there is no fill, always fill symbols, bar, geoshape
    // with transparent fills https://github.com/vega/vega-lite/issues/1316
    transparentIfNeeded;
    const defaultStroke = (_d = (0, $9ulW1.getMarkPropOrConfig)(filled === false ? "color" : undefined, markDef, config, {
        vgChannel: "stroke"
    })) !== null && _d !== void 0 ? _d : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
    config.mark[filled === false && "color"];
    const colorVgChannel = filled ? "fill" : "stroke";
    const fillStrokeMarkDefAndConfig = Object.assign(Object.assign({}, defaultFill ? {
        fill: (0, $9ulW1.signalOrValueRef)(defaultFill)
    } : {}), defaultStroke ? {
        stroke: (0, $9ulW1.signalOrValueRef)(defaultStroke)
    } : {});
    if (markDef.color && (filled ? markDef.fill : markDef.stroke)) $3XBQv.warn($bHNid.droppingColor("property", {
        fill: "fill" in markDef,
        stroke: "stroke" in markDef
    }));
    return Object.assign(Object.assign(Object.assign(Object.assign({}, fillStrokeMarkDefAndConfig), (0, $1WaxU.nonPosition)("color", model, {
        vgChannel: colorVgChannel,
        defaultValue: filled ? defaultFill : defaultStroke
    })), (0, $1WaxU.nonPosition)("fill", model, {
        // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding
        defaultValue: encoding.fill ? defaultFill : undefined
    })), (0, $1WaxU.nonPosition)("stroke", model, {
        // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding
        defaultValue: encoding.stroke ? defaultStroke : undefined
    }));
}

});
parcelRegister("1WaxU", function(module, exports) {

$parcel$export(module.exports, "nonPosition", () => $1693637094559e46$export$f7278da90cc1cfee);

var $9ulW1 = parcelRequire("9ulW1");

var $4qTOo = parcelRequire("4qTOo");

var $gx1vn = parcelRequire("gx1vn");
function $1693637094559e46$export$f7278da90cc1cfee(channel, model, opt = {}) {
    const { markDef: markDef, encoding: encoding, config: config } = model;
    const { vgChannel: vgChannel } = opt;
    let { defaultRef: defaultRef, defaultValue: defaultValue } = opt;
    if (defaultRef === undefined) {
        // prettier-ignore
        defaultValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : (0, $9ulW1.getMarkPropOrConfig)(channel, markDef, config, {
            vgChannel: vgChannel,
            ignoreVgConfig: true
        });
        if (defaultValue !== undefined) defaultRef = (0, $9ulW1.signalOrValueRef)(defaultValue);
    }
    const channelDef = encoding[channel];
    return (0, $4qTOo.wrapCondition)(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, (cDef)=>{
        return $gx1vn.midPoint({
            channel: channel,
            channelDef: cDef,
            markDef: markDef,
            config: config,
            scaleName: model.scaleName(channel),
            scale: model.getScaleComponent(channel),
            stack: null,
            defaultRef: defaultRef
        });
    });
}

});


parcelRegister("2y9Ve", function(module, exports) {

$parcel$export(module.exports, "zindex", () => $1db67412840fe797$export$dcf3a9d0ed5f6e1b);

var $2hAmp = parcelRequire("2hAmp");

var $9mRLv = parcelRequire("9mRLv");

var $9ulW1 = parcelRequire("9ulW1");

var $4qTOo = parcelRequire("4qTOo");
function $1db67412840fe797$export$dcf3a9d0ed5f6e1b(model) {
    const { encoding: encoding, mark: mark } = model;
    const order = encoding.order;
    if (!(0, $9mRLv.isPathMark)(mark) && (0, $2hAmp.isValueDef)(order)) return (0, $4qTOo.wrapCondition)(model, order, "zindex", (cd)=>(0, $9ulW1.signalOrValueRef)(cd.value));
    return {};
}

});

parcelRegister("e5Unf", function(module, exports) {

$parcel$export(module.exports, "pointPosition", () => $a42d42fd6b979553$export$14d45f6b031b1f88);
$parcel$export(module.exports, "pointPositionDefaultRef", () => $a42d42fd6b979553$export$f07963bc78bce045);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $aWx1E = parcelRequire("aWx1E");

var $gx1vn = parcelRequire("gx1vn");
function $a42d42fd6b979553$export$14d45f6b031b1f88(channel, model, { defaultPos: defaultPos, vgChannel: vgChannel, isMidPoint: isMidPoint }) {
    const { encoding: encoding, markDef: markDef, config: config, stack: stack } = model;
    const channelDef = encoding[channel];
    const channel2Def = encoding[(0, $fWfT0.getSecondaryRangeChannel)(channel)];
    const scaleName = model.scaleName(channel);
    const scale = model.getScaleComponent(channel);
    const offset = (0, $aWx1E.getOffset)(channel, markDef);
    // Get default position or position from mark def
    const defaultRef = $a42d42fd6b979553$export$f07963bc78bce045({
        model: model,
        defaultPos: defaultPos,
        channel: channel,
        scaleName: scaleName,
        scale: scale
    });
    const valueRef = !channelDef && (0, $fWfT0.isXorY)(channel) && (encoding.latitude || encoding.longitude) ? {
        field: model.getName(channel)
    } : $a42d42fd6b979553$export$ffcd4be69469c9c5({
        channel: channel,
        channelDef: channelDef,
        channel2Def: channel2Def,
        markDef: markDef,
        config: config,
        isMidPoint: isMidPoint,
        scaleName: scaleName,
        scale: scale,
        stack: stack,
        offset: offset,
        defaultRef: defaultRef
    });
    return valueRef ? {
        [vgChannel || channel]: valueRef
    } : undefined;
}
function $a42d42fd6b979553$export$ffcd4be69469c9c5(params) {
    const { channel: channel, channelDef: channelDef, isMidPoint: isMidPoint, scaleName: scaleName, stack: stack, offset: offset, markDef: markDef, config: config } = params;
    // This isn't a part of midPoint because we use midPoint for non-position too
    if ((0, $2hAmp.isFieldOrDatumDef)(channelDef) && stack && channel === stack.fieldChannel) {
        if ((0, $2hAmp.isFieldDef)(channelDef)) {
            const band = (0, $2hAmp.getBand)({
                channel: channel,
                fieldDef: channelDef,
                isMidPoint: isMidPoint,
                markDef: markDef,
                stack: stack,
                config: config
            });
            if (band !== undefined) return $gx1vn.interpolatedSignalRef({
                scaleName: scaleName,
                fieldOrDatumDef: channelDef,
                startSuffix: "start",
                band: band,
                offset: offset
            });
        }
        // x or y use stack_end so that stacked line's point mark use stack_end too.
        return $gx1vn.valueRefForFieldOrDatumDef(channelDef, scaleName, {
            suffix: "end"
        }, {
            offset: offset
        });
    }
    return $gx1vn.midPointRefWithPositionInvalidTest(params);
}
function $a42d42fd6b979553$export$f07963bc78bce045({ model: model, defaultPos: defaultPos, channel: channel, scaleName: scaleName, scale: scale }) {
    const { markDef: markDef, config: config } = model;
    return ()=>{
        const mainChannel = (0, $fWfT0.getMainRangeChannel)(channel);
        const vgChannel = (0, $fWfT0.getVgPositionChannel)(channel);
        const definedValueOrConfig = (0, $9ulW1.getMarkPropOrConfig)(channel, markDef, config, {
            vgChannel: vgChannel
        });
        if (definedValueOrConfig !== undefined) return $gx1vn.widthHeightValueOrSignalRef(channel, definedValueOrConfig);
        switch(defaultPos){
            case "zeroOrMin":
            case "zeroOrMax":
                if (scaleName) {
                    const scaleType = scale.get("type");
                    if ((0, $7k4G6.contains)([
                        (0, $9rekY.ScaleType).LOG,
                        (0, $9rekY.ScaleType).TIME,
                        (0, $9rekY.ScaleType).UTC
                    ], scaleType)) ;
                    else {
                        if (scale.domainDefinitelyIncludesZero()) return {
                            scale: scaleName,
                            value: 0
                        };
                    }
                }
                if (defaultPos === "zeroOrMin") return mainChannel === "y" ? {
                    field: {
                        group: "height"
                    }
                } : {
                    value: 0
                };
                else // zeroOrMax
                switch(mainChannel){
                    case "radius":
                        // max of radius is min(width, height) / 2
                        return {
                            signal: `min(${model.width.signal},${model.height.signal})/2`
                        };
                    case "theta":
                        return {
                            signal: "2*PI"
                        };
                    case "x":
                        return {
                            field: {
                                group: "width"
                            }
                        };
                    case "y":
                        return {
                            value: 0
                        };
                }
                break;
            case "mid":
                {
                    const sizeRef = model[(0, $fWfT0.getSizeChannel)(channel)];
                    return Object.assign(Object.assign({}, sizeRef), {
                        mult: 0.5
                    });
                }
        }
        // defaultPos === null
        return undefined;
    };
}

});
parcelRegister("aWx1E", function(module, exports) {

$parcel$export(module.exports, "getOffset", () => $7f78f063c9df0697$export$622cea445a1c5b7d);

var $fWfT0 = parcelRequire("fWfT0");
function $7f78f063c9df0697$export$622cea445a1c5b7d(channel, markDef) {
    const offsetChannel = (0, $fWfT0.getOffsetChannel)(channel);
    // TODO: in the future read from encoding channel too
    const markDefOffsetValue = markDef[offsetChannel];
    if (markDefOffsetValue) return markDefOffsetValue;
    return undefined;
}

});


parcelRegister("StYuR", function(module, exports) {

$parcel$export(module.exports, "pointOrRangePosition", () => $0a3c4b9f60c65e76$export$2952e643a8276c01);
$parcel$export(module.exports, "rangePosition", () => $0a3c4b9f60c65e76$export$fed1c1407e6d0b8b);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9ulW1 = parcelRequire("9ulW1");

var $aWx1E = parcelRequire("aWx1E");

var $avIfb = parcelRequire("avIfb");

var $e5Unf = parcelRequire("e5Unf");

var $gx1vn = parcelRequire("gx1vn");
function $0a3c4b9f60c65e76$export$2952e643a8276c01(channel, model, { defaultPos: defaultPos, defaultPos2: defaultPos2, range: range }) {
    if (range) return $0a3c4b9f60c65e76$export$fed1c1407e6d0b8b(channel, model, {
        defaultPos: defaultPos,
        defaultPos2: defaultPos2
    });
    return (0, $e5Unf.pointPosition)(channel, model, {
        defaultPos: defaultPos
    });
}
function $0a3c4b9f60c65e76$export$fed1c1407e6d0b8b(channel, model, { defaultPos: defaultPos, defaultPos2: defaultPos2 }) {
    const { markDef: markDef, config: config } = model;
    const channel2 = (0, $fWfT0.getSecondaryRangeChannel)(channel);
    const sizeChannel = (0, $fWfT0.getSizeChannel)(channel);
    const pos2Mixins = $0a3c4b9f60c65e76$var$pointPosition2OrSize(model, defaultPos2, channel2);
    const vgChannel = pos2Mixins[sizeChannel] ? (0, $avIfb.vgAlignedPositionChannel)(channel, markDef, config) : (0, $fWfT0.getVgPositionChannel)(channel);
    return Object.assign(Object.assign({}, (0, $e5Unf.pointPosition)(channel, model, {
        defaultPos: defaultPos,
        vgChannel: vgChannel
    })), pos2Mixins);
}
/**
 * Return encode for x2, y2.
 * If channel is not specified, return one channel based on orientation.
 */ function $0a3c4b9f60c65e76$var$pointPosition2OrSize(model, defaultPos, channel) {
    const { encoding: encoding, mark: mark, markDef: markDef, stack: stack, config: config } = model;
    const baseChannel = (0, $fWfT0.getMainRangeChannel)(channel);
    const sizeChannel = (0, $fWfT0.getSizeChannel)(channel);
    const vgChannel = (0, $fWfT0.getVgPositionChannel)(channel);
    const channelDef = encoding[baseChannel];
    const scaleName = model.scaleName(baseChannel);
    const scale = model.getScaleComponent(baseChannel);
    const offset = channel in encoding || channel in markDef ? (0, $aWx1E.getOffset)(channel, model.markDef) : (0, $aWx1E.getOffset)(baseChannel, model.markDef);
    if (!channelDef && (channel === "x2" || channel === "y2") && (encoding.latitude || encoding.longitude)) // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.
    return {
        [vgChannel]: {
            field: model.getName(channel)
        }
    };
    const valueRef = $0a3c4b9f60c65e76$export$9b90482df14e56a({
        channel: channel,
        channelDef: channelDef,
        channel2Def: encoding[channel],
        markDef: markDef,
        config: config,
        scaleName: scaleName,
        scale: scale,
        stack: stack,
        offset: offset,
        defaultRef: undefined
    });
    if (valueRef !== undefined) return {
        [vgChannel]: valueRef
    };
    // TODO: check width/height encoding here once we add them
    // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:
    // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)
    return $0a3c4b9f60c65e76$var$position2orSize(channel, markDef) || $0a3c4b9f60c65e76$var$position2orSize(channel, {
        [channel]: (0, $9ulW1.getMarkStyleConfig)(channel, markDef, config.style),
        [sizeChannel]: (0, $9ulW1.getMarkStyleConfig)(sizeChannel, markDef, config.style)
    }) || $0a3c4b9f60c65e76$var$position2orSize(channel, config[mark]) || $0a3c4b9f60c65e76$var$position2orSize(channel, config.mark) || {
        [vgChannel]: (0, $e5Unf.pointPositionDefaultRef)({
            model: model,
            defaultPos: defaultPos,
            channel: channel,
            scaleName: scaleName,
            scale: scale
        })()
    };
}
function $0a3c4b9f60c65e76$export$9b90482df14e56a({ channel: channel, channelDef: channelDef, channel2Def: channel2Def, markDef: markDef, config: config, scaleName: scaleName, scale: scale, stack: stack, offset: offset, defaultRef: defaultRef }) {
    if ((0, $2hAmp.isFieldOrDatumDef)(channelDef) && stack && // If fieldChannel is X and channel is X2 (or Y and Y2)
    channel.charAt(0) === stack.fieldChannel.charAt(0)) return $gx1vn.valueRefForFieldOrDatumDef(channelDef, scaleName, {
        suffix: "start"
    }, {
        offset: offset
    });
    return $gx1vn.midPointRefWithPositionInvalidTest({
        channel: channel,
        channelDef: channel2Def,
        scaleName: scaleName,
        scale: scale,
        stack: stack,
        markDef: markDef,
        config: config,
        offset: offset,
        defaultRef: defaultRef
    });
}
function $0a3c4b9f60c65e76$var$position2orSize(channel, markDef) {
    const sizeChannel = (0, $fWfT0.getSizeChannel)(channel);
    const vgChannel = (0, $fWfT0.getVgPositionChannel)(channel);
    if (markDef[vgChannel] !== undefined) return {
        [vgChannel]: $gx1vn.widthHeightValueOrSignalRef(channel, markDef[vgChannel])
    };
    else if (markDef[channel] !== undefined) return {
        [vgChannel]: $gx1vn.widthHeightValueOrSignalRef(channel, markDef[channel])
    };
    else if (markDef[sizeChannel]) return {
        [sizeChannel]: $gx1vn.widthHeightValueOrSignalRef(channel, markDef[sizeChannel])
    };
    return undefined;
}

});
parcelRegister("avIfb", function(module, exports) {

$parcel$export(module.exports, "vgAlignedPositionChannel", () => $7a6f1e8e00c30e18$export$73ddb004fb94036);

var $fWfT0 = parcelRequire("fWfT0");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");
const $7a6f1e8e00c30e18$var$ALIGNED_X_CHANNEL = {
    left: "x",
    center: "xc",
    right: "x2"
};
const $7a6f1e8e00c30e18$var$BASELINED_Y_CHANNEL = {
    top: "y",
    middle: "yc",
    bottom: "y2"
};
function $7a6f1e8e00c30e18$export$73ddb004fb94036(channel, markDef, config, defaultAlign = "middle") {
    if (channel === "radius" || channel === "theta") return (0, $fWfT0.getVgPositionChannel)(channel);
    const alignChannel = channel === "x" ? "align" : "baseline";
    const align = (0, $9ulW1.getMarkPropOrConfig)(alignChannel, markDef, config);
    let alignExcludingSignal;
    if ((0, $4xdf1.isSignalRef)(align)) {
        $3XBQv.warn($bHNid.rangeMarkAlignmentCannotBeExpression(alignChannel));
        alignExcludingSignal = undefined;
    } else alignExcludingSignal = align;
    if (channel === "x") return $7a6f1e8e00c30e18$var$ALIGNED_X_CHANNEL[alignExcludingSignal || (defaultAlign === "top" ? "left" : "center")];
    else return $7a6f1e8e00c30e18$var$BASELINED_Y_CHANNEL[alignExcludingSignal || defaultAlign];
}

});


parcelRegister("8i09u", function(module, exports) {

$parcel$export(module.exports, "rectPosition", () => $60901f62f751e842$export$990cf707ddd3cd58);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iX9mu = parcelRequire("iX9mu");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $1WaxU = parcelRequire("1WaxU");

var $aWx1E = parcelRequire("aWx1E");

var $avIfb = parcelRequire("avIfb");

var $e5Unf = parcelRequire("e5Unf");

var $StYuR = parcelRequire("StYuR");

var $gx1vn = parcelRequire("gx1vn");
function $60901f62f751e842$export$990cf707ddd3cd58(model, channel, mark) {
    var _a, _b, _c, _d;
    const { config: config, encoding: encoding, markDef: markDef, stack: stack } = model;
    const channel2 = (0, $fWfT0.getSecondaryRangeChannel)(channel);
    const sizeChannel = (0, $fWfT0.getSizeChannel)(channel);
    const channelDef = encoding[channel];
    const channelDef2 = encoding[channel2];
    const scale = model.getScaleComponent(channel);
    const scaleType = scale ? scale.get("type") : undefined;
    const scaleName = model.scaleName(channel);
    const orient = markDef.orient;
    const hasSizeDef = (_b = (_a = encoding[sizeChannel]) !== null && _a !== void 0 ? _a : encoding.size) !== null && _b !== void 0 ? _b : (0, $9ulW1.getMarkPropOrConfig)("size", markDef, config, {
        vgChannel: sizeChannel
    });
    const isBarBand = mark === "bar" && (channel === "x" ? orient === "vertical" : orient === "horizontal");
    // x, x2, and width -- we must specify two of these in all conditions
    if ((0, $2hAmp.isFieldDef)(channelDef) && ((0, $iR8lA.isBinning)(channelDef.bin) || (0, $iR8lA.isBinned)(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !hasSizeDef && !(0, $9rekY.hasDiscreteDomain)(scaleType)) {
        const band = (0, $2hAmp.getBand)({
            channel: channel,
            fieldDef: channelDef,
            stack: stack,
            markDef: markDef,
            config: config
        });
        const axis = (_c = model.component.axes[channel]) === null || _c === void 0 ? void 0 : _c[0];
        const axisTranslate = (_d = axis === null || axis === void 0 ? void 0 : axis.get("translate")) !== null && _d !== void 0 ? _d : 0.5; // vega default is 0.5
        return $60901f62f751e842$export$2a72fdb722ba56a0({
            fieldDef: channelDef,
            fieldDef2: channelDef2,
            channel: channel,
            markDef: markDef,
            scaleName: scaleName,
            band: band,
            axisTranslate: axisTranslate,
            spacing: (0, $fWfT0.isXorY)(channel) ? (0, $9ulW1.getMarkPropOrConfig)("binSpacing", markDef, config) : undefined,
            reverse: scale.get("reverse"),
            config: config
        });
    } else if (((0, $2hAmp.isFieldOrDatumDef)(channelDef) && (0, $9rekY.hasDiscreteDomain)(scaleType) || isBarBand) && !channelDef2) return $60901f62f751e842$var$positionAndSize(mark, channelDef, channel, model);
    else return (0, $StYuR.rangePosition)(channel, model, {
        defaultPos: "zeroOrMax",
        defaultPos2: "zeroOrMin"
    });
}
function $60901f62f751e842$var$defaultSizeRef(mark, sizeChannel, scaleName, scale, config, band) {
    if (scale) {
        const scaleType = scale.get("type");
        if (scaleType === "point" || scaleType === "band") {
            if (config[mark].discreteBandSize !== undefined) return {
                value: config[mark].discreteBandSize
            };
            if (scaleType === (0, $9rekY.ScaleType).POINT) {
                const scaleRange = scale.get("range");
                if ((0, $4xdf1.isVgRangeStep)(scaleRange) && (0, $2bi3s.isNumber)(scaleRange.step)) return {
                    value: scaleRange.step - 2
                };
                return {
                    value: (0, $iX9mu.DEFAULT_STEP) - 2
                };
            } else // BAND
            return {
                scale: scaleName,
                band: band
            };
        } else // continuous scale
        return {
            value: config[mark].continuousBandSize
        };
    }
    // No Scale
    const step = (0, $iX9mu.getViewConfigDiscreteStep)(config.view, sizeChannel);
    const value = (0, $7k4G6.getFirstDefined)(// No scale is like discrete bar (with one item)
    config[mark].discreteBandSize, step - 2);
    return value !== undefined ? {
        value: value
    } : undefined;
}
/**
 * Output position encoding and its size encoding for continuous, point, and band scales.
 */ function $60901f62f751e842$var$positionAndSize(mark, fieldDef, channel, model) {
    var _a;
    const { markDef: markDef, encoding: encoding, config: config, stack: stack } = model;
    const orient = markDef.orient;
    const scaleName = model.scaleName(channel);
    const scale = model.getScaleComponent(channel);
    const vgSizeChannel = (0, $fWfT0.getSizeChannel)(channel);
    const channel2 = (0, $fWfT0.getSecondaryRangeChannel)(channel);
    // use "size" channel for bars, if there is orient and the channel matches the right orientation
    const useVlSizeChannel = orient === "horizontal" && channel === "y" || orient === "vertical" && channel === "x";
    const sizeFromMarkOrConfig = (0, $9ulW1.getMarkPropOrConfig)(useVlSizeChannel ? "size" : vgSizeChannel, markDef, config, {
        vgChannel: vgSizeChannel
    });
    // Use size encoding / mark property / config if it exists
    let sizeMixins;
    if (encoding.size || sizeFromMarkOrConfig !== undefined) {
        if (useVlSizeChannel) sizeMixins = (0, $1WaxU.nonPosition)("size", model, {
            vgChannel: vgSizeChannel,
            defaultValue: sizeFromMarkOrConfig
        });
        else $3XBQv.warn($bHNid.cannotApplySizeToNonOrientedMark(markDef.type));
    }
    // Otherwise, apply default value
    const band = (_a = (0, $2hAmp.isFieldOrDatumDef)(fieldDef) ? (0, $2hAmp.getBand)({
        channel: channel,
        fieldDef: fieldDef,
        markDef: markDef,
        stack: stack,
        config: config
    }) : undefined) !== null && _a !== void 0 ? _a : 1;
    sizeMixins = sizeMixins || {
        [vgSizeChannel]: $60901f62f751e842$var$defaultSizeRef(mark, vgSizeChannel, scaleName, scale, config, band)
    };
    /*
      Band scales with size value and all point scales, use xc/yc + band=0.5
  
      Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.
      In this case, size_band is the band specified in the x/y-encoding.
      By default band is 1, so `(1 - band) / 2` = 0.
      If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2
     */ const center = (scale === null || scale === void 0 ? void 0 : scale.get("type")) !== "band" || !("band" in sizeMixins[vgSizeChannel]);
    const vgChannel = (0, $avIfb.vgAlignedPositionChannel)(channel, markDef, config, center ? "middle" : "top");
    const offset = (0, $aWx1E.getOffset)(channel, markDef);
    const posRef = $gx1vn.midPointRefWithPositionInvalidTest({
        channel: channel,
        channelDef: fieldDef,
        markDef: markDef,
        config: config,
        scaleName: scaleName,
        scale: scale,
        stack: stack,
        offset: offset,
        defaultRef: (0, $e5Unf.pointPositionDefaultRef)({
            model: model,
            defaultPos: "mid",
            channel: channel,
            scaleName: scaleName,
            scale: scale
        }),
        band: center ? 0.5 : (1 - band) / 2
    });
    if (vgSizeChannel) return Object.assign({
        [vgChannel]: posRef
    }, sizeMixins);
    else {
        // otherwise, we must simulate size by setting position2 = position + size
        // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)
        const vgChannel2 = (0, $fWfT0.getVgPositionChannel)(channel2);
        const sizeRef = sizeMixins[vgSizeChannel];
        const sizeOffset = offset ? Object.assign(Object.assign({}, sizeRef), {
            offset: offset
        }) : sizeRef;
        return {
            [vgChannel]: posRef,
            // posRef might be an array that wraps position invalid test
            [vgChannel2]: (0, $2bi3s.isArray)(posRef) ? [
                posRef[0],
                Object.assign(Object.assign({}, posRef[1]), {
                    offset: sizeOffset
                })
            ] : Object.assign(Object.assign({}, posRef), {
                offset: sizeOffset
            })
        };
    }
}
function $60901f62f751e842$var$getBinSpacing(channel, spacing, reverse, translate, offset) {
    if ((0, $fWfT0.isPolarPositionChannel)(channel)) return 0;
    const spacingOffset = channel === "x" || channel === "y2" ? -spacing / 2 : spacing / 2;
    if ((0, $4xdf1.isSignalRef)(reverse) || (0, $4xdf1.isSignalRef)(offset) || (0, $4xdf1.isSignalRef)(translate)) {
        const reverseExpr = (0, $9ulW1.signalOrStringValue)(reverse);
        const offsetExpr = (0, $9ulW1.signalOrStringValue)(offset);
        const translateExpr = (0, $9ulW1.signalOrStringValue)(translate);
        const t = translateExpr ? `${translateExpr} + ` : "";
        const r = reverseExpr ? `(${reverseExpr} ? -1 : 1) * ` : "";
        const o = offsetExpr ? `(${offsetExpr} + ${spacingOffset})` : spacingOffset;
        return {
            signal: t + r + o
        };
    } else {
        offset = offset || 0;
        return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);
    }
}
function $60901f62f751e842$export$2a72fdb722ba56a0({ fieldDef: fieldDef, fieldDef2: fieldDef2, channel: channel, band: band, scaleName: scaleName, markDef: markDef, spacing: spacing = 0, axisTranslate: axisTranslate, reverse: reverse, config: config }) {
    const channel2 = (0, $fWfT0.getSecondaryRangeChannel)(channel);
    const vgChannel = (0, $fWfT0.getVgPositionChannel)(channel);
    const vgChannel2 = (0, $fWfT0.getVgPositionChannel)(channel2);
    const offset = (0, $aWx1E.getOffset)(channel, markDef);
    if ((0, $iR8lA.isBinning)(fieldDef.bin) || fieldDef.timeUnit) return {
        [vgChannel2]: $60901f62f751e842$export$2d6a5d0c6cd876fb({
            channel: channel,
            fieldDef: fieldDef,
            scaleName: scaleName,
            markDef: markDef,
            band: (1 - band) / 2,
            offset: $60901f62f751e842$var$getBinSpacing(channel2, spacing, reverse, axisTranslate, offset),
            config: config
        }),
        [vgChannel]: $60901f62f751e842$export$2d6a5d0c6cd876fb({
            channel: channel,
            fieldDef: fieldDef,
            scaleName: scaleName,
            markDef: markDef,
            band: 1 - (1 - band) / 2,
            offset: $60901f62f751e842$var$getBinSpacing(channel, spacing, reverse, axisTranslate, offset),
            config: config
        })
    };
    else if ((0, $iR8lA.isBinned)(fieldDef.bin)) {
        const startRef = $gx1vn.valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, {
            offset: $60901f62f751e842$var$getBinSpacing(channel2, spacing, reverse, axisTranslate, offset)
        });
        if ((0, $2hAmp.isFieldDef)(fieldDef2)) return {
            [vgChannel2]: startRef,
            [vgChannel]: $gx1vn.valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, {
                offset: $60901f62f751e842$var$getBinSpacing(channel, spacing, reverse, axisTranslate, offset)
            })
        };
        else if ((0, $iR8lA.isBinParams)(fieldDef.bin) && fieldDef.bin.step) return {
            [vgChannel2]: startRef,
            [vgChannel]: {
                signal: `scale("${scaleName}", ${(0, $2hAmp.vgField)(fieldDef, {
                    expr: "datum"
                })} + ${fieldDef.bin.step})`,
                offset: $60901f62f751e842$var$getBinSpacing(channel, spacing, reverse, axisTranslate, offset)
            }
        };
    }
    $3XBQv.warn($bHNid.channelRequiredForBinned(channel2));
    return undefined;
}
function $60901f62f751e842$export$2d6a5d0c6cd876fb({ channel: channel, fieldDef: fieldDef, scaleName: scaleName, markDef: markDef, band: band, offset: offset, config: config }) {
    const r = $gx1vn.interpolatedSignalRef({
        scaleName: scaleName,
        fieldOrDatumDef: fieldDef,
        band: band,
        offset: offset
    });
    return $gx1vn.wrapPositionInvalidTest({
        fieldDef: fieldDef,
        channel: channel,
        markDef: markDef,
        ref: r,
        config: config
    });
}

});


parcelRegister("rytcO", function(module, exports) {

$parcel$export(module.exports, "defined", () => $052d42c43648bfa2$export$43f40ad3fa1d5c97);
$parcel$export(module.exports, "valueIfDefined", () => $052d42c43648bfa2$export$8833057aed1ffe10);

var $fWfT0 = parcelRequire("fWfT0");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $gx1vn = parcelRequire("gx1vn");
function $052d42c43648bfa2$export$43f40ad3fa1d5c97(model) {
    const { config: config, markDef: markDef } = model;
    const invalid = (0, $9ulW1.getMarkPropOrConfig)("invalid", markDef, config);
    if (invalid) {
        const signal = $052d42c43648bfa2$var$allFieldsInvalidPredicate(model, {
            channels: (0, $fWfT0.POSITION_SCALE_CHANNELS)
        });
        if (signal) return {
            defined: {
                signal: signal
            }
        };
    }
    return {};
}
function $052d42c43648bfa2$var$allFieldsInvalidPredicate(model, { invalid: invalid = false, channels: channels }) {
    const filterIndex = channels.reduce((aggregator, channel)=>{
        const scaleComponent = model.getScaleComponent(channel);
        if (scaleComponent) {
            const scaleType = scaleComponent.get("type");
            const field = model.vgField(channel, {
                expr: "datum"
            });
            // While discrete domain scales can handle invalid values, continuous scales can't.
            if (field && (0, $9rekY.hasContinuousDomain)(scaleType)) aggregator[field] = true;
        }
        return aggregator;
    }, {});
    const fields = (0, $7k4G6.keys)(filterIndex);
    if (fields.length > 0) {
        const op = invalid ? "||" : "&&";
        return fields.map((field)=>(0, $gx1vn.fieldInvalidPredicate)(field, invalid)).join(` ${op} `);
    }
    return undefined;
}
function $052d42c43648bfa2$export$8833057aed1ffe10(prop, value) {
    if (value !== undefined) return {
        [prop]: (0, $9ulW1.signalOrValueRef)(value)
    };
    return undefined;
}

});



parcelRegister("hsVt4", function(module, exports) {

$parcel$export(module.exports, "TUPLE_FIELDS", () => $cb71a120f6bdbe63$export$9b202077fa9a51d8);
$parcel$export(module.exports, "default", () => $cb71a120f6bdbe63$export$2e2bcd8739ae039);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $1MK7y = parcelRequire("1MK7y");
var $cb71a120f6bdbe63$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const $cb71a120f6bdbe63$export$9b202077fa9a51d8 = "_tuple_fields";
class $cb71a120f6bdbe63$export$e062d36d4cd79633 {
    constructor(...items){
        this.items = items;
        this.hasChannel = {};
        this.hasField = {};
    }
}
const $cb71a120f6bdbe63$var$project = {
    has: ()=>{
        return true; // This transform handles its own defaults, so always run parse.
    },
    parse: (model, selCmpt, selDef)=>{
        var _a, _b, _c;
        const name = selCmpt.name;
        const proj = (_a = selCmpt.project) !== null && _a !== void 0 ? _a : selCmpt.project = new $cb71a120f6bdbe63$export$e062d36d4cd79633();
        const parsed = {};
        const timeUnits = {};
        const signals = new Set();
        const signalName = (p, range)=>{
            const suffix = range === "visual" ? p.channel : p.field;
            let sg = (0, $7k4G6.varName)(`${name}_${suffix}`);
            for(let counter = 1; signals.has(sg); counter++)sg = (0, $7k4G6.varName)(`${name}_${suffix}_${counter}`);
            signals.add(sg);
            return {
                [range]: sg
            };
        };
        // If no explicit projection (either fields or encodings) is specified, set some defaults.
        // If an initial value is set, try to infer projections.
        // Otherwise, use the default configuration.
        if (!selDef.fields && !selDef.encodings) {
            const cfg = model.config.selection[selDef.type];
            if (selDef.init) {
                for (const init of (0, $2bi3s.array)(selDef.init))for (const key of (0, $7k4G6.keys)(init)){
                    if ((0, $fWfT0.isSingleDefUnitChannel)(key)) (selDef.encodings || (selDef.encodings = [])).push(key);
                    else if (selDef.type === "interval") {
                        $3XBQv.warn($bHNid.INTERVAL_INITIALIZED_WITH_X_Y);
                        selDef.encodings = cfg.encodings;
                    } else (selDef.fields || (selDef.fields = [])).push(key);
                }
            } else {
                selDef.encodings = cfg.encodings;
                selDef.fields = cfg.fields;
            }
        }
        // TODO: find a possible channel mapping for these fields.
        for (const field of (_b = selDef.fields) !== null && _b !== void 0 ? _b : []){
            const p = {
                type: "E",
                field: field
            };
            p.signals = Object.assign({}, signalName(p, "data"));
            proj.items.push(p);
            proj.hasField[field] = p;
        }
        for (const channel of (_c = selDef.encodings) !== null && _c !== void 0 ? _c : []){
            const fieldDef = model.fieldDef(channel);
            if (fieldDef) {
                let field = fieldDef.field;
                if (fieldDef.aggregate) {
                    $3XBQv.warn($bHNid.cannotProjectAggregate(channel, fieldDef.aggregate));
                    continue;
                } else if (!field) {
                    $3XBQv.warn($bHNid.cannotProjectOnChannelWithoutField(channel));
                    continue;
                }
                if (fieldDef.timeUnit) {
                    field = model.vgField(channel);
                    // Construct TimeUnitComponents which will be combined into a
                    // TimeUnitNode. This node may need to be inserted into the
                    // dataflow if the selection is used across views that do not
                    // have these time units defined.
                    const component = {
                        timeUnit: fieldDef.timeUnit,
                        as: field,
                        field: fieldDef.field
                    };
                    timeUnits[(0, $7k4G6.hash)(component)] = component;
                }
                // Prevent duplicate projections on the same field.
                // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).
                if (!parsed[field]) {
                    // Determine whether the tuple will store enumerated or ranged values.
                    // Interval selections store ranges for continuous scales, and enumerations otherwise.
                    // Single/multi selections store ranges for binned fields, and enumerations otherwise.
                    let type = "E";
                    if (selCmpt.type === "interval") {
                        const scaleType = model.getScaleComponent(channel).get("type");
                        if ((0, $9rekY.hasContinuousDomain)(scaleType)) type = "R";
                    } else if (fieldDef.bin) type = "R-RE";
                    const p = {
                        field: field,
                        channel: channel,
                        type: type
                    };
                    p.signals = Object.assign(Object.assign({}, signalName(p, "data")), signalName(p, "visual"));
                    proj.items.push(parsed[field] = p);
                    proj.hasField[field] = proj.hasChannel[channel] = parsed[field];
                }
            } else $3XBQv.warn($bHNid.cannotProjectOnChannelWithoutField(channel));
        }
        if (selDef.init) {
            const parseInit = (i)=>{
                return proj.items.map((p)=>i[p.channel] !== undefined ? i[p.channel] : i[p.field]);
            };
            if (selDef.type === "interval") selCmpt.init = parseInit(selDef.init);
            else {
                const init = (0, $2bi3s.array)(selDef.init);
                selCmpt.init = init.map(parseInit);
            }
        }
        if (!(0, $7k4G6.isEmpty)(timeUnits)) proj.timeUnit = new (0, $1MK7y.TimeUnitNode)(null, timeUnits);
    },
    signals: (model, selCmpt, allSignals)=>{
        const name = selCmpt.name + $cb71a120f6bdbe63$export$9b202077fa9a51d8;
        const hasSignal = allSignals.filter((s)=>s.name === name);
        return hasSignal.length > 0 ? allSignals : allSignals.concat({
            name: name,
            value: selCmpt.project.items.map((proj)=>{
                const { signals: signals, hasLegend: hasLegend } = proj, rest = $cb71a120f6bdbe63$var$__rest(proj, [
                    "signals",
                    "hasLegend"
                ]);
                rest.field = (0, $7k4G6.replacePathInField)(rest.field);
                return rest;
            })
        });
    }
};
var $cb71a120f6bdbe63$export$2e2bcd8739ae039 = $cb71a120f6bdbe63$var$project;

});
parcelRegister("1MK7y", function(module, exports) {

$parcel$export(module.exports, "TimeUnitNode", () => $14ce0ccb2e8d067a$export$cd1b88262eb68024);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $aMeqD = parcelRequire("aMeqD");

var $7k4G6 = parcelRequire("7k4G6");

var $jkJyY = parcelRequire("jkJyY");

var $71IWl = parcelRequire("71IWl");
var $14ce0ccb2e8d067a$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $14ce0ccb2e8d067a$export$cd1b88262eb68024 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, formula){
        super(parent);
        this.formula = formula;
    }
    clone() {
        return new $14ce0ccb2e8d067a$export$cd1b88262eb68024(null, (0, $7k4G6.duplicate)(this.formula));
    }
    static makeFromEncoding(parent, model) {
        const formula = model.reduceFieldDef((timeUnitComponent, fieldDef, channel)=>{
            const { field: field, timeUnit: timeUnit } = fieldDef;
            const channelDef2 = (0, $jkJyY.isUnitModel)(model) ? model.encoding[(0, $fWfT0.getSecondaryRangeChannel)(channel)] : undefined;
            const band = (0, $jkJyY.isUnitModel)(model) && (0, $2hAmp.hasBand)(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config);
            if (timeUnit) {
                const as = (0, $2hAmp.vgField)(fieldDef, {
                    forAs: true
                });
                timeUnitComponent[(0, $7k4G6.hash)({
                    as: as,
                    field: field,
                    timeUnit: timeUnit
                })] = Object.assign({
                    as: as,
                    field: field,
                    timeUnit: timeUnit
                }, band ? {
                    band: true
                } : {});
            }
            return timeUnitComponent;
        }, {});
        if ((0, $7k4G6.isEmpty)(formula)) return null;
        return new $14ce0ccb2e8d067a$export$cd1b88262eb68024(parent, formula);
    }
    static makeFromTransform(parent, t) {
        const _a = Object.assign({}, t), { timeUnit: timeUnit } = _a, other = $14ce0ccb2e8d067a$var$__rest(_a, [
            "timeUnit"
        ]);
        const normalizedTimeUnit = (0, $aMeqD.normalizeTimeUnit)(timeUnit);
        const component = Object.assign(Object.assign({}, other), {
            timeUnit: normalizedTimeUnit
        });
        return new $14ce0ccb2e8d067a$export$cd1b88262eb68024(parent, {
            [(0, $7k4G6.hash)(component)]: component
        });
    }
    /**
     * Merge together TimeUnitNodes assigning the children of `other` to `this`
     * and removing `other`.
     */ merge(other) {
        this.formula = Object.assign({}, this.formula);
        // if the same hash happen twice, merge "band"
        for(const key in other.formula)if (!this.formula[key] || other.formula[key].band) // copy if it's not a duplicate or if we need to copy band over
        this.formula[key] = other.formula[key];
        for (const child of other.children){
            other.removeChild(child);
            child.parent = this;
        }
        other.remove();
    }
    /**
     * Remove time units coming from the other node.
     */ removeFormulas(fields) {
        const newFormula = {};
        for (const [key, timeUnit] of (0, $7k4G6.entries)(this.formula))if (!fields.has(timeUnit.as)) newFormula[key] = timeUnit;
        this.formula = newFormula;
    }
    producedFields() {
        return new Set((0, $7k4G6.vals)(this.formula).map((f)=>f.as));
    }
    dependentFields() {
        return new Set((0, $7k4G6.vals)(this.formula).map((f)=>f.field));
    }
    hash() {
        return `TimeUnit ${(0, $7k4G6.hash)(this.formula)}`;
    }
    assemble() {
        const transforms = [];
        for (const f of (0, $7k4G6.vals)(this.formula)){
            const { field: field, as: as, timeUnit: timeUnit } = f;
            const _a = (0, $aMeqD.normalizeTimeUnit)(timeUnit), { unit: unit, utc: utc } = _a, params = $14ce0ccb2e8d067a$var$__rest(_a, [
                "unit",
                "utc"
            ]);
            transforms.push(Object.assign(Object.assign(Object.assign(Object.assign({
                field: (0, $7k4G6.replacePathInField)(field),
                type: "timeunit"
            }, unit ? {
                units: (0, $aMeqD.getTimeUnitParts)(unit)
            } : {}), utc ? {
                timezone: "utc"
            } : {}), params), {
                as: [
                    as,
                    `${as}_end`
                ]
            }));
        }
        return transforms;
    }
}

});
parcelRegister("71IWl", function(module, exports) {

$parcel$export(module.exports, "DataFlowNode", () => $51db7c9499d59669$export$c17c7fb7cb0f3006);
$parcel$export(module.exports, "OutputNode", () => $51db7c9499d59669$export$ebbfc05f7eeffa00);

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $7k4G6 = parcelRequire("7k4G6");
class $51db7c9499d59669$export$c17c7fb7cb0f3006 {
    constructor(parent, debugName){
        this.debugName = debugName;
        this._children = [];
        this._parent = null;
        if (parent) this.parent = parent;
    }
    /**
     * Clone this node with a deep copy but don't clone links to children or parents.
     */ clone() {
        throw new Error("Cannot clone node");
    }
    get parent() {
        return this._parent;
    }
    /**
     * Set the parent of the node and also add this node to the parent's children.
     */ set parent(parent) {
        this._parent = parent;
        if (parent) parent.addChild(this);
    }
    get children() {
        return this._children;
    }
    numChildren() {
        return this._children.length;
    }
    addChild(child, loc) {
        // do not add the same child twice
        if (this._children.indexOf(child) > -1) {
            $3XBQv.warn($bHNid.ADD_SAME_CHILD_TWICE);
            return;
        }
        if (loc !== undefined) this._children.splice(loc, 0, child);
        else this._children.push(child);
    }
    removeChild(oldChild) {
        const loc = this._children.indexOf(oldChild);
        this._children.splice(loc, 1);
        return loc;
    }
    /**
     * Remove node from the dataflow.
     */ remove() {
        let loc = this._parent.removeChild(this);
        for (const child of this._children){
            // do not use the set method because we want to insert at a particular location
            child._parent = this._parent;
            this._parent.addChild(child, loc++);
        }
    }
    /**
     * Insert another node as a parent of this node.
     */ insertAsParentOf(other) {
        const parent = other.parent;
        parent.removeChild(this);
        this.parent = parent;
        other.parent = this;
    }
    swapWithParent() {
        const parent = this._parent;
        const newParent = parent.parent;
        // reconnect the children
        for (const child of this._children)child.parent = parent;
        // remove old links
        this._children = []; // equivalent to removing every child link one by one
        parent.removeChild(this);
        parent.parent.removeChild(parent);
        // swap two nodes
        this.parent = newParent;
        parent.parent = this;
    }
}
class $51db7c9499d59669$export$ebbfc05f7eeffa00 extends $51db7c9499d59669$export$c17c7fb7cb0f3006 {
    /**
     * @param source The name of the source. Will change in assemble.
     * @param type The type of the output node.
     * @param refCounts A global ref counter map.
     */ constructor(parent, source, type, refCounts){
        super(parent, source);
        this.type = type;
        this.refCounts = refCounts;
        this._source = this._name = source;
        if (this.refCounts && !(this._name in this.refCounts)) this.refCounts[this._name] = 0;
    }
    clone() {
        const cloneObj = new this.constructor();
        cloneObj.debugName = "clone_" + this.debugName;
        cloneObj._source = this._source;
        cloneObj._name = "clone_" + this._name;
        cloneObj.type = this.type;
        cloneObj.refCounts = this.refCounts;
        cloneObj.refCounts[cloneObj._name] = 0;
        return cloneObj;
    }
    dependentFields() {
        return new Set();
    }
    producedFields() {
        return new Set();
    }
    hash() {
        if (this._hash === undefined) this._hash = `Output ${(0, $7k4G6.uniqueId)()}`;
        return this._hash;
    }
    /**
     * Request the datasource name and increase the ref counter.
     *
     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
     * It is crucial to request the name from an output node to mark it as a required node.
     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
     *
     * In the assemble phase, this will return the correct name.
     */ getSource() {
        this.refCounts[this._name]++;
        return this._source;
    }
    isRequired() {
        return !!this.refCounts[this._name];
    }
    setSource(source) {
        this._source = source;
    }
}

});




parcelRegister("dL6Fh", function(module, exports) {

$parcel$export(module.exports, "TOGGLE", () => $a044d5a02b8d5043$export$60842f1a88feb6ed);
$parcel$export(module.exports, "default", () => $a044d5a02b8d5043$export$2e2bcd8739ae039);

var $Wddys = parcelRequire("Wddys");
const $a044d5a02b8d5043$export$60842f1a88feb6ed = "_toggle";
const $a044d5a02b8d5043$var$toggle = {
    has: (selCmpt)=>{
        return selCmpt.type === "multi" && !!selCmpt.toggle;
    },
    signals: (model, selCmpt, signals)=>{
        return signals.concat({
            name: selCmpt.name + $a044d5a02b8d5043$export$60842f1a88feb6ed,
            value: false,
            on: [
                {
                    events: selCmpt.events,
                    update: selCmpt.toggle
                }
            ]
        });
    },
    modifyExpr: (model, selCmpt)=>{
        const tpl = selCmpt.name + (0, $Wddys.TUPLE);
        const signal = selCmpt.name + $a044d5a02b8d5043$export$60842f1a88feb6ed;
        return `${signal} ? null : ${tpl}, ` + (selCmpt.resolve === "global" ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${(0, $Wddys.unitName)(model)}}, `) + `${signal} ? ${tpl} : null`;
    }
};
var $a044d5a02b8d5043$export$2e2bcd8739ae039 = $a044d5a02b8d5043$var$toggle;

});


parcelRegister("giuv5", function(module, exports) {

$parcel$export(module.exports, "default", () => $bdd5fc8427571328$export$2e2bcd8739ae039);
$parcel$export(module.exports, "domain", () => $bdd5fc8427571328$export$21779e503be4cd98);

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $fWfT0 = parcelRequire("fWfT0");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $jkJyY = parcelRequire("jkJyY");
const $bdd5fc8427571328$var$scaleBindings = {
    has: (selCmpt)=>{
        return selCmpt.type === "interval" && selCmpt.resolve === "global" && selCmpt.bind && selCmpt.bind === "scales";
    },
    parse: (model, selCmpt)=>{
        const bound = selCmpt.scales = [];
        for (const proj of selCmpt.project.items){
            const channel = proj.channel;
            if (!(0, $fWfT0.isScaleChannel)(channel)) continue;
            const scale = model.getScaleComponent(channel);
            const scaleType = scale ? scale.get("type") : undefined;
            if (!scale || !(0, $9rekY.hasContinuousDomain)(scaleType)) {
                $3XBQv.warn($bHNid.SCALE_BINDINGS_CONTINUOUS);
                continue;
            }
            const extent = {
                selection: selCmpt.name,
                field: proj.field
            };
            scale.set("selectionExtent", extent, true);
            bound.push(proj);
        }
    },
    topLevelSignals: (model, selCmpt, signals)=>{
        const bound = selCmpt.scales.filter((proj)=>signals.filter((s)=>s.name === proj.signals.data).length === 0);
        // Top-level signals are only needed for multiview displays and if this
        // view's top-level signals haven't already been generated.
        if (!model.parent || $bdd5fc8427571328$var$isTopLevelLayer(model) || bound.length === 0) return signals;
        // vlSelectionResolve does not account for the behavior of bound scales in
        // multiview displays. Each unit view adds a tuple to the store, but the
        // state of the selection is the unit selection most recently updated. This
        // state is captured by the top-level signals that we insert and "push
        // outer" to from within the units. We need to reassemble this state into
        // the top-level named signal, except no single selCmpt has a global view.
        const namedSg = signals.filter((s)=>s.name === selCmpt.name)[0];
        let update = namedSg.update;
        if (update.indexOf((0, $Wddys.VL_SELECTION_RESOLVE)) >= 0) namedSg.update = `{${bound.map((proj)=>`${(0, $2bi3s.stringValue)(proj.field)}: ${proj.signals.data}`).join(", ")}}`;
        else {
            for (const proj of bound){
                const mapping = `${(0, $2bi3s.stringValue)(proj.field)}: ${proj.signals.data}`;
                if (update.indexOf(mapping) < 0) update = `${update.substring(0, update.length - 1)}, ${mapping}}`;
            }
            namedSg.update = update;
        }
        return signals.concat(bound.map((proj)=>({
                name: proj.signals.data
            })));
    },
    signals: (model, selCmpt, signals)=>{
        // Nested signals need only push to top-level signals with multiview displays.
        if (model.parent && !$bdd5fc8427571328$var$isTopLevelLayer(model)) for (const proj of selCmpt.scales){
            const signal = signals.filter((s)=>s.name === proj.signals.data)[0];
            signal.push = "outer";
            delete signal.value;
            delete signal.update;
        }
        return signals;
    }
};
var $bdd5fc8427571328$export$2e2bcd8739ae039 = $bdd5fc8427571328$var$scaleBindings;
function $bdd5fc8427571328$export$21779e503be4cd98(model, channel) {
    const scale = (0, $2bi3s.stringValue)(model.scaleName(channel));
    return `domain(${scale})`;
}
function $bdd5fc8427571328$var$isTopLevelLayer(model) {
    var _a;
    return model.parent && (0, $jkJyY.isLayerModel)(model.parent) && ((_a = !model.parent.parent, _a !== void 0) ? _a : $bdd5fc8427571328$var$isTopLevelLayer(model.parent.parent));
}

});

parcelRegister("eTqRr", function(module, exports) {

$parcel$export(module.exports, "default", () => $ad7b09c1344ee201$export$2e2bcd8739ae039);
$parcel$export(module.exports, "parseInteractiveLegend", () => $ad7b09c1344ee201$export$9c62ef267d5f2781);

var $bFDDQ = parcelRequire("bFDDQ");

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $2zU89 = parcelRequire("2zU89");

var $7k4G6 = parcelRequire("7k4G6");

var $hsVt4 = parcelRequire("hsVt4");

var $dL6Fh = parcelRequire("dL6Fh");
const $ad7b09c1344ee201$var$legendBindings = {
    has: (selCmpt)=>{
        const spec = selCmpt.resolve === "global" && selCmpt.bind && (0, $2zU89.isLegendBinding)(selCmpt.bind);
        const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== (0, $2zU89.SELECTION_ID);
        if (spec && !projLen) $3XBQv.warn($bHNid.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);
        return spec && projLen;
    },
    parse: (model, selCmpt, selDef, origDef)=>{
        var _a;
        // Binding a selection to a legend disables default direct manipulation interaction.
        // A user can choose to re-enable it by explicitly specifying triggering input events.
        if (!origDef.on) delete selCmpt.events;
        if (!origDef.clear) delete selCmpt.clear;
        if (origDef.on || origDef.clear) {
            const legendFilter = 'event.item && indexof(event.item.mark.role, "legend") < 0';
            for (const evt of selCmpt.events){
                evt.filter = (0, $2bi3s.array)((_a = evt.filter) !== null && _a !== void 0 ? _a : []);
                if (evt.filter.indexOf(legendFilter) < 0) evt.filter.push(legendFilter);
            }
        }
        const evt = (0, $2zU89.isLegendStreamBinding)(selCmpt.bind) ? selCmpt.bind.legend : "click";
        const stream = (0, $2bi3s.isString)(evt) ? (0, $bFDDQ.selector)(evt, "view") : (0, $2bi3s.array)(evt);
        selCmpt.bind = {
            legend: {
                merge: stream
            }
        };
    },
    topLevelSignals: (model, selCmpt, signals)=>{
        const selName = selCmpt.name;
        const stream = (0, $2zU89.isLegendStreamBinding)(selCmpt.bind) && selCmpt.bind.legend;
        const markName = (name)=>(s)=>{
                const ds = (0, $7k4G6.duplicate)(s);
                ds.markname = name;
                return ds;
            };
        for (const proj of selCmpt.project.items){
            if (!proj.hasLegend) continue;
            const prefix = `${(0, $7k4G6.varName)(proj.field)}_legend`;
            const sgName = `${selName}_${prefix}`;
            const hasSignal = signals.filter((s)=>s.name === sgName);
            if (hasSignal.length === 0) {
                const events = stream.merge.map(markName(`${prefix}_symbols`)).concat(stream.merge.map(markName(`${prefix}_labels`))).concat(stream.merge.map(markName(`${prefix}_entries`)));
                signals.unshift(Object.assign(Object.assign({
                    name: sgName
                }, !selCmpt.init ? {
                    value: null
                } : {}), {
                    on: [
                        // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.
                        {
                            events: events,
                            update: "datum.value || item().items[0].items[0].datum.value",
                            force: true
                        },
                        {
                            events: stream.merge,
                            update: `!event.item || !datum ? null : ${sgName}`,
                            force: true
                        }
                    ]
                }));
            }
        }
        return signals;
    },
    signals: (model, selCmpt, signals)=>{
        const name = selCmpt.name;
        const proj = selCmpt.project;
        const tuple = signals.find((s)=>s.name === name + (0, $Wddys.TUPLE));
        const fields = name + (0, $hsVt4.TUPLE_FIELDS);
        const values = proj.items.filter((p)=>p.hasLegend).map((p)=>(0, $7k4G6.varName)(`${name}_${(0, $7k4G6.varName)(p.field)}_legend`));
        const valid = values.map((v)=>`${v} !== null`).join(" && ");
        const update = `${valid} ? {fields: ${fields}, values: [${values.join(", ")}]} : null`;
        if (selCmpt.events && values.length > 0) tuple.on.push({
            events: values.map((signal)=>({
                    signal: signal
                })),
            update: update
        });
        else if (values.length > 0) {
            tuple.update = update;
            delete tuple.value;
            delete tuple.on;
        }
        const toggle = signals.find((s)=>s.name === name + (0, $dL6Fh.TOGGLE));
        const events = (0, $2zU89.isLegendStreamBinding)(selCmpt.bind) && selCmpt.bind.legend;
        if (toggle) {
            if (!selCmpt.events) toggle.on[0].events = events;
            else toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), {
                events: events
            }));
        }
        return signals;
    }
};
var $ad7b09c1344ee201$export$2e2bcd8739ae039 = $ad7b09c1344ee201$var$legendBindings;
function $ad7b09c1344ee201$export$9c62ef267d5f2781(model, channel, legendCmpt) {
    var _a;
    const field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;
    (0, $Wddys.forEachSelection)(model, (selCmpt)=>{
        var _a, _b;
        const proj = (_a = selCmpt.project.hasField[field]) !== null && _a !== void 0 ? _a : selCmpt.project.hasChannel[channel];
        if (proj && $ad7b09c1344ee201$var$legendBindings.has(selCmpt)) {
            const legendSelections = (_b = legendCmpt.get("selections")) !== null && _b !== void 0 ? _b : [];
            legendSelections.push(selCmpt.name);
            legendCmpt.set("selections", legendSelections, false);
            proj.hasLegend = true;
        }
    });
}

});

parcelRegister("dafT5", function(module, exports) {

$parcel$export(module.exports, "default", () => $99588877cb159974$export$2e2bcd8739ae039);

var $bFDDQ = parcelRequire("bFDDQ");

var $fWfT0 = parcelRequire("fWfT0");

var $7LjUF = parcelRequire("7LjUF");

var $giuv5 = parcelRequire("giuv5");
const $99588877cb159974$var$ANCHOR = "_translate_anchor";
const $99588877cb159974$var$DELTA = "_translate_delta";
const $99588877cb159974$var$translate = {
    has: (selCmpt)=>{
        return selCmpt.type === "interval" && selCmpt.translate;
    },
    signals: (model, selCmpt, signals)=>{
        const name = selCmpt.name;
        const hasScales = (0, $giuv5.default).has(selCmpt);
        const anchor = name + $99588877cb159974$var$ANCHOR;
        const { x: x, y: y } = selCmpt.project.hasChannel;
        let events = (0, $bFDDQ.selector)(selCmpt.translate, "scope");
        if (!hasScales) events = events.map((e)=>(e.between[0].markname = name + (0, $7LjUF.BRUSH), e));
        signals.push({
            name: anchor,
            value: {},
            on: [
                {
                    events: events.map((e)=>e.between[0]),
                    update: "{x: x(unit), y: y(unit)" + (x !== undefined ? ", extent_x: " + (hasScales ? (0, $giuv5.domain)(model, (0, $fWfT0.X)) : `slice(${x.signals.visual})`) : "") + (y !== undefined ? ", extent_y: " + (hasScales ? (0, $giuv5.domain)(model, (0, $fWfT0.Y)) : `slice(${y.signals.visual})`) : "") + "}"
                }
            ]
        }, {
            name: name + $99588877cb159974$var$DELTA,
            value: {},
            on: [
                {
                    events: events,
                    update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`
                }
            ]
        });
        if (x !== undefined) $99588877cb159974$var$onDelta(model, selCmpt, x, "width", signals);
        if (y !== undefined) $99588877cb159974$var$onDelta(model, selCmpt, y, "height", signals);
        return signals;
    }
};
var $99588877cb159974$export$2e2bcd8739ae039 = $99588877cb159974$var$translate;
function $99588877cb159974$var$onDelta(model, selCmpt, proj, size, signals) {
    var _a;
    const name = selCmpt.name;
    const anchor = name + $99588877cb159974$var$ANCHOR;
    const delta = name + $99588877cb159974$var$DELTA;
    const channel = proj.channel;
    const hasScales = (0, $giuv5.default).has(selCmpt);
    const signal = signals.filter((s)=>s.name === proj.signals[hasScales ? "data" : "visual"])[0];
    const sizeSg = model.getSizeSignalRef(size).signal;
    const scaleCmpt = model.getScaleComponent(channel);
    const scaleType = scaleCmpt.get("type");
    const sign = hasScales && channel === (0, $fWfT0.X) ? "-" : ""; // Invert delta when panning x-scales.
    const extent = `${anchor}.extent_${channel}`;
    const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);
    const panFn = !hasScales ? "panLinear" : scaleType === "log" ? "panLog" : scaleType === "pow" ? "panPow" : "panLinear";
    const update = `${panFn}(${extent}, ${offset}` + (hasScales && scaleType === "pow" ? `, ${(_a = scaleCmpt.get("exponent")) !== null && _a !== void 0 ? _a : 1}` : "") + ")";
    signal.on.push({
        events: {
            signal: delta
        },
        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
    });
}

});

parcelRegister("gwz4h", function(module, exports) {

$parcel$export(module.exports, "default", () => $c07ad6448fa07fa3$export$2e2bcd8739ae039);

var $bFDDQ = parcelRequire("bFDDQ");

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $7LjUF = parcelRequire("7LjUF");

var $giuv5 = parcelRequire("giuv5");
const $c07ad6448fa07fa3$var$ANCHOR = "_zoom_anchor";
const $c07ad6448fa07fa3$var$DELTA = "_zoom_delta";
const $c07ad6448fa07fa3$var$zoom = {
    has: (selCmpt)=>{
        return selCmpt.type === "interval" && selCmpt.zoom;
    },
    signals: (model, selCmpt, signals)=>{
        const name = selCmpt.name;
        const hasScales = (0, $giuv5.default).has(selCmpt);
        const delta = name + $c07ad6448fa07fa3$var$DELTA;
        const { x: x, y: y } = selCmpt.project.hasChannel;
        const sx = (0, $2bi3s.stringValue)(model.scaleName((0, $fWfT0.X)));
        const sy = (0, $2bi3s.stringValue)(model.scaleName((0, $fWfT0.Y)));
        let events = (0, $bFDDQ.selector)(selCmpt.zoom, "scope");
        if (!hasScales) events = events.map((e)=>(e.markname = name + (0, $7LjUF.BRUSH), e));
        signals.push({
            name: name + $c07ad6448fa07fa3$var$ANCHOR,
            on: [
                {
                    events: events,
                    update: !hasScales ? `{x: x(unit), y: y(unit)}` : "{" + [
                        sx ? `x: invert(${sx}, x(unit))` : "",
                        sy ? `y: invert(${sy}, y(unit))` : ""
                    ].filter((expr)=>!!expr).join(", ") + "}"
                }
            ]
        }, {
            name: delta,
            on: [
                {
                    events: events,
                    force: true,
                    update: "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
                }
            ]
        });
        if (x !== undefined) $c07ad6448fa07fa3$var$onDelta(model, selCmpt, x, "width", signals);
        if (y !== undefined) $c07ad6448fa07fa3$var$onDelta(model, selCmpt, y, "height", signals);
        return signals;
    }
};
var $c07ad6448fa07fa3$export$2e2bcd8739ae039 = $c07ad6448fa07fa3$var$zoom;
function $c07ad6448fa07fa3$var$onDelta(model, selCmpt, proj, size, signals) {
    var _a;
    const name = selCmpt.name;
    const channel = proj.channel;
    const hasScales = (0, $giuv5.default).has(selCmpt);
    const signal = signals.filter((s)=>s.name === proj.signals[hasScales ? "data" : "visual"])[0];
    const sizeSg = model.getSizeSignalRef(size).signal;
    const scaleCmpt = model.getScaleComponent(channel);
    const scaleType = scaleCmpt.get("type");
    const base = hasScales ? (0, $giuv5.domain)(model, channel) : signal.name;
    const delta = name + $c07ad6448fa07fa3$var$DELTA;
    const anchor = `${name}${$c07ad6448fa07fa3$var$ANCHOR}.${channel}`;
    const zoomFn = !hasScales ? "zoomLinear" : scaleType === "log" ? "zoomLog" : scaleType === "pow" ? "zoomPow" : "zoomLinear";
    const update = `${zoomFn}(${base}, ${anchor}, ${delta}` + (hasScales && scaleType === "pow" ? `, ${(_a = scaleCmpt.get("exponent")) !== null && _a !== void 0 ? _a : 1}` : "") + ")";
    signal.on.push({
        events: {
            signal: delta
        },
        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
    });
}

});




parcelRegister("fR44M", function(module, exports) {

$parcel$export(module.exports, "singleOrMultiSignals", () => $b8aef7adb2e88ae7$export$e2b3a7d3880d8773);
$parcel$export(module.exports, "default", () => $b8aef7adb2e88ae7$export$2e2bcd8739ae039);

var $2bi3s = parcelRequire("2bi3s");

var $Wddys = parcelRequire("Wddys");

var $hsVt4 = parcelRequire("hsVt4");
function $b8aef7adb2e88ae7$export$e2b3a7d3880d8773(model, selCmpt) {
    const name = selCmpt.name;
    const fieldsSg = name + (0, $hsVt4.TUPLE_FIELDS);
    const project = selCmpt.project;
    const datum = "(item().isVoronoi ? datum.datum : datum)";
    const values = project.items.map((p)=>{
        const fieldDef = model.fieldDef(p.channel);
        // Binned fields should capture extents, for a range test against the raw field.
        return fieldDef && fieldDef.bin ? `[${datum}[${(0, $2bi3s.stringValue)(model.vgField(p.channel, {}))}], ` + `${datum}[${(0, $2bi3s.stringValue)(model.vgField(p.channel, {
            binSuffix: "end"
        }))}]]` : `${datum}[${(0, $2bi3s.stringValue)(p.field)}]`;
    }).join(", ");
    // Only add a discrete selection to the store if a datum is present _and_
    // the interaction isn't occurring on a group mark. This guards against
    // polluting interactive state with invalid values in faceted displays
    // as the group marks are also data-driven. We force the update to account
    // for constant null states but varying toggles (e.g., shift-click in
    // whitespace followed by a click in whitespace; the store should only
    // be cleared on the second click).
    const update = `unit: ${(0, $Wddys.unitName)(model)}, fields: ${fieldsSg}, values`;
    const events = selCmpt.events;
    return [
        {
            name: name + (0, $Wddys.TUPLE),
            on: events ? [
                {
                    events: events,
                    update: `datum && item().mark.marktype !== 'group' ? {${update}: [${values}]} : null`,
                    force: true
                }
            ] : []
        }
    ];
}
const $b8aef7adb2e88ae7$var$multi = {
    signals: $b8aef7adb2e88ae7$export$e2b3a7d3880d8773,
    modifyExpr: (model, selCmpt)=>{
        const tpl = selCmpt.name + (0, $Wddys.TUPLE);
        return tpl + ", " + (selCmpt.resolve === "global" ? "null" : `{unit: ${(0, $Wddys.unitName)(model)}}`);
    }
};
var $b8aef7adb2e88ae7$export$2e2bcd8739ae039 = $b8aef7adb2e88ae7$var$multi;

});

parcelRegister("6Qsjr", function(module, exports) {

$parcel$export(module.exports, "default", () => $4fbd8fb401346e7c$export$2e2bcd8739ae039);

var $Wddys = parcelRequire("Wddys");

var $fR44M = parcelRequire("fR44M");
const $4fbd8fb401346e7c$var$single = {
    signals: (0, $fR44M.singleOrMultiSignals),
    modifyExpr: (model, selCmpt)=>{
        const tpl = selCmpt.name + (0, $Wddys.TUPLE);
        return tpl + ", " + (selCmpt.resolve === "global" ? "true" : `{unit: ${(0, $Wddys.unitName)(model)}}`);
    }
};
var $4fbd8fb401346e7c$export$2e2bcd8739ae039 = $4fbd8fb401346e7c$var$single;

});


parcelRegister("hgVkC", function(module, exports) {

$parcel$export(module.exports, "FilterNode", () => $c93067288b2b820a$export$35326f0a29776c1a);

var $7k4G6 = parcelRequire("7k4G6");

var $in3G6 = parcelRequire("in3G6");

var $71IWl = parcelRequire("71IWl");

var $ik5zD = parcelRequire("ik5zD");
class $c93067288b2b820a$export$35326f0a29776c1a extends (0, $71IWl.DataFlowNode) {
    constructor(parent, model, filter){
        super(parent);
        this.model = model;
        this.filter = filter;
        // TODO: refactor this to not take a node and
        // then add a static function makeFromOperand and make the constructor take only an expression
        this.expr = (0, $in3G6.expression)(this.model, this.filter, this);
        this._dependentFields = (0, $ik5zD.getDependentFields)(this.expr);
    }
    clone() {
        return new $c93067288b2b820a$export$35326f0a29776c1a(null, this.model, (0, $7k4G6.duplicate)(this.filter));
    }
    dependentFields() {
        return this._dependentFields;
    }
    producedFields() {
        return new Set(); // filter does not produce any new fields
    }
    assemble() {
        return {
            type: "filter",
            expr: this.expr
        };
    }
    hash() {
        return `Filter ${this.expr}`;
    }
}

});
parcelRegister("ik5zD", function(module, exports) {

$parcel$export(module.exports, "getDependentFields", () => $d56e6b159c6fcf45$export$1348108ac1ca3562);

var $c6oBY = parcelRequire("c6oBY");
function $d56e6b159c6fcf45$var$getName(node) {
    const name = [];
    if (node.type === "Identifier") return [
        node.name
    ];
    if (node.type === "Literal") return [
        node.value
    ];
    if (node.type === "MemberExpression") {
        name.push(...$d56e6b159c6fcf45$var$getName(node.object));
        name.push(...$d56e6b159c6fcf45$var$getName(node.property));
    }
    return name;
}
function $d56e6b159c6fcf45$var$startsWithDatum(node) {
    if (node.object.type === "MemberExpression") return $d56e6b159c6fcf45$var$startsWithDatum(node.object);
    return node.object.name === "datum";
}
function $d56e6b159c6fcf45$export$1348108ac1ca3562(expression) {
    const ast = (0, $c6oBY.parse)(expression);
    const dependents = new Set();
    ast.visit((node)=>{
        if (node.type === "MemberExpression" && $d56e6b159c6fcf45$var$startsWithDatum(node)) dependents.add($d56e6b159c6fcf45$var$getName(node).slice(1).join("."));
    });
    return dependents;
}

});
parcelRegister("c6oBY", function(module, exports) {

$parcel$export(module.exports, "parse", () => $8cf922ec4f56efdd$export$98e6a39c04603d36);

var $kW1DX = parcelRequire("kW1DX");
const $8cf922ec4f56efdd$export$556f6b8307a139f5 = "RawCode";
const $8cf922ec4f56efdd$export$e175ae9e414693bc = "Literal";
const $8cf922ec4f56efdd$export$41b04b3a73e7216d = "Property";
const $8cf922ec4f56efdd$export$989167234458594d = "Identifier";
const $8cf922ec4f56efdd$export$30253b9cf92e4d1c = "ArrayExpression";
const $8cf922ec4f56efdd$export$5351bc98fa48e09c = "BinaryExpression";
const $8cf922ec4f56efdd$export$6f3d80189eb72cd4 = "CallExpression";
const $8cf922ec4f56efdd$export$12447f42bd680fc8 = "ConditionalExpression";
const $8cf922ec4f56efdd$export$a4a3b58572d4d142 = "LogicalExpression";
const $8cf922ec4f56efdd$export$d37226d703db8d60 = "MemberExpression";
const $8cf922ec4f56efdd$export$aabf29a2b17a2b95 = "ObjectExpression";
const $8cf922ec4f56efdd$export$b832e164a8af4bc7 = "UnaryExpression";
function $8cf922ec4f56efdd$export$ace047af85406962(type) {
    this.type = type;
}
$8cf922ec4f56efdd$export$ace047af85406962.prototype.visit = function(visitor) {
    let c, i, n;
    if (visitor(this)) return 1;
    for(c = $8cf922ec4f56efdd$var$children(this), i = 0, n = c.length; i < n; ++i){
        if (c[i].visit(visitor)) return 1;
    }
};
function $8cf922ec4f56efdd$var$children(node) {
    switch(node.type){
        case $8cf922ec4f56efdd$export$30253b9cf92e4d1c:
            return node.elements;
        case $8cf922ec4f56efdd$export$5351bc98fa48e09c:
        case $8cf922ec4f56efdd$export$a4a3b58572d4d142:
            return [
                node.left,
                node.right
            ];
        case $8cf922ec4f56efdd$export$6f3d80189eb72cd4:
            return [
                node.callee
            ].concat(node.arguments);
        case $8cf922ec4f56efdd$export$12447f42bd680fc8:
            return [
                node.test,
                node.consequent,
                node.alternate
            ];
        case $8cf922ec4f56efdd$export$d37226d703db8d60:
            return [
                node.object,
                node.property
            ];
        case $8cf922ec4f56efdd$export$aabf29a2b17a2b95:
            return node.properties;
        case $8cf922ec4f56efdd$export$41b04b3a73e7216d:
            return [
                node.key,
                node.value
            ];
        case $8cf922ec4f56efdd$export$b832e164a8af4bc7:
            return [
                node.argument
            ];
        case $8cf922ec4f56efdd$export$989167234458594d:
        case $8cf922ec4f56efdd$export$e175ae9e414693bc:
        case $8cf922ec4f56efdd$export$556f6b8307a139f5:
        default:
            return [];
    }
}
/*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:

  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ var $8cf922ec4f56efdd$var$TokenName, $8cf922ec4f56efdd$var$source, $8cf922ec4f56efdd$var$index, $8cf922ec4f56efdd$var$length, $8cf922ec4f56efdd$var$lookahead;
var $8cf922ec4f56efdd$var$TokenBooleanLiteral = 1, $8cf922ec4f56efdd$var$TokenEOF = 2, $8cf922ec4f56efdd$var$TokenIdentifier = 3, $8cf922ec4f56efdd$var$TokenKeyword = 4, $8cf922ec4f56efdd$var$TokenNullLiteral = 5, $8cf922ec4f56efdd$var$TokenNumericLiteral = 6, $8cf922ec4f56efdd$var$TokenPunctuator = 7, $8cf922ec4f56efdd$var$TokenStringLiteral = 8, $8cf922ec4f56efdd$var$TokenRegularExpression = 9;
$8cf922ec4f56efdd$var$TokenName = {};
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenBooleanLiteral] = "Boolean";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenEOF] = "<end>";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenIdentifier] = "Identifier";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenKeyword] = "Keyword";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenNullLiteral] = "Null";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenNumericLiteral] = "Numeric";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenPunctuator] = "Punctuator";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenStringLiteral] = "String";
$8cf922ec4f56efdd$var$TokenName[$8cf922ec4f56efdd$var$TokenRegularExpression] = "RegularExpression";
var $8cf922ec4f56efdd$var$SyntaxArrayExpression = "ArrayExpression", $8cf922ec4f56efdd$var$SyntaxBinaryExpression = "BinaryExpression", $8cf922ec4f56efdd$var$SyntaxCallExpression = "CallExpression", $8cf922ec4f56efdd$var$SyntaxConditionalExpression = "ConditionalExpression", $8cf922ec4f56efdd$var$SyntaxIdentifier = "Identifier", $8cf922ec4f56efdd$var$SyntaxLiteral = "Literal", $8cf922ec4f56efdd$var$SyntaxLogicalExpression = "LogicalExpression", $8cf922ec4f56efdd$var$SyntaxMemberExpression = "MemberExpression", $8cf922ec4f56efdd$var$SyntaxObjectExpression = "ObjectExpression", $8cf922ec4f56efdd$var$SyntaxProperty = "Property", $8cf922ec4f56efdd$var$SyntaxUnaryExpression = "UnaryExpression"; // Error messages should be identical to V8.
var $8cf922ec4f56efdd$var$MessageUnexpectedToken = "Unexpected token %0", $8cf922ec4f56efdd$var$MessageUnexpectedNumber = "Unexpected number", $8cf922ec4f56efdd$var$MessageUnexpectedString = "Unexpected string", $8cf922ec4f56efdd$var$MessageUnexpectedIdentifier = "Unexpected identifier", $8cf922ec4f56efdd$var$MessageUnexpectedReserved = "Unexpected reserved word", $8cf922ec4f56efdd$var$MessageUnexpectedEOS = "Unexpected end of input", $8cf922ec4f56efdd$var$MessageInvalidRegExp = "Invalid regular expression", $8cf922ec4f56efdd$var$MessageUnterminatedRegExp = "Invalid regular expression: missing /", $8cf922ec4f56efdd$var$MessageStrictOctalLiteral = "Octal literals are not allowed in strict mode.", $8cf922ec4f56efdd$var$MessageStrictDuplicateProperty = "Duplicate data property in object literal not allowed in strict mode";
var $8cf922ec4f56efdd$var$ILLEGAL = "ILLEGAL", $8cf922ec4f56efdd$var$DISABLED = "Disabled."; // See also tools/generate-unicode-regex.py.
var $8cf922ec4f56efdd$var$RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"), // eslint-disable-next-line no-misleading-character-class
$8cf922ec4f56efdd$var$RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"); // Ensure the condition is true, otherwise throw an error.
// This is only to have a better contract semantic, i.e. another safety net
// to catch a logic error. The condition shall be fulfilled in normal case.
// Do NOT use this to enforce a certain condition on any user input.
function $8cf922ec4f56efdd$var$assert(condition, message) {
    /* istanbul ignore next */ if (!condition) throw new Error("ASSERT: " + message);
}
function $8cf922ec4f56efdd$var$isDecimalDigit(ch) {
    return ch >= 0x30 && ch <= 0x39; // 0..9
}
function $8cf922ec4f56efdd$var$isHexDigit(ch) {
    return "0123456789abcdefABCDEF".indexOf(ch) >= 0;
}
function $8cf922ec4f56efdd$var$isOctalDigit(ch) {
    return "01234567".indexOf(ch) >= 0;
} // 7.2 White Space
function $8cf922ec4f56efdd$var$isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [
        0x1680,
        0x180E,
        0x2000,
        0x2001,
        0x2002,
        0x2003,
        0x2004,
        0x2005,
        0x2006,
        0x2007,
        0x2008,
        0x2009,
        0x200A,
        0x202F,
        0x205F,
        0x3000,
        0xFEFF
    ].indexOf(ch) >= 0;
} // 7.3 Line Terminators
function $8cf922ec4f56efdd$var$isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
} // 7.6 Identifier Names and Identifiers
function $8cf922ec4f56efdd$var$isIdentifierStart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && $8cf922ec4f56efdd$var$RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
}
function $8cf922ec4f56efdd$var$isIdentifierPart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch >= 0x30 && ch <= 0x39 || // 0..9
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && $8cf922ec4f56efdd$var$RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
} // 7.6.1.1 Keywords
const $8cf922ec4f56efdd$var$keywords = {
    "if": 1,
    "in": 1,
    "do": 1,
    "var": 1,
    "for": 1,
    "new": 1,
    "try": 1,
    "let": 1,
    "this": 1,
    "else": 1,
    "case": 1,
    "void": 1,
    "with": 1,
    "enum": 1,
    "while": 1,
    "break": 1,
    "catch": 1,
    "throw": 1,
    "const": 1,
    "yield": 1,
    "class": 1,
    "super": 1,
    "return": 1,
    "typeof": 1,
    "delete": 1,
    "switch": 1,
    "export": 1,
    "import": 1,
    "public": 1,
    "static": 1,
    "default": 1,
    "finally": 1,
    "extends": 1,
    "package": 1,
    "private": 1,
    "function": 1,
    "continue": 1,
    "debugger": 1,
    "interface": 1,
    "protected": 1,
    "instanceof": 1,
    "implements": 1
};
function $8cf922ec4f56efdd$var$skipComment() {
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        const ch = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index);
        if ($8cf922ec4f56efdd$var$isWhiteSpace(ch) || $8cf922ec4f56efdd$var$isLineTerminator(ch)) ++$8cf922ec4f56efdd$var$index;
        else break;
    }
}
function $8cf922ec4f56efdd$var$scanHexEscape(prefix) {
    var i, len, ch, code = 0;
    len = prefix === "u" ? 4 : 2;
    for(i = 0; i < len; ++i)if ($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length && $8cf922ec4f56efdd$var$isHexDigit($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index])) {
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    } else $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    return String.fromCharCode(code);
}
function $8cf922ec4f56efdd$var$scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;
    ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
    code = 0; // At least, one hex digit is required.
    if (ch === "}") $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        if (!$8cf922ec4f56efdd$var$isHexDigit(ch)) break;
        code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
    }
    if (code > 0x10FFFF || ch !== "}") $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
     // UTF-16 Encoding
    if (code <= 0xFFFF) return String.fromCharCode(code);
    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
}
function $8cf922ec4f56efdd$var$getEscapedIdentifier() {
    var ch, id;
    ch = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index++);
    id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
    if (ch === 0x5C) {
        if ($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index) !== 0x75) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
        ++$8cf922ec4f56efdd$var$index;
        ch = $8cf922ec4f56efdd$var$scanHexEscape("u");
        if (!ch || ch === "\\" || !$8cf922ec4f56efdd$var$isIdentifierStart(ch.charCodeAt(0))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
        id = ch;
    }
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        ch = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index);
        if (!$8cf922ec4f56efdd$var$isIdentifierPart(ch)) break;
        ++$8cf922ec4f56efdd$var$index;
        id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
            id = id.substr(0, id.length - 1);
            if ($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index) !== 0x75) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
            ++$8cf922ec4f56efdd$var$index;
            ch = $8cf922ec4f56efdd$var$scanHexEscape("u");
            if (!ch || ch === "\\" || !$8cf922ec4f56efdd$var$isIdentifierPart(ch.charCodeAt(0))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
            id += ch;
        }
    }
    return id;
}
function $8cf922ec4f56efdd$var$getIdentifier() {
    var start, ch;
    start = $8cf922ec4f56efdd$var$index++;
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        ch = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index);
        if (ch === 0x5C) {
            // Blackslash (U+005C) marks Unicode escape sequence.
            $8cf922ec4f56efdd$var$index = start;
            return $8cf922ec4f56efdd$var$getEscapedIdentifier();
        }
        if ($8cf922ec4f56efdd$var$isIdentifierPart(ch)) ++$8cf922ec4f56efdd$var$index;
        else break;
    }
    return $8cf922ec4f56efdd$var$source.slice(start, $8cf922ec4f56efdd$var$index);
}
function $8cf922ec4f56efdd$var$scanIdentifier() {
    var start, id, type;
    start = $8cf922ec4f56efdd$var$index; // Backslash (U+005C) starts an escaped character.
    id = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index) === 0x5C ? $8cf922ec4f56efdd$var$getEscapedIdentifier() : $8cf922ec4f56efdd$var$getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.
    if (id.length === 1) type = $8cf922ec4f56efdd$var$TokenIdentifier;
    else if ($8cf922ec4f56efdd$var$keywords.hasOwnProperty(id)) // eslint-disable-line no-prototype-builtins
    type = $8cf922ec4f56efdd$var$TokenKeyword;
    else if (id === "null") type = $8cf922ec4f56efdd$var$TokenNullLiteral;
    else if (id === "true" || id === "false") type = $8cf922ec4f56efdd$var$TokenBooleanLiteral;
    else type = $8cf922ec4f56efdd$var$TokenIdentifier;
    return {
        type: type,
        value: id,
        start: start,
        end: $8cf922ec4f56efdd$var$index
    };
} // 7.7 Punctuators
function $8cf922ec4f56efdd$var$scanPunctuator() {
    var start = $8cf922ec4f56efdd$var$index, code = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index), code2, ch1 = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index], ch2, ch3, ch4;
    switch(code){
        // Check for most common single-character punctuators.
        case 0x2E:
        case 0x28:
        case 0x29:
        case 0x3B:
        case 0x2C:
        case 0x7B:
        case 0x7D:
        case 0x5B:
        case 0x5D:
        case 0x3A:
        case 0x3F:
        case 0x7E:
            // ~
            ++$8cf922ec4f56efdd$var$index;
            return {
                type: $8cf922ec4f56efdd$var$TokenPunctuator,
                value: String.fromCharCode(code),
                start: start,
                end: $8cf922ec4f56efdd$var$index
            };
        default:
            code2 = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index + 1); // '=' (U+003D) marks an assignment or comparison operator.
            if (code2 === 0x3D) switch(code){
                case 0x2B:
                case 0x2D:
                case 0x2F:
                case 0x3C:
                case 0x3E:
                case 0x5E:
                case 0x7C:
                case 0x25:
                case 0x26:
                case 0x2A:
                    // *
                    $8cf922ec4f56efdd$var$index += 2;
                    return {
                        type: $8cf922ec4f56efdd$var$TokenPunctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        start: start,
                        end: $8cf922ec4f56efdd$var$index
                    };
                case 0x21:
                case 0x3D:
                    // =
                    $8cf922ec4f56efdd$var$index += 2; // !== and ===
                    if ($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index) === 0x3D) ++$8cf922ec4f56efdd$var$index;
                    return {
                        type: $8cf922ec4f56efdd$var$TokenPunctuator,
                        value: $8cf922ec4f56efdd$var$source.slice(start, $8cf922ec4f56efdd$var$index),
                        start: start,
                        end: $8cf922ec4f56efdd$var$index
                    };
            }
    } // 4-character punctuator: >>>=
    ch4 = $8cf922ec4f56efdd$var$source.substr($8cf922ec4f56efdd$var$index, 4);
    if (ch4 === ">>>=") {
        $8cf922ec4f56efdd$var$index += 4;
        return {
            type: $8cf922ec4f56efdd$var$TokenPunctuator,
            value: ch4,
            start: start,
            end: $8cf922ec4f56efdd$var$index
        };
    } // 3-character punctuators: === !== >>> <<= >>=
    ch3 = ch4.substr(0, 3);
    if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
        $8cf922ec4f56efdd$var$index += 3;
        return {
            type: $8cf922ec4f56efdd$var$TokenPunctuator,
            value: ch3,
            start: start,
            end: $8cf922ec4f56efdd$var$index
        };
    } // Other 2-character punctuators: ++ -- << >> && ||
    ch2 = ch3.substr(0, 2);
    if (ch1 === ch2[1] && "+-<>&|".indexOf(ch1) >= 0 || ch2 === "=>") {
        $8cf922ec4f56efdd$var$index += 2;
        return {
            type: $8cf922ec4f56efdd$var$TokenPunctuator,
            value: ch2,
            start: start,
            end: $8cf922ec4f56efdd$var$index
        };
    }
    if (ch2 === "//") $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
     // 1-character punctuators: < > = ! + - * % & | ^ /
    if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
        ++$8cf922ec4f56efdd$var$index;
        return {
            type: $8cf922ec4f56efdd$var$TokenPunctuator,
            value: ch1,
            start: start,
            end: $8cf922ec4f56efdd$var$index
        };
    }
    $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
} // 7.8.3 Numeric Literals
function $8cf922ec4f56efdd$var$scanHexLiteral(start) {
    let number = "";
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        if (!$8cf922ec4f56efdd$var$isHexDigit($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index])) break;
        number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
    }
    if (number.length === 0) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    if ($8cf922ec4f56efdd$var$isIdentifierStart($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    return {
        type: $8cf922ec4f56efdd$var$TokenNumericLiteral,
        value: parseInt("0x" + number, 16),
        start: start,
        end: $8cf922ec4f56efdd$var$index
    };
}
function $8cf922ec4f56efdd$var$scanOctalLiteral(start) {
    let number = "0" + $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        if (!$8cf922ec4f56efdd$var$isOctalDigit($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index])) break;
        number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
    }
    if ($8cf922ec4f56efdd$var$isIdentifierStart($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index)) || $8cf922ec4f56efdd$var$isDecimalDigit($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    return {
        type: $8cf922ec4f56efdd$var$TokenNumericLiteral,
        value: parseInt(number, 8),
        octal: true,
        start: start,
        end: $8cf922ec4f56efdd$var$index
    };
}
function $8cf922ec4f56efdd$var$scanNumericLiteral() {
    var number, start, ch;
    ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
    $8cf922ec4f56efdd$var$assert($8cf922ec4f56efdd$var$isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
    start = $8cf922ec4f56efdd$var$index;
    number = "";
    if (ch !== ".") {
        number = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index]; // Hex number starts with '0x'.
        // Octal number starts with '0'.
        if (number === "0") {
            if (ch === "x" || ch === "X") {
                ++$8cf922ec4f56efdd$var$index;
                return $8cf922ec4f56efdd$var$scanHexLiteral(start);
            }
            if ($8cf922ec4f56efdd$var$isOctalDigit(ch)) return $8cf922ec4f56efdd$var$scanOctalLiteral(start);
             // decimal number starts with '0' such as '09' is illegal.
            if (ch && $8cf922ec4f56efdd$var$isDecimalDigit(ch.charCodeAt(0))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
        }
        while($8cf922ec4f56efdd$var$isDecimalDigit($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index)))number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
    }
    if (ch === ".") {
        number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        while($8cf922ec4f56efdd$var$isDecimalDigit($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index)))number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
    }
    if (ch === "e" || ch === "E") {
        number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
        if (ch === "+" || ch === "-") number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        if ($8cf922ec4f56efdd$var$isDecimalDigit($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index))) while($8cf922ec4f56efdd$var$isDecimalDigit($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index)))number += $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        else $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    }
    if ($8cf922ec4f56efdd$var$isIdentifierStart($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    return {
        type: $8cf922ec4f56efdd$var$TokenNumericLiteral,
        value: parseFloat(number),
        start: start,
        end: $8cf922ec4f56efdd$var$index
    };
} // 7.8.4 String Literals
function $8cf922ec4f56efdd$var$scanStringLiteral() {
    var str = "", quote, start, ch, code, octal = false;
    quote = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
    $8cf922ec4f56efdd$var$assert(quote === "'" || quote === '"', "String literal must starts with a quote");
    start = $8cf922ec4f56efdd$var$index;
    ++$8cf922ec4f56efdd$var$index;
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        if (ch === quote) {
            quote = "";
            break;
        } else if (ch === "\\") {
            ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
            if (!ch || !$8cf922ec4f56efdd$var$isLineTerminator(ch.charCodeAt(0))) switch(ch){
                case "u":
                case "x":
                    if ($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index] === "{") {
                        ++$8cf922ec4f56efdd$var$index;
                        str += $8cf922ec4f56efdd$var$scanUnicodeCodePointEscape();
                    } else str += $8cf922ec4f56efdd$var$scanHexEscape(ch);
                    break;
                case "n":
                    str += "\n";
                    break;
                case "r":
                    str += "\r";
                    break;
                case "t":
                    str += "	";
                    break;
                case "b":
                    str += "\b";
                    break;
                case "f":
                    str += "\f";
                    break;
                case "v":
                    str += "\v";
                    break;
                default:
                    if ($8cf922ec4f56efdd$var$isOctalDigit(ch)) {
                        code = "01234567".indexOf(ch); // \0 is not octal escape sequence
                        if (code !== 0) octal = true;
                        if ($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length && $8cf922ec4f56efdd$var$isOctalDigit($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index])) {
                            octal = true;
                            code = code * 8 + "01234567".indexOf($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++]); // 3 digits are only allowed when string starts
                            // with 0, 1, 2, 3
                            if ("0123".indexOf(ch) >= 0 && $8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length && $8cf922ec4f56efdd$var$isOctalDigit($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index])) code = code * 8 + "01234567".indexOf($8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++]);
                        }
                        str += String.fromCharCode(code);
                    } else str += ch;
                    break;
            }
            else if (ch === "\r" && $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index] === "\n") ++$8cf922ec4f56efdd$var$index;
        } else if ($8cf922ec4f56efdd$var$isLineTerminator(ch.charCodeAt(0))) break;
        else str += ch;
    }
    if (quote !== "") $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
    return {
        type: $8cf922ec4f56efdd$var$TokenStringLiteral,
        value: str,
        octal: octal,
        start: start,
        end: $8cf922ec4f56efdd$var$index
    };
}
function $8cf922ec4f56efdd$var$testRegExp(pattern, flags) {
    let tmp = pattern;
    if (flags.indexOf("u") >= 0) // Replace each astral symbol and every Unicode code point
    // escape sequence with a single ASCII symbol to avoid throwing on
    // regular expressions that are only valid in combination with the
    // `/u` flag.
    // Note: replacing with the ASCII symbol `x` might cause false
    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
    // perfectly valid pattern that is equivalent to `[a-b]`, but it
    // would be replaced by `[x-b]` which throws an error.
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1)=>{
        if (parseInt($1, 16) <= 0x10FFFF) return "x";
        $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
     // First, detect invalid regular expressions.
    try {
        new RegExp(tmp);
    } catch (e) {
        $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageInvalidRegExp);
    } // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.
    try {
        return new RegExp(pattern, flags);
    } catch (exception) {
        return null;
    }
}
function $8cf922ec4f56efdd$var$scanRegExpBody() {
    var ch, str, classMarker, terminated, body;
    ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
    $8cf922ec4f56efdd$var$assert(ch === "/", "Regular expression literal must start with a slash");
    str = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
    classMarker = false;
    terminated = false;
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++];
        str += ch;
        if (ch === "\\") {
            ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index++]; // ECMA-262 7.8.5
            if ($8cf922ec4f56efdd$var$isLineTerminator(ch.charCodeAt(0))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnterminatedRegExp);
            str += ch;
        } else if ($8cf922ec4f56efdd$var$isLineTerminator(ch.charCodeAt(0))) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnterminatedRegExp);
        else if (classMarker) {
            if (ch === "]") classMarker = false;
        } else {
            if (ch === "/") {
                terminated = true;
                break;
            } else if (ch === "[") classMarker = true;
        }
    }
    if (!terminated) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnterminatedRegExp);
     // Exclude leading and trailing slash.
    body = str.substr(1, str.length - 2);
    return {
        value: body,
        literal: str
    };
}
function $8cf922ec4f56efdd$var$scanRegExpFlags() {
    var ch, str, flags;
    str = "";
    flags = "";
    while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        ch = $8cf922ec4f56efdd$var$source[$8cf922ec4f56efdd$var$index];
        if (!$8cf922ec4f56efdd$var$isIdentifierPart(ch.charCodeAt(0))) break;
        ++$8cf922ec4f56efdd$var$index;
        if (ch === "\\" && $8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageUnexpectedToken, $8cf922ec4f56efdd$var$ILLEGAL);
        else {
            flags += ch;
            str += ch;
        }
    }
    if (flags.search(/[^gimuy]/g) >= 0) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageInvalidRegExp, flags);
    return {
        value: flags,
        literal: str
    };
}
function $8cf922ec4f56efdd$var$scanRegExp() {
    var start, body, flags, value;
    $8cf922ec4f56efdd$var$lookahead = null;
    $8cf922ec4f56efdd$var$skipComment();
    start = $8cf922ec4f56efdd$var$index;
    body = $8cf922ec4f56efdd$var$scanRegExpBody();
    flags = $8cf922ec4f56efdd$var$scanRegExpFlags();
    value = $8cf922ec4f56efdd$var$testRegExp(body.value, flags.value);
    return {
        literal: body.literal + flags.literal,
        value: value,
        regex: {
            pattern: body.value,
            flags: flags.value
        },
        start: start,
        end: $8cf922ec4f56efdd$var$index
    };
}
function $8cf922ec4f56efdd$var$isIdentifierName(token) {
    return token.type === $8cf922ec4f56efdd$var$TokenIdentifier || token.type === $8cf922ec4f56efdd$var$TokenKeyword || token.type === $8cf922ec4f56efdd$var$TokenBooleanLiteral || token.type === $8cf922ec4f56efdd$var$TokenNullLiteral;
}
function $8cf922ec4f56efdd$var$advance() {
    $8cf922ec4f56efdd$var$skipComment();
    if ($8cf922ec4f56efdd$var$index >= $8cf922ec4f56efdd$var$length) return {
        type: $8cf922ec4f56efdd$var$TokenEOF,
        start: $8cf922ec4f56efdd$var$index,
        end: $8cf922ec4f56efdd$var$index
    };
    const ch = $8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index);
    if ($8cf922ec4f56efdd$var$isIdentifierStart(ch)) return $8cf922ec4f56efdd$var$scanIdentifier();
     // Very common: ( and ) and ;
    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) return $8cf922ec4f56efdd$var$scanPunctuator();
     // String literal starts with single quote (U+0027) or double quote (U+0022).
    if (ch === 0x27 || ch === 0x22) return $8cf922ec4f56efdd$var$scanStringLiteral();
     // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.
    if (ch === 0x2E) {
        if ($8cf922ec4f56efdd$var$isDecimalDigit($8cf922ec4f56efdd$var$source.charCodeAt($8cf922ec4f56efdd$var$index + 1))) return $8cf922ec4f56efdd$var$scanNumericLiteral();
        return $8cf922ec4f56efdd$var$scanPunctuator();
    }
    if ($8cf922ec4f56efdd$var$isDecimalDigit(ch)) return $8cf922ec4f56efdd$var$scanNumericLiteral();
    return $8cf922ec4f56efdd$var$scanPunctuator();
}
function $8cf922ec4f56efdd$var$lex() {
    const token = $8cf922ec4f56efdd$var$lookahead;
    $8cf922ec4f56efdd$var$index = token.end;
    $8cf922ec4f56efdd$var$lookahead = $8cf922ec4f56efdd$var$advance();
    $8cf922ec4f56efdd$var$index = token.end;
    return token;
}
function $8cf922ec4f56efdd$var$peek() {
    const pos = $8cf922ec4f56efdd$var$index;
    $8cf922ec4f56efdd$var$lookahead = $8cf922ec4f56efdd$var$advance();
    $8cf922ec4f56efdd$var$index = pos;
}
function $8cf922ec4f56efdd$var$finishArrayExpression(elements) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxArrayExpression);
    node.elements = elements;
    return node;
}
function $8cf922ec4f56efdd$var$finishBinaryExpression(operator, left, right) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962(operator === "||" || operator === "&&" ? $8cf922ec4f56efdd$var$SyntaxLogicalExpression : $8cf922ec4f56efdd$var$SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
}
function $8cf922ec4f56efdd$var$finishCallExpression(callee, args) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
}
function $8cf922ec4f56efdd$var$finishConditionalExpression(test, consequent, alternate) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
}
function $8cf922ec4f56efdd$var$finishIdentifier(name) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxIdentifier);
    node.name = name;
    return node;
}
function $8cf922ec4f56efdd$var$finishLiteral(token) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxLiteral);
    node.value = token.value;
    node.raw = $8cf922ec4f56efdd$var$source.slice(token.start, token.end);
    if (token.regex) {
        if (node.raw === "//") node.raw = "/(?:)/";
        node.regex = token.regex;
    }
    return node;
}
function $8cf922ec4f56efdd$var$finishMemberExpression(accessor, object, property) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxMemberExpression);
    node.computed = accessor === "[";
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
}
function $8cf922ec4f56efdd$var$finishObjectExpression(properties) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxObjectExpression);
    node.properties = properties;
    return node;
}
function $8cf922ec4f56efdd$var$finishProperty(kind, key, value) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
}
function $8cf922ec4f56efdd$var$finishUnaryExpression(operator, argument) {
    const node = new $8cf922ec4f56efdd$export$ace047af85406962($8cf922ec4f56efdd$var$SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
} // Throw an exception
function $8cf922ec4f56efdd$var$throwError(token, messageFormat) {
    var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index)=>{
        $8cf922ec4f56efdd$var$assert(index < args.length, "Message reference must be in range");
        return args[index];
    });
    error = new Error(msg);
    error.index = $8cf922ec4f56efdd$var$index;
    error.description = msg;
    throw error;
} // Throw an exception because of the token.
function $8cf922ec4f56efdd$var$throwUnexpected(token) {
    if (token.type === $8cf922ec4f56efdd$var$TokenEOF) $8cf922ec4f56efdd$var$throwError(token, $8cf922ec4f56efdd$var$MessageUnexpectedEOS);
    if (token.type === $8cf922ec4f56efdd$var$TokenNumericLiteral) $8cf922ec4f56efdd$var$throwError(token, $8cf922ec4f56efdd$var$MessageUnexpectedNumber);
    if (token.type === $8cf922ec4f56efdd$var$TokenStringLiteral) $8cf922ec4f56efdd$var$throwError(token, $8cf922ec4f56efdd$var$MessageUnexpectedString);
    if (token.type === $8cf922ec4f56efdd$var$TokenIdentifier) $8cf922ec4f56efdd$var$throwError(token, $8cf922ec4f56efdd$var$MessageUnexpectedIdentifier);
    if (token.type === $8cf922ec4f56efdd$var$TokenKeyword) $8cf922ec4f56efdd$var$throwError(token, $8cf922ec4f56efdd$var$MessageUnexpectedReserved);
     // BooleanLiteral, NullLiteral, or Punctuator.
    $8cf922ec4f56efdd$var$throwError(token, $8cf922ec4f56efdd$var$MessageUnexpectedToken, token.value);
} // Expect the next token to match the specified punctuator.
// If not, an exception will be thrown.
function $8cf922ec4f56efdd$var$expect(value) {
    const token = $8cf922ec4f56efdd$var$lex();
    if (token.type !== $8cf922ec4f56efdd$var$TokenPunctuator || token.value !== value) $8cf922ec4f56efdd$var$throwUnexpected(token);
} // Return true if the next token matches the specified punctuator.
function $8cf922ec4f56efdd$var$match(value) {
    return $8cf922ec4f56efdd$var$lookahead.type === $8cf922ec4f56efdd$var$TokenPunctuator && $8cf922ec4f56efdd$var$lookahead.value === value;
} // Return true if the next token matches the specified keyword
function $8cf922ec4f56efdd$var$matchKeyword(keyword) {
    return $8cf922ec4f56efdd$var$lookahead.type === $8cf922ec4f56efdd$var$TokenKeyword && $8cf922ec4f56efdd$var$lookahead.value === keyword;
} // 11.1.4 Array Initialiser
function $8cf922ec4f56efdd$var$parseArrayInitialiser() {
    const elements = [];
    $8cf922ec4f56efdd$var$index = $8cf922ec4f56efdd$var$lookahead.start;
    $8cf922ec4f56efdd$var$expect("[");
    while(!$8cf922ec4f56efdd$var$match("]"))if ($8cf922ec4f56efdd$var$match(",")) {
        $8cf922ec4f56efdd$var$lex();
        elements.push(null);
    } else {
        elements.push($8cf922ec4f56efdd$var$parseConditionalExpression());
        if (!$8cf922ec4f56efdd$var$match("]")) $8cf922ec4f56efdd$var$expect(",");
    }
    $8cf922ec4f56efdd$var$lex();
    return $8cf922ec4f56efdd$var$finishArrayExpression(elements);
} // 11.1.5 Object Initialiser
function $8cf922ec4f56efdd$var$parseObjectPropertyKey() {
    $8cf922ec4f56efdd$var$index = $8cf922ec4f56efdd$var$lookahead.start;
    const token = $8cf922ec4f56efdd$var$lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.
    if (token.type === $8cf922ec4f56efdd$var$TokenStringLiteral || token.type === $8cf922ec4f56efdd$var$TokenNumericLiteral) {
        if (token.octal) $8cf922ec4f56efdd$var$throwError(token, $8cf922ec4f56efdd$var$MessageStrictOctalLiteral);
        return $8cf922ec4f56efdd$var$finishLiteral(token);
    }
    return $8cf922ec4f56efdd$var$finishIdentifier(token.value);
}
function $8cf922ec4f56efdd$var$parseObjectProperty() {
    var token, key, id, value;
    $8cf922ec4f56efdd$var$index = $8cf922ec4f56efdd$var$lookahead.start;
    token = $8cf922ec4f56efdd$var$lookahead;
    if (token.type === $8cf922ec4f56efdd$var$TokenIdentifier) {
        id = $8cf922ec4f56efdd$var$parseObjectPropertyKey();
        $8cf922ec4f56efdd$var$expect(":");
        value = $8cf922ec4f56efdd$var$parseConditionalExpression();
        return $8cf922ec4f56efdd$var$finishProperty("init", id, value);
    }
    if (token.type === $8cf922ec4f56efdd$var$TokenEOF || token.type === $8cf922ec4f56efdd$var$TokenPunctuator) $8cf922ec4f56efdd$var$throwUnexpected(token);
    else {
        key = $8cf922ec4f56efdd$var$parseObjectPropertyKey();
        $8cf922ec4f56efdd$var$expect(":");
        value = $8cf922ec4f56efdd$var$parseConditionalExpression();
        return $8cf922ec4f56efdd$var$finishProperty("init", key, value);
    }
}
function $8cf922ec4f56efdd$var$parseObjectInitialiser() {
    var properties = [], property, name, key, map = {}, toString = String;
    $8cf922ec4f56efdd$var$index = $8cf922ec4f56efdd$var$lookahead.start;
    $8cf922ec4f56efdd$var$expect("{");
    while(!$8cf922ec4f56efdd$var$match("}")){
        property = $8cf922ec4f56efdd$var$parseObjectProperty();
        if (property.key.type === $8cf922ec4f56efdd$var$SyntaxIdentifier) name = property.key.name;
        else name = toString(property.key.value);
        key = "$" + name;
        if (Object.prototype.hasOwnProperty.call(map, key)) $8cf922ec4f56efdd$var$throwError({}, $8cf922ec4f56efdd$var$MessageStrictDuplicateProperty);
        else map[key] = true;
        properties.push(property);
        if (!$8cf922ec4f56efdd$var$match("}")) $8cf922ec4f56efdd$var$expect(",");
    }
    $8cf922ec4f56efdd$var$expect("}");
    return $8cf922ec4f56efdd$var$finishObjectExpression(properties);
} // 11.1.6 The Grouping Operator
function $8cf922ec4f56efdd$var$parseGroupExpression() {
    $8cf922ec4f56efdd$var$expect("(");
    const expr = $8cf922ec4f56efdd$var$parseExpression();
    $8cf922ec4f56efdd$var$expect(")");
    return expr;
} // 11.1 Primary Expressions
const $8cf922ec4f56efdd$var$legalKeywords = {
    "if": 1
};
function $8cf922ec4f56efdd$var$parsePrimaryExpression() {
    var type, token, expr;
    if ($8cf922ec4f56efdd$var$match("(")) return $8cf922ec4f56efdd$var$parseGroupExpression();
    if ($8cf922ec4f56efdd$var$match("[")) return $8cf922ec4f56efdd$var$parseArrayInitialiser();
    if ($8cf922ec4f56efdd$var$match("{")) return $8cf922ec4f56efdd$var$parseObjectInitialiser();
    type = $8cf922ec4f56efdd$var$lookahead.type;
    $8cf922ec4f56efdd$var$index = $8cf922ec4f56efdd$var$lookahead.start;
    if (type === $8cf922ec4f56efdd$var$TokenIdentifier || $8cf922ec4f56efdd$var$legalKeywords[$8cf922ec4f56efdd$var$lookahead.value]) expr = $8cf922ec4f56efdd$var$finishIdentifier($8cf922ec4f56efdd$var$lex().value);
    else if (type === $8cf922ec4f56efdd$var$TokenStringLiteral || type === $8cf922ec4f56efdd$var$TokenNumericLiteral) {
        if ($8cf922ec4f56efdd$var$lookahead.octal) $8cf922ec4f56efdd$var$throwError($8cf922ec4f56efdd$var$lookahead, $8cf922ec4f56efdd$var$MessageStrictOctalLiteral);
        expr = $8cf922ec4f56efdd$var$finishLiteral($8cf922ec4f56efdd$var$lex());
    } else if (type === $8cf922ec4f56efdd$var$TokenKeyword) throw new Error($8cf922ec4f56efdd$var$DISABLED);
    else if (type === $8cf922ec4f56efdd$var$TokenBooleanLiteral) {
        token = $8cf922ec4f56efdd$var$lex();
        token.value = token.value === "true";
        expr = $8cf922ec4f56efdd$var$finishLiteral(token);
    } else if (type === $8cf922ec4f56efdd$var$TokenNullLiteral) {
        token = $8cf922ec4f56efdd$var$lex();
        token.value = null;
        expr = $8cf922ec4f56efdd$var$finishLiteral(token);
    } else if ($8cf922ec4f56efdd$var$match("/") || $8cf922ec4f56efdd$var$match("/=")) {
        expr = $8cf922ec4f56efdd$var$finishLiteral($8cf922ec4f56efdd$var$scanRegExp());
        $8cf922ec4f56efdd$var$peek();
    } else $8cf922ec4f56efdd$var$throwUnexpected($8cf922ec4f56efdd$var$lex());
    return expr;
} // 11.2 Left-Hand-Side Expressions
function $8cf922ec4f56efdd$var$parseArguments() {
    const args = [];
    $8cf922ec4f56efdd$var$expect("(");
    if (!$8cf922ec4f56efdd$var$match(")")) while($8cf922ec4f56efdd$var$index < $8cf922ec4f56efdd$var$length){
        args.push($8cf922ec4f56efdd$var$parseConditionalExpression());
        if ($8cf922ec4f56efdd$var$match(")")) break;
        $8cf922ec4f56efdd$var$expect(",");
    }
    $8cf922ec4f56efdd$var$expect(")");
    return args;
}
function $8cf922ec4f56efdd$var$parseNonComputedProperty() {
    $8cf922ec4f56efdd$var$index = $8cf922ec4f56efdd$var$lookahead.start;
    const token = $8cf922ec4f56efdd$var$lex();
    if (!$8cf922ec4f56efdd$var$isIdentifierName(token)) $8cf922ec4f56efdd$var$throwUnexpected(token);
    return $8cf922ec4f56efdd$var$finishIdentifier(token.value);
}
function $8cf922ec4f56efdd$var$parseNonComputedMember() {
    $8cf922ec4f56efdd$var$expect(".");
    return $8cf922ec4f56efdd$var$parseNonComputedProperty();
}
function $8cf922ec4f56efdd$var$parseComputedMember() {
    $8cf922ec4f56efdd$var$expect("[");
    const expr = $8cf922ec4f56efdd$var$parseExpression();
    $8cf922ec4f56efdd$var$expect("]");
    return expr;
}
function $8cf922ec4f56efdd$var$parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;
    expr = $8cf922ec4f56efdd$var$parsePrimaryExpression();
    for(;;){
        if ($8cf922ec4f56efdd$var$match(".")) {
            property = $8cf922ec4f56efdd$var$parseNonComputedMember();
            expr = $8cf922ec4f56efdd$var$finishMemberExpression(".", expr, property);
        } else if ($8cf922ec4f56efdd$var$match("(")) {
            args = $8cf922ec4f56efdd$var$parseArguments();
            expr = $8cf922ec4f56efdd$var$finishCallExpression(expr, args);
        } else if ($8cf922ec4f56efdd$var$match("[")) {
            property = $8cf922ec4f56efdd$var$parseComputedMember();
            expr = $8cf922ec4f56efdd$var$finishMemberExpression("[", expr, property);
        } else break;
    }
    return expr;
} // 11.3 Postfix Expressions
function $8cf922ec4f56efdd$var$parsePostfixExpression() {
    const expr = $8cf922ec4f56efdd$var$parseLeftHandSideExpressionAllowCall();
    if ($8cf922ec4f56efdd$var$lookahead.type === $8cf922ec4f56efdd$var$TokenPunctuator) {
        if ($8cf922ec4f56efdd$var$match("++") || $8cf922ec4f56efdd$var$match("--")) throw new Error($8cf922ec4f56efdd$var$DISABLED);
    }
    return expr;
} // 11.4 Unary Operators
function $8cf922ec4f56efdd$var$parseUnaryExpression() {
    var token, expr;
    if ($8cf922ec4f56efdd$var$lookahead.type !== $8cf922ec4f56efdd$var$TokenPunctuator && $8cf922ec4f56efdd$var$lookahead.type !== $8cf922ec4f56efdd$var$TokenKeyword) expr = $8cf922ec4f56efdd$var$parsePostfixExpression();
    else if ($8cf922ec4f56efdd$var$match("++") || $8cf922ec4f56efdd$var$match("--")) throw new Error($8cf922ec4f56efdd$var$DISABLED);
    else if ($8cf922ec4f56efdd$var$match("+") || $8cf922ec4f56efdd$var$match("-") || $8cf922ec4f56efdd$var$match("~") || $8cf922ec4f56efdd$var$match("!")) {
        token = $8cf922ec4f56efdd$var$lex();
        expr = $8cf922ec4f56efdd$var$parseUnaryExpression();
        expr = $8cf922ec4f56efdd$var$finishUnaryExpression(token.value, expr);
    } else if ($8cf922ec4f56efdd$var$matchKeyword("delete") || $8cf922ec4f56efdd$var$matchKeyword("void") || $8cf922ec4f56efdd$var$matchKeyword("typeof")) throw new Error($8cf922ec4f56efdd$var$DISABLED);
    else expr = $8cf922ec4f56efdd$var$parsePostfixExpression();
    return expr;
}
function $8cf922ec4f56efdd$var$binaryPrecedence(token) {
    let prec = 0;
    if (token.type !== $8cf922ec4f56efdd$var$TokenPunctuator && token.type !== $8cf922ec4f56efdd$var$TokenKeyword) return 0;
    switch(token.value){
        case "||":
            prec = 1;
            break;
        case "&&":
            prec = 2;
            break;
        case "|":
            prec = 3;
            break;
        case "^":
            prec = 4;
            break;
        case "&":
            prec = 5;
            break;
        case "==":
        case "!=":
        case "===":
        case "!==":
            prec = 6;
            break;
        case "<":
        case ">":
        case "<=":
        case ">=":
        case "instanceof":
        case "in":
            prec = 7;
            break;
        case "<<":
        case ">>":
        case ">>>":
            prec = 8;
            break;
        case "+":
        case "-":
            prec = 9;
            break;
        case "*":
        case "/":
        case "%":
            prec = 11;
            break;
    }
    return prec;
} // 11.5 Multiplicative Operators
// 11.6 Additive Operators
// 11.7 Bitwise Shift Operators
// 11.8 Relational Operators
// 11.9 Equality Operators
// 11.10 Binary Bitwise Operators
// 11.11 Binary Logical Operators
function $8cf922ec4f56efdd$var$parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = $8cf922ec4f56efdd$var$lookahead;
    left = $8cf922ec4f56efdd$var$parseUnaryExpression();
    token = $8cf922ec4f56efdd$var$lookahead;
    prec = $8cf922ec4f56efdd$var$binaryPrecedence(token);
    if (prec === 0) return left;
    token.prec = prec;
    $8cf922ec4f56efdd$var$lex();
    markers = [
        marker,
        $8cf922ec4f56efdd$var$lookahead
    ];
    right = $8cf922ec4f56efdd$var$parseUnaryExpression();
    stack = [
        left,
        token,
        right
    ];
    while((prec = $8cf922ec4f56efdd$var$binaryPrecedence($8cf922ec4f56efdd$var$lookahead)) > 0){
        // Reduce: make a binary expression from the three topmost entries.
        while(stack.length > 2 && prec <= stack[stack.length - 2].prec){
            right = stack.pop();
            operator = stack.pop().value;
            left = stack.pop();
            markers.pop();
            expr = $8cf922ec4f56efdd$var$finishBinaryExpression(operator, left, right);
            stack.push(expr);
        } // Shift.
        token = $8cf922ec4f56efdd$var$lex();
        token.prec = prec;
        stack.push(token);
        markers.push($8cf922ec4f56efdd$var$lookahead);
        expr = $8cf922ec4f56efdd$var$parseUnaryExpression();
        stack.push(expr);
    } // Final reduce to clean-up the stack.
    i = stack.length - 1;
    expr = stack[i];
    markers.pop();
    while(i > 1){
        markers.pop();
        expr = $8cf922ec4f56efdd$var$finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
        i -= 2;
    }
    return expr;
} // 11.12 Conditional Operator
function $8cf922ec4f56efdd$var$parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = $8cf922ec4f56efdd$var$parseBinaryExpression();
    if ($8cf922ec4f56efdd$var$match("?")) {
        $8cf922ec4f56efdd$var$lex();
        consequent = $8cf922ec4f56efdd$var$parseConditionalExpression();
        $8cf922ec4f56efdd$var$expect(":");
        alternate = $8cf922ec4f56efdd$var$parseConditionalExpression();
        expr = $8cf922ec4f56efdd$var$finishConditionalExpression(expr, consequent, alternate);
    }
    return expr;
} // 11.14 Comma Operator
function $8cf922ec4f56efdd$var$parseExpression() {
    const expr = $8cf922ec4f56efdd$var$parseConditionalExpression();
    if ($8cf922ec4f56efdd$var$match(",")) throw new Error($8cf922ec4f56efdd$var$DISABLED); // no sequence expressions
    return expr;
}
function $8cf922ec4f56efdd$export$98e6a39c04603d36(code) {
    $8cf922ec4f56efdd$var$source = code;
    $8cf922ec4f56efdd$var$index = 0;
    $8cf922ec4f56efdd$var$length = $8cf922ec4f56efdd$var$source.length;
    $8cf922ec4f56efdd$var$lookahead = null;
    $8cf922ec4f56efdd$var$peek();
    const expr = $8cf922ec4f56efdd$var$parseExpression();
    if ($8cf922ec4f56efdd$var$lookahead.type !== $8cf922ec4f56efdd$var$TokenEOF) throw new Error("Unexpect token after expression.");
    return expr;
}
var $8cf922ec4f56efdd$export$1a988e7317c65621 = {
    NaN: "NaN",
    E: "Math.E",
    LN2: "Math.LN2",
    LN10: "Math.LN10",
    LOG2E: "Math.LOG2E",
    LOG10E: "Math.LOG10E",
    PI: "Math.PI",
    SQRT1_2: "Math.SQRT1_2",
    SQRT2: "Math.SQRT2",
    MIN_VALUE: "Number.MIN_VALUE",
    MAX_VALUE: "Number.MAX_VALUE"
};
function $8cf922ec4f56efdd$export$18af1f934c132a41(codegen) {
    function fncall(name, args, cast, type) {
        let obj = codegen(args[0]);
        if (cast) {
            obj = cast + "(" + obj + ")";
            if (cast.lastIndexOf("new ", 0) === 0) obj = "(" + obj + ")";
        }
        return obj + "." + name + (type < 0 ? "" : type === 0 ? "()" : "(" + args.slice(1).map(codegen).join(",") + ")");
    }
    function fn(name, cast, type) {
        return (args)=>fncall(name, args, cast, type);
    }
    const DATE = "new Date", STRING = "String", REGEXP = "RegExp";
    return {
        // MATH functions
        isNaN: "Number.isNaN",
        isFinite: "Number.isFinite",
        abs: "Math.abs",
        acos: "Math.acos",
        asin: "Math.asin",
        atan: "Math.atan",
        atan2: "Math.atan2",
        ceil: "Math.ceil",
        cos: "Math.cos",
        exp: "Math.exp",
        floor: "Math.floor",
        log: "Math.log",
        max: "Math.max",
        min: "Math.min",
        pow: "Math.pow",
        random: "Math.random",
        round: "Math.round",
        sin: "Math.sin",
        sqrt: "Math.sqrt",
        tan: "Math.tan",
        clamp: function(args) {
            if (args.length < 3) (0, $kW1DX.error)("Missing arguments to clamp function.");
            if (args.length > 3) (0, $kW1DX.error)("Too many arguments to clamp function.");
            const a = args.map(codegen);
            return "Math.max(" + a[1] + ", Math.min(" + a[2] + "," + a[0] + "))";
        },
        // DATE functions
        now: "Date.now",
        utc: "Date.UTC",
        datetime: DATE,
        date: fn("getDate", DATE, 0),
        day: fn("getDay", DATE, 0),
        year: fn("getFullYear", DATE, 0),
        month: fn("getMonth", DATE, 0),
        hours: fn("getHours", DATE, 0),
        minutes: fn("getMinutes", DATE, 0),
        seconds: fn("getSeconds", DATE, 0),
        milliseconds: fn("getMilliseconds", DATE, 0),
        time: fn("getTime", DATE, 0),
        timezoneoffset: fn("getTimezoneOffset", DATE, 0),
        utcdate: fn("getUTCDate", DATE, 0),
        utcday: fn("getUTCDay", DATE, 0),
        utcyear: fn("getUTCFullYear", DATE, 0),
        utcmonth: fn("getUTCMonth", DATE, 0),
        utchours: fn("getUTCHours", DATE, 0),
        utcminutes: fn("getUTCMinutes", DATE, 0),
        utcseconds: fn("getUTCSeconds", DATE, 0),
        utcmilliseconds: fn("getUTCMilliseconds", DATE, 0),
        // sequence functions
        length: fn("length", null, -1),
        join: fn("join", null),
        indexof: fn("indexOf", null),
        lastindexof: fn("lastIndexOf", null),
        slice: fn("slice", null),
        reverse: function(args) {
            return "(" + codegen(args[0]) + ").slice().reverse()";
        },
        // STRING functions
        parseFloat: "parseFloat",
        parseInt: "parseInt",
        upper: fn("toUpperCase", STRING, 0),
        lower: fn("toLowerCase", STRING, 0),
        substring: fn("substring", STRING),
        split: fn("split", STRING),
        replace: fn("replace", STRING),
        trim: fn("trim", STRING, 0),
        // REGEXP functions
        regexp: REGEXP,
        test: fn("test", REGEXP),
        // Control Flow functions
        if: function(args) {
            if (args.length < 3) (0, $kW1DX.error)("Missing arguments to if function.");
            if (args.length > 3) (0, $kW1DX.error)("Too many arguments to if function.");
            const a = args.map(codegen);
            return "(" + a[0] + "?" + a[1] + ":" + a[2] + ")";
        }
    };
}
function $8cf922ec4f56efdd$var$stripQuotes(s) {
    const n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === "'" && s[n] === "'") ? s.slice(1, -1) : s;
}
function $8cf922ec4f56efdd$export$6385db726aec1cb0(opt) {
    opt = opt || {};
    const allowed = opt.allowed ? (0, $kW1DX.toSet)(opt.allowed) : {}, forbidden = opt.forbidden ? (0, $kW1DX.toSet)(opt.forbidden) : {}, constants = opt.constants || $8cf922ec4f56efdd$export$1a988e7317c65621, functions = (opt.functions || $8cf922ec4f56efdd$export$18af1f934c132a41)(visit), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = (0, $kW1DX.isFunction)(globalvar) ? globalvar : (id)=>"".concat(globalvar, '["').concat(id, '"]');
    let globals = {}, fields = {}, memberDepth = 0;
    function visit(ast) {
        if ((0, $kW1DX.isString)(ast)) return ast;
        const generator = Generators[ast.type];
        if (generator == null) (0, $kW1DX.error)("Unsupported type: " + ast.type);
        return generator(ast);
    }
    const Generators = {
        Literal: (n)=>n.raw,
        Identifier: (n)=>{
            const id = n.name;
            if (memberDepth > 0) return id;
            else if ((0, $kW1DX.hasOwnProperty)(forbidden, id)) return (0, $kW1DX.error)("Illegal identifier: " + id);
            else if ((0, $kW1DX.hasOwnProperty)(constants, id)) return constants[id];
            else if ((0, $kW1DX.hasOwnProperty)(allowed, id)) return id;
            else {
                globals[id] = 1;
                return outputGlobal(id);
            }
        },
        MemberExpression: (n)=>{
            const d = !n.computed, o = visit(n.object);
            if (d) memberDepth += 1;
            const p = visit(n.property);
            if (o === fieldvar) // strip quotes to sanitize field name (#1653)
            fields[$8cf922ec4f56efdd$var$stripQuotes(p)] = 1;
            if (d) memberDepth -= 1;
            return o + (d ? "." + p : "[" + p + "]");
        },
        CallExpression: (n)=>{
            if (n.callee.type !== "Identifier") (0, $kW1DX.error)("Illegal callee type: " + n.callee.type);
            const callee = n.callee.name, args = n.arguments, fn = (0, $kW1DX.hasOwnProperty)(functions, callee) && functions[callee];
            if (!fn) (0, $kW1DX.error)("Unrecognized function: " + callee);
            return (0, $kW1DX.isFunction)(fn) ? fn(args) : fn + "(" + args.map(visit).join(",") + ")";
        },
        ArrayExpression: (n)=>"[" + n.elements.map(visit).join(",") + "]",
        BinaryExpression: (n)=>"(" + visit(n.left) + " " + n.operator + " " + visit(n.right) + ")",
        UnaryExpression: (n)=>"(" + n.operator + visit(n.argument) + ")",
        ConditionalExpression: (n)=>"(" + visit(n.test) + "?" + visit(n.consequent) + ":" + visit(n.alternate) + ")",
        LogicalExpression: (n)=>"(" + visit(n.left) + n.operator + visit(n.right) + ")",
        ObjectExpression: (n)=>"{" + n.properties.map(visit).join(",") + "}",
        Property: (n)=>{
            memberDepth += 1;
            const k = visit(n.key);
            memberDepth -= 1;
            return k + ":" + visit(n.value);
        }
    };
    function codegen(ast) {
        const result = {
            code: visit(ast),
            globals: Object.keys(globals),
            fields: Object.keys(fields)
        };
        globals = {};
        fields = {};
        return result;
    }
    codegen.functions = functions;
    codegen.constants = constants;
    return codegen;
}

});
parcelRegister("kW1DX", function(module, exports) {

$parcel$export(module.exports, "error", () => $f3da7fceebb29183$export$a3bc9b8ed74fc);
$parcel$export(module.exports, "isFunction", () => $f3da7fceebb29183$export$f6e2535fb5126e54);
$parcel$export(module.exports, "hasOwnProperty", () => $f3da7fceebb29183$export$5a15a386532a5ea4);
$parcel$export(module.exports, "isString", () => $f3da7fceebb29183$export$844ec244b1367d54);
$parcel$export(module.exports, "toSet", () => $f3da7fceebb29183$export$f416efe173c6901c);
function $f3da7fceebb29183$export$db0b1f6ca4bf0c76(fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
}
function $f3da7fceebb29183$export$1653da1e2ededc21(fn) {
    return fn == null ? null : fn.fname;
}
function $f3da7fceebb29183$export$68502a055ebe78c2(fn) {
    return fn == null ? null : fn.fields;
}
function $f3da7fceebb29183$var$getter(path) {
    return path.length === 1 ? $f3da7fceebb29183$var$get1(path[0]) : $f3da7fceebb29183$var$getN(path);
}
const $f3da7fceebb29183$var$get1 = (field)=>function(obj) {
        return obj[field];
    };
const $f3da7fceebb29183$var$getN = (path)=>{
    const len = path.length;
    return function(obj) {
        for(let i = 0; i < len; ++i)obj = obj[path[i]];
        return obj;
    };
};
function $f3da7fceebb29183$export$a3bc9b8ed74fc(message) {
    throw Error(message);
}
function $f3da7fceebb29183$export$91fa45d315aa4370(p) {
    const path = [], n = p.length;
    let q = null, b = 0, s = "", i, j, c;
    p = p + "";
    function push() {
        path.push(s + p.substring(i, j));
        s = "";
        i = j + 1;
    }
    for(i = j = 0; j < n; ++j){
        c = p[j];
        if (c === "\\") {
            s += p.substring(i, j++);
            i = j;
        } else if (c === q) {
            push();
            q = null;
            b = -1;
        } else if (q) continue;
        else if (i === b && c === '"') {
            i = j + 1;
            q = c;
        } else if (i === b && c === "'") {
            i = j + 1;
            q = c;
        } else if (c === "." && !b) {
            if (j > i) push();
            else i = j + 1;
        } else if (c === "[") {
            if (j > i) push();
            b = i = j + 1;
        } else if (c === "]") {
            if (!b) $f3da7fceebb29183$export$a3bc9b8ed74fc("Access path missing open bracket: " + p);
            if (b > 0) push();
            b = 0;
            i = j + 1;
        }
    }
    if (b) $f3da7fceebb29183$export$a3bc9b8ed74fc("Access path missing closing bracket: " + p);
    if (q) $f3da7fceebb29183$export$a3bc9b8ed74fc("Access path missing closing quote: " + p);
    if (j > i) {
        j++;
        push();
    }
    return path;
}
function $f3da7fceebb29183$export$e0f35d825088c098(field, name, opt) {
    const path = $f3da7fceebb29183$export$91fa45d315aa4370(field);
    field = path.length === 1 ? path[0] : field;
    return $f3da7fceebb29183$export$db0b1f6ca4bf0c76((opt && opt.get || $f3da7fceebb29183$var$getter)(path), [
        field
    ], name || field);
}
const $f3da7fceebb29183$export$d560c7e4a29451c2 = $f3da7fceebb29183$export$e0f35d825088c098("id");
const $f3da7fceebb29183$export$f0954fd7d5368655 = $f3da7fceebb29183$export$db0b1f6ca4bf0c76((_)=>_, [], "identity");
const $f3da7fceebb29183$export$7f9972325ebfd559 = $f3da7fceebb29183$export$db0b1f6ca4bf0c76(()=>0, [], "zero");
const $f3da7fceebb29183$export$80bf7733f1207381 = $f3da7fceebb29183$export$db0b1f6ca4bf0c76(()=>1, [], "one");
const $f3da7fceebb29183$export$b07e0827c17e3bee = $f3da7fceebb29183$export$db0b1f6ca4bf0c76(()=>true, [], "true");
const $f3da7fceebb29183$export$74775dafe30d0d0a = $f3da7fceebb29183$export$db0b1f6ca4bf0c76(()=>false, [], "false");
function $f3da7fceebb29183$var$log$1(method, level, input) {
    const args = [
        level
    ].concat([].slice.call(input));
    console[method].apply(console, args); // eslint-disable-line no-console
}
const $f3da7fceebb29183$export$57ca7e07b341709d = 0;
const $f3da7fceebb29183$export$edf27be85e5f6da0 = 1;
const $f3da7fceebb29183$export$6c2e13f7f67a7c09 = 2;
const $f3da7fceebb29183$export$c4868e4a24d48fad = 3;
const $f3da7fceebb29183$export$153e5dc2c098b35c = 4;
function $f3da7fceebb29183$export$af88d00dbe7f521(_, method) {
    let handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : $f3da7fceebb29183$var$log$1;
    let level = _ || $f3da7fceebb29183$export$57ca7e07b341709d;
    return {
        level (_) {
            if (arguments.length) {
                level = +_;
                return this;
            } else return level;
        },
        error () {
            if (level >= $f3da7fceebb29183$export$edf27be85e5f6da0) handler(method || "error", "ERROR", arguments);
            return this;
        },
        warn () {
            if (level >= $f3da7fceebb29183$export$6c2e13f7f67a7c09) handler(method || "warn", "WARN", arguments);
            return this;
        },
        info () {
            if (level >= $f3da7fceebb29183$export$c4868e4a24d48fad) handler(method || "log", "INFO", arguments);
            return this;
        },
        debug () {
            if (level >= $f3da7fceebb29183$export$153e5dc2c098b35c) handler(method || "log", "DEBUG", arguments);
            return this;
        }
    };
}
var $f3da7fceebb29183$export$43bee75e5e14138e = Array.isArray;
function $f3da7fceebb29183$export$a6cdc56e425d0d0a(_) {
    return _ === Object(_);
}
const $f3da7fceebb29183$var$isLegalKey = (key)=>key !== "__proto__";
function $f3da7fceebb29183$export$7ec1ebcfa9d8bd6a() {
    for(var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++)configs[_key] = arguments[_key];
    return configs.reduce((out, source)=>{
        for(const key in source)if (key === "signals") // for signals, we merge the signals arrays
        // source signals take precedence over
        // existing signals with the same name
        out.signals = $f3da7fceebb29183$var$mergeNamed(out.signals, source.signals);
        else {
            // otherwise, merge objects subject to recursion constraints
            // for legend block, recurse for the layout entry only
            // for style block, recurse for all properties
            // otherwise, no recursion: objects overwrite, no merging
            const r = key === "legend" ? {
                layout: 1
            } : key === "style" ? true : null;
            $f3da7fceebb29183$export$62c85832a8c2c892(out, key, source[key], r);
        }
        return out;
    }, {});
}
function $f3da7fceebb29183$export$62c85832a8c2c892(output, key, value, recurse) {
    if (!$f3da7fceebb29183$var$isLegalKey(key)) return;
    let k, o;
    if ($f3da7fceebb29183$export$a6cdc56e425d0d0a(value) && !$f3da7fceebb29183$export$43bee75e5e14138e(value)) {
        o = $f3da7fceebb29183$export$a6cdc56e425d0d0a(output[key]) ? output[key] : output[key] = {};
        for(k in value){
            if (recurse && (recurse === true || recurse[k])) $f3da7fceebb29183$export$62c85832a8c2c892(o, k, value[k]);
            else if ($f3da7fceebb29183$var$isLegalKey(k)) o[k] = value[k];
        }
    } else output[key] = value;
}
function $f3da7fceebb29183$var$mergeNamed(a, b) {
    if (a == null) return b;
    const map = {}, out = [];
    function add(_) {
        if (!map[_.name]) {
            map[_.name] = 1;
            out.push(_);
        }
    }
    b.forEach(add);
    a.forEach(add);
    return out;
}
function $f3da7fceebb29183$export$4d3fb11e950abb9e(array) {
    return array[array.length - 1];
}
function $f3da7fceebb29183$export$a0a81dc3380ce7d3(_) {
    return _ == null || _ === "" ? null : +_;
}
const $f3da7fceebb29183$var$exp = (sign)=>(x)=>sign * Math.exp(x);
const $f3da7fceebb29183$var$log = (sign)=>(x)=>Math.log(sign * x);
const $f3da7fceebb29183$var$symlog = (c)=>(x)=>Math.sign(x) * Math.log1p(Math.abs(x / c));
const $f3da7fceebb29183$var$symexp = (c)=>(x)=>Math.sign(x) * Math.expm1(Math.abs(x)) * c;
const $f3da7fceebb29183$var$pow = (exponent)=>(x)=>x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
function $f3da7fceebb29183$var$pan(domain, delta, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift($f3da7fceebb29183$export$4d3fb11e950abb9e(domain)), dd = (d1 - d0) * delta;
    return [
        ground(d0 - dd),
        ground(d1 - dd)
    ];
}
function $f3da7fceebb29183$export$3df8aabe23053c01(domain, delta) {
    return $f3da7fceebb29183$var$pan(domain, delta, $f3da7fceebb29183$export$a0a81dc3380ce7d3, $f3da7fceebb29183$export$f0954fd7d5368655);
}
function $f3da7fceebb29183$export$7f25d74341d88ff6(domain, delta) {
    var sign = Math.sign(domain[0]);
    return $f3da7fceebb29183$var$pan(domain, delta, $f3da7fceebb29183$var$log(sign), $f3da7fceebb29183$var$exp(sign));
}
function $f3da7fceebb29183$export$a3d506d9803d02dc(domain, delta, exponent) {
    return $f3da7fceebb29183$var$pan(domain, delta, $f3da7fceebb29183$var$pow(exponent), $f3da7fceebb29183$var$pow(1 / exponent));
}
function $f3da7fceebb29183$export$b2c2ea35dd107bb6(domain, delta, constant) {
    return $f3da7fceebb29183$var$pan(domain, delta, $f3da7fceebb29183$var$symlog(constant), $f3da7fceebb29183$var$symexp(constant));
}
function $f3da7fceebb29183$var$zoom(domain, anchor, scale, lift, ground) {
    const d0 = lift(domain[0]), d1 = lift($f3da7fceebb29183$export$4d3fb11e950abb9e(domain)), da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
    return [
        ground(da + (d0 - da) * scale),
        ground(da + (d1 - da) * scale)
    ];
}
function $f3da7fceebb29183$export$7e8a2f109f59f2ae(domain, anchor, scale) {
    return $f3da7fceebb29183$var$zoom(domain, anchor, scale, $f3da7fceebb29183$export$a0a81dc3380ce7d3, $f3da7fceebb29183$export$f0954fd7d5368655);
}
function $f3da7fceebb29183$export$c0b18e310866ea9a(domain, anchor, scale) {
    const sign = Math.sign(domain[0]);
    return $f3da7fceebb29183$var$zoom(domain, anchor, scale, $f3da7fceebb29183$var$log(sign), $f3da7fceebb29183$var$exp(sign));
}
function $f3da7fceebb29183$export$5f95cf1bf58f5b95(domain, anchor, scale, exponent) {
    return $f3da7fceebb29183$var$zoom(domain, anchor, scale, $f3da7fceebb29183$var$pow(exponent), $f3da7fceebb29183$var$pow(1 / exponent));
}
function $f3da7fceebb29183$export$d68222fc4b6defa1(domain, anchor, scale, constant) {
    return $f3da7fceebb29183$var$zoom(domain, anchor, scale, $f3da7fceebb29183$var$symlog(constant), $f3da7fceebb29183$var$symexp(constant));
}
function $f3da7fceebb29183$export$813f5834b9d5379d(date) {
    return 1 + ~~(new Date(date).getMonth() / 3);
}
function $f3da7fceebb29183$export$db9b119ae18dbbed(date) {
    return 1 + ~~(new Date(date).getUTCMonth() / 3);
}
function $f3da7fceebb29183$export$2f23118c22fb2630(_) {
    return _ != null ? $f3da7fceebb29183$export$43bee75e5e14138e(_) ? _ : [
        _
    ] : [];
}
/**
 * Span-preserving range clamp. If the span of the input range is less
 * than (max - min) and an endpoint exceeds either the min or max value,
 * the range is translated such that the span is preserved and one
 * endpoint touches the boundary of the min/max range.
 * If the span exceeds (max - min), the range [min, max] is returned.
 */ function $f3da7fceebb29183$export$e9d4863bcce07ce9(range, min, max) {
    let lo = range[0], hi = range[1], span;
    if (hi < lo) {
        span = hi;
        hi = lo;
        lo = span;
    }
    span = hi - lo;
    return span >= max - min ? [
        min,
        max
    ] : [
        lo = Math.min(Math.max(lo, min), max - span),
        lo + span
    ];
}
function $f3da7fceebb29183$export$f6e2535fb5126e54(_) {
    return typeof _ === "function";
}
const $f3da7fceebb29183$var$DESCENDING = "descending";
function $f3da7fceebb29183$export$398604a469f7de9a(fields, orders, opt) {
    opt = opt || {};
    orders = $f3da7fceebb29183$export$2f23118c22fb2630(orders) || [];
    const ord = [], get = [], fmap = {}, gen = opt.comparator || $f3da7fceebb29183$var$comparator;
    $f3da7fceebb29183$export$2f23118c22fb2630(fields).forEach((f, i)=>{
        if (f == null) return;
        ord.push(orders[i] === $f3da7fceebb29183$var$DESCENDING ? -1 : 1);
        get.push(f = $f3da7fceebb29183$export$f6e2535fb5126e54(f) ? f : $f3da7fceebb29183$export$e0f35d825088c098(f, null, opt));
        ($f3da7fceebb29183$export$68502a055ebe78c2(f) || []).forEach((_)=>fmap[_] = 1);
    });
    return get.length === 0 ? null : $f3da7fceebb29183$export$db0b1f6ca4bf0c76(gen(get, ord), Object.keys(fmap));
}
const $f3da7fceebb29183$export$fcb633242ef15540 = (u, v)=>(u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
const $f3da7fceebb29183$var$comparator = (fields, orders)=>fields.length === 1 ? $f3da7fceebb29183$var$compare1(fields[0], orders[0]) : $f3da7fceebb29183$var$compareN(fields, orders, fields.length);
const $f3da7fceebb29183$var$compare1 = (field, order)=>function(a, b) {
        return $f3da7fceebb29183$export$fcb633242ef15540(field(a), field(b)) * order;
    };
const $f3da7fceebb29183$var$compareN = (fields, orders, n)=>{
    orders.push(0); // pad zero for convenient lookup
    return function(a, b) {
        let f, c = 0, i = -1;
        while(c === 0 && ++i < n){
            f = fields[i];
            c = $f3da7fceebb29183$export$fcb633242ef15540(f(a), f(b));
        }
        return c * orders[i];
    };
};
function $f3da7fceebb29183$export$c983f826f44ff86(_) {
    return $f3da7fceebb29183$export$f6e2535fb5126e54(_) ? _ : ()=>_;
}
function $f3da7fceebb29183$export$61fc7d43ac8f84b0(delay, handler) {
    let tid;
    return (e)=>{
        if (tid) clearTimeout(tid);
        tid = setTimeout(()=>(handler(e), tid = null), delay);
    };
}
function $f3da7fceebb29183$export$8b58be045bf06082(_) {
    for(let x, k, i = 1, len = arguments.length; i < len; ++i){
        x = arguments[i];
        for(k in x)_[k] = x[k];
    }
    return _;
}
/**
 * Return an array with minimum and maximum values, in the
 * form [min, max]. Ignores null, undefined, and NaN values.
 */ function $f3da7fceebb29183$export$6d28227ee394ab2a(array, f) {
    let i = 0, n, v, min, max;
    if (array && (n = array.length)) {
        if (f == null) {
            // find first valid value
            for(v = array[i]; i < n && (v == null || v !== v); v = array[++i]);
            min = max = v;
            // visit all other values
            for(; i < n; ++i){
                v = array[i];
                // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        } else {
            // find first valid value
            for(v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i]));
            min = max = v;
            // visit all other values
            for(; i < n; ++i){
                v = f(array[i]);
                // skip null/undefined; NaN will fail all comparisons
                if (v != null) {
                    if (v < min) min = v;
                    if (v > max) max = v;
                }
            }
        }
    }
    return [
        min,
        max
    ];
}
function $f3da7fceebb29183$export$c35a1b04c3b4912b(array, f) {
    const n = array.length;
    let i = -1, a, b, c, u, v;
    if (f == null) {
        while(++i < n){
            b = array[i];
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = array[i];
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    } else {
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null && b >= b) {
                a = c = b;
                break;
            }
        }
        if (i === n) return [
            -1,
            -1
        ];
        u = v = i;
        while(++i < n){
            b = f(array[i], i, array);
            if (b != null) {
                if (a > b) {
                    a = b;
                    u = i;
                }
                if (c < b) {
                    c = b;
                    v = i;
                }
            }
        }
    }
    return [
        u,
        v
    ];
}
const $f3da7fceebb29183$var$hop = Object.prototype.hasOwnProperty;
function $f3da7fceebb29183$export$5a15a386532a5ea4(object, property) {
    return $f3da7fceebb29183$var$hop.call(object, property);
}
const $f3da7fceebb29183$var$NULL = {};
function $f3da7fceebb29183$export$a9f822e144f35d84(input) {
    let obj = {}, test;
    function has$1(key) {
        return $f3da7fceebb29183$export$5a15a386532a5ea4(obj, key) && obj[key] !== $f3da7fceebb29183$var$NULL;
    }
    const map = {
        size: 0,
        empty: 0,
        object: obj,
        has: has$1,
        get (key) {
            return has$1(key) ? obj[key] : undefined;
        },
        set (key, value) {
            if (!has$1(key)) {
                ++map.size;
                if (obj[key] === $f3da7fceebb29183$var$NULL) --map.empty;
            }
            obj[key] = value;
            return this;
        },
        delete (key) {
            if (has$1(key)) {
                --map.size;
                ++map.empty;
                obj[key] = $f3da7fceebb29183$var$NULL;
            }
            return this;
        },
        clear () {
            map.size = map.empty = 0;
            map.object = obj = {};
        },
        test (_) {
            if (arguments.length) {
                test = _;
                return map;
            } else return test;
        },
        clean () {
            const next = {};
            let size = 0;
            for(const key in obj){
                const value = obj[key];
                if (value !== $f3da7fceebb29183$var$NULL && (!test || !test(value))) {
                    next[key] = value;
                    ++size;
                }
            }
            map.size = size;
            map.empty = 0;
            map.object = obj = next;
        }
    };
    if (input) Object.keys(input).forEach((key)=>{
        map.set(key, input[key]);
    });
    return map;
}
function $f3da7fceebb29183$export$4909b86c8034bf73(range, value, threshold, left, right, center) {
    if (!threshold && threshold !== 0) return center;
    const t = +threshold;
    let a = range[0], b = $f3da7fceebb29183$export$4d3fb11e950abb9e(range), l;
    // swap endpoints if range is reversed
    if (b < a) {
        l = a;
        a = b;
        b = l;
    }
    // compare value to endpoints
    l = Math.abs(value - a);
    const r = Math.abs(b - value);
    // adjust if value is within threshold distance of endpoint
    return l < r && l <= t ? left : r <= t ? right : center;
}
function $f3da7fceebb29183$export$69f1b2dcda23c5f8(child, parent, members) {
    const proto = child.prototype = Object.create(parent.prototype);
    Object.defineProperty(proto, "constructor", {
        value: child,
        writable: true,
        enumerable: true,
        configurable: true
    });
    return $f3da7fceebb29183$export$8b58be045bf06082(proto, members);
}
/**
 * Predicate that returns true if the value lies within the span
 * of the given range. The left and right flags control the use
 * of inclusive (true) or exclusive (false) comparisons.
 */ function $f3da7fceebb29183$export$ee19ee26d8849835(value, range, left, right) {
    let r0 = range[0], r1 = range[range.length - 1], t;
    if (r0 > r1) {
        t = r0;
        r0 = r1;
        r1 = t;
    }
    left = left === undefined || left;
    right = right === undefined || right;
    return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
}
function $f3da7fceebb29183$export$f9ce7b637dfbe238(_) {
    return typeof _ === "boolean";
}
function $f3da7fceebb29183$export$871608497c498473(_) {
    return Object.prototype.toString.call(_) === "[object Date]";
}
function $f3da7fceebb29183$export$9652023d9040757(_) {
    return _ && $f3da7fceebb29183$export$f6e2535fb5126e54(_[Symbol.iterator]);
}
function $f3da7fceebb29183$export$7e4aa119212bc614(_) {
    return typeof _ === "number";
}
function $f3da7fceebb29183$export$49841c62b9eff15(_) {
    return Object.prototype.toString.call(_) === "[object RegExp]";
}
function $f3da7fceebb29183$export$844ec244b1367d54(_) {
    return typeof _ === "string";
}
function $f3da7fceebb29183$export$df61b30b684217c0(fields, flat, opt) {
    if (fields) fields = flat ? $f3da7fceebb29183$export$2f23118c22fb2630(fields).map((f)=>f.replace(/\\(.)/g, "$1")) : $f3da7fceebb29183$export$2f23118c22fb2630(fields);
    const len = fields && fields.length, gen = opt && opt.get || $f3da7fceebb29183$var$getter, map = (f)=>gen(flat ? [
            f
        ] : $f3da7fceebb29183$export$91fa45d315aa4370(f));
    let fn;
    if (!len) fn = function() {
        return "";
    };
    else if (len === 1) {
        const get = map(fields[0]);
        fn = function(_) {
            return "" + get(_);
        };
    } else {
        const get = fields.map(map);
        fn = function(_) {
            let s = "" + get[0](_), i = 0;
            while(++i < len)s += "|" + get[i](_);
            return s;
        };
    }
    return $f3da7fceebb29183$export$db0b1f6ca4bf0c76(fn, fields, "key");
}
function $f3da7fceebb29183$export$3a89f8d6f6bf6c9f(array, frac) {
    const lo = array[0], hi = $f3da7fceebb29183$export$4d3fb11e950abb9e(array), f = +frac;
    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}
const $f3da7fceebb29183$var$DEFAULT_MAX_SIZE = 10000;
// adapted from https://github.com/dominictarr/hashlru/ (MIT License)
function $f3da7fceebb29183$export$441692190ec1da48(maxsize) {
    maxsize = +maxsize || $f3da7fceebb29183$var$DEFAULT_MAX_SIZE;
    let curr, prev, size;
    const clear = ()=>{
        curr = {};
        prev = {};
        size = 0;
    };
    const update = (key, value)=>{
        if (++size > maxsize) {
            prev = curr;
            curr = {};
            size = 1;
        }
        return curr[key] = value;
    };
    clear();
    return {
        clear: clear,
        has: (key)=>$f3da7fceebb29183$export$5a15a386532a5ea4(curr, key) || $f3da7fceebb29183$export$5a15a386532a5ea4(prev, key),
        get: (key)=>$f3da7fceebb29183$export$5a15a386532a5ea4(curr, key) ? curr[key] : $f3da7fceebb29183$export$5a15a386532a5ea4(prev, key) ? update(key, prev[key]) : undefined,
        set: (key, value)=>$f3da7fceebb29183$export$5a15a386532a5ea4(curr, key) ? curr[key] = value : update(key, value)
    };
}
function $f3da7fceebb29183$export$4950aa0f605343fb(compare, array0, array1, output) {
    const n0 = array0.length, n1 = array1.length;
    if (!n1) return array0;
    if (!n0) return array1;
    const merged = output || new array0.constructor(n0 + n1);
    let i0 = 0, i1 = 0, i = 0;
    for(; i0 < n0 && i1 < n1; ++i)merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
    for(; i0 < n0; ++i0, ++i)merged[i] = array0[i0];
    for(; i1 < n1; ++i1, ++i)merged[i] = array1[i1];
    return merged;
}
function $f3da7fceebb29183$export$76d90c956114f2c2(str, reps) {
    let s = "";
    while(--reps >= 0)s += str;
    return s;
}
function $f3da7fceebb29183$export$5d04458e2a6c373e(str, length, padchar, align) {
    const c = padchar || " ", s = str + "", n = length - s.length;
    return n <= 0 ? s : align === "left" ? $f3da7fceebb29183$export$76d90c956114f2c2(c, n) + s : align === "center" ? $f3da7fceebb29183$export$76d90c956114f2c2(c, ~~(n / 2)) + s + $f3da7fceebb29183$export$76d90c956114f2c2(c, Math.ceil(n / 2)) : s + $f3da7fceebb29183$export$76d90c956114f2c2(c, n);
}
/**
 * Return the numerical span of an array: the difference between
 * the last and first values.
 */ function $f3da7fceebb29183$export$afc1bfabebaf28a2(array) {
    return array && $f3da7fceebb29183$export$4d3fb11e950abb9e(array) - array[0] || 0;
}
function $f3da7fceebb29183$export$732844b3d45b53a1(x) {
    return $f3da7fceebb29183$export$43bee75e5e14138e(x) ? "[" + x.map($f3da7fceebb29183$export$732844b3d45b53a1) + "]" : $f3da7fceebb29183$export$a6cdc56e425d0d0a(x) || $f3da7fceebb29183$export$844ec244b1367d54(x) ? // Output valid JSON and JS source strings.
    // See http://timelessrepo.com/json-isnt-a-javascript-subset
    JSON.stringify(x).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029") : x;
}
function $f3da7fceebb29183$export$3c2e6d1b7583eee6(_) {
    return _ == null || _ === "" ? null : !_ || _ === "false" || _ === "0" ? false : !!_;
}
const $f3da7fceebb29183$var$defaultParser = (_)=>$f3da7fceebb29183$export$7e4aa119212bc614(_) ? _ : $f3da7fceebb29183$export$871608497c498473(_) ? _ : Date.parse(_);
function $f3da7fceebb29183$export$e67a095c620b86fe(_, parser) {
    parser = parser || $f3da7fceebb29183$var$defaultParser;
    return _ == null || _ === "" ? null : parser(_);
}
function $f3da7fceebb29183$export$f84e8e69fd4488a5(_) {
    return _ == null || _ === "" ? null : _ + "";
}
function $f3da7fceebb29183$export$f416efe173c6901c(_) {
    const s = {}, n = _.length;
    for(let i = 0; i < n; ++i)s[_[i]] = true;
    return s;
}
function $f3da7fceebb29183$export$6a506b36fdea397d(str, length, align, ellipsis) {
    const e = ellipsis != null ? ellipsis : "\u2026", s = str + "", n = s.length, l = Math.max(0, length - e.length);
    return n <= length ? s : align === "left" ? e + s.slice(n - l) : align === "center" ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
}
function $f3da7fceebb29183$export$62940ad51e5012c2(array, filter, visitor) {
    if (array) {
        if (filter) {
            const n = array.length;
            for(let i = 0; i < n; ++i){
                const t = filter(array[i]);
                if (t) visitor(t, i, array);
            }
        } else array.forEach(visitor);
    }
}

});







parcelRegister("49Viv", function(module, exports) {

$parcel$export(module.exports, "assembleTitleGroup", () => $307472c79ce376f5$export$3f3f30cd2d4ac82f);
$parcel$export(module.exports, "assembleHeaderGroups", () => $307472c79ce376f5$export$d5cbe783987338b3);
$parcel$export(module.exports, "assembleLabelTitle", () => $307472c79ce376f5$export$a599aa7ac4424181);
$parcel$export(module.exports, "assembleLayoutTitleBand", () => $307472c79ce376f5$export$5f3b779c54c8c676);
/**
 * Utility for generating row / column headers
 */ 
var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $947ka = parcelRequire("947ka");

var $Xb2We = parcelRequire("Xb2We");

var $1mvM3 = parcelRequire("1mvM3");

var $7k4G6 = parcelRequire("7k4G6");

var $5z0Qu = parcelRequire("5z0Qu");

var $8IEdE = parcelRequire("8IEdE");

var $7oTmT = parcelRequire("7oTmT");

var $jkJyY = parcelRequire("jkJyY");

var $Ejdtd = parcelRequire("Ejdtd");

var $hkDCc = parcelRequire("hkDCc");
function $307472c79ce376f5$export$3f3f30cd2d4ac82f(model, channel) {
    const title = model.component.layoutHeaders[channel].title;
    const config = model.config ? model.config : undefined;
    const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : undefined;
    const { titleAnchor: titleAnchor, titleAngle: ta, titleOrient: titleOrient } = (0, $Ejdtd.getHeaderProperties)([
        "titleAnchor",
        "titleAngle",
        "titleOrient"
    ], facetFieldDef.header, config, channel);
    const headerChannel = (0, $Ejdtd.getHeaderChannel)(channel, titleOrient);
    const titleAngle = (0, $7k4G6.normalizeAngle)(ta);
    return {
        name: `${channel}-title`,
        type: "group",
        role: `${headerChannel}-title`,
        title: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
            text: title
        }, channel === "row" ? {
            orient: "left"
        } : {}), {
            style: "guide-title"
        }), $307472c79ce376f5$export$24ec27130e947f6(titleAngle, headerChannel)), $307472c79ce376f5$export$4890d21911375f72(headerChannel, titleAngle, titleAnchor)), $307472c79ce376f5$export$4637185c1ec6f09c(config, facetFieldDef, channel, (0, $947ka.HEADER_TITLE_PROPERTIES), (0, $947ka.HEADER_TITLE_PROPERTIES_MAP)))
    };
}
function $307472c79ce376f5$export$4890d21911375f72(headerChannel, angle, anchor = "middle") {
    switch(anchor){
        case "start":
            return {
                align: "left"
            };
        case "end":
            return {
                align: "right"
            };
    }
    const align = (0, $5z0Qu.defaultLabelAlign)(angle, headerChannel === "row" ? "left" : "top", headerChannel === "row" ? "y" : "x");
    return align ? {
        align: align
    } : {};
}
function $307472c79ce376f5$export$24ec27130e947f6(angle, channel) {
    const baseline = (0, $5z0Qu.defaultLabelBaseline)(angle, channel === "row" ? "left" : "top", channel === "row" ? "y" : "x", true);
    return baseline ? {
        baseline: baseline
    } : {};
}
function $307472c79ce376f5$export$d5cbe783987338b3(model, channel) {
    const layoutHeader = model.component.layoutHeaders[channel];
    const groups = [];
    for (const headerType of (0, $hkDCc.HEADER_TYPES)){
        if (layoutHeader[headerType]) for (const headerComponent of layoutHeader[headerType]){
            const group = $307472c79ce376f5$export$39a7cfc03573b486(model, channel, headerType, layoutHeader, headerComponent);
            if (group != null) groups.push(group);
        }
    }
    return groups;
}
function $307472c79ce376f5$var$getSort(facetFieldDef, channel) {
    var _a;
    const { sort: sort } = facetFieldDef;
    if ((0, $Xb2We.isSortField)(sort)) return {
        field: (0, $2hAmp.vgField)(sort, {
            expr: "datum"
        }),
        order: (_a = sort.order) !== null && _a !== void 0 ? _a : "ascending"
    };
    else if ((0, $2bi3s.isArray)(sort)) return {
        field: (0, $8IEdE.sortArrayIndexField)(facetFieldDef, channel, {
            expr: "datum"
        }),
        order: "ascending"
    };
    else return {
        field: (0, $2hAmp.vgField)(facetFieldDef, {
            expr: "datum"
        }),
        order: sort !== null && sort !== void 0 ? sort : "ascending"
    };
}
function $307472c79ce376f5$export$a599aa7ac4424181(facetFieldDef, channel, config) {
    const { format: format, formatType: formatType, labelAngle: labelAngle, labelAnchor: labelAnchor, labelOrient: labelOrient, labelExpr: labelExpr } = (0, $Ejdtd.getHeaderProperties)([
        "format",
        "formatType",
        "labelAngle",
        "labelAnchor",
        "labelOrient",
        "labelExpr"
    ], facetFieldDef.header, config, channel);
    const titleTextExpr = (0, $7oTmT.formatSignalRef)({
        fieldOrDatumDef: facetFieldDef,
        format: format,
        formatType: formatType,
        expr: "parent",
        config: config
    }).signal;
    const headerChannel = (0, $Ejdtd.getHeaderChannel)(channel, labelOrient);
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
        text: {
            signal: labelExpr ? (0, $7k4G6.replaceAll)((0, $7k4G6.replaceAll)(labelExpr, "datum.label", titleTextExpr), "datum.value", (0, $2hAmp.vgField)(facetFieldDef, {
                expr: "parent"
            })) : titleTextExpr
        }
    }, channel === "row" ? {
        orient: "left"
    } : {}), {
        style: "guide-label",
        frame: "group"
    }), $307472c79ce376f5$export$24ec27130e947f6(labelAngle, headerChannel)), $307472c79ce376f5$export$4890d21911375f72(headerChannel, labelAngle, labelAnchor)), $307472c79ce376f5$export$4637185c1ec6f09c(config, facetFieldDef, channel, (0, $947ka.HEADER_LABEL_PROPERTIES), (0, $947ka.HEADER_LABEL_PROPERTIES_MAP)));
}
function $307472c79ce376f5$export$39a7cfc03573b486(model, channel, headerType, layoutHeader, headerComponent) {
    if (headerComponent) {
        let title = null;
        const { facetFieldDef: facetFieldDef } = layoutHeader;
        const config = model.config ? model.config : undefined;
        if (facetFieldDef && headerComponent.labels) {
            const { labelOrient: labelOrient } = (0, $Ejdtd.getHeaderProperties)([
                "labelOrient"
            ], facetFieldDef.header, config, channel);
            // Include label title in the header if orient aligns with the channel
            if (channel === "row" && !(0, $7k4G6.contains)([
                "top",
                "bottom"
            ], labelOrient) || channel === "column" && !(0, $7k4G6.contains)([
                "left",
                "right"
            ], labelOrient)) title = $307472c79ce376f5$export$a599aa7ac4424181(facetFieldDef, channel, config);
        }
        const isFacetWithoutRowCol = (0, $jkJyY.isFacetModel)(model) && !(0, $1mvM3.isFacetMapping)(model.facet);
        const axes = headerComponent.axes;
        const hasAxes = (axes === null || axes === void 0 ? void 0 : axes.length) > 0;
        if (title || hasAxes) {
            const sizeChannel = channel === "row" ? "height" : "width";
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
                name: model.getName(`${channel}_${headerType}`),
                type: "group",
                role: `${channel}-${headerType}`
            }, layoutHeader.facetFieldDef ? {
                from: {
                    data: model.getName(channel + "_domain")
                },
                sort: $307472c79ce376f5$var$getSort(facetFieldDef, channel)
            } : {}), hasAxes && isFacetWithoutRowCol ? {
                from: {
                    data: model.getName(`facet_domain_${channel}`)
                }
            } : {}), title ? {
                title: title
            } : {}), headerComponent.sizeSignal ? {
                encode: {
                    update: {
                        [sizeChannel]: headerComponent.sizeSignal
                    }
                }
            } : {}), hasAxes ? {
                axes: axes
            } : {});
        }
    }
    return null;
}
const $307472c79ce376f5$var$LAYOUT_TITLE_BAND = {
    column: {
        start: 0,
        end: 1
    },
    row: {
        start: 1,
        end: 0
    }
};
function $307472c79ce376f5$export$54eb707ccaa9d8a(titleAnchor, headerChannel) {
    return $307472c79ce376f5$var$LAYOUT_TITLE_BAND[headerChannel][titleAnchor];
}
function $307472c79ce376f5$export$5f3b779c54c8c676(headerComponentIndex, config) {
    const titleBand = {};
    for (const channel of (0, $fWfT0.FACET_CHANNELS)){
        const headerComponent = headerComponentIndex[channel];
        if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent.facetFieldDef) {
            const { titleAnchor: titleAnchor, titleOrient: titleOrient } = (0, $Ejdtd.getHeaderProperties)([
                "titleAnchor",
                "titleOrient"
            ], headerComponent.facetFieldDef.header, config, channel);
            const headerChannel = (0, $Ejdtd.getHeaderChannel)(channel, titleOrient);
            const band = $307472c79ce376f5$export$54eb707ccaa9d8a(titleAnchor, headerChannel);
            if (band !== undefined) titleBand[headerChannel] = band;
        }
    }
    return (0, $7k4G6.isEmpty)(titleBand) ? undefined : titleBand;
}
function $307472c79ce376f5$export$4637185c1ec6f09c(config, facetFieldDef, channel, properties, propertiesMap) {
    const props = {};
    for (const prop of properties){
        if (!propertiesMap[prop]) continue;
        const value = (0, $Ejdtd.getHeaderProperty)(prop, facetFieldDef === null || facetFieldDef === void 0 ? void 0 : facetFieldDef.header, config, channel);
        if (value !== undefined) props[propertiesMap[prop]] = value;
    }
    return props;
}

});
parcelRegister("5z0Qu", function(module, exports) {

$parcel$export(module.exports, "axisRules", () => $40d0e08a5d245054$export$122c97d52a6ae7b6);
$parcel$export(module.exports, "defaultLabelAlign", () => $40d0e08a5d245054$export$5837ff4c31122da6);
$parcel$export(module.exports, "defaultLabelBaseline", () => $40d0e08a5d245054$export$5cae86eaa2d48330);
$parcel$export(module.exports, "getFieldDefTitle", () => $40d0e08a5d245054$export$bda64fdd22b1b207);
$parcel$export(module.exports, "getLabelAngle", () => $40d0e08a5d245054$export$4faca4fff08fa854);
$parcel$export(module.exports, "defaultOrient", () => $40d0e08a5d245054$export$a8428491e1169683);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9rekY = parcelRequire("9rekY");

var $aMeqD = parcelRequire("aMeqD");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $7oTmT = parcelRequire("7oTmT");

var $cQy2B = parcelRequire("cQy2B");
const $40d0e08a5d245054$export$122c97d52a6ae7b6 = {
    scale: ({ model: model, channel: channel })=>model.scaleName(channel),
    format: ({ fieldOrDatumDef: fieldOrDatumDef, config: config, axis: axis })=>{
        const { format: format, formatType: formatType } = axis;
        return (0, $7oTmT.guideFormat)(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, true);
    },
    formatType: ({ axis: axis, fieldOrDatumDef: fieldOrDatumDef, scaleType: scaleType })=>{
        const { formatType: formatType } = axis;
        return (0, $7oTmT.guideFormatType)(formatType, fieldOrDatumDef, scaleType);
    },
    grid: ({ fieldOrDatumDef: fieldOrDatumDef, axis: axis, scaleType: scaleType })=>{
        var _a;
        if ((0, $2hAmp.isFieldDef)(fieldOrDatumDef) && (0, $iR8lA.isBinned)(fieldOrDatumDef.bin)) return false;
        else return (_a = axis.grid) !== null && _a !== void 0 ? _a : $40d0e08a5d245054$export$aed5b7d86c3777ab(scaleType, fieldOrDatumDef);
    },
    gridScale: ({ model: model, channel: channel })=>$40d0e08a5d245054$export$da8c2b5d0cdb626b(model, channel),
    labelAlign: ({ axis: axis, labelAngle: labelAngle, orient: orient, channel: channel })=>axis.labelAlign || $40d0e08a5d245054$export$5837ff4c31122da6(labelAngle, orient, channel),
    labelAngle: ({ labelAngle: labelAngle })=>labelAngle,
    labelBaseline: ({ axis: axis, labelAngle: labelAngle, orient: orient, channel: channel })=>axis.labelBaseline || $40d0e08a5d245054$export$5cae86eaa2d48330(labelAngle, orient, channel),
    labelFlush: ({ axis: axis, fieldOrDatumDef: fieldOrDatumDef, channel: channel })=>{
        var _a;
        return (_a = axis.labelFlush) !== null && _a !== void 0 ? _a : $40d0e08a5d245054$export$d1758d72402d366e(fieldOrDatumDef.type, channel);
    },
    labelOverlap: ({ axis: axis, fieldOrDatumDef: fieldOrDatumDef, scaleType: scaleType })=>{
        var _a;
        return (_a = axis.labelOverlap) !== null && _a !== void 0 ? _a : $40d0e08a5d245054$export$d0da6ae0862c8a42(fieldOrDatumDef.type, scaleType, (0, $2hAmp.isFieldDef)(fieldOrDatumDef) && !!fieldOrDatumDef.timeUnit, (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined);
    },
    // we already calculate orient in parse
    orient: ({ orient: orient })=>orient,
    tickCount: ({ channel: channel, model: model, axis: axis, fieldOrDatumDef: fieldOrDatumDef, scaleType: scaleType })=>{
        var _a;
        const sizeType = channel === "x" ? "width" : channel === "y" ? "height" : undefined;
        const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;
        return (_a = axis.tickCount) !== null && _a !== void 0 ? _a : $40d0e08a5d245054$export$949b1f5716249e2b({
            fieldOrDatumDef: fieldOrDatumDef,
            scaleType: scaleType,
            size: size,
            values: axis.values
        });
    },
    title: ({ axis: axis, model: model, channel: channel })=>{
        if (axis.title !== undefined) return axis.title;
        const fieldDefTitle = $40d0e08a5d245054$export$bda64fdd22b1b207(model, channel);
        if (fieldDefTitle !== undefined) return fieldDefTitle;
        const fieldDef = model.typedFieldDef(channel);
        const channel2 = channel === "x" ? "x2" : "y2";
        const fieldDef2 = model.fieldDef(channel2);
        // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)
        return (0, $9ulW1.mergeTitleFieldDefs)(fieldDef ? [
            (0, $2hAmp.toFieldDefBase)(fieldDef)
        ] : [], (0, $2hAmp.isFieldDef)(fieldDef2) ? [
            (0, $2hAmp.toFieldDefBase)(fieldDef2)
        ] : []);
    },
    values: ({ axis: axis, fieldOrDatumDef: fieldOrDatumDef })=>$40d0e08a5d245054$export$68c286be0e7e55b7(axis, fieldOrDatumDef),
    zindex: ({ axis: axis, fieldOrDatumDef: fieldOrDatumDef, mark: mark })=>{
        var _a;
        return (_a = axis.zindex) !== null && _a !== void 0 ? _a : $40d0e08a5d245054$export$53e6c5bd943552d0(mark, fieldOrDatumDef);
    }
};
function $40d0e08a5d245054$export$aed5b7d86c3777ab(scaleType, fieldDef) {
    return !(0, $9rekY.hasDiscreteDomain)(scaleType) && (0, $2hAmp.isFieldDef)(fieldDef) && !(0, $iR8lA.isBinning)(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin);
}
function $40d0e08a5d245054$export$da8c2b5d0cdb626b(model, channel) {
    const gridChannel = channel === "x" ? "y" : "x";
    if (model.getScaleComponent(gridChannel)) return model.scaleName(gridChannel);
    return undefined;
}
function $40d0e08a5d245054$export$4faca4fff08fa854(fieldOrDatumDef, axis, channel, styleConfig, axisConfigs) {
    const labelAngle = axis === null || axis === void 0 ? void 0 : axis.labelAngle;
    // try axis value
    if (labelAngle !== undefined) return (0, $4xdf1.isSignalRef)(labelAngle) ? labelAngle : (0, $7k4G6.normalizeAngle)(labelAngle);
    else {
        // try axis config value
        const { configValue: angle } = (0, $cQy2B.getAxisConfig)("labelAngle", styleConfig, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs);
        if (angle !== undefined) return (0, $7k4G6.normalizeAngle)(angle);
        else {
            // get default value
            if (channel === (0, $fWfT0.X) && (0, $7k4G6.contains)([
                (0, $9LX7L.NOMINAL),
                (0, $9LX7L.ORDINAL)
            ], fieldOrDatumDef.type) && !((0, $2hAmp.isFieldDef)(fieldOrDatumDef) && fieldOrDatumDef.timeUnit)) return 270;
            // no default
            return undefined;
        }
    }
}
function $40d0e08a5d245054$export$904dd0f3b950bf9a(angle) {
    return `(((${angle.signal} % 360) + 360) % 360)`;
}
function $40d0e08a5d245054$export$5cae86eaa2d48330(angle, orient, channel, alwaysIncludeMiddle) {
    if (angle !== undefined) {
        if (channel === "x") {
            if ((0, $4xdf1.isSignalRef)(angle)) {
                const a = $40d0e08a5d245054$export$904dd0f3b950bf9a(angle);
                const orientIsTop = (0, $4xdf1.isSignalRef)(orient) ? `(${orient.signal} === "top")` : orient === "top";
                return {
                    signal: `(45 < ${a} && ${a} < 135) || (225 < ${a} && ${a} < 315) ? "middle" :` + `(${a} <= 45 || 315 <= ${a}) === ${orientIsTop} ? "bottom" : "top"`
                };
            }
            if (45 < angle && angle < 135 || 225 < angle && angle < 315) return "middle";
            if ((0, $4xdf1.isSignalRef)(orient)) {
                const op = angle <= 45 || 315 <= angle ? "===" : "!==";
                return {
                    signal: `${orient.signal} ${op} "top" ? "bottom" : "top"`
                };
            }
            return (angle <= 45 || 315 <= angle) === (orient === "top") ? "bottom" : "top";
        } else {
            if ((0, $4xdf1.isSignalRef)(angle)) {
                const a = $40d0e08a5d245054$export$904dd0f3b950bf9a(angle);
                const orientIsLeft = (0, $4xdf1.isSignalRef)(orient) ? `(${orient.signal} === "left")` : orient === "left";
                const middle = alwaysIncludeMiddle ? '"middle"' : "null";
                return {
                    signal: `${a} <= 45 || 315 <= ${a} || (135 <= ${a} && ${a} <= 225) ? ${middle} : (45 <= ${a} && ${a} <= 135) === ${orientIsLeft} ? "top" : "bottom"`
                };
            }
            if (angle <= 45 || 315 <= angle || 135 <= angle && angle <= 225) return alwaysIncludeMiddle ? "middle" : null;
            if ((0, $4xdf1.isSignalRef)(orient)) {
                const op = 45 <= angle && angle <= 135 ? "===" : "!==";
                return {
                    signal: `${orient.signal} ${op} "left" ? "top" : "bottom"`
                };
            }
            return (45 <= angle && angle <= 135) === (orient === "left") ? "top" : "bottom";
        }
    }
    return undefined;
}
function $40d0e08a5d245054$export$5837ff4c31122da6(angle, orient, channel) {
    if (angle === undefined) return undefined;
    const isX = channel === "x";
    const startAngle = isX ? 0 : 90;
    const mainOrient = isX ? "bottom" : "left";
    if ((0, $4xdf1.isSignalRef)(angle)) {
        const a = $40d0e08a5d245054$export$904dd0f3b950bf9a(angle);
        const orientIsMain = (0, $4xdf1.isSignalRef)(orient) ? `(${orient.signal} === "${mainOrient}")` : orient === mainOrient;
        return {
            signal: `(${startAngle ? "(" + a + " + 90)" : a} % 180 === 0) ? ${isX ? null : '"center"'} :` + `(${startAngle} < ${a} && ${a} < ${180 + startAngle}) === ${orientIsMain} ? "left" : "right"`
        };
    }
    if ((angle + startAngle) % 180 === 0) // For bottom, use default label align so label flush still works
    return isX ? null : "center";
    if ((0, $4xdf1.isSignalRef)(orient)) {
        const op = startAngle < angle && angle < 180 + startAngle ? "===" : "!==";
        const orientIsMain = `${orient.signal} ${op} "${mainOrient}"`;
        return {
            signal: `${orientIsMain} ? "left" : "right"`
        };
    }
    if ((startAngle < angle && angle < 180 + startAngle) === (orient === mainOrient)) return "left";
    return "right";
}
function $40d0e08a5d245054$export$d1758d72402d366e(type, channel) {
    if (channel === "x" && (0, $7k4G6.contains)([
        "quantitative",
        "temporal"
    ], type)) return true;
    return undefined;
}
function $40d0e08a5d245054$export$d0da6ae0862c8a42(type, scaleType, hasTimeUnit, sort) {
    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are
    if (hasTimeUnit && !(0, $2bi3s.isObject)(sort) || type !== "nominal" && type !== "ordinal") {
        if (scaleType === "log" || scaleType === "symlog") return "greedy";
        return true;
    }
    return undefined;
}
function $40d0e08a5d245054$export$a8428491e1169683(channel) {
    return channel === "x" ? "bottom" : "left";
}
function $40d0e08a5d245054$export$949b1f5716249e2b({ fieldOrDatumDef: fieldOrDatumDef, scaleType: scaleType, size: size, values: vals }) {
    var _a;
    if (!vals && !(0, $9rekY.hasDiscreteDomain)(scaleType) && scaleType !== "log") {
        if ((0, $2hAmp.isFieldDef)(fieldOrDatumDef)) {
            if ((0, $iR8lA.isBinning)(fieldOrDatumDef.bin)) // for binned data, we don't want more ticks than maxbins
            return {
                signal: `ceil(${size.signal}/10)`
            };
            if (fieldOrDatumDef.timeUnit && (0, $7k4G6.contains)([
                "month",
                "hours",
                "day",
                "quarter"
            ], (_a = (0, $aMeqD.normalizeTimeUnit)(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit)) return undefined;
        }
        return {
            signal: `ceil(${size.signal}/40)`
        };
    }
    return undefined;
}
function $40d0e08a5d245054$export$bda64fdd22b1b207(model, channel) {
    const channel2 = channel === "x" ? "x2" : "y2";
    const fieldDef = model.fieldDef(channel);
    const fieldDef2 = model.fieldDef(channel2);
    const title1 = fieldDef ? fieldDef.title : undefined;
    const title2 = fieldDef2 ? fieldDef2.title : undefined;
    if (title1 && title2) return (0, $9ulW1.mergeTitle)(title1, title2);
    else if (title1) return title1;
    else if (title2) return title2;
    else if (title1 !== undefined) // falsy value to disable config
    return title1;
    else if (title2 !== undefined) // falsy value to disable config
    return title2;
    return undefined;
}
function $40d0e08a5d245054$export$68c286be0e7e55b7(axis, fieldOrDatumDef) {
    const vals = axis.values;
    if ((0, $2bi3s.isArray)(vals)) return (0, $2hAmp.valueArray)(fieldOrDatumDef, vals);
    else if ((0, $4xdf1.isSignalRef)(vals)) return vals;
    return undefined;
}
function $40d0e08a5d245054$export$53e6c5bd943552d0(mark, fieldDef) {
    if (mark === "rect" && (0, $2hAmp.isDiscrete)(fieldDef)) return 1;
    return 0;
}

});
parcelRegister("cQy2B", function(module, exports) {

$parcel$export(module.exports, "getAxisConfigs", () => $95a4bf360035484f$export$742407dbe3be64f3);
$parcel$export(module.exports, "getAxisConfig", () => $95a4bf360035484f$export$2294df02dc291bb9);

var $2bi3s = parcelRequire("2bi3s");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");
function $95a4bf360035484f$var$getAxisConfigFromConfigTypes(configTypes, config, channel, orient) {
    // TODO: add special casing to add conditional value based on orient signal
    return Object.assign.apply(null, [
        {},
        ...configTypes.map((configType)=>{
            if (configType === "axisOrient") {
                const orient1 = channel === "x" ? "bottom" : "left";
                const orientConfig1 = config[channel === "x" ? "axisBottom" : "axisLeft"] || {};
                const orientConfig2 = config[channel === "x" ? "axisTop" : "axisRight"] || {};
                const props = new Set([
                    ...(0, $7k4G6.keys)(orientConfig1),
                    ...(0, $7k4G6.keys)(orientConfig2)
                ]);
                const conditionalOrientAxisConfig = {};
                for (const prop of props.values())conditionalOrientAxisConfig[prop] = {
                    // orient is surely signal in this case
                    signal: `${orient["signal"]} === "${orient1}" ? ${(0, $9ulW1.signalOrStringValue)(orientConfig1[prop])} : ${(0, $9ulW1.signalOrStringValue)(orientConfig2[prop])}`
                };
                return conditionalOrientAxisConfig;
            }
            return config[configType];
        })
    ]);
}
function $95a4bf360035484f$export$742407dbe3be64f3(channel, scaleType, orient, config) {
    const typeBasedConfigTypes = scaleType === "band" ? [
        "axisDiscrete",
        "axisBand"
    ] : scaleType === "point" ? [
        "axisDiscrete",
        "axisPoint"
    ] : (0, $9rekY.isQuantitative)(scaleType) ? [
        "axisQuantitative"
    ] : scaleType === "time" || scaleType === "utc" ? [
        "axisTemporal"
    ] : [];
    const axisChannel = channel === "x" ? "axisX" : "axisY";
    const axisOrient = (0, $4xdf1.isSignalRef)(orient) ? "axisOrient" : "axis" + (0, $7k4G6.titleCase)(orient); // axisTop, axisBottom, ...
    const vlOnlyConfigTypes = [
        // technically Vega does have axisBand, but if we make another separation here,
        // it will further introduce complexity in the code
        ...typeBasedConfigTypes,
        ...typeBasedConfigTypes.map((c)=>axisChannel + c.substr(4))
    ];
    const vgConfigTypes = [
        "axis",
        axisOrient,
        axisChannel
    ];
    return {
        vlOnlyAxisConfig: $95a4bf360035484f$var$getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config, channel, orient),
        vgAxisConfig: $95a4bf360035484f$var$getAxisConfigFromConfigTypes(vgConfigTypes, config, channel, orient),
        axisConfigStyle: $95a4bf360035484f$export$bef2510a8c264688([
            ...vgConfigTypes,
            ...vlOnlyConfigTypes
        ], config)
    };
}
function $95a4bf360035484f$export$bef2510a8c264688(axisConfigTypes, config) {
    var _a;
    const toMerge = [
        {}
    ];
    for (const configType of axisConfigTypes){
        // TODO: add special casing to add conditional value based on orient signal
        let style = (_a = config[configType]) === null || _a === void 0 ? void 0 : _a.style;
        if (style) {
            style = (0, $2bi3s.array)(style);
            for (const s of style)toMerge.push(config.style[s]);
        }
    }
    return Object.assign.apply(null, toMerge);
}
function $95a4bf360035484f$export$2294df02dc291bb9(property, styleConfigIndex, style, axisConfigs = {}) {
    var _a;
    const styleConfig = (0, $9ulW1.getStyleConfig)(property, style, styleConfigIndex);
    if (styleConfig !== undefined) return {
        configFrom: "style",
        configValue: styleConfig
    };
    for (const configFrom of [
        "vlOnlyAxisConfig",
        "vgAxisConfig",
        "axisConfigStyle"
    ]){
        if (((_a = axisConfigs[configFrom]) === null || _a === void 0 ? void 0 : _a[property]) !== undefined) return {
            configFrom: configFrom,
            configValue: axisConfigs[configFrom][property]
        };
    }
    return {};
}

});


parcelRegister("8IEdE", function(module, exports) {

$parcel$export(module.exports, "CalculateNode", () => $6591a1785b930df9$export$447fd0f2f1fdf346);
$parcel$export(module.exports, "sortArrayIndexField", () => $6591a1785b930df9$export$f3022bcaaaa01cec);

var $2hAmp = parcelRequire("2hAmp");

var $6EUuI = parcelRequire("6EUuI");

var $Xb2We = parcelRequire("Xb2We");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");

var $ik5zD = parcelRequire("ik5zD");
class $6591a1785b930df9$export$447fd0f2f1fdf346 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        super(parent);
        this.transform = transform;
        this._dependentFields = (0, $ik5zD.getDependentFields)(this.transform.calculate);
    }
    clone() {
        return new $6591a1785b930df9$export$447fd0f2f1fdf346(null, (0, $7k4G6.duplicate)(this.transform));
    }
    static parseAllForSortIndex(parent, model) {
        // get all the encoding with sort fields from model
        model.forEachFieldDef((fieldDef, channel)=>{
            if (!(0, $2hAmp.isScaleFieldDef)(fieldDef)) return;
            if ((0, $Xb2We.isSortArray)(fieldDef.sort)) {
                const { field: field, timeUnit: timeUnit } = fieldDef;
                const sort = fieldDef.sort;
                // generate `datum["a"] === val0 ? 0 : datum["a"] === val1 ? 1 : ... : n` via FieldEqualPredicate
                const calculate = sort.map((sortValue, i)=>{
                    return `${(0, $6EUuI.fieldFilterExpression)({
                        field: field,
                        timeUnit: timeUnit,
                        equal: sortValue
                    })} ? ${i} : `;
                }).join("") + sort.length;
                parent = new $6591a1785b930df9$export$447fd0f2f1fdf346(parent, {
                    calculate: calculate,
                    as: $6591a1785b930df9$export$f3022bcaaaa01cec(fieldDef, channel, {
                        forAs: true
                    })
                });
            }
        });
        return parent;
    }
    producedFields() {
        return new Set([
            this.transform.as
        ]);
    }
    dependentFields() {
        return this._dependentFields;
    }
    assemble() {
        return {
            type: "formula",
            expr: this.transform.calculate,
            as: this.transform.as
        };
    }
    hash() {
        return `Calculate ${(0, $7k4G6.hash)(this.transform)}`;
    }
}
function $6591a1785b930df9$export$f3022bcaaaa01cec(fieldDef, channel, opt) {
    return (0, $2hAmp.vgField)(fieldDef, Object.assign({
        prefix: channel,
        suffix: "sort_index"
    }, opt !== null && opt !== void 0 ? opt : {}));
}

});

parcelRegister("Ejdtd", function(module, exports) {

$parcel$export(module.exports, "getHeaderChannel", () => $0792a47dbd9d9d5c$export$9585d506ceeae355);
$parcel$export(module.exports, "getHeaderProperty", () => $0792a47dbd9d9d5c$export$acca6a0a0a61bb9f);
$parcel$export(module.exports, "getHeaderProperties", () => $0792a47dbd9d9d5c$export$6af3a066c05aea0b);

var $7k4G6 = parcelRequire("7k4G6");
function $0792a47dbd9d9d5c$export$9585d506ceeae355(channel, orient) {
    if ((0, $7k4G6.contains)([
        "top",
        "bottom"
    ], orient)) return "column";
    else if ((0, $7k4G6.contains)([
        "left",
        "right"
    ], orient)) return "row";
    return channel === "row" ? "row" : "column";
}
function $0792a47dbd9d9d5c$export$acca6a0a0a61bb9f(prop, header, config, channel) {
    const headerSpecificConfig = channel === "row" ? config.headerRow : channel === "column" ? config.headerColumn : config.headerFacet;
    return (0, $7k4G6.getFirstDefined)((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);
}
function $0792a47dbd9d9d5c$export$6af3a066c05aea0b(properties, header, config, channel) {
    const props = {};
    for (const prop of properties){
        const value = $0792a47dbd9d9d5c$export$acca6a0a0a61bb9f(prop, header || {}, config, channel);
        if (value !== undefined) props[prop] = value;
    }
    return props;
}

});

parcelRegister("hkDCc", function(module, exports) {

$parcel$export(module.exports, "HEADER_CHANNELS", () => $034198ea024681cc$export$a7ddb3d84e00e03e);
$parcel$export(module.exports, "HEADER_TYPES", () => $034198ea024681cc$export$fc3deda55016eb8b);
const $034198ea024681cc$export$a7ddb3d84e00e03e = [
    "row",
    "column"
];
const $034198ea024681cc$export$fc3deda55016eb8b = [
    "header",
    "footer"
];

});


parcelRegister("eGXJ8", function(module, exports) {

$parcel$export(module.exports, "assembleLayoutSignals", () => $ab23517324e43bfe$export$5c1ae40a76dc139e);
$parcel$export(module.exports, "sizeExpr", () => $ab23517324e43bfe$export$a35dba20a6bbd2f8);

var $iX9mu = parcelRequire("iX9mu");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $jkJyY = parcelRequire("jkJyY");
function $ab23517324e43bfe$export$5c1ae40a76dc139e(model) {
    return [
        ...$ab23517324e43bfe$export$dd7eb9f1bc323d93(model, "width"),
        ...$ab23517324e43bfe$export$dd7eb9f1bc323d93(model, "height"),
        ...$ab23517324e43bfe$export$dd7eb9f1bc323d93(model, "childWidth"),
        ...$ab23517324e43bfe$export$dd7eb9f1bc323d93(model, "childHeight")
    ];
}
function $ab23517324e43bfe$export$dd7eb9f1bc323d93(model, sizeType) {
    const channel = sizeType === "width" ? "x" : "y";
    const size = model.component.layoutSize.get(sizeType);
    if (!size || size === "merged") return [];
    // Read size signal name from name map, just in case it is the top-level size signal that got renamed.
    const name = model.getSizeSignalRef(sizeType).signal;
    if (size === "step") {
        const scaleComponent = model.getScaleComponent(channel);
        if (scaleComponent) {
            const type = scaleComponent.get("type");
            const range = scaleComponent.get("range");
            if ((0, $9rekY.hasDiscreteDomain)(type) && (0, $4xdf1.isVgRangeStep)(range)) {
                const scaleName = model.scaleName(channel);
                if ((0, $jkJyY.isFacetModel)(model.parent)) {
                    // If parent is facet and this is an independent scale, return only signal signal
                    // as the width/height will be calculated using the cardinality from
                    // facet's aggregate rather than reading from scale domain
                    const parentResolve = model.parent.component.resolve;
                    if (parentResolve.scale[channel] === "independent") return [
                        $ab23517324e43bfe$var$stepSignal(scaleName, range)
                    ];
                }
                return [
                    $ab23517324e43bfe$var$stepSignal(scaleName, range),
                    {
                        name: name,
                        update: $ab23517324e43bfe$export$a35dba20a6bbd2f8(scaleName, scaleComponent, `domain('${scaleName}').length`)
                    }
                ];
            }
        }
        /* istanbul ignore next: Condition should not happen -- only for warning in development. */ throw new Error("layout size is step although width/height is not step.");
    } else if (size == "container") {
        const isWidth = name.endsWith("width");
        const expr = isWidth ? "containerSize()[0]" : "containerSize()[1]";
        const defaultValue = (0, $iX9mu.getViewConfigContinuousSize)(model.config.view, isWidth ? "width" : "height");
        const safeExpr = `isFinite(${expr}) ? ${expr} : ${defaultValue}`;
        return [
            {
                name: name,
                init: safeExpr,
                on: [
                    {
                        update: safeExpr,
                        events: "window:resize"
                    }
                ]
            }
        ];
    } else return [
        {
            name: name,
            value: size
        }
    ];
}
function $ab23517324e43bfe$var$stepSignal(scaleName, range) {
    return {
        name: scaleName + "_step",
        value: range.step
    };
}
function $ab23517324e43bfe$export$a35dba20a6bbd2f8(scaleName, scaleComponent, cardinality) {
    const type = scaleComponent.get("type");
    const padding = scaleComponent.get("padding");
    const paddingOuter = (0, $7k4G6.getFirstDefined)(scaleComponent.get("paddingOuter"), padding);
    let paddingInner = scaleComponent.get("paddingInner");
    paddingInner = type === "band" ? paddingInner !== undefined ? paddingInner : padding : // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
    1;
    return `bandspace(${cardinality}, ${(0, $9ulW1.signalOrStringValue)(paddingInner)}, ${(0, $9ulW1.signalOrStringValue)(paddingOuter)}) * ${scaleName}_step`;
}

});

parcelRegister("H6zbC", function(module, exports) {

$parcel$export(module.exports, "getSizeTypeFromLayoutSizeType", () => $08191c3de9053685$export$efd2d22410a8d097);
function $08191c3de9053685$export$efd2d22410a8d097(layoutSizeType) {
    return layoutSizeType === "childWidth" ? "width" : layoutSizeType === "childHeight" ? "height" : layoutSizeType;
}

});

parcelRegister("7Igmf", function(module, exports) {

$parcel$export(module.exports, "assembleLegends", () => $59d954c73909488b$export$dd662f81849e3e58);

var $kMFrr = parcelRequire("kMFrr");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $dTZ5J = parcelRequire("dTZ5J");
var $59d954c73909488b$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $59d954c73909488b$var$setLegendEncode(legend, part, vgProp, vgRef) {
    var _a, _b, _c;
    legend.encode = (_a = legend.encode) !== null && _a !== void 0 ? _a : {};
    legend.encode[part] = (_b = legend.encode[part]) !== null && _b !== void 0 ? _b : {};
    legend.encode[part].update = (_c = legend.encode[part].update) !== null && _c !== void 0 ? _c : {};
    // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291
    legend.encode[part].update[vgProp] = vgRef;
}
function $59d954c73909488b$export$dd662f81849e3e58(model) {
    const legendComponentIndex = model.component.legends;
    const legendByDomain = {};
    for (const channel of (0, $7k4G6.keys)(legendComponentIndex)){
        const scaleComponent = model.getScaleComponent(channel);
        const domainHash = (0, $7k4G6.stringify)(scaleComponent.get("domains"));
        if (legendByDomain[domainHash]) for (const mergedLegendComponent of legendByDomain[domainHash]){
            const merged = (0, $dTZ5J.mergeLegendComponent)(mergedLegendComponent, legendComponentIndex[channel]);
            if (!merged) // If cannot merge, need to add this legend separately
            legendByDomain[domainHash].push(legendComponentIndex[channel]);
        }
        else legendByDomain[domainHash] = [
            legendComponentIndex[channel].clone()
        ];
    }
    const legends = (0, $7k4G6.vals)(legendByDomain).flat().map((l)=>$59d954c73909488b$export$a5d8b256fc09271f(l, model.config)).filter((l)=>l !== undefined);
    return legends;
}
function $59d954c73909488b$export$a5d8b256fc09271f(legendCmpt, config) {
    var _a, _b, _c;
    const _d = legendCmpt.combine(), { disable: disable, labelExpr: labelExpr, selections: selections } = _d, legend = $59d954c73909488b$var$__rest(_d, [
        "disable",
        "labelExpr",
        "selections"
    ]);
    if (disable) return undefined;
    if (config.aria === false && legend.aria == undefined) legend.aria = false;
    if ((_a = legend.encode) === null || _a === void 0 ? void 0 : _a.symbols) {
        const out = legend.encode.symbols.update;
        if (out.fill && out.fill["value"] !== "transparent" && !out.stroke && !legend.stroke) // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.
        out.stroke = {
            value: "transparent"
        };
        // Remove properties that the legend is encoding.
        for (const property of (0, $kMFrr.LEGEND_SCALE_CHANNELS))if (legend[property]) delete out[property];
    }
    if (!legend.title) // title schema doesn't include null, ''
    delete legend.title;
    if (labelExpr !== undefined) {
        let expr = labelExpr;
        if (((_c = (_b = legend.encode) === null || _b === void 0 ? void 0 : _b.labels) === null || _c === void 0 ? void 0 : _c.update) && (0, $4xdf1.isSignalRef)(legend.encode.labels.update.text)) expr = (0, $7k4G6.replaceAll)(labelExpr, "datum.label", legend.encode.labels.update.text.signal);
        $59d954c73909488b$var$setLegendEncode(legend, "labels", "text", {
            signal: expr
        });
    }
    return legend;
}

});
parcelRegister("dTZ5J", function(module, exports) {

$parcel$export(module.exports, "parseLegend", () => $a1efcce2a53c2011$export$1b14344eb0b65f17);
$parcel$export(module.exports, "mergeLegendComponent", () => $a1efcce2a53c2011$export$1dd5f43c4d4c1d0f);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $kMFrr = parcelRequire("kMFrr");

var $aMeqD = parcelRequire("aMeqD");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $4BwXy = parcelRequire("4BwXy");

var $jkJyY = parcelRequire("jkJyY");

var $chIKM = parcelRequire("chIKM");

var $eTqRr = parcelRequire("eTqRr");

var $5T1O4 = parcelRequire("5T1O4");

var $8rSzh = parcelRequire("8rSzh");

var $4IBOv = parcelRequire("4IBOv");

var $hULCO = parcelRequire("hULCO");
function $a1efcce2a53c2011$export$1b14344eb0b65f17(model) {
    const legendComponent = (0, $jkJyY.isUnitModel)(model) ? $a1efcce2a53c2011$var$parseUnitLegend(model) : $a1efcce2a53c2011$var$parseNonUnitLegend(model);
    model.component.legends = legendComponent;
    return legendComponent;
}
function $a1efcce2a53c2011$var$parseUnitLegend(model) {
    const { encoding: encoding } = model;
    const legendComponent = {};
    for (const channel of [
        (0, $fWfT0.COLOR),
        ...(0, $kMFrr.LEGEND_SCALE_CHANNELS)
    ]){
        const def = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]);
        if (!def || !model.getScaleComponent(channel)) continue;
        if (channel === (0, $fWfT0.SHAPE) && (0, $2hAmp.isFieldDef)(def) && def.type === (0, $9LX7L.GEOJSON)) continue;
        legendComponent[channel] = $a1efcce2a53c2011$export$4c2bafadf29aef64(model, channel);
    }
    return legendComponent;
}
function $a1efcce2a53c2011$var$getLegendDefWithScale(model, channel) {
    const scale = model.scaleName(channel);
    if (model.mark === "trail") {
        if (channel === "color") // trail is a filled mark, but its default symbolType ("stroke") should use "stroke"
        return {
            stroke: scale
        };
        else if (channel === "size") return {
            strokeWidth: scale
        };
    }
    if (channel === "color") return model.markDef.filled ? {
        fill: scale
    } : {
        stroke: scale
    };
    return {
        [channel]: scale
    };
}
// eslint-disable-next-line @typescript-eslint/ban-types
function $a1efcce2a53c2011$var$isExplicit(value, property, legend, fieldDef) {
    switch(property){
        case "disable":
            return legend !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit
        case "values":
            // specified legend.values is already respected, but may get transformed.
            return !!(legend === null || legend === void 0 ? void 0 : legend.values);
        case "title":
            // title can be explicit if fieldDef.title is set
            if (property === "title" && value === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) return true;
    }
    // Otherwise, things are explicit if the returned value matches the specified property
    return value === (legend || {})[property];
}
function $a1efcce2a53c2011$export$4c2bafadf29aef64(model, channel) {
    var _a, _b, _c;
    let legend = model.legend(channel);
    const { markDef: markDef, encoding: encoding, config: config } = model;
    const legendConfig = config.legend;
    const legendCmpt = new (0, $8rSzh.LegendComponent)({}, $a1efcce2a53c2011$var$getLegendDefWithScale(model, channel));
    (0, $eTqRr.parseInteractiveLegend)(model, channel, legendCmpt);
    const disable = legend !== undefined ? !legend : legendConfig.disable;
    legendCmpt.set("disable", disable, legend !== undefined);
    if (disable) return legendCmpt;
    legend = legend || {};
    const scaleType = model.getScaleComponent(channel).get("type");
    const fieldOrDatumDef = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]);
    const timeUnit = (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? (_a = (0, $aMeqD.normalizeTimeUnit)(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined;
    const orient = legend.orient || config.legend.orient || "right";
    const legendType = (0, $hULCO.getLegendType)({
        legend: legend,
        channel: channel,
        timeUnit: timeUnit,
        scaleType: scaleType
    });
    const direction = (0, $hULCO.getDirection)({
        legend: legend,
        legendType: legendType,
        orient: orient,
        legendConfig: legendConfig
    });
    const ruleParams = {
        legend: legend,
        channel: channel,
        model: model,
        markDef: markDef,
        encoding: encoding,
        fieldOrDatumDef: fieldOrDatumDef,
        legendConfig: legendConfig,
        config: config,
        scaleType: scaleType,
        orient: orient,
        legendType: legendType,
        direction: direction
    };
    for (const property of (0, $8rSzh.LEGEND_COMPONENT_PROPERTIES)){
        if (legendType === "gradient" && property.startsWith("symbol") || legendType === "symbol" && property.startsWith("gradient")) continue;
        const value = property in (0, $hULCO.legendRules) ? (0, $hULCO.legendRules)[property](ruleParams) : legend[property];
        if (value !== undefined) {
            const explicit = $a1efcce2a53c2011$var$isExplicit(value, property, legend, model.fieldDef(channel));
            if (explicit || config.legend[property] === undefined) legendCmpt.set(property, value, explicit);
        }
    }
    const legendEncoding = (_b = legend === null || legend === void 0 ? void 0 : legend.encoding) !== null && _b !== void 0 ? _b : {};
    const selections = legendCmpt.get("selections");
    const legendEncode = {};
    const legendEncodeParams = {
        fieldOrDatumDef: fieldOrDatumDef,
        model: model,
        channel: channel,
        legendCmpt: legendCmpt,
        legendType: legendType
    };
    for (const part of [
        "labels",
        "legend",
        "title",
        "symbols",
        "gradient",
        "entries"
    ]){
        const legendEncodingPart = (0, $4BwXy.guideEncodeEntry)((_c = legendEncoding[part]) !== null && _c !== void 0 ? _c : {}, model);
        const value = part in (0, $4IBOv.legendEncodeRules) ? (0, $4IBOv.legendEncodeRules)[part](legendEncodingPart, legendEncodeParams) // apply rule
         : legendEncodingPart; // no rule -- just default values
        if (value !== undefined && !(0, $7k4G6.isEmpty)(value)) legendEncode[part] = Object.assign(Object.assign(Object.assign({}, (selections === null || selections === void 0 ? void 0 : selections.length) && (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? {
            name: `${(0, $7k4G6.varName)(fieldOrDatumDef.field)}_legend_${part}`
        } : {}), (selections === null || selections === void 0 ? void 0 : selections.length) ? {
            interactive: !!selections
        } : {}), {
            update: value
        });
    }
    if (!(0, $7k4G6.isEmpty)(legendEncode)) legendCmpt.set("encode", legendEncode, !!(legend === null || legend === void 0 ? void 0 : legend.encoding));
    return legendCmpt;
}
function $a1efcce2a53c2011$var$parseNonUnitLegend(model) {
    const { legends: legends, resolve: resolve } = model.component;
    for (const child of model.children){
        $a1efcce2a53c2011$export$1b14344eb0b65f17(child);
        for (const channel of (0, $7k4G6.keys)(child.component.legends)){
            resolve.legend[channel] = (0, $chIKM.parseGuideResolve)(model.component.resolve, channel);
            if (resolve.legend[channel] === "shared") {
                // If the resolve says shared (and has not been overridden)
                // We will try to merge and see if there is a conflict
                legends[channel] = $a1efcce2a53c2011$export$1dd5f43c4d4c1d0f(legends[channel], child.component.legends[channel]);
                if (!legends[channel]) {
                    // If merge returns nothing, there is a conflict so we cannot make the legend shared.
                    // Thus, mark legend as independent and remove the legend component.
                    resolve.legend[channel] = "independent";
                    delete legends[channel];
                }
            }
        }
    }
    for (const channel of (0, $7k4G6.keys)(legends))for (const child of model.children){
        if (!child.component.legends[channel]) continue;
        if (resolve.legend[channel] === "shared") // After merging shared legend, make sure to remove legend from child
        delete child.component.legends[channel];
    }
    return legends;
}
function $a1efcce2a53c2011$export$1dd5f43c4d4c1d0f(mergedLegend, childLegend) {
    var _a, _b, _c, _d;
    if (!mergedLegend) return childLegend.clone();
    const mergedOrient = mergedLegend.getWithExplicit("orient");
    const childOrient = childLegend.getWithExplicit("orient");
    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
    // Cannot merge due to inconsistent orient
    return undefined;
    let typeMerged = false;
    // Otherwise, let's merge
    for (const prop of (0, $8rSzh.LEGEND_COMPONENT_PROPERTIES)){
        const mergedValueWithExplicit = (0, $5T1O4.mergeValuesWithExplicit)(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, "legend", // Tie breaker function
        (v1, v2)=>{
            switch(prop){
                case "symbolType":
                    return $a1efcce2a53c2011$var$mergeSymbolType(v1, v2);
                case "title":
                    return (0, $9ulW1.mergeTitleComponent)(v1, v2);
                case "type":
                    // There are only two types. If we have different types, then prefer symbol over gradient.
                    typeMerged = true;
                    return (0, $5T1O4.makeImplicit)("symbol");
            }
            return (0, $5T1O4.defaultTieBreaker)(v1, v2, prop, "legend");
        });
        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
    }
    if (typeMerged) {
        if ((_b = (_a = mergedLegend.implicit) === null || _a === void 0 ? void 0 : _a.encode) === null || _b === void 0 ? void 0 : _b.gradient) (0, $7k4G6.deleteNestedProperty)(mergedLegend.implicit, [
            "encode",
            "gradient"
        ]);
        if ((_d = (_c = mergedLegend.explicit) === null || _c === void 0 ? void 0 : _c.encode) === null || _d === void 0 ? void 0 : _d.gradient) (0, $7k4G6.deleteNestedProperty)(mergedLegend.explicit, [
            "encode",
            "gradient"
        ]);
    }
    return mergedLegend;
}
function $a1efcce2a53c2011$var$mergeSymbolType(st1, st2) {
    if (st2.value === "circle") // prefer "circle" over "stroke"
    return st2;
    return st1;
}

});
parcelRegister("4BwXy", function(module, exports) {

$parcel$export(module.exports, "guideEncodeEntry", () => $35a42f39c83d6b25$export$25068e479d711871);

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");
parcelRequire("6gzdc");
var $4qTOo = parcelRequire("4qTOo");
function $35a42f39c83d6b25$export$25068e479d711871(encoding, model) {
    return (0, $7k4G6.keys)(encoding).reduce((encode, channel)=>{
        const valueDef = encoding[channel];
        return Object.assign(Object.assign({}, encode), (0, $4qTOo.wrapCondition)(model, valueDef, channel, (def)=>(0, $9ulW1.signalOrValueRef)(def.value)));
    }, {});
}

});

parcelRegister("chIKM", function(module, exports) {

$parcel$export(module.exports, "defaultScaleResolve", () => $8f19c9aef06f93db$export$8cc5eb8ab4abc60c);
$parcel$export(module.exports, "parseGuideResolve", () => $8f19c9aef06f93db$export$575698c6d6297a18);

var $fWfT0 = parcelRequire("fWfT0");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $jkJyY = parcelRequire("jkJyY");
function $8f19c9aef06f93db$export$8cc5eb8ab4abc60c(channel, model) {
    if ((0, $jkJyY.isLayerModel)(model) || (0, $jkJyY.isFacetModel)(model)) return "shared";
    else if ((0, $jkJyY.isConcatModel)(model)) return (0, $fWfT0.isXorY)(channel) ? "independent" : "shared";
    /* istanbul ignore next: should never reach here. */ throw new Error("invalid model type for resolve");
}
function $8f19c9aef06f93db$export$575698c6d6297a18(resolve, channel) {
    const channelScaleResolve = resolve.scale[channel];
    const guide = (0, $fWfT0.isXorY)(channel) ? "axis" : "legend";
    if (channelScaleResolve === "independent") {
        if (resolve[guide][channel] === "shared") $3XBQv.warn($bHNid.independentScaleMeansIndependentGuide(channel));
        return "independent";
    }
    return resolve[guide][channel] || "shared";
}

});

parcelRegister("8rSzh", function(module, exports) {

$parcel$export(module.exports, "LEGEND_COMPONENT_PROPERTIES", () => $626b2c709fc51a36$export$bde005c2a6b79b07);
$parcel$export(module.exports, "LegendComponent", () => $626b2c709fc51a36$export$78003ba218df33f3);

var $kMFrr = parcelRequire("kMFrr");

var $7k4G6 = parcelRequire("7k4G6");

var $5T1O4 = parcelRequire("5T1O4");
const $626b2c709fc51a36$var$LEGEND_COMPONENT_PROPERTY_INDEX = Object.assign(Object.assign({}, (0, $kMFrr.COMMON_LEGEND_PROPERTY_INDEX)), {
    disable: 1,
    labelExpr: 1,
    selections: 1,
    // channel scales
    opacity: 1,
    shape: 1,
    stroke: 1,
    fill: 1,
    size: 1,
    strokeWidth: 1,
    strokeDash: 1,
    // encode
    encode: 1
});
const $626b2c709fc51a36$export$bde005c2a6b79b07 = (0, $7k4G6.keys)($626b2c709fc51a36$var$LEGEND_COMPONENT_PROPERTY_INDEX);
class $626b2c709fc51a36$export$78003ba218df33f3 extends (0, $5T1O4.Split) {
}

});

parcelRegister("4IBOv", function(module, exports) {

$parcel$export(module.exports, "legendEncodeRules", () => $36f89a8007f1afee$export$9d290fec2cfa7463);
$parcel$export(module.exports, "getFirstConditionValue", () => $36f89a8007f1afee$export$473a5da0103760d8);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9mRLv = parcelRequire("9mRLv");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $7oTmT = parcelRequire("7oTmT");
parcelRequire("6gzdc");
var $blSq9 = parcelRequire("blSq9");

var $Wddys = parcelRequire("Wddys");
const $36f89a8007f1afee$export$9d290fec2cfa7463 = {
    symbols: $36f89a8007f1afee$export$47616e9f7f5fe113,
    gradient: $36f89a8007f1afee$export$f7d09cddc76f277f,
    labels: $36f89a8007f1afee$export$a238cb463698c900,
    entries: $36f89a8007f1afee$export$3e9f948b41964866
};
function $36f89a8007f1afee$export$47616e9f7f5fe113(symbolsSpec, { fieldOrDatumDef: fieldOrDatumDef, model: model, channel: channel, legendCmpt: legendCmpt, legendType: legendType }) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (legendType !== "symbol") return undefined;
    const { markDef: markDef, encoding: encoding, config: config, mark: mark } = model;
    const filled = markDef.filled && mark !== "trail";
    let out = Object.assign(Object.assign({}, (0, $9ulW1.applyMarkConfig)({}, model, (0, $9mRLv.FILL_STROKE_CONFIG))), $blSq9.color(model, {
        filled: filled
    })); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry
    const symbolOpacity = (_a = legendCmpt.get("symbolOpacity")) !== null && _a !== void 0 ? _a : config.legend.symbolOpacity;
    const symbolFillColor = (_b = legendCmpt.get("symbolFillColor")) !== null && _b !== void 0 ? _b : config.legend.symbolFillColor;
    const symbolStrokeColor = (_c = legendCmpt.get("symbolStrokeColor")) !== null && _c !== void 0 ? _c : config.legend.symbolStrokeColor;
    const opacity = symbolOpacity === undefined ? (_d = $36f89a8007f1afee$var$getMaxValue(encoding.opacity)) !== null && _d !== void 0 ? _d : markDef.opacity : undefined;
    if (out.fill) {
        // for fill legend, we don't want any fill in symbol
        if (channel === "fill" || filled && channel === (0, $fWfT0.COLOR)) delete out.fill;
        else {
            if (out.fill["field"]) {
                // For others, set fill to some opaque value (or nothing if a color is already set)
                if (symbolFillColor) delete out.fill;
                else {
                    out.fill = (0, $9ulW1.signalOrValueRef)((_e = config.legend.symbolBaseFillColor) !== null && _e !== void 0 ? _e : "black");
                    out.fillOpacity = (0, $9ulW1.signalOrValueRef)(opacity !== null && opacity !== void 0 ? opacity : 1);
                }
            } else if ((0, $2bi3s.isArray)(out.fill)) {
                const fill = (_h = (_g = $36f89a8007f1afee$export$473a5da0103760d8((_f = encoding.fill) !== null && _f !== void 0 ? _f : encoding.color)) !== null && _g !== void 0 ? _g : markDef.fill) !== null && _h !== void 0 ? _h : filled && markDef.color;
                if (fill) out.fill = (0, $9ulW1.signalOrValueRef)(fill);
            }
        }
    }
    if (out.stroke) {
        if (channel === "stroke" || !filled && channel === (0, $fWfT0.COLOR)) delete out.stroke;
        else {
            if (out.stroke["field"] || symbolStrokeColor) // For others, remove stroke field
            delete out.stroke;
            else if ((0, $2bi3s.isArray)(out.stroke)) {
                const stroke = (0, $7k4G6.getFirstDefined)($36f89a8007f1afee$export$473a5da0103760d8(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);
                if (stroke) out.stroke = {
                    value: stroke
                };
            }
        }
    }
    if (channel !== (0, $fWfT0.OPACITY)) {
        const condition = (0, $2hAmp.isFieldDef)(fieldOrDatumDef) && $36f89a8007f1afee$var$selectedCondition(model, legendCmpt, fieldOrDatumDef);
        if (condition) out.opacity = [
            Object.assign({
                test: condition
            }, (0, $9ulW1.signalOrValueRef)(opacity !== null && opacity !== void 0 ? opacity : 1)),
            (0, $9ulW1.signalOrValueRef)(config.legend.unselectedOpacity)
        ];
        else if (opacity) out.opacity = (0, $9ulW1.signalOrValueRef)(opacity);
    }
    out = Object.assign(Object.assign({}, out), symbolsSpec);
    return (0, $7k4G6.isEmpty)(out) ? undefined : out;
}
function $36f89a8007f1afee$export$f7d09cddc76f277f(gradientSpec, { model: model, legendType: legendType, legendCmpt: legendCmpt }) {
    var _a;
    if (legendType !== "gradient") return undefined;
    const { config: config, markDef: markDef, encoding: encoding } = model;
    let out = {};
    const gradientOpacity = (_a = legendCmpt.get("gradientOpacity")) !== null && _a !== void 0 ? _a : config.legend.gradientOpacity;
    const opacity = gradientOpacity === undefined ? $36f89a8007f1afee$var$getMaxValue(encoding.opacity) || markDef.opacity : undefined;
    if (opacity) // only apply opacity if it is neither zero or undefined
    out.opacity = (0, $9ulW1.signalOrValueRef)(opacity);
    out = Object.assign(Object.assign({}, out), gradientSpec);
    return (0, $7k4G6.isEmpty)(out) ? undefined : out;
}
function $36f89a8007f1afee$export$a238cb463698c900(specifiedlabelsSpec, { fieldOrDatumDef: fieldOrDatumDef, model: model, channel: channel, legendCmpt: legendCmpt }) {
    const legend = model.legend(channel) || {};
    const config = model.config;
    const condition = (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? $36f89a8007f1afee$var$selectedCondition(model, legendCmpt, fieldOrDatumDef) : undefined;
    const opacity = condition ? [
        {
            test: condition,
            value: 1
        },
        {
            value: config.legend.unselectedOpacity
        }
    ] : undefined;
    const { format: format, formatType: formatType } = legend;
    const text = (0, $7oTmT.isCustomFormatType)(formatType) ? (0, $7oTmT.formatCustomType)({
        fieldOrDatumDef: fieldOrDatumDef,
        field: "datum.value",
        format: format,
        formatType: formatType,
        config: config
    }) : undefined;
    const labelsSpec = Object.assign(Object.assign(Object.assign({}, opacity ? {
        opacity: opacity
    } : {}), text ? {
        text: text
    } : {}), specifiedlabelsSpec);
    return (0, $7k4G6.isEmpty)(labelsSpec) ? undefined : labelsSpec;
}
function $36f89a8007f1afee$export$3e9f948b41964866(entriesSpec, { legendCmpt: legendCmpt }) {
    const selections = legendCmpt.get("selections");
    return (selections === null || selections === void 0 ? void 0 : selections.length) ? Object.assign(Object.assign({}, entriesSpec), {
        fill: {
            value: "transparent"
        }
    }) : entriesSpec;
}
function $36f89a8007f1afee$var$getMaxValue(channelDef) {
    return $36f89a8007f1afee$var$getConditionValue(channelDef, (v, conditionalDef)=>Math.max(v, conditionalDef.value));
}
function $36f89a8007f1afee$export$473a5da0103760d8(channelDef) {
    return $36f89a8007f1afee$var$getConditionValue(channelDef, (v, conditionalDef)=>{
        return (0, $7k4G6.getFirstDefined)(v, conditionalDef.value);
    });
}
function $36f89a8007f1afee$var$getConditionValue(channelDef, reducer) {
    if ((0, $2hAmp.hasConditionalValueDef)(channelDef)) return (0, $2bi3s.array)(channelDef.condition).reduce(reducer, channelDef.value);
    else if ((0, $2hAmp.isValueDef)(channelDef)) return channelDef.value;
    return undefined;
}
function $36f89a8007f1afee$var$selectedCondition(model, legendCmpt, fieldDef) {
    const selections = legendCmpt.get("selections");
    if (!(selections === null || selections === void 0 ? void 0 : selections.length)) return undefined;
    const field = (0, $2bi3s.stringValue)(fieldDef.field);
    return selections.map((name)=>{
        const store = (0, $2bi3s.stringValue)((0, $7k4G6.varName)(name) + (0, $Wddys.STORE));
        return `(!length(data(${store})) || (${name}[${field}] && indexof(${name}[${field}], datum.value) >= 0))`;
    }).join(" || ");
}

});

parcelRegister("hULCO", function(module, exports) {

$parcel$export(module.exports, "legendRules", () => $d0ac9bf34609e8fd$export$183622d773976564);
$parcel$export(module.exports, "getLegendType", () => $d0ac9bf34609e8fd$export$4b274dac1a1f7387);
$parcel$export(module.exports, "getDirection", () => $d0ac9bf34609e8fd$export$fcce7887255d1c69);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $7oTmT = parcelRequire("7oTmT");

var $4IBOv = parcelRequire("4IBOv");
const $d0ac9bf34609e8fd$export$183622d773976564 = {
    direction: ({ direction: direction })=>direction,
    format: ({ fieldOrDatumDef: fieldOrDatumDef, legend: legend, config: config })=>{
        const { format: format, formatType: formatType } = legend;
        return (0, $7oTmT.guideFormat)(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, false);
    },
    formatType: ({ legend: legend, fieldOrDatumDef: fieldOrDatumDef, scaleType: scaleType })=>{
        const { formatType: formatType } = legend;
        return (0, $7oTmT.guideFormatType)(formatType, fieldOrDatumDef, scaleType);
    },
    gradientLength: (params)=>{
        var _a, _b;
        const { legend: legend, legendConfig: legendConfig } = params;
        return (_b = (_a = legend.gradientLength) !== null && _a !== void 0 ? _a : legendConfig.gradientLength) !== null && _b !== void 0 ? _b : $d0ac9bf34609e8fd$export$2d11ba0d9033cfa9(params);
    },
    labelOverlap: ({ legend: legend, legendConfig: legendConfig, scaleType: scaleType })=>{
        var _a, _b;
        return (_b = (_a = legend.labelOverlap) !== null && _a !== void 0 ? _a : legendConfig.labelOverlap) !== null && _b !== void 0 ? _b : $d0ac9bf34609e8fd$export$d0da6ae0862c8a42(scaleType);
    },
    symbolType: ({ legend: legend, markDef: markDef, channel: channel, encoding: encoding })=>{
        var _a;
        return (_a = legend.symbolType) !== null && _a !== void 0 ? _a : $d0ac9bf34609e8fd$export$d9eae88ce17bf641(markDef.type, channel, encoding.shape, markDef.shape);
    },
    title: ({ fieldOrDatumDef: fieldOrDatumDef, config: config })=>(0, $2hAmp.title)(fieldOrDatumDef, config, {
            allowDisabling: true
        }),
    type: ({ legendType: legendType, scaleType: scaleType, channel: channel })=>{
        if ((0, $fWfT0.isColorChannel)(channel) && (0, $9rekY.isContinuousToContinuous)(scaleType)) {
            if (legendType === "gradient") return undefined;
        } else if (legendType === "symbol") return undefined;
        return legendType;
    },
    values: ({ fieldOrDatumDef: fieldOrDatumDef, legend: legend })=>$d0ac9bf34609e8fd$export$68c286be0e7e55b7(legend, fieldOrDatumDef)
};
function $d0ac9bf34609e8fd$export$68c286be0e7e55b7(legend, fieldOrDatumDef) {
    const vals = legend.values;
    if ((0, $2bi3s.isArray)(vals)) return (0, $2hAmp.valueArray)(fieldOrDatumDef, vals);
    else if ((0, $4xdf1.isSignalRef)(vals)) return vals;
    return undefined;
}
function $d0ac9bf34609e8fd$export$d9eae88ce17bf641(mark, channel, shapeChannelDef, markShape) {
    var _a;
    if (channel !== "shape") {
        // use the value from the shape encoding or the mark config if they exist
        const shape = (_a = (0, $4IBOv.getFirstConditionValue)(shapeChannelDef)) !== null && _a !== void 0 ? _a : markShape;
        if (shape) return shape;
    }
    switch(mark){
        case "bar":
        case "rect":
        case "image":
        case "square":
            return "square";
        case "line":
        case "trail":
        case "rule":
            return "stroke";
        case "arc":
        case "point":
        case "circle":
        case "tick":
        case "geoshape":
        case "area":
        case "text":
            return "circle";
    }
}
function $d0ac9bf34609e8fd$export$98273a2431791778(legendType) {
    if (legendType === "gradient") return 20;
    return undefined;
}
function $d0ac9bf34609e8fd$export$4b274dac1a1f7387(params) {
    const { legend: legend } = params;
    return (0, $7k4G6.getFirstDefined)(legend.type, $d0ac9bf34609e8fd$export$64535dc40d6d3d0(params));
}
function $d0ac9bf34609e8fd$export$64535dc40d6d3d0({ channel: channel, timeUnit: timeUnit, scaleType: scaleType }) {
    // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js
    if ((0, $fWfT0.isColorChannel)(channel)) {
        if ((0, $7k4G6.contains)([
            "quarter",
            "month",
            "day"
        ], timeUnit)) return "symbol";
        if ((0, $9rekY.isContinuousToContinuous)(scaleType)) return "gradient";
    }
    return "symbol";
}
function $d0ac9bf34609e8fd$export$fcce7887255d1c69({ legendConfig: legendConfig, legendType: legendType, orient: orient, legend: legend }) {
    var _a, _b;
    return (_b = (_a = legend.direction) !== null && _a !== void 0 ? _a : legendConfig[legendType ? "gradientDirection" : "symbolDirection"]) !== null && _b !== void 0 ? _b : $d0ac9bf34609e8fd$export$92720ad0186a88db(orient, legendType);
}
function $d0ac9bf34609e8fd$export$92720ad0186a88db(orient, legendType) {
    switch(orient){
        case "top":
        case "bottom":
            return "horizontal";
        case "left":
        case "right":
        case "none":
        case undefined:
            return undefined; // vertical is Vega's default
        default:
            // top-left / ...
            // For inner legend, uses compact layout like Tableau
            return legendType === "gradient" ? "horizontal" : undefined;
    }
}
function $d0ac9bf34609e8fd$export$2d11ba0d9033cfa9({ legendConfig: legendConfig, model: model, direction: direction, orient: orient, scaleType: scaleType }) {
    const { gradientHorizontalMaxLength: gradientHorizontalMaxLength, gradientHorizontalMinLength: gradientHorizontalMinLength, gradientVerticalMaxLength: gradientVerticalMaxLength, gradientVerticalMinLength: gradientVerticalMinLength } = legendConfig;
    if ((0, $9rekY.isContinuousToContinuous)(scaleType)) {
        if (direction === "horizontal") {
            if (orient === "top" || orient === "bottom") return $d0ac9bf34609e8fd$var$gradientLengthSignal(model, "width", gradientHorizontalMinLength, gradientHorizontalMaxLength);
            else return gradientHorizontalMinLength;
        } else // vertical / undefined (Vega uses vertical by default)
        return $d0ac9bf34609e8fd$var$gradientLengthSignal(model, "height", gradientVerticalMinLength, gradientVerticalMaxLength);
    }
    return undefined;
}
function $d0ac9bf34609e8fd$var$gradientLengthSignal(model, sizeType, min, max) {
    const sizeSignal = model.getSizeSignalRef(sizeType).signal;
    return {
        signal: `clamp(${sizeSignal}, ${min}, ${max})`
    };
}
function $d0ac9bf34609e8fd$export$d0da6ae0862c8a42(scaleType) {
    if ((0, $7k4G6.contains)([
        "quantile",
        "threshold",
        "log",
        "symlog"
    ], scaleType)) return "greedy";
    return undefined;
}

});



parcelRegister("6GNmX", function(module, exports) {

$parcel$export(module.exports, "assembleProjections", () => $4decf605b5633b9b$export$9cba650882e1334d);

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $jkJyY = parcelRequire("jkJyY");
function $4decf605b5633b9b$export$9cba650882e1334d(model) {
    if ((0, $jkJyY.isLayerModel)(model) || (0, $jkJyY.isConcatModel)(model)) return $4decf605b5633b9b$export$ed816e89d9135b67(model);
    else return $4decf605b5633b9b$export$e5f27c178b70b7a3(model);
}
function $4decf605b5633b9b$export$ed816e89d9135b67(model) {
    return model.children.reduce((projections, child)=>{
        return projections.concat(child.assembleProjections());
    }, $4decf605b5633b9b$export$e5f27c178b70b7a3(model));
}
function $4decf605b5633b9b$export$e5f27c178b70b7a3(model) {
    const component = model.component.projection;
    if (!component || component.merged) return [];
    const projection = component.combine();
    const { name: name } = projection; // we need to extract name so that it is always present in the output and pass TS type validation
    if (!component.data) // generate custom projection, no automatic fitting
    return [
        Object.assign(Object.assign({
            name: name
        }, {
            translate: {
                signal: "[width / 2, height / 2]"
            }
        }), projection)
    ];
    else {
        // generate projection that uses extent fitting
        const size = {
            signal: `[${component.size.map((ref)=>ref.signal).join(", ")}]`
        };
        const fits = component.data.reduce((sources, data)=>{
            const source = (0, $4xdf1.isSignalRef)(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;
            if (!(0, $7k4G6.contains)(sources, source)) // build a unique list of sources
            sources.push(source);
            return sources;
        }, []);
        if (fits.length <= 0) throw new Error("Projection's fit didn't find any data sources");
        return [
            Object.assign({
                name: name,
                size: size,
                fit: {
                    signal: fits.length > 1 ? `[${fits.join(", ")}]` : fits[0]
                }
            }, projection)
        ];
    }
}

});

parcelRegister("evLlF", function(module, exports) {

$parcel$export(module.exports, "parseProjection", () => $a908b06030ea7cc6$export$a34178b52963889);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iK8OT = parcelRequire("iK8OT");

var $jfWiI = parcelRequire("jfWiI");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $jkJyY = parcelRequire("jkJyY");

var $ekxT9 = parcelRequire("ekxT9");
function $a908b06030ea7cc6$export$a34178b52963889(model) {
    model.component.projection = (0, $jkJyY.isUnitModel)(model) ? $a908b06030ea7cc6$var$parseUnitProjection(model) : $a908b06030ea7cc6$var$parseNonUnitProjections(model);
}
function $a908b06030ea7cc6$var$parseUnitProjection(model) {
    var _a;
    if (model.hasProjection) {
        const proj = model.specifiedProjection;
        const fit = !(proj && (proj.scale != null || proj.translate != null));
        const size = fit ? [
            model.getSizeSignalRef("width"),
            model.getSizeSignalRef("height")
        ] : undefined;
        const data = fit ? $a908b06030ea7cc6$var$gatherFitData(model) : undefined;
        return new (0, $ekxT9.ProjectionComponent)(model.projectionName(true), Object.assign(Object.assign({}, (_a = model.config.projection) !== null && _a !== void 0 ? _a : {}), proj !== null && proj !== void 0 ? proj : {}), size, data);
    }
    return undefined;
}
function $a908b06030ea7cc6$var$gatherFitData(model) {
    const data = [];
    const { encoding: encoding } = model;
    for (const posssiblePair of [
        [
            (0, $fWfT0.LONGITUDE),
            (0, $fWfT0.LATITUDE)
        ],
        [
            (0, $fWfT0.LONGITUDE2),
            (0, $fWfT0.LATITUDE2)
        ]
    ])if ((0, $2hAmp.getFieldOrDatumDef)(encoding[posssiblePair[0]]) || (0, $2hAmp.getFieldOrDatumDef)(encoding[posssiblePair[1]])) data.push({
        signal: model.getName(`geojson_${data.length}`)
    });
    if (model.channelHasField((0, $fWfT0.SHAPE)) && model.typedFieldDef((0, $fWfT0.SHAPE)).type === (0, $9LX7L.GEOJSON)) data.push({
        signal: model.getName(`geojson_${data.length}`)
    });
    if (data.length === 0) // main source is geojson, so we can just use that
    data.push(model.requestDataName((0, $iK8OT.DataSourceType).Main));
    return data;
}
function $a908b06030ea7cc6$var$mergeIfNoConflict(first, second) {
    const allPropertiesShared = (0, $7k4G6.every)((0, $jfWiI.PROJECTION_PROPERTIES), (prop)=>{
        // neither has the property
        if (!(0, $2bi3s.hasOwnProperty)(first.explicit, prop) && !(0, $2bi3s.hasOwnProperty)(second.explicit, prop)) return true;
        // both have property and an equal value for property
        if ((0, $2bi3s.hasOwnProperty)(first.explicit, prop) && (0, $2bi3s.hasOwnProperty)(second.explicit, prop) && // some properties might be signals or objects and require hashing for comparison
        (0, $7k4G6.stringify)(first.get(prop)) === (0, $7k4G6.stringify)(second.get(prop))) return true;
        return false;
    });
    const size = (0, $7k4G6.stringify)(first.size) === (0, $7k4G6.stringify)(second.size);
    if (size) {
        if (allPropertiesShared) return first;
        else if ((0, $7k4G6.stringify)(first.explicit) === (0, $7k4G6.stringify)({})) return second;
        else if ((0, $7k4G6.stringify)(second.explicit) === (0, $7k4G6.stringify)({})) return first;
    }
    // if all properties don't match, let each unit spec have its own projection
    return null;
}
function $a908b06030ea7cc6$var$parseNonUnitProjections(model) {
    if (model.children.length === 0) return undefined;
    let nonUnitProjection;
    // parse all children first
    for (const child of model.children)$a908b06030ea7cc6$export$a34178b52963889(child);
    // analyze parsed projections, attempt to merge
    const mergable = (0, $7k4G6.every)(model.children, (child)=>{
        const projection = child.component.projection;
        if (!projection) // child layer does not use a projection
        return true;
        else if (!nonUnitProjection) {
            // cached 'projection' is null, cache this one
            nonUnitProjection = projection;
            return true;
        } else {
            const merge = $a908b06030ea7cc6$var$mergeIfNoConflict(nonUnitProjection, projection);
            if (merge) nonUnitProjection = merge;
            return !!merge;
        }
    });
    // if cached one and all other children share the same projection,
    if (nonUnitProjection && mergable) {
        // so we can elevate it to the layer level
        const name = model.projectionName(true);
        const modelProjection = new (0, $ekxT9.ProjectionComponent)(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, (0, $7k4G6.duplicate)(nonUnitProjection.data));
        // rename and assign all others as merged
        for (const child of model.children){
            const projection = child.component.projection;
            if (projection) {
                if (projection.isFit) modelProjection.data.push(...child.component.projection.data);
                child.renameProjection(projection.get("name"), name);
                projection.merged = true;
            }
        }
        return modelProjection;
    }
    return undefined;
}

});
parcelRegister("jfWiI", function(module, exports) {

$parcel$export(module.exports, "PROJECTION_PROPERTIES", () => $e04ca45f03da5a35$export$34877259b6681ccb);
const $e04ca45f03da5a35$export$34877259b6681ccb = [
    "type",
    "clipAngle",
    "clipExtent",
    "center",
    "rotate",
    "precision",
    "reflectX",
    "reflectY",
    "coefficient",
    "distance",
    "fraction",
    "lobes",
    "parallel",
    "radius",
    "ratio",
    "spacing",
    "tilt"
];

});

parcelRegister("ekxT9", function(module, exports) {

$parcel$export(module.exports, "ProjectionComponent", () => $a6ed38846ab8a8ba$export$91dc36be070efe0c);

var $5T1O4 = parcelRequire("5T1O4");
class $a6ed38846ab8a8ba$export$91dc36be070efe0c extends (0, $5T1O4.Split) {
    constructor(name, specifiedProjection, size, data){
        super(Object.assign({}, specifiedProjection), {
            name: name
        } // name as initial implicit property
        );
        this.specifiedProjection = specifiedProjection;
        this.size = size;
        this.data = data;
        this.merged = false;
    }
    /**
     * Whether the projection parameters should fit provided data.
     */ get isFit() {
        return !!this.data;
    }
}

});


parcelRegister("96xGQ", function(module, exports) {

$parcel$export(module.exports, "assembleScales", () => $6a0eceba1e9ad720$export$61734eff48c79539);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $jkJyY = parcelRequire("jkJyY");

var $ls1My = parcelRequire("ls1My");

var $91e8H = parcelRequire("91e8H");
var $6a0eceba1e9ad720$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $6a0eceba1e9ad720$export$61734eff48c79539(model) {
    if ((0, $jkJyY.isLayerModel)(model) || (0, $jkJyY.isConcatModel)(model)) // For concat and layer, include scales of children too
    return model.children.reduce((scales, child)=>{
        return scales.concat($6a0eceba1e9ad720$export$61734eff48c79539(child));
    }, $6a0eceba1e9ad720$export$f94254da653384f9(model));
    else // For facet, child scales would not be included in the parent's scope.
    // For unit, there is no child.
    return $6a0eceba1e9ad720$export$f94254da653384f9(model);
}
function $6a0eceba1e9ad720$export$f94254da653384f9(model) {
    return (0, $7k4G6.keys)(model.component.scales).reduce((scales, channel)=>{
        const scaleComponent = model.component.scales[channel];
        if (scaleComponent.merged) // Skipped merged scales
        return scales;
        const scale = scaleComponent.combine();
        const { name: name, type: type, selectionExtent: selectionExtent, domains: _d, range: _r, reverse: reverse } = scale, otherScaleProps = $6a0eceba1e9ad720$var$__rest(scale, [
            "name",
            "type",
            "selectionExtent",
            "domains",
            "range",
            "reverse"
        ]);
        const range = $6a0eceba1e9ad720$export$1aae974bd04a5f2a(scale.range, name, channel, model);
        let domainRaw;
        if (selectionExtent) domainRaw = (0, $ls1My.assembleSelectionScaleDomain)(model, selectionExtent);
        const domain = (0, $91e8H.assembleDomain)(model, channel);
        scales.push(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
            name: name,
            type: type
        }, domain ? {
            domain: domain
        } : {}), domainRaw ? {
            domainRaw: domainRaw
        } : {}), {
            range: range
        }), reverse !== undefined ? {
            reverse: reverse
        } : {}), otherScaleProps));
        return scales;
    }, []);
}
function $6a0eceba1e9ad720$export$1aae974bd04a5f2a(scaleRange, scaleName, channel, model) {
    // add signals to x/y range
    if ((0, $fWfT0.isXorY)(channel)) {
        if ((0, $4xdf1.isVgRangeStep)(scaleRange)) // For width/height step, use a signal created in layout assemble instead of a constant step.
        return {
            step: {
                signal: scaleName + "_step"
            }
        };
    } else if ((0, $2bi3s.isObject)(scaleRange) && (0, $4xdf1.isDataRefDomain)(scaleRange)) return Object.assign(Object.assign({}, scaleRange), {
        data: model.lookupDataSource(scaleRange.data)
    });
    return scaleRange;
}

});
parcelRegister("91e8H", function(module, exports) {

$parcel$export(module.exports, "parseScaleDomain", () => $01b1cb0b91812456$export$59c68ed2eb06538d);
$parcel$export(module.exports, "getFieldFromDomain", () => $01b1cb0b91812456$export$5d73ae98859af028);
$parcel$export(module.exports, "assembleDomain", () => $01b1cb0b91812456$export$9262b0ef7196ed76);

var $2bi3s = parcelRequire("2bi3s");

var $7sjJm = parcelRequire("7sjJm");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iK8OT = parcelRequire("iK8OT");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $Xb2We = parcelRequire("Xb2We");

var $aMeqD = parcelRequire("aMeqD");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $69ADH = parcelRequire("69ADH");

var $8IEdE = parcelRequire("8IEdE");

var $aSQVj = parcelRequire("aSQVj");

var $jkJyY = parcelRequire("jkJyY");

var $1BrRN = parcelRequire("1BrRN");

var $5T1O4 = parcelRequire("5T1O4");
var $01b1cb0b91812456$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $01b1cb0b91812456$export$59c68ed2eb06538d(model) {
    if ((0, $jkJyY.isUnitModel)(model)) $01b1cb0b91812456$var$parseUnitScaleDomain(model);
    else $01b1cb0b91812456$var$parseNonUnitScaleDomain(model);
}
function $01b1cb0b91812456$var$parseUnitScaleDomain(model) {
    const localScaleComponents = model.component.scales;
    for (const channel of $7k4G6.keys(localScaleComponents)){
        const domains = $01b1cb0b91812456$export$1ccb66b07b658c0e(model, channel);
        const localScaleCmpt = localScaleComponents[channel];
        localScaleCmpt.setWithExplicit("domains", domains);
        $01b1cb0b91812456$var$parseSelectionDomain(model, channel);
        if (model.component.data.isFaceted) {
            // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not
            let facetParent = model;
            while(!(0, $jkJyY.isFacetModel)(facetParent) && facetParent.parent)facetParent = facetParent.parent;
            const resolve = facetParent.component.resolve.scale[channel];
            if (resolve === "shared") {
                for (const domain of domains.value)// Replace the scale domain with data output from a cloned subtree after the facet.
                if ((0, $4xdf1.isDataRefDomain)(domain)) // use data from cloned subtree (which is the same as data but with a prefix added once)
                domain.data = (0, $aSQVj.FACET_SCALE_PREFIX) + domain.data.replace((0, $aSQVj.FACET_SCALE_PREFIX), "");
            }
        }
    }
}
function $01b1cb0b91812456$var$parseNonUnitScaleDomain(model) {
    for (const child of model.children)$01b1cb0b91812456$export$59c68ed2eb06538d(child);
    const localScaleComponents = model.component.scales;
    for (const channel of $7k4G6.keys(localScaleComponents)){
        let domains;
        let selectionExtent = null;
        for (const child of model.children){
            const childComponent = child.component.scales[channel];
            if (childComponent) {
                if (domains === undefined) domains = childComponent.getWithExplicit("domains");
                else domains = (0, $5T1O4.mergeValuesWithExplicit)(domains, childComponent.getWithExplicit("domains"), "domains", "scale", $01b1cb0b91812456$var$domainsTieBreaker);
                const se = childComponent.get("selectionExtent");
                if (selectionExtent && se && selectionExtent.selection !== se.selection) $3XBQv.warn($bHNid.NEEDS_SAME_SELECTION);
                selectionExtent = se;
            }
        }
        localScaleComponents[channel].setWithExplicit("domains", domains);
        if (selectionExtent) localScaleComponents[channel].set("selectionExtent", selectionExtent, true);
    }
}
/**
 * Remove unaggregated domain if it is not applicable
 * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.
 */ function $01b1cb0b91812456$var$normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {
    if (domain === "unaggregated") {
        const { valid: valid, reason: reason } = $01b1cb0b91812456$export$7555e226461055b0(fieldDef, scaleType);
        if (!valid) {
            $3XBQv.warn(reason);
            return undefined;
        }
    } else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {
        // Apply config if domain is not specified.
        const { valid: valid } = $01b1cb0b91812456$export$7555e226461055b0(fieldDef, scaleType);
        if (valid) return "unaggregated";
    }
    return domain;
}
function $01b1cb0b91812456$export$1ccb66b07b658c0e(model, channel) {
    const scaleType = model.getScaleComponent(channel).get("type");
    const { encoding: encoding } = model;
    const domain = $01b1cb0b91812456$var$normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType, model.config.scale);
    if (domain !== model.scaleDomain(channel)) model.specifiedScales[channel] = Object.assign(Object.assign({}, model.specifiedScales[channel]), {
        domain: domain
    });
    // If channel is either X or Y then union them with X2 & Y2 if they exist
    if (channel === "x" && (0, $2hAmp.getFieldOrDatumDef)(encoding.x2)) {
        if ((0, $2hAmp.getFieldOrDatumDef)(encoding.x)) return (0, $5T1O4.mergeValuesWithExplicit)($01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, "x"), $01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, "x2"), "domain", "scale", $01b1cb0b91812456$var$domainsTieBreaker);
        else return $01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, "x2");
    } else if (channel === "y" && (0, $2hAmp.getFieldOrDatumDef)(encoding.y2)) {
        if ((0, $2hAmp.getFieldOrDatumDef)(encoding.y)) return (0, $5T1O4.mergeValuesWithExplicit)($01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, "y"), $01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, "y2"), "domain", "scale", $01b1cb0b91812456$var$domainsTieBreaker);
        else return $01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, "y2");
    }
    return $01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, channel);
}
function $01b1cb0b91812456$var$mapDomainToDataSignal(domain, type, timeUnit) {
    return domain.map((v)=>{
        const data = (0, $2hAmp.valueExpr)(v, {
            timeUnit: timeUnit,
            type: type
        });
        return {
            signal: `{data: ${data}}`
        };
    });
}
function $01b1cb0b91812456$var$convertDomainIfItIsDateTime(domain, type, timeUnit) {
    var _a;
    // explicit value
    const normalizedTimeUnit = (_a = (0, $aMeqD.normalizeTimeUnit)(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
    if (type === "temporal" || normalizedTimeUnit) return $01b1cb0b91812456$var$mapDomainToDataSignal(domain, type, normalizedTimeUnit);
    return [
        domain
    ]; // Date time won't make sense
}
function $01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, domain, model, channel) {
    const { encoding: encoding } = model;
    const fieldOrDatumDef = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]);
    const { type: type } = fieldOrDatumDef;
    const timeUnit = fieldOrDatumDef["timeUnit"];
    if ((0, $9rekY.isDomainUnionWith)(domain)) {
        const defaultDomain = $01b1cb0b91812456$var$parseSingleChannelDomain(scaleType, undefined, model, channel);
        const unionWith = $01b1cb0b91812456$var$convertDomainIfItIsDateTime(domain.unionWith, type, timeUnit);
        return (0, $5T1O4.makeExplicit)([
            ...defaultDomain.value,
            ...unionWith
        ]);
    } else if ((0, $4xdf1.isSignalRef)(domain)) return (0, $5T1O4.makeExplicit)([
        domain
    ]);
    else if (domain && domain !== "unaggregated" && !(0, $9rekY.isSelectionDomain)(domain)) return (0, $5T1O4.makeExplicit)($01b1cb0b91812456$var$convertDomainIfItIsDateTime(domain, type, timeUnit));
    const stack = model.stack;
    if (stack && channel === stack.fieldChannel) {
        if (stack.offset === "normalize") return (0, $5T1O4.makeImplicit)([
            [
                0,
                1
            ]
        ]);
        const data = model.requestDataName((0, $iK8OT.DataSourceType).Main);
        return (0, $5T1O4.makeImplicit)([
            {
                data: data,
                field: model.vgField(channel, {
                    suffix: "start"
                })
            },
            {
                data: data,
                field: model.vgField(channel, {
                    suffix: "end"
                })
            }
        ]);
    }
    const sort = (0, $fWfT0.isScaleChannel)(channel) && (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? $01b1cb0b91812456$export$dfecde1e4b751381(model, channel, scaleType) : undefined;
    if ((0, $2hAmp.isDatumDef)(fieldOrDatumDef)) {
        const d = $01b1cb0b91812456$var$convertDomainIfItIsDateTime([
            fieldOrDatumDef.datum
        ], type, timeUnit);
        return (0, $5T1O4.makeImplicit)(d);
    }
    const fieldDef = fieldOrDatumDef; // now we can be sure it's a fieldDef
    if (domain === "unaggregated") {
        const data = model.requestDataName((0, $iK8OT.DataSourceType).Main);
        const { field: field } = fieldOrDatumDef;
        return (0, $5T1O4.makeImplicit)([
            {
                data: data,
                field: (0, $2hAmp.vgField)({
                    field: field,
                    aggregate: "min"
                })
            },
            {
                data: data,
                field: (0, $2hAmp.vgField)({
                    field: field,
                    aggregate: "max"
                })
            }
        ]);
    } else if ((0, $iR8lA.isBinning)(fieldDef.bin)) {
        if ((0, $9rekY.hasDiscreteDomain)(scaleType)) {
            if (scaleType === "bin-ordinal") // we can omit the domain as it is inferred from the `bins` property
            return (0, $5T1O4.makeImplicit)([]);
            // ordinal bin scale takes domain from bin_range, ordered by bin start
            // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).
            return (0, $5T1O4.makeImplicit)([
                {
                    // If sort by aggregation of a specified sort field, we need to use RAW table,
                    // so we can aggregate values for the scale independently from the main aggregation.
                    data: $7k4G6.isBoolean(sort) ? model.requestDataName((0, $iK8OT.DataSourceType).Main) : model.requestDataName((0, $iK8OT.DataSourceType).Raw),
                    // Use range if we added it and the scale does not support computing a range as a signal.
                    field: model.vgField(channel, (0, $2hAmp.binRequiresRange)(fieldDef, channel) ? {
                        binSuffix: "range"
                    } : {}),
                    // we have to use a sort object if sort = true to make the sort correct by bin start
                    sort: sort === true || !(0, $2bi3s.isObject)(sort) ? {
                        field: model.vgField(channel, {}),
                        op: "min" // min or max doesn't matter since we sort by the start of the bin range
                    } : sort
                }
            ]);
        } else {
            // continuous scales
            const { bin: bin } = fieldDef;
            if ((0, $iR8lA.isBinning)(bin)) {
                const binSignal = (0, $69ADH.getBinSignalName)(model, fieldDef.field, bin);
                return (0, $5T1O4.makeImplicit)([
                    new (0, $1BrRN.SignalRefWrapper)(()=>{
                        const signal = model.getSignalName(binSignal);
                        return `[${signal}.start, ${signal}.stop]`;
                    })
                ]);
            } else return (0, $5T1O4.makeImplicit)([
                {
                    data: model.requestDataName((0, $iK8OT.DataSourceType).Main),
                    field: model.vgField(channel, {})
                }
            ]);
        }
    } else if (fieldDef.timeUnit && $7k4G6.contains([
        "time",
        "utc"
    ], scaleType) && (0, $2hAmp.hasBand)(channel, fieldDef, (0, $jkJyY.isUnitModel)(model) ? model.encoding[(0, $fWfT0.getSecondaryRangeChannel)(channel)] : undefined, model.stack, model.markDef, model.config)) {
        const data = model.requestDataName((0, $iK8OT.DataSourceType).Main);
        return (0, $5T1O4.makeImplicit)([
            {
                data: data,
                field: model.vgField(channel)
            },
            {
                data: data,
                field: model.vgField(channel, {
                    suffix: "end"
                })
            }
        ]);
    } else if (sort) return (0, $5T1O4.makeImplicit)([
        {
            // If sort by aggregation of a specified sort field, we need to use RAW table,
            // so we can aggregate values for the scale independently from the main aggregation.
            data: $7k4G6.isBoolean(sort) ? model.requestDataName((0, $iK8OT.DataSourceType).Main) : model.requestDataName((0, $iK8OT.DataSourceType).Raw),
            field: model.vgField(channel),
            sort: sort
        }
    ]);
    else return (0, $5T1O4.makeImplicit)([
        {
            data: model.requestDataName((0, $iK8OT.DataSourceType).Main),
            field: model.vgField(channel)
        }
    ]);
}
function $01b1cb0b91812456$var$normalizeSortField(sort, isStackedMeasure) {
    const { op: op, field: field, order: order } = sort;
    return Object.assign(Object.assign({
        // Apply default op
        op: op !== null && op !== void 0 ? op : isStackedMeasure ? "sum" : (0, $Xb2We.DEFAULT_SORT_OP)
    }, field ? {
        field: $7k4G6.replacePathInField(field)
    } : {}), order ? {
        order: order
    } : {});
}
function $01b1cb0b91812456$var$parseSelectionDomain(model, channel) {
    var _a;
    const scale = model.component.scales[channel];
    const spec = model.specifiedScales[channel].domain;
    const bin = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.bin;
    const domain = (0, $9rekY.isSelectionDomain)(spec) && spec;
    const extent = (0, $iR8lA.isBinParams)(bin) && (0, $iR8lA.isSelectionExtent)(bin.extent) && bin.extent;
    if (domain || extent) // As scale parsing occurs before selection parsing, we cannot set
    // domainRaw directly. So instead, we store the selectionExtent on
    // the scale component, and then add domainRaw during scale assembly.
    scale.set("selectionExtent", domain !== null && domain !== void 0 ? domain : extent, true);
}
function $01b1cb0b91812456$export$dfecde1e4b751381(model, channel, scaleType) {
    if (!(0, $9rekY.hasDiscreteDomain)(scaleType)) return undefined;
    // save to cast as the only exception is the geojson type for shape, which would not generate a scale
    const fieldDef = model.fieldDef(channel);
    const sort = fieldDef.sort;
    // if the sort is specified with array, use the derived sort index field
    if ((0, $Xb2We.isSortArray)(sort)) return {
        op: "min",
        field: (0, $8IEdE.sortArrayIndexField)(fieldDef, channel),
        order: "ascending"
    };
    const { stack: stack } = model;
    const stackDimensions = stack ? [
        ...stack.groupbyField ? [
            stack.groupbyField
        ] : [],
        ...stack.stackBy.map((s)=>s.fieldDef.field)
    ] : undefined;
    // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)
    if ((0, $Xb2We.isSortField)(sort)) {
        const isStackedMeasure = stack && !$7k4G6.contains(stackDimensions, sort.field);
        return $01b1cb0b91812456$var$normalizeSortField(sort, isStackedMeasure);
    } else if ((0, $Xb2We.isSortByEncoding)(sort)) {
        const { encoding: encoding, order: order } = sort;
        const fieldDefToSortBy = model.fieldDef(encoding);
        const { aggregate: aggregate, field: field } = fieldDefToSortBy;
        const isStackedMeasure = stack && !$7k4G6.contains(stackDimensions, field);
        if ((0, $7sjJm.isArgminDef)(aggregate) || (0, $7sjJm.isArgmaxDef)(aggregate)) return $01b1cb0b91812456$var$normalizeSortField({
            field: (0, $2hAmp.vgField)(fieldDefToSortBy),
            order: order
        }, isStackedMeasure);
        else if ((0, $7sjJm.isAggregateOp)(aggregate) || !aggregate) return $01b1cb0b91812456$var$normalizeSortField({
            op: aggregate,
            field: field,
            order: order
        }, isStackedMeasure);
    } else if (sort === "descending") return {
        op: "min",
        field: model.vgField(channel),
        order: "descending"
    };
    else if ($7k4G6.contains([
        "ascending",
        undefined /* default =ascending*/ 
    ], sort)) return true;
    // sort == null
    return undefined;
}
function $01b1cb0b91812456$export$7555e226461055b0(fieldDef, scaleType) {
    const { aggregate: aggregate, type: type } = fieldDef;
    if (!aggregate) return {
        valid: false,
        reason: $bHNid.unaggregateDomainHasNoEffectForRawField(fieldDef)
    };
    if ((0, $2bi3s.isString)(aggregate) && !(0, $7sjJm.SHARED_DOMAIN_OP_INDEX)[aggregate]) return {
        valid: false,
        reason: $bHNid.unaggregateDomainWithNonSharedDomainOp(aggregate)
    };
    if (type === "quantitative") {
        if (scaleType === "log") return {
            valid: false,
            reason: $bHNid.unaggregatedDomainWithLogScale(fieldDef)
        };
    }
    return {
        valid: true
    };
}
/**
 * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.
 */ function $01b1cb0b91812456$var$domainsTieBreaker(v1, v2, property, propertyOf) {
    if (v1.explicit && v2.explicit) $3XBQv.warn($bHNid.mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));
    // If equal score, concat the domains so that we union them later.
    return {
        explicit: v1.explicit,
        value: [
            ...v1.value,
            ...v2.value
        ]
    };
}
function $01b1cb0b91812456$export$9c8185c6eda0fb0d(domains) {
    const uniqueDomains = $7k4G6.unique(domains.map((domain)=>{
        // ignore sort property when computing the unique domains
        if ((0, $4xdf1.isDataRefDomain)(domain)) {
            const { sort: _s } = domain, domainWithoutSort = $01b1cb0b91812456$var$__rest(domain, [
                "sort"
            ]);
            return domainWithoutSort;
        }
        return domain;
    }), $7k4G6.hash);
    const sorts = $7k4G6.unique(domains.map((d)=>{
        if ((0, $4xdf1.isDataRefDomain)(d)) {
            const s = d.sort;
            if (s !== undefined && !$7k4G6.isBoolean(s)) {
                if ("op" in s && s.op === "count") // let's make sure that if op is count, we don't use a field
                delete s.field;
                if (s.order === "ascending") // drop order: ascending as it is the default
                delete s.order;
            }
            return s;
        }
        return undefined;
    }).filter((s)=>s !== undefined), $7k4G6.hash);
    if (uniqueDomains.length === 0) return undefined;
    else if (uniqueDomains.length === 1) {
        const domain = domains[0];
        if ((0, $4xdf1.isDataRefDomain)(domain) && sorts.length > 0) {
            let sort = sorts[0];
            if (sorts.length > 1) {
                $3XBQv.warn($bHNid.MORE_THAN_ONE_SORT);
                sort = true;
            } else // Simplify domain sort by removing field and op when the field is the same as the domain field.
            if ((0, $2bi3s.isObject)(sort) && "field" in sort) {
                const sortField = sort.field;
                if (domain.field === sortField) sort = sort.order ? {
                    order: sort.order
                } : true;
            }
            return Object.assign(Object.assign({}, domain), {
                sort: sort
            });
        }
        return domain;
    }
    // only keep sort properties that work with unioned domains
    const unionDomainSorts = $7k4G6.unique(sorts.map((s)=>{
        if ($7k4G6.isBoolean(s) || !("op" in s) || (0, $2bi3s.isString)(s.op) && s.op in (0, $7sjJm.MULTIDOMAIN_SORT_OP_INDEX)) return s;
        $3XBQv.warn($bHNid.domainSortDropped(s));
        return true;
    }), $7k4G6.hash);
    let sort;
    if (unionDomainSorts.length === 1) sort = unionDomainSorts[0];
    else if (unionDomainSorts.length > 1) {
        $3XBQv.warn($bHNid.MORE_THAN_ONE_SORT);
        sort = true;
    }
    const allData = $7k4G6.unique(domains.map((d)=>{
        if ((0, $4xdf1.isDataRefDomain)(d)) return d.data;
        return null;
    }), (x)=>x);
    if (allData.length === 1 && allData[0] !== null) {
        // create a union domain of different fields with a single data source
        const domain = Object.assign({
            data: allData[0],
            fields: uniqueDomains.map((d)=>d.field)
        }, sort ? {
            sort: sort
        } : {});
        return domain;
    }
    return Object.assign({
        fields: uniqueDomains
    }, sort ? {
        sort: sort
    } : {});
}
function $01b1cb0b91812456$export$5d73ae98859af028(domain) {
    if ((0, $4xdf1.isDataRefDomain)(domain) && (0, $2bi3s.isString)(domain.field)) return domain.field;
    else if ((0, $4xdf1.isDataRefUnionedDomain)(domain)) {
        let field;
        for (const nonUnionDomain of domain.fields)if ((0, $4xdf1.isDataRefDomain)(nonUnionDomain) && (0, $2bi3s.isString)(nonUnionDomain.field)) {
            if (!field) field = nonUnionDomain.field;
            else if (field !== nonUnionDomain.field) {
                $3XBQv.warn($bHNid.FACETED_INDEPENDENT_DIFFERENT_SOURCES);
                return field;
            }
        }
        $3XBQv.warn($bHNid.FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES);
        return field;
    } else if ((0, $4xdf1.isFieldRefUnionDomain)(domain)) {
        $3XBQv.warn($bHNid.FACETED_INDEPENDENT_SAME_SOURCE);
        const field = domain.fields[0];
        return (0, $2bi3s.isString)(field) ? field : undefined;
    }
    return undefined;
}
function $01b1cb0b91812456$export$9262b0ef7196ed76(model, channel) {
    const scaleComponent = model.component.scales[channel];
    const domains = scaleComponent.get("domains").map((domain)=>{
        // Correct references to data as the original domain's data was determined
        // in parseScale, which happens before parseData. Thus the original data
        // reference can be incorrect.
        if ((0, $4xdf1.isDataRefDomain)(domain)) domain.data = model.lookupDataSource(domain.data);
        return domain;
    });
    // domains is an array that has to be merged into a single vega domain
    return $01b1cb0b91812456$export$9c8185c6eda0fb0d(domains);
}

});
parcelRegister("69ADH", function(module, exports) {

$parcel$export(module.exports, "getBinSignalName", () => $47b0011fd4515f78$export$c95ca0aae38f139);
$parcel$export(module.exports, "BinNode", () => $47b0011fd4515f78$export$91bbbd50d2d6a239);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");

var $7oTmT = parcelRequire("7oTmT");

var $jkJyY = parcelRequire("jkJyY");

var $dNHyS = parcelRequire("dNHyS");

var $71IWl = parcelRequire("71IWl");
var $47b0011fd4515f78$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $47b0011fd4515f78$var$rangeFormula(model, fieldDef, channel, config) {
    var _a, _b;
    if ((0, $2hAmp.binRequiresRange)(fieldDef, channel)) {
        // read format from axis or legend, if there is no format then use config.numberFormat
        const guide = (0, $jkJyY.isUnitModel)(model) ? (_b = (_a = model.axis(channel)) !== null && _a !== void 0 ? _a : model.legend(channel)) !== null && _b !== void 0 ? _b : {} : {};
        const startField = (0, $2hAmp.vgField)(fieldDef, {
            expr: "datum"
        });
        const endField = (0, $2hAmp.vgField)(fieldDef, {
            expr: "datum",
            binSuffix: "end"
        });
        return {
            formulaAs: (0, $2hAmp.vgField)(fieldDef, {
                binSuffix: "range",
                forAs: true
            }),
            formula: (0, $7oTmT.binFormatExpression)(startField, endField, guide.format, guide.formatType, config)
        };
    }
    return {};
}
function $47b0011fd4515f78$var$binKey(bin, field) {
    return `${(0, $iR8lA.binToString)(bin)}_${field}`;
}
function $47b0011fd4515f78$var$getSignalsFromModel(model, key) {
    return {
        signal: model.getName(`${key}_bins`),
        extentSignal: model.getName(`${key}_extent`)
    };
}
function $47b0011fd4515f78$export$c95ca0aae38f139(model, field, bin) {
    var _a;
    const normalizedBin = (_a = (0, $2hAmp.normalizeBin)(bin, undefined)) !== null && _a !== void 0 ? _a : {};
    const key = $47b0011fd4515f78$var$binKey(normalizedBin, field);
    return model.getName(`${key}_bins`);
}
function $47b0011fd4515f78$var$isBinTransform(t) {
    return "as" in t;
}
function $47b0011fd4515f78$var$createBinComponent(t, bin, model) {
    let as;
    let span;
    if ($47b0011fd4515f78$var$isBinTransform(t)) as = (0, $2bi3s.isString)(t.as) ? [
        t.as,
        `${t.as}_end`
    ] : [
        t.as[0],
        t.as[1]
    ];
    else as = [
        (0, $2hAmp.vgField)(t, {
            forAs: true
        }),
        (0, $2hAmp.vgField)(t, {
            binSuffix: "end",
            forAs: true
        })
    ];
    const normalizedBin = Object.assign({}, (0, $2hAmp.normalizeBin)(bin, undefined));
    const key = $47b0011fd4515f78$var$binKey(normalizedBin, t.field);
    const { signal: signal, extentSignal: extentSignal } = $47b0011fd4515f78$var$getSignalsFromModel(model, key);
    if ((0, $iR8lA.isSelectionExtent)(normalizedBin.extent)) {
        const ext = normalizedBin.extent;
        const selName = ext.selection;
        span = (0, $dNHyS.parseSelectionBinExtent)(model.getSelectionComponent((0, $7k4G6.varName)(selName), selName), ext);
        delete normalizedBin.extent; // Vega-Lite selection extent map to Vega's span property.
    }
    const binComponent = Object.assign(Object.assign(Object.assign({
        bin: normalizedBin,
        field: t.field,
        as: [
            as
        ]
    }, signal ? {
        signal: signal
    } : {}), extentSignal ? {
        extentSignal: extentSignal
    } : {}), span ? {
        span: span
    } : {});
    return {
        key: key,
        binComponent: binComponent
    };
}
class $47b0011fd4515f78$export$91bbbd50d2d6a239 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, bins){
        super(parent);
        this.bins = bins;
    }
    clone() {
        return new $47b0011fd4515f78$export$91bbbd50d2d6a239(null, (0, $7k4G6.duplicate)(this.bins));
    }
    static makeFromEncoding(parent, model) {
        const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel)=>{
            if ((0, $2hAmp.isTypedFieldDef)(fieldDef) && (0, $iR8lA.isBinning)(fieldDef.bin)) {
                const { key: key, binComponent: binComponent } = $47b0011fd4515f78$var$createBinComponent(fieldDef, fieldDef.bin, model);
                binComponentIndex[key] = Object.assign(Object.assign(Object.assign({}, binComponent), binComponentIndex[key]), $47b0011fd4515f78$var$rangeFormula(model, fieldDef, channel, model.config));
            }
            return binComponentIndex;
        }, {});
        if ((0, $7k4G6.isEmpty)(bins)) return null;
        return new $47b0011fd4515f78$export$91bbbd50d2d6a239(parent, bins);
    }
    /**
     * Creates a bin node from BinTransform.
     * The optional parameter should provide
     */ static makeFromTransform(parent, t, model) {
        const { key: key, binComponent: binComponent } = $47b0011fd4515f78$var$createBinComponent(t, t.bin, model);
        return new $47b0011fd4515f78$export$91bbbd50d2d6a239(parent, {
            [key]: binComponent
        });
    }
    /**
     * Merge bin nodes. This method either integrates the bin config from the other node
     * or if this node already has a bin config, renames the corresponding signal in the model.
     */ merge(other, renameSignal) {
        for (const key of (0, $7k4G6.keys)(other.bins))if (key in this.bins) {
            renameSignal(other.bins[key].signal, this.bins[key].signal);
            // Ensure that we don't have duplicate names for signal pairs
            this.bins[key].as = (0, $7k4G6.unique)([
                ...this.bins[key].as,
                ...other.bins[key].as
            ], (0, $7k4G6.hash));
        } else this.bins[key] = other.bins[key];
        for (const child of other.children){
            other.removeChild(child);
            child.parent = this;
        }
        other.remove();
    }
    producedFields() {
        return new Set((0, $7k4G6.vals)(this.bins).map((c)=>c.as).flat(2));
    }
    dependentFields() {
        return new Set((0, $7k4G6.vals)(this.bins).map((c)=>c.field));
    }
    hash() {
        return `Bin ${(0, $7k4G6.hash)(this.bins)}`;
    }
    assemble() {
        return (0, $7k4G6.vals)(this.bins).flatMap((bin)=>{
            const transform = [];
            const [binAs, ...remainingAs] = bin.as;
            const _a = bin.bin, { extent: extent } = _a, params = $47b0011fd4515f78$var$__rest(_a, [
                "extent"
            ]);
            const binTrans = Object.assign(Object.assign(Object.assign({
                type: "bin",
                field: (0, $7k4G6.replacePathInField)(bin.field),
                as: binAs,
                signal: bin.signal
            }, !(0, $iR8lA.isSelectionExtent)(extent) ? {
                extent: extent
            } : {
                extent: null
            }), bin.span ? {
                span: {
                    signal: `span(${bin.span})`
                }
            } : {}), params);
            if (!extent && bin.extentSignal) {
                transform.push({
                    type: "extent",
                    field: (0, $7k4G6.replacePathInField)(bin.field),
                    signal: bin.extentSignal
                });
                binTrans.extent = {
                    signal: bin.extentSignal
                };
            }
            transform.push(binTrans);
            for (const as of remainingAs)for(let i = 0; i < 2; i++)transform.push({
                type: "formula",
                expr: (0, $2hAmp.vgField)({
                    field: binAs[i]
                }, {
                    expr: "datum"
                }),
                as: as[i]
            });
            if (bin.formula) transform.push({
                type: "formula",
                expr: bin.formula,
                as: bin.formulaAs
            });
            return transform;
        });
    }
}

});

parcelRegister("aSQVj", function(module, exports) {

$parcel$export(module.exports, "FACET_SCALE_PREFIX", () => $7ec800082b8a1404$export$b8243b4f837457cf);
$parcel$export(module.exports, "optimizeDataflow", () => $7ec800082b8a1404$export$8d2785fcd5acc9e3);

var $3XBQv = parcelRequire("3XBQv");

var $7JVEO = parcelRequire("7JVEO");

var $aBSjy = parcelRequire("aBSjy");
const $7ec800082b8a1404$export$b8243b4f837457cf = "scale_";
const $7ec800082b8a1404$export$a7a4e54db274486e = 5;
function $7ec800082b8a1404$export$372d3911dbe646f5(nodes) {
    for (const node of nodes){
        for (const child of node.children){
            if (child.parent !== node) // log.error('Dataflow graph is inconsistent.', node, child);
            return false;
        }
        if (!$7ec800082b8a1404$export$372d3911dbe646f5(node.children)) return false;
    }
    return true;
}
/**
 * Run the specified optimizer on the provided nodes.
 *
 * @param optimizer The optimizer instance to run.
 * @param nodes A set of nodes to optimize.
 */ function $7ec800082b8a1404$var$runOptimizer(optimizer, nodes) {
    let modified = false;
    for (const node of nodes)modified = optimizer.optimize(node) || modified;
    return modified;
}
function $7ec800082b8a1404$var$optimizationDataflowHelper(dataComponent, model, firstPass) {
    let roots = dataComponent.sources;
    let modified = false;
    modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.RemoveUnnecessaryOutputNodes(), roots) || modified;
    modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.RemoveUnnecessaryIdentifierNodes(model), roots) || modified;
    // remove source nodes that don't have any children because they also don't have output nodes
    roots = roots.filter((r)=>r.numChildren() > 0);
    modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.RemoveUnusedSubtrees(), roots) || modified;
    roots = roots.filter((r)=>r.numChildren() > 0);
    if (!firstPass) {
        // Only run these optimizations after the optimizer has moved down the facet node.
        // With this change, we can be more aggressive in the optimizations.
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.MoveParseUp(), roots) || modified;
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.MergeBins(model), roots) || modified;
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.RemoveDuplicateTimeUnits(), roots) || modified;
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.MergeParse(), roots) || modified;
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.MergeAggregates(), roots) || modified;
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.MergeTimeUnits(), roots) || modified;
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.MergeIdenticalNodes(), roots) || modified;
        modified = $7ec800082b8a1404$var$runOptimizer(new $7JVEO.MergeOutputs(), roots) || modified;
    }
    dataComponent.sources = roots;
    return modified;
}
function $7ec800082b8a1404$export$8d2785fcd5acc9e3(data, model) {
    // check before optimizations
    $7ec800082b8a1404$export$372d3911dbe646f5(data.sources);
    let firstPassCounter = 0;
    let secondPassCounter = 0;
    for(let i = 0; i < $7ec800082b8a1404$export$a7a4e54db274486e; i++){
        if (!$7ec800082b8a1404$var$optimizationDataflowHelper(data, model, true)) break;
        firstPassCounter++;
    }
    // move facets down and make a copy of the subtree so that we can have scales at the top level
    data.sources.map((0, $aBSjy.moveFacetDown));
    for(let i = 0; i < $7ec800082b8a1404$export$a7a4e54db274486e; i++){
        if (!$7ec800082b8a1404$var$optimizationDataflowHelper(data, model, false)) break;
        secondPassCounter++;
    }
    // check after optimizations
    $7ec800082b8a1404$export$372d3911dbe646f5(data.sources);
    if (Math.max(firstPassCounter, secondPassCounter) === $7ec800082b8a1404$export$a7a4e54db274486e) $3XBQv.warn(`Maximum optimization runs(${$7ec800082b8a1404$export$a7a4e54db274486e}) reached.`);
}

});
parcelRegister("7JVEO", function(module, exports) {

$parcel$export(module.exports, "MergeIdenticalNodes", () => $5a2975e9bb5c7f7b$export$296c2abede8948d0);
$parcel$export(module.exports, "RemoveUnnecessaryIdentifierNodes", () => $5a2975e9bb5c7f7b$export$b2ebf8ecb1e114ce);
$parcel$export(module.exports, "RemoveDuplicateTimeUnits", () => $5a2975e9bb5c7f7b$export$1a7879b324ed1d63);
$parcel$export(module.exports, "RemoveUnnecessaryOutputNodes", () => $5a2975e9bb5c7f7b$export$d211f4631c787c21);
$parcel$export(module.exports, "MoveParseUp", () => $5a2975e9bb5c7f7b$export$8cccae7cff2321a5);
$parcel$export(module.exports, "MergeParse", () => $5a2975e9bb5c7f7b$export$d941c35166f13e83);
$parcel$export(module.exports, "RemoveUnusedSubtrees", () => $5a2975e9bb5c7f7b$export$cca8ce2fcc6bbbe7);
$parcel$export(module.exports, "MergeTimeUnits", () => $5a2975e9bb5c7f7b$export$5f4e5632af2aeb4d);
$parcel$export(module.exports, "MergeAggregates", () => $5a2975e9bb5c7f7b$export$4c69b53e505920a5);
$parcel$export(module.exports, "MergeBins", () => $5a2975e9bb5c7f7b$export$8174245ebc5371a3);
$parcel$export(module.exports, "MergeOutputs", () => $5a2975e9bb5c7f7b$export$338364dd688bfcf1);

var $7k4G6 = parcelRequire("7k4G6");

var $Wddys = parcelRequire("Wddys");

var $7hYDh = parcelRequire("7hYDh");

var $69ADH = parcelRequire("69ADH");

var $71IWl = parcelRequire("71IWl");

var $3WhAB = parcelRequire("3WhAB");

var $hgVkC = parcelRequire("hgVkC");

var $fShv6 = parcelRequire("fShv6");

var $lIzph = parcelRequire("lIzph");

var $jfxzM = parcelRequire("jfxzM");

var $a74BM = parcelRequire("a74BM");

var $1MK7y = parcelRequire("1MK7y");
class $5a2975e9bb5c7f7b$export$296c2abede8948d0 extends (0, $jfxzM.TopDownOptimizer) {
    mergeNodes(parent, nodes) {
        const mergedNode = nodes.shift();
        for (const node of nodes){
            parent.removeChild(node);
            node.parent = mergedNode;
            node.remove();
        }
    }
    run(node) {
        const hashes = node.children.map((x)=>x.hash());
        const buckets = {};
        for(let i = 0; i < hashes.length; i++)if (buckets[hashes[i]] === undefined) buckets[hashes[i]] = [
            node.children[i]
        ];
        else buckets[hashes[i]].push(node.children[i]);
        for (const k of (0, $7k4G6.keys)(buckets))if (buckets[k].length > 1) {
            this.setModified();
            this.mergeNodes(node, buckets[k]);
        }
    }
}
class $5a2975e9bb5c7f7b$export$b2ebf8ecb1e114ce extends (0, $jfxzM.TopDownOptimizer) {
    constructor(model){
        super();
        this.requiresSelectionId = model && (0, $Wddys.requiresSelectionId)(model);
    }
    run(node) {
        if (node instanceof (0, $lIzph.IdentifierNode)) // Only preserve IdentifierNodes if we have default discrete selections
        // in our model tree, and if the nodes come after tuple producing nodes.
        {
            if (!(this.requiresSelectionId && ((0, $jfxzM.isDataSourceNode)(node.parent) || node.parent instanceof (0, $7hYDh.AggregateNode) || node.parent instanceof (0, $fShv6.ParseNode)))) {
                this.setModified();
                node.remove();
            }
        }
    }
}
class $5a2975e9bb5c7f7b$export$1a7879b324ed1d63 extends (0, $jfxzM.Optimizer) {
    optimize(node) {
        this.run(node, new Set());
        return this.modifiedFlag;
    }
    run(node, timeUnitFields) {
        let producedFields = new Set();
        if (node instanceof (0, $1MK7y.TimeUnitNode)) {
            producedFields = node.producedFields();
            if ((0, $7k4G6.hasIntersection)(producedFields, timeUnitFields)) {
                this.setModified();
                node.removeFormulas(timeUnitFields);
                if (node.producedFields.length === 0) node.remove();
            }
        }
        for (const child of node.children)this.run(child, new Set([
            ...timeUnitFields,
            ...producedFields
        ]));
    }
}
class $5a2975e9bb5c7f7b$export$d211f4631c787c21 extends (0, $jfxzM.TopDownOptimizer) {
    constructor(){
        super();
    }
    run(node) {
        if (node instanceof (0, $71IWl.OutputNode) && !node.isRequired()) {
            this.setModified();
            node.remove();
        }
    }
}
class $5a2975e9bb5c7f7b$export$8cccae7cff2321a5 extends (0, $jfxzM.BottomUpOptimizer) {
    run(node) {
        if ((0, $jfxzM.isDataSourceNode)(node)) return;
        if (node.numChildren() > 1) // Don't move parse further up but continue with parent.
        return;
        for (const child of node.children)if (child instanceof (0, $fShv6.ParseNode)) {
            if (node instanceof (0, $fShv6.ParseNode)) {
                this.setModified();
                node.merge(child);
            } else {
                // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).
                if ((0, $7k4G6.fieldIntersection)(node.producedFields(), child.dependentFields())) continue;
                this.setModified();
                child.swapWithParent();
            }
        }
        return;
    }
}
class $5a2975e9bb5c7f7b$export$d941c35166f13e83 extends (0, $jfxzM.BottomUpOptimizer) {
    run(node) {
        const originalChildren = [
            ...node.children
        ];
        const parseChildren = node.children.filter((child)=>child instanceof (0, $fShv6.ParseNode));
        if (node.numChildren() > 1 && parseChildren.length >= 1) {
            const commonParse = {};
            const conflictingParse = new Set();
            for (const parseNode of parseChildren){
                const parse = parseNode.parse;
                for (const k of (0, $7k4G6.keys)(parse)){
                    if (!(k in commonParse)) commonParse[k] = parse[k];
                    else if (commonParse[k] !== parse[k]) conflictingParse.add(k);
                }
            }
            for (const field of conflictingParse)delete commonParse[field];
            if (!(0, $7k4G6.isEmpty)(commonParse)) {
                this.setModified();
                const mergedParseNode = new (0, $fShv6.ParseNode)(node, commonParse);
                for (const childNode of originalChildren){
                    if (childNode instanceof (0, $fShv6.ParseNode)) for (const key of (0, $7k4G6.keys)(commonParse))delete childNode.parse[key];
                    node.removeChild(childNode);
                    childNode.parent = mergedParseNode;
                    // remove empty parse nodes
                    if (childNode instanceof (0, $fShv6.ParseNode) && (0, $7k4G6.keys)(childNode.parse).length === 0) childNode.remove();
                }
            }
        }
    }
}
class $5a2975e9bb5c7f7b$export$cca8ce2fcc6bbbe7 extends (0, $jfxzM.BottomUpOptimizer) {
    run(node) {
        if (node instanceof (0, $71IWl.OutputNode) || node.numChildren() > 0 || node instanceof (0, $3WhAB.FacetNode)) ;
        else if (node instanceof (0, $a74BM.SourceNode)) ;
        else {
            this.setModified();
            node.remove();
        }
    }
}
class $5a2975e9bb5c7f7b$export$5f4e5632af2aeb4d extends (0, $jfxzM.BottomUpOptimizer) {
    run(node) {
        const timeUnitChildren = node.children.filter((x)=>x instanceof (0, $1MK7y.TimeUnitNode));
        const combination = timeUnitChildren.pop();
        for (const timeUnit of timeUnitChildren){
            this.setModified();
            combination.merge(timeUnit);
        }
    }
}
class $5a2975e9bb5c7f7b$export$4c69b53e505920a5 extends (0, $jfxzM.BottomUpOptimizer) {
    run(node) {
        const aggChildren = node.children.filter((child)=>child instanceof (0, $7hYDh.AggregateNode));
        // Object which we'll use to map the fields which an aggregate is grouped by to
        // the set of aggregates with that grouping. This is useful as only aggregates
        // with the same group by can be merged
        const groupedAggregates = {};
        // Build groupedAggregates
        for (const agg of aggChildren){
            const groupBys = (0, $7k4G6.hash)(agg.groupBy);
            if (!(groupBys in groupedAggregates)) groupedAggregates[groupBys] = [];
            groupedAggregates[groupBys].push(agg);
        }
        // Merge aggregateNodes with same key in groupedAggregates
        for (const group of (0, $7k4G6.keys)(groupedAggregates)){
            const mergeableAggs = groupedAggregates[group];
            if (mergeableAggs.length > 1) {
                const mergedAggs = mergeableAggs.pop();
                for (const agg of mergeableAggs)if (mergedAggs.merge(agg)) {
                    node.removeChild(agg);
                    agg.parent = mergedAggs;
                    agg.remove();
                    this.setModified();
                }
            }
        }
    }
}
class $5a2975e9bb5c7f7b$export$8174245ebc5371a3 extends (0, $jfxzM.BottomUpOptimizer) {
    constructor(model){
        super();
        this.model = model;
    }
    run(node) {
        const moveBinsUp = !((0, $jfxzM.isDataSourceNode)(node) || node instanceof (0, $hgVkC.FilterNode) || node instanceof (0, $fShv6.ParseNode) || node instanceof (0, $lIzph.IdentifierNode));
        const promotableBins = [];
        const remainingBins = [];
        for (const child of node.children)if (child instanceof (0, $69ADH.BinNode)) {
            if (moveBinsUp && !(0, $7k4G6.fieldIntersection)(node.producedFields(), child.dependentFields())) promotableBins.push(child);
            else remainingBins.push(child);
        }
        if (promotableBins.length > 0) {
            const promotedBin = promotableBins.pop();
            for (const bin of promotableBins)promotedBin.merge(bin, this.model.renameSignal.bind(this.model));
            this.setModified();
            if (node instanceof (0, $69ADH.BinNode)) node.merge(promotedBin, this.model.renameSignal.bind(this.model));
            else promotedBin.swapWithParent();
        }
        if (remainingBins.length > 1) {
            const remainingBin = remainingBins.pop();
            for (const bin of remainingBins)remainingBin.merge(bin, this.model.renameSignal.bind(this.model));
            this.setModified();
        }
    }
}
class $5a2975e9bb5c7f7b$export$338364dd688bfcf1 extends (0, $jfxzM.BottomUpOptimizer) {
    run(node) {
        const children = [
            ...node.children
        ];
        const hasOutputChild = (0, $7k4G6.some)(children, (child)=>child instanceof (0, $71IWl.OutputNode));
        if (!hasOutputChild || node.numChildren() <= 1) return;
        const otherChildren = [];
        // The output node we will connect all other nodes to.
        // Output nodes will be added before the new node, other nodes after.
        let mainOutput;
        for (const child of children)if (child instanceof (0, $71IWl.OutputNode)) {
            let lastOutput = child;
            while(lastOutput.numChildren() === 1){
                const [theChild] = lastOutput.children;
                if (theChild instanceof (0, $71IWl.OutputNode)) lastOutput = theChild;
                else break;
            }
            otherChildren.push(...lastOutput.children);
            if (mainOutput) {
                // Move the output nodes before the mainOutput. We do this by setting
                // the parent of the first not to the parent of the main output and
                // the main output's parent to the last output.
                // note: the child is the first output
                node.removeChild(child);
                child.parent = mainOutput.parent;
                mainOutput.parent.removeChild(mainOutput);
                mainOutput.parent = lastOutput;
                this.setModified();
            } else mainOutput = lastOutput;
        } else otherChildren.push(child);
        if (otherChildren.length) {
            this.setModified();
            for (const child of otherChildren){
                child.parent.removeChild(child);
                child.parent = mainOutput;
            }
        }
    }
}

});
parcelRegister("7hYDh", function(module, exports) {

$parcel$export(module.exports, "AggregateNode", () => $54e9274f3fbd463e$export$ffae154a02fee4c2);

var $7sjJm = parcelRequire("7sjJm");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");

var $7k4G6 = parcelRequire("7k4G6");

var $jkJyY = parcelRequire("jkJyY");

var $71IWl = parcelRequire("71IWl");
function $54e9274f3fbd463e$var$addDimension(dims, channel, fieldDef, model) {
    const channelDef2 = (0, $jkJyY.isUnitModel)(model) ? model.encoding[(0, $fWfT0.getSecondaryRangeChannel)(channel)] : undefined;
    if ((0, $2hAmp.isTypedFieldDef)(fieldDef) && (0, $jkJyY.isUnitModel)(model) && (0, $2hAmp.hasBand)(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config)) {
        dims.add((0, $2hAmp.vgField)(fieldDef, {}));
        dims.add((0, $2hAmp.vgField)(fieldDef, {
            suffix: "end"
        }));
        if (fieldDef.bin && (0, $2hAmp.binRequiresRange)(fieldDef, channel)) dims.add((0, $2hAmp.vgField)(fieldDef, {
            binSuffix: "range"
        }));
    } else if ((0, $fWfT0.isGeoPositionChannel)(channel)) {
        const posChannel = (0, $fWfT0.getPositionChannelFromLatLong)(channel);
        dims.add(model.getName(posChannel));
    } else dims.add((0, $2hAmp.vgField)(fieldDef));
    return dims;
}
function $54e9274f3fbd463e$var$mergeMeasures(parentMeasures, childMeasures) {
    var _a;
    for (const field of (0, $7k4G6.keys)(childMeasures)){
        // when we merge a measure, we either have to add an aggregation operator or even a new field
        const ops = childMeasures[field];
        for (const op of (0, $7k4G6.keys)(ops))if (field in parentMeasures) // add operator to existing measure field
        parentMeasures[field][op] = new Set([
            ...(_a = parentMeasures[field][op]) !== null && _a !== void 0 ? _a : [],
            ...ops[op]
        ]);
        else parentMeasures[field] = {
            [op]: ops[op]
        };
    }
}
class $54e9274f3fbd463e$export$ffae154a02fee4c2 extends (0, $71IWl.DataFlowNode) {
    /**
     * @param dimensions string set for dimensions
     * @param measures dictionary mapping field name => dict of aggregation functions and names to use
     */ constructor(parent, dimensions, measures){
        super(parent);
        this.dimensions = dimensions;
        this.measures = measures;
    }
    clone() {
        return new $54e9274f3fbd463e$export$ffae154a02fee4c2(null, new Set(this.dimensions), (0, $7k4G6.duplicate)(this.measures));
    }
    get groupBy() {
        return this.dimensions;
    }
    static makeFromEncoding(parent, model) {
        let isAggregate = false;
        model.forEachFieldDef((fd)=>{
            if (fd.aggregate) isAggregate = true;
        });
        const meas = {};
        const dims = new Set();
        if (!isAggregate) // no need to create this node if the model has no aggregation
        return null;
        model.forEachFieldDef((fieldDef, channel)=>{
            var _a, _b, _c, _d;
            const { aggregate: aggregate, field: field } = fieldDef;
            if (aggregate) {
                if (aggregate === "count") {
                    meas["*"] = (_a = meas["*"]) !== null && _a !== void 0 ? _a : {};
                    meas["*"]["count"] = new Set([
                        (0, $2hAmp.vgField)(fieldDef, {
                            forAs: true
                        })
                    ]);
                } else {
                    if ((0, $7sjJm.isArgminDef)(aggregate) || (0, $7sjJm.isArgmaxDef)(aggregate)) {
                        const op = (0, $7sjJm.isArgminDef)(aggregate) ? "argmin" : "argmax";
                        const argField = aggregate[op];
                        meas[argField] = (_b = meas[argField]) !== null && _b !== void 0 ? _b : {};
                        meas[argField][op] = new Set([
                            (0, $2hAmp.vgField)({
                                op: op,
                                field: argField
                            }, {
                                forAs: true
                            })
                        ]);
                    } else {
                        meas[field] = (_c = meas[field]) !== null && _c !== void 0 ? _c : {};
                        meas[field][aggregate] = new Set([
                            (0, $2hAmp.vgField)(fieldDef, {
                                forAs: true
                            })
                        ]);
                    }
                    // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain
                    if ((0, $fWfT0.isScaleChannel)(channel) && model.scaleDomain(channel) === "unaggregated") {
                        meas[field] = (_d = meas[field]) !== null && _d !== void 0 ? _d : {};
                        meas[field]["min"] = new Set([
                            (0, $2hAmp.vgField)({
                                field: field,
                                aggregate: "min"
                            }, {
                                forAs: true
                            })
                        ]);
                        meas[field]["max"] = new Set([
                            (0, $2hAmp.vgField)({
                                field: field,
                                aggregate: "max"
                            }, {
                                forAs: true
                            })
                        ]);
                    }
                }
            } else $54e9274f3fbd463e$var$addDimension(dims, channel, fieldDef, model);
        });
        if (dims.size + (0, $7k4G6.keys)(meas).length === 0) return null;
        return new $54e9274f3fbd463e$export$ffae154a02fee4c2(parent, dims, meas);
    }
    static makeFromTransform(parent, t) {
        var _a, _b, _c;
        const dims = new Set();
        const meas = {};
        for (const s of t.aggregate){
            const { op: op, field: field, as: as } = s;
            if (op) {
                if (op === "count") {
                    meas["*"] = (_a = meas["*"]) !== null && _a !== void 0 ? _a : {};
                    meas["*"]["count"] = new Set([
                        as ? as : (0, $2hAmp.vgField)(s, {
                            forAs: true
                        })
                    ]);
                } else {
                    meas[field] = (_b = meas[field]) !== null && _b !== void 0 ? _b : {};
                    meas[field][op] = new Set([
                        as ? as : (0, $2hAmp.vgField)(s, {
                            forAs: true
                        })
                    ]);
                }
            }
        }
        for (const s of (_c = t.groupby) !== null && _c !== void 0 ? _c : [])dims.add(s);
        if (dims.size + (0, $7k4G6.keys)(meas).length === 0) return null;
        return new $54e9274f3fbd463e$export$ffae154a02fee4c2(parent, dims, meas);
    }
    merge(other) {
        if ((0, $7k4G6.setEqual)(this.dimensions, other.dimensions)) {
            $54e9274f3fbd463e$var$mergeMeasures(this.measures, other.measures);
            return true;
        } else {
            $3XBQv.debug("different dimensions, cannot merge");
            return false;
        }
    }
    addDimensions(fields) {
        fields.forEach(this.dimensions.add, this.dimensions);
    }
    dependentFields() {
        return new Set([
            ...this.dimensions,
            ...(0, $7k4G6.keys)(this.measures)
        ]);
    }
    producedFields() {
        const out = new Set();
        for (const field of (0, $7k4G6.keys)(this.measures))for (const op of (0, $7k4G6.keys)(this.measures[field])){
            const m = this.measures[field][op];
            if (m.size === 0) out.add(`${op}_${field}`);
            else m.forEach(out.add, out);
        }
        return out;
    }
    hash() {
        return `Aggregate ${(0, $7k4G6.hash)({
            dimensions: this.dimensions,
            measures: this.measures
        })}`;
    }
    assemble() {
        const ops = [];
        const fields = [];
        const as = [];
        for (const field of (0, $7k4G6.keys)(this.measures)){
            for (const op of (0, $7k4G6.keys)(this.measures[field]))for (const alias of this.measures[field][op]){
                as.push(alias);
                ops.push(op);
                fields.push(field === "*" ? null : (0, $7k4G6.replacePathInField)(field));
            }
        }
        const result = {
            type: "aggregate",
            groupby: [
                ...this.dimensions
            ].map((0, $7k4G6.replacePathInField)),
            ops: ops,
            fields: fields,
            as: as
        };
        return result;
    }
}

});

parcelRegister("3WhAB", function(module, exports) {

$parcel$export(module.exports, "FacetNode", () => $2de46ec2e38ba6dd$export$972d6d2997ea2277);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $Xb2We = parcelRequire("Xb2We");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $hkDCc = parcelRequire("hkDCc");

var $91e8H = parcelRequire("91e8H");

var $8IEdE = parcelRequire("8IEdE");

var $71IWl = parcelRequire("71IWl");
class $2de46ec2e38ba6dd$export$972d6d2997ea2277 extends (0, $71IWl.DataFlowNode) {
    /**
     * @param model The facet model.
     * @param name The name that this facet source will have.
     * @param data The source data for this facet data.
     */ constructor(parent, model, name, data){
        super(parent);
        this.model = model;
        this.name = name;
        this.data = data;
        for (const channel of (0, $fWfT0.FACET_CHANNELS)){
            const fieldDef = model.facet[channel];
            if (fieldDef) {
                const { bin: bin, sort: sort } = fieldDef;
                this[channel] = Object.assign({
                    name: model.getName(`${channel}_domain`),
                    fields: [
                        (0, $2hAmp.vgField)(fieldDef),
                        ...(0, $iR8lA.isBinning)(bin) ? [
                            (0, $2hAmp.vgField)(fieldDef, {
                                binSuffix: "end"
                            })
                        ] : []
                    ]
                }, (0, $Xb2We.isSortField)(sort) ? {
                    sortField: sort
                } : (0, $2bi3s.isArray)(sort) ? {
                    sortIndexField: (0, $8IEdE.sortArrayIndexField)(fieldDef, channel)
                } : {});
            }
        }
        this.childModel = model.child;
    }
    hash() {
        let out = `Facet`;
        for (const channel of (0, $fWfT0.FACET_CHANNELS))if (this[channel]) out += ` ${channel.charAt(0)}:${(0, $7k4G6.hash)(this[channel])}`;
        return out;
    }
    get fields() {
        var _a;
        const f = [];
        for (const channel of (0, $fWfT0.FACET_CHANNELS))if ((_a = this[channel]) === null || _a === void 0 ? void 0 : _a.fields) f.push(...this[channel].fields);
        return f;
    }
    dependentFields() {
        const depFields = new Set(this.fields);
        for (const channel of (0, $fWfT0.FACET_CHANNELS))if (this[channel]) {
            if (this[channel].sortField) depFields.add(this[channel].sortField.field);
            if (this[channel].sortIndexField) depFields.add(this[channel].sortIndexField);
        }
        return depFields;
    }
    producedFields() {
        return new Set(); // facet does not produce any new fields
    }
    /**
     * The name to reference this source is its name.
     */ getSource() {
        return this.name;
    }
    getChildIndependentFieldsWithStep() {
        const childIndependentFieldsWithStep = {};
        for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS)){
            const childScaleComponent = this.childModel.component.scales[channel];
            if (childScaleComponent && !childScaleComponent.merged) {
                // independent scale
                const type = childScaleComponent.get("type");
                const range = childScaleComponent.get("range");
                if ((0, $9rekY.hasDiscreteDomain)(type) && (0, $4xdf1.isVgRangeStep)(range)) {
                    const domain = (0, $91e8H.assembleDomain)(this.childModel, channel);
                    const field = (0, $91e8H.getFieldFromDomain)(domain);
                    if (field) childIndependentFieldsWithStep[channel] = field;
                    else $3XBQv.warn($bHNid.unknownField(channel));
                }
            }
        }
        return childIndependentFieldsWithStep;
    }
    assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
        const childChannel = {
            row: "y",
            column: "x"
        }[channel];
        const fields = [];
        const ops = [];
        const as = [];
        if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
            if (crossedDataName) {
                // If there is a crossed data, calculate max
                fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
                ops.push("max");
            } else {
                // If there is no crossed data, just calculate distinct
                fields.push(childIndependentFieldsWithStep[childChannel]);
                ops.push("distinct");
            }
            // Although it is technically a max, just name it distinct so it's easier to refer to it
            as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
        }
        const { sortField: sortField, sortIndexField: sortIndexField } = this[channel];
        if (sortField) {
            const { op: op = (0, $Xb2We.DEFAULT_SORT_OP), field: field } = sortField;
            fields.push(field);
            ops.push(op);
            as.push((0, $2hAmp.vgField)(sortField, {
                forAs: true
            }));
        } else if (sortIndexField) {
            fields.push(sortIndexField);
            ops.push("max");
            as.push(sortIndexField);
        }
        return {
            name: this[channel].name,
            // Use data from the crossed one if it exist
            source: crossedDataName !== null && crossedDataName !== void 0 ? crossedDataName : this.data,
            transform: [
                Object.assign({
                    type: "aggregate",
                    groupby: this[channel].fields
                }, fields.length ? {
                    fields: fields,
                    ops: ops,
                    as: as
                } : {})
            ]
        };
    }
    assembleFacetHeaderData(childIndependentFieldsWithStep) {
        var _a, _b;
        const { columns: columns } = this.model.layout;
        const { layoutHeaders: layoutHeaders } = this.model.component;
        const data = [];
        const hasSharedAxis = {};
        for (const headerChannel of (0, $hkDCc.HEADER_CHANNELS)){
            for (const headerType of (0, $hkDCc.HEADER_TYPES)){
                const headers = (_a = layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) !== null && _a !== void 0 ? _a : [];
                for (const header of headers)if (((_b = header.axes) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                    hasSharedAxis[headerChannel] = true;
                    break;
                }
            }
            if (hasSharedAxis[headerChannel]) {
                const cardinality = `length(data("${this.facet.name}"))`;
                const stop = headerChannel === "row" ? columns ? {
                    signal: `ceil(${cardinality} / ${columns})`
                } : 1 : columns ? {
                    signal: `min(${cardinality}, ${columns})`
                } : {
                    signal: cardinality
                };
                data.push({
                    name: `${this.facet.name}_${headerChannel}`,
                    transform: [
                        {
                            type: "sequence",
                            start: 0,
                            stop: stop
                        }
                    ]
                });
            }
        }
        const { row: row, column: column } = hasSharedAxis;
        if (row || column) data.unshift(this.assembleRowColumnHeaderData("facet", null, childIndependentFieldsWithStep));
        return data;
    }
    assemble() {
        var _a, _b;
        const data = [];
        let crossedDataName = null;
        const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
        const { column: column, row: row, facet: facet } = this;
        if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
            // Need to create a cross dataset to correctly calculate cardinality
            crossedDataName = `cross_${this.column.name}_${this.row.name}`;
            const fields = [].concat((_a = childIndependentFieldsWithStep.x) !== null && _a !== void 0 ? _a : [], (_b = childIndependentFieldsWithStep.y) !== null && _b !== void 0 ? _b : []);
            const ops = fields.map(()=>"distinct");
            data.push({
                name: crossedDataName,
                source: this.data,
                transform: [
                    {
                        type: "aggregate",
                        groupby: this.fields,
                        fields: fields,
                        ops: ops
                    }
                ]
            });
        }
        for (const channel of [
            (0, $fWfT0.COLUMN),
            (0, $fWfT0.ROW)
        ])if (this[channel]) data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
        if (facet) {
            const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);
            if (facetData) data.push(...facetData);
        }
        return data;
    }
}

});

parcelRegister("fShv6", function(module, exports) {

$parcel$export(module.exports, "getImplicitFromFilterTransform", () => $b8e97971341aa861$export$43ae65b9bddddf5f);
$parcel$export(module.exports, "getImplicitFromEncoding", () => $b8e97971341aa861$export$9adef3c6daf88ea6);
$parcel$export(module.exports, "getImplicitFromSelection", () => $b8e97971341aa861$export$dc6b1833f2dc8405);
$parcel$export(module.exports, "ParseNode", () => $b8e97971341aa861$export$1f3b05c07886e0c5);

var $2bi3s = parcelRequire("2bi3s");

var $7sjJm = parcelRequire("7sjJm");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iK8OT = parcelRequire("iK8OT");

var $8PxNP = parcelRequire("8PxNP");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $bJN6D = parcelRequire("bJN6D");

var $9mRLv = parcelRequire("9mRLv");

var $6EUuI = parcelRequire("6EUuI");

var $Xb2We = parcelRequire("Xb2We");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $jkJyY = parcelRequire("jkJyY");

var $5T1O4 = parcelRequire("5T1O4");

var $71IWl = parcelRequire("71IWl");
/**
 * Remove quotes from a string.
 */ function $b8e97971341aa861$var$unquote(pattern) {
    if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') return pattern.slice(1, -1);
    return pattern;
}
/**
 * @param field The field.
 * @param parse What to parse the field as.
 */ function $b8e97971341aa861$var$parseExpression(field, parse) {
    const f = (0, $7k4G6.accessPathWithDatum)(field);
    if (parse === "number") return `toNumber(${f})`;
    else if (parse === "boolean") return `toBoolean(${f})`;
    else if (parse === "string") return `toString(${f})`;
    else if (parse === "date") return `toDate(${f})`;
    else if (parse === "flatten") return f;
    else if (parse.indexOf("date:") === 0) {
        const specifier = $b8e97971341aa861$var$unquote(parse.slice(5, parse.length));
        return `timeParse(${f},'${specifier}')`;
    } else if (parse.indexOf("utc:") === 0) {
        const specifier = $b8e97971341aa861$var$unquote(parse.slice(4, parse.length));
        return `utcParse(${f},'${specifier}')`;
    } else {
        $3XBQv.warn($bHNid.unrecognizedParse(parse));
        return null;
    }
}
function $b8e97971341aa861$export$43ae65b9bddddf5f(transform) {
    const implicit = {};
    (0, $bJN6D.forEachLeaf)(transform.filter, (filter)=>{
        var _a;
        if ((0, $6EUuI.isFieldPredicate)(filter)) {
            // Automatically add a parse node for filters with filter objects
            let val = null;
            // For EqualFilter, just use the equal property.
            // For RangeFilter and OneOfFilter, all array members should have
            // the same type, so we only use the first one.
            if ((0, $6EUuI.isFieldEqualPredicate)(filter)) val = (0, $9ulW1.signalRefOrValue)(filter.equal);
            else if ((0, $6EUuI.isFieldLTEPredicate)(filter)) val = (0, $9ulW1.signalRefOrValue)(filter.lte);
            else if ((0, $6EUuI.isFieldLTPredicate)(filter)) val = (0, $9ulW1.signalRefOrValue)(filter.lt);
            else if ((0, $6EUuI.isFieldGTPredicate)(filter)) val = (0, $9ulW1.signalRefOrValue)(filter.gt);
            else if ((0, $6EUuI.isFieldGTEPredicate)(filter)) val = (0, $9ulW1.signalRefOrValue)(filter.gte);
            else if ((0, $6EUuI.isFieldRangePredicate)(filter)) val = filter.range[0];
            else if ((0, $6EUuI.isFieldOneOfPredicate)(filter)) val = ((_a = filter.oneOf) !== null && _a !== void 0 ? _a : filter["in"])[0];
             // else -- for filter expression, we can't infer anything
            if (val) {
                if ((0, $8PxNP.isDateTime)(val)) implicit[filter.field] = "date";
                else if ((0, $2bi3s.isNumber)(val)) implicit[filter.field] = "number";
                else if ((0, $2bi3s.isString)(val)) implicit[filter.field] = "string";
            }
            if (filter.timeUnit) implicit[filter.field] = "date";
        }
    });
    return implicit;
}
function $b8e97971341aa861$export$9adef3c6daf88ea6(model) {
    const implicit = {};
    function add(fieldDef) {
        if ((0, $2hAmp.isFieldOrDatumDefForTimeFormat)(fieldDef)) implicit[fieldDef.field] = "date";
        else if (fieldDef.type === "quantitative" && (0, $7sjJm.isMinMaxOp)(fieldDef.aggregate) // we need to parse numbers to support correct min and max
        ) implicit[fieldDef.field] = "number";
        else if ((0, $7k4G6.accessPathDepth)(fieldDef.field) > 1) // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.
        // (Parsing numbers / dates already flattens numeric and temporal fields.)
        {
            if (!(fieldDef.field in implicit)) implicit[fieldDef.field] = "flatten";
        } else if ((0, $2hAmp.isScaleFieldDef)(fieldDef) && (0, $Xb2We.isSortField)(fieldDef.sort) && (0, $7k4G6.accessPathDepth)(fieldDef.sort.field) > 1) // Flatten fields that we sort by but that are not otherwise flattened.
        {
            if (!(fieldDef.sort.field in implicit)) implicit[fieldDef.sort.field] = "flatten";
        }
    }
    if ((0, $jkJyY.isUnitModel)(model) || (0, $jkJyY.isFacetModel)(model)) // Parse encoded fields
    model.forEachFieldDef((fieldDef, channel)=>{
        if ((0, $2hAmp.isTypedFieldDef)(fieldDef)) add(fieldDef);
        else {
            const mainChannel = (0, $fWfT0.getMainRangeChannel)(channel);
            const mainFieldDef = model.fieldDef(mainChannel);
            add(Object.assign(Object.assign({}, fieldDef), {
                type: mainFieldDef.type
            }));
        }
    });
    // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.
    if ((0, $jkJyY.isUnitModel)(model)) {
        const { mark: mark, markDef: markDef, encoding: encoding } = model;
        if ((0, $9mRLv.isPathMark)(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)
        !model.encoding.order) {
            const dimensionChannel = markDef.orient === "horizontal" ? "y" : "x";
            const dimensionChannelDef = encoding[dimensionChannel];
            if ((0, $2hAmp.isFieldDef)(dimensionChannelDef) && dimensionChannelDef.type === "quantitative" && !(dimensionChannelDef.field in implicit)) implicit[dimensionChannelDef.field] = "number";
        }
    }
    return implicit;
}
function $b8e97971341aa861$export$dc6b1833f2dc8405(model) {
    const implicit = {};
    if ((0, $jkJyY.isUnitModel)(model) && model.component.selection) for (const name of (0, $7k4G6.keys)(model.component.selection)){
        const selCmpt = model.component.selection[name];
        for (const proj of selCmpt.project.items)if (!proj.channel && (0, $7k4G6.accessPathDepth)(proj.field) > 1) implicit[proj.field] = "flatten";
    }
    return implicit;
}
class $b8e97971341aa861$export$1f3b05c07886e0c5 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, parse){
        super(parent);
        this._parse = parse;
    }
    clone() {
        return new $b8e97971341aa861$export$1f3b05c07886e0c5(null, (0, $7k4G6.duplicate)(this._parse));
    }
    hash() {
        return `Parse ${(0, $7k4G6.hash)(this._parse)}`;
    }
    /**
     * Creates a parse node from a data.format.parse and updates ancestorParse.
     */ static makeExplicit(parent, model, ancestorParse) {
        // Custom parse
        let explicit = {};
        const data = model.data;
        if (!(0, $iK8OT.isGenerator)(data) && data && data.format && data.format.parse) explicit = data.format.parse;
        return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
    }
    /**
     * Creates a parse node from "explicit" parse and "implicit" parse and updates ancestorParse.
     */ static makeWithAncestors(parent, explicit, implicit, ancestorParse) {
        // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as "derived"). We also don't need to flatten a field that has already been parsed.
        for (const field of (0, $7k4G6.keys)(implicit)){
            const parsedAs = ancestorParse.getWithExplicit(field);
            if (parsedAs.value !== undefined) {
                // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.
                if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === "derived" || implicit[field] === "flatten") delete implicit[field];
                else $3XBQv.warn($bHNid.differentParse(field, implicit[field], parsedAs.value));
            }
        }
        for (const field of (0, $7k4G6.keys)(explicit)){
            const parsedAs = ancestorParse.get(field);
            if (parsedAs !== undefined) {
                // Don't parse a field again if it has been parsed with the same type already.
                if (parsedAs === explicit[field]) delete explicit[field];
                else $3XBQv.warn($bHNid.differentParse(field, explicit[field], parsedAs));
            }
        }
        const parse = new (0, $5T1O4.Split)(explicit, implicit);
        // add the format parse from this model so that children don't parse the same field again
        ancestorParse.copyAll(parse);
        // copy only non-null parses
        const p = {};
        for (const key of (0, $7k4G6.keys)(parse.combine())){
            const val = parse.get(key);
            if (val !== null) p[key] = val;
        }
        if ((0, $7k4G6.keys)(p).length === 0 || ancestorParse.parseNothing) return null;
        return new $b8e97971341aa861$export$1f3b05c07886e0c5(parent, p);
    }
    get parse() {
        return this._parse;
    }
    merge(other) {
        this._parse = Object.assign(Object.assign({}, this._parse), other.parse);
        other.remove();
    }
    /**
     * Assemble an object for Vega's format.parse property.
     */ assembleFormatParse() {
        const formatParse = {};
        for (const field of (0, $7k4G6.keys)(this._parse)){
            const p = this._parse[field];
            if ((0, $7k4G6.accessPathDepth)(field) === 1) formatParse[field] = p;
        }
        return formatParse;
    }
    // format parse depends and produces all fields in its parse
    producedFields() {
        return new Set((0, $7k4G6.keys)(this._parse));
    }
    dependentFields() {
        return new Set((0, $7k4G6.keys)(this._parse));
    }
    assembleTransforms(onlyNested = false) {
        return (0, $7k4G6.keys)(this._parse).filter((field)=>onlyNested ? (0, $7k4G6.accessPathDepth)(field) > 1 : true).map((field)=>{
            const expr = $b8e97971341aa861$var$parseExpression(field, this._parse[field]);
            if (!expr) return null;
            const formula = {
                type: "formula",
                expr: expr,
                as: (0, $7k4G6.removePathFromField)(field) // Vega output is always flattened
            };
            return formula;
        }).filter((t)=>t !== null);
    }
}

});

parcelRegister("lIzph", function(module, exports) {

$parcel$export(module.exports, "IdentifierNode", () => $fcf92c153dc5b78b$export$76ece8d0e6fcd6c3);

var $2zU89 = parcelRequire("2zU89");

var $71IWl = parcelRequire("71IWl");
class $fcf92c153dc5b78b$export$76ece8d0e6fcd6c3 extends (0, $71IWl.DataFlowNode) {
    clone() {
        return new $fcf92c153dc5b78b$export$76ece8d0e6fcd6c3(null);
    }
    constructor(parent){
        super(parent);
    }
    dependentFields() {
        return new Set();
    }
    producedFields() {
        return new Set([
            (0, $2zU89.SELECTION_ID)
        ]);
    }
    hash() {
        return "Identifier";
    }
    assemble() {
        return {
            type: "identifier",
            as: (0, $2zU89.SELECTION_ID)
        };
    }
}

});

parcelRegister("jfxzM", function(module, exports) {

$parcel$export(module.exports, "isDataSourceNode", () => $e0397690bf4f99a5$export$d4063bd36b6a4265);
$parcel$export(module.exports, "Optimizer", () => $e0397690bf4f99a5$export$69ae9293516e70f0);
$parcel$export(module.exports, "BottomUpOptimizer", () => $e0397690bf4f99a5$export$6ccd7acff9ab0bfe);
$parcel$export(module.exports, "TopDownOptimizer", () => $e0397690bf4f99a5$export$925822959600650);

var $bXOrP = parcelRequire("bXOrP");

var $cetJA = parcelRequire("cetJA");

var $a74BM = parcelRequire("a74BM");
var $e0397690bf4f99a5$var$__classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
};
var $e0397690bf4f99a5$var$__classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
};
var $e0397690bf4f99a5$var$_modified;
function $e0397690bf4f99a5$export$d4063bd36b6a4265(node) {
    return node instanceof (0, $a74BM.SourceNode) || node instanceof (0, $bXOrP.GraticuleNode) || node instanceof (0, $cetJA.SequenceNode);
}
class $e0397690bf4f99a5$export$69ae9293516e70f0 {
    constructor(){
        $e0397690bf4f99a5$var$_modified.set(this, void 0);
        $e0397690bf4f99a5$var$__classPrivateFieldSet(this, $e0397690bf4f99a5$var$_modified, false);
    }
    // Once true, #modified is never set to false
    setModified() {
        $e0397690bf4f99a5$var$__classPrivateFieldSet(this, $e0397690bf4f99a5$var$_modified, true);
    }
    get modifiedFlag() {
        return $e0397690bf4f99a5$var$__classPrivateFieldGet(this, $e0397690bf4f99a5$var$_modified);
    }
}
$e0397690bf4f99a5$var$_modified = new WeakMap();
class $e0397690bf4f99a5$export$6ccd7acff9ab0bfe extends $e0397690bf4f99a5$export$69ae9293516e70f0 {
    /**
     * Compute a map of node depths that we can use to determine a topological sort order.
     */ getNodeDepths(node, depth, depths) {
        depths.set(node, depth);
        for (const child of node.children)this.getNodeDepths(child, depth + 1, depths);
        return depths;
    }
    /**
     * Run the optimizer on all nodes starting from the leaves.
     */ optimize(node) {
        const depths = this.getNodeDepths(node, 0, new Map());
        const topologicalSort = [
            ...depths.entries()
        ].sort((a, b)=>b[1] - a[1]);
        for (const tuple of topologicalSort)this.run(tuple[0]);
        return this.modifiedFlag;
    }
}
class $e0397690bf4f99a5$export$925822959600650 extends $e0397690bf4f99a5$export$69ae9293516e70f0 {
    /**
     * Run the optimizer depth first on all nodes starting from the roots.
     */ optimize(node) {
        this.run(node);
        for (const child of node.children)this.optimize(child);
        return this.modifiedFlag;
    }
}

});
parcelRegister("bXOrP", function(module, exports) {

$parcel$export(module.exports, "GraticuleNode", () => $8b5c564fb2316727$export$5e6da869e7605387);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $8b5c564fb2316727$export$5e6da869e7605387 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, params){
        super(parent);
        this.params = params;
    }
    clone() {
        return new $8b5c564fb2316727$export$5e6da869e7605387(null, this.params);
    }
    dependentFields() {
        return new Set();
    }
    producedFields() {
        return undefined; // there should never be a node before graticule
    }
    hash() {
        return `Graticule ${(0, $7k4G6.hash)(this.params)}`;
    }
    assemble() {
        return Object.assign({
            type: "graticule"
        }, this.params === true ? {} : this.params);
    }
}

});

parcelRegister("cetJA", function(module, exports) {

$parcel$export(module.exports, "SequenceNode", () => $8e7ddb7668531a01$export$1c19a9956066988d);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $8e7ddb7668531a01$export$1c19a9956066988d extends (0, $71IWl.DataFlowNode) {
    constructor(parent, params){
        super(parent);
        this.params = params;
    }
    clone() {
        return new $8e7ddb7668531a01$export$1c19a9956066988d(null, this.params);
    }
    dependentFields() {
        return new Set();
    }
    producedFields() {
        var _a;
        return new Set([
            (_a = this.params.as) !== null && _a !== void 0 ? _a : "data"
        ]);
    }
    hash() {
        return `Hash ${(0, $7k4G6.hash)(this.params)}`;
    }
    assemble() {
        return Object.assign({
            type: "sequence"
        }, this.params);
    }
}

});

parcelRegister("a74BM", function(module, exports) {

$parcel$export(module.exports, "SourceNode", () => $75ce21edbc27b8ca$export$7e987e8f375d24c2);

var $iK8OT = parcelRequire("iK8OT");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $75ce21edbc27b8ca$export$7e987e8f375d24c2 extends (0, $71IWl.DataFlowNode) {
    constructor(data){
        super(null); // source cannot have parent
        data = data !== null && data !== void 0 ? data : {
            name: "source"
        };
        let format;
        if (!(0, $iK8OT.isGenerator)(data)) format = data.format ? Object.assign({}, (0, $7k4G6.omit)(data.format, [
            "parse"
        ])) : {};
        if ((0, $iK8OT.isInlineData)(data)) this._data = {
            values: data.values
        };
        else if ((0, $iK8OT.isUrlData)(data)) {
            this._data = {
                url: data.url
            };
            if (!format.type) {
                // Extract extension from URL using snippet from
                // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
                let defaultExtension = /(?:\.([^.]+))?$/.exec(data.url)[1];
                if (!(0, $7k4G6.contains)([
                    "json",
                    "csv",
                    "tsv",
                    "dsv",
                    "topojson"
                ], defaultExtension)) defaultExtension = "json";
                // defaultExtension has type string but we ensure that it is DataFormatType above
                format.type = defaultExtension;
            }
        } else if ((0, $iK8OT.isSphereGenerator)(data)) // hardwire GeoJSON sphere data into output specification
        this._data = {
            values: [
                {
                    type: "Sphere"
                }
            ]
        };
        else if ((0, $iK8OT.isNamedData)(data) || (0, $iK8OT.isGenerator)(data)) this._data = {};
        // set flag to check if generator
        this._generator = (0, $iK8OT.isGenerator)(data);
        // any dataset can be named
        if (data.name) this._name = data.name;
        if (format && !(0, $7k4G6.isEmpty)(format)) this._data.format = format;
    }
    dependentFields() {
        return new Set();
    }
    producedFields() {
        return undefined; // we don't know what this source produces
    }
    get data() {
        return this._data;
    }
    hasName() {
        return !!this._name;
    }
    get isGenerator() {
        return this._generator;
    }
    get dataName() {
        return this._name;
    }
    set dataName(name) {
        this._name = name;
    }
    set parent(parent) {
        throw new Error("Source nodes have to be roots.");
    }
    remove() {
        throw new Error("Source nodes are roots and cannot be removed.");
    }
    hash() {
        throw new Error("Cannot hash sources");
    }
    assemble() {
        return Object.assign(Object.assign({
            name: this._name
        }, this._data), {
            transform: []
        });
    }
}

});



parcelRegister("aBSjy", function(module, exports) {

$parcel$export(module.exports, "moveFacetDown", () => $7b977dd0165d76b4$export$bc87426446a0eff4);

var $iK8OT = parcelRequire("iK8OT");

var $7hYDh = parcelRequire("7hYDh");

var $71IWl = parcelRequire("71IWl");

var $3WhAB = parcelRequire("3WhAB");

var $hjAkP = parcelRequire("hjAkP");

var $aSQVj = parcelRequire("aSQVj");

var $6GmKA = parcelRequire("6GmKA");

var $msAWv = parcelRequire("msAWv");
/**
 * Clones the subtree and ignores output nodes except for the leaves, which are renamed.
 */ function $7b977dd0165d76b4$var$cloneSubtree(facet) {
    function clone(node) {
        if (!(node instanceof (0, $3WhAB.FacetNode))) {
            const copy = node.clone();
            if (copy instanceof (0, $71IWl.OutputNode)) {
                const newName = (0, $aSQVj.FACET_SCALE_PREFIX) + copy.getSource();
                copy.setSource(newName);
                facet.model.component.data.outputNodes[newName] = copy;
            } else if (copy instanceof (0, $7hYDh.AggregateNode) || copy instanceof (0, $6GmKA.StackNode) || copy instanceof (0, $msAWv.WindowTransformNode) || copy instanceof (0, $hjAkP.JoinAggregateTransformNode)) copy.addDimensions(facet.fields);
            for (const n of node.children.flatMap(clone))n.parent = copy;
            return [
                copy
            ];
        }
        return node.children.flatMap(clone);
    }
    return clone;
}
function $7b977dd0165d76b4$export$bc87426446a0eff4(node) {
    if (node instanceof (0, $3WhAB.FacetNode)) {
        if (node.numChildren() === 1 && !(node.children[0] instanceof (0, $71IWl.OutputNode))) {
            // move down until we hit a fork or output node
            const child = node.children[0];
            if (child instanceof (0, $7hYDh.AggregateNode) || child instanceof (0, $6GmKA.StackNode) || child instanceof (0, $msAWv.WindowTransformNode) || child instanceof (0, $hjAkP.JoinAggregateTransformNode)) child.addDimensions(node.fields);
            child.swapWithParent();
            $7b977dd0165d76b4$export$bc87426446a0eff4(node);
        } else {
            // move main to facet
            const facetMain = node.model.component.data.main;
            $7b977dd0165d76b4$var$moveMainDownToFacet(facetMain);
            // replicate the subtree and place it before the facet's main node
            const cloner = $7b977dd0165d76b4$var$cloneSubtree(node);
            const copy = node.children.map(cloner).flat();
            for (const c of copy)c.parent = facetMain;
        }
    } else node.children.map($7b977dd0165d76b4$export$bc87426446a0eff4);
}
function $7b977dd0165d76b4$var$moveMainDownToFacet(node) {
    if (node instanceof (0, $71IWl.OutputNode) && node.type === (0, $iK8OT.DataSourceType).Main) {
        if (node.numChildren() === 1) {
            const child = node.children[0];
            if (!(child instanceof (0, $3WhAB.FacetNode))) {
                child.swapWithParent();
                $7b977dd0165d76b4$var$moveMainDownToFacet(node);
            }
        }
    }
}

});
parcelRegister("hjAkP", function(module, exports) {

$parcel$export(module.exports, "JoinAggregateTransformNode", () => $c9b06564b4624ce6$export$632074d31a7c9944);

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $c9b06564b4624ce6$export$632074d31a7c9944 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        super(parent);
        this.transform = transform;
    }
    clone() {
        return new $c9b06564b4624ce6$export$632074d31a7c9944(null, (0, $7k4G6.duplicate)(this.transform));
    }
    addDimensions(fields) {
        this.transform.groupby = (0, $7k4G6.unique)(this.transform.groupby.concat(fields), (d)=>d);
    }
    dependentFields() {
        const out = new Set();
        if (this.transform.groupby) this.transform.groupby.forEach(out.add, out);
        this.transform.joinaggregate.map((w)=>w.field).filter((f)=>f !== undefined).forEach(out.add, out);
        return out;
    }
    producedFields() {
        return new Set(this.transform.joinaggregate.map(this.getDefaultName));
    }
    getDefaultName(joinAggregateFieldDef) {
        var _a;
        return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : (0, $2hAmp.vgField)(joinAggregateFieldDef);
    }
    hash() {
        return `JoinAggregateTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const fields = [];
        const ops = [];
        const as = [];
        for (const joinaggregate of this.transform.joinaggregate){
            ops.push(joinaggregate.op);
            as.push(this.getDefaultName(joinaggregate));
            fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);
        }
        const groupby = this.transform.groupby;
        return Object.assign({
            type: "joinaggregate",
            as: as,
            ops: ops,
            fields: fields
        }, groupby !== undefined ? {
            groupby: groupby
        } : {});
    }
}

});

parcelRegister("6GmKA", function(module, exports) {

$parcel$export(module.exports, "StackNode", () => $4dd8501641d2a90d$export$6e11d1e78715185c);

var $2bi3s = parcelRequire("2bi3s");

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $71IWl = parcelRequire("71IWl");
function $4dd8501641d2a90d$var$getStackByFields(model) {
    return model.stack.stackBy.reduce((fields, by)=>{
        const fieldDef = by.fieldDef;
        const _field = (0, $2hAmp.vgField)(fieldDef);
        if (_field) fields.push(_field);
        return fields;
    }, []);
}
function $4dd8501641d2a90d$var$isValidAsArray(as) {
    return (0, $2bi3s.isArray)(as) && as.every((s)=>(0, $2bi3s.isString)(s)) && as.length > 1;
}
class $4dd8501641d2a90d$export$6e11d1e78715185c extends (0, $71IWl.DataFlowNode) {
    constructor(parent, stack){
        super(parent);
        this._stack = stack;
    }
    clone() {
        return new $4dd8501641d2a90d$export$6e11d1e78715185c(null, (0, $7k4G6.duplicate)(this._stack));
    }
    static makeFromTransform(parent, stackTransform) {
        const { stack: stack, groupby: groupby, as: as, offset: offset = "zero" } = stackTransform;
        const sortFields = [];
        const sortOrder = [];
        if (stackTransform.sort !== undefined) for (const sortField of stackTransform.sort){
            sortFields.push(sortField.field);
            sortOrder.push((0, $7k4G6.getFirstDefined)(sortField.order, "ascending"));
        }
        const sort = {
            field: sortFields,
            order: sortOrder
        };
        let normalizedAs;
        if ($4dd8501641d2a90d$var$isValidAsArray(as)) normalizedAs = as;
        else if ((0, $2bi3s.isString)(as)) normalizedAs = [
            as,
            as + "_end"
        ];
        else normalizedAs = [
            stackTransform.stack + "_start",
            stackTransform.stack + "_end"
        ];
        return new $4dd8501641d2a90d$export$6e11d1e78715185c(parent, {
            stackField: stack,
            groupby: groupby,
            offset: offset,
            sort: sort,
            facetby: [],
            as: normalizedAs
        });
    }
    static makeFromEncoding(parent, model) {
        const stackProperties = model.stack;
        const { encoding: encoding } = model;
        if (!stackProperties) return null;
        const { groupbyChannel: groupbyChannel, fieldChannel: fieldChannel, offset: offset, impute: impute } = stackProperties;
        let dimensionFieldDef;
        if (groupbyChannel) {
            const cDef = encoding[groupbyChannel];
            dimensionFieldDef = (0, $2hAmp.getFieldDef)(cDef); // Fair to cast as groupByChannel is always either x or y
        }
        const stackby = $4dd8501641d2a90d$var$getStackByFields(model);
        const orderDef = model.encoding.order;
        let sort;
        if ((0, $2bi3s.isArray)(orderDef) || (0, $2hAmp.isFieldDef)(orderDef)) sort = (0, $9ulW1.sortParams)(orderDef);
        else // default = descending by stackFields
        // FIXME is the default here correct for binned fields?
        sort = stackby.reduce((s, field)=>{
            s.field.push(field);
            s.order.push(fieldChannel === "y" ? "descending" : "ascending");
            return s;
        }, {
            field: [],
            order: []
        });
        return new $4dd8501641d2a90d$export$6e11d1e78715185c(parent, {
            dimensionFieldDef: dimensionFieldDef,
            stackField: model.vgField(fieldChannel),
            facetby: [],
            stackby: stackby,
            sort: sort,
            offset: offset,
            impute: impute,
            as: [
                model.vgField(fieldChannel, {
                    suffix: "start",
                    forAs: true
                }),
                model.vgField(fieldChannel, {
                    suffix: "end",
                    forAs: true
                })
            ]
        });
    }
    get stack() {
        return this._stack;
    }
    addDimensions(fields) {
        this._stack.facetby.push(...fields);
    }
    dependentFields() {
        const out = new Set();
        out.add(this._stack.stackField);
        this.getGroupbyFields().forEach(out.add, out);
        this._stack.facetby.forEach(out.add, out);
        this._stack.sort.field.forEach(out.add, out);
        return out;
    }
    producedFields() {
        return new Set(this._stack.as);
    }
    hash() {
        return `Stack ${(0, $7k4G6.hash)(this._stack)}`;
    }
    getGroupbyFields() {
        const { dimensionFieldDef: dimensionFieldDef, impute: impute, groupby: groupby } = this._stack;
        if (dimensionFieldDef) {
            if (dimensionFieldDef.bin) {
                if (impute) // For binned group by field with impute, we calculate bin_mid
                // as we cannot impute two fields simultaneously
                return [
                    (0, $2hAmp.vgField)(dimensionFieldDef, {
                        binSuffix: "mid"
                    })
                ];
                return [
                    // For binned group by field without impute, we need both bin (start) and bin_end
                    (0, $2hAmp.vgField)(dimensionFieldDef, {}),
                    (0, $2hAmp.vgField)(dimensionFieldDef, {
                        binSuffix: "end"
                    })
                ];
            }
            return [
                (0, $2hAmp.vgField)(dimensionFieldDef)
            ];
        }
        return groupby !== null && groupby !== void 0 ? groupby : [];
    }
    assemble() {
        const transform = [];
        const { facetby: facetby, dimensionFieldDef: dimensionFieldDef, stackField: field, stackby: stackby, sort: sort, offset: offset, impute: impute, as: as } = this._stack;
        // Impute
        if (impute && dimensionFieldDef) {
            const { band: band = 0.5, bin: bin } = dimensionFieldDef;
            if (bin) // As we can only impute one field at a time, we need to calculate
            // mid point for a binned field
            transform.push({
                type: "formula",
                expr: `${band}*` + (0, $2hAmp.vgField)(dimensionFieldDef, {
                    expr: "datum"
                }) + `+${1 - band}*` + (0, $2hAmp.vgField)(dimensionFieldDef, {
                    expr: "datum",
                    binSuffix: "end"
                }),
                as: (0, $2hAmp.vgField)(dimensionFieldDef, {
                    binSuffix: "mid",
                    forAs: true
                })
            });
            transform.push({
                type: "impute",
                field: field,
                groupby: [
                    ...stackby,
                    ...facetby
                ],
                key: (0, $2hAmp.vgField)(dimensionFieldDef, {
                    binSuffix: "mid"
                }),
                method: "value",
                value: 0
            });
        }
        // Stack
        transform.push({
            type: "stack",
            groupby: [
                ...this.getGroupbyFields(),
                ...facetby
            ],
            field: field,
            sort: sort,
            as: as,
            offset: offset
        });
        return transform;
    }
}

});

parcelRegister("msAWv", function(module, exports) {

$parcel$export(module.exports, "WindowTransformNode", () => $04383c87bdfc3f7d$export$4941dda4b1c4aed8);

var $7sjJm = parcelRequire("7sjJm");

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $04383c87bdfc3f7d$export$4941dda4b1c4aed8 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        super(parent);
        this.transform = transform;
    }
    clone() {
        return new $04383c87bdfc3f7d$export$4941dda4b1c4aed8(null, (0, $7k4G6.duplicate)(this.transform));
    }
    addDimensions(fields) {
        this.transform.groupby = (0, $7k4G6.unique)(this.transform.groupby.concat(fields), (d)=>d);
    }
    dependentFields() {
        var _a, _b;
        const out = new Set();
        ((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).forEach(out.add, out);
        ((_b = this.transform.sort) !== null && _b !== void 0 ? _b : []).forEach((m)=>out.add(m.field));
        this.transform.window.map((w)=>w.field).filter((f)=>f !== undefined).forEach(out.add, out);
        return out;
    }
    producedFields() {
        return new Set(this.transform.window.map(this.getDefaultName));
    }
    getDefaultName(windowFieldDef) {
        var _a;
        return (_a = windowFieldDef.as) !== null && _a !== void 0 ? _a : (0, $2hAmp.vgField)(windowFieldDef);
    }
    hash() {
        return `WindowTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        var _a;
        const fields = [];
        const ops = [];
        const as = [];
        const params = [];
        for (const window of this.transform.window){
            ops.push(window.op);
            as.push(this.getDefaultName(window));
            params.push(window.param === undefined ? null : window.param);
            fields.push(window.field === undefined ? null : window.field);
        }
        const frame = this.transform.frame;
        const groupby = this.transform.groupby;
        if (frame && frame[0] === null && frame[1] === null && ops.every((o)=>(0, $7sjJm.isAggregateOp)(o))) // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate
        return Object.assign({
            type: "joinaggregate",
            as: as,
            ops: ops,
            fields: fields
        }, groupby !== undefined ? {
            groupby: groupby
        } : {});
        const sortFields = [];
        const sortOrder = [];
        if (this.transform.sort !== undefined) for (const sortField of this.transform.sort){
            sortFields.push(sortField.field);
            sortOrder.push((_a = sortField.order) !== null && _a !== void 0 ? _a : "ascending");
        }
        const sort = {
            field: sortFields,
            order: sortOrder
        };
        const ignorePeers = this.transform.ignorePeers;
        return Object.assign(Object.assign(Object.assign({
            type: "window",
            params: params,
            as: as,
            ops: ops,
            fields: fields,
            sort: sort
        }, ignorePeers !== undefined ? {
            ignorePeers: ignorePeers
        } : {}), groupby !== undefined ? {
            groupby: groupby
        } : {}), frame !== undefined ? {
            frame: frame
        } : {});
    }
}

});



parcelRegister("1BrRN", function(module, exports) {

$parcel$export(module.exports, "SignalRefWrapper", () => $12aedce9f6f50fb9$export$9269a6cedf3bad57);
/**
 * A class that behaves like a SignalRef but lazily generates the signal.
 * The provided generator function should use `Model.getSignalName` to use the correct signal name.
 */ class $12aedce9f6f50fb9$export$9269a6cedf3bad57 {
    constructor(exprGenerator){
        Object.defineProperty(this, "signal", {
            enumerable: true,
            get: exprGenerator
        });
    }
    static fromName(rename, signalName) {
        return new $12aedce9f6f50fb9$export$9269a6cedf3bad57(()=>rename(signalName));
    }
}

});



parcelRegister("gUNQa", function(module, exports) {

$parcel$export(module.exports, "parseScales", () => $c508898f1a010fed$export$c66ae3d948447b35);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9mRLv = parcelRequire("9mRLv");

var $9rekY = parcelRequire("9rekY");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $jkJyY = parcelRequire("jkJyY");

var $chIKM = parcelRequire("chIKM");

var $5T1O4 = parcelRequire("5T1O4");

var $fUHFa = parcelRequire("fUHFa");

var $91e8H = parcelRequire("91e8H");

var $jR4ZH = parcelRequire("jR4ZH");

var $lBkvl = parcelRequire("lBkvl");
function $c508898f1a010fed$export$c66ae3d948447b35(model, { ignoreRange: ignoreRange } = {}) {
    $c508898f1a010fed$export$fd608f7f14fa85ef(model);
    (0, $91e8H.parseScaleDomain)(model);
    for (const prop of (0, $9rekY.NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES))(0, $jR4ZH.parseScaleProperty)(model, prop);
    if (!ignoreRange) // range depends on zero
    (0, $jR4ZH.parseScaleRange)(model);
}
function $c508898f1a010fed$export$fd608f7f14fa85ef(model) {
    if ((0, $jkJyY.isUnitModel)(model)) model.component.scales = $c508898f1a010fed$var$parseUnitScaleCore(model);
    else model.component.scales = $c508898f1a010fed$var$parseNonUnitScaleCore(model);
}
/**
 * Parse scales for all channels of a model.
 */ function $c508898f1a010fed$var$parseUnitScaleCore(model) {
    const { encoding: encoding, mark: mark } = model;
    return (0, $fWfT0.SCALE_CHANNELS).reduce((scaleComponents, channel)=>{
        const fieldOrDatumDef = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]); // must be typed def to have scale
        // Don't generate scale for shape of geoshape
        if (fieldOrDatumDef && mark === (0, $9mRLv.GEOSHAPE) && channel === (0, $fWfT0.SHAPE) && fieldOrDatumDef.type === (0, $9LX7L.GEOJSON)) return scaleComponents;
        let specifiedScale = fieldOrDatumDef && fieldOrDatumDef["scale"];
        if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {
            specifiedScale = specifiedScale !== null && specifiedScale !== void 0 ? specifiedScale : {};
            const sType = (0, $lBkvl.scaleType)(specifiedScale, channel, fieldOrDatumDef, mark);
            scaleComponents[channel] = new (0, $fUHFa.ScaleComponent)(model.scaleName(channel + "", true), {
                value: sType,
                explicit: specifiedScale.type === sType
            });
        }
        return scaleComponents;
    }, {});
}
const $c508898f1a010fed$var$scaleTypeTieBreaker = (0, $5T1O4.tieBreakByComparing)((st1, st2)=>(0, $9rekY.scaleTypePrecedence)(st1) - (0, $9rekY.scaleTypePrecedence)(st2));
function $c508898f1a010fed$var$parseNonUnitScaleCore(model) {
    var _a;
    const scaleComponents = model.component.scales = {};
    const scaleTypeWithExplicitIndex = {};
    const resolve = model.component.resolve;
    // Parse each child scale and determine if a particular channel can be merged.
    for (const child of model.children){
        $c508898f1a010fed$export$fd608f7f14fa85ef(child);
        // Instead of always merging right away -- check if it is compatible to merge first!
        for (const channel of (0, $7k4G6.keys)(child.component.scales)){
            // if resolve is undefined, set default first
            resolve.scale[channel] = (_a = resolve.scale[channel]) !== null && _a !== void 0 ? _a : (0, $chIKM.defaultScaleResolve)(channel, model);
            if (resolve.scale[channel] === "shared") {
                const explicitScaleType = scaleTypeWithExplicitIndex[channel];
                const childScaleType = child.component.scales[channel].getWithExplicit("type");
                if (explicitScaleType) {
                    if ((0, $9rekY.scaleCompatible)(explicitScaleType.value, childScaleType.value)) // merge scale component if type are compatible
                    scaleTypeWithExplicitIndex[channel] = (0, $5T1O4.mergeValuesWithExplicit)(explicitScaleType, childScaleType, "type", "scale", $c508898f1a010fed$var$scaleTypeTieBreaker);
                    else {
                        // Otherwise, update conflicting channel to be independent
                        resolve.scale[channel] = "independent";
                        // Remove from the index so they don't get merged
                        delete scaleTypeWithExplicitIndex[channel];
                    }
                } else scaleTypeWithExplicitIndex[channel] = childScaleType;
            }
        }
    }
    // Merge each channel listed in the index
    for (const channel of (0, $7k4G6.keys)(scaleTypeWithExplicitIndex)){
        // Create new merged scale component
        const name = model.scaleName(channel, true);
        const typeWithExplicit = scaleTypeWithExplicitIndex[channel];
        scaleComponents[channel] = new (0, $fUHFa.ScaleComponent)(name, typeWithExplicit);
        // rename each child and mark them as merged
        for (const child of model.children){
            const childScale = child.component.scales[channel];
            if (childScale) {
                child.renameScale(childScale.get("name"), name);
                childScale.merged = true;
            }
        }
    }
    return scaleComponents;
}

});
parcelRegister("fUHFa", function(module, exports) {

$parcel$export(module.exports, "ScaleComponent", () => $b95df487de969d9c$export$8456b499802da8f7);

var $2bi3s = parcelRequire("2bi3s");

var $7k4G6 = parcelRequire("7k4G6");

var $5T1O4 = parcelRequire("5T1O4");
class $b95df487de969d9c$export$8456b499802da8f7 extends (0, $5T1O4.Split) {
    constructor(name, typeWithExplicit){
        super({}, {
            name: name
        } // name as initial implicit property
        );
        this.merged = false;
        this.setWithExplicit("type", typeWithExplicit);
    }
    /**
     * Whether the scale definitely includes zero in the domain
     */ domainDefinitelyIncludesZero() {
        if (this.get("zero") !== false) return true;
        return (0, $7k4G6.some)(this.get("domains"), (d)=>(0, $2bi3s.isArray)(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);
    }
}

});

parcelRegister("jR4ZH", function(module, exports) {

$parcel$export(module.exports, "parseScaleProperty", () => $e746d74d3b3da81d$export$742d13a8f22bfe15);
$parcel$export(module.exports, "parseScaleRange", () => $e746d74d3b3da81d$export$8b8f73d1dcd8fcf8);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $8PxNP = parcelRequire("8PxNP");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $69ADH = parcelRequire("69ADH");

var $jkJyY = parcelRequire("jkJyY");

var $1BrRN = parcelRequire("1BrRN");

var $5T1O4 = parcelRequire("5T1O4");

var $ep4WT = parcelRequire("ep4WT");
function $e746d74d3b3da81d$export$742d13a8f22bfe15(model, property) {
    if ((0, $jkJyY.isUnitModel)(model)) $e746d74d3b3da81d$var$parseUnitScaleProperty(model, property);
    else $e746d74d3b3da81d$export$5f48da061cb92cb6(model, property);
}
function $e746d74d3b3da81d$var$parseUnitScaleProperty(model, property) {
    const localScaleComponents = model.component.scales;
    const { config: config, encoding: encoding, markDef: markDef, specifiedScales: specifiedScales } = model;
    for (const channel of (0, $7k4G6.keys)(localScaleComponents)){
        const specifiedScale = specifiedScales[channel];
        const localScaleCmpt = localScaleComponents[channel];
        const mergedScaleCmpt = model.getScaleComponent(channel);
        const fieldOrDatumDef = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]);
        const specifiedValue = specifiedScale[property];
        const scaleType = mergedScaleCmpt.get("type");
        const scalePadding = mergedScaleCmpt.get("padding");
        const scalePaddingInner = mergedScaleCmpt.get("paddingInner");
        const supportedByScaleType = (0, $9rekY.scaleTypeSupportProperty)(scaleType, property);
        const channelIncompatability = (0, $9rekY.channelScalePropertyIncompatability)(channel, property);
        if (specifiedValue !== undefined) {
            // If there is a specified value, check if it is compatible with scale type and channel
            if (!supportedByScaleType) $3XBQv.warn($bHNid.scalePropertyNotWorkWithScaleType(scaleType, property, channel));
            else if (channelIncompatability) // channel
            $3XBQv.warn(channelIncompatability);
        }
        if (supportedByScaleType && channelIncompatability === undefined) {
            if (specifiedValue !== undefined) {
                const timeUnit = fieldOrDatumDef["timeUnit"];
                const type = fieldOrDatumDef.type;
                switch(property){
                    // domainMax/Min to signal if the value is a datetime object
                    case "domainMax":
                    case "domainMin":
                        if ((0, $8PxNP.isDateTime)(specifiedScale[property]) || type === "temporal" || timeUnit) localScaleCmpt.set(property, {
                            signal: (0, $2hAmp.valueExpr)(specifiedScale[property], {
                                type: type,
                                timeUnit: timeUnit
                            })
                        }, true);
                        else localScaleCmpt.set(property, specifiedScale[property], true);
                        break;
                    default:
                        localScaleCmpt.copyKeyFromObject(property, specifiedScale);
                }
            } else {
                const value = property in $e746d74d3b3da81d$export$c4e2bea91fd42df ? $e746d74d3b3da81d$export$c4e2bea91fd42df[property]({
                    model: model,
                    channel: channel,
                    fieldOrDatumDef: fieldOrDatumDef,
                    scaleType: scaleType,
                    scalePadding: scalePadding,
                    scalePaddingInner: scalePaddingInner,
                    domain: specifiedScale.domain,
                    markDef: markDef,
                    config: config
                }) : config.scale[property];
                if (value !== undefined) localScaleCmpt.set(property, value, false);
            }
        }
    }
}
const $e746d74d3b3da81d$export$c4e2bea91fd42df = {
    bins: ({ model: model, fieldOrDatumDef: fieldOrDatumDef })=>(0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? $e746d74d3b3da81d$export$8a242781dd47f521(model, fieldOrDatumDef) : undefined,
    interpolate: ({ channel: channel, fieldOrDatumDef: fieldOrDatumDef })=>$e746d74d3b3da81d$export$89e29e4ab65e70a9(channel, fieldOrDatumDef.type),
    nice: ({ scaleType: scaleType, channel: channel, fieldOrDatumDef: fieldOrDatumDef })=>$e746d74d3b3da81d$export$7a695fe44258210b(scaleType, channel, fieldOrDatumDef),
    padding: ({ channel: channel, scaleType: scaleType, fieldOrDatumDef: fieldOrDatumDef, markDef: markDef, config: config })=>$e746d74d3b3da81d$export$6f98e8eaf0be1996(channel, scaleType, config.scale, fieldOrDatumDef, markDef, config.bar),
    paddingInner: ({ scalePadding: scalePadding, channel: channel, markDef: markDef, config: config })=>$e746d74d3b3da81d$export$106c352a074d64ef(scalePadding, channel, markDef.type, config.scale),
    paddingOuter: ({ scalePadding: scalePadding, channel: channel, scaleType: scaleType, markDef: markDef, scalePaddingInner: scalePaddingInner, config: config })=>$e746d74d3b3da81d$export$c1647a4a4cfef8ab(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, config.scale),
    reverse: ({ fieldOrDatumDef: fieldOrDatumDef, scaleType: scaleType, channel: channel, config: config })=>{
        const sort = (0, $2hAmp.isFieldDef)(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined;
        return $e746d74d3b3da81d$export$66c1ae025e96b4bc(scaleType, sort, channel, config.scale);
    },
    zero: ({ channel: channel, fieldOrDatumDef: fieldOrDatumDef, domain: domain, markDef: markDef, scaleType: scaleType })=>$e746d74d3b3da81d$export$7f9972325ebfd559(channel, fieldOrDatumDef, domain, markDef, scaleType)
};
function $e746d74d3b3da81d$export$8b8f73d1dcd8fcf8(model) {
    if ((0, $jkJyY.isUnitModel)(model)) (0, $ep4WT.parseUnitScaleRange)(model);
    else $e746d74d3b3da81d$export$5f48da061cb92cb6(model, "range");
}
function $e746d74d3b3da81d$export$5f48da061cb92cb6(model, property) {
    const localScaleComponents = model.component.scales;
    for (const child of model.children)if (property === "range") $e746d74d3b3da81d$export$8b8f73d1dcd8fcf8(child);
    else $e746d74d3b3da81d$export$742d13a8f22bfe15(child, property);
    for (const channel of (0, $7k4G6.keys)(localScaleComponents)){
        let valueWithExplicit;
        for (const child of model.children){
            const childComponent = child.component.scales[channel];
            if (childComponent) {
                const childValueWithExplicit = childComponent.getWithExplicit(property);
                valueWithExplicit = (0, $5T1O4.mergeValuesWithExplicit)(valueWithExplicit, childValueWithExplicit, property, "scale", (0, $5T1O4.tieBreakByComparing)((v1, v2)=>{
                    switch(property){
                        case "range":
                            // For step, prefer larger step
                            if (v1.step && v2.step) return v1.step - v2.step;
                            return 0;
                    }
                    return 0;
                }));
            }
        }
        localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);
    }
}
function $e746d74d3b3da81d$export$8a242781dd47f521(model, fieldDef) {
    const bin = fieldDef.bin;
    if ((0, $iR8lA.isBinning)(bin)) {
        const binSignal = (0, $69ADH.getBinSignalName)(model, fieldDef.field, bin);
        return new (0, $1BrRN.SignalRefWrapper)(()=>{
            return model.getSignalName(binSignal);
        });
    } else if ((0, $iR8lA.isBinned)(bin) && (0, $iR8lA.isBinParams)(bin) && bin.step !== undefined) // start and stop will be determined from the scale domain
    return {
        step: bin.step
    };
    return undefined;
}
function $e746d74d3b3da81d$export$89e29e4ab65e70a9(channel, type) {
    if ((0, $7k4G6.contains)([
        (0, $fWfT0.COLOR),
        (0, $fWfT0.FILL),
        (0, $fWfT0.STROKE)
    ], channel) && type !== "nominal") return "hcl";
    return undefined;
}
function $e746d74d3b3da81d$export$7a695fe44258210b(scaleType, channel, fieldOrDatumDef) {
    var _a;
    if (((_a = (0, $2hAmp.getFieldDef)(fieldOrDatumDef)) === null || _a === void 0 ? void 0 : _a.bin) || $7k4G6.contains([
        (0, $9rekY.ScaleType).TIME,
        (0, $9rekY.ScaleType).UTC
    ], scaleType)) return undefined;
    return channel in (0, $fWfT0.POSITION_SCALE_CHANNEL_INDEX) ? true : undefined;
}
function $e746d74d3b3da81d$export$6f98e8eaf0be1996(channel, scaleType, scaleConfig, fieldOrDatumDef, markDef, barConfig) {
    if (channel in (0, $fWfT0.POSITION_SCALE_CHANNEL_INDEX)) {
        if ((0, $9rekY.isContinuousToContinuous)(scaleType)) {
            if (scaleConfig.continuousPadding !== undefined) return scaleConfig.continuousPadding;
            const { type: type, orient: orient } = markDef;
            if (type === "bar" && !((0, $2hAmp.isFieldDef)(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {
                if (orient === "vertical" && channel === "x" || orient === "horizontal" && channel === "y") return barConfig.continuousBandSize;
            }
        }
        if (scaleType === (0, $9rekY.ScaleType).POINT) return scaleConfig.pointPadding;
    }
    return undefined;
}
function $e746d74d3b3da81d$export$106c352a074d64ef(paddingValue, channel, mark, scaleConfig) {
    if (paddingValue !== undefined) // If user has already manually specified "padding", no need to add default paddingInner.
    return undefined;
    if (channel in (0, $fWfT0.POSITION_SCALE_CHANNEL_INDEX)) {
        // Padding is only set for X and Y by default.
        // Basically it doesn't make sense to add padding for color and size.
        // paddingOuter would only be called if it's a band scale, just return the default for bandScale.
        const { bandPaddingInner: bandPaddingInner, barBandPaddingInner: barBandPaddingInner, rectBandPaddingInner: rectBandPaddingInner } = scaleConfig;
        return (0, $7k4G6.getFirstDefined)(bandPaddingInner, mark === "bar" ? barBandPaddingInner : rectBandPaddingInner);
    }
    return undefined;
}
function $e746d74d3b3da81d$export$c1647a4a4cfef8ab(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {
    if (paddingValue !== undefined) // If user has already manually specified "padding", no need to add default paddingOuter.
    return undefined;
    if (channel in (0, $fWfT0.POSITION_SCALE_CHANNEL_INDEX)) // Padding is only set for X and Y by default.
    // Basically it doesn't make sense to add padding for color and size.
    {
        if (scaleType === (0, $9rekY.ScaleType).BAND) {
            const { bandPaddingOuter: bandPaddingOuter } = scaleConfig;
            return (0, $7k4G6.getFirstDefined)(bandPaddingOuter, /* By default, paddingOuter is paddingInner / 2. The reason is that
              size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
              and we want the width/height to be integer by default.
              Note that step (by default) and cardinality are integers.) */ (0, $4xdf1.isSignalRef)(paddingInnerValue) ? {
                signal: `${paddingInnerValue.signal}/2`
            } : paddingInnerValue / 2);
        }
    }
    return undefined;
}
function $e746d74d3b3da81d$export$66c1ae025e96b4bc(scaleType, sort, channel, scaleConfig) {
    if (channel === "x" && scaleConfig.xReverse !== undefined) {
        if ((0, $9rekY.hasContinuousDomain)(scaleType) && sort === "descending") {
            if ((0, $4xdf1.isSignalRef)(scaleConfig.xReverse)) return {
                signal: `!${scaleConfig.xReverse.signal}`
            };
            else return !scaleConfig.xReverse;
        }
        return scaleConfig.xReverse;
    }
    if ((0, $9rekY.hasContinuousDomain)(scaleType) && sort === "descending") // For continuous domain scales, Vega does not support domain sort.
    // Thus, we reverse range instead if sort is descending
    return true;
    return undefined;
}
function $e746d74d3b3da81d$export$7f9972325ebfd559(channel, fieldDef, specifiedDomain, markDef, scaleType) {
    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.
    const hasCustomDomain = !!specifiedDomain && specifiedDomain !== "unaggregated";
    if (hasCustomDomain) {
        if ((0, $9rekY.hasContinuousDomain)(scaleType)) {
            if ((0, $2bi3s.isArray)(specifiedDomain)) {
                const first = specifiedDomain[0];
                const last = specifiedDomain[specifiedDomain.length - 1];
                if (first <= 0 && last >= 0) // if the domain includes zero, make zero remains true
                return true;
            }
            return false;
        }
    }
    // If there is no custom domain, return true only for the following cases:
    // 1) using quantitative field with size
    // While this can be either ratio or interval fields, our assumption is that
    // ratio are more common. However, if the scaleType is discretizing scale, we want to return
    // false so that range doesn't start at zero
    if (channel === "size" && fieldDef.type === "quantitative" && !(0, $9rekY.isContinuousToDiscrete)(scaleType)) return true;
    // 2) non-binned, quantitative x-scale or y-scale
    // (For binning, we should not include zero by default because binning are calculated without zero.)
    if (!((0, $2hAmp.isFieldDef)(fieldDef) && fieldDef.bin) && $7k4G6.contains([
        ...(0, $fWfT0.POSITION_SCALE_CHANNELS),
        ...(0, $fWfT0.POLAR_POSITION_SCALE_CHANNELS)
    ], channel)) {
        const { orient: orient, type: type } = markDef;
        if ((0, $7k4G6.contains)([
            "bar",
            "area",
            "line",
            "trail"
        ], type)) {
            if (orient === "horizontal" && channel === "y" || orient === "vertical" && channel === "x") return false;
        }
        return true;
    }
    return false;
}

});
parcelRegister("ep4WT", function(module, exports) {

$parcel$export(module.exports, "parseUnitScaleRange", () => $a7c73d3b99d2731f$export$e8b0d125ef186966);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iX9mu = parcelRequire("iX9mu");

var $iK8OT = parcelRequire("iK8OT");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $7Eu98 = parcelRequire("7Eu98");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $69ADH = parcelRequire("69ADH");

var $1BrRN = parcelRequire("1BrRN");

var $5T1O4 = parcelRequire("5T1O4");
const $a7c73d3b99d2731f$export$b32c080f442301a8 = [
    "range",
    "scheme"
];
function $a7c73d3b99d2731f$var$getSizeChannel(channel) {
    return channel === "x" ? "width" : channel === "y" ? "height" : undefined;
}
function $a7c73d3b99d2731f$export$e8b0d125ef186966(model) {
    const localScaleComponents = model.component.scales;
    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!
    for (const channel of (0, $fWfT0.SCALE_CHANNELS)){
        const localScaleCmpt = localScaleComponents[channel];
        if (!localScaleCmpt) continue;
        const rangeWithExplicit = $a7c73d3b99d2731f$export$d246d6a422edc943(channel, model);
        localScaleCmpt.setWithExplicit("range", rangeWithExplicit);
    }
}
function $a7c73d3b99d2731f$var$getBinStepSignal(model, channel) {
    const fieldDef = model.fieldDef(channel);
    if (fieldDef && fieldDef.bin && (0, $iR8lA.isBinning)(fieldDef.bin)) {
        const binSignal = (0, $69ADH.getBinSignalName)(model, fieldDef.field, fieldDef.bin);
        // TODO: extract this to be range step signal
        const sizeType = $a7c73d3b99d2731f$var$getSizeChannel(channel);
        const sizeSignal = model.getName(sizeType);
        return new (0, $1BrRN.SignalRefWrapper)(()=>{
            const updatedName = model.getSignalName(binSignal);
            const binCount = `(${updatedName}.stop - ${updatedName}.start) / ${updatedName}.step`;
            return `${model.getSignalName(sizeSignal)} / (${binCount})`;
        });
    }
    return undefined;
}
function $a7c73d3b99d2731f$export$d246d6a422edc943(channel, model) {
    const specifiedScale = model.specifiedScales[channel];
    const { size: size } = model;
    const mergedScaleCmpt = model.getScaleComponent(channel);
    const scaleType = mergedScaleCmpt.get("type");
    // Check if any of the range properties is specified.
    // If so, check if it is compatible and make sure that we only output one of the properties
    for (const property of $a7c73d3b99d2731f$export$b32c080f442301a8)if (specifiedScale[property] !== undefined) {
        const supportedByScaleType = (0, $9rekY.scaleTypeSupportProperty)(scaleType, property);
        const channelIncompatability = (0, $9rekY.channelScalePropertyIncompatability)(channel, property);
        if (!supportedByScaleType) $3XBQv.warn($bHNid.scalePropertyNotWorkWithScaleType(scaleType, property, channel));
        else if (channelIncompatability) // channel
        $3XBQv.warn(channelIncompatability);
        else switch(property){
            case "range":
                {
                    const range = specifiedScale.range;
                    if ((0, $2bi3s.isArray)(range)) {
                        if ((0, $fWfT0.isXorY)(channel)) return (0, $5T1O4.makeExplicit)(range.map((v)=>{
                            if (v === "width" || v === "height") {
                                // get signal for width/height
                                // Just like default range logic below, we use SignalRefWrapper to account for potential merges and renames.
                                const sizeSignal = model.getName(v);
                                const getSignalName = model.getSignalName.bind(model);
                                return (0, $1BrRN.SignalRefWrapper).fromName(getSignalName, sizeSignal);
                            }
                            return v;
                        }));
                    } else if ((0, $2bi3s.isObject)(range)) return (0, $5T1O4.makeExplicit)({
                        data: model.requestDataName((0, $iK8OT.DataSourceType).Main),
                        field: range.field,
                        sort: {
                            op: "min",
                            field: model.vgField(channel)
                        }
                    });
                    return (0, $5T1O4.makeExplicit)(range);
                }
            case "scheme":
                return (0, $5T1O4.makeExplicit)($a7c73d3b99d2731f$var$parseScheme(specifiedScale[property]));
        }
    }
    if (channel === (0, $fWfT0.X) || channel === (0, $fWfT0.Y)) {
        const sizeChannel = channel === (0, $fWfT0.X) ? "width" : "height";
        const sizeValue = size[sizeChannel];
        if ((0, $7Eu98.isStep)(sizeValue)) {
            if ((0, $9rekY.hasDiscreteDomain)(scaleType)) return (0, $5T1O4.makeExplicit)({
                step: sizeValue.step
            });
            else $3XBQv.warn($bHNid.stepDropped(sizeChannel));
        }
    }
    const { rangeMin: rangeMin, rangeMax: rangeMax } = specifiedScale;
    const d = $a7c73d3b99d2731f$var$defaultRange(channel, model);
    if ((rangeMin !== undefined || rangeMax !== undefined) && // it's ok to check just rangeMin's compatibility since rangeMin/rangeMax are the same
    (0, $9rekY.scaleTypeSupportProperty)(scaleType, "rangeMin") && (0, $2bi3s.isArray)(d) && d.length === 2) return (0, $5T1O4.makeExplicit)([
        rangeMin !== null && rangeMin !== void 0 ? rangeMin : d[0],
        rangeMax !== null && rangeMax !== void 0 ? rangeMax : d[1]
    ]);
    return (0, $5T1O4.makeImplicit)(d);
}
function $a7c73d3b99d2731f$var$parseScheme(scheme) {
    if ((0, $9rekY.isExtendedScheme)(scheme)) return Object.assign({
        scheme: scheme.name
    }, $7k4G6.omit(scheme, [
        "name"
    ]));
    return {
        scheme: scheme
    };
}
function $a7c73d3b99d2731f$var$defaultRange(channel, model) {
    const { size: size, config: config, mark: mark, encoding: encoding } = model;
    const getSignalName = model.getSignalName.bind(model);
    const { type: type } = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]);
    const mergedScaleCmpt = model.getScaleComponent(channel);
    const scaleType = mergedScaleCmpt.get("type");
    const { domain: domain, domainMid: domainMid } = model.specifiedScales[channel];
    switch(channel){
        case 0, $fWfT0.X:
        case 0, $fWfT0.Y:
            {
                // If there is no explicit width/height for discrete x/y scales
                if ($7k4G6.contains([
                    "point",
                    "band"
                ], scaleType)) {
                    if (channel === (0, $fWfT0.X) && !size.width) {
                        const w = (0, $iX9mu.getViewConfigDiscreteSize)(config.view, "width");
                        if ((0, $7Eu98.isStep)(w)) return w;
                    } else if (channel === (0, $fWfT0.Y) && !size.height) {
                        const h = (0, $iX9mu.getViewConfigDiscreteSize)(config.view, "height");
                        if ((0, $7Eu98.isStep)(h)) return h;
                    }
                }
                // If step is null, use zero to width or height.
                // Note that we use SignalRefWrapper to account for potential merges and renames.
                const sizeType = $a7c73d3b99d2731f$var$getSizeChannel(channel);
                const sizeSignal = model.getName(sizeType);
                if (channel === (0, $fWfT0.Y) && (0, $9rekY.hasContinuousDomain)(scaleType)) // For y continuous scale, we have to start from the height as the bottom part has the max value.
                return [
                    (0, $1BrRN.SignalRefWrapper).fromName(getSignalName, sizeSignal),
                    0
                ];
                else return [
                    0,
                    (0, $1BrRN.SignalRefWrapper).fromName(getSignalName, sizeSignal)
                ];
            }
        case 0, $fWfT0.SIZE:
            {
                // TODO: support custom rangeMin, rangeMax
                const zero = model.component.scales[channel].get("zero");
                const rangeMin = $a7c73d3b99d2731f$var$sizeRangeMin(mark, zero, config);
                const rangeMax = $a7c73d3b99d2731f$var$sizeRangeMax(mark, size, model, config);
                if ((0, $9rekY.isContinuousToDiscrete)(scaleType)) return $a7c73d3b99d2731f$export$86c43f341fc9b3e3(rangeMin, rangeMax, $a7c73d3b99d2731f$export$7f89685d61b7d7c0(scaleType, config, domain, channel));
                else return [
                    rangeMin,
                    rangeMax
                ];
            }
        case 0, $fWfT0.THETA:
            return [
                0,
                Math.PI * 2
            ];
        case 0, $fWfT0.ANGLE:
            // TODO: add config.scale.min/maxAngleDegree (for point and text) and config.scale.min/maxAngleRadian (for arc) once we add arc marks.
            // (It's weird to add just config.scale.min/maxAngleDegree for now)
            return [
                0,
                360
            ];
        case 0, $fWfT0.RADIUS:
            // max radius = half od min(width,height)
            return [
                0,
                new (0, $1BrRN.SignalRefWrapper)(()=>{
                    const w = model.getSignalName("width");
                    const h = model.getSignalName("height");
                    return `min(${w},${h})/2`;
                })
            ];
        case 0, $fWfT0.STROKEWIDTH:
            // TODO: support custom rangeMin, rangeMax
            return [
                config.scale.minStrokeWidth,
                config.scale.maxStrokeWidth
            ];
        case 0, $fWfT0.STROKEDASH:
            return [
                // TODO: add this to Vega's config.range?
                [
                    1,
                    0
                ],
                [
                    4,
                    2
                ],
                [
                    2,
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    2,
                    4,
                    2
                ]
            ];
        case 0, $fWfT0.SHAPE:
            return "symbol";
        case 0, $fWfT0.COLOR:
        case 0, $fWfT0.FILL:
        case 0, $fWfT0.STROKE:
            if (scaleType === "ordinal") // Only nominal data uses ordinal scale by default
            return type === "nominal" ? "category" : "ordinal";
            else {
                if (domainMid !== undefined) return "diverging";
                else return mark === "rect" || mark === "geoshape" ? "heatmap" : "ramp";
            }
        case 0, $fWfT0.OPACITY:
        case 0, $fWfT0.FILLOPACITY:
        case 0, $fWfT0.STROKEOPACITY:
            // TODO: support custom rangeMin, rangeMax
            return [
                config.scale.minOpacity,
                config.scale.maxOpacity
            ];
    }
    /* istanbul ignore next: should never reach here */ throw new Error(`Scale range undefined for channel ${channel}`);
}
function $a7c73d3b99d2731f$export$7f89685d61b7d7c0(scaleType, config, domain, channel) {
    switch(scaleType){
        case "quantile":
            return config.scale.quantileCount;
        case "quantize":
            return config.scale.quantizeCount;
        case "threshold":
            if (domain !== undefined && (0, $2bi3s.isArray)(domain)) return domain.length + 1;
            else {
                $3XBQv.warn($bHNid.domainRequiredForThresholdScale(channel));
                // default threshold boundaries for threshold scale since domain has cardinality of 2
                return 3;
            }
    }
}
function $a7c73d3b99d2731f$export$86c43f341fc9b3e3(rangeMin, rangeMax, cardinality) {
    // always return a signal since it's better to compute the sequence in Vega later
    const f = ()=>{
        const rMax = (0, $9ulW1.signalOrStringValue)(rangeMax);
        const rMin = (0, $9ulW1.signalOrStringValue)(rangeMin);
        const step = `(${rMax} - ${rMin}) / (${cardinality} - 1)`;
        return `sequence(${rMin}, ${rMax} + ${step}, ${step})`;
    };
    if ((0, $4xdf1.isSignalRef)(rangeMax)) return new (0, $1BrRN.SignalRefWrapper)(f);
    else return {
        signal: f()
    };
}
function $a7c73d3b99d2731f$var$sizeRangeMin(mark, zero, config) {
    if (zero) {
        if ((0, $4xdf1.isSignalRef)(zero)) return {
            signal: `${zero.signal} ? 0 : ${$a7c73d3b99d2731f$var$sizeRangeMin(mark, false, config)}`
        };
        else return 0;
    }
    switch(mark){
        case "bar":
        case "tick":
            return config.scale.minBandSize;
        case "line":
        case "trail":
        case "rule":
            return config.scale.minStrokeWidth;
        case "text":
            return config.scale.minFontSize;
        case "point":
        case "square":
        case "circle":
            return config.scale.minSize;
    }
    /* istanbul ignore next: should never reach here */ // sizeRangeMin not implemented for the mark
    throw new Error($bHNid.incompatibleChannel("size", mark));
}
const $a7c73d3b99d2731f$export$38df8bc45aaa1b55 = 0.95;
function $a7c73d3b99d2731f$var$sizeRangeMax(mark, size, model, config) {
    const xyStepSignals = {
        x: $a7c73d3b99d2731f$var$getBinStepSignal(model, "x"),
        y: $a7c73d3b99d2731f$var$getBinStepSignal(model, "y")
    };
    switch(mark){
        case "bar":
        case "tick":
            {
                if (config.scale.maxBandSize !== undefined) return config.scale.maxBandSize;
                const min = $a7c73d3b99d2731f$var$minXYStep(size, xyStepSignals, config.view);
                if ((0, $2bi3s.isNumber)(min)) return min - 1;
                else return new (0, $1BrRN.SignalRefWrapper)(()=>`${min.signal} - 1`);
            }
        case "line":
        case "trail":
        case "rule":
            return config.scale.maxStrokeWidth;
        case "text":
            return config.scale.maxFontSize;
        case "point":
        case "square":
        case "circle":
            {
                if (config.scale.maxSize) return config.scale.maxSize;
                const pointStep = $a7c73d3b99d2731f$var$minXYStep(size, xyStepSignals, config.view);
                if ((0, $2bi3s.isNumber)(pointStep)) return Math.pow($a7c73d3b99d2731f$export$38df8bc45aaa1b55 * pointStep, 2);
                else return new (0, $1BrRN.SignalRefWrapper)(()=>`pow(${$a7c73d3b99d2731f$export$38df8bc45aaa1b55} * ${pointStep.signal}, 2)`);
            }
    }
    /* istanbul ignore next: should never reach here */ // sizeRangeMax not implemented for the mark
    throw new Error($bHNid.incompatibleChannel("size", mark));
}
/**
 * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.
 */ function $a7c73d3b99d2731f$var$minXYStep(size, xyStepSignals, viewConfig) {
    const widthStep = (0, $7Eu98.isStep)(size.width) ? size.width.step : (0, $iX9mu.getViewConfigDiscreteStep)(viewConfig, "width");
    const heightStep = (0, $7Eu98.isStep)(size.height) ? size.height.step : (0, $iX9mu.getViewConfigDiscreteStep)(viewConfig, "height");
    if (xyStepSignals.x || xyStepSignals.y) return new (0, $1BrRN.SignalRefWrapper)(()=>{
        const exprs = [
            xyStepSignals.x ? xyStepSignals.x.signal : widthStep,
            xyStepSignals.y ? xyStepSignals.y.signal : heightStep
        ];
        return `min(${exprs.join(", ")})`;
    });
    return Math.min(widthStep, heightStep);
}

});


parcelRegister("lBkvl", function(module, exports) {

$parcel$export(module.exports, "scaleType", () => $fb9cf5737abb5475$export$360f83db950721c5);

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $aMeqD = parcelRequire("aMeqD");

var $7k4G6 = parcelRequire("7k4G6");

var $fWfT0 = parcelRequire("fWfT0");
function $fb9cf5737abb5475$export$360f83db950721c5(specifiedScale, channel, fieldDef, mark) {
    const defaultScaleType = $fb9cf5737abb5475$var$defaultType(channel, fieldDef, mark);
    const { type: type } = specifiedScale;
    if (!(0, $fWfT0.isScaleChannel)(channel)) // There is no scale for these channels
    return null;
    if (type !== undefined) {
        // Check if explicitly specified scale type is supported by the channel
        if (!(0, $9rekY.channelSupportScaleType)(channel, type)) {
            $3XBQv.warn($bHNid.scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));
            return defaultScaleType;
        }
        // Check if explicitly specified scale type is supported by the data type
        if ((0, $2hAmp.isFieldDef)(fieldDef) && !(0, $9rekY.scaleTypeSupportDataType)(type, fieldDef.type)) {
            $3XBQv.warn($bHNid.scaleTypeNotWorkWithFieldDef(type, defaultScaleType));
            return defaultScaleType;
        }
        return type;
    }
    return defaultScaleType;
}
/**
 * Determine appropriate default scale type.
 */ // NOTE: Voyager uses this method.
function $fb9cf5737abb5475$var$defaultType(channel, fieldDef, mark) {
    var _a;
    switch(fieldDef.type){
        case "nominal":
        case "ordinal":
            if ((0, $fWfT0.isColorChannel)(channel) || (0, $fWfT0.rangeType)(channel) === "discrete") {
                if (channel === "shape" && fieldDef.type === "ordinal") $3XBQv.warn($bHNid.discreteChannelCannotEncode(channel, "ordinal"));
                return "ordinal";
            }
            if (channel in (0, $fWfT0.POSITION_SCALE_CHANNEL_INDEX)) {
                if ($7k4G6.contains([
                    "rect",
                    "bar",
                    "image",
                    "rule"
                ], mark)) // The rect/bar mark should fit into a band.
                // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429
                return "band";
            } else if (mark === "arc" && channel in (0, $fWfT0.POLAR_POSITION_SCALE_CHANNEL_INDEX)) return "band";
            if (fieldDef.band !== undefined || (0, $2hAmp.isPositionFieldOrDatumDef)(fieldDef) && ((_a = fieldDef.axis) === null || _a === void 0 ? void 0 : _a.tickBand)) return "band";
            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.
            return "point";
        case "temporal":
            if ((0, $fWfT0.isColorChannel)(channel)) return "time";
            else if ((0, $fWfT0.rangeType)(channel) === "discrete") {
                $3XBQv.warn($bHNid.discreteChannelCannotEncode(channel, "temporal"));
                // TODO: consider using quantize (equivalent to binning) once we have it
                return "ordinal";
            } else if ((0, $2hAmp.isFieldDef)(fieldDef) && fieldDef.timeUnit && (0, $aMeqD.normalizeTimeUnit)(fieldDef.timeUnit).utc) return "utc";
            return "time";
        case "quantitative":
            if ((0, $fWfT0.isColorChannel)(channel)) {
                if ((0, $2hAmp.isFieldDef)(fieldDef) && (0, $iR8lA.isBinning)(fieldDef.bin)) return "bin-ordinal";
                return "linear";
            } else if ((0, $fWfT0.rangeType)(channel) === "discrete") {
                $3XBQv.warn($bHNid.discreteChannelCannotEncode(channel, "quantitative"));
                // TODO: consider using quantize (equivalent to binning) once we have it
                return "ordinal";
            }
            return "linear";
        case "geojson":
            return undefined;
    }
    /* istanbul ignore next: should never reach this */ throw new Error($bHNid.invalidFieldType(fieldDef.type));
}

});



parcelRegister("2fEVC", function(module, exports) {

$parcel$export(module.exports, "DensityTransformNode", () => $1a3cbafc7bdc8212$export$3cb405c3a8889b17);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
var $1a3cbafc7bdc8212$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $1a3cbafc7bdc8212$export$3cb405c3a8889b17 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        var _a, _b, _c;
        super(parent);
        this.transform = transform;
        this.transform = (0, $7k4G6.duplicate)(transform); // duplicate to prevent side effects
        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [
            undefined,
            undefined
        ];
        this.transform.as = [
            (_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : "value",
            (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : "density"
        ];
    }
    clone() {
        return new $1a3cbafc7bdc8212$export$3cb405c3a8889b17(null, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        var _a;
        return new Set([
            this.transform.density,
            ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []
        ]);
    }
    producedFields() {
        return new Set(this.transform.as);
    }
    hash() {
        return `DensityTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const _a = this.transform, { density: density } = _a, rest = $1a3cbafc7bdc8212$var$__rest(_a, [
            "density"
        ]);
        const result = Object.assign({
            type: "kde",
            field: density
        }, rest);
        return result;
    }
}

});

parcelRegister("12cAY", function(module, exports) {

$parcel$export(module.exports, "FilterInvalidNode", () => $0c0fbf89ed75b248$export$39b5ce918b59004b);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9mRLv = parcelRequire("9mRLv");

var $9rekY = parcelRequire("9rekY");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");

var $71IWl = parcelRequire("71IWl");
class $0c0fbf89ed75b248$export$39b5ce918b59004b extends (0, $71IWl.DataFlowNode) {
    constructor(parent, filter){
        super(parent);
        this.filter = filter;
    }
    clone() {
        return new $0c0fbf89ed75b248$export$39b5ce918b59004b(null, Object.assign({}, this.filter));
    }
    static make(parent, model) {
        const { config: config, mark: mark, markDef: markDef } = model;
        const invalid = (0, $9ulW1.getMarkPropOrConfig)("invalid", markDef, config);
        if (invalid !== "filter") return null;
        const filter = model.reduceFieldDef((aggregator, fieldDef, channel)=>{
            const scaleComponent = (0, $fWfT0.isScaleChannel)(channel) && model.getScaleComponent(channel);
            if (scaleComponent) {
                const scaleType = scaleComponent.get("type");
                // While discrete domain scales can handle invalid values, continuous scales can't.
                // Thus, for non-path marks, we have to filter null for scales with continuous domains.
                // (For path marks, we will use "defined" property and skip these values instead.)
                if ((0, $9rekY.hasContinuousDomain)(scaleType) && fieldDef.aggregate !== "count" && !(0, $9mRLv.isPathMark)(mark)) aggregator[fieldDef.field] = fieldDef; // we know that the fieldDef is a typed field def
            }
            return aggregator;
        }, {});
        if (!(0, $7k4G6.keys)(filter).length) return null;
        return new $0c0fbf89ed75b248$export$39b5ce918b59004b(parent, filter);
    }
    dependentFields() {
        return new Set((0, $7k4G6.keys)(this.filter));
    }
    producedFields() {
        return new Set(); // filter does not produce any new fields
    }
    hash() {
        return `FilterInvalid ${(0, $7k4G6.hash)(this.filter)}`;
    }
    /**
     * Create the VgTransforms for each of the filtered fields.
     */ assemble() {
        const filters = (0, $7k4G6.keys)(this.filter).reduce((vegaFilters, field)=>{
            const fieldDef = this.filter[field];
            const ref = (0, $2hAmp.vgField)(fieldDef, {
                expr: "datum"
            });
            if (fieldDef !== null) {
                if (fieldDef.type === "temporal") vegaFilters.push(`(isDate(${ref}) || (isValid(${ref}) && isFinite(+${ref})))`);
                else if (fieldDef.type === "quantitative") {
                    vegaFilters.push(`isValid(${ref})`);
                    vegaFilters.push(`isFinite(+${ref})`);
                }
            }
            return vegaFilters;
        }, []);
        return filters.length > 0 ? {
            type: "filter",
            expr: filters.join(" && ")
        } : null;
    }
}

});

parcelRegister("8hWdk", function(module, exports) {

$parcel$export(module.exports, "FlattenTransformNode", () => $608d11599d699b34$export$f9bdec9babac23de);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $608d11599d699b34$export$f9bdec9babac23de extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        super(parent);
        this.transform = transform;
        this.transform = (0, $7k4G6.duplicate)(transform); // duplicate to prevent side effects
        const { flatten: flatten, as: as = [] } = this.transform;
        this.transform.as = flatten.map((f, i)=>{
            var _a;
            return (_a = as[i]) !== null && _a !== void 0 ? _a : f;
        });
    }
    clone() {
        return new $608d11599d699b34$export$f9bdec9babac23de(this.parent, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        return new Set(this.transform.flatten);
    }
    producedFields() {
        return new Set(this.transform.as);
    }
    hash() {
        return `FlattenTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const { flatten: fields, as: as } = this.transform;
        const result = {
            type: "flatten",
            fields: fields,
            as: as
        };
        return result;
    }
}

});

parcelRegister("dPoAS", function(module, exports) {

$parcel$export(module.exports, "FoldTransformNode", () => $a1131d9671d31d43$export$ba246403e898e147);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $a1131d9671d31d43$export$ba246403e898e147 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        var _a, _b, _c;
        super(parent);
        this.transform = transform;
        this.transform = (0, $7k4G6.duplicate)(transform); // duplicate to prevent side effects
        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [
            undefined,
            undefined
        ];
        this.transform.as = [
            (_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : "key",
            (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : "value"
        ];
    }
    clone() {
        return new $a1131d9671d31d43$export$ba246403e898e147(null, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        return new Set(this.transform.fold);
    }
    producedFields() {
        return new Set(this.transform.as);
    }
    hash() {
        return `FoldTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const { fold: fold, as: as } = this.transform;
        const result = {
            type: "fold",
            fields: fold,
            as: as
        };
        return result;
    }
}

});

parcelRegister("fgoUf", function(module, exports) {

$parcel$export(module.exports, "GeoJSONNode", () => $b1cbab7d156bfb61$export$4032ae55ae80eb04);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $b1cbab7d156bfb61$export$4032ae55ae80eb04 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, fields, geojson, signal){
        super(parent);
        this.fields = fields;
        this.geojson = geojson;
        this.signal = signal;
    }
    clone() {
        return new $b1cbab7d156bfb61$export$4032ae55ae80eb04(null, (0, $7k4G6.duplicate)(this.fields), this.geojson, this.signal);
    }
    static parseAll(parent, model) {
        if (model.component.projection && !model.component.projection.isFit) return parent;
        let geoJsonCounter = 0;
        for (const coordinates of [
            [
                (0, $fWfT0.LONGITUDE),
                (0, $fWfT0.LATITUDE)
            ],
            [
                (0, $fWfT0.LONGITUDE2),
                (0, $fWfT0.LATITUDE2)
            ]
        ]){
            const pair = coordinates.map((channel)=>{
                const def = (0, $2hAmp.getFieldOrDatumDef)(model.encoding[channel]);
                return (0, $2hAmp.isFieldDef)(def) ? def.field : (0, $2hAmp.isDatumDef)(def) ? {
                    expr: `${def.datum}`
                } : (0, $2hAmp.isValueDef)(def) ? {
                    expr: `${def["value"]}`
                } : undefined;
            });
            if (pair[0] || pair[1]) parent = new $b1cbab7d156bfb61$export$4032ae55ae80eb04(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));
        }
        if (model.channelHasField((0, $fWfT0.SHAPE))) {
            const fieldDef = model.typedFieldDef((0, $fWfT0.SHAPE));
            if (fieldDef.type === (0, $9LX7L.GEOJSON)) parent = new $b1cbab7d156bfb61$export$4032ae55ae80eb04(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));
        }
        return parent;
    }
    dependentFields() {
        var _a;
        const fields = ((_a = this.fields) !== null && _a !== void 0 ? _a : []).filter((0, $2bi3s.isString));
        return new Set([
            ...this.geojson ? [
                this.geojson
            ] : [],
            ...fields
        ]);
    }
    producedFields() {
        return new Set();
    }
    hash() {
        return `GeoJSON ${this.geojson} ${this.signal} ${(0, $7k4G6.hash)(this.fields)}`;
    }
    assemble() {
        return Object.assign(Object.assign(Object.assign({
            type: "geojson"
        }, this.fields ? {
            fields: this.fields
        } : {}), this.geojson ? {
            geojson: this.geojson
        } : {}), {
            signal: this.signal
        });
    }
}

});

parcelRegister("jzV9L", function(module, exports) {

$parcel$export(module.exports, "GeoPointNode", () => $e40d9f45a27f4a52$export$859352597da5181c);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $e40d9f45a27f4a52$export$859352597da5181c extends (0, $71IWl.DataFlowNode) {
    constructor(parent, projection, fields, as){
        super(parent);
        this.projection = projection;
        this.fields = fields;
        this.as = as;
    }
    clone() {
        return new $e40d9f45a27f4a52$export$859352597da5181c(null, this.projection, (0, $7k4G6.duplicate)(this.fields), (0, $7k4G6.duplicate)(this.as));
    }
    static parseAll(parent, model) {
        if (!model.projectionName()) return parent;
        for (const coordinates of [
            [
                (0, $fWfT0.LONGITUDE),
                (0, $fWfT0.LATITUDE)
            ],
            [
                (0, $fWfT0.LONGITUDE2),
                (0, $fWfT0.LATITUDE2)
            ]
        ]){
            const pair = coordinates.map((channel)=>{
                const def = (0, $2hAmp.getFieldOrDatumDef)(model.encoding[channel]);
                return (0, $2hAmp.isFieldDef)(def) ? def.field : (0, $2hAmp.isDatumDef)(def) ? {
                    expr: `${def.datum}`
                } : (0, $2hAmp.isValueDef)(def) ? {
                    expr: `${def["value"]}`
                } : undefined;
            });
            const suffix = coordinates[0] === (0, $fWfT0.LONGITUDE2) ? "2" : "";
            if (pair[0] || pair[1]) parent = new $e40d9f45a27f4a52$export$859352597da5181c(parent, model.projectionName(), pair, [
                model.getName("x" + suffix),
                model.getName("y" + suffix)
            ]);
        }
        return parent;
    }
    dependentFields() {
        return new Set(this.fields.filter((0, $2bi3s.isString)));
    }
    producedFields() {
        return new Set(this.as);
    }
    hash() {
        return `Geopoint ${this.projection} ${(0, $7k4G6.hash)(this.fields)} ${(0, $7k4G6.hash)(this.as)}`;
    }
    assemble() {
        return {
            type: "geopoint",
            projection: this.projection,
            fields: this.fields,
            as: this.as
        };
    }
}

});

parcelRegister("hHNlB", function(module, exports) {

$parcel$export(module.exports, "ImputeNode", () => $ce3cbb342b243db2$export$84771f3ba4011328);

var $2hAmp = parcelRequire("2hAmp");

var $8eU8A = parcelRequire("8eU8A");

var $20qnG = parcelRequire("20qnG");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $ce3cbb342b243db2$export$84771f3ba4011328 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        super(parent);
        this.transform = transform;
    }
    clone() {
        return new $ce3cbb342b243db2$export$84771f3ba4011328(null, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        var _a;
        return new Set([
            this.transform.impute,
            this.transform.key,
            ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []
        ]);
    }
    producedFields() {
        return new Set([
            this.transform.impute
        ]);
    }
    processSequence(keyvals) {
        const { start: start = 0, stop: stop, step: step } = keyvals;
        const result = [
            start,
            stop,
            ...step ? [
                step
            ] : []
        ].join(",");
        return {
            signal: `sequence(${result})`
        };
    }
    static makeFromTransform(parent, imputeTransform) {
        return new $ce3cbb342b243db2$export$84771f3ba4011328(parent, imputeTransform);
    }
    static makeFromEncoding(parent, model) {
        const encoding = model.encoding;
        const xDef = encoding.x;
        const yDef = encoding.y;
        if ((0, $2hAmp.isFieldDef)(xDef) && (0, $2hAmp.isFieldDef)(yDef)) {
            const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;
            if (imputedChannel === undefined) return undefined;
            const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;
            const { method: method, value: value, frame: frame, keyvals: keyvals } = imputedChannel.impute;
            const groupbyFields = (0, $8eU8A.pathGroupingFields)(model.mark, encoding);
            return new $ce3cbb342b243db2$export$84771f3ba4011328(parent, Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
                impute: imputedChannel.field,
                key: keyChannel.field
            }, method ? {
                method: method
            } : {}), value !== undefined ? {
                value: value
            } : {}), frame ? {
                frame: frame
            } : {}), keyvals !== undefined ? {
                keyvals: keyvals
            } : {}), groupbyFields.length ? {
                groupby: groupbyFields
            } : {}));
        }
        return null;
    }
    hash() {
        return `Impute ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const { impute: impute, key: key, keyvals: keyvals, method: method, groupby: groupby, value: value, frame: frame = [
            null,
            null
        ] } = this.transform;
        const imputeTransform = Object.assign(Object.assign(Object.assign(Object.assign({
            type: "impute",
            field: impute,
            key: key
        }, keyvals ? {
            keyvals: (0, $20qnG.isImputeSequence)(keyvals) ? this.processSequence(keyvals) : keyvals
        } : {}), {
            method: "value"
        }), groupby ? {
            groupby: groupby
        } : {}), {
            value: !method || method === "value" ? value : null
        });
        if (method && method !== "value") {
            const deriveNewField = Object.assign({
                type: "window",
                as: [
                    `imputed_${impute}_value`
                ],
                ops: [
                    method
                ],
                fields: [
                    impute
                ],
                frame: frame,
                ignorePeers: false
            }, groupby ? {
                groupby: groupby
            } : {});
            const replaceOriginal = {
                type: "formula",
                expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,
                as: impute
            };
            return [
                imputeTransform,
                deriveNewField,
                replaceOriginal
            ];
        } else return [
            imputeTransform
        ];
    }
}

});

parcelRegister("4PfXh", function(module, exports) {

$parcel$export(module.exports, "makeJoinAggregateFromFacet", () => $38384d32cd9b1dc7$export$d799401b3bce81be);

var $2hAmp = parcelRequire("2hAmp");

var $Xb2We = parcelRequire("Xb2We");

var $hJLz9 = parcelRequire("hJLz9");

var $hjAkP = parcelRequire("hjAkP");
function $38384d32cd9b1dc7$export$d799401b3bce81be(parent, facet) {
    const { row: row, column: column } = facet;
    if (row && column) {
        let newParent = null;
        // only need to make one for crossed facet
        for (const fieldDef of [
            row,
            column
        ])if ((0, $Xb2We.isSortField)(fieldDef.sort)) {
            const { field: field, op: op = (0, $Xb2We.DEFAULT_SORT_OP) } = fieldDef.sort;
            parent = newParent = new (0, $hjAkP.JoinAggregateTransformNode)(parent, {
                joinaggregate: [
                    {
                        op: op,
                        field: field,
                        as: (0, $hJLz9.facetSortFieldName)(fieldDef, fieldDef.sort, {
                            forAs: true
                        })
                    }
                ],
                groupby: [
                    (0, $2hAmp.vgField)(fieldDef)
                ]
            });
        }
        return newParent;
    }
    return null;
}

});
parcelRegister("hJLz9", function(module, exports) {

$parcel$export(module.exports, "facetSortFieldName", () => $ce9b8944bb9bbc96$export$15b197e524747083);
$parcel$export(module.exports, "FacetModel", () => $ce9b8944bb9bbc96$export$cc1689471fb665a3);

var $2bi3s = parcelRequire("2bi3s");

var $iR8lA = parcelRequire("iR8lA");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $5C8w7 = parcelRequire("5C8w7");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9rekY = parcelRequire("9rekY");

var $Xb2We = parcelRequire("Xb2We");

var $1mvM3 = parcelRequire("1mvM3");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $7ugB1 = parcelRequire("7ugB1");

var $iUJlm = parcelRequire("iUJlm");

var $8IEdE = parcelRequire("8IEdE");

var $iRvxE = parcelRequire("iRvxE");

var $49Viv = parcelRequire("49Viv");

var $Ejdtd = parcelRequire("Ejdtd");

var $hkDCc = parcelRequire("hkDCc");

var $awrVV = parcelRequire("awrVV");

var $6aA2s = parcelRequire("6aA2s");

var $jkJyY = parcelRequire("jkJyY");

var $91e8H = parcelRequire("91e8H");

var $ls1My = parcelRequire("ls1My");
var $ce9b8944bb9bbc96$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function $ce9b8944bb9bbc96$export$15b197e524747083(fieldDef, sort, opt) {
    return (0, $2hAmp.vgField)(sort, Object.assign({
        suffix: `by_${(0, $2hAmp.vgField)(fieldDef)}`
    }, opt !== null && opt !== void 0 ? opt : {}));
}
class $ce9b8944bb9bbc96$export$cc1689471fb665a3 extends (0, $jkJyY.ModelWithField) {
    constructor(spec, parent, parentGivenName, config){
        super(spec, "facet", parent, parentGivenName, config, spec.resolve);
        this.child = (0, $7ugB1.buildModel)(spec.spec, this, this.getName("child"), undefined, config);
        this.children = [
            this.child
        ];
        this.facet = this.initFacet(spec.facet);
    }
    initFacet(facet) {
        // clone to prevent side effect to the original spec
        if (!(0, $1mvM3.isFacetMapping)(facet)) return {
            facet: this.initFacetFieldDef(facet, "facet")
        };
        const channels = (0, $7k4G6.keys)(facet);
        const normalizedFacet = {};
        for (const channel of channels){
            if (!(0, $7k4G6.contains)([
                (0, $fWfT0.ROW),
                (0, $fWfT0.COLUMN)
            ], channel)) {
                // Drop unsupported channel
                $3XBQv.warn($bHNid.incompatibleChannel(channel, "facet"));
                break;
            }
            const fieldDef = facet[channel];
            if (fieldDef.field === undefined) {
                $3XBQv.warn($bHNid.emptyFieldDef(fieldDef, channel));
                break;
            }
            normalizedFacet[channel] = this.initFacetFieldDef(fieldDef, channel);
        }
        return normalizedFacet;
    }
    initFacetFieldDef(fieldDef, channel) {
        const { header: header } = fieldDef, rest = $ce9b8944bb9bbc96$var$__rest(fieldDef, [
            "header"
        ]);
        // Cast because we call initFieldDef, which assumes general FieldDef.
        // However, FacetFieldDef is a bit more constrained than the general FieldDef
        const facetFieldDef = (0, $2hAmp.initFieldDef)(rest, channel);
        if (header) facetFieldDef.header = (0, $5C8w7.replaceExprRefInIndex)(header);
        return facetFieldDef;
    }
    channelHasField(channel) {
        return !!this.facet[channel];
    }
    fieldDef(channel) {
        return this.facet[channel];
    }
    parseData() {
        this.component.data = (0, $iRvxE.parseData)(this);
        this.child.parseData();
    }
    parseLayoutSize() {
        (0, $6aA2s.parseChildrenLayoutSize)(this);
    }
    parseSelections() {
        // As a facet has a single child, the selection components are the same.
        // The child maintains its selections to assemble signals, which remain
        // within its unit.
        this.child.parseSelections();
        this.component.selection = this.child.component.selection;
    }
    parseMarkGroup() {
        this.child.parseMarkGroup();
    }
    parseAxesAndHeaders() {
        this.child.parseAxesAndHeaders();
        (0, $awrVV.parseFacetHeaders)(this);
    }
    assembleSelectionTopLevelSignals(signals) {
        return this.child.assembleSelectionTopLevelSignals(signals);
    }
    assembleSignals() {
        this.child.assembleSignals();
        return [];
    }
    assembleSelectionData(data) {
        return this.child.assembleSelectionData(data);
    }
    getHeaderLayoutMixins() {
        var _a, _b, _c;
        const layoutMixins = {};
        for (const channel of (0, $fWfT0.FACET_CHANNELS))for (const headerType of (0, $hkDCc.HEADER_TYPES)){
            const layoutHeaderComponent = this.component.layoutHeaders[channel];
            const headerComponent = layoutHeaderComponent[headerType];
            const { facetFieldDef: facetFieldDef } = layoutHeaderComponent;
            if (facetFieldDef) {
                const titleOrient = (0, $Ejdtd.getHeaderProperty)("titleOrient", facetFieldDef.header, this.config, channel);
                if ((0, $7k4G6.contains)([
                    "right",
                    "bottom"
                ], titleOrient)) {
                    const headerChannel = (0, $Ejdtd.getHeaderChannel)(channel, titleOrient);
                    layoutMixins.titleAnchor = (_a = layoutMixins.titleAnchor) !== null && _a !== void 0 ? _a : {};
                    layoutMixins.titleAnchor[headerChannel] = "end";
                }
            }
            if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent[0]) {
                // set header/footerBand
                const sizeType = channel === "row" ? "height" : "width";
                const bandType = headerType === "header" ? "headerBand" : "footerBand";
                if (channel !== "facet" && !this.child.component.layoutSize.get(sizeType)) {
                    // If facet child does not have size signal, then apply headerBand
                    layoutMixins[bandType] = (_b = layoutMixins[bandType]) !== null && _b !== void 0 ? _b : {};
                    layoutMixins[bandType][channel] = 0.5;
                }
                if (layoutHeaderComponent.title) {
                    layoutMixins.offset = (_c = layoutMixins.offset) !== null && _c !== void 0 ? _c : {};
                    layoutMixins.offset[channel === "row" ? "rowTitle" : "columnTitle"] = 10;
                }
            }
        }
        return layoutMixins;
    }
    assembleDefaultLayout() {
        const { column: column, row: row } = this.facet;
        const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;
        let align = "all";
        // Do not align the cells if the scale corresponding to the direction is indepent.
        // We always align when we facet into both row and column.
        if (!row && this.component.resolve.scale.x === "independent") align = "none";
        else if (!column && this.component.resolve.scale.y === "independent") align = "none";
        return Object.assign(Object.assign(Object.assign({}, this.getHeaderLayoutMixins()), columns ? {
            columns: columns
        } : {}), {
            bounds: "full",
            align: align
        });
    }
    assembleLayoutSignals() {
        // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.
        return this.child.assembleLayoutSignals();
    }
    columnDistinctSignal() {
        if (this.parent && this.parent instanceof $ce9b8944bb9bbc96$export$cc1689471fb665a3) // For nested facet, we will add columns to group mark instead
        // See discussion in https://github.com/vega/vega/issues/952
        // and https://github.com/vega/vega-view/releases/tag/v1.2.6
        return undefined;
        else {
            // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.
            const facetLayoutDataName = this.getName("column_domain");
            return {
                signal: `length(data('${facetLayoutDataName}'))`
            };
        }
    }
    assembleGroup(signals) {
        if (this.parent && this.parent instanceof $ce9b8944bb9bbc96$export$cc1689471fb665a3) // Provide number of columns for layout.
        // See discussion in https://github.com/vega/vega/issues/952
        // and https://github.com/vega/vega-view/releases/tag/v1.2.6
        return Object.assign(Object.assign({}, this.channelHasField("column") ? {
            encode: {
                update: {
                    // TODO(https://github.com/vega/vega-lite/issues/2759):
                    // Correct the signal for facet of concat of facet_column
                    columns: {
                        field: (0, $2hAmp.vgField)(this.facet.column, {
                            prefix: "distinct"
                        })
                    }
                }
            }
        } : {}), super.assembleGroup(signals));
        return super.assembleGroup(signals);
    }
    /**
     * Aggregate cardinality for calculating size
     */ getCardinalityAggregateForChild() {
        const fields = [];
        const ops = [];
        const as = [];
        if (this.child instanceof $ce9b8944bb9bbc96$export$cc1689471fb665a3) {
            if (this.child.channelHasField("column")) {
                const field = (0, $2hAmp.vgField)(this.child.facet.column);
                fields.push(field);
                ops.push("distinct");
                as.push(`distinct_${field}`);
            }
        } else for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS)){
            const childScaleComponent = this.child.component.scales[channel];
            if (childScaleComponent && !childScaleComponent.merged) {
                const type = childScaleComponent.get("type");
                const range = childScaleComponent.get("range");
                if ((0, $9rekY.hasDiscreteDomain)(type) && (0, $4xdf1.isVgRangeStep)(range)) {
                    const domain = (0, $91e8H.assembleDomain)(this.child, channel);
                    const field = (0, $91e8H.getFieldFromDomain)(domain);
                    if (field) {
                        fields.push(field);
                        ops.push("distinct");
                        as.push(`distinct_${field}`);
                    } else $3XBQv.warn($bHNid.unknownField(channel));
                }
            }
        }
        return {
            fields: fields,
            ops: ops,
            as: as
        };
    }
    assembleFacet() {
        const { name: name, data: data } = this.component.data.facetRoot;
        const { row: row, column: column } = this.facet;
        const { fields: fields, ops: ops, as: as } = this.getCardinalityAggregateForChild();
        const groupby = [];
        for (const channel of (0, $fWfT0.FACET_CHANNELS)){
            const fieldDef = this.facet[channel];
            if (fieldDef) {
                groupby.push((0, $2hAmp.vgField)(fieldDef));
                const { bin: bin, sort: sort } = fieldDef;
                if ((0, $iR8lA.isBinning)(bin)) groupby.push((0, $2hAmp.vgField)(fieldDef, {
                    binSuffix: "end"
                }));
                if ((0, $Xb2We.isSortField)(sort)) {
                    const { field: field, op: op = (0, $Xb2We.DEFAULT_SORT_OP) } = sort;
                    const outputName = $ce9b8944bb9bbc96$export$15b197e524747083(fieldDef, sort);
                    if (row && column) {
                        // For crossed facet, use pre-calculate field as it requires a different groupby
                        // For each calculated field, apply max and assign them to the same name as
                        // all values of the same group should be the same anyway.
                        fields.push(outputName);
                        ops.push("max");
                        as.push(outputName);
                    } else {
                        fields.push(field);
                        ops.push(op);
                        as.push(outputName);
                    }
                } else if ((0, $2bi3s.isArray)(sort)) {
                    const outputName = (0, $8IEdE.sortArrayIndexField)(fieldDef, channel);
                    fields.push(outputName);
                    ops.push("max");
                    as.push(outputName);
                }
            }
        }
        const cross = !!row && !!column;
        return Object.assign({
            name: name,
            data: data,
            groupby: groupby
        }, cross || fields.length > 0 ? {
            aggregate: Object.assign(Object.assign({}, cross ? {
                cross: cross
            } : {}), fields.length ? {
                fields: fields,
                ops: ops,
                as: as
            } : {})
        } : {});
    }
    facetSortFields(channel) {
        const { facet: facet } = this;
        const fieldDef = facet[channel];
        if (fieldDef) {
            if ((0, $Xb2We.isSortField)(fieldDef.sort)) return [
                $ce9b8944bb9bbc96$export$15b197e524747083(fieldDef, fieldDef.sort, {
                    expr: "datum"
                })
            ];
            else if ((0, $2bi3s.isArray)(fieldDef.sort)) return [
                (0, $8IEdE.sortArrayIndexField)(fieldDef, channel, {
                    expr: "datum"
                })
            ];
            return [
                (0, $2hAmp.vgField)(fieldDef, {
                    expr: "datum"
                })
            ];
        }
        return [];
    }
    facetSortOrder(channel) {
        const { facet: facet } = this;
        const fieldDef = facet[channel];
        if (fieldDef) {
            const { sort: sort } = fieldDef;
            const order = ((0, $Xb2We.isSortField)(sort) ? sort.order : !(0, $2bi3s.isArray)(sort) && sort) || "ascending";
            return [
                order
            ];
        }
        return [];
    }
    assembleLabelTitle() {
        var _a;
        const { facet: facet, config: config } = this;
        if (facet.facet) // Facet always uses title to display labels
        return (0, $49Viv.assembleLabelTitle)(facet.facet, "facet", config);
        const ORTHOGONAL_ORIENT = {
            row: [
                "top",
                "bottom"
            ],
            column: [
                "left",
                "right"
            ]
        };
        for (const channel of (0, $hkDCc.HEADER_CHANNELS))if (facet[channel]) {
            const labelOrient = (0, $Ejdtd.getHeaderProperty)("labelOrient", (_a = facet[channel]) === null || _a === void 0 ? void 0 : _a.header, config, channel);
            if ((0, $7k4G6.contains)(ORTHOGONAL_ORIENT[channel], labelOrient)) // Row/Column with orthogonal labelOrient must use title to display labels
            return (0, $49Viv.assembleLabelTitle)(facet[channel], channel, config);
        }
        return undefined;
    }
    assembleMarks() {
        const { child: child } = this;
        // If we facet by two dimensions, we need to add a cross operator to the aggregation
        // so that we create all groups
        const facetRoot = this.component.data.facetRoot;
        const data = (0, $iUJlm.assembleFacetData)(facetRoot);
        const encodeEntry = child.assembleGroupEncodeEntry(false);
        const title = this.assembleLabelTitle() || child.assembleTitle();
        const style = child.assembleGroupStyle();
        const markGroup = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
            name: this.getName("cell"),
            type: "group"
        }, title ? {
            title: title
        } : {}), style ? {
            style: style
        } : {}), {
            from: {
                facet: this.assembleFacet()
            },
            // TODO: move this to after data
            sort: {
                field: (0, $fWfT0.FACET_CHANNELS).map((c)=>this.facetSortFields(c)).flat(),
                order: (0, $fWfT0.FACET_CHANNELS).map((c)=>this.facetSortOrder(c)).flat()
            }
        }), data.length > 0 ? {
            data: data
        } : {}), encodeEntry ? {
            encode: {
                update: encodeEntry
            }
        } : {}), child.assembleGroup((0, $ls1My.assembleFacetSignals)(this, [])));
        return [
            markGroup
        ];
    }
    getMapping() {
        return this.facet;
    }
}

});
parcelRegister("iUJlm", function(module, exports) {

$parcel$export(module.exports, "assembleFacetData", () => $dc50a13ef41fa1b0$export$72885651c32ce279);
$parcel$export(module.exports, "assembleRootData", () => $dc50a13ef41fa1b0$export$5e35f28002226597);

var $iK8OT = parcelRequire("iK8OT");

var $7hYDh = parcelRequire("7hYDh");

var $69ADH = parcelRequire("69ADH");

var $8IEdE = parcelRequire("8IEdE");

var $71IWl = parcelRequire("71IWl");

var $2fEVC = parcelRequire("2fEVC");

var $3WhAB = parcelRequire("3WhAB");

var $hgVkC = parcelRequire("hgVkC");

var $12cAY = parcelRequire("12cAY");

var $8hWdk = parcelRequire("8hWdk");

var $dPoAS = parcelRequire("dPoAS");

var $fShv6 = parcelRequire("fShv6");

var $fgoUf = parcelRequire("fgoUf");

var $jzV9L = parcelRequire("jzV9L");

var $bXOrP = parcelRequire("bXOrP");

var $lIzph = parcelRequire("lIzph");

var $hHNlB = parcelRequire("hHNlB");

var $hjAkP = parcelRequire("hjAkP");

var $bFEmy = parcelRequire("bFEmy");

var $bG5pi = parcelRequire("bG5pi");

var $40XYD = parcelRequire("40XYD");

var $1UWTp = parcelRequire("1UWTp");

var $8UlmV = parcelRequire("8UlmV");

var $7cPMs = parcelRequire("7cPMs");

var $cetJA = parcelRequire("cetJA");

var $a74BM = parcelRequire("a74BM");

var $6GmKA = parcelRequire("6GmKA");

var $1MK7y = parcelRequire("1MK7y");

var $msAWv = parcelRequire("msAWv");
function $dc50a13ef41fa1b0$var$makeWalkTree(data) {
    // to name datasources
    let datasetIndex = 0;
    /**
     * Recursively walk down the tree.
     */ function walkTree(node, dataSource) {
        var _a;
        if (node instanceof (0, $a74BM.SourceNode)) // If the source is a named data source or a data source with values, we need
        // to put it in a different data source. Otherwise, Vega may override the data.
        {
            if (!node.isGenerator && !(0, $iK8OT.isUrlData)(node.data)) {
                data.push(dataSource);
                const newData = {
                    name: null,
                    source: dataSource.name,
                    transform: []
                };
                dataSource = newData;
            }
        }
        if (node instanceof (0, $fShv6.ParseNode)) {
            if (node.parent instanceof (0, $a74BM.SourceNode) && !dataSource.source) {
                // If node's parent is a root source and the data source does not refer to another data source, use normal format parse
                dataSource.format = Object.assign(Object.assign({}, (_a = dataSource.format) !== null && _a !== void 0 ? _a : {}), {
                    parse: node.assembleFormatParse()
                });
                // add calculates for all nested fields
                dataSource.transform.push(...node.assembleTransforms(true));
            } else // Otherwise use Vega expression to parse
            dataSource.transform.push(...node.assembleTransforms());
        }
        if (node instanceof (0, $3WhAB.FacetNode)) {
            if (!dataSource.name) dataSource.name = `data_${datasetIndex++}`;
            if (!dataSource.source || dataSource.transform.length > 0) {
                data.push(dataSource);
                node.data = dataSource.name;
            } else node.data = dataSource.source;
            for (const d of node.assemble())data.push(d);
            // break here because the rest of the tree has to be taken care of by the facet.
            return;
        }
        if (node instanceof (0, $bXOrP.GraticuleNode) || node instanceof (0, $cetJA.SequenceNode) || node instanceof (0, $12cAY.FilterInvalidNode) || node instanceof (0, $hgVkC.FilterNode) || node instanceof (0, $8IEdE.CalculateNode) || node instanceof (0, $jzV9L.GeoPointNode) || node instanceof (0, $fgoUf.GeoJSONNode) || node instanceof (0, $7hYDh.AggregateNode) || node instanceof (0, $bG5pi.LookupNode) || node instanceof (0, $msAWv.WindowTransformNode) || node instanceof (0, $hjAkP.JoinAggregateTransformNode) || node instanceof (0, $dPoAS.FoldTransformNode) || node instanceof (0, $8hWdk.FlattenTransformNode) || node instanceof (0, $2fEVC.DensityTransformNode) || node instanceof (0, $bFEmy.LoessTransformNode) || node instanceof (0, $40XYD.QuantileTransformNode) || node instanceof (0, $1UWTp.RegressionTransformNode) || node instanceof (0, $lIzph.IdentifierNode) || node instanceof (0, $7cPMs.SampleTransformNode) || node instanceof (0, $8UlmV.PivotTransformNode)) dataSource.transform.push(node.assemble());
        if (node instanceof (0, $69ADH.BinNode) || node instanceof (0, $1MK7y.TimeUnitNode) || node instanceof (0, $hHNlB.ImputeNode) || node instanceof (0, $6GmKA.StackNode)) dataSource.transform.push(...node.assemble());
        if (node instanceof (0, $71IWl.OutputNode)) {
            if (dataSource.source && dataSource.transform.length === 0) node.setSource(dataSource.source);
            else if (node.parent instanceof (0, $71IWl.OutputNode)) // Note that an output node may be required but we still do not assemble a
            // separate data source for it.
            node.setSource(dataSource.name);
            else {
                if (!dataSource.name) dataSource.name = `data_${datasetIndex++}`;
                // Here we set the name of the datasource we generated. From now on
                // other assemblers can use it.
                node.setSource(dataSource.name);
                // if this node has more than one child, we will add a datasource automatically
                if (node.numChildren() === 1) {
                    data.push(dataSource);
                    const newData = {
                        name: null,
                        source: dataSource.name,
                        transform: []
                    };
                    dataSource = newData;
                }
            }
        }
        switch(node.numChildren()){
            case 0:
                // done
                if (node instanceof (0, $71IWl.OutputNode) && (!dataSource.source || dataSource.transform.length > 0)) // do not push empty datasources that are simply references
                data.push(dataSource);
                break;
            case 1:
                walkTree(node.children[0], dataSource);
                break;
            default:
                {
                    if (!dataSource.name) dataSource.name = `data_${datasetIndex++}`;
                    let source = dataSource.name;
                    if (!dataSource.source || dataSource.transform.length > 0) data.push(dataSource);
                    else source = dataSource.source;
                    for (const child of node.children){
                        const newData = {
                            name: null,
                            source: source,
                            transform: []
                        };
                        walkTree(child, newData);
                    }
                    break;
                }
        }
    }
    return walkTree;
}
function $dc50a13ef41fa1b0$export$72885651c32ce279(root) {
    const data = [];
    const walkTree = $dc50a13ef41fa1b0$var$makeWalkTree(data);
    for (const child of root.children)walkTree(child, {
        source: root.name,
        name: null,
        transform: []
    });
    return data;
}
function $dc50a13ef41fa1b0$export$5e35f28002226597(dataComponent, datasets) {
    var _a, _b;
    const data = [];
    // dataComponent.sources.forEach(debug);
    // draw(dataComponent.sources);
    const walkTree = $dc50a13ef41fa1b0$var$makeWalkTree(data);
    let sourceIndex = 0;
    for (const root of dataComponent.sources){
        // assign a name if the source does not have a name yet
        if (!root.hasName()) root.dataName = `source_${sourceIndex++}`;
        const newData = root.assemble();
        walkTree(root, newData);
    }
    // remove empty transform arrays for cleaner output
    for (const d of data)if (d.transform.length === 0) delete d.transform;
    // move sources without transforms (the ones that are potentially used in lookups) to the beginning
    let whereTo = 0;
    for (const [i, d] of data.entries())if (((_a = d.transform) !== null && _a !== void 0 ? _a : []).length === 0 && !d.source) data.splice(whereTo++, 0, data.splice(i, 1)[0]);
    // now fix the from references in lookup transforms
    for (const d of data){
        for (const t of (_b = d.transform) !== null && _b !== void 0 ? _b : [])if (t.type === "lookup") t.from = dataComponent.outputNodes[t.from].getSource();
    }
    // inline values for datasets that are in the datastore
    for (const d of data)if (d.name in datasets) d.values = datasets[d.name];
    return data;
}

});
parcelRegister("bFEmy", function(module, exports) {

$parcel$export(module.exports, "LoessTransformNode", () => $87f2d5451c3e1ee5$export$7af460763a852796);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
var $87f2d5451c3e1ee5$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $87f2d5451c3e1ee5$export$7af460763a852796 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        var _a, _b, _c;
        super(parent);
        this.transform = transform;
        this.transform = (0, $7k4G6.duplicate)(transform); // duplicate to prevent side effects
        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [
            undefined,
            undefined
        ];
        this.transform.as = [
            (_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform.on,
            (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : transform.loess
        ];
    }
    clone() {
        return new $87f2d5451c3e1ee5$export$7af460763a852796(null, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        var _a;
        return new Set([
            this.transform.loess,
            this.transform.on,
            ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []
        ]);
    }
    producedFields() {
        return new Set(this.transform.as);
    }
    hash() {
        return `LoessTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const _a = this.transform, { loess: loess, on: on } = _a, rest = $87f2d5451c3e1ee5$var$__rest(_a, [
            "loess",
            "on"
        ]);
        const result = Object.assign({
            type: "loess",
            x: on,
            y: loess
        }, rest);
        return result;
    }
}

});

parcelRegister("bG5pi", function(module, exports) {

$parcel$export(module.exports, "LookupNode", () => $8807cfa857a9cf25$export$3b05ecf49c832a3c);

var $2bi3s = parcelRequire("2bi3s");
parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");
var $3XBQv = parcelRequire("3XBQv");

var $20qnG = parcelRequire("20qnG");

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");

var $iRvxE = parcelRequire("iRvxE");

var $a74BM = parcelRequire("a74BM");

var $iK8OT = parcelRequire("iK8OT");
class $8807cfa857a9cf25$export$3b05ecf49c832a3c extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform, secondary){
        super(parent);
        this.transform = transform;
        this.secondary = secondary;
    }
    clone() {
        return new $8807cfa857a9cf25$export$3b05ecf49c832a3c(null, (0, $7k4G6.duplicate)(this.transform), this.secondary);
    }
    static make(parent, model, transform, counter) {
        const sources = model.component.data.sources;
        const { from: from } = transform;
        let fromOutputNode = null;
        if ((0, $20qnG.isLookupData)(from)) {
            let fromSource = (0, $iRvxE.findSource)(from.data, sources);
            if (!fromSource) {
                fromSource = new (0, $a74BM.SourceNode)(from.data);
                sources.push(fromSource);
            }
            const fromOutputName = model.getName(`lookup_${counter}`);
            fromOutputNode = new (0, $71IWl.OutputNode)(fromSource, fromOutputName, (0, $iK8OT.DataSourceType).Lookup, model.component.data.outputNodeRefCounts);
            model.component.data.outputNodes[fromOutputName] = fromOutputNode;
        } else if ((0, $20qnG.isLookupSelection)(from)) {
            const selName = from.selection;
            transform = Object.assign({
                as: selName
            }, transform);
            fromOutputNode = model.getSelectionComponent((0, $7k4G6.varName)(selName), selName).materialized;
            if (!fromOutputNode) throw new Error($bHNid.noSameUnitLookup(selName));
        }
        return new $8807cfa857a9cf25$export$3b05ecf49c832a3c(parent, transform, fromOutputNode.getSource());
    }
    dependentFields() {
        return new Set([
            this.transform.lookup
        ]);
    }
    producedFields() {
        return new Set(this.transform.as ? (0, $2bi3s.array)(this.transform.as) : this.transform.from.fields);
    }
    hash() {
        return `Lookup ${(0, $7k4G6.hash)({
            transform: this.transform,
            secondary: this.secondary
        })}`;
    }
    assemble() {
        let foreign;
        if (this.transform.from.fields) // lookup a few fields and add create a flat output
        foreign = Object.assign({
            values: this.transform.from.fields
        }, this.transform.as ? {
            as: (0, $2bi3s.array)(this.transform.as)
        } : {});
        else {
            // lookup full record and nest it
            let asName = this.transform.as;
            if (!(0, $2bi3s.isString)(asName)) {
                $3XBQv.warn($bHNid.NO_FIELDS_NEEDS_AS);
                asName = "_lookup";
            }
            foreign = {
                as: [
                    asName
                ]
            };
        }
        return Object.assign(Object.assign({
            type: "lookup",
            from: this.secondary,
            key: this.transform.from.key,
            fields: [
                this.transform.lookup
            ]
        }, foreign), this.transform.default ? {
            default: this.transform.default
        } : {});
    }
}

});

parcelRegister("40XYD", function(module, exports) {

$parcel$export(module.exports, "QuantileTransformNode", () => $2ec5afaeb749782b$export$4ac05eb24ce02956);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
var $2ec5afaeb749782b$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $2ec5afaeb749782b$export$4ac05eb24ce02956 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        var _a, _b, _c;
        super(parent);
        this.transform = transform;
        this.transform = (0, $7k4G6.duplicate)(transform); // duplicate to prevent side effects
        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [
            undefined,
            undefined
        ];
        this.transform.as = [
            (_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : "prob",
            (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : "value"
        ];
    }
    clone() {
        return new $2ec5afaeb749782b$export$4ac05eb24ce02956(null, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        var _a;
        return new Set([
            this.transform.quantile,
            ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []
        ]);
    }
    producedFields() {
        return new Set(this.transform.as);
    }
    hash() {
        return `QuantileTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const _a = this.transform, { quantile: quantile } = _a, rest = $2ec5afaeb749782b$var$__rest(_a, [
            "quantile"
        ]);
        const result = Object.assign({
            type: "quantile",
            field: quantile
        }, rest);
        return result;
    }
}

});

parcelRegister("1UWTp", function(module, exports) {

$parcel$export(module.exports, "RegressionTransformNode", () => $1658b43f4929964d$export$e6520d55f22718c3);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
var $1658b43f4929964d$var$__rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class $1658b43f4929964d$export$e6520d55f22718c3 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        var _a, _b, _c;
        super(parent);
        this.transform = transform;
        this.transform = (0, $7k4G6.duplicate)(transform); // duplicate to prevent side effects
        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [
            undefined,
            undefined
        ];
        this.transform.as = [
            (_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform.on,
            (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : transform.regression
        ];
    }
    clone() {
        return new $1658b43f4929964d$export$e6520d55f22718c3(null, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        var _a;
        return new Set([
            this.transform.regression,
            this.transform.on,
            ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []
        ]);
    }
    producedFields() {
        return new Set(this.transform.as);
    }
    hash() {
        return `RegressionTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const _a = this.transform, { regression: regression, on: on } = _a, rest = $1658b43f4929964d$var$__rest(_a, [
            "regression",
            "on"
        ]);
        const result = Object.assign({
            type: "regression",
            x: on,
            y: regression
        }, rest);
        return result;
    }
}

});

parcelRegister("8UlmV", function(module, exports) {

$parcel$export(module.exports, "PivotTransformNode", () => $67c42118664e3bd2$export$1bd68bee1c2233a6);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $67c42118664e3bd2$export$1bd68bee1c2233a6 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        super(parent);
        this.transform = transform;
    }
    clone() {
        return new $67c42118664e3bd2$export$1bd68bee1c2233a6(null, (0, $7k4G6.duplicate)(this.transform));
    }
    addDimensions(fields) {
        var _a;
        this.transform.groupby = (0, $7k4G6.unique)(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), (d)=>d);
    }
    producedFields() {
        return undefined; // return undefined so that potentially everything can depend on the pivot
    }
    dependentFields() {
        var _a;
        return new Set([
            this.transform.pivot,
            this.transform.value,
            ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []
        ]);
    }
    hash() {
        return `PivotTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        const { pivot: pivot, value: value, groupby: groupby, limit: limit, op: op } = this.transform;
        return Object.assign(Object.assign(Object.assign({
            type: "pivot",
            field: pivot,
            value: value
        }, limit !== undefined ? {
            limit: limit
        } : {}), op !== undefined ? {
            op: op
        } : {}), groupby !== undefined ? {
            groupby: groupby
        } : {});
    }
}

});

parcelRegister("7cPMs", function(module, exports) {

$parcel$export(module.exports, "SampleTransformNode", () => $53f1d1ef799c49f0$export$7df70b1b28435615);

var $7k4G6 = parcelRequire("7k4G6");

var $71IWl = parcelRequire("71IWl");
class $53f1d1ef799c49f0$export$7df70b1b28435615 extends (0, $71IWl.DataFlowNode) {
    constructor(parent, transform){
        super(parent);
        this.transform = transform;
    }
    clone() {
        return new $53f1d1ef799c49f0$export$7df70b1b28435615(null, (0, $7k4G6.duplicate)(this.transform));
    }
    dependentFields() {
        return new Set();
    }
    producedFields() {
        return new Set();
    }
    hash() {
        return `SampleTransform ${(0, $7k4G6.hash)(this.transform)}`;
    }
    assemble() {
        return {
            type: "sample",
            size: this.transform.sample
        };
    }
}

});


parcelRegister("awrVV", function(module, exports) {

$parcel$export(module.exports, "parseFacetHeaders", () => $7a928f850e86536f$export$35ebc7f836878eb7);

var $2bi3s = parcelRequire("2bi3s");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $dCse2 = parcelRequire("dCse2");

var $chIKM = parcelRequire("chIKM");

var $Ejdtd = parcelRequire("Ejdtd");
function $7a928f850e86536f$export$e35b3f43e108c871(orient) {
    if (orient === "top" || orient === "left" || (0, $4xdf1.isSignalRef)(orient)) // we always use header for orient signal since we can't dynamically make header becomes footer
    return "header";
    return "footer";
}
function $7a928f850e86536f$export$35ebc7f836878eb7(model) {
    for (const channel of (0, $fWfT0.FACET_CHANNELS))$7a928f850e86536f$var$parseFacetHeader(model, channel);
    $7a928f850e86536f$var$mergeChildAxis(model, "x");
    $7a928f850e86536f$var$mergeChildAxis(model, "y");
}
function $7a928f850e86536f$var$parseFacetHeader(model, channel) {
    var _a;
    const { facet: facet, config: config, child: child, component: component } = model;
    if (model.channelHasField(channel)) {
        const fieldDef = facet[channel];
        const titleConfig = (0, $Ejdtd.getHeaderProperty)("title", null, config, channel);
        let title = (0, $2hAmp.title)(fieldDef, config, {
            allowDisabling: true,
            includeDefault: titleConfig === undefined || !!titleConfig
        });
        if (child.component.layoutHeaders[channel].title) {
            // TODO: better handle multiline titles
            title = (0, $2bi3s.isArray)(title) ? title.join(", ") : title;
            // merge title with child to produce "Title / Subtitle / Sub-subtitle"
            title += " / " + child.component.layoutHeaders[channel].title;
            child.component.layoutHeaders[channel].title = null;
        }
        const labelOrient = (0, $Ejdtd.getHeaderProperty)("labelOrient", fieldDef, config, channel);
        const header = (_a = fieldDef.header) !== null && _a !== void 0 ? _a : {};
        const labels = (0, $7k4G6.getFirstDefined)(header.labels, config.header.labels, true);
        const headerType = (0, $7k4G6.contains)([
            "bottom",
            "right"
        ], labelOrient) ? "footer" : "header";
        component.layoutHeaders[channel] = {
            title: title,
            facetFieldDef: fieldDef,
            [headerType]: channel === "facet" ? [] : [
                $7a928f850e86536f$var$makeHeaderComponent(model, channel, labels)
            ]
        };
    }
}
function $7a928f850e86536f$var$makeHeaderComponent(model, channel, labels) {
    const sizeType = channel === "row" ? "height" : "width";
    return {
        labels: labels,
        sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,
        axes: []
    };
}
function $7a928f850e86536f$var$mergeChildAxis(model, channel) {
    var _a;
    const { child: child } = model;
    if (child.component.axes[channel]) {
        const { layoutHeaders: layoutHeaders, resolve: resolve } = model.component;
        resolve.axis[channel] = (0, $chIKM.parseGuideResolve)(resolve, channel);
        if (resolve.axis[channel] === "shared") {
            // For shared axis, move the axes to facet's header or footer
            const headerChannel = channel === "x" ? "column" : "row";
            const layoutHeader = layoutHeaders[headerChannel];
            for (const axisComponent of child.component.axes[channel]){
                const headerType = $7a928f850e86536f$export$e35b3f43e108c871(axisComponent.get("orient"));
                layoutHeader[headerType] = (_a = layoutHeader[headerType]) !== null && _a !== void 0 ? _a : [
                    $7a928f850e86536f$var$makeHeaderComponent(model, headerChannel, false)
                ];
                // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes
                const mainAxis = (0, $dCse2.assembleAxis)(axisComponent, "main", model.config, {
                    header: true
                });
                if (mainAxis) // LayoutHeader no longer keep track of property precedence, thus let's combine.
                layoutHeader[headerType][0].axes.push(mainAxis);
                axisComponent.mainExtracted = true;
            }
        }
    }
}

});

parcelRegister("6aA2s", function(module, exports) {

$parcel$export(module.exports, "parseLayerLayoutSize", () => $47dfa1c026a59135$export$13d15dff3b3aa6bb);
$parcel$export(module.exports, "parseChildrenLayoutSize", () => $47dfa1c026a59135$export$1358d5d95d04944a);
$parcel$export(module.exports, "parseConcatLayoutSize", () => $47dfa1c026a59135$export$26388f4ad8c6ecaa);
$parcel$export(module.exports, "parseUnitLayoutSize", () => $47dfa1c026a59135$export$2d243535956f2117);

var $fWfT0 = parcelRequire("fWfT0");

var $iX9mu = parcelRequire("iX9mu");

var $9rekY = parcelRequire("9rekY");

var $7Eu98 = parcelRequire("7Eu98");

var $4xdf1 = parcelRequire("4xdf1");

var $5T1O4 = parcelRequire("5T1O4");

var $H6zbC = parcelRequire("H6zbC");
function $47dfa1c026a59135$export$13d15dff3b3aa6bb(model) {
    $47dfa1c026a59135$export$1358d5d95d04944a(model);
    $47dfa1c026a59135$var$parseNonUnitLayoutSizeForChannel(model, "width");
    $47dfa1c026a59135$var$parseNonUnitLayoutSizeForChannel(model, "height");
}
const $47dfa1c026a59135$export$94c00cd6ba83dddf = $47dfa1c026a59135$export$26388f4ad8c6ecaa;
function $47dfa1c026a59135$export$26388f4ad8c6ecaa(model) {
    $47dfa1c026a59135$export$1358d5d95d04944a(model);
    // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.
    const widthType = model.layout.columns === 1 ? "width" : "childWidth";
    // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.
    const heightType = model.layout.columns === undefined ? "height" : "childHeight";
    $47dfa1c026a59135$var$parseNonUnitLayoutSizeForChannel(model, widthType);
    $47dfa1c026a59135$var$parseNonUnitLayoutSizeForChannel(model, heightType);
}
function $47dfa1c026a59135$export$1358d5d95d04944a(model) {
    for (const child of model.children)child.parseLayoutSize();
}
/**
 * Merge child layout size (width or height).
 */ function $47dfa1c026a59135$var$parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {
    /*
     * For concat, the parent width or height might not be the same as the children's shared height.
     * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.
     *
     * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)
     * while the sizeType represents the properties of the child.
     */ const sizeType = (0, $H6zbC.getSizeTypeFromLayoutSizeType)(layoutSizeType);
    const channel = (0, $fWfT0.getPositionScaleChannel)(sizeType);
    const resolve = model.component.resolve;
    const layoutSizeCmpt = model.component.layoutSize;
    let mergedSize;
    // Try to merge layout size
    for (const child of model.children){
        const childSize = child.component.layoutSize.getWithExplicit(sizeType);
        const scaleResolve = resolve.scale[channel];
        if (scaleResolve === "independent" && childSize.value === "step") {
            // Do not merge independent scales with range-step as their size depends
            // on the scale domains, which can be different between scales.
            mergedSize = undefined;
            break;
        }
        if (mergedSize) {
            if (scaleResolve === "independent" && mergedSize.value !== childSize.value) {
                // For independent scale, only merge if all the sizes are the same.
                // If the values are different, abandon the merge!
                mergedSize = undefined;
                break;
            }
            mergedSize = (0, $5T1O4.mergeValuesWithExplicit)(mergedSize, childSize, sizeType, "");
        } else mergedSize = childSize;
    }
    if (mergedSize) {
        // If merged, rename size and set size of all children.
        for (const child of model.children){
            model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));
            child.component.layoutSize.set(sizeType, "merged", false);
        }
        layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);
    } else layoutSizeCmpt.setWithExplicit(layoutSizeType, {
        explicit: false,
        value: undefined
    });
}
function $47dfa1c026a59135$export$2d243535956f2117(model) {
    const { size: size, component: component } = model;
    for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS)){
        const sizeType = (0, $fWfT0.getSizeChannel)(channel);
        if (size[sizeType]) {
            const specifiedSize = size[sizeType];
            component.layoutSize.set(sizeType, (0, $7Eu98.isStep)(specifiedSize) ? "step" : specifiedSize, true);
        } else {
            const defaultSize = $47dfa1c026a59135$var$defaultUnitSize(model, sizeType);
            component.layoutSize.set(sizeType, defaultSize, false);
        }
    }
}
function $47dfa1c026a59135$var$defaultUnitSize(model, sizeType) {
    const channel = sizeType === "width" ? "x" : "y";
    const config = model.config;
    const scaleComponent = model.getScaleComponent(channel);
    if (scaleComponent) {
        const scaleType = scaleComponent.get("type");
        const range = scaleComponent.get("range");
        if ((0, $9rekY.hasDiscreteDomain)(scaleType)) {
            const size = (0, $iX9mu.getViewConfigDiscreteSize)(config.view, sizeType);
            if ((0, $4xdf1.isVgRangeStep)(range) || (0, $7Eu98.isStep)(size)) // For discrete domain with range.step, use dynamic width/height
            return "step";
            else return size;
        } else return (0, $iX9mu.getViewConfigContinuousSize)(config.view, sizeType);
    } else if (model.hasProjection || model.mark === "arc") // arc should use continuous size by default otherwise the pie is extremely small
    return (0, $iX9mu.getViewConfigContinuousSize)(config.view, sizeType);
    else {
        const size = (0, $iX9mu.getViewConfigDiscreteSize)(config.view, sizeType);
        return (0, $7Eu98.isStep)(size) ? size.step : size;
    }
}

});





parcelRegister("3MQFF", function(module, exports) {

$parcel$export(module.exports, "LayerModel", () => $2c1eb62a106b6a7b$export$77d16ea24c9e181a);
parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");
parcelRequire("5zWAp");
var $7Mulx = parcelRequire("7Mulx");
var $78jSz = parcelRequire("78jSz");

var $7k4G6 = parcelRequire("7k4G6");

var $dCse2 = parcelRequire("dCse2");

var $6Otx4 = parcelRequire("6Otx4");

var $iRvxE = parcelRequire("iRvxE");

var $eGXJ8 = parcelRequire("eGXJ8");

var $6aA2s = parcelRequire("6aA2s");

var $7Igmf = parcelRequire("7Igmf");

var $jkJyY = parcelRequire("jkJyY");

var $ls1My = parcelRequire("ls1My");

var $gJzO9 = parcelRequire("gJzO9");
class $2c1eb62a106b6a7b$export$77d16ea24c9e181a extends (0, $jkJyY.Model) {
    constructor(spec, parent, parentGivenName, parentGivenSize, config){
        super(spec, "layer", parent, parentGivenName, config, spec.resolve, spec.view);
        const layoutSize = Object.assign(Object.assign(Object.assign({}, parentGivenSize), spec.width ? {
            width: spec.width
        } : {}), spec.height ? {
            height: spec.height
        } : {});
        this.children = spec.layer.map((layer, i)=>{
            if ((0, $7Mulx.isLayerSpec)(layer)) return new $2c1eb62a106b6a7b$export$77d16ea24c9e181a(layer, this, this.getName("layer_" + i), layoutSize, config);
            else if ((0, $78jSz.isUnitSpec)(layer)) return new (0, $gJzO9.UnitModel)(layer, this, this.getName("layer_" + i), layoutSize, config);
            throw new Error($bHNid.invalidSpec(layer));
        });
    }
    parseData() {
        this.component.data = (0, $iRvxE.parseData)(this);
        for (const child of this.children)child.parseData();
    }
    parseLayoutSize() {
        (0, $6aA2s.parseLayerLayoutSize)(this);
    }
    parseSelections() {
        // Merge selections up the hierarchy so that they may be referenced
        // across unit specs. Persist their definitions within each child
        // to assemble signals which remain within output Vega unit groups.
        this.component.selection = {};
        for (const child of this.children){
            child.parseSelections();
            for (const key of (0, $7k4G6.keys)(child.component.selection))this.component.selection[key] = child.component.selection[key];
        }
    }
    parseMarkGroup() {
        for (const child of this.children)child.parseMarkGroup();
    }
    parseAxesAndHeaders() {
        (0, $6Otx4.parseLayerAxes)(this);
    }
    assembleSelectionTopLevelSignals(signals) {
        return this.children.reduce((sg, child)=>child.assembleSelectionTopLevelSignals(sg), signals);
    }
    // TODO: Support same named selections across children.
    assembleSignals() {
        return this.children.reduce((signals, child)=>{
            return signals.concat(child.assembleSignals());
        }, (0, $dCse2.assembleAxisSignals)(this));
    }
    assembleLayoutSignals() {
        return this.children.reduce((signals, child)=>{
            return signals.concat(child.assembleLayoutSignals());
        }, (0, $eGXJ8.assembleLayoutSignals)(this));
    }
    assembleSelectionData(data) {
        return this.children.reduce((db, child)=>child.assembleSelectionData(db), data);
    }
    assembleTitle() {
        let title = super.assembleTitle();
        if (title) return title;
        // If title does not provide layer, look into children
        for (const child of this.children){
            title = child.assembleTitle();
            if (title) return title;
        }
        return undefined;
    }
    assembleLayout() {
        return null;
    }
    assembleMarks() {
        return (0, $ls1My.assembleLayerSelectionMarks)(this, this.children.flatMap((child)=>{
            return child.assembleMarks();
        }));
    }
    assembleLegends() {
        return this.children.reduce((legends, child)=>{
            return legends.concat(child.assembleLegends());
        }, (0, $7Igmf.assembleLegends)(this));
    }
}

});
parcelRegister("6Otx4", function(module, exports) {

$parcel$export(module.exports, "parseUnitAxes", () => $4f5e5214e1297c1c$export$e69d4b1a6984e81e);
$parcel$export(module.exports, "parseLayerAxes", () => $4f5e5214e1297c1c$export$8b3042813f12ef9b);

var $lUV6x = parcelRequire("lUV6x");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $4BwXy = parcelRequire("4BwXy");

var $chIKM = parcelRequire("chIKM");

var $5T1O4 = parcelRequire("5T1O4");

var $9D1GO = parcelRequire("9D1GO");

var $cQy2B = parcelRequire("cQy2B");

var $g6DYC = parcelRequire("g6DYC");

var $5z0Qu = parcelRequire("5z0Qu");
function $4f5e5214e1297c1c$export$e69d4b1a6984e81e(model) {
    return (0, $fWfT0.POSITION_SCALE_CHANNELS).reduce((axis, channel)=>{
        if (model.component.scales[channel]) axis[channel] = [
            $4f5e5214e1297c1c$var$parseAxis(channel, model)
        ];
        return axis;
    }, {});
}
const $4f5e5214e1297c1c$var$OPPOSITE_ORIENT = {
    bottom: "top",
    top: "bottom",
    left: "right",
    right: "left"
};
function $4f5e5214e1297c1c$export$8b3042813f12ef9b(model) {
    var _a;
    const { axes: axes, resolve: resolve } = model.component;
    const axisCount = {
        top: 0,
        bottom: 0,
        right: 0,
        left: 0
    };
    for (const child of model.children){
        child.parseAxesAndHeaders();
        for (const channel of (0, $7k4G6.keys)(child.component.axes)){
            resolve.axis[channel] = (0, $chIKM.parseGuideResolve)(model.component.resolve, channel);
            if (resolve.axis[channel] === "shared") {
                // If the resolve says shared (and has not been overridden)
                // We will try to merge and see if there is a conflict
                axes[channel] = $4f5e5214e1297c1c$var$mergeAxisComponents(axes[channel], child.component.axes[channel]);
                if (!axes[channel]) {
                    // If merge returns nothing, there is a conflict so we cannot make the axis shared.
                    // Thus, mark axis as independent and remove the axis component.
                    resolve.axis[channel] = "independent";
                    delete axes[channel];
                }
            }
        }
    }
    // Move axes to layer's axis component and merge shared axes
    for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS)){
        for (const child of model.children){
            if (!child.component.axes[channel]) continue;
            if (resolve.axis[channel] === "independent") {
                // If axes are independent, concat the axisComponent array.
                axes[channel] = ((_a = axes[channel]) !== null && _a !== void 0 ? _a : []).concat(child.component.axes[channel]);
                // Automatically adjust orient
                for (const axisComponent of child.component.axes[channel]){
                    const { value: orient, explicit: explicit } = axisComponent.getWithExplicit("orient");
                    if ((0, $4xdf1.isSignalRef)(orient)) continue;
                    if (axisCount[orient] > 0 && !explicit) {
                        // Change axis orient if the number do not match
                        const oppositeOrient = $4f5e5214e1297c1c$var$OPPOSITE_ORIENT[orient];
                        if (axisCount[orient] > axisCount[oppositeOrient]) axisComponent.set("orient", oppositeOrient, false);
                    }
                    axisCount[orient]++;
                // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?
                }
            }
            // After merging, make sure to remove axes from child
            delete child.component.axes[channel];
        }
        // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)
        if (resolve.axis[channel] === "independent" && axes[channel] && axes[channel].length > 1) {
            for (const axisCmpt of axes[channel])if (!!axisCmpt.get("grid") && !axisCmpt.explicit.grid) axisCmpt.implicit.grid = false;
        }
    }
}
function $4f5e5214e1297c1c$var$mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
    if (mergedAxisCmpts) {
        // FIXME: this is a bit wrong once we support multiple axes
        if (mergedAxisCmpts.length !== childAxisCmpts.length) return undefined; // Cannot merge axis component with different number of axes.
        const length = mergedAxisCmpts.length;
        for(let i = 0; i < length; i++){
            const merged = mergedAxisCmpts[i];
            const child = childAxisCmpts[i];
            if (!!merged !== !!child) return undefined;
            else if (merged && child) {
                const mergedOrient = merged.getWithExplicit("orient");
                const childOrient = child.getWithExplicit("orient");
                if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
                // Cannot merge due to inconsistent orient
                return undefined;
                else mergedAxisCmpts[i] = $4f5e5214e1297c1c$var$mergeAxisComponent(merged, child);
            }
        }
    } else // For first one, return a copy of the child
    return childAxisCmpts.map((axisComponent)=>axisComponent.clone());
    return mergedAxisCmpts;
}
function $4f5e5214e1297c1c$var$mergeAxisComponent(merged, child) {
    for (const prop of (0, $9D1GO.AXIS_COMPONENT_PROPERTIES)){
        const mergedValueWithExplicit = (0, $5T1O4.mergeValuesWithExplicit)(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, "axis", // Tie breaker function
        (v1, v2)=>{
            switch(prop){
                case "title":
                    return (0, $9ulW1.mergeTitleComponent)(v1, v2);
                case "gridScale":
                    return {
                        explicit: v1.explicit,
                        value: (0, $7k4G6.getFirstDefined)(v1.value, v2.value)
                    };
            }
            return (0, $5T1O4.defaultTieBreaker)(v1, v2, prop, "axis");
        });
        merged.setWithExplicit(prop, mergedValueWithExplicit);
    }
    return merged;
}
// eslint-disable-next-line @typescript-eslint/ban-types
function $4f5e5214e1297c1c$var$isExplicit(value, property, axis, model, channel) {
    if (property === "disable") return axis !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit
    axis = axis || {};
    switch(property){
        case "titleAngle":
        case "labelAngle":
            return value === ((0, $4xdf1.isSignalRef)(axis.labelAngle) ? axis.labelAngle : (0, $7k4G6.normalizeAngle)(axis.labelAngle));
        case "values":
            return !!axis.values;
        // specified axis.values is already respected, but may get transformed.
        case "encode":
            // both VL axis.encoding and axis.labelAngle affect VG axis.encode
            return !!axis.encoding || !!axis.labelAngle;
        case "title":
            // title can be explicit if fieldDef.title is set
            if (value === (0, $5z0Qu.getFieldDefTitle)(model, channel)) return true;
    }
    // Otherwise, things are explicit if the returned value matches the specified property
    return value === axis[property];
}
/**
 * Properties to always include values from config
 */ const $4f5e5214e1297c1c$var$propsToAlwaysIncludeConfig = new Set([
    "grid",
    "translate",
    // the rest are not axis configs in Vega, but are in VL, so we need to set too.
    "format",
    "formatType",
    "orient",
    "labelExpr",
    "tickCount",
    "position",
    "tickMinStep"
]);
function $4f5e5214e1297c1c$var$parseAxis(channel, model) {
    var _a, _b, _c;
    let axis = model.axis(channel);
    const axisComponent = new (0, $9D1GO.AxisComponent)();
    const fieldOrDatumDef = (0, $2hAmp.getFieldOrDatumDef)(model.encoding[channel]);
    const { mark: mark, config: config } = model;
    const orient = (axis === null || axis === void 0 ? void 0 : axis.orient) || ((_a = config[channel === "x" ? "axisX" : "axisY"]) === null || _a === void 0 ? void 0 : _a.orient) || ((_b = config.axis) === null || _b === void 0 ? void 0 : _b.orient) || (0, $5z0Qu.defaultOrient)(channel);
    const scaleType = model.getScaleComponent(channel).get("type");
    const axisConfigs = (0, $cQy2B.getAxisConfigs)(channel, scaleType, orient, model.config);
    const disable = axis !== undefined ? !axis : (0, $cQy2B.getAxisConfig)("disable", config.style, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs).configValue;
    axisComponent.set("disable", disable, axis !== undefined);
    if (disable) return axisComponent;
    axis = axis || {};
    const labelAngle = (0, $5z0Qu.getLabelAngle)(fieldOrDatumDef, axis, channel, config.style, axisConfigs);
    const ruleParams = {
        fieldOrDatumDef: fieldOrDatumDef,
        axis: axis,
        channel: channel,
        model: model,
        scaleType: scaleType,
        orient: orient,
        labelAngle: labelAngle,
        mark: mark,
        config: config
    };
    // 1.2. Add properties
    for (const property of (0, $9D1GO.AXIS_COMPONENT_PROPERTIES)){
        const value = property in (0, $5z0Qu.axisRules) ? (0, $5z0Qu.axisRules)[property](ruleParams) : (0, $lUV6x.isAxisProperty)(property) ? axis[property] : undefined;
        const hasValue = value !== undefined;
        const explicit = $4f5e5214e1297c1c$var$isExplicit(value, property, axis, model, channel);
        if (hasValue && explicit) axisComponent.set(property, value, explicit);
        else {
            const { configValue: configValue, configFrom: configFrom } = (0, $lUV6x.isAxisProperty)(property) && property !== "values" ? (0, $cQy2B.getAxisConfig)(property, config.style, axis.style, axisConfigs) : {};
            const hasConfigValue = configValue !== undefined;
            if (hasValue && !hasConfigValue) // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)
            axisComponent.set(property, value, explicit);
            else if (// Cases need implicit values
            // 1. Axis config that aren't available in Vega
            !(configFrom === "vgAxisConfig") || // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)
            $4f5e5214e1297c1c$var$propsToAlwaysIncludeConfig.has(property) && hasConfigValue || // 3. Conditional axis values and signals
            (0, $lUV6x.isConditionalAxisValue)(configValue) || (0, $4xdf1.isSignalRef)(configValue)) // If a config is specified and is conditional, copy conditional value from axis config
            axisComponent.set(property, configValue, false);
        }
    }
    // 2) Add guide encode definition groups
    const axisEncoding = (_c = axis.encoding) !== null && _c !== void 0 ? _c : {};
    const axisEncode = (0, $lUV6x.AXIS_PARTS).reduce((e, part)=>{
        var _a;
        if (!axisComponent.hasAxisPart(part)) // No need to create encode for a disabled part.
        return e;
        const axisEncodingPart = (0, $4BwXy.guideEncodeEntry)((_a = axisEncoding[part]) !== null && _a !== void 0 ? _a : {}, model);
        const value = part === "labels" ? $g6DYC.labels(model, channel, axisEncodingPart) : axisEncodingPart;
        if (value !== undefined && !(0, $7k4G6.isEmpty)(value)) e[part] = {
            update: value
        };
        return e;
    }, {});
    // FIXME: By having encode as one property, we won't have fine grained encode merging.
    if (!(0, $7k4G6.isEmpty)(axisEncode)) axisComponent.set("encode", axisEncode, !!axis.encoding || axis.labelAngle !== undefined);
    return axisComponent;
}

});
parcelRegister("9D1GO", function(module, exports) {

$parcel$export(module.exports, "AXIS_COMPONENT_PROPERTIES", () => $702911167c46f4cb$export$d2af3ea4b71b6949);
$parcel$export(module.exports, "AxisComponent", () => $702911167c46f4cb$export$4a8eabd09ea9cbd4);

var $lUV6x = parcelRequire("lUV6x");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $5T1O4 = parcelRequire("5T1O4");
function $702911167c46f4cb$var$isFalseOrNull(v) {
    return v === false || v === null;
}
const $702911167c46f4cb$var$AXIS_COMPONENT_PROPERTIES_INDEX = Object.assign(Object.assign({
    disable: 1,
    gridScale: 1,
    scale: 1
}, (0, $lUV6x.COMMON_AXIS_PROPERTIES_INDEX)), {
    labelExpr: 1,
    encode: 1
});
const $702911167c46f4cb$export$d2af3ea4b71b6949 = (0, $7k4G6.keys)($702911167c46f4cb$var$AXIS_COMPONENT_PROPERTIES_INDEX);
class $702911167c46f4cb$export$4a8eabd09ea9cbd4 extends (0, $5T1O4.Split) {
    constructor(explicit = {}, implicit = {}, mainExtracted = false){
        super();
        this.explicit = explicit;
        this.implicit = implicit;
        this.mainExtracted = mainExtracted;
    }
    clone() {
        return new $702911167c46f4cb$export$4a8eabd09ea9cbd4((0, $7k4G6.duplicate)(this.explicit), (0, $7k4G6.duplicate)(this.implicit), this.mainExtracted);
    }
    hasAxisPart(part) {
        // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.
        if (part === "axis") // always has the axis container part
        return true;
        if (part === "grid" || part === "title") return !!this.get(part);
        // Other parts are enabled by default, so they should not be false or null.
        return !$702911167c46f4cb$var$isFalseOrNull(this.get(part));
    }
    hasOrientSignalRef() {
        return (0, $4xdf1.isSignalRef)(this.explicit.orient);
    }
}

});

parcelRegister("g6DYC", function(module, exports) {

$parcel$export(module.exports, "labels", () => $bb9c376eebdf3402$export$a238cb463698c900);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $7oTmT = parcelRequire("7oTmT");
function $bb9c376eebdf3402$export$a238cb463698c900(model, channel, specifiedLabelsSpec) {
    var _a;
    const { encoding: encoding, config: config } = model;
    const fieldOrDatumDef = (_a = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel])) !== null && _a !== void 0 ? _a : (0, $2hAmp.getFieldOrDatumDef)(encoding[(0, $fWfT0.getSecondaryRangeChannel)(channel)]);
    const axis = model.axis(channel) || {};
    const { format: format, formatType: formatType } = axis;
    if ((0, $7oTmT.isCustomFormatType)(formatType)) return Object.assign({
        text: (0, $7oTmT.formatCustomType)({
            fieldOrDatumDef: fieldOrDatumDef,
            field: "datum.value",
            format: format,
            formatType: formatType,
            config: config
        })
    }, specifiedLabelsSpec);
    return specifiedLabelsSpec;
}

});


parcelRegister("gJzO9", function(module, exports) {

$parcel$export(module.exports, "UnitModel", () => $c2eca00901e190df$export$cef47c19fd92e4f4);

var $2bi3s = parcelRequire("2bi3s");

var $lUV6x = parcelRequire("lUV6x");

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $iK8OT = parcelRequire("iK8OT");

var $8eU8A = parcelRequire("8eU8A");

var $5C8w7 = parcelRequire("5C8w7");

var $9mRLv = parcelRequire("9mRLv");

var $7Eu98 = parcelRequire("7Eu98");

var $7QxS6 = parcelRequire("7QxS6");

var $7k4G6 = parcelRequire("7k4G6");

var $dCse2 = parcelRequire("dCse2");

var $6Otx4 = parcelRequire("6Otx4");

var $9ulW1 = parcelRequire("9ulW1");

var $iRvxE = parcelRequire("iRvxE");

var $eGXJ8 = parcelRequire("eGXJ8");

var $3Mdta = parcelRequire("3Mdta");

var $6aA2s = parcelRequire("6aA2s");

var $6SSHX = parcelRequire("6SSHX");

var $051a2 = parcelRequire("051a2");

var $jkJyY = parcelRequire("jkJyY");

var $ls1My = parcelRequire("ls1My");

var $dNHyS = parcelRequire("dNHyS");
class $c2eca00901e190df$export$cef47c19fd92e4f4 extends (0, $jkJyY.ModelWithField) {
    constructor(spec, parent, parentGivenName, parentGivenSize = {}, config){
        super(spec, "unit", parent, parentGivenName, config, undefined, (0, $7Eu98.isFrameMixins)(spec) ? spec.view : undefined);
        this.specifiedScales = {};
        this.specifiedAxes = {};
        this.specifiedLegends = {};
        this.specifiedProjection = {};
        this.selection = {};
        this.children = [];
        const markDef = (0, $9mRLv.isMarkDef)(spec.mark) ? Object.assign({}, spec.mark) : {
            type: spec.mark
        };
        const mark = markDef.type;
        // Need to init filled before other mark properties because encoding depends on filled but other mark properties depend on types inside encoding
        if (markDef.filled === undefined) markDef.filled = (0, $6SSHX.defaultFilled)(markDef, config, {
            graticule: spec.data && (0, $iK8OT.isGraticuleGenerator)(spec.data)
        });
        const encoding = this.encoding = (0, $8eU8A.initEncoding)(spec.encoding || {}, mark, markDef.filled, config);
        this.markDef = (0, $6SSHX.initMarkdef)(markDef, encoding, config);
        this.size = (0, $3Mdta.initLayoutSize)({
            encoding: encoding,
            size: (0, $7Eu98.isFrameMixins)(spec) ? Object.assign(Object.assign(Object.assign({}, parentGivenSize), spec.width ? {
                width: spec.width
            } : {}), spec.height ? {
                height: spec.height
            } : {}) : parentGivenSize
        });
        // calculate stack properties
        this.stack = (0, $7QxS6.stack)(mark, encoding);
        this.specifiedScales = this.initScales(mark, encoding);
        this.specifiedAxes = this.initAxes(encoding);
        this.specifiedLegends = this.initLegends(encoding);
        this.specifiedProjection = spec.projection;
        // Selections will be initialized upon parse.
        this.selection = spec.selection;
    }
    get hasProjection() {
        const { encoding: encoding } = this;
        const isGeoShapeMark = this.mark === (0, $9mRLv.GEOSHAPE);
        const hasGeoPosition = encoding && (0, $fWfT0.GEOPOSITION_CHANNELS).some((channel)=>(0, $2hAmp.isFieldOrDatumDef)(encoding[channel]));
        return isGeoShapeMark || hasGeoPosition;
    }
    /**
     * Return specified Vega-Lite scale domain for a particular channel
     * @param channel
     */ scaleDomain(channel) {
        const scale = this.specifiedScales[channel];
        return scale ? scale.domain : undefined;
    }
    axis(channel) {
        return this.specifiedAxes[channel];
    }
    legend(channel) {
        return this.specifiedLegends[channel];
    }
    initScales(mark, encoding) {
        return (0, $fWfT0.SCALE_CHANNELS).reduce((scales, channel)=>{
            var _a;
            const fieldOrDatumDef = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]);
            if (fieldOrDatumDef) scales[channel] = this.initScale((_a = fieldOrDatumDef.scale) !== null && _a !== void 0 ? _a : {});
            return scales;
        }, {});
    }
    initScale(scale) {
        const { domain: domain, range: range } = scale;
        const scaleInternal = (0, $5C8w7.replaceExprRefInIndex)(scale);
        if ((0, $2bi3s.isArray)(domain)) scaleInternal.domain = domain.map((0, $9ulW1.signalRefOrValue));
        if ((0, $2bi3s.isArray)(range)) scaleInternal.range = range.map((0, $9ulW1.signalRefOrValue));
        return scaleInternal;
    }
    initAxes(encoding) {
        return (0, $fWfT0.POSITION_SCALE_CHANNELS).reduce((_axis, channel)=>{
            // Position Axis
            // TODO: handle ConditionFieldDef
            const channelDef = encoding[channel];
            if ((0, $2hAmp.isFieldOrDatumDef)(channelDef) || channel === (0, $fWfT0.X) && (0, $2hAmp.isFieldOrDatumDef)(encoding.x2) || channel === (0, $fWfT0.Y) && (0, $2hAmp.isFieldOrDatumDef)(encoding.y2)) {
                const axisSpec = (0, $2hAmp.isFieldOrDatumDef)(channelDef) ? channelDef.axis : undefined;
                _axis[channel] = axisSpec ? this.initAxis(Object.assign({}, axisSpec)) // convert truthy value to object
                 : axisSpec;
            }
            return _axis;
        }, {});
    }
    initAxis(axis) {
        const props = (0, $7k4G6.keys)(axis);
        const axisInternal = {};
        for (const prop of props){
            const val = axis[prop];
            axisInternal[prop] = (0, $lUV6x.isConditionalAxisValue)(val) ? (0, $9ulW1.signalOrValueRefWithCondition)(val) : (0, $9ulW1.signalRefOrValue)(val);
        }
        return axisInternal;
    }
    initLegends(encoding) {
        return (0, $fWfT0.NONPOSITION_SCALE_CHANNELS).reduce((_legend, channel)=>{
            const fieldOrDatumDef = (0, $2hAmp.getFieldOrDatumDef)(encoding[channel]);
            if (fieldOrDatumDef && (0, $fWfT0.supportLegend)(channel)) {
                const legend = fieldOrDatumDef.legend;
                _legend[channel] = legend ? (0, $5C8w7.replaceExprRefInIndex)(legend) // convert truthy value to object
                 : legend;
            }
            return _legend;
        }, {});
    }
    parseData() {
        this.component.data = (0, $iRvxE.parseData)(this);
    }
    parseLayoutSize() {
        (0, $6aA2s.parseUnitLayoutSize)(this);
    }
    parseSelections() {
        this.component.selection = (0, $dNHyS.parseUnitSelection)(this, this.selection);
    }
    parseMarkGroup() {
        this.component.mark = (0, $051a2.parseMarkGroups)(this);
    }
    parseAxesAndHeaders() {
        this.component.axes = (0, $6Otx4.parseUnitAxes)(this);
    }
    assembleSelectionTopLevelSignals(signals) {
        return (0, $ls1My.assembleTopLevelSignals)(this, signals);
    }
    assembleSignals() {
        return [
            ...(0, $dCse2.assembleAxisSignals)(this),
            ...(0, $ls1My.assembleUnitSelectionSignals)(this, [])
        ];
    }
    assembleSelectionData(data) {
        return (0, $ls1My.assembleUnitSelectionData)(this, data);
    }
    assembleLayout() {
        return null;
    }
    assembleLayoutSignals() {
        return (0, $eGXJ8.assembleLayoutSignals)(this);
    }
    assembleMarks() {
        var _a;
        let marks = (_a = this.component.mark) !== null && _a !== void 0 ? _a : [];
        // If this unit is part of a layer, selections should augment
        // all in concert rather than each unit individually. This
        // ensures correct interleaving of clipping and brushed marks.
        if (!this.parent || !(0, $jkJyY.isLayerModel)(this.parent)) marks = (0, $ls1My.assembleUnitSelectionMarks)(this, marks);
        return marks.map(this.correctDataNames);
    }
    getMapping() {
        return this.encoding;
    }
    get mark() {
        return this.markDef.type;
    }
    channelHasField(channel) {
        return $8eU8A.channelHasField(this.encoding, channel);
    }
    fieldDef(channel) {
        const channelDef = this.encoding[channel];
        return (0, $2hAmp.getFieldDef)(channelDef);
    }
    typedFieldDef(channel) {
        const fieldDef = this.fieldDef(channel);
        if ((0, $2hAmp.isTypedFieldDef)(fieldDef)) return fieldDef;
        return null;
    }
}

});
parcelRegister("3Mdta", function(module, exports) {

$parcel$export(module.exports, "initLayoutSize", () => $2c004d8f985ea216$export$fe30dbb04f0482d0);

var $fWfT0 = parcelRequire("fWfT0");

var $2hAmp = parcelRequire("2hAmp");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $7Eu98 = parcelRequire("7Eu98");
function $2c004d8f985ea216$export$fe30dbb04f0482d0({ encoding: encoding, size: size }) {
    for (const channel of (0, $fWfT0.POSITION_SCALE_CHANNELS)){
        const sizeType = (0, $fWfT0.getSizeChannel)(channel);
        if ((0, $7Eu98.isStep)(size[sizeType])) {
            if ((0, $2hAmp.isContinuousFieldOrDatumDef)(encoding[channel])) {
                delete size[sizeType];
                $3XBQv.warn($bHNid.stepDropped(sizeType));
            }
        }
    }
    return size;
}

});

parcelRegister("6SSHX", function(module, exports) {

$parcel$export(module.exports, "initMarkdef", () => $5032391c20c18ac8$export$71927f1e567fa943);
$parcel$export(module.exports, "defaultFilled", () => $5032391c20c18ac8$export$84a639b92f0a823c);

var $iR8lA = parcelRequire("iR8lA");

var $2hAmp = parcelRequire("2hAmp");

var $8eU8A = parcelRequire("8eU8A");

var $5C8w7 = parcelRequire("5C8w7");

var $3XBQv = parcelRequire("3XBQv");
var $bHNid = parcelRequire("bHNid");

var $9mRLv = parcelRequire("9mRLv");

var $9LX7L = parcelRequire("9LX7L");

var $7k4G6 = parcelRequire("7k4G6");

var $9ulW1 = parcelRequire("9ulW1");
function $5032391c20c18ac8$export$71927f1e567fa943(originalMarkDef, encoding, config) {
    const markDef = (0, $5C8w7.replaceExprRefInIndex)(originalMarkDef);
    // set orient, which can be overridden by rules as sometimes the specified orient is invalid.
    const specifiedOrient = (0, $9ulW1.getMarkPropOrConfig)("orient", markDef, config);
    markDef.orient = $5032391c20c18ac8$var$orient(markDef.type, encoding, specifiedOrient);
    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) $3XBQv.warn($bHNid.orientOverridden(markDef.orient, specifiedOrient));
    if (markDef.type === "bar" && markDef.orient) {
        const cornerRadiusEnd = (0, $9ulW1.getMarkPropOrConfig)("cornerRadiusEnd", markDef, config);
        if (cornerRadiusEnd !== undefined) {
            const newProps = markDef.orient === "horizontal" && encoding.x2 || markDef.orient === "vertical" && encoding.y2 ? [
                "cornerRadius"
            ] : (0, $9mRLv.BAR_CORNER_RADIUS_INDEX)[markDef.orient];
            for (const newProp of newProps)markDef[newProp] = cornerRadiusEnd;
            if (markDef.cornerRadiusEnd !== undefined) delete markDef.cornerRadiusEnd; // no need to keep the original cap cornerRadius
        }
    }
    // set opacity and filled if not specified in mark config
    const specifiedOpacity = (0, $9ulW1.getMarkPropOrConfig)("opacity", markDef, config);
    if (specifiedOpacity === undefined) markDef.opacity = $5032391c20c18ac8$var$opacity(markDef.type, encoding);
    // set cursor, which should be pointer if href channel is present unless otherwise specified
    const specifiedCursor = (0, $9ulW1.getMarkPropOrConfig)("cursor", markDef, config);
    if (specifiedCursor === undefined) markDef.cursor = $5032391c20c18ac8$var$cursor(markDef, encoding, config);
    return markDef;
}
function $5032391c20c18ac8$var$cursor(markDef, encoding, config) {
    if (encoding.href || markDef.href || (0, $9ulW1.getMarkPropOrConfig)("href", markDef, config)) return "pointer";
    return markDef.cursor;
}
function $5032391c20c18ac8$var$opacity(mark, encoding) {
    if ((0, $7k4G6.contains)([
        (0, $9mRLv.POINT),
        (0, $9mRLv.TICK),
        (0, $9mRLv.CIRCLE),
        (0, $9mRLv.SQUARE)
    ], mark)) {
        // point-based marks
        if (!(0, $8eU8A.isAggregate)(encoding)) return 0.7;
    }
    return undefined;
}
function $5032391c20c18ac8$export$84a639b92f0a823c(markDef, config, { graticule: graticule }) {
    if (graticule) return false;
    const filledConfig = (0, $9ulW1.getMarkConfig)("filled", markDef, config);
    const mark = markDef.type;
    return (0, $7k4G6.getFirstDefined)(filledConfig, mark !== (0, $9mRLv.POINT) && mark !== (0, $9mRLv.LINE) && mark !== (0, $9mRLv.RULE));
}
function $5032391c20c18ac8$var$orient(mark, encoding, specifiedOrient) {
    switch(mark){
        case 0, $9mRLv.POINT:
        case 0, $9mRLv.CIRCLE:
        case 0, $9mRLv.SQUARE:
        case 0, $9mRLv.TEXT:
        case 0, $9mRLv.RECT:
        case 0, $9mRLv.IMAGE:
            // orient is meaningless for these marks.
            return undefined;
    }
    const { x: x, y: y, x2: x2, y2: y2 } = encoding;
    switch(mark){
        case 0, $9mRLv.BAR:
            if ((0, $2hAmp.isFieldDef)(x) && ((0, $iR8lA.isBinned)(x.bin) || (0, $2hAmp.isFieldDef)(y) && y.aggregate && !x.aggregate)) return "vertical";
            if ((0, $2hAmp.isFieldDef)(y) && ((0, $iR8lA.isBinned)(y.bin) || (0, $2hAmp.isFieldDef)(x) && x.aggregate && !y.aggregate)) return "horizontal";
            if (y2 || x2) {
                // Ranged bar does not always have clear orientation, so we allow overriding
                if (specifiedOrient) return specifiedOrient;
                // If y is range and x is non-range, non-bin Q, y is likely a prebinned field
                if (!x2) {
                    if ((0, $2hAmp.isFieldDef)(x) && x.type === (0, $9LX7L.QUANTITATIVE) && !(0, $iR8lA.isBinning)(x.bin) || (0, $2hAmp.isNumericDataDef)(x)) return "horizontal";
                }
                // If x is range and y is non-range, non-bin Q, x is likely a prebinned field
                if (!y2) {
                    if ((0, $2hAmp.isFieldDef)(y) && y.type === (0, $9LX7L.QUANTITATIVE) && !(0, $iR8lA.isBinning)(y.bin) || (0, $2hAmp.isNumericDataDef)(y)) return "vertical";
                }
            }
        // falls through
        case 0, $9mRLv.RULE:
            // return undefined for line segment rule and bar with both axis ranged
            // we have to ignore the case that the data are already binned
            if (x2 && !((0, $2hAmp.isFieldDef)(x) && (0, $iR8lA.isBinned)(x.bin)) && y2 && !((0, $2hAmp.isFieldDef)(y) && (0, $iR8lA.isBinned)(y.bin))) return undefined;
        // falls through
        case 0, $9mRLv.AREA:
            // If there are range for both x and y, y (vertical) has higher precedence.
            if (y2) {
                if ((0, $2hAmp.isFieldDef)(y) && (0, $iR8lA.isBinned)(y.bin)) return "horizontal";
                else return "vertical";
            } else if (x2) {
                if ((0, $2hAmp.isFieldDef)(x) && (0, $iR8lA.isBinned)(x.bin)) return "vertical";
                else return "horizontal";
            } else if (mark === (0, $9mRLv.RULE)) {
                if (x && !y) return "vertical";
                else if (y && !x) return "horizontal";
            }
        // falls through
        case 0, $9mRLv.LINE:
        case 0, $9mRLv.TICK:
            {
                // Tick is opposite to bar, line, area and never have ranged mark.
                const xIsContinuous = (0, $2hAmp.isContinuousFieldOrDatumDef)(x);
                const yIsContinuous = (0, $2hAmp.isContinuousFieldOrDatumDef)(y);
                if (xIsContinuous && !yIsContinuous) return mark !== "tick" ? "horizontal" : "vertical";
                else if (!xIsContinuous && yIsContinuous) return mark !== "tick" ? "vertical" : "horizontal";
                else if (xIsContinuous && yIsContinuous) {
                    const xDef = x; // we can cast here since they are surely fieldDef
                    const yDef = y;
                    const xIsTemporal = xDef.type === (0, $9LX7L.TEMPORAL);
                    const yIsTemporal = yDef.type === (0, $9LX7L.TEMPORAL);
                    // temporal without timeUnit is considered continuous, but better serves as dimension
                    if (xIsTemporal && !yIsTemporal) return mark !== "tick" ? "vertical" : "horizontal";
                    else if (!xIsTemporal && yIsTemporal) return mark !== "tick" ? "horizontal" : "vertical";
                    if (!xDef.aggregate && yDef.aggregate) return mark !== "tick" ? "vertical" : "horizontal";
                    else if (xDef.aggregate && !yDef.aggregate) return mark !== "tick" ? "horizontal" : "vertical";
                    if (specifiedOrient) // When ambiguous, use user specified one.
                    return specifiedOrient;
                    return "vertical";
                } else {
                    // Discrete x Discrete case
                    if (specifiedOrient) // When ambiguous, use user specified one.
                    return specifiedOrient;
                    return undefined;
                }
            }
    }
    return "vertical";
}

});

parcelRegister("051a2", function(module, exports) {

$parcel$export(module.exports, "parseMarkGroups", () => $00f15e4d0363513a$export$465012647ff3467b);

var $2bi3s = parcelRequire("2bi3s");

var $2hAmp = parcelRequire("2hAmp");

var $iK8OT = parcelRequire("iK8OT");

var $8eU8A = parcelRequire("8eU8A");

var $9mRLv = parcelRequire("9mRLv");

var $Xb2We = parcelRequire("Xb2We");

var $7k4G6 = parcelRequire("7k4G6");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");

var $7sJH2 = parcelRequire("7sJH2");

var $jAdLR = parcelRequire("jAdLR");

var $hWpWs = parcelRequire("hWpWs");

var $byWLX = parcelRequire("byWLX");

var $geAyp = parcelRequire("geAyp");

var $kMUwF = parcelRequire("kMUwF");

var $kKn9W = parcelRequire("kKn9W");

var $eYJ6M = parcelRequire("eYJ6M");

var $iqN9B = parcelRequire("iqN9B");

var $fEj6a = parcelRequire("fEj6a");

var $guXWm = parcelRequire("guXWm");
const $00f15e4d0363513a$var$markCompiler = {
    arc: $7sJH2.arc,
    area: $jAdLR.area,
    bar: $hWpWs.bar,
    circle: $kKn9W.circle,
    geoshape: $byWLX.geoshape,
    image: $geAyp.image,
    line: $kMUwF.line,
    point: $kKn9W.point,
    rect: $eYJ6M.rect,
    rule: $iqN9B.rule,
    square: $kKn9W.square,
    text: $fEj6a.text,
    tick: $guXWm.tick,
    trail: $kMUwF.trail
};
function $00f15e4d0363513a$export$465012647ff3467b(model) {
    if ((0, $7k4G6.contains)([
        (0, $9mRLv.LINE),
        (0, $9mRLv.AREA),
        (0, $9mRLv.TRAIL)
    ], model.mark)) {
        const details = (0, $8eU8A.pathGroupingFields)(model.mark, model.encoding);
        if (details.length > 0) return $00f15e4d0363513a$var$getPathGroups(model, details);
    // otherwise use standard mark groups
    } else if ((0, $7k4G6.contains)([
        (0, $9mRLv.BAR)
    ], model.mark)) {
        const hasCornerRadius = (0, $4xdf1.VG_CORNERRADIUS_CHANNELS).some((prop)=>(0, $9ulW1.getMarkPropOrConfig)(prop, model.markDef, model.config));
        if (model.stack && !model.fieldDef("size") && hasCornerRadius) return $00f15e4d0363513a$var$getGroupsForStackedBarWithCornerRadius(model);
    }
    return $00f15e4d0363513a$var$getMarkGroup(model);
}
const $00f15e4d0363513a$var$FACETED_PATH_PREFIX = "faceted_path_";
function $00f15e4d0363513a$var$getPathGroups(model, details) {
    // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
    return [
        {
            name: model.getName("pathgroup"),
            type: "group",
            from: {
                facet: {
                    name: $00f15e4d0363513a$var$FACETED_PATH_PREFIX + model.requestDataName((0, $iK8OT.DataSourceType).Main),
                    data: model.requestDataName((0, $iK8OT.DataSourceType).Main),
                    groupby: details
                }
            },
            encode: {
                update: {
                    width: {
                        field: {
                            group: "width"
                        }
                    },
                    height: {
                        field: {
                            group: "height"
                        }
                    }
                }
            },
            // With subfacet for line/area group, need to use faceted data from above.
            marks: $00f15e4d0363513a$var$getMarkGroup(model, {
                fromPrefix: $00f15e4d0363513a$var$FACETED_PATH_PREFIX
            })
        }
    ];
}
const $00f15e4d0363513a$var$STACK_GROUP_PREFIX = "stack_group_";
/**
 * We need to put stacked bars into groups in order to enable cornerRadius for stacks.
 * If stack is used and the model doesn't have size encoding, we put the mark into groups,
 * and apply cornerRadius properties at the group.
 */ function $00f15e4d0363513a$var$getGroupsForStackedBarWithCornerRadius(model) {
    // Generate the mark
    const [mark] = $00f15e4d0363513a$var$getMarkGroup(model, {
        fromPrefix: $00f15e4d0363513a$var$STACK_GROUP_PREFIX
    });
    // Get the scale for the stacked field
    const fieldScale = model.scaleName(model.stack.fieldChannel);
    const stackField = (opt = {})=>model.vgField(model.stack.fieldChannel, opt);
    // Find the min/max of the pixel value on the stacked direction
    const stackFieldGroup = (func, expr)=>{
        const vgFieldMinMax = [
            stackField({
                prefix: "min",
                suffix: "start",
                expr: expr
            }),
            stackField({
                prefix: "max",
                suffix: "start",
                expr: expr
            }),
            stackField({
                prefix: "min",
                suffix: "end",
                expr: expr
            }),
            stackField({
                prefix: "max",
                suffix: "end",
                expr: expr
            })
        ];
        return `${func}(${vgFieldMinMax.map((field)=>`scale('${fieldScale}',${field})`).join(",")})`;
    };
    let groupUpdate;
    let innerGroupUpdate;
    // Build the encoding for group and an inner group
    if (model.stack.fieldChannel === "x") {
        // Move cornerRadius, y/yc/y2/height properties to group
        // Group x/x2 should be the min/max of the marks within
        groupUpdate = Object.assign(Object.assign({}, (0, $7k4G6.pick)(mark.encode.update, [
            "y",
            "yc",
            "y2",
            "height",
            ...(0, $4xdf1.VG_CORNERRADIUS_CHANNELS)
        ])), {
            x: {
                signal: stackFieldGroup("min", "datum")
            },
            x2: {
                signal: stackFieldGroup("max", "datum")
            },
            clip: {
                value: true
            }
        });
        // Inner group should revert the x translation, and pass height through
        innerGroupUpdate = {
            x: {
                field: {
                    group: "x"
                },
                mult: -1
            },
            height: {
                field: {
                    group: "height"
                }
            }
        };
        // The marks should use the same height as group, without y/yc/y2 properties (because it's already done by group)
        // This is why size encoding is not supported yet
        mark.encode.update = Object.assign(Object.assign({}, (0, $7k4G6.omit)(mark.encode.update, [
            "y",
            "yc",
            "y2"
        ])), {
            height: {
                field: {
                    group: "height"
                }
            }
        });
    } else {
        groupUpdate = Object.assign(Object.assign({}, (0, $7k4G6.pick)(mark.encode.update, [
            "x",
            "xc",
            "x2",
            "width"
        ])), {
            y: {
                signal: stackFieldGroup("min", "datum")
            },
            y2: {
                signal: stackFieldGroup("max", "datum")
            },
            clip: {
                value: true
            }
        });
        innerGroupUpdate = {
            y: {
                field: {
                    group: "y"
                },
                mult: -1
            },
            width: {
                field: {
                    group: "width"
                }
            }
        };
        mark.encode.update = Object.assign(Object.assign({}, (0, $7k4G6.omit)(mark.encode.update, [
            "x",
            "xc",
            "x2"
        ])), {
            width: {
                field: {
                    group: "width"
                }
            }
        });
    }
    // Deal with cornerRadius properties
    for (const key of (0, $4xdf1.VG_CORNERRADIUS_CHANNELS)){
        const configValue = (0, $9ulW1.getMarkConfig)(key, model.markDef, model.config);
        // Move from mark to group
        if (mark.encode.update[key]) {
            groupUpdate[key] = mark.encode.update[key];
            delete mark.encode.update[key];
        } else if (configValue) groupUpdate[key] = (0, $9ulW1.signalOrValueRef)(configValue);
        // Overwrite any cornerRadius on mark set by config --- they are already moved to the group
        if (configValue) mark.encode.update[key] = {
            value: 0
        };
    }
    // For bin and time unit, we have to add bin/timeunit -end channels.
    const groupByField = model.fieldDef(model.stack.groupbyChannel);
    const groupby = (0, $2hAmp.vgField)(groupByField) ? [
        (0, $2hAmp.vgField)(groupByField)
    ] : [];
    if ((groupByField === null || groupByField === void 0 ? void 0 : groupByField.bin) || (groupByField === null || groupByField === void 0 ? void 0 : groupByField.timeUnit)) groupby.push((0, $2hAmp.vgField)(groupByField, {
        binSuffix: "end"
    }));
    const strokeProperties = [
        "stroke",
        "strokeWidth",
        "strokeJoin",
        "strokeCap",
        "strokeDash",
        "strokeDashOffset",
        "strokeMiterLimit",
        "strokeOpacity"
    ];
    // Generate stroke properties for the group
    groupUpdate = strokeProperties.reduce((encode, prop)=>{
        if (mark.encode.update[prop]) return Object.assign(Object.assign({}, encode), {
            [prop]: mark.encode.update[prop]
        });
        else {
            const configValue = (0, $9ulW1.getMarkConfig)(prop, model.markDef, model.config);
            if (configValue !== undefined) return Object.assign(Object.assign({}, encode), {
                [prop]: (0, $9ulW1.signalOrValueRef)(configValue)
            });
            else return encode;
        }
    }, groupUpdate);
    // Apply strokeForeground and strokeOffset if stroke is used
    if (groupUpdate.stroke) {
        groupUpdate.strokeForeground = {
            value: true
        };
        groupUpdate.strokeOffset = {
            value: 0
        };
    }
    return [
        {
            type: "group",
            from: {
                facet: {
                    data: model.requestDataName((0, $iK8OT.DataSourceType).Main),
                    name: $00f15e4d0363513a$var$STACK_GROUP_PREFIX + model.requestDataName((0, $iK8OT.DataSourceType).Main),
                    groupby: groupby,
                    aggregate: {
                        fields: [
                            stackField({
                                suffix: "start"
                            }),
                            stackField({
                                suffix: "start"
                            }),
                            stackField({
                                suffix: "end"
                            }),
                            stackField({
                                suffix: "end"
                            })
                        ],
                        ops: [
                            "min",
                            "max",
                            "min",
                            "max"
                        ]
                    }
                }
            },
            encode: {
                update: groupUpdate
            },
            marks: [
                {
                    type: "group",
                    encode: {
                        update: innerGroupUpdate
                    },
                    marks: [
                        mark
                    ]
                }
            ]
        }
    ];
}
function $00f15e4d0363513a$export$9cf0cb3e0918cf99(model) {
    const { encoding: encoding, stack: stack, mark: mark, markDef: markDef, config: config } = model;
    const order = encoding.order;
    if (!(0, $2bi3s.isArray)(order) && (0, $2hAmp.isValueDef)(order) && (0, $7k4G6.isNullOrFalse)(order.value) || !order && (0, $7k4G6.isNullOrFalse)((0, $9ulW1.getMarkPropOrConfig)("order", markDef, config))) return undefined;
    else if (((0, $2bi3s.isArray)(order) || (0, $2hAmp.isFieldDef)(order)) && !stack) // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)
    return (0, $9ulW1.sortParams)(order, {
        expr: "datum"
    });
    else if ((0, $9mRLv.isPathMark)(mark)) {
        // For both line and area, we sort values based on dimension by default
        const dimensionChannel = markDef.orient === "horizontal" ? "y" : "x";
        const dimensionChannelDef = encoding[dimensionChannel];
        if ((0, $2hAmp.isFieldDef)(dimensionChannelDef)) {
            const s = dimensionChannelDef.sort;
            if ((0, $2bi3s.isArray)(s)) return {
                field: (0, $2hAmp.vgField)(dimensionChannelDef, {
                    prefix: dimensionChannel,
                    suffix: "sort_index",
                    expr: "datum"
                })
            };
            else if ((0, $Xb2We.isSortField)(s)) return {
                field: (0, $2hAmp.vgField)({
                    // FIXME: this op might not already exist?
                    // FIXME: what if dimensionChannel (x or y) contains custom domain?
                    aggregate: (0, $8eU8A.isAggregate)(model.encoding) ? s.op : undefined,
                    field: s.field
                }, {
                    expr: "datum"
                })
            };
            else if ((0, $Xb2We.isSortByEncoding)(s)) {
                const fieldDefToSort = model.fieldDef(s.encoding);
                return {
                    field: (0, $2hAmp.vgField)(fieldDefToSort, {
                        expr: "datum"
                    }),
                    order: s.order
                };
            } else if (s === null) return undefined;
            else return {
                field: (0, $2hAmp.vgField)(dimensionChannelDef, {
                    // For stack with imputation, we only have bin_mid
                    binSuffix: model.stack && model.stack.impute ? "mid" : undefined,
                    expr: "datum"
                })
            };
        }
        return undefined;
    }
    return undefined;
}
function $00f15e4d0363513a$var$getMarkGroup(model, opt = {
    fromPrefix: ""
}) {
    const { mark: mark, markDef: markDef, encoding: encoding, config: config } = model;
    const clip = (0, $7k4G6.getFirstDefined)(markDef.clip, $00f15e4d0363513a$var$scaleClip(model), $00f15e4d0363513a$var$projectionClip(model));
    const style = (0, $9ulW1.getStyles)(markDef);
    const key = encoding.key;
    const sort = $00f15e4d0363513a$export$9cf0cb3e0918cf99(model);
    const interactive = $00f15e4d0363513a$var$interactiveFlag(model);
    const aria = (0, $9ulW1.getMarkPropOrConfig)("aria", markDef, config);
    const postEncodingTransform = $00f15e4d0363513a$var$markCompiler[mark].postEncodingTransform ? $00f15e4d0363513a$var$markCompiler[mark].postEncodingTransform(model) : null;
    return [
        Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
            name: model.getName("marks"),
            type: $00f15e4d0363513a$var$markCompiler[mark].vgMark
        }, clip ? {
            clip: true
        } : {}), style ? {
            style: style
        } : {}), key ? {
            key: key.field
        } : {}), sort ? {
            sort: sort
        } : {}), interactive ? interactive : {}), aria === false ? {
            aria: aria
        } : {}), {
            from: {
                data: opt.fromPrefix + model.requestDataName((0, $iK8OT.DataSourceType).Main)
            },
            encode: {
                update: $00f15e4d0363513a$var$markCompiler[mark].encodeEntry(model)
            }
        }), postEncodingTransform ? {
            transform: postEncodingTransform
        } : {})
    ];
}
/**
 * If scales are bound to interval selections, we want to automatically clip
 * marks to account for panning/zooming interactions. We identify bound scales
 * by the selectionExtent property, which gets added during scale parsing.
 */ function $00f15e4d0363513a$var$scaleClip(model) {
    const xScale = model.getScaleComponent("x");
    const yScale = model.getScaleComponent("y");
    return xScale && xScale.get("selectionExtent") || yScale && yScale.get("selectionExtent") ? true : undefined;
}
/**
 * If we use a custom projection with auto-fitting to the geodata extent,
 * we need to clip to ensure the chart size doesn't explode.
 */ function $00f15e4d0363513a$var$projectionClip(model) {
    const projection = model.component.projection;
    return projection && !projection.isFit ? true : undefined;
}
/**
 * Only output interactive flags if we have selections defined somewhere in our model hierarchy.
 */ function $00f15e4d0363513a$var$interactiveFlag(model) {
    if (!model.component.selection) return null;
    const unitCount = (0, $7k4G6.keys)(model.component.selection).length;
    let parentCount = unitCount;
    let parent = model.parent;
    while(parent && parentCount === 0){
        parentCount = (0, $7k4G6.keys)(parent.component.selection).length;
        parent = parent.parent;
    }
    return parentCount ? {
        interactive: unitCount > 0 || !!model.encoding.tooltip
    } : null;
}

});
parcelRegister("7sJH2", function(module, exports) {

$parcel$export(module.exports, "arc", () => $56ee97a461c9cf4e$export$ff1ef9a5c671f043);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $e5Unf = parcelRequire("e5Unf");
var $8i09u = parcelRequire("8i09u");
const $56ee97a461c9cf4e$export$ff1ef9a5c671f043 = {
    vgMark: "arc",
    encodeEntry: (model)=>{
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            size: "ignore",
            orient: "ignore",
            theta: "ignore"
        })), $e5Unf.pointPosition("x", model, {
            defaultPos: "mid"
        })), $e5Unf.pointPosition("y", model, {
            defaultPos: "mid"
        })), $8i09u.rectPosition(model, "radius", "arc")), $8i09u.rectPosition(model, "theta", "arc"));
    }
};

});

parcelRegister("jAdLR", function(module, exports) {

$parcel$export(module.exports, "area", () => $e41c0fb84cebddb6$export$bb3edc44842b5f2e);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $StYuR = parcelRequire("StYuR");
var $rytcO = parcelRequire("rytcO");
const $e41c0fb84cebddb6$export$bb3edc44842b5f2e = {
    vgMark: "area",
    encodeEntry: (model)=>{
        return Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            orient: "include",
            size: "ignore",
            theta: "ignore"
        })), $StYuR.pointOrRangePosition("x", model, {
            defaultPos: "zeroOrMin",
            defaultPos2: "zeroOrMin",
            range: model.markDef.orient === "horizontal"
        })), $StYuR.pointOrRangePosition("y", model, {
            defaultPos: "zeroOrMin",
            defaultPos2: "zeroOrMin",
            range: model.markDef.orient === "vertical"
        })), $rytcO.defined(model));
    }
};

});

parcelRegister("hWpWs", function(module, exports) {

$parcel$export(module.exports, "bar", () => $d0fbf9f3f8b27029$export$d927737047eb3867);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $8i09u = parcelRequire("8i09u");
const $d0fbf9f3f8b27029$export$d927737047eb3867 = {
    vgMark: "rect",
    encodeEntry: (model)=>{
        return Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            orient: "ignore",
            size: "ignore",
            theta: "ignore"
        })), $8i09u.rectPosition(model, "x", "bar")), $8i09u.rectPosition(model, "y", "bar"));
    }
};

});

parcelRegister("byWLX", function(module, exports) {

$parcel$export(module.exports, "geoshape", () => $86b075a84271a27c$export$f63112e2d6be4828);

var $2hAmp = parcelRequire("2hAmp");

var $9LX7L = parcelRequire("9LX7L");
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
const $86b075a84271a27c$export$f63112e2d6be4828 = {
    vgMark: "shape",
    encodeEntry: (model)=>{
        return Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            size: "ignore",
            orient: "ignore",
            theta: "ignore"
        }));
    },
    postEncodingTransform: (model)=>{
        const { encoding: encoding } = model;
        const shapeDef = encoding.shape;
        const transform = Object.assign({
            type: "geoshape",
            projection: model.projectionName()
        }, shapeDef && (0, $2hAmp.isFieldDef)(shapeDef) && shapeDef.type === (0, $9LX7L.GEOJSON) ? {
            field: (0, $2hAmp.vgField)(shapeDef, {
                expr: "datum"
            })
        } : {});
        return [
            transform
        ];
    }
};

});

parcelRegister("geAyp", function(module, exports) {

$parcel$export(module.exports, "image", () => $bd1a4f07c045d831$export$5c452ff88e35e47d);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $8i09u = parcelRequire("8i09u");
var $j0sD1 = parcelRequire("j0sD1");
const $bd1a4f07c045d831$export$5c452ff88e35e47d = {
    vgMark: "image",
    encodeEntry: (model)=>{
        return Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "ignore",
            orient: "ignore",
            size: "ignore",
            theta: "ignore"
        })), $8i09u.rectPosition(model, "x", "image")), $8i09u.rectPosition(model, "y", "image")), $j0sD1.text(model, "url"));
    }
};

});

parcelRegister("kMUwF", function(module, exports) {

$parcel$export(module.exports, "line", () => $f2242333c03ca20f$export$53f1d5ea8de3d7c);
$parcel$export(module.exports, "trail", () => $f2242333c03ca20f$export$2ad3154492b29760);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $e5Unf = parcelRequire("e5Unf");
var $1WaxU = parcelRequire("1WaxU");
var $rytcO = parcelRequire("rytcO");
const $f2242333c03ca20f$export$53f1d5ea8de3d7c = {
    vgMark: "line",
    encodeEntry: (model)=>{
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            size: "ignore",
            orient: "ignore",
            theta: "ignore"
        })), $e5Unf.pointPosition("x", model, {
            defaultPos: "mid"
        })), $e5Unf.pointPosition("y", model, {
            defaultPos: "mid"
        })), $1WaxU.nonPosition("size", model, {
            vgChannel: "strokeWidth" // VL's line size is strokeWidth
        })), $rytcO.defined(model));
    }
};
const $f2242333c03ca20f$export$2ad3154492b29760 = {
    vgMark: "trail",
    encodeEntry: (model)=>{
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            size: "include",
            orient: "ignore",
            theta: "ignore"
        })), $e5Unf.pointPosition("x", model, {
            defaultPos: "mid"
        })), $e5Unf.pointPosition("y", model, {
            defaultPos: "mid"
        })), $1WaxU.nonPosition("size", model)), $rytcO.defined(model));
    }
};

});

parcelRegister("kKn9W", function(module, exports) {

$parcel$export(module.exports, "point", () => $f1aa117d8ae5b3df$export$105684a3041cb6f3);
$parcel$export(module.exports, "circle", () => $f1aa117d8ae5b3df$export$e1d786d2f707b414);
$parcel$export(module.exports, "square", () => $f1aa117d8ae5b3df$export$dd4f28cef696bc7d);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $e5Unf = parcelRequire("e5Unf");
var $1WaxU = parcelRequire("1WaxU");
function $f1aa117d8ae5b3df$var$encodeEntry(model, fixedShape) {
    const { config: config } = model;
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
        align: "ignore",
        baseline: "ignore",
        color: "include",
        size: "include",
        orient: "ignore",
        theta: "ignore"
    })), $e5Unf.pointPosition("x", model, {
        defaultPos: "mid"
    })), $e5Unf.pointPosition("y", model, {
        defaultPos: "mid"
    })), $1WaxU.nonPosition("size", model)), $1WaxU.nonPosition("angle", model)), $f1aa117d8ae5b3df$export$a639e1af8cfa85d5(model, config, fixedShape));
}
function $f1aa117d8ae5b3df$export$a639e1af8cfa85d5(model, config, fixedShape) {
    if (fixedShape) return {
        shape: {
            value: fixedShape
        }
    };
    return $1WaxU.nonPosition("shape", model);
}
const $f1aa117d8ae5b3df$export$105684a3041cb6f3 = {
    vgMark: "symbol",
    encodeEntry: (model)=>{
        return $f1aa117d8ae5b3df$var$encodeEntry(model);
    }
};
const $f1aa117d8ae5b3df$export$e1d786d2f707b414 = {
    vgMark: "symbol",
    encodeEntry: (model)=>{
        return $f1aa117d8ae5b3df$var$encodeEntry(model, "circle");
    }
};
const $f1aa117d8ae5b3df$export$dd4f28cef696bc7d = {
    vgMark: "symbol",
    encodeEntry: (model)=>{
        return $f1aa117d8ae5b3df$var$encodeEntry(model, "square");
    }
};

});

parcelRegister("eYJ6M", function(module, exports) {

$parcel$export(module.exports, "rect", () => $ae79a8e217d4b7f8$export$4b409e53cf4df6e6);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $8i09u = parcelRequire("8i09u");
const $ae79a8e217d4b7f8$export$4b409e53cf4df6e6 = {
    vgMark: "rect",
    encodeEntry: (model)=>{
        return Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            orient: "ignore",
            size: "ignore",
            theta: "ignore"
        })), $8i09u.rectPosition(model, "x", "rect")), $8i09u.rectPosition(model, "y", "rect"));
    }
};

});

parcelRegister("iqN9B", function(module, exports) {

$parcel$export(module.exports, "rule", () => $d6b0c8a00b5f8361$export$fbeb3a3956e8a3c7);
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $StYuR = parcelRequire("StYuR");
var $1WaxU = parcelRequire("1WaxU");
const $d6b0c8a00b5f8361$export$fbeb3a3956e8a3c7 = {
    vgMark: "rule",
    encodeEntry: (model)=>{
        const { markDef: markDef } = model;
        const orient = markDef.orient;
        if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) // Show nothing if we have none of x, y, lat, and long.
        return {};
        return Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            orient: "ignore",
            size: "ignore",
            theta: "ignore"
        })), $StYuR.pointOrRangePosition("x", model, {
            defaultPos: orient === "horizontal" ? "zeroOrMax" : "mid",
            defaultPos2: "zeroOrMin",
            range: orient !== "vertical" // include x2 for horizontal or line segment rule
        })), $StYuR.pointOrRangePosition("y", model, {
            defaultPos: orient === "vertical" ? "zeroOrMax" : "mid",
            defaultPos2: "zeroOrMin",
            range: orient !== "horizontal" // include y2 for vertical or line segment rule
        })), $1WaxU.nonPosition("size", model, {
            vgChannel: "strokeWidth" // VL's rule size is strokeWidth
        }));
    }
};

});

parcelRegister("fEj6a", function(module, exports) {

$parcel$export(module.exports, "text", () => $b6496800efc41523$export$6f093cfa640b7166);

var $9ulW1 = parcelRequire("9ulW1");
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $e5Unf = parcelRequire("e5Unf");
var $j0sD1 = parcelRequire("j0sD1");
var $1WaxU = parcelRequire("1WaxU");
var $rytcO = parcelRequire("rytcO");
const $b6496800efc41523$export$6f093cfa640b7166 = {
    vgMark: "text",
    encodeEntry: (model)=>{
        const { config: config, encoding: encoding } = model;
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "include",
            baseline: "include",
            color: "include",
            size: "ignore",
            orient: "ignore",
            theta: "include"
        })), $e5Unf.pointPosition("x", model, {
            defaultPos: "mid"
        })), $e5Unf.pointPosition("y", model, {
            defaultPos: "mid"
        })), $j0sD1.text(model)), $1WaxU.nonPosition("size", model, {
            vgChannel: "fontSize" // VL's text size is fontSize
        })), $1WaxU.nonPosition("angle", model)), $rytcO.valueIfDefined("align", $b6496800efc41523$var$align(model.markDef, encoding, config))), $rytcO.valueIfDefined("baseline", $b6496800efc41523$var$baseline(model.markDef, encoding, config))), $e5Unf.pointPosition("radius", model, {
            defaultPos: null,
            isMidPoint: true
        })), $e5Unf.pointPosition("theta", model, {
            defaultPos: null,
            isMidPoint: true
        }));
    }
};
function $b6496800efc41523$var$align(markDef, encoding, config) {
    const a = (0, $9ulW1.getMarkPropOrConfig)("align", markDef, config);
    if (a === undefined) return "center";
    // If there is a config, Vega-parser will process this already.
    return undefined;
}
function $b6496800efc41523$var$baseline(markDef, encoding, config) {
    const b = (0, $9ulW1.getMarkPropOrConfig)("baseline", markDef, config);
    if (b === undefined) return "middle";
    // If there is a config, Vega-parser will process this already.
    return undefined;
}

});

parcelRegister("guXWm", function(module, exports) {

$parcel$export(module.exports, "tick", () => $c02df196b873e66c$export$55d7f61db91b7b70);

var $2bi3s = parcelRequire("2bi3s");

var $iX9mu = parcelRequire("iX9mu");

var $4xdf1 = parcelRequire("4xdf1");

var $9ulW1 = parcelRequire("9ulW1");
parcelRequire("6gzdc");
var $a8fbs = parcelRequire("a8fbs");
var $e5Unf = parcelRequire("e5Unf");
var $1WaxU = parcelRequire("1WaxU");
const $c02df196b873e66c$export$55d7f61db91b7b70 = {
    vgMark: "rect",
    encodeEntry: (model)=>{
        const { config: config, markDef: markDef } = model;
        const orient = markDef.orient;
        const vgSizeChannel = orient === "horizontal" ? "width" : "height";
        const vgThicknessChannel = orient === "horizontal" ? "height" : "width";
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, $a8fbs.baseEncodeEntry(model, {
            align: "ignore",
            baseline: "ignore",
            color: "include",
            orient: "ignore",
            size: "ignore",
            theta: "ignore"
        })), $e5Unf.pointPosition("x", model, {
            defaultPos: "mid",
            vgChannel: "xc"
        })), $e5Unf.pointPosition("y", model, {
            defaultPos: "mid",
            vgChannel: "yc"
        })), $1WaxU.nonPosition("size", model, {
            defaultValue: $c02df196b873e66c$var$defaultSize(model),
            vgChannel: vgSizeChannel
        })), {
            [vgThicknessChannel]: (0, $9ulW1.signalOrValueRef)((0, $9ulW1.getMarkPropOrConfig)("thickness", markDef, config))
        });
    }
};
function $c02df196b873e66c$var$defaultSize(model) {
    var _a;
    const { config: config, markDef: markDef } = model;
    const { orient: orient } = markDef;
    const vgSizeChannel = orient === "horizontal" ? "width" : "height";
    const scale = model.getScaleComponent(orient === "horizontal" ? "x" : "y");
    const markPropOrConfig = (_a = (0, $9ulW1.getMarkPropOrConfig)("size", markDef, config, {
        vgChannel: vgSizeChannel
    })) !== null && _a !== void 0 ? _a : config.tick.bandSize;
    if (markPropOrConfig !== undefined) return markPropOrConfig;
    else {
        const scaleRange = scale ? scale.get("range") : undefined;
        if (scaleRange && (0, $4xdf1.isVgRangeStep)(scaleRange) && (0, $2bi3s.isNumber)(scaleRange.step)) return scaleRange.step * 3 / 4;
        const defaultViewStep = (0, $iX9mu.getViewConfigDiscreteStep)(config.view, vgSizeChannel);
        return defaultViewStep * 3 / 4;
    }
}

});







parcelRegister("cBP4R", function(module, exports) {

$parcel$export(module.exports, "default", () => $92e08fa435a1fa98$export$2e2bcd8739ae039);
function $92e08fa435a1fa98$var$e(e) {
    const [n, r] = /schema\/([\w-]+)\/([\w\.\-]+)\.json$/g.exec(e).slice(1, 3);
    return {
        library: n,
        version: r
    };
}
var $92e08fa435a1fa98$export$2e2bcd8739ae039 = $92e08fa435a1fa98$var$e;

});

parcelRegister("kzC9m", function(module, exports) {

$parcel$export(module.exports, "dark", () => $efa4ab4dafafc3ce$export$55ce6f3a06c59543);
$parcel$export(module.exports, "excel", () => $efa4ab4dafafc3ce$export$288e33dd8075b52e);
$parcel$export(module.exports, "fivethirtyeight", () => $efa4ab4dafafc3ce$export$5c93b47de8d129cd);
$parcel$export(module.exports, "ggplot2", () => $efa4ab4dafafc3ce$export$56cb4621379a3713);
$parcel$export(module.exports, "latimes", () => $efa4ab4dafafc3ce$export$a855cf72af8fb2ba);
$parcel$export(module.exports, "quartz", () => $efa4ab4dafafc3ce$export$d55cf2ab6105f43e);
$parcel$export(module.exports, "vox", () => $efa4ab4dafafc3ce$export$d314535607acc32d);
$parcel$export(module.exports, "urbaninstitute", () => $efa4ab4dafafc3ce$export$a86b6ded9d0001c8);
$parcel$export(module.exports, "googlecharts", () => $efa4ab4dafafc3ce$export$8bed367dc94787da);
$parcel$export(module.exports, "powerbi", () => $efa4ab4dafafc3ce$export$2ac137c682060935);
$parcel$export(module.exports, "carbonwhite", () => $efa4ab4dafafc3ce$export$2f184032d117fb8a);
$parcel$export(module.exports, "carbong10", () => $efa4ab4dafafc3ce$export$a86cb79c0b53eef8);
$parcel$export(module.exports, "carbong90", () => $efa4ab4dafafc3ce$export$e3c542a8e55cbcd8);
$parcel$export(module.exports, "carbong100", () => $efa4ab4dafafc3ce$export$67bc6448a2a46e5c);
$parcel$export(module.exports, "version", () => $efa4ab4dafafc3ce$export$83d89fbfd8236492);
var $efa4ab4dafafc3ce$var$name = "vega-themes";
var $efa4ab4dafafc3ce$var$version$1 = "2.14.0";
var $efa4ab4dafafc3ce$var$description = "Themes for stylized Vega and Vega-Lite visualizations.";
var $efa4ab4dafafc3ce$var$keywords = [
    "vega",
    "vega-lite",
    "themes",
    "style"
];
var $efa4ab4dafafc3ce$var$license = "BSD-3-Clause";
var $efa4ab4dafafc3ce$var$author = {
    name: "UW Interactive Data Lab",
    url: "https://idl.cs.washington.edu"
};
var $efa4ab4dafafc3ce$var$contributors = [
    {
        name: "Emily Gu",
        url: "https://github.com/emilygu"
    },
    {
        name: "Arvind Satyanarayan",
        url: "http://arvindsatya.com"
    },
    {
        name: "Jeffrey Heer",
        url: "https://idl.cs.washington.edu"
    },
    {
        name: "Dominik Moritz",
        url: "https://www.domoritz.de"
    }
];
var $efa4ab4dafafc3ce$var$main = "build/vega-themes.js";
var $efa4ab4dafafc3ce$var$module = "build/vega-themes.module.js";
var $efa4ab4dafafc3ce$var$unpkg = "build/vega-themes.min.js";
var $efa4ab4dafafc3ce$var$jsdelivr = "build/vega-themes.min.js";
var $efa4ab4dafafc3ce$var$types = "build/vega-themes.module.d.ts";
var $efa4ab4dafafc3ce$var$repository = {
    type: "git",
    url: "https://github.com/vega/vega-themes.git"
};
var $efa4ab4dafafc3ce$var$files = [
    "src",
    "build"
];
var $efa4ab4dafafc3ce$var$scripts = {
    prebuild: "yarn clean",
    build: "rollup -c",
    clean: "rimraf build && rimraf examples/build",
    "copy:data": "rsync -r node_modules/vega-datasets/data/* examples/data",
    "copy:build": "rsync -r build/* examples/build",
    "deploy:gh": "yarn build && mkdir -p examples/build && rsync -r build/* examples/build && gh-pages -d examples",
    preversion: "yarn lint",
    serve: "browser-sync start -s -f build examples --serveStatic examples",
    start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
    format: "eslint . --fix",
    lint: "eslint .",
    release: "release-it"
};
var $efa4ab4dafafc3ce$var$devDependencies = {
    "@babel/core": "^7.22.9",
    "@babel/plugin-proposal-async-generator-functions": "^7.20.7",
    "@babel/plugin-proposal-json-strings": "^7.18.6",
    "@babel/plugin-proposal-object-rest-spread": "^7.20.7",
    "@babel/plugin-proposal-optional-catch-binding": "^7.18.6",
    "@babel/plugin-transform-runtime": "^7.22.9",
    "@babel/preset-env": "^7.22.9",
    "@babel/preset-typescript": "^7.22.5",
    "@release-it/conventional-changelog": "^7.0.0",
    "@rollup/plugin-json": "^6.0.0",
    "@rollup/plugin-node-resolve": "^15.1.0",
    "@rollup/plugin-terser": "^0.4.3",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "browser-sync": "^2.29.3",
    concurrently: "^8.2.0",
    eslint: "^8.45.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^5.0.0",
    "gh-pages": "^5.0.0",
    prettier: "^3.0.0",
    "release-it": "^16.1.0",
    rollup: "^3.26.2",
    "rollup-plugin-bundle-size": "^1.0.3",
    "rollup-plugin-ts": "^3.2.0",
    typescript: "^5.1.6",
    vega: "^5.25.0",
    "vega-lite": "^5.9.3"
};
var $efa4ab4dafafc3ce$var$peerDependencies = {
    vega: "*",
    "vega-lite": "*"
};
var $efa4ab4dafafc3ce$var$dependencies = {};
var $efa4ab4dafafc3ce$var$pkg = {
    name: $efa4ab4dafafc3ce$var$name,
    version: $efa4ab4dafafc3ce$var$version$1,
    description: $efa4ab4dafafc3ce$var$description,
    keywords: $efa4ab4dafafc3ce$var$keywords,
    license: $efa4ab4dafafc3ce$var$license,
    author: $efa4ab4dafafc3ce$var$author,
    contributors: $efa4ab4dafafc3ce$var$contributors,
    main: $efa4ab4dafafc3ce$var$main,
    module: $efa4ab4dafafc3ce$var$module,
    unpkg: $efa4ab4dafafc3ce$var$unpkg,
    jsdelivr: $efa4ab4dafafc3ce$var$jsdelivr,
    types: $efa4ab4dafafc3ce$var$types,
    repository: $efa4ab4dafafc3ce$var$repository,
    files: $efa4ab4dafafc3ce$var$files,
    scripts: $efa4ab4dafafc3ce$var$scripts,
    devDependencies: $efa4ab4dafafc3ce$var$devDependencies,
    peerDependencies: $efa4ab4dafafc3ce$var$peerDependencies,
    dependencies: $efa4ab4dafafc3ce$var$dependencies
};
const $efa4ab4dafafc3ce$var$lightColor = "#fff";
const $efa4ab4dafafc3ce$var$medColor = "#888";
const $efa4ab4dafafc3ce$export$55ce6f3a06c59543 = {
    background: "#333",
    view: {
        stroke: $efa4ab4dafafc3ce$var$medColor
    },
    title: {
        color: $efa4ab4dafafc3ce$var$lightColor,
        subtitleColor: $efa4ab4dafafc3ce$var$lightColor
    },
    style: {
        "guide-label": {
            fill: $efa4ab4dafafc3ce$var$lightColor
        },
        "guide-title": {
            fill: $efa4ab4dafafc3ce$var$lightColor
        }
    },
    axis: {
        domainColor: $efa4ab4dafafc3ce$var$lightColor,
        gridColor: $efa4ab4dafafc3ce$var$medColor,
        tickColor: $efa4ab4dafafc3ce$var$lightColor
    }
};
const $efa4ab4dafafc3ce$var$markColor$7 = "#4572a7";
const $efa4ab4dafafc3ce$export$288e33dd8075b52e = {
    background: "#fff",
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor$7
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor$7
    },
    line: {
        stroke: $efa4ab4dafafc3ce$var$markColor$7,
        strokeWidth: 2
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor$7
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor$7
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor$7
    },
    symbol: {
        fill: $efa4ab4dafafc3ce$var$markColor$7,
        strokeWidth: 1.5,
        size: 50
    },
    axis: {
        bandPosition: 0.5,
        grid: true,
        gridColor: "#000000",
        gridOpacity: 1,
        gridWidth: 0.5,
        labelPadding: 10,
        tickSize: 5,
        tickWidth: 0.5
    },
    axisBand: {
        grid: false,
        tickExtra: true
    },
    legend: {
        labelBaseline: "middle",
        labelFontSize: 11,
        symbolSize: 50,
        symbolType: "square"
    },
    range: {
        category: [
            "#4572a7",
            "#aa4643",
            "#8aa453",
            "#71598e",
            "#4598ae",
            "#d98445",
            "#94aace",
            "#d09393",
            "#b9cc98",
            "#a99cbc"
        ]
    }
};
const $efa4ab4dafafc3ce$var$markColor$6 = "#30a2da";
const $efa4ab4dafafc3ce$var$axisColor$2 = "#cbcbcb";
const $efa4ab4dafafc3ce$var$guideLabelColor = "#999";
const $efa4ab4dafafc3ce$var$guideTitleColor = "#333";
const $efa4ab4dafafc3ce$var$backgroundColor$2 = "#f0f0f0";
const $efa4ab4dafafc3ce$var$blackTitle = "#333";
const $efa4ab4dafafc3ce$export$5c93b47de8d129cd = {
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor$6
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor$6
    },
    axis: {
        domainColor: $efa4ab4dafafc3ce$var$axisColor$2,
        grid: true,
        gridColor: $efa4ab4dafafc3ce$var$axisColor$2,
        gridWidth: 1,
        labelColor: $efa4ab4dafafc3ce$var$guideLabelColor,
        labelFontSize: 10,
        titleColor: $efa4ab4dafafc3ce$var$guideTitleColor,
        tickColor: $efa4ab4dafafc3ce$var$axisColor$2,
        tickSize: 10,
        titleFontSize: 14,
        titlePadding: 10,
        labelPadding: 4
    },
    axisBand: {
        grid: false
    },
    background: $efa4ab4dafafc3ce$var$backgroundColor$2,
    group: {
        fill: $efa4ab4dafafc3ce$var$backgroundColor$2
    },
    legend: {
        labelColor: $efa4ab4dafafc3ce$var$blackTitle,
        labelFontSize: 11,
        padding: 1,
        symbolSize: 30,
        symbolType: "square",
        titleColor: $efa4ab4dafafc3ce$var$blackTitle,
        titleFontSize: 14,
        titlePadding: 10
    },
    line: {
        stroke: $efa4ab4dafafc3ce$var$markColor$6,
        strokeWidth: 2
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor$6,
        strokeWidth: 0.5
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor$6
    },
    range: {
        category: [
            "#30a2da",
            "#fc4f30",
            "#e5ae38",
            "#6d904f",
            "#8b8b8b",
            "#b96db8",
            "#ff9e27",
            "#56cc60",
            "#52d2ca",
            "#52689e",
            "#545454",
            "#9fe4f8"
        ],
        diverging: [
            "#cc0020",
            "#e77866",
            "#f6e7e1",
            "#d6e8ed",
            "#91bfd9",
            "#1d78b5"
        ],
        heatmap: [
            "#d6e8ed",
            "#cee0e5",
            "#91bfd9",
            "#549cc6",
            "#1d78b5"
        ]
    },
    point: {
        filled: true,
        shape: "circle"
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor$6
    },
    bar: {
        binSpacing: 2,
        fill: $efa4ab4dafafc3ce$var$markColor$6,
        stroke: null
    },
    title: {
        anchor: "start",
        fontSize: 24,
        fontWeight: 600,
        offset: 20
    }
};
const $efa4ab4dafafc3ce$var$markColor$5 = "#000";
const $efa4ab4dafafc3ce$export$56cb4621379a3713 = {
    group: {
        fill: "#e5e5e5"
    },
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor$5
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor$5
    },
    line: {
        stroke: $efa4ab4dafafc3ce$var$markColor$5
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor$5
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor$5
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor$5
    },
    symbol: {
        fill: $efa4ab4dafafc3ce$var$markColor$5,
        size: 40
    },
    axis: {
        domain: false,
        grid: true,
        gridColor: "#FFFFFF",
        gridOpacity: 1,
        labelColor: "#7F7F7F",
        labelPadding: 4,
        tickColor: "#7F7F7F",
        tickSize: 5.67,
        titleFontSize: 16,
        titleFontWeight: "normal"
    },
    legend: {
        labelBaseline: "middle",
        labelFontSize: 11,
        symbolSize: 40
    },
    range: {
        category: [
            "#000000",
            "#7F7F7F",
            "#1A1A1A",
            "#999999",
            "#333333",
            "#B0B0B0",
            "#4D4D4D",
            "#C9C9C9",
            "#666666",
            "#DCDCDC"
        ]
    }
};
const $efa4ab4dafafc3ce$var$headlineFontSize = 22;
const $efa4ab4dafafc3ce$var$headlineFontWeight = "normal";
const $efa4ab4dafafc3ce$var$labelFont$1 = "Benton Gothic, sans-serif";
const $efa4ab4dafafc3ce$var$labelFontSize = 11.5;
const $efa4ab4dafafc3ce$var$labelFontWeight = "normal";
const $efa4ab4dafafc3ce$var$markColor$4 = "#82c6df";
// const markHighlight = '#006d8f';
// const markDemocrat = '#5789b8';
// const markRepublican = '#d94f54';
const $efa4ab4dafafc3ce$var$titleFont = "Benton Gothic Bold, sans-serif";
const $efa4ab4dafafc3ce$var$titleFontWeight = "normal";
const $efa4ab4dafafc3ce$var$titleFontSize$1 = 13;
const $efa4ab4dafafc3ce$var$colorSchemes$1 = {
    "category-6": [
        "#ec8431",
        "#829eb1",
        "#c89d29",
        "#3580b1",
        "#adc839",
        "#ab7fb4"
    ],
    "fire-7": [
        "#fbf2c7",
        "#f9e39c",
        "#f8d36e",
        "#f4bb6a",
        "#e68a4f",
        "#d15a40",
        "#ab4232"
    ],
    "fireandice-6": [
        "#e68a4f",
        "#f4bb6a",
        "#f9e39c",
        "#dadfe2",
        "#a6b7c6",
        "#849eae"
    ],
    "ice-7": [
        "#edefee",
        "#dadfe2",
        "#c4ccd2",
        "#a6b7c6",
        "#849eae",
        "#607785",
        "#47525d"
    ]
};
const $efa4ab4dafafc3ce$export$a855cf72af8fb2ba = {
    background: "#ffffff",
    title: {
        anchor: "start",
        color: "#000000",
        font: $efa4ab4dafafc3ce$var$titleFont,
        fontSize: $efa4ab4dafafc3ce$var$headlineFontSize,
        fontWeight: $efa4ab4dafafc3ce$var$headlineFontWeight
    },
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor$4
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor$4
    },
    line: {
        stroke: $efa4ab4dafafc3ce$var$markColor$4,
        strokeWidth: 2
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor$4
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor$4
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor$4
    },
    symbol: {
        fill: $efa4ab4dafafc3ce$var$markColor$4,
        size: 30
    },
    axis: {
        labelFont: $efa4ab4dafafc3ce$var$labelFont$1,
        labelFontSize: $efa4ab4dafafc3ce$var$labelFontSize,
        labelFontWeight: $efa4ab4dafafc3ce$var$labelFontWeight,
        titleFont: $efa4ab4dafafc3ce$var$titleFont,
        titleFontSize: $efa4ab4dafafc3ce$var$titleFontSize$1,
        titleFontWeight: $efa4ab4dafafc3ce$var$titleFontWeight
    },
    axisX: {
        labelAngle: 0,
        labelPadding: 4,
        tickSize: 3
    },
    axisY: {
        labelBaseline: "middle",
        maxExtent: 45,
        minExtent: 45,
        tickSize: 2,
        titleAlign: "left",
        titleAngle: 0,
        titleX: -45,
        titleY: -11
    },
    legend: {
        labelFont: $efa4ab4dafafc3ce$var$labelFont$1,
        labelFontSize: $efa4ab4dafafc3ce$var$labelFontSize,
        symbolType: "square",
        titleFont: $efa4ab4dafafc3ce$var$titleFont,
        titleFontSize: $efa4ab4dafafc3ce$var$titleFontSize$1,
        titleFontWeight: $efa4ab4dafafc3ce$var$titleFontWeight
    },
    range: {
        category: $efa4ab4dafafc3ce$var$colorSchemes$1["category-6"],
        diverging: $efa4ab4dafafc3ce$var$colorSchemes$1["fireandice-6"],
        heatmap: $efa4ab4dafafc3ce$var$colorSchemes$1["fire-7"],
        ordinal: $efa4ab4dafafc3ce$var$colorSchemes$1["fire-7"],
        ramp: $efa4ab4dafafc3ce$var$colorSchemes$1["fire-7"]
    }
};
const $efa4ab4dafafc3ce$var$markColor$3 = "#ab5787";
const $efa4ab4dafafc3ce$var$axisColor$1 = "#979797";
const $efa4ab4dafafc3ce$export$d55cf2ab6105f43e = {
    background: "#f9f9f9",
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor$3
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor$3
    },
    line: {
        stroke: $efa4ab4dafafc3ce$var$markColor$3
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor$3
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor$3
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor$3
    },
    symbol: {
        fill: $efa4ab4dafafc3ce$var$markColor$3,
        size: 30
    },
    axis: {
        domainColor: $efa4ab4dafafc3ce$var$axisColor$1,
        domainWidth: 0.5,
        gridWidth: 0.2,
        labelColor: $efa4ab4dafafc3ce$var$axisColor$1,
        tickColor: $efa4ab4dafafc3ce$var$axisColor$1,
        tickWidth: 0.2,
        titleColor: $efa4ab4dafafc3ce$var$axisColor$1
    },
    axisBand: {
        grid: false
    },
    axisX: {
        grid: true,
        tickSize: 10
    },
    axisY: {
        domain: false,
        grid: true,
        tickSize: 0
    },
    legend: {
        labelFontSize: 11,
        padding: 1,
        symbolSize: 30,
        symbolType: "square"
    },
    range: {
        category: [
            "#ab5787",
            "#51b2e5",
            "#703c5c",
            "#168dd9",
            "#d190b6",
            "#00609f",
            "#d365ba",
            "#154866",
            "#666666",
            "#c4c4c4"
        ]
    }
};
const $efa4ab4dafafc3ce$var$markColor$2 = "#3e5c69";
const $efa4ab4dafafc3ce$export$d314535607acc32d = {
    background: "#fff",
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor$2
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor$2
    },
    line: {
        stroke: $efa4ab4dafafc3ce$var$markColor$2
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor$2
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor$2
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor$2
    },
    symbol: {
        fill: $efa4ab4dafafc3ce$var$markColor$2
    },
    axis: {
        domainWidth: 0.5,
        grid: true,
        labelPadding: 2,
        tickSize: 5,
        tickWidth: 0.5,
        titleFontWeight: "normal"
    },
    axisBand: {
        grid: false
    },
    axisX: {
        gridWidth: 0.2
    },
    axisY: {
        gridDash: [
            3
        ],
        gridWidth: 0.4
    },
    legend: {
        labelFontSize: 11,
        padding: 1,
        symbolType: "square"
    },
    range: {
        category: [
            "#3e5c69",
            "#6793a6",
            "#182429",
            "#0570b0",
            "#3690c0",
            "#74a9cf",
            "#a6bddb",
            "#e2ddf2"
        ]
    }
};
const $efa4ab4dafafc3ce$var$markColor$1 = "#1696d2";
const $efa4ab4dafafc3ce$var$axisColor = "#000000";
const $efa4ab4dafafc3ce$var$backgroundColor$1 = "#FFFFFF";
const $efa4ab4dafafc3ce$var$font = "Lato";
const $efa4ab4dafafc3ce$var$labelFont = "Lato";
const $efa4ab4dafafc3ce$var$sourceFont = "Lato";
const $efa4ab4dafafc3ce$var$gridColor$1 = "#DEDDDD";
const $efa4ab4dafafc3ce$var$titleFontSize = 18;
const $efa4ab4dafafc3ce$var$colorSchemes = {
    "main-colors": [
        "#1696d2",
        "#d2d2d2",
        "#000000",
        "#fdbf11",
        "#ec008b",
        "#55b748",
        "#5c5859",
        "#db2b27"
    ],
    "shades-blue": [
        "#CFE8F3",
        "#A2D4EC",
        "#73BFE2",
        "#46ABDB",
        "#1696D2",
        "#12719E",
        "#0A4C6A",
        "#062635"
    ],
    "shades-gray": [
        "#F5F5F5",
        "#ECECEC",
        "#E3E3E3",
        "#DCDBDB",
        "#D2D2D2",
        "#9D9D9D",
        "#696969",
        "#353535"
    ],
    "shades-yellow": [
        "#FFF2CF",
        "#FCE39E",
        "#FDD870",
        "#FCCB41",
        "#FDBF11",
        "#E88E2D",
        "#CA5800",
        "#843215"
    ],
    "shades-magenta": [
        "#F5CBDF",
        "#EB99C2",
        "#E46AA7",
        "#E54096",
        "#EC008B",
        "#AF1F6B",
        "#761548",
        "#351123"
    ],
    "shades-green": [
        "#DCEDD9",
        "#BCDEB4",
        "#98CF90",
        "#78C26D",
        "#55B748",
        "#408941",
        "#2C5C2D",
        "#1A2E19"
    ],
    "shades-black": [
        "#D5D5D4",
        "#ADABAC",
        "#848081",
        "#5C5859",
        "#332D2F",
        "#262223",
        "#1A1717",
        "#0E0C0D"
    ],
    "shades-red": [
        "#F8D5D4",
        "#F1AAA9",
        "#E9807D",
        "#E25552",
        "#DB2B27",
        "#A4201D",
        "#6E1614",
        "#370B0A"
    ],
    "one-group": [
        "#1696d2",
        "#000000"
    ],
    "two-groups-cat-1": [
        "#1696d2",
        "#000000"
    ],
    "two-groups-cat-2": [
        "#1696d2",
        "#fdbf11"
    ],
    "two-groups-cat-3": [
        "#1696d2",
        "#db2b27"
    ],
    "two-groups-seq": [
        "#a2d4ec",
        "#1696d2"
    ],
    "three-groups-cat": [
        "#1696d2",
        "#fdbf11",
        "#000000"
    ],
    "three-groups-seq": [
        "#a2d4ec",
        "#1696d2",
        "#0a4c6a"
    ],
    "four-groups-cat-1": [
        "#000000",
        "#d2d2d2",
        "#fdbf11",
        "#1696d2"
    ],
    "four-groups-cat-2": [
        "#1696d2",
        "#ec0008b",
        "#fdbf11",
        "#5c5859"
    ],
    "four-groups-seq": [
        "#cfe8f3",
        "#73bf42",
        "#1696d2",
        "#0a4c6a"
    ],
    "five-groups-cat-1": [
        "#1696d2",
        "#fdbf11",
        "#d2d2d2",
        "#ec008b",
        "#000000"
    ],
    "five-groups-cat-2": [
        "#1696d2",
        "#0a4c6a",
        "#d2d2d2",
        "#fdbf11",
        "#332d2f"
    ],
    "five-groups-seq": [
        "#cfe8f3",
        "#73bf42",
        "#1696d2",
        "#0a4c6a",
        "#000000"
    ],
    "six-groups-cat-1": [
        "#1696d2",
        "#ec008b",
        "#fdbf11",
        "#000000",
        "#d2d2d2",
        "#55b748"
    ],
    "six-groups-cat-2": [
        "#1696d2",
        "#d2d2d2",
        "#ec008b",
        "#fdbf11",
        "#332d2f",
        "#0a4c6a"
    ],
    "six-groups-seq": [
        "#cfe8f3",
        "#a2d4ec",
        "#73bfe2",
        "#46abdb",
        "#1696d2",
        "#12719e"
    ],
    "diverging-colors": [
        "#ca5800",
        "#fdbf11",
        "#fdd870",
        "#fff2cf",
        "#cfe8f3",
        "#73bfe2",
        "#1696d2",
        "#0a4c6a"
    ]
};
const $efa4ab4dafafc3ce$export$a86b6ded9d0001c8 = {
    background: $efa4ab4dafafc3ce$var$backgroundColor$1,
    title: {
        anchor: "start",
        fontSize: $efa4ab4dafafc3ce$var$titleFontSize,
        font: $efa4ab4dafafc3ce$var$font
    },
    axisX: {
        domain: true,
        domainColor: $efa4ab4dafafc3ce$var$axisColor,
        domainWidth: 1,
        grid: false,
        labelFontSize: 12,
        labelFont: $efa4ab4dafafc3ce$var$labelFont,
        labelAngle: 0,
        tickColor: $efa4ab4dafafc3ce$var$axisColor,
        tickSize: 5,
        titleFontSize: 12,
        titlePadding: 10,
        titleFont: $efa4ab4dafafc3ce$var$font
    },
    axisY: {
        domain: false,
        domainWidth: 1,
        grid: true,
        gridColor: $efa4ab4dafafc3ce$var$gridColor$1,
        gridWidth: 1,
        labelFontSize: 12,
        labelFont: $efa4ab4dafafc3ce$var$labelFont,
        labelPadding: 8,
        ticks: false,
        titleFontSize: 12,
        titlePadding: 10,
        titleFont: $efa4ab4dafafc3ce$var$font,
        titleAngle: 0,
        titleY: -10,
        titleX: 18
    },
    legend: {
        labelFontSize: 12,
        labelFont: $efa4ab4dafafc3ce$var$labelFont,
        symbolSize: 100,
        titleFontSize: 12,
        titlePadding: 10,
        titleFont: $efa4ab4dafafc3ce$var$font,
        orient: "right",
        offset: 10
    },
    view: {
        stroke: "transparent"
    },
    range: {
        category: $efa4ab4dafafc3ce$var$colorSchemes["six-groups-cat-1"],
        diverging: $efa4ab4dafafc3ce$var$colorSchemes["diverging-colors"],
        heatmap: $efa4ab4dafafc3ce$var$colorSchemes["diverging-colors"],
        ordinal: $efa4ab4dafafc3ce$var$colorSchemes["six-groups-seq"],
        ramp: $efa4ab4dafafc3ce$var$colorSchemes["shades-blue"]
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor$1
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor$1
    },
    line: {
        color: $efa4ab4dafafc3ce$var$markColor$1,
        stroke: $efa4ab4dafafc3ce$var$markColor$1,
        strokeWidth: 5
    },
    trail: {
        color: $efa4ab4dafafc3ce$var$markColor$1,
        stroke: $efa4ab4dafafc3ce$var$markColor$1,
        strokeWidth: 0,
        size: 1
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor$1,
        strokeWidth: 0.5
    },
    point: {
        filled: true
    },
    text: {
        font: $efa4ab4dafafc3ce$var$sourceFont,
        color: $efa4ab4dafafc3ce$var$markColor$1,
        fontSize: 11,
        align: "center",
        fontWeight: 400,
        size: 11
    },
    style: {
        bar: {
            fill: $efa4ab4dafafc3ce$var$markColor$1,
            stroke: null
        }
    },
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor$1
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor$1
    },
    symbol: {
        fill: $efa4ab4dafafc3ce$var$markColor$1,
        size: 30
    }
};
/**
 * Copyright 2020 Google LLC.
 *
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */ const $efa4ab4dafafc3ce$var$markColor = "#3366CC";
const $efa4ab4dafafc3ce$var$gridColor = "#ccc";
const $efa4ab4dafafc3ce$var$defaultFont$1 = "Arial, sans-serif";
const $efa4ab4dafafc3ce$export$8bed367dc94787da = {
    arc: {
        fill: $efa4ab4dafafc3ce$var$markColor
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$markColor
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$markColor
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$markColor
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$markColor
    },
    symbol: {
        stroke: $efa4ab4dafafc3ce$var$markColor
    },
    circle: {
        fill: $efa4ab4dafafc3ce$var$markColor
    },
    background: "#fff",
    padding: {
        top: 10,
        right: 10,
        bottom: 10,
        left: 10
    },
    style: {
        "guide-label": {
            font: $efa4ab4dafafc3ce$var$defaultFont$1,
            fontSize: 12
        },
        "guide-title": {
            font: $efa4ab4dafafc3ce$var$defaultFont$1,
            fontSize: 12
        },
        "group-title": {
            font: $efa4ab4dafafc3ce$var$defaultFont$1,
            fontSize: 12
        }
    },
    title: {
        font: $efa4ab4dafafc3ce$var$defaultFont$1,
        fontSize: 14,
        fontWeight: "bold",
        dy: -3,
        anchor: "start"
    },
    axis: {
        gridColor: $efa4ab4dafafc3ce$var$gridColor,
        tickColor: $efa4ab4dafafc3ce$var$gridColor,
        domain: false,
        grid: true
    },
    range: {
        category: [
            "#4285F4",
            "#DB4437",
            "#F4B400",
            "#0F9D58",
            "#AB47BC",
            "#00ACC1",
            "#FF7043",
            "#9E9D24",
            "#5C6BC0",
            "#F06292",
            "#00796B",
            "#C2185B"
        ],
        heatmap: [
            "#c6dafc",
            "#5e97f6",
            "#2a56c6"
        ]
    }
};
const $efa4ab4dafafc3ce$var$ptToPx = (value)=>value * (1 / 3 + 1);
const $efa4ab4dafafc3ce$var$fontSmallPx = $efa4ab4dafafc3ce$var$ptToPx(9);
const $efa4ab4dafafc3ce$var$legendFontPx = $efa4ab4dafafc3ce$var$ptToPx(10);
const $efa4ab4dafafc3ce$var$fontLargePx = $efa4ab4dafafc3ce$var$ptToPx(12);
const $efa4ab4dafafc3ce$var$fontStandard = "Segoe UI";
const $efa4ab4dafafc3ce$var$fontTitle = "wf_standard-font, helvetica, arial, sans-serif";
const $efa4ab4dafafc3ce$var$firstLevelElementColor = "#252423";
const $efa4ab4dafafc3ce$var$secondLevelElementColor = "#605E5C";
const $efa4ab4dafafc3ce$var$backgroundColor = "transparent";
const $efa4ab4dafafc3ce$var$backgroundSecondaryColor = "#C8C6C4";
const $efa4ab4dafafc3ce$var$paletteColor1 = "#118DFF";
const $efa4ab4dafafc3ce$var$paletteColor2 = "#12239E";
const $efa4ab4dafafc3ce$var$paletteColor3 = "#E66C37";
const $efa4ab4dafafc3ce$var$paletteColor4 = "#6B007B";
const $efa4ab4dafafc3ce$var$paletteColor5 = "#E044A7";
const $efa4ab4dafafc3ce$var$paletteColor6 = "#744EC2";
const $efa4ab4dafafc3ce$var$paletteColor7 = "#D9B300";
const $efa4ab4dafafc3ce$var$paletteColor8 = "#D64550";
const $efa4ab4dafafc3ce$var$divergentColorMax = $efa4ab4dafafc3ce$var$paletteColor1;
const $efa4ab4dafafc3ce$var$divergentColorMin = "#DEEFFF";
const $efa4ab4dafafc3ce$var$divergentPalette = [
    $efa4ab4dafafc3ce$var$divergentColorMin,
    $efa4ab4dafafc3ce$var$divergentColorMax
];
const $efa4ab4dafafc3ce$var$ordinalPalette = [
    $efa4ab4dafafc3ce$var$divergentColorMin,
    "#c7e4ff",
    "#b0d9ff",
    "#9aceff",
    "#83c3ff",
    "#6cb9ff",
    "#55aeff",
    "#3fa3ff",
    "#2898ff",
    $efa4ab4dafafc3ce$var$divergentColorMax
];
const $efa4ab4dafafc3ce$export$2ac137c682060935 = {
    view: {
        stroke: $efa4ab4dafafc3ce$var$backgroundColor
    },
    background: $efa4ab4dafafc3ce$var$backgroundColor,
    font: $efa4ab4dafafc3ce$var$fontStandard,
    header: {
        titleFont: $efa4ab4dafafc3ce$var$fontTitle,
        titleFontSize: $efa4ab4dafafc3ce$var$fontLargePx,
        titleColor: $efa4ab4dafafc3ce$var$firstLevelElementColor,
        labelFont: $efa4ab4dafafc3ce$var$fontStandard,
        labelFontSize: $efa4ab4dafafc3ce$var$legendFontPx,
        labelColor: $efa4ab4dafafc3ce$var$secondLevelElementColor
    },
    axis: {
        ticks: false,
        grid: false,
        domain: false,
        labelColor: $efa4ab4dafafc3ce$var$secondLevelElementColor,
        labelFontSize: $efa4ab4dafafc3ce$var$fontSmallPx,
        titleFont: $efa4ab4dafafc3ce$var$fontTitle,
        titleColor: $efa4ab4dafafc3ce$var$firstLevelElementColor,
        titleFontSize: $efa4ab4dafafc3ce$var$fontLargePx,
        titleFontWeight: "normal"
    },
    axisQuantitative: {
        tickCount: 3,
        grid: true,
        gridColor: $efa4ab4dafafc3ce$var$backgroundSecondaryColor,
        gridDash: [
            1,
            5
        ],
        labelFlush: false
    },
    axisBand: {
        tickExtra: true
    },
    axisX: {
        labelPadding: 5
    },
    axisY: {
        labelPadding: 10
    },
    bar: {
        fill: $efa4ab4dafafc3ce$var$paletteColor1
    },
    line: {
        stroke: $efa4ab4dafafc3ce$var$paletteColor1,
        strokeWidth: 3,
        strokeCap: "round",
        strokeJoin: "round"
    },
    text: {
        font: $efa4ab4dafafc3ce$var$fontStandard,
        fontSize: $efa4ab4dafafc3ce$var$fontSmallPx,
        fill: $efa4ab4dafafc3ce$var$secondLevelElementColor
    },
    arc: {
        fill: $efa4ab4dafafc3ce$var$paletteColor1
    },
    area: {
        fill: $efa4ab4dafafc3ce$var$paletteColor1,
        line: true,
        opacity: 0.6
    },
    path: {
        stroke: $efa4ab4dafafc3ce$var$paletteColor1
    },
    rect: {
        fill: $efa4ab4dafafc3ce$var$paletteColor1
    },
    point: {
        fill: $efa4ab4dafafc3ce$var$paletteColor1,
        filled: true,
        size: 75
    },
    shape: {
        stroke: $efa4ab4dafafc3ce$var$paletteColor1
    },
    symbol: {
        fill: $efa4ab4dafafc3ce$var$paletteColor1,
        strokeWidth: 1.5,
        size: 50
    },
    legend: {
        titleFont: $efa4ab4dafafc3ce$var$fontStandard,
        titleFontWeight: "bold",
        titleColor: $efa4ab4dafafc3ce$var$secondLevelElementColor,
        labelFont: $efa4ab4dafafc3ce$var$fontStandard,
        labelFontSize: $efa4ab4dafafc3ce$var$legendFontPx,
        labelColor: $efa4ab4dafafc3ce$var$secondLevelElementColor,
        symbolType: "circle",
        symbolSize: 75
    },
    range: {
        category: [
            $efa4ab4dafafc3ce$var$paletteColor1,
            $efa4ab4dafafc3ce$var$paletteColor2,
            $efa4ab4dafafc3ce$var$paletteColor3,
            $efa4ab4dafafc3ce$var$paletteColor4,
            $efa4ab4dafafc3ce$var$paletteColor5,
            $efa4ab4dafafc3ce$var$paletteColor6,
            $efa4ab4dafafc3ce$var$paletteColor7,
            $efa4ab4dafafc3ce$var$paletteColor8
        ],
        diverging: $efa4ab4dafafc3ce$var$divergentPalette,
        heatmap: $efa4ab4dafafc3ce$var$divergentPalette,
        ordinal: $efa4ab4dafafc3ce$var$ordinalPalette
    }
};
const $efa4ab4dafafc3ce$var$defaultFont = 'IBM Plex Sans,system-ui,-apple-system,BlinkMacSystemFont,".sfnstext-regular",sans-serif';
const $efa4ab4dafafc3ce$var$fontWeight = 400;
const $efa4ab4dafafc3ce$var$darkCategories = [
    "#8a3ffc",
    "#33b1ff",
    "#007d79",
    "#ff7eb6",
    "#fa4d56",
    "#fff1f1",
    "#6fdc8c",
    "#4589ff",
    "#d12771",
    "#d2a106",
    "#08bdba",
    "#bae6ff",
    "#ba4e00",
    "#d4bbff"
];
const $efa4ab4dafafc3ce$var$lightCategories = [
    "#6929c4",
    "#1192e8",
    "#005d5d",
    "#9f1853",
    "#fa4d56",
    "#570408",
    "#198038",
    "#002d9c",
    "#ee538b",
    "#b28600",
    "#009d9a",
    "#012749",
    "#8a3800",
    "#a56eff"
];
function $efa4ab4dafafc3ce$var$genCarbonConfig({ type: type, background: background }) {
    const viewbg = type === "dark" ? "#161616" : "#ffffff";
    const textColor = type === "dark" ? "#f4f4f4" : "#161616";
    const category = type === "dark" ? $efa4ab4dafafc3ce$var$darkCategories : $efa4ab4dafafc3ce$var$lightCategories;
    const markColor = type === "dark" ? "#d4bbff" : "#6929c4";
    return {
        background: background,
        arc: {
            fill: markColor
        },
        area: {
            fill: markColor
        },
        path: {
            stroke: markColor
        },
        rect: {
            fill: markColor
        },
        shape: {
            stroke: markColor
        },
        symbol: {
            stroke: markColor
        },
        circle: {
            fill: markColor
        },
        view: {
            fill: viewbg,
            stroke: viewbg
        },
        group: {
            fill: viewbg
        },
        title: {
            color: textColor,
            anchor: "start",
            dy: -15,
            fontSize: 16,
            font: $efa4ab4dafafc3ce$var$defaultFont,
            fontWeight: 600
        },
        axis: {
            labelColor: textColor,
            labelFontSize: 12,
            grid: true,
            gridColor: "#525252",
            titleColor: textColor,
            labelAngle: 0
        },
        style: {
            "guide-label": {
                font: $efa4ab4dafafc3ce$var$defaultFont,
                fill: textColor,
                fontWeight: $efa4ab4dafafc3ce$var$fontWeight
            },
            "guide-title": {
                font: $efa4ab4dafafc3ce$var$defaultFont,
                fill: textColor,
                fontWeight: $efa4ab4dafafc3ce$var$fontWeight
            }
        },
        range: {
            category: category,
            diverging: [
                "#750e13",
                "#a2191f",
                "#da1e28",
                "#fa4d56",
                "#ff8389",
                "#ffb3b8",
                "#ffd7d9",
                "#fff1f1",
                "#e5f6ff",
                "#bae6ff",
                "#82cfff",
                "#33b1ff",
                "#1192e8",
                "#0072c3",
                "#00539a",
                "#003a6d"
            ],
            heatmap: [
                "#f6f2ff",
                "#e8daff",
                "#d4bbff",
                "#be95ff",
                "#a56eff",
                "#8a3ffc",
                "#6929c4",
                "#491d8b",
                "#31135e",
                "#1c0f30"
            ]
        }
    };
}
const $efa4ab4dafafc3ce$export$2f184032d117fb8a = $efa4ab4dafafc3ce$var$genCarbonConfig({
    type: "light",
    background: "#ffffff"
});
const $efa4ab4dafafc3ce$export$a86cb79c0b53eef8 = $efa4ab4dafafc3ce$var$genCarbonConfig({
    type: "light",
    background: "#f4f4f4"
});
const $efa4ab4dafafc3ce$export$e3c542a8e55cbcd8 = $efa4ab4dafafc3ce$var$genCarbonConfig({
    type: "dark",
    background: "#262626"
});
const $efa4ab4dafafc3ce$export$67bc6448a2a46e5c = $efa4ab4dafafc3ce$var$genCarbonConfig({
    type: "dark",
    background: "#161616"
});
const $efa4ab4dafafc3ce$export$83d89fbfd8236492 = $efa4ab4dafafc3ce$var$pkg.version;

});

parcelRegister("agM7j", function(module, exports) {

$parcel$export(module.exports, "Handler", () => $77a0b90669cb3044$export$a428cd33b25d5283);

var $4SWbq = parcelRequire("4SWbq");
var $77a0b90669cb3044$var$name = "vega-tooltip";
var $77a0b90669cb3044$var$version$1 = "0.33.0";
var $77a0b90669cb3044$var$description = "A tooltip plugin for Vega-Lite and Vega visualizations.";
var $77a0b90669cb3044$var$keywords = [
    "vega-lite",
    "vega",
    "tooltip"
];
var $77a0b90669cb3044$var$repository = {
    type: "git",
    url: "https://github.com/vega/vega-tooltip.git"
};
var $77a0b90669cb3044$var$author = {
    name: "UW Interactive Data Lab",
    url: "https://idl.cs.washington.edu"
};
var $77a0b90669cb3044$var$collaborators = [
    "Dominik Moritz",
    "Sira Horradarn",
    "Zening Qu",
    "Kanit Wongsuphasawat",
    "Yuri Astrakhan",
    "Jeffrey Heer"
];
var $77a0b90669cb3044$var$license = "BSD-3-Clause";
var $77a0b90669cb3044$var$bugs = {
    url: "https://github.com/vega/vega-tooltip/issues"
};
var $77a0b90669cb3044$var$homepage = "https://github.com/vega/vega-tooltip#readme";
var $77a0b90669cb3044$var$main = "build/vega-tooltip.js";
var $77a0b90669cb3044$var$module = "build/vega-tooltip.module.js";
var $77a0b90669cb3044$var$unpkg = "build/vega-tooltip.min.js";
var $77a0b90669cb3044$var$jsdelivr = "build/vega-tooltip.min.js";
var $77a0b90669cb3044$var$types = "build/vega-tooltip.module.d.ts";
var $77a0b90669cb3044$var$files = [
    "src",
    "build",
    "types"
];
var $77a0b90669cb3044$var$scripts = {
    prebuild: "yarn clean && yarn build:style",
    build: "rollup -c",
    "build:style": "./build-style.sh",
    clean: "rimraf build && rimraf src/style.ts",
    "copy:data": "rsync -r node_modules/vega-datasets/data/* examples/data",
    "copy:build": "rsync -r build/* examples/build",
    "deploy:gh": "yarn build && yarn copy:build && gh-pages -d examples && yarn clean",
    prepublishOnly: "yarn clean && yarn build",
    preversion: "yarn lint && yarn test",
    serve: "browser-sync start -s -f build examples --serveStatic examples",
    start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
    pretest: "yarn build:style",
    test: "jest",
    "test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand",
    prepare: "yarn copy:data",
    prettierbase: "prettier '*.{css,scss,html}'",
    format: "eslint . --fix && yarn prettierbase --write",
    lint: "eslint . && yarn prettierbase --check",
    release: "release-it"
};
var $77a0b90669cb3044$var$devDependencies = {
    "@babel/core": "^7.22.10",
    "@babel/plugin-proposal-async-generator-functions": "^7.20.7",
    "@babel/plugin-proposal-json-strings": "^7.18.6",
    "@babel/plugin-proposal-object-rest-spread": "^7.20.7",
    "@babel/plugin-proposal-optional-catch-binding": "^7.18.6",
    "@babel/plugin-transform-runtime": "^7.22.10",
    "@babel/preset-env": "^7.22.10",
    "@babel/preset-typescript": "^7.22.5",
    "@release-it/conventional-changelog": "^7.0.0",
    "@rollup/plugin-json": "^6.0.0",
    "@rollup/plugin-node-resolve": "^15.1.0",
    "@rollup/plugin-terser": "^0.4.3",
    "@types/jest": "^29.5.3",
    "@typescript-eslint/eslint-plugin": "^6.3.0",
    "@typescript-eslint/parser": "^6.3.0",
    "browser-sync": "^2.29.3",
    concurrently: "^8.2.0",
    eslint: "^8.46.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-jest": "^27.2.3",
    "eslint-plugin-prettier": "^5.0.0",
    "gh-pages": "^5.0.0",
    jest: "^29.6.2",
    "jest-environment-jsdom": "^29.6.2",
    path: "^0.12.7",
    prettier: "^3.0.1",
    "release-it": "^16.1.3",
    rollup: "^3.27.2",
    "rollup-plugin-bundle-size": "^1.0.3",
    "rollup-plugin-ts": "^3.4.3",
    sass: "^1.64.2",
    typescript: "~5.1.6",
    "vega-datasets": "^2.7.0",
    "vega-typings": "^0.24.2"
};
var $77a0b90669cb3044$var$dependencies = {
    "vega-util": "^1.17.2"
};
var $77a0b90669cb3044$var$pkg = {
    name: $77a0b90669cb3044$var$name,
    version: $77a0b90669cb3044$var$version$1,
    description: $77a0b90669cb3044$var$description,
    keywords: $77a0b90669cb3044$var$keywords,
    repository: $77a0b90669cb3044$var$repository,
    author: $77a0b90669cb3044$var$author,
    collaborators: $77a0b90669cb3044$var$collaborators,
    license: $77a0b90669cb3044$var$license,
    bugs: $77a0b90669cb3044$var$bugs,
    homepage: $77a0b90669cb3044$var$homepage,
    main: $77a0b90669cb3044$var$main,
    module: $77a0b90669cb3044$var$module,
    unpkg: $77a0b90669cb3044$var$unpkg,
    jsdelivr: $77a0b90669cb3044$var$jsdelivr,
    types: $77a0b90669cb3044$var$types,
    files: $77a0b90669cb3044$var$files,
    scripts: $77a0b90669cb3044$var$scripts,
    devDependencies: $77a0b90669cb3044$var$devDependencies,
    dependencies: $77a0b90669cb3044$var$dependencies
};
/**
 * Format the value to be shown in the tooltip.
 *
 * @param value The value to show in the tooltip.
 * @param valueToHtml Function to convert a single cell value to an HTML string
 */ function $77a0b90669cb3044$export$7c4d25c0c3217d8c(value, valueToHtml, maxDepth) {
    if ((0, $4SWbq.isArray)(value)) return `[${value.map((v)=>valueToHtml((0, $4SWbq.isString)(v) ? v : $77a0b90669cb3044$export$fac44ee5b035f737(v, maxDepth))).join(", ")}]`;
    if ((0, $4SWbq.isObject)(value)) {
        let content = "";
        const { title: title, image: image, ...rest } = value;
        if (title) content += `<h2>${valueToHtml(title)}</h2>`;
        if (image) content += `<img src="${valueToHtml(image)}">`;
        const keys = Object.keys(rest);
        if (keys.length > 0) {
            content += "<table>";
            for (const key of keys){
                let val = rest[key];
                // ignore undefined properties
                if (val === undefined) continue;
                if ((0, $4SWbq.isObject)(val)) val = $77a0b90669cb3044$export$fac44ee5b035f737(val, maxDepth);
                content += `<tr><td class="key">${valueToHtml(key)}</td><td class="value">${valueToHtml(val)}</td></tr>`;
            }
            content += `</table>`;
        }
        return content || "{}"; // show empty object if there are no properties
    }
    return valueToHtml(value);
}
function $77a0b90669cb3044$export$b644b65666fe0c18(maxDepth) {
    const stack = [];
    return function(key, value) {
        if (typeof value !== "object" || value === null) return value;
        const pos = stack.indexOf(this) + 1;
        stack.length = pos;
        if (stack.length > maxDepth) return "[Object]";
        if (stack.indexOf(value) >= 0) return "[Circular]";
        stack.push(value);
        return value;
    };
}
/**
 * Stringify any JS object to valid JSON
 */ function $77a0b90669cb3044$export$fac44ee5b035f737(obj, maxDepth) {
    return JSON.stringify(obj, $77a0b90669cb3044$export$b644b65666fe0c18(maxDepth));
}
// generated with build-style.sh
var $77a0b90669cb3044$var$defaultStyle = `#vg-tooltip-element {
  visibility: hidden;
  padding: 8px;
  position: fixed;
  z-index: 1000;
  font-family: sans-serif;
  font-size: 11px;
  border-radius: 3px;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  /* The default theme is the light theme. */
  background-color: rgba(255, 255, 255, 0.95);
  border: 1px solid #d9d9d9;
  color: black;
}
#vg-tooltip-element.visible {
  visibility: visible;
}
#vg-tooltip-element h2 {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: 13px;
}
#vg-tooltip-element table {
  border-spacing: 0;
}
#vg-tooltip-element table tr {
  border: none;
}
#vg-tooltip-element table tr td {
  overflow: hidden;
  text-overflow: ellipsis;
  padding-top: 2px;
  padding-bottom: 2px;
}
#vg-tooltip-element table tr td.key {
  color: #808080;
  max-width: 150px;
  text-align: right;
  padding-right: 4px;
}
#vg-tooltip-element table tr td.value {
  display: block;
  max-width: 300px;
  max-height: 7em;
  text-align: left;
}
#vg-tooltip-element.dark-theme {
  background-color: rgba(32, 32, 32, 0.9);
  border: 1px solid #f5f5f5;
  color: white;
}
#vg-tooltip-element.dark-theme td.key {
  color: #bfbfbf;
}
`;
const $77a0b90669cb3044$var$EL_ID = "vg-tooltip-element";
const $77a0b90669cb3044$export$93ca5d3f8675ae4c = {
    /**
   * X offset.
   */ offsetX: 10,
    /**
   * Y offset.
   */ offsetY: 10,
    /**
   * ID of the tooltip element.
   */ id: $77a0b90669cb3044$var$EL_ID,
    /**
   * ID of the tooltip CSS style.
   */ styleId: "vega-tooltip-style",
    /**
   * The name of the theme. You can use the CSS class called [THEME]-theme to style the tooltips.
   *
   * There are two predefined themes: "light" (default) and "dark".
   */ theme: "light",
    /**
   * Do not use the default styles provided by Vega Tooltip. If you enable this option, you need to use your own styles. It is not necessary to disable the default style when using a custom theme.
   */ disableDefaultStyle: false,
    /**
   * HTML sanitizer function that removes dangerous HTML to prevent XSS.
   *
   * This should be a function from string to string. You may replace it with a formatter such as a markdown formatter.
   */ sanitize: $77a0b90669cb3044$export$5dd27816c66fb702,
    /**
   * The maximum recursion depth when printing objects in the tooltip.
   */ maxDepth: 2,
    /**
   * A function to customize the rendered HTML of the tooltip.
   * @param value A value string, or object of value strings keyed by field
   * @param sanitize The `sanitize` function from `options.sanitize`
   * @returns {string} The returned string will become the `innerHTML` of the tooltip element
   */ formatTooltip: $77a0b90669cb3044$export$7c4d25c0c3217d8c
};
/**
 * Escape special HTML characters.
 *
 * @param value A value to convert to string and HTML-escape.
 */ function $77a0b90669cb3044$export$5dd27816c66fb702(value) {
    return String(value).replace(/&/g, "&amp;").replace(/</g, "&lt;");
}
function $77a0b90669cb3044$export$6865c5ac2f5ce8b6(id) {
    // Just in case this id comes from a user, ensure these is no security issues
    if (!/^[A-Za-z]+[-:.\w]*$/.test(id)) throw new Error("Invalid HTML ID");
    return $77a0b90669cb3044$var$defaultStyle.toString().replace($77a0b90669cb3044$var$EL_ID, id);
}
/**
 * Position the tooltip
 *
 * @param event The mouse event.
 * @param tooltipBox
 * @param offsetX Horizontal offset.
 * @param offsetY Vertical offset.
 */ function $77a0b90669cb3044$export$b3ceb0cbf1056d98(event, tooltipBox, offsetX, offsetY) {
    let x = event.clientX + offsetX;
    if (x + tooltipBox.width > window.innerWidth) x = +event.clientX - offsetX - tooltipBox.width;
    let y = event.clientY + offsetY;
    if (y + tooltipBox.height > window.innerHeight) y = +event.clientY - offsetY - tooltipBox.height;
    return {
        x: x,
        y: y
    };
}
/**
 * The tooltip handler class.
 */ class $77a0b90669cb3044$export$a428cd33b25d5283 {
    /**
   * The handler function. We bind this to this function in the constructor.
   */ /**
   * Complete tooltip options.
   */ /**
   * The tooltip html element.
   */ /**
   * Create the tooltip handler and initialize the element and style.
   *
   * @param options Tooltip Options
   */ constructor(options){
        this.options = {
            ...$77a0b90669cb3044$export$93ca5d3f8675ae4c,
            ...options
        };
        const elementId = this.options.id;
        this.el = null;
        // bind this to call
        this.call = this.tooltipHandler.bind(this);
        // prepend a default stylesheet for tooltips to the head
        if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {
            const style = document.createElement("style");
            style.setAttribute("id", this.options.styleId);
            style.innerHTML = $77a0b90669cb3044$export$6865c5ac2f5ce8b6(elementId);
            const head = document.head;
            if (head.childNodes.length > 0) head.insertBefore(style, head.childNodes[0]);
            else head.appendChild(style);
        }
    }
    /**
   * The tooltip handler function.
   */ tooltipHandler(handler, event, item, value) {
        // console.log(handler, event, item, value);
        // append a div element that we use as a tooltip unless it already exists
        this.el = document.getElementById(this.options.id);
        if (!this.el) {
            this.el = document.createElement("div");
            this.el.setAttribute("id", this.options.id);
            this.el.classList.add("vg-tooltip");
            const tooltipContainer = document.fullscreenElement ?? document.body;
            tooltipContainer.appendChild(this.el);
        }
        // hide tooltip for null, undefined, or empty string values
        if (value == null || value === "") {
            this.el.classList.remove("visible", `${this.options.theme}-theme`);
            return;
        }
        // set the tooltip content
        this.el.innerHTML = this.options.formatTooltip(value, this.options.sanitize, this.options.maxDepth);
        // make the tooltip visible
        this.el.classList.add("visible", `${this.options.theme}-theme`);
        const { x: x, y: y } = $77a0b90669cb3044$export$b3ceb0cbf1056d98(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY);
        this.el.style.top = `${y}px`;
        this.el.style.left = `${x}px`;
    }
}
const $77a0b90669cb3044$export$83d89fbfd8236492 = $77a0b90669cb3044$var$pkg.version;
/**
 * Create a tooltip handler and register it with the provided view.
 *
 * @param view The Vega view.
 * @param opt Tooltip options.
 */ function $77a0b90669cb3044$export$2e2bcd8739ae039(view, opt) {
    const handler = new $77a0b90669cb3044$export$a428cd33b25d5283(opt);
    view.tooltip(handler.call).run();
    return handler;
}

});

parcelRegister("5Nx9l", function(module, exports) {
// shim for using process in browser
var $438b3e2d7f11fc86$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $438b3e2d7f11fc86$var$cachedSetTimeout;
var $438b3e2d7f11fc86$var$cachedClearTimeout;
function $438b3e2d7f11fc86$var$defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function $438b3e2d7f11fc86$var$defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") $438b3e2d7f11fc86$var$cachedSetTimeout = setTimeout;
        else $438b3e2d7f11fc86$var$cachedSetTimeout = $438b3e2d7f11fc86$var$defaultSetTimout;
    } catch (e) {
        $438b3e2d7f11fc86$var$cachedSetTimeout = $438b3e2d7f11fc86$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") $438b3e2d7f11fc86$var$cachedClearTimeout = clearTimeout;
        else $438b3e2d7f11fc86$var$cachedClearTimeout = $438b3e2d7f11fc86$var$defaultClearTimeout;
    } catch (e) {
        $438b3e2d7f11fc86$var$cachedClearTimeout = $438b3e2d7f11fc86$var$defaultClearTimeout;
    }
})();
function $438b3e2d7f11fc86$var$runTimeout(fun) {
    if ($438b3e2d7f11fc86$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($438b3e2d7f11fc86$var$cachedSetTimeout === $438b3e2d7f11fc86$var$defaultSetTimout || !$438b3e2d7f11fc86$var$cachedSetTimeout) && setTimeout) {
        $438b3e2d7f11fc86$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $438b3e2d7f11fc86$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $438b3e2d7f11fc86$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $438b3e2d7f11fc86$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $438b3e2d7f11fc86$var$runClearTimeout(marker) {
    if ($438b3e2d7f11fc86$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($438b3e2d7f11fc86$var$cachedClearTimeout === $438b3e2d7f11fc86$var$defaultClearTimeout || !$438b3e2d7f11fc86$var$cachedClearTimeout) && clearTimeout) {
        $438b3e2d7f11fc86$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $438b3e2d7f11fc86$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $438b3e2d7f11fc86$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $438b3e2d7f11fc86$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $438b3e2d7f11fc86$var$queue = [];
var $438b3e2d7f11fc86$var$draining = false;
var $438b3e2d7f11fc86$var$currentQueue;
var $438b3e2d7f11fc86$var$queueIndex = -1;
function $438b3e2d7f11fc86$var$cleanUpNextTick() {
    if (!$438b3e2d7f11fc86$var$draining || !$438b3e2d7f11fc86$var$currentQueue) return;
    $438b3e2d7f11fc86$var$draining = false;
    if ($438b3e2d7f11fc86$var$currentQueue.length) $438b3e2d7f11fc86$var$queue = $438b3e2d7f11fc86$var$currentQueue.concat($438b3e2d7f11fc86$var$queue);
    else $438b3e2d7f11fc86$var$queueIndex = -1;
    if ($438b3e2d7f11fc86$var$queue.length) $438b3e2d7f11fc86$var$drainQueue();
}
function $438b3e2d7f11fc86$var$drainQueue() {
    if ($438b3e2d7f11fc86$var$draining) return;
    var timeout = $438b3e2d7f11fc86$var$runTimeout($438b3e2d7f11fc86$var$cleanUpNextTick);
    $438b3e2d7f11fc86$var$draining = true;
    var len = $438b3e2d7f11fc86$var$queue.length;
    while(len){
        $438b3e2d7f11fc86$var$currentQueue = $438b3e2d7f11fc86$var$queue;
        $438b3e2d7f11fc86$var$queue = [];
        while(++$438b3e2d7f11fc86$var$queueIndex < len)if ($438b3e2d7f11fc86$var$currentQueue) $438b3e2d7f11fc86$var$currentQueue[$438b3e2d7f11fc86$var$queueIndex].run();
        $438b3e2d7f11fc86$var$queueIndex = -1;
        len = $438b3e2d7f11fc86$var$queue.length;
    }
    $438b3e2d7f11fc86$var$currentQueue = null;
    $438b3e2d7f11fc86$var$draining = false;
    $438b3e2d7f11fc86$var$runClearTimeout(timeout);
}
$438b3e2d7f11fc86$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $438b3e2d7f11fc86$var$queue.push(new $438b3e2d7f11fc86$var$Item(fun, args));
    if ($438b3e2d7f11fc86$var$queue.length === 1 && !$438b3e2d7f11fc86$var$draining) $438b3e2d7f11fc86$var$runTimeout($438b3e2d7f11fc86$var$drainQueue);
};
// v8 likes predictible objects
function $438b3e2d7f11fc86$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$438b3e2d7f11fc86$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$438b3e2d7f11fc86$var$process.title = "browser";
$438b3e2d7f11fc86$var$process.browser = true;
$438b3e2d7f11fc86$var$process.env = {};
$438b3e2d7f11fc86$var$process.argv = [];
$438b3e2d7f11fc86$var$process.version = ""; // empty string to avoid regexp issues
$438b3e2d7f11fc86$var$process.versions = {};
function $438b3e2d7f11fc86$var$noop() {}
$438b3e2d7f11fc86$var$process.on = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.addListener = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.once = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.off = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.removeListener = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.removeAllListeners = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.emit = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.prependListener = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.prependOnceListener = $438b3e2d7f11fc86$var$noop;
$438b3e2d7f11fc86$var$process.listeners = function(name) {
    return [];
};
$438b3e2d7f11fc86$var$process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
$438b3e2d7f11fc86$var$process.cwd = function() {
    return "/";
};
$438b3e2d7f11fc86$var$process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
$438b3e2d7f11fc86$var$process.umask = function() {
    return 0;
};

});




parcelRegister("5fsMG", function(module, exports) {

!function(e, t) {
    t(module.exports, (parcelRequire("4rFIf")));
}(module.exports, function(e, t) {
    "use strict";
    function n(e, t, n, o, r, i, u) {
        try {
            var l = e[i](u), s = l.value;
        } catch (e) {
            return void n(e);
        }
        l.done ? t(s) : Promise.resolve(s).then(o, r);
    }
    function o(e) {
        return function() {
            var t = this, o = arguments;
            return new Promise(function(r, i) {
                var u = e.apply(t, o);
                function l(e) {
                    n(u, r, i, l, s, "next", e);
                }
                function s(e) {
                    n(u, r, i, l, s, "throw", e);
                }
                l(void 0);
            });
        };
    }
    function r() {
        return (r = Object.assign || function(e) {
            for(var t = 1; t < arguments.length; t++){
                var n = arguments[t];
                for(var o in n)Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
            }
            return e;
        }).apply(this, arguments);
    }
    function i(e, t) {
        if (null == e) return {};
        var n, o, r = {}, i = Object.keys(e);
        for(o = 0; o < i.length; o++)n = i[o], t.indexOf(n) >= 0 || (r[n] = e[n]);
        return r;
    }
    function u(e) {
        var t = function(e, t) {
            if ("object" != typeof e || null === e) return e;
            var n = e[Symbol.toPrimitive];
            if (void 0 !== n) {
                var o = n.call(e, t || "default");
                if ("object" != typeof o) return o;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === t ? String : Number)(e);
        }(e, "string");
        return "symbol" == typeof t ? t : String(t);
    }
    t = t && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
    var l = {
        init: "init"
    }, s = function(e) {
        var t = e.value;
        return void 0 === t ? "" : t;
    }, a = function() {
        return t.createElement(t.Fragment, null, "\xa0");
    }, c = {
        Cell: s,
        width: 150,
        minWidth: 0,
        maxWidth: Number.MAX_SAFE_INTEGER
    };
    function d() {
        for(var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n];
        return t.reduce(function(e, t) {
            var n = t.style, o = t.className;
            return e = r({}, e, {}, i(t, [
                "style",
                "className"
            ])), n && (e.style = e.style ? r({}, e.style || {}, {}, n || {}) : n), o && (e.className = e.className ? e.className + " " + o : o), "" === e.className && delete e.className, e;
        }, {});
    }
    var f = function(e, t) {
        return void 0 === t && (t = {}), function(n) {
            return void 0 === n && (n = {}), [].concat(e, [
                n
            ]).reduce(function(e, o) {
                return function e(t, n, o) {
                    return "function" == typeof n ? e({}, n(t, o)) : Array.isArray(n) ? d.apply(void 0, [
                        t
                    ].concat(n)) : d(t, n);
                }(e, o, r({}, t, {
                    userProps: n
                }));
            }, {});
        };
    }, p = function(e, t, n, o) {
        return void 0 === n && (n = {}), e.reduce(function(e, t) {
            return t(e, n);
        }, t);
    }, g = function(e, t, n) {
        return void 0 === n && (n = {}), e.forEach(function(e) {
            e(t, n);
        });
    };
    function v(e, t, n, o) {
        e.findIndex(function(e) {
            return e.pluginName === n;
        });
        t.forEach(function(t) {
            e.findIndex(function(e) {
                return e.pluginName === t;
            });
        });
    }
    function m(e, t) {
        return "function" == typeof e ? e(t) : e;
    }
    function h(e) {
        var n = t.useRef();
        return n.current = e, t.useCallback(function() {
            return n.current;
        }, []);
    }
    var y = "undefined" != typeof document ? t.useLayoutEffect : t.useEffect;
    function w(e, n) {
        var o = t.useRef(!1);
        y(function() {
            o.current && e(), o.current = !0;
        }, n);
    }
    function R(e, t, n) {
        return void 0 === n && (n = {}), function(o, i) {
            void 0 === i && (i = {});
            var u = "string" == typeof o ? t[o] : o;
            if (void 0 === u) throw console.info(t), new Error("Renderer Error \u261D\uFE0F");
            return b(u, r({}, e, {
                column: t
            }, n, {}, i));
        };
    }
    function b(e, n) {
        var o;
        return function(e) {
            var t;
            return "function" == typeof e && (t = Object.getPrototypeOf(e)).prototype && t.prototype.isReactComponent;
        }(o = e) || "function" == typeof o || function(e) {
            return "object" == typeof e && "symbol" == typeof e.$$typeof && [
                "react.memo",
                "react.forward_ref"
            ].includes(e.$$typeof.description);
        }(o) ? t.createElement(e, n) : e;
    }
    function S(e, t, n) {
        return void 0 === n && (n = 0), e.map(function(e) {
            return x(e = r({}, e, {
                parent: t,
                depth: n
            })), e.columns && (e.columns = S(e.columns, e, n + 1)), e;
        });
    }
    function C(e) {
        return G(e, "columns");
    }
    function x(e) {
        var t = e.id, n = e.accessor, o = e.Header;
        if ("string" == typeof n) {
            t = t || n;
            var r = n.split(".");
            n = function(e) {
                return function(e, t, n) {
                    if (!t) return e;
                    var o, r = "function" == typeof t ? t : JSON.stringify(t), i = E.get(r) || function() {
                        var e = function(e) {
                            return (function e(t, n) {
                                void 0 === n && (n = []);
                                if (Array.isArray(t)) for(var o = 0; o < t.length; o += 1)e(t[o], n);
                                else n.push(t);
                                return n;
                            })(e).map(function(e) {
                                return String(e).replace(".", "_");
                            }).join(".").replace(T, ".").replace(O, "").split(".");
                        }(t);
                        return E.set(r, e), e;
                    }();
                    try {
                        o = i.reduce(function(e, t) {
                            return e[t];
                        }, e);
                    } catch (e) {}
                    return void 0 !== o ? o : n;
                }(e, r);
            };
        }
        if (!t && "string" == typeof o && o && (t = o), !t && e.columns) throw console.error(e), new Error('A column ID (or unique "Header" value) is required!');
        if (!t) throw console.error(e), new Error("A column ID (or string accessor) is required!");
        return Object.assign(e, {
            id: t,
            accessor: n
        }), e;
    }
    function P(e, t) {
        if (!t) throw new Error;
        return Object.assign(e, r({
            Header: a,
            Footer: a
        }, c, {}, t, {}, e)), Object.assign(e, {
            originalWidth: e.width
        }), e;
    }
    function B(e, t, n) {
        void 0 === n && (n = function() {
            return {};
        });
        for(var o = [], i = e, u = 0, l = function() {
            return u++;
        }, s = function() {
            var e = {
                headers: []
            }, u = [], s = i.some(function(e) {
                return e.parent;
            });
            i.forEach(function(o) {
                var i, a = [].concat(u).reverse()[0];
                if (s) {
                    if (o.parent) i = r({}, o.parent, {
                        originalId: o.parent.id,
                        id: o.parent.id + "_" + l(),
                        headers: [
                            o
                        ]
                    }, n(o));
                    else i = P(r({
                        originalId: o.id + "_placeholder",
                        id: o.id + "_placeholder_" + l(),
                        placeholderOf: o,
                        headers: [
                            o
                        ]
                    }, n(o)), t);
                    a && a.originalId === i.originalId ? a.headers.push(o) : u.push(i);
                }
                e.headers.push(o);
            }), o.push(e), i = u;
        }; i.length;)s();
        return o.reverse();
    }
    var E = new Map;
    function I() {
        for(var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n];
        for(var o = 0; o < t.length; o += 1)if (void 0 !== t[o]) return t[o];
    }
    function F(e) {
        if ("function" == typeof e) return e;
    }
    function G(e, t) {
        var n = [];
        return function e(o) {
            o.forEach(function(o) {
                o[t] ? e(o[t]) : n.push(o);
            });
        }(e), n;
    }
    function A(e, t) {
        var n = t.manualExpandedKey, o = t.expanded, r = t.expandSubRows, i = void 0 === r || r, u = [];
        return e.forEach(function(e) {
            return function e(t, r) {
                void 0 === r && (r = !0), t.isExpanded = t.original && t.original[n] || o[t.id], t.canExpand = t.subRows && !!t.subRows.length, r && u.push(t), t.subRows && t.subRows.length && t.isExpanded && t.subRows.forEach(function(t) {
                    return e(t, i);
                });
            }(e);
        }), u;
    }
    function k(e, t, n) {
        return F(e) || t[e] || n[e] || n.text;
    }
    function H(e, t, n) {
        return e ? e(t, n) : void 0 === t;
    }
    function W() {
        throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.");
    }
    var z = null;
    var T = /\[/g, O = /\]/g;
    var M = function(e) {
        return r({
            role: "table"
        }, e);
    }, j = function(e) {
        return r({
            role: "rowgroup"
        }, e);
    }, L = function(e, t) {
        var n = t.column;
        return r({
            key: "header_" + n.id,
            colSpan: n.totalVisibleHeaderCount,
            role: "columnheader"
        }, e);
    }, N = function(e, t) {
        var n = t.column;
        return r({
            key: "footer_" + n.id,
            colSpan: n.totalVisibleHeaderCount
        }, e);
    }, D = function(e, t) {
        return r({
            key: "headerGroup_" + t.index,
            role: "row"
        }, e);
    }, V = function(e, t) {
        return r({
            key: "footerGroup_" + t.index
        }, e);
    }, _ = function(e, t) {
        return r({
            key: "row_" + t.row.id,
            role: "row"
        }, e);
    }, X = function(e, t) {
        var n = t.cell;
        return r({
            key: "cell_" + n.row.id + "_" + n.column.id,
            role: "cell"
        }, e);
    };
    function q() {
        return {
            useOptions: [],
            stateReducers: [],
            useControlledState: [],
            columns: [],
            columnsDeps: [],
            allColumns: [],
            allColumnsDeps: [],
            accessValue: [],
            materializedColumns: [],
            materializedColumnsDeps: [],
            useInstanceAfterData: [],
            visibleColumns: [],
            visibleColumnsDeps: [],
            headerGroups: [],
            headerGroupsDeps: [],
            useInstanceBeforeDimensions: [],
            useInstance: [],
            prepareRow: [],
            getTableProps: [
                M
            ],
            getTableBodyProps: [
                j
            ],
            getHeaderGroupProps: [
                D
            ],
            getFooterGroupProps: [
                V
            ],
            getHeaderProps: [
                L
            ],
            getFooterProps: [
                N
            ],
            getRowProps: [
                _
            ],
            getCellProps: [
                X
            ],
            useFinalInstance: []
        };
    }
    l.resetHiddenColumns = "resetHiddenColumns", l.toggleHideColumn = "toggleHideColumn", l.setHiddenColumns = "setHiddenColumns", l.toggleHideAllColumns = "toggleHideAllColumns";
    var K = function(e) {
        e.getToggleHiddenProps = [
            U
        ], e.getToggleHideAllColumnsProps = [
            $
        ], e.stateReducers.push(J), e.useInstanceBeforeDimensions.push(Y), e.headerGroupsDeps.push(function(e, t) {
            var n = t.instance;
            return [].concat(e, [
                n.state.hiddenColumns
            ]);
        }), e.useInstance.push(Q);
    };
    K.pluginName = "useColumnVisibility";
    var U = function(e, t) {
        var n = t.column;
        return [
            e,
            {
                onChange: function(e) {
                    n.toggleHidden(!e.target.checked);
                },
                style: {
                    cursor: "pointer"
                },
                checked: n.isVisible,
                title: "Toggle Column Visible"
            }
        ];
    }, $ = function(e, t) {
        var n = t.instance;
        return [
            e,
            {
                onChange: function(e) {
                    n.toggleHideAllColumns(!e.target.checked);
                },
                style: {
                    cursor: "pointer"
                },
                checked: !n.allColumnsHidden && !n.state.hiddenColumns.length,
                title: "Toggle All Columns Hidden",
                indeterminate: !n.allColumnsHidden && n.state.hiddenColumns.length
            }
        ];
    };
    function J(e, t, n, o) {
        if (t.type === l.init) return r({
            hiddenColumns: []
        }, e);
        if (t.type === l.resetHiddenColumns) return r({}, e, {
            hiddenColumns: o.initialState.hiddenColumns || []
        });
        if (t.type === l.toggleHideColumn) {
            var i = (void 0 !== t.value ? t.value : !e.hiddenColumns.includes(t.columnId)) ? [].concat(e.hiddenColumns, [
                t.columnId
            ]) : e.hiddenColumns.filter(function(e) {
                return e !== t.columnId;
            });
            return r({}, e, {
                hiddenColumns: i
            });
        }
        return t.type === l.setHiddenColumns ? r({}, e, {
            hiddenColumns: m(t.value, e.hiddenColumns)
        }) : t.type === l.toggleHideAllColumns ? r({}, e, {
            hiddenColumns: (void 0 !== t.value ? t.value : !e.hiddenColumns.length) ? o.allColumns.map(function(e) {
                return e.id;
            }) : []
        }) : void 0;
    }
    function Y(e) {
        var n = e.headers, o = e.state.hiddenColumns;
        t.useRef(!1).current;
        var r = 0;
        n.forEach(function(e) {
            return r += function e(t, n) {
                t.isVisible = n && !o.includes(t.id);
                var r = 0;
                return t.headers && t.headers.length ? t.headers.forEach(function(n) {
                    return r += e(n, t.isVisible);
                }) : r = t.isVisible ? 1 : 0, t.totalVisibleHeaderCount = r, r;
            }(e, !0);
        });
    }
    function Q(e) {
        var n = e.columns, o = e.flatHeaders, r = e.dispatch, i = e.allColumns, u = e.getHooks, s = e.state.hiddenColumns, a = e.autoResetHiddenColumns, c = void 0 === a || a, d = h(e), p = i.length === s.length, g = t.useCallback(function(e, t) {
            return r({
                type: l.toggleHideColumn,
                columnId: e,
                value: t
            });
        }, [
            r
        ]), v = t.useCallback(function(e) {
            return r({
                type: l.setHiddenColumns,
                value: e
            });
        }, [
            r
        ]), m = t.useCallback(function(e) {
            return r({
                type: l.toggleHideAllColumns,
                value: e
            });
        }, [
            r
        ]), y = f(u().getToggleHideAllColumnsProps, {
            instance: d()
        });
        o.forEach(function(e) {
            e.toggleHidden = function(t) {
                r({
                    type: l.toggleHideColumn,
                    columnId: e.id,
                    value: t
                });
            }, e.getToggleHiddenProps = f(u().getToggleHiddenProps, {
                instance: d(),
                column: e
            });
        });
        var R = h(c);
        w(function() {
            R() && r({
                type: l.resetHiddenColumns
            });
        }, [
            r,
            n
        ]), Object.assign(e, {
            allColumnsHidden: p,
            toggleHideColumn: g,
            setHiddenColumns: v,
            toggleHideAllColumns: m,
            getToggleHideAllColumnsProps: y
        });
    }
    var Z = {}, ee = {}, te = function(e, t, n) {
        return e;
    }, ne = function(e, t) {
        return e.subRows || [];
    }, oe = function(e, t, n) {
        return "" + (n ? [
            n.id,
            t
        ].join(".") : t);
    }, re = function(e) {
        return e;
    };
    function ie(e) {
        var t = e.initialState, n = void 0 === t ? Z : t, o = e.defaultColumn, u = void 0 === o ? ee : o, l = e.getSubRows, s = void 0 === l ? ne : l, a = e.getRowId, c = void 0 === a ? oe : a, d = e.stateReducer, f = void 0 === d ? te : d, p = e.useControlledState, g = void 0 === p ? re : p;
        return r({}, i(e, [
            "initialState",
            "defaultColumn",
            "getSubRows",
            "getRowId",
            "stateReducer",
            "useControlledState"
        ]), {
            initialState: n,
            defaultColumn: u,
            getSubRows: s,
            getRowId: c,
            stateReducer: f,
            useControlledState: g
        });
    }
    function ue(e, t) {
        void 0 === t && (t = 0);
        var n = 0, o = 0, r = 0, i = 0;
        return e.forEach(function(e) {
            var u = e.headers;
            if (e.totalLeft = t, u && u.length) {
                var l = ue(u, t), s = l[0], a = l[1], c = l[2], d = l[3];
                e.totalMinWidth = s, e.totalWidth = a, e.totalMaxWidth = c, e.totalFlexWidth = d;
            } else e.totalMinWidth = e.minWidth, e.totalWidth = Math.min(Math.max(e.minWidth, e.width), e.maxWidth), e.totalMaxWidth = e.maxWidth, e.totalFlexWidth = e.canResize ? e.totalWidth : 0;
            e.isVisible && (t += e.totalWidth, n += e.totalMinWidth, o += e.totalWidth, r += e.totalMaxWidth, i += e.totalFlexWidth);
        }), [
            n,
            o,
            r,
            i
        ];
    }
    function le(e) {
        var t = e.data, n = e.rows, o = e.flatRows, r = e.rowsById, i = e.column, u = e.getRowId, l = e.getSubRows, s = e.accessValueHooks, a = e.getInstance;
        t.forEach(function(e, c) {
            return function e(n, c, d, f, g) {
                void 0 === d && (d = 0);
                var v = n, m = u(n, c, f), h = r[m];
                if (h) h.subRows && h.originalSubRows.forEach(function(t, n) {
                    return e(t, n, d + 1, h);
                });
                else if ((h = {
                    id: m,
                    original: v,
                    index: c,
                    depth: d,
                    cells: [
                        {}
                    ]
                }).cells.map = W, h.cells.filter = W, h.cells.forEach = W, h.cells[0].getCellProps = W, h.values = {}, g.push(h), o.push(h), r[m] = h, h.originalSubRows = l(n, c), h.originalSubRows) {
                    var y = [];
                    h.originalSubRows.forEach(function(t, n) {
                        return e(t, n, d + 1, h, y);
                    }), h.subRows = y;
                }
                i.accessor && (h.values[i.id] = i.accessor(n, c, h, g, t)), h.values[i.id] = p(s, h.values[i.id], {
                    row: h,
                    column: i,
                    instance: a()
                });
            }(e, c, 0, void 0, n);
        });
    }
    l.resetExpanded = "resetExpanded", l.toggleRowExpanded = "toggleRowExpanded", l.toggleAllRowsExpanded = "toggleAllRowsExpanded";
    var se = function(e) {
        e.getToggleAllRowsExpandedProps = [
            ae
        ], e.getToggleRowExpandedProps = [
            ce
        ], e.stateReducers.push(de), e.useInstance.push(fe), e.prepareRow.push(pe);
    };
    se.pluginName = "useExpanded";
    var ae = function(e, t) {
        var n = t.instance;
        return [
            e,
            {
                onClick: function(e) {
                    n.toggleAllRowsExpanded();
                },
                style: {
                    cursor: "pointer"
                },
                title: "Toggle All Rows Expanded"
            }
        ];
    }, ce = function(e, t) {
        var n = t.row;
        return [
            e,
            {
                onClick: function() {
                    n.toggleRowExpanded();
                },
                style: {
                    cursor: "pointer"
                },
                title: "Toggle Row Expanded"
            }
        ];
    };
    function de(e, t, n, o) {
        if (t.type === l.init) return r({
            expanded: {}
        }, e);
        if (t.type === l.resetExpanded) return r({}, e, {
            expanded: o.initialState.expanded || {}
        });
        if (t.type === l.toggleAllRowsExpanded) {
            var s = t.value, a = o.rowsById, c = Object.keys(a).length === Object.keys(e.expanded).length;
            if (void 0 !== s ? s : !c) {
                var d = {};
                return Object.keys(a).forEach(function(e) {
                    d[e] = !0;
                }), r({}, e, {
                    expanded: d
                });
            }
            return r({}, e, {
                expanded: {}
            });
        }
        if (t.type === l.toggleRowExpanded) {
            var f, p = t.id, g = t.value, v = e.expanded[p], m = void 0 !== g ? g : !v;
            if (!v && m) return r({}, e, {
                expanded: r({}, e.expanded, (f = {}, f[p] = !0, f))
            });
            if (v && !m) {
                var h = e.expanded;
                h[p];
                return r({}, e, {
                    expanded: i(h, [
                        p
                    ].map(u))
                });
            }
            return e;
        }
    }
    function fe(e) {
        var n = e.data, o = e.rows, r = e.rowsById, i = e.manualExpandedKey, u = void 0 === i ? "expanded" : i, s = e.paginateExpandedRows, a = void 0 === s || s, c = e.expandSubRows, d = void 0 === c || c, p = e.autoResetExpanded, g = void 0 === p || p, m = e.getHooks, y = e.plugins, R = e.state.expanded, b = e.dispatch;
        v(y, [
            "useSortBy",
            "useGroupBy",
            "usePivotColumns",
            "useGlobalFilter"
        ], "useExpanded");
        var S = h(g), C = Boolean(Object.keys(r).length && Object.keys(R).length);
        C && Object.keys(r).some(function(e) {
            return !R[e];
        }) && (C = !1), w(function() {
            S() && b({
                type: l.resetExpanded
            });
        }, [
            b,
            n
        ]);
        var x = t.useCallback(function(e, t) {
            b({
                type: l.toggleRowExpanded,
                id: e,
                value: t
            });
        }, [
            b
        ]), P = t.useCallback(function(e) {
            return b({
                type: l.toggleAllRowsExpanded,
                value: e
            });
        }, [
            b
        ]), B = t.useMemo(function() {
            return a ? A(o, {
                manualExpandedKey: u,
                expanded: R,
                expandSubRows: d
            }) : o;
        }, [
            a,
            o,
            u,
            R,
            d
        ]), E = t.useMemo(function() {
            return function(e) {
                var t = 0;
                return Object.keys(e).forEach(function(e) {
                    var n = e.split(".");
                    t = Math.max(t, n.length);
                }), t;
            }(R);
        }, [
            R
        ]), I = h(e), F = f(m().getToggleAllRowsExpandedProps, {
            instance: I()
        });
        Object.assign(e, {
            preExpandedRows: o,
            expandedRows: B,
            rows: B,
            expandedDepth: E,
            isAllRowsExpanded: C,
            toggleRowExpanded: x,
            toggleAllRowsExpanded: P,
            getToggleAllRowsExpandedProps: F
        });
    }
    function pe(e, t) {
        var n = t.instance.getHooks, o = t.instance;
        e.toggleRowExpanded = function(t) {
            return o.toggleRowExpanded(e.id, t);
        }, e.getToggleRowExpandedProps = f(n().getToggleRowExpandedProps, {
            instance: o,
            row: e
        });
    }
    var ge = function(e, t, n) {
        return e = e.filter(function(e) {
            return t.some(function(t) {
                var o = e.values[t];
                return String(o).toLowerCase().includes(String(n).toLowerCase());
            });
        });
    };
    ge.autoRemove = function(e) {
        return !e;
    };
    var ve = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                var o = e.values[t];
                return void 0 === o || String(o).toLowerCase() === String(n).toLowerCase();
            });
        });
    };
    ve.autoRemove = function(e) {
        return !e;
    };
    var me = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                var o = e.values[t];
                return void 0 === o || String(o) === String(n);
            });
        });
    };
    me.autoRemove = function(e) {
        return !e;
    };
    var he = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                return e.values[t].includes(n);
            });
        });
    };
    he.autoRemove = function(e) {
        return !e || !e.length;
    };
    var ye = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                var o = e.values[t];
                return o && o.length && n.every(function(e) {
                    return o.includes(e);
                });
            });
        });
    };
    ye.autoRemove = function(e) {
        return !e || !e.length;
    };
    var we = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                var o = e.values[t];
                return o && o.length && n.some(function(e) {
                    return o.includes(e);
                });
            });
        });
    };
    we.autoRemove = function(e) {
        return !e || !e.length;
    };
    var Re = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                var o = e.values[t];
                return n.includes(o);
            });
        });
    };
    Re.autoRemove = function(e) {
        return !e || !e.length;
    };
    var be = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                return e.values[t] === n;
            });
        });
    };
    be.autoRemove = function(e) {
        return void 0 === e;
    };
    var Se = function(e, t, n) {
        return e.filter(function(e) {
            return t.some(function(t) {
                return e.values[t] == n;
            });
        });
    };
    Se.autoRemove = function(e) {
        return null == e;
    };
    var Ce = function(e, t, n) {
        var o = n || [], r = o[0], i = o[1];
        if ((r = "number" == typeof r ? r : -1 / 0) > (i = "number" == typeof i ? i : 1 / 0)) {
            var u = r;
            r = i, i = u;
        }
        return e.filter(function(e) {
            return t.some(function(t) {
                var n = e.values[t];
                return n >= r && n <= i;
            });
        });
    };
    Ce.autoRemove = function(e) {
        return !e || "number" != typeof e[0] && "number" != typeof e[1];
    };
    var xe = Object.freeze({
        __proto__: null,
        text: ge,
        exactText: ve,
        exactTextCase: me,
        includes: he,
        includesAll: ye,
        includesSome: we,
        includesValue: Re,
        exact: be,
        equals: Se,
        between: Ce
    });
    l.resetFilters = "resetFilters", l.setFilter = "setFilter", l.setAllFilters = "setAllFilters";
    var Pe = function(e) {
        e.stateReducers.push(Be), e.useInstance.push(Ee);
    };
    function Be(e, t, n, o) {
        if (t.type === l.init) return r({
            filters: []
        }, e);
        if (t.type === l.resetFilters) return r({}, e, {
            filters: o.initialState.filters || []
        });
        if (t.type === l.setFilter) {
            var i = t.columnId, u = t.filterValue, s = o.allColumns, a = o.filterTypes, c = s.find(function(e) {
                return e.id === i;
            });
            if (!c) throw new Error("React-Table: Could not find a column with id: " + i);
            var d = k(c.filter, a || {}, xe), f = e.filters.find(function(e) {
                return e.id === i;
            }), p = m(u, f && f.value);
            return H(d.autoRemove, p, c) ? r({}, e, {
                filters: e.filters.filter(function(e) {
                    return e.id !== i;
                })
            }) : r({}, e, f ? {
                filters: e.filters.map(function(e) {
                    return e.id === i ? {
                        id: i,
                        value: p
                    } : e;
                })
            } : {
                filters: [].concat(e.filters, [
                    {
                        id: i,
                        value: p
                    }
                ])
            });
        }
        if (t.type === l.setAllFilters) {
            var g = t.filters, v = o.allColumns, h = o.filterTypes;
            return r({}, e, {
                filters: m(g, e.filters).filter(function(e) {
                    var t = v.find(function(t) {
                        return t.id === e.id;
                    });
                    return !H(k(t.filter, h || {}, xe).autoRemove, e.value, t);
                })
            });
        }
    }
    function Ee(e) {
        var n = e.data, o = e.rows, r = e.flatRows, i = e.rowsById, u = e.allColumns, s = e.filterTypes, a = e.manualFilters, c = e.defaultCanFilter, d = void 0 !== c && c, f = e.disableFilters, p = e.state.filters, g = e.dispatch, v = e.autoResetFilters, m = void 0 === v || v, y = t.useCallback(function(e, t) {
            g({
                type: l.setFilter,
                columnId: e,
                filterValue: t
            });
        }, [
            g
        ]), R = t.useCallback(function(e) {
            g({
                type: l.setAllFilters,
                filters: e
            });
        }, [
            g
        ]);
        u.forEach(function(e) {
            var t = e.id, n = e.accessor, o = e.defaultCanFilter, r = e.disableFilters;
            e.canFilter = n ? I(!0 !== r && void 0, !0 !== f && void 0, !0) : I(o, d, !1), e.setFilter = function(t) {
                return y(e.id, t);
            };
            var i = p.find(function(e) {
                return e.id === t;
            });
            e.filterValue = i && i.value;
        });
        var b = t.useMemo(function() {
            if (a || !p.length) return [
                o,
                r,
                i
            ];
            var e = [], t = {};
            return [
                function n(o, r) {
                    void 0 === r && (r = 0);
                    var i = o;
                    return (i = p.reduce(function(e, t) {
                        var n = t.id, o = t.value, i = u.find(function(e) {
                            return e.id === n;
                        });
                        if (!i) return e;
                        0 === r && (i.preFilteredRows = e);
                        var l = k(i.filter, s || {}, xe);
                        return l ? (i.filteredRows = l(e, [
                            n
                        ], o), i.filteredRows) : (console.warn("Could not find a valid 'column.filter' for column with the ID: " + i.id + "."), e);
                    }, o)).forEach(function(o) {
                        e.push(o), t[o.id] = o, o.subRows && (o.subRows = o.subRows && o.subRows.length > 0 ? n(o.subRows, r + 1) : o.subRows);
                    }), i;
                }(o),
                e,
                t
            ];
        }, [
            a,
            p,
            o,
            r,
            i,
            u,
            s
        ]), S = b[0], C = b[1], x = b[2];
        t.useMemo(function() {
            u.filter(function(e) {
                return !p.find(function(t) {
                    return t.id === e.id;
                });
            }).forEach(function(e) {
                e.preFilteredRows = S, e.filteredRows = S;
            });
        }, [
            S,
            p,
            u
        ]);
        var P = h(m);
        w(function() {
            P() && g({
                type: l.resetFilters
            });
        }, [
            g,
            a ? null : n
        ]), Object.assign(e, {
            preFilteredRows: o,
            preFilteredFlatRows: r,
            preFilteredRowsById: i,
            filteredRows: S,
            filteredFlatRows: C,
            filteredRowsById: x,
            rows: S,
            flatRows: C,
            rowsById: x,
            setFilter: y,
            setAllFilters: R
        });
    }
    Pe.pluginName = "useFilters", l.resetGlobalFilter = "resetGlobalFilter", l.setGlobalFilter = "setGlobalFilter";
    var Ie = function(e) {
        e.stateReducers.push(Fe), e.useInstance.push(Ge);
    };
    function Fe(e, t, n, o) {
        if (t.type === l.resetGlobalFilter) return r({}, e, {
            globalFilter: o.initialState.globalFilter || void 0
        });
        if (t.type === l.setGlobalFilter) {
            var u = t.filterValue, s = o.userFilterTypes, a = k(o.globalFilter, s || {}, xe), c = m(u, e.globalFilter);
            if (H(a.autoRemove, c)) {
                e.globalFilter;
                return i(e, [
                    "globalFilter"
                ]);
            }
            return r({}, e, {
                globalFilter: c
            });
        }
    }
    function Ge(e) {
        var n = e.data, o = e.rows, r = e.flatRows, i = e.rowsById, u = e.allColumns, s = e.filterTypes, a = e.globalFilter, c = e.manualGlobalFilter, d = e.state.globalFilter, f = e.dispatch, p = e.autoResetGlobalFilter, g = void 0 === p || p, v = e.disableGlobalFilter, m = t.useCallback(function(e) {
            f({
                type: l.setGlobalFilter,
                filterValue: e
            });
        }, [
            f
        ]), y = t.useMemo(function() {
            if (c || void 0 === d) return [
                o,
                r,
                i
            ];
            var e = [], t = {}, n = k(a, s || {}, xe);
            if (!n) return console.warn("Could not find a valid 'globalFilter' option."), o;
            u.forEach(function(e) {
                var t = e.disableGlobalFilter;
                e.canFilter = I(!0 !== t && void 0, !0 !== v && void 0, !0);
            });
            var l = u.filter(function(e) {
                return !0 === e.canFilter;
            });
            return [
                function o(r) {
                    return (r = n(r, l.map(function(e) {
                        return e.id;
                    }), d)).forEach(function(n) {
                        e.push(n), t[n.id] = n, n.subRows = n.subRows && n.subRows.length ? o(n.subRows) : n.subRows;
                    }), r;
                }(o),
                e,
                t
            ];
        }, [
            c,
            d,
            a,
            s,
            u,
            o,
            r,
            i,
            v
        ]), R = y[0], b = y[1], S = y[2], C = h(g);
        w(function() {
            C() && f({
                type: l.resetGlobalFilter
            });
        }, [
            f,
            c ? null : n
        ]), Object.assign(e, {
            preGlobalFilteredRows: o,
            preGlobalFilteredFlatRows: r,
            preGlobalFilteredRowsById: i,
            globalFilteredRows: R,
            globalFilteredFlatRows: b,
            globalFilteredRowsById: S,
            rows: R,
            flatRows: b,
            rowsById: S,
            setGlobalFilter: m,
            disableGlobalFilter: v
        });
    }
    function Ae(e, t) {
        return t.reduce(function(e, t) {
            return e + ("number" == typeof t ? t : 0);
        }, 0);
    }
    Ie.pluginName = "useGlobalFilter";
    var ke = Object.freeze({
        __proto__: null,
        sum: Ae,
        min: function(e) {
            var t = e[0] || 0;
            return e.forEach(function(e) {
                "number" == typeof e && (t = Math.min(t, e));
            }), t;
        },
        max: function(e) {
            var t = e[0] || 0;
            return e.forEach(function(e) {
                "number" == typeof e && (t = Math.max(t, e));
            }), t;
        },
        minMax: function(e) {
            var t = e[0] || 0, n = e[0] || 0;
            return e.forEach(function(e) {
                "number" == typeof e && (t = Math.min(t, e), n = Math.max(n, e));
            }), t + ".." + n;
        },
        average: function(e) {
            return Ae(0, e) / e.length;
        },
        median: function(e) {
            if (!e.length) return null;
            var t = Math.floor(e.length / 2), n = [].concat(e).sort(function(e, t) {
                return e - t;
            });
            return e.length % 2 != 0 ? n[t] : (n[t - 1] + n[t]) / 2;
        },
        unique: function(e) {
            return Array.from(new Set(e).values());
        },
        uniqueCount: function(e) {
            return new Set(e).size;
        },
        count: function(e) {
            return e.length;
        }
    }), He = [], We = {};
    l.resetGroupBy = "resetGroupBy", l.setGroupBy = "setGroupBy", l.toggleGroupBy = "toggleGroupBy";
    var ze = function(e) {
        e.getGroupByToggleProps = [
            Te
        ], e.stateReducers.push(Oe), e.visibleColumnsDeps.push(function(e, t) {
            var n = t.instance;
            return [].concat(e, [
                n.state.groupBy
            ]);
        }), e.visibleColumns.push(Me), e.useInstance.push(Le), e.prepareRow.push(Ne);
    };
    ze.pluginName = "useGroupBy";
    var Te = function(e, t) {
        var n = t.header;
        return [
            e,
            {
                onClick: n.canGroupBy ? function(e) {
                    e.persist(), n.toggleGroupBy();
                } : void 0,
                style: {
                    cursor: n.canGroupBy ? "pointer" : void 0
                },
                title: "Toggle GroupBy"
            }
        ];
    };
    function Oe(e, t, n, o) {
        if (t.type === l.init) return r({
            groupBy: []
        }, e);
        if (t.type === l.resetGroupBy) return r({}, e, {
            groupBy: o.initialState.groupBy || []
        });
        if (t.type === l.setGroupBy) return r({}, e, {
            groupBy: t.value
        });
        if (t.type === l.toggleGroupBy) {
            var i = t.columnId, u = t.value, s = void 0 !== u ? u : !e.groupBy.includes(i);
            return r({}, e, s ? {
                groupBy: [].concat(e.groupBy, [
                    i
                ])
            } : {
                groupBy: e.groupBy.filter(function(e) {
                    return e !== i;
                })
            });
        }
    }
    function Me(e, t) {
        var n = t.instance.state.groupBy, o = n.map(function(t) {
            return e.find(function(e) {
                return e.id === t;
            });
        }).filter(Boolean), r = e.filter(function(e) {
            return !n.includes(e.id);
        });
        return (e = [].concat(o, r)).forEach(function(e) {
            e.isGrouped = n.includes(e.id), e.groupedIndex = n.indexOf(e.id);
        }), e;
    }
    var je = {};
    function Le(e) {
        var n = e.data, o = e.rows, i = e.flatRows, u = e.rowsById, s = e.allColumns, a = e.flatHeaders, c = e.groupByFn, d = void 0 === c ? De : c, p = e.manualGroupBy, g = e.aggregations, m = void 0 === g ? je : g, y = e.plugins, R = e.state.groupBy, b = e.dispatch, S = e.autoResetGroupBy, C = void 0 === S || S, x = e.disableGroupBy, P = e.defaultCanGroupBy, B = e.getHooks;
        v(y, [
            "useColumnOrder",
            "useFilters"
        ], "useGroupBy");
        var E = h(e);
        s.forEach(function(t) {
            var n = t.accessor, o = t.defaultGroupBy, r = t.disableGroupBy;
            t.canGroupBy = n ? I(t.canGroupBy, !0 !== r && void 0, !0 !== x && void 0, !0) : I(t.canGroupBy, o, P, !1), t.canGroupBy && (t.toggleGroupBy = function() {
                return e.toggleGroupBy(t.id);
            }), t.Aggregated = t.Aggregated || t.Cell;
        });
        var F = t.useCallback(function(e, t) {
            b({
                type: l.toggleGroupBy,
                columnId: e,
                value: t
            });
        }, [
            b
        ]), A = t.useCallback(function(e) {
            b({
                type: l.setGroupBy,
                value: e
            });
        }, [
            b
        ]);
        a.forEach(function(e) {
            e.getGroupByToggleProps = f(B().getGroupByToggleProps, {
                instance: E(),
                header: e
            });
        });
        var k = t.useMemo(function() {
            if (p || !R.length) return [
                o,
                i,
                u,
                He,
                We,
                i,
                u
            ];
            var e = R.filter(function(e) {
                return s.find(function(t) {
                    return t.id === e;
                });
            }), t = [], n = {}, l = [], a = {}, c = [], f = {}, g = function o(i, u, p) {
                if (void 0 === u && (u = 0), u === e.length) return i.map(function(e) {
                    return r({}, e, {
                        depth: u
                    });
                });
                var g = e[u], v = d(i, g);
                return Object.entries(v).map(function(r, i) {
                    var d = r[0], v = r[1], h = g + ":" + d, y = o(v, u + 1, h = p ? p + ">" + h : h), w = u ? G(v, "leafRows") : v, R = function(t, n, o) {
                        var r = {};
                        return s.forEach(function(i) {
                            if (e.includes(i.id)) r[i.id] = n[0] ? n[0].values[i.id] : null;
                            else {
                                var u = "function" == typeof i.aggregate ? i.aggregate : m[i.aggregate] || ke[i.aggregate];
                                if (u) {
                                    var l = n.map(function(e) {
                                        return e.values[i.id];
                                    }), s = t.map(function(e) {
                                        var t = e.values[i.id];
                                        if (!o && i.aggregateValue) {
                                            var n = "function" == typeof i.aggregateValue ? i.aggregateValue : m[i.aggregateValue] || ke[i.aggregateValue];
                                            if (!n) throw console.info({
                                                column: i
                                            }), new Error("React Table: Invalid column.aggregateValue option for column listed above");
                                            t = n(t, e, i);
                                        }
                                        return t;
                                    });
                                    r[i.id] = u(s, l);
                                } else {
                                    if (i.aggregate) throw console.info({
                                        column: i
                                    }), new Error("React Table: Invalid column.aggregate option for column listed above");
                                    r[i.id] = null;
                                }
                            }
                        }), r;
                    }(w, v, u), b = {
                        id: h,
                        isGrouped: !0,
                        groupByID: g,
                        groupByVal: d,
                        values: R,
                        subRows: y,
                        leafRows: w,
                        depth: u,
                        index: i
                    };
                    return y.forEach(function(e) {
                        t.push(e), n[e.id] = e, e.isGrouped ? (l.push(e), a[e.id] = e) : (c.push(e), f[e.id] = e);
                    }), b;
                });
            }(o);
            return g.forEach(function(e) {
                t.push(e), n[e.id] = e, e.isGrouped ? (l.push(e), a[e.id] = e) : (c.push(e), f[e.id] = e);
            }), [
                g,
                t,
                n,
                l,
                a,
                c,
                f
            ];
        }, [
            p,
            R,
            o,
            i,
            u,
            s,
            m,
            d
        ]), H = k[0], W = k[1], z = k[2], T = k[3], O = k[4], M = k[5], j = k[6], L = h(C);
        w(function() {
            L() && b({
                type: l.resetGroupBy
            });
        }, [
            b,
            p ? null : n
        ]), Object.assign(e, {
            preGroupedRows: o,
            preGroupedFlatRow: i,
            preGroupedRowsById: u,
            groupedRows: H,
            groupedFlatRows: W,
            groupedRowsById: z,
            onlyGroupedFlatRows: T,
            onlyGroupedRowsById: O,
            nonGroupedFlatRows: M,
            nonGroupedRowsById: j,
            rows: H,
            flatRows: W,
            rowsById: z,
            toggleGroupBy: F,
            setGroupBy: A
        });
    }
    function Ne(e) {
        e.allCells.forEach(function(t) {
            var n;
            t.isGrouped = t.column.isGrouped && t.column.id === e.groupByID, t.isPlaceholder = !t.isGrouped && t.column.isGrouped, t.isAggregated = !t.isGrouped && !t.isPlaceholder && (null == (n = e.subRows) ? void 0 : n.length);
        });
    }
    function De(e, t) {
        return e.reduce(function(e, n, o) {
            var r = "" + n.values[t];
            return e[r] = Array.isArray(e[r]) ? e[r] : [], e[r].push(n), e;
        }, {});
    }
    var Ve = /([0-9]+)/gm;
    function _e(e, t) {
        return e === t ? 0 : e > t ? 1 : -1;
    }
    function Xe(e, t, n) {
        return [
            e.values[n],
            t.values[n]
        ];
    }
    function qe(e) {
        return "number" == typeof e ? isNaN(e) || e === 1 / 0 || e === -1 / 0 ? "" : String(e) : "string" == typeof e ? e : "";
    }
    var Ke = Object.freeze({
        __proto__: null,
        alphanumeric: function(e, t, n) {
            var o = Xe(e, t, n), r = o[0], i = o[1];
            for(r = qe(r), i = qe(i), r = r.split(Ve).filter(Boolean), i = i.split(Ve).filter(Boolean); r.length && i.length;){
                var u = r.shift(), l = i.shift(), s = parseInt(u, 10), a = parseInt(l, 10), c = [
                    s,
                    a
                ].sort();
                if (isNaN(c[0])) {
                    if (u > l) return 1;
                    if (l > u) return -1;
                } else {
                    if (isNaN(c[1])) return isNaN(s) ? -1 : 1;
                    if (s > a) return 1;
                    if (a > s) return -1;
                }
            }
            return r.length - i.length;
        },
        datetime: function(e, t, n) {
            var o = Xe(e, t, n), r = o[0], i = o[1];
            return _e(r = r.getTime(), i = i.getTime());
        },
        basic: function(e, t, n) {
            var o = Xe(e, t, n);
            return _e(o[0], o[1]);
        },
        string: function(e, t, n) {
            var o = Xe(e, t, n), r = o[0], i = o[1];
            for(r = r.split("").filter(Boolean), i = i.split("").filter(Boolean); r.length && i.length;){
                var u = r.shift(), l = i.shift(), s = u.toLowerCase(), a = l.toLowerCase();
                if (s > a) return 1;
                if (a > s) return -1;
                if (u > l) return 1;
                if (l > u) return -1;
            }
            return r.length - i.length;
        },
        number: function(e, t, n) {
            var o = Xe(e, t, n), r = o[0], i = o[1], u = /[^0-9.]/gi;
            return _e(r = Number(String(r).replace(u, "")), i = Number(String(i).replace(u, "")));
        }
    });
    l.resetSortBy = "resetSortBy", l.setSortBy = "setSortBy", l.toggleSortBy = "toggleSortBy", l.clearSortBy = "clearSortBy", c.sortType = "alphanumeric", c.sortDescFirst = !1;
    var Ue = function(e) {
        e.getSortByToggleProps = [
            $e
        ], e.stateReducers.push(Je), e.useInstance.push(Ye);
    };
    Ue.pluginName = "useSortBy";
    var $e = function(e, t) {
        var n = t.instance, o = t.column, r = n.isMultiSortEvent, i = void 0 === r ? function(e) {
            return e.shiftKey;
        } : r;
        return [
            e,
            {
                onClick: o.canSort ? function(e) {
                    e.persist(), o.toggleSortBy(void 0, !n.disableMultiSort && i(e));
                } : void 0,
                style: {
                    cursor: o.canSort ? "pointer" : void 0
                },
                title: o.canSort ? "Toggle SortBy" : void 0
            }
        ];
    };
    function Je(e, t, n, o) {
        if (t.type === l.init) return r({
            sortBy: []
        }, e);
        if (t.type === l.resetSortBy) return r({}, e, {
            sortBy: o.initialState.sortBy || []
        });
        if (t.type === l.clearSortBy) return r({}, e, {
            sortBy: e.sortBy.filter(function(e) {
                return e.id !== t.columnId;
            })
        });
        if (t.type === l.setSortBy) return r({}, e, {
            sortBy: t.sortBy
        });
        if (t.type === l.toggleSortBy) {
            var i, u = t.columnId, s = t.desc, a = t.multi, c = o.allColumns, d = o.disableMultiSort, f = o.disableSortRemove, p = o.disableMultiRemove, g = o.maxMultiSortColCount, v = void 0 === g ? Number.MAX_SAFE_INTEGER : g, m = e.sortBy, h = c.find(function(e) {
                return e.id === u;
            }).sortDescFirst, y = m.find(function(e) {
                return e.id === u;
            }), w = m.findIndex(function(e) {
                return e.id === u;
            }), R = null != s, b = [];
            return "toggle" !== (i = !d && a ? y ? "toggle" : "add" : w !== m.length - 1 || 1 !== m.length ? "replace" : y ? "toggle" : "replace") || f || R || a && p || !(y && y.desc && !h || !y.desc && h) || (i = "remove"), "replace" === i ? b = [
                {
                    id: u,
                    desc: R ? s : h
                }
            ] : "add" === i ? (b = [].concat(m, [
                {
                    id: u,
                    desc: R ? s : h
                }
            ])).splice(0, b.length - v) : "toggle" === i ? b = m.map(function(e) {
                return e.id === u ? r({}, e, {
                    desc: R ? s : !y.desc
                }) : e;
            }) : "remove" === i && (b = m.filter(function(e) {
                return e.id !== u;
            })), r({}, e, {
                sortBy: b
            });
        }
    }
    function Ye(e) {
        var n = e.data, o = e.rows, r = e.flatRows, i = e.allColumns, u = e.orderByFn, s = void 0 === u ? Qe : u, a = e.sortTypes, c = e.manualSortBy, d = e.defaultCanSort, p = e.disableSortBy, g = e.flatHeaders, m = e.state.sortBy, y = e.dispatch, R = e.plugins, b = e.getHooks, S = e.autoResetSortBy, C = void 0 === S || S;
        v(R, [
            "useFilters",
            "useGlobalFilter",
            "useGroupBy",
            "usePivotColumns"
        ], "useSortBy");
        var x = t.useCallback(function(e) {
            y({
                type: l.setSortBy,
                sortBy: e
            });
        }, [
            y
        ]), P = t.useCallback(function(e, t, n) {
            y({
                type: l.toggleSortBy,
                columnId: e,
                desc: t,
                multi: n
            });
        }, [
            y
        ]), B = h(e);
        g.forEach(function(e) {
            var t = e.accessor, n = e.canSort, o = e.disableSortBy, r = e.id, i = t ? I(!0 !== o && void 0, !0 !== p && void 0, !0) : I(d, n, !1);
            e.canSort = i, e.canSort && (e.toggleSortBy = function(t, n) {
                return P(e.id, t, n);
            }, e.clearSortBy = function() {
                y({
                    type: l.clearSortBy,
                    columnId: e.id
                });
            }), e.getSortByToggleProps = f(b().getSortByToggleProps, {
                instance: B(),
                column: e
            });
            var u = m.find(function(e) {
                return e.id === r;
            });
            e.isSorted = !!u, e.sortedIndex = m.findIndex(function(e) {
                return e.id === r;
            }), e.isSortedDesc = e.isSorted ? u.desc : void 0;
        });
        var E = t.useMemo(function() {
            if (c || !m.length) return [
                o,
                r
            ];
            var e = [], t = m.filter(function(e) {
                return i.find(function(t) {
                    return t.id === e.id;
                });
            });
            return [
                function n(o) {
                    var r = s(o, t.map(function(e) {
                        var t = i.find(function(t) {
                            return t.id === e.id;
                        });
                        if (!t) throw new Error("React-Table: Could not find a column with id: " + e.id + " while sorting");
                        var n = t.sortType, o = F(n) || (a || {})[n] || Ke[n];
                        if (!o) throw new Error("React-Table: Could not find a valid sortType of '" + n + "' for column '" + e.id + "'.");
                        return function(t, n) {
                            return o(t, n, e.id, e.desc);
                        };
                    }), t.map(function(e) {
                        var t = i.find(function(t) {
                            return t.id === e.id;
                        });
                        return t && t.sortInverted ? e.desc : !e.desc;
                    }));
                    return r.forEach(function(t) {
                        e.push(t), t.subRows && 0 !== t.subRows.length && (t.subRows = n(t.subRows));
                    }), r;
                }(o),
                e
            ];
        }, [
            c,
            m,
            o,
            r,
            i,
            s,
            a
        ]), G = E[0], A = E[1], k = h(C);
        w(function() {
            k() && y({
                type: l.resetSortBy
            });
        }, [
            c ? null : n
        ]), Object.assign(e, {
            preSortedRows: o,
            preSortedFlatRows: r,
            sortedRows: G,
            sortedFlatRows: A,
            rows: G,
            flatRows: A,
            setSortBy: x,
            toggleSortBy: P
        });
    }
    function Qe(e, t, n) {
        return [].concat(e).sort(function(e, o) {
            for(var r = 0; r < t.length; r += 1){
                var i = t[r], u = !1 === n[r] || "desc" === n[r], l = i(e, o);
                if (0 !== l) return u ? -l : l;
            }
            return n[0] ? e.index - o.index : o.index - e.index;
        });
    }
    l.resetPage = "resetPage", l.gotoPage = "gotoPage", l.setPageSize = "setPageSize";
    var Ze = function(e) {
        e.stateReducers.push(et), e.useInstance.push(tt);
    };
    function et(e, t, n, o) {
        if (t.type === l.init) return r({
            pageSize: 10,
            pageIndex: 0
        }, e);
        if (t.type === l.resetPage) return r({}, e, {
            pageIndex: o.initialState.pageIndex || 0
        });
        if (t.type === l.gotoPage) {
            var i = o.pageCount, u = o.page, s = m(t.pageIndex, e.pageIndex), a = !1;
            return s > e.pageIndex ? a = -1 === i ? u.length >= e.pageSize : s < i : s < e.pageIndex && (a = s > -1), a ? r({}, e, {
                pageIndex: s
            }) : e;
        }
        if (t.type === l.setPageSize) {
            var c = t.pageSize, d = e.pageSize * e.pageIndex;
            return r({}, e, {
                pageIndex: Math.floor(d / c),
                pageSize: c
            });
        }
    }
    function tt(e) {
        var n = e.rows, o = e.autoResetPage, r = void 0 === o || o, i = e.manualExpandedKey, u = void 0 === i ? "expanded" : i, s = e.plugins, a = e.pageCount, c = e.paginateExpandedRows, d = void 0 === c || c, f = e.expandSubRows, p = void 0 === f || f, g = e.state, m = g.pageSize, y = g.pageIndex, R = g.expanded, b = g.globalFilter, S = g.filters, C = g.groupBy, x = g.sortBy, P = e.dispatch, B = e.data, E = e.manualPagination;
        v(s, [
            "useGlobalFilter",
            "useFilters",
            "useGroupBy",
            "useSortBy",
            "useExpanded"
        ], "usePagination");
        var I = h(r);
        w(function() {
            I() && P({
                type: l.resetPage
            });
        }, [
            P,
            E ? null : B,
            b,
            S,
            C,
            x
        ]);
        var F = E ? a : Math.ceil(n.length / m), G = t.useMemo(function() {
            return F > 0 ? [].concat(new Array(F)).fill(null).map(function(e, t) {
                return t;
            }) : [];
        }, [
            F
        ]), k = t.useMemo(function() {
            var e;
            if (E) e = n;
            else {
                var t = m * y, o = t + m;
                e = n.slice(t, o);
            }
            return d ? e : A(e, {
                manualExpandedKey: u,
                expanded: R,
                expandSubRows: p
            });
        }, [
            p,
            R,
            u,
            E,
            y,
            m,
            d,
            n
        ]), H = y > 0, W = -1 === F ? k.length >= m : y < F - 1, z = t.useCallback(function(e) {
            P({
                type: l.gotoPage,
                pageIndex: e
            });
        }, [
            P
        ]), T = t.useCallback(function() {
            return z(function(e) {
                return e - 1;
            });
        }, [
            z
        ]), O = t.useCallback(function() {
            return z(function(e) {
                return e + 1;
            });
        }, [
            z
        ]), M = t.useCallback(function(e) {
            P({
                type: l.setPageSize,
                pageSize: e
            });
        }, [
            P
        ]);
        Object.assign(e, {
            pageOptions: G,
            pageCount: F,
            page: k,
            canPreviousPage: H,
            canNextPage: W,
            gotoPage: z,
            previousPage: T,
            nextPage: O,
            setPageSize: M
        });
    }
    Ze.pluginName = "usePagination", l.resetPivot = "resetPivot", l.togglePivot = "togglePivot";
    var nt = function(e) {
        e.getPivotToggleProps = [
            rt
        ], e.stateReducers.push(it), e.useInstanceAfterData.push(ut), e.allColumns.push(lt), e.accessValue.push(st), e.materializedColumns.push(at), e.materializedColumnsDeps.push(ct), e.visibleColumns.push(dt), e.visibleColumnsDeps.push(ft), e.useInstance.push(pt), e.prepareRow.push(gt);
    };
    nt.pluginName = "usePivotColumns";
    var ot = [], rt = function(e, t) {
        var n = t.header;
        return [
            e,
            {
                onClick: n.canPivot ? function(e) {
                    e.persist(), n.togglePivot();
                } : void 0,
                style: {
                    cursor: n.canPivot ? "pointer" : void 0
                },
                title: "Toggle Pivot"
            }
        ];
    };
    function it(e, t, n, o) {
        if (t.type === l.init) return r({
            pivotColumns: ot
        }, e);
        if (t.type === l.resetPivot) return r({}, e, {
            pivotColumns: o.initialState.pivotColumns || ot
        });
        if (t.type === l.togglePivot) {
            var i = t.columnId, u = t.value, s = void 0 !== u ? u : !e.pivotColumns.includes(i);
            return r({}, e, s ? {
                pivotColumns: [].concat(e.pivotColumns, [
                    i
                ])
            } : {
                pivotColumns: e.pivotColumns.filter(function(e) {
                    return e !== i;
                })
            });
        }
    }
    function ut(e) {
        e.allColumns.forEach(function(t) {
            t.isPivotSource = e.state.pivotColumns.includes(t.id);
        });
    }
    function lt(e, t) {
        var n = t.instance;
        return e.forEach(function(e) {
            e.isPivotSource = n.state.pivotColumns.includes(e.id), e.uniqueValues = new Set;
        }), e;
    }
    function st(e, t) {
        var n = t.column;
        return n.uniqueValues && void 0 !== e && n.uniqueValues.add(e), e;
    }
    function at(e, t) {
        var n = t.instance, o = n.allColumns, i = n.state;
        if (!i.pivotColumns.length || !i.groupBy || !i.groupBy.length) return e;
        var u = i.pivotColumns.map(function(e) {
            return o.find(function(t) {
                return t.id === e;
            });
        }).filter(Boolean), l = o.filter(function(e) {
            return !e.isPivotSource && !i.groupBy.includes(e.id) && !i.pivotColumns.includes(e.id);
        }), s = C(function e(t, n, o) {
            void 0 === t && (t = 0), void 0 === o && (o = []);
            var i = u[t];
            return i ? Array.from(i.uniqueValues).sort().map(function(u) {
                var l = r({}, i, {
                    Header: i.PivotHeader || "string" == typeof i.header ? i.Header + ": " + u : u,
                    isPivotGroup: !0,
                    parent: n,
                    depth: t,
                    id: n ? n.id + "." + i.id + "." + u : i.id + "." + u,
                    pivotValue: u
                });
                return l.columns = e(t + 1, l, [].concat(o, [
                    function(e) {
                        return e.values[i.id] === u;
                    }
                ])), l;
            }) : l.map(function(e) {
                return r({}, e, {
                    canPivot: !1,
                    isPivoted: !0,
                    parent: n,
                    depth: t,
                    id: "" + (n ? n.id + "." + e.id : e.id),
                    accessor: function(t, n, r) {
                        if (o.every(function(e) {
                            return e(r);
                        })) return r.values[e.id];
                    }
                });
            });
        }());
        return [].concat(e, s);
    }
    function ct(e, t) {
        var n = t.instance.state, o = n.pivotColumns, r = n.groupBy;
        return [].concat(e, [
            o,
            r
        ]);
    }
    function dt(e, t) {
        var n = t.instance.state;
        return e = e.filter(function(e) {
            return !e.isPivotSource;
        }), n.pivotColumns.length && n.groupBy && n.groupBy.length && (e = e.filter(function(e) {
            return e.isGrouped || e.isPivoted;
        })), e;
    }
    function ft(e, t) {
        var n = t.instance;
        return [].concat(e, [
            n.state.pivotColumns,
            n.state.groupBy
        ]);
    }
    function pt(e) {
        var t = e.columns, n = e.allColumns, o = e.flatHeaders, r = e.getHooks, i = e.plugins, u = e.dispatch, s = e.autoResetPivot, a = void 0 === s || s, c = e.manaulPivot, d = e.disablePivot, p = e.defaultCanPivot;
        v(i, [
            "useGroupBy"
        ], "usePivotColumns");
        var g = h(e);
        n.forEach(function(t) {
            var n = t.accessor, o = t.defaultPivot, r = t.disablePivot;
            t.canPivot = n ? I(t.canPivot, !0 !== r && void 0, !0 !== d && void 0, !0) : I(t.canPivot, o, p, !1), t.canPivot && (t.togglePivot = function() {
                return e.togglePivot(t.id);
            }), t.Aggregated = t.Aggregated || t.Cell;
        });
        o.forEach(function(e) {
            e.getPivotToggleProps = f(r().getPivotToggleProps, {
                instance: g(),
                header: e
            });
        });
        var m = h(a);
        w(function() {
            m() && u({
                type: l.resetPivot
            });
        }, [
            u,
            c ? null : t
        ]), Object.assign(e, {
            togglePivot: function(e, t) {
                u({
                    type: l.togglePivot,
                    columnId: e,
                    value: t
                });
            }
        });
    }
    function gt(e) {
        e.allCells.forEach(function(e) {
            e.isPivoted = e.column.isPivoted;
        });
    }
    l.resetSelectedRows = "resetSelectedRows", l.toggleAllRowsSelected = "toggleAllRowsSelected", l.toggleRowSelected = "toggleRowSelected", l.toggleAllPageRowsSelected = "toggleAllPageRowsSelected";
    var vt = function(e) {
        e.getToggleRowSelectedProps = [
            mt
        ], e.getToggleAllRowsSelectedProps = [
            ht
        ], e.getToggleAllPageRowsSelectedProps = [
            yt
        ], e.stateReducers.push(wt), e.useInstance.push(Rt), e.prepareRow.push(bt);
    };
    vt.pluginName = "useRowSelect";
    var mt = function(e, t) {
        var n = t.instance, o = t.row, r = n.manualRowSelectedKey, i = void 0 === r ? "isSelected" : r;
        return [
            e,
            {
                onChange: function(e) {
                    o.toggleRowSelected(e.target.checked);
                },
                style: {
                    cursor: "pointer"
                },
                checked: !(!o.original || !o.original[i]) || o.isSelected,
                title: "Toggle Row Selected",
                indeterminate: o.isSomeSelected
            }
        ];
    }, ht = function(e, t) {
        var n = t.instance;
        return [
            e,
            {
                onChange: function(e) {
                    n.toggleAllRowsSelected(e.target.checked);
                },
                style: {
                    cursor: "pointer"
                },
                checked: n.isAllRowsSelected,
                title: "Toggle All Rows Selected",
                indeterminate: Boolean(!n.isAllRowsSelected && Object.keys(n.state.selectedRowIds).length)
            }
        ];
    }, yt = function(e, t) {
        var n = t.instance;
        return [
            e,
            {
                onChange: function(e) {
                    n.toggleAllPageRowsSelected(e.target.checked);
                },
                style: {
                    cursor: "pointer"
                },
                checked: n.isAllPageRowsSelected,
                title: "Toggle All Current Page Rows Selected",
                indeterminate: Boolean(!n.isAllPageRowsSelected && n.page.some(function(e) {
                    var t = e.id;
                    return n.state.selectedRowIds[t];
                }))
            }
        ];
    };
    function wt(e, t, n, o) {
        if (t.type === l.init) return r({
            selectedRowIds: {}
        }, e);
        if (t.type === l.resetSelectedRows) return r({}, e, {
            selectedRowIds: o.initialState.selectedRowIds || {}
        });
        if (t.type === l.toggleAllRowsSelected) {
            var i = t.value, u = o.isAllRowsSelected, s = o.rowsById, a = o.nonGroupedRowsById, c = void 0 === a ? s : a, d = void 0 !== i ? i : !u, f = Object.assign({}, e.selectedRowIds);
            return d ? Object.keys(c).forEach(function(e) {
                f[e] = !0;
            }) : Object.keys(c).forEach(function(e) {
                delete f[e];
            }), r({}, e, {
                selectedRowIds: f
            });
        }
        if (t.type === l.toggleRowSelected) {
            var p = t.id, g = t.value, v = o.rowsById, m = o.selectSubRows, h = void 0 === m || m, y = o.getSubRows, w = e.selectedRowIds[p], R = void 0 !== g ? g : !w;
            if (w === R) return e;
            var b = r({}, e.selectedRowIds);
            return function e(t) {
                var n = v[t];
                if (n && (n.isGrouped || (R ? b[t] = !0 : delete b[t]), h && y(n))) return y(n).forEach(function(t) {
                    return e(t.id);
                });
            }(p), r({}, e, {
                selectedRowIds: b
            });
        }
        if (t.type === l.toggleAllPageRowsSelected) {
            var S = t.value, C = o.page, x = o.rowsById, P = o.selectSubRows, B = void 0 === P || P, E = o.isAllPageRowsSelected, I = o.getSubRows, F = void 0 !== S ? S : !E, G = r({}, e.selectedRowIds);
            return C.forEach(function(e) {
                return function e(t) {
                    var n = x[t];
                    if (n.isGrouped || (F ? G[t] = !0 : delete G[t]), B && I(n)) return I(n).forEach(function(t) {
                        return e(t.id);
                    });
                }(e.id);
            }), r({}, e, {
                selectedRowIds: G
            });
        }
        return e;
    }
    function Rt(e) {
        var n = e.data, o = e.rows, r = e.getHooks, i = e.plugins, u = e.rowsById, s = e.nonGroupedRowsById, a = void 0 === s ? u : s, c = e.autoResetSelectedRows, d = void 0 === c || c, p = e.state.selectedRowIds, g = e.selectSubRows, m = void 0 === g || g, y = e.dispatch, R = e.page, b = e.getSubRows;
        v(i, [
            "useFilters",
            "useGroupBy",
            "useSortBy",
            "useExpanded",
            "usePagination"
        ], "useRowSelect");
        var S = t.useMemo(function() {
            var e = [];
            return o.forEach(function(t) {
                var n = m ? function e(t, n, o) {
                    if (n[t.id]) return !0;
                    var r = o(t);
                    if (r && r.length) {
                        var i = !0, u = !1;
                        return r.forEach(function(t) {
                            u && !i || (e(t, n, o) ? u = !0 : i = !1);
                        }), !!i || !!u && null;
                    }
                    return !1;
                }(t, p, b) : !!p[t.id];
                t.isSelected = !!n, t.isSomeSelected = null === n, n && e.push(t);
            }), e;
        }, [
            o,
            m,
            p,
            b
        ]), C = Boolean(Object.keys(a).length && Object.keys(p).length), x = C;
        C && Object.keys(a).some(function(e) {
            return !p[e];
        }) && (C = !1), C || R && R.length && R.some(function(e) {
            var t = e.id;
            return !p[t];
        }) && (x = !1);
        var P = h(d);
        w(function() {
            P() && y({
                type: l.resetSelectedRows
            });
        }, [
            y,
            n
        ]);
        var B = t.useCallback(function(e) {
            return y({
                type: l.toggleAllRowsSelected,
                value: e
            });
        }, [
            y
        ]), E = t.useCallback(function(e) {
            return y({
                type: l.toggleAllPageRowsSelected,
                value: e
            });
        }, [
            y
        ]), I = t.useCallback(function(e, t) {
            return y({
                type: l.toggleRowSelected,
                id: e,
                value: t
            });
        }, [
            y
        ]), F = h(e), G = f(r().getToggleAllRowsSelectedProps, {
            instance: F()
        }), A = f(r().getToggleAllPageRowsSelectedProps, {
            instance: F()
        });
        Object.assign(e, {
            selectedFlatRows: S,
            isAllRowsSelected: C,
            isAllPageRowsSelected: x,
            toggleRowSelected: I,
            toggleAllRowsSelected: B,
            getToggleAllRowsSelectedProps: G,
            getToggleAllPageRowsSelectedProps: A,
            toggleAllPageRowsSelected: E
        });
    }
    function bt(e, t) {
        var n = t.instance;
        e.toggleRowSelected = function(t) {
            return n.toggleRowSelected(e.id, t);
        }, e.getToggleRowSelectedProps = f(n.getHooks().getToggleRowSelectedProps, {
            instance: n,
            row: e
        });
    }
    var St = function(e) {
        return {};
    }, Ct = function(e) {
        return {};
    };
    l.setRowState = "setRowState", l.setCellState = "setCellState", l.resetRowState = "resetRowState";
    var xt = function(e) {
        e.stateReducers.push(Pt), e.useInstance.push(Bt), e.prepareRow.push(Et);
    };
    function Pt(e, t, n, o) {
        var i = o.initialRowStateAccessor, u = void 0 === i ? St : i, s = o.initialCellStateAccessor, a = void 0 === s ? Ct : s, c = o.rowsById;
        if (t.type === l.init) return r({
            rowState: {}
        }, e);
        if (t.type === l.resetRowState) return r({}, e, {
            rowState: o.initialState.rowState || {}
        });
        if (t.type === l.setRowState) {
            var d, f = t.rowId, p = t.value, g = void 0 !== e.rowState[f] ? e.rowState[f] : u(c[f]);
            return r({}, e, {
                rowState: r({}, e.rowState, (d = {}, d[f] = m(p, g), d))
            });
        }
        if (t.type === l.setCellState) {
            var v, h, y, w, R, b = t.rowId, S = t.columnId, C = t.value, x = void 0 !== e.rowState[b] ? e.rowState[b] : u(c[b]), P = void 0 !== (null == x ? void 0 : null == (v = x.cellState) ? void 0 : v[S]) ? x.cellState[S] : a(null == (h = c[b]) ? void 0 : null == (y = h.cells) ? void 0 : y.find(function(e) {
                return e.column.id === S;
            }));
            return r({}, e, {
                rowState: r({}, e.rowState, (R = {}, R[b] = r({}, x, {
                    cellState: r({}, x.cellState || {}, (w = {}, w[S] = m(C, P), w))
                }), R))
            });
        }
    }
    function Bt(e) {
        var n = e.autoResetRowState, o = void 0 === n || n, r = e.data, i = e.dispatch, u = t.useCallback(function(e, t) {
            return i({
                type: l.setRowState,
                rowId: e,
                value: t
            });
        }, [
            i
        ]), s = t.useCallback(function(e, t, n) {
            return i({
                type: l.setCellState,
                rowId: e,
                columnId: t,
                value: n
            });
        }, [
            i
        ]), a = h(o);
        w(function() {
            a() && i({
                type: l.resetRowState
            });
        }, [
            r
        ]), Object.assign(e, {
            setRowState: u,
            setCellState: s
        });
    }
    function Et(e, t) {
        var n = t.instance, o = n.initialRowStateAccessor, r = void 0 === o ? St : o, i = n.initialCellStateAccessor, u = void 0 === i ? Ct : i, l = n.state.rowState;
        e && (e.state = void 0 !== l[e.id] ? l[e.id] : r(e), e.setState = function(t) {
            return n.setRowState(e.id, t);
        }, e.cells.forEach(function(t) {
            e.state.cellState || (e.state.cellState = {}), t.state = void 0 !== e.state.cellState[t.column.id] ? e.state.cellState[t.column.id] : u(t), t.setState = function(o) {
                return n.setCellState(e.id, t.column.id, o);
            };
        }));
    }
    xt.pluginName = "useRowState", l.resetColumnOrder = "resetColumnOrder", l.setColumnOrder = "setColumnOrder";
    var It = function(e) {
        e.stateReducers.push(Ft), e.visibleColumnsDeps.push(function(e, t) {
            var n = t.instance;
            return [].concat(e, [
                n.state.columnOrder
            ]);
        }), e.visibleColumns.push(Gt), e.useInstance.push(At);
    };
    function Ft(e, t, n, o) {
        return t.type === l.init ? r({
            columnOrder: []
        }, e) : t.type === l.resetColumnOrder ? r({}, e, {
            columnOrder: o.initialState.columnOrder || []
        }) : t.type === l.setColumnOrder ? r({}, e, {
            columnOrder: m(t.columnOrder, e.columnOrder)
        }) : void 0;
    }
    function Gt(e, t) {
        var n = t.instance.state.columnOrder;
        if (!n || !n.length) return e;
        for(var o = [].concat(n), r = [].concat(e), i = [], u = function() {
            var e = o.shift(), t = r.findIndex(function(t) {
                return t.id === e;
            });
            t > -1 && i.push(r.splice(t, 1)[0]);
        }; r.length && o.length;)u();
        return [].concat(i, r);
    }
    function At(e) {
        var n = e.dispatch;
        e.setColumnOrder = t.useCallback(function(e) {
            return n({
                type: l.setColumnOrder,
                columnOrder: e
            });
        }, [
            n
        ]);
    }
    It.pluginName = "useColumnOrder", c.canResize = !0, l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize";
    var kt = function(e) {
        e.getResizerProps = [
            Ht
        ], e.getHeaderProps.push({
            style: {
                position: "relative"
            }
        }), e.stateReducers.push(Wt), e.useInstance.push(Tt), e.useInstanceBeforeDimensions.push(zt);
    }, Ht = function(e, t) {
        var n = t.instance, o = t.header, r = n.dispatch, i = function(e, t) {
            var n = !1;
            if ("touchstart" === e.type) {
                if (e.touches && e.touches.length > 1) return;
                n = !0;
            }
            var o, i, u = (function(e) {
                var t = [];
                return function e(n) {
                    n.columns && n.columns.length && n.columns.map(e);
                    t.push(n);
                }(e), t;
            })(t).map(function(e) {
                return [
                    e.id,
                    e.totalWidth
                ];
            }), s = n ? Math.round(e.touches[0].clientX) : e.clientX, a = function() {
                window.cancelAnimationFrame(o), o = null, r({
                    type: l.columnDoneResizing
                });
            }, c = function() {
                window.cancelAnimationFrame(o), o = null, r({
                    type: l.columnResizing,
                    clientX: i
                });
            }, d = function(e) {
                i = e, o || (o = window.requestAnimationFrame(c));
            }, f = {
                mouse: {
                    moveEvent: "mousemove",
                    moveHandler: function(e) {
                        return d(e.clientX);
                    },
                    upEvent: "mouseup",
                    upHandler: function(e) {
                        document.removeEventListener("mousemove", f.mouse.moveHandler), document.removeEventListener("mouseup", f.mouse.upHandler), a();
                    }
                },
                touch: {
                    moveEvent: "touchmove",
                    moveHandler: function(e) {
                        return e.cancelable && (e.preventDefault(), e.stopPropagation()), d(e.touches[0].clientX), !1;
                    },
                    upEvent: "touchend",
                    upHandler: function(e) {
                        document.removeEventListener(f.touch.moveEvent, f.touch.moveHandler), document.removeEventListener(f.touch.upEvent, f.touch.moveHandler), a();
                    }
                }
            }, p = n ? f.touch : f.mouse, g = !!function() {
                if ("boolean" == typeof z) return z;
                var e = !1;
                try {
                    var t = {
                        get passive () {
                            return e = !0, !1;
                        }
                    };
                    window.addEventListener("test", null, t), window.removeEventListener("test", null, t);
                } catch (t) {
                    e = !1;
                }
                return z = e;
            }() && {
                passive: !1
            };
            document.addEventListener(p.moveEvent, p.moveHandler, g), document.addEventListener(p.upEvent, p.upHandler, g), r({
                type: l.columnStartResizing,
                columnId: t.id,
                columnWidth: t.totalWidth,
                headerIdWidths: u,
                clientX: s
            });
        };
        return [
            e,
            {
                onMouseDown: function(e) {
                    return e.persist() || i(e, o);
                },
                onTouchStart: function(e) {
                    return e.persist() || i(e, o);
                },
                style: {
                    cursor: "col-resize"
                },
                draggable: !1,
                role: "separator"
            }
        ];
    };
    function Wt(e, t) {
        if (t.type === l.init) return r({
            columnResizing: {
                columnWidths: {}
            }
        }, e);
        if (t.type === l.resetResize) return r({}, e, {
            columnResizing: {
                columnWidths: {}
            }
        });
        if (t.type === l.columnStartResizing) {
            var n = t.clientX, o = t.columnId, i = t.columnWidth, u = t.headerIdWidths;
            return r({}, e, {
                columnResizing: r({}, e.columnResizing, {
                    startX: n,
                    headerIdWidths: u,
                    columnWidth: i,
                    isResizingColumn: o
                })
            });
        }
        if (t.type === l.columnResizing) {
            var s = t.clientX, a = e.columnResizing, c = a.startX, d = a.columnWidth, f = a.headerIdWidths, p = (s - c) / d, g = {};
            return (void 0 === f ? [] : f).forEach(function(e) {
                var t = e[0], n = e[1];
                g[t] = Math.max(n + n * p, 0);
            }), r({}, e, {
                columnResizing: r({}, e.columnResizing, {
                    columnWidths: r({}, e.columnResizing.columnWidths, {}, g)
                })
            });
        }
        return t.type === l.columnDoneResizing ? r({}, e, {
            columnResizing: r({}, e.columnResizing, {
                startX: null,
                isResizingColumn: null
            })
        }) : void 0;
    }
    kt.pluginName = "useResizeColumns";
    var zt = function(e) {
        var t = e.flatHeaders, n = e.disableResizing, o = e.getHooks, r = e.state.columnResizing, i = h(e);
        t.forEach(function(e) {
            var t = I(!0 !== e.disableResizing && void 0, !0 !== n && void 0, !0);
            e.canResize = t, e.width = r.columnWidths[e.id] || e.originalWidth || e.width, e.isResizing = r.isResizingColumn === e.id, t && (e.getResizerProps = f(o().getResizerProps, {
                instance: i(),
                header: e
            }));
        });
    };
    function Tt(e) {
        var n = e.plugins, o = e.dispatch, r = e.autoResetResize, i = void 0 === r || r, u = e.columns;
        v(n, [
            "useAbsoluteLayout"
        ], "useResizeColumns");
        var s = h(i);
        w(function() {
            s() && o({
                type: l.resetResize
            });
        }, [
            u
        ]);
        var a = t.useCallback(function() {
            return o({
                type: l.resetResize
            });
        }, [
            o
        ]);
        Object.assign(e, {
            resetResizing: a
        });
    }
    var Ot = {
        position: "absolute",
        top: 0
    }, Mt = function(e) {
        e.getTableBodyProps.push(jt), e.getRowProps.push(jt), e.getHeaderGroupProps.push(jt), e.getFooterGroupProps.push(jt), e.getHeaderProps.push(function(e, t) {
            var n = t.column;
            return [
                e,
                {
                    style: r({}, Ot, {
                        left: n.totalLeft + "px",
                        width: n.totalWidth + "px"
                    })
                }
            ];
        }), e.getCellProps.push(function(e, t) {
            var n = t.cell;
            return [
                e,
                {
                    style: r({}, Ot, {
                        left: n.column.totalLeft + "px",
                        width: n.column.totalWidth + "px"
                    })
                }
            ];
        }), e.getFooterProps.push(function(e, t) {
            var n = t.column;
            return [
                e,
                {
                    style: r({}, Ot, {
                        left: n.totalLeft + "px",
                        width: n.totalWidth + "px"
                    })
                }
            ];
        });
    };
    Mt.pluginName = "useAbsoluteLayout";
    var jt = function(e, t) {
        return [
            e,
            {
                style: {
                    position: "relative",
                    width: t.instance.totalColumnsWidth + "px"
                }
            }
        ];
    }, Lt = {
        display: "inline-block",
        boxSizing: "border-box"
    }, Nt = function(e, t) {
        return [
            e,
            {
                style: {
                    display: "flex",
                    width: t.instance.totalColumnsWidth + "px"
                }
            }
        ];
    }, Dt = function(e) {
        e.getRowProps.push(Nt), e.getHeaderGroupProps.push(Nt), e.getFooterGroupProps.push(Nt), e.getHeaderProps.push(function(e, t) {
            var n = t.column;
            return [
                e,
                {
                    style: r({}, Lt, {
                        width: n.totalWidth + "px"
                    })
                }
            ];
        }), e.getCellProps.push(function(e, t) {
            var n = t.cell;
            return [
                e,
                {
                    style: r({}, Lt, {
                        width: n.column.totalWidth + "px"
                    })
                }
            ];
        }), e.getFooterProps.push(function(e, t) {
            var n = t.column;
            return [
                e,
                {
                    style: r({}, Lt, {
                        width: n.totalWidth + "px"
                    })
                }
            ];
        });
    };
    function Vt(e) {
        e.getTableProps.push(_t), e.getRowProps.push(Xt), e.getHeaderGroupProps.push(Xt), e.getFooterGroupProps.push(Xt), e.getHeaderProps.push(qt), e.getCellProps.push(Kt), e.getFooterProps.push(Ut);
    }
    Dt.pluginName = "useBlockLayout", Vt.pluginName = "useFlexLayout";
    var _t = function(e, t) {
        return [
            e,
            {
                style: {
                    minWidth: t.instance.totalColumnsMinWidth + "px"
                }
            }
        ];
    }, Xt = function(e, t) {
        return [
            e,
            {
                style: {
                    display: "flex",
                    flex: "1 0 auto",
                    minWidth: t.instance.totalColumnsMinWidth + "px"
                }
            }
        ];
    }, qt = function(e, t) {
        var n = t.column;
        return [
            e,
            {
                style: {
                    boxSizing: "border-box",
                    flex: n.totalFlexWidth ? n.totalFlexWidth + " 0 auto" : void 0,
                    minWidth: n.totalMinWidth + "px",
                    width: n.totalWidth + "px"
                }
            }
        ];
    }, Kt = function(e, t) {
        var n = t.cell;
        return [
            e,
            {
                style: {
                    boxSizing: "border-box",
                    flex: n.column.totalFlexWidth + " 0 auto",
                    minWidth: n.column.totalMinWidth + "px",
                    width: n.column.totalWidth + "px"
                }
            }
        ];
    }, Ut = function(e, t) {
        var n = t.column;
        return [
            e,
            {
                style: {
                    boxSizing: "border-box",
                    flex: n.totalFlexWidth ? n.totalFlexWidth + " 0 auto" : void 0,
                    minWidth: n.totalMinWidth + "px",
                    width: n.totalWidth + "px"
                }
            }
        ];
    };
    function $t(e) {
        e.stateReducers.push(Zt), e.getTableProps.push(Jt), e.getHeaderProps.push(Yt), e.getRowProps.push(Qt);
    }
    l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize", $t.pluginName = "useGridLayout";
    var Jt = function(e, t) {
        var n = t.instance;
        return [
            e,
            {
                style: {
                    display: "grid",
                    gridTemplateColumns: n.visibleColumns.map(function(e) {
                        var t;
                        return n.state.gridLayout.columnWidths[e.id] ? n.state.gridLayout.columnWidths[e.id] + "px" : (null == (t = n.state.columnResizing) ? void 0 : t.isResizingColumn) ? n.state.gridLayout.startWidths[e.id] + "px" : "number" == typeof e.width ? e.width + "px" : e.width;
                    }).join(" ")
                }
            }
        ];
    }, Yt = function(e, t) {
        var n = t.column;
        return [
            e,
            {
                id: "header-cell-" + n.id,
                style: {
                    position: "sticky",
                    gridColumn: "span " + n.totalVisibleHeaderCount
                }
            }
        ];
    }, Qt = function(e, t) {
        var n = t.row;
        return n.isExpanded ? [
            e,
            {
                style: {
                    gridColumn: "1 / " + (n.cells.length + 1)
                }
            }
        ] : [
            e,
            {}
        ];
    };
    function Zt(e, t, n, o) {
        if (t.type === l.init) return r({
            gridLayout: {
                columnWidths: {}
            }
        }, e);
        if (t.type === l.resetResize) return r({}, e, {
            gridLayout: {
                columnWidths: {}
            }
        });
        if (t.type === l.columnStartResizing) {
            var i = t.columnId, u = t.headerIdWidths, s = en(i);
            if (void 0 !== s) {
                var a = o.visibleColumns.reduce(function(e, t) {
                    var n;
                    return r({}, e, ((n = {})[t.id] = en(t.id), n));
                }, {}), c = o.visibleColumns.reduce(function(e, t) {
                    var n;
                    return r({}, e, ((n = {})[t.id] = t.minWidth, n));
                }, {}), d = o.visibleColumns.reduce(function(e, t) {
                    var n;
                    return r({}, e, ((n = {})[t.id] = t.maxWidth, n));
                }, {}), f = u.map(function(e) {
                    var t = e[0];
                    return [
                        t,
                        en(t)
                    ];
                });
                return r({}, e, {
                    gridLayout: r({}, e.gridLayout, {
                        startWidths: a,
                        minWidths: c,
                        maxWidths: d,
                        headerIdGridWidths: f,
                        columnWidth: s
                    })
                });
            }
            return e;
        }
        if (t.type === l.columnResizing) {
            var p = t.clientX, g = e.columnResizing.startX, v = e.gridLayout, m = v.columnWidth, h = v.minWidths, y = v.maxWidths, w = v.headerIdGridWidths, R = (p - g) / m, b = {};
            return (void 0 === w ? [] : w).forEach(function(e) {
                var t = e[0], n = e[1];
                b[t] = Math.min(Math.max(h[t], n + n * R), y[t]);
            }), r({}, e, {
                gridLayout: r({}, e.gridLayout, {
                    columnWidths: r({}, e.gridLayout.columnWidths, {}, b)
                })
            });
        }
        return t.type === l.columnDoneResizing ? r({}, e, {
            gridLayout: r({}, e.gridLayout, {
                startWidths: {},
                minWidths: {},
                maxWidths: {}
            })
        }) : void 0;
    }
    function en(e) {
        var t, n = null == (t = document.getElementById("header-cell-" + e)) ? void 0 : t.offsetWidth;
        if (void 0 !== n) return n;
    }
    e._UNSTABLE_usePivotColumns = nt, e.actions = l, e.defaultColumn = c, e.defaultGroupByFn = De, e.defaultOrderByFn = Qe, e.defaultRenderer = s, e.emptyRenderer = a, e.ensurePluginOrder = v, e.flexRender = b, e.functionalUpdate = m, e.loopHooks = g, e.makePropGetter = f, e.makeRenderer = R, e.reduceHooks = p, e.safeUseLayoutEffect = y, e.useAbsoluteLayout = Mt, e.useAsyncDebounce = function(e, n) {
        void 0 === n && (n = 0);
        var r = t.useRef({}), i = h(e), u = h(n);
        return t.useCallback(function() {
            var e = o(regeneratorRuntime.mark(function e() {
                var t, n, l, s = arguments;
                return regeneratorRuntime.wrap(function(e) {
                    for(;;)switch(e.prev = e.next){
                        case 0:
                            for(t = s.length, n = new Array(t), l = 0; l < t; l++)n[l] = s[l];
                            return r.current.promise || (r.current.promise = new Promise(function(e, t) {
                                r.current.resolve = e, r.current.reject = t;
                            })), r.current.timeout && clearTimeout(r.current.timeout), r.current.timeout = setTimeout(o(regeneratorRuntime.mark(function e() {
                                return regeneratorRuntime.wrap(function(e) {
                                    for(;;)switch(e.prev = e.next){
                                        case 0:
                                            return delete r.current.timeout, e.prev = 1, e.t0 = r.current, e.next = 5, i().apply(void 0, n);
                                        case 5:
                                            e.t1 = e.sent, e.t0.resolve.call(e.t0, e.t1), e.next = 12;
                                            break;
                                        case 9:
                                            e.prev = 9, e.t2 = e.catch(1), r.current.reject(e.t2);
                                        case 12:
                                            return e.prev = 12, delete r.current.promise, e.finish(12);
                                        case 15:
                                        case "end":
                                            return e.stop();
                                    }
                                }, e, null, [
                                    [
                                        1,
                                        9,
                                        12,
                                        15
                                    ]
                                ]);
                            })), u()), e.abrupt("return", r.current.promise);
                        case 5:
                        case "end":
                            return e.stop();
                    }
                }, e);
            }));
            return function() {
                return e.apply(this, arguments);
            };
        }(), [
            i,
            u
        ]);
    }, e.useBlockLayout = Dt, e.useColumnOrder = It, e.useExpanded = se, e.useFilters = Pe, e.useFlexLayout = Vt, e.useGetLatest = h, e.useGlobalFilter = Ie, e.useGridLayout = $t, e.useGroupBy = ze, e.useMountedLayoutEffect = w, e.usePagination = Ze, e.useResizeColumns = kt, e.useRowSelect = vt, e.useRowState = xt, e.useSortBy = Ue, e.useTable = function(e) {
        for(var n = arguments.length, o = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)o[i - 1] = arguments[i];
        e = ie(e), o = [
            K
        ].concat(o);
        var u = t.useRef({}), s = h(u.current);
        Object.assign(s(), r({}, e, {
            plugins: o,
            hooks: q()
        })), o.filter(Boolean).forEach(function(e) {
            e(s().hooks);
        });
        var a = h(s().hooks);
        s().getHooks = a, delete s().hooks, Object.assign(s(), p(a().useOptions, ie(e)));
        var c = s(), d = c.data, v = c.columns, m = c.initialState, y = c.defaultColumn, w = c.getSubRows, b = c.getRowId, E = c.stateReducer, I = c.useControlledState, F = h(E), G = t.useCallback(function(e, t) {
            if (!t.type) throw console.info({
                action: t
            }), new Error("Unknown Action \uD83D\uDC46");
            return [].concat(a().stateReducers, Array.isArray(F()) ? F() : [
                F()
            ]).reduce(function(n, o) {
                return o(n, t, e, s()) || n;
            }, e);
        }, [
            a,
            F,
            s
        ]), A = t.useReducer(G, void 0, function() {
            return G(m, {
                type: l.init
            });
        }), k = A[0], H = A[1], W = p([].concat(a().useControlledState, [
            I
        ]), k, {
            instance: s()
        });
        Object.assign(s(), {
            state: W,
            dispatch: H
        });
        var z = t.useMemo(function() {
            return S(p(a().columns, v, {
                instance: s()
            }));
        }, [
            a,
            s,
            v
        ].concat(p(a().columnsDeps, [], {
            instance: s()
        })));
        s().columns = z;
        var T = t.useMemo(function() {
            return p(a().allColumns, C(z), {
                instance: s()
            }).map(x);
        }, [
            z,
            a,
            s
        ].concat(p(a().allColumnsDeps, [], {
            instance: s()
        })));
        s().allColumns = T;
        var O = t.useMemo(function() {
            for(var e = [], t = [], n = {}, o = [].concat(T); o.length;){
                var r = o.shift();
                le({
                    data: d,
                    rows: e,
                    flatRows: t,
                    rowsById: n,
                    column: r,
                    getRowId: b,
                    getSubRows: w,
                    accessValueHooks: a().accessValue,
                    getInstance: s
                });
            }
            return [
                e,
                t,
                n
            ];
        }, [
            T,
            d,
            b,
            w,
            a,
            s
        ]), M = O[0], j = O[1], L = O[2];
        Object.assign(s(), {
            rows: M,
            initialRows: [].concat(M),
            flatRows: j,
            rowsById: L
        }), g(a().useInstanceAfterData, s());
        var N = t.useMemo(function() {
            return p(a().visibleColumns, T, {
                instance: s()
            }).map(function(e) {
                return P(e, y);
            });
        }, [
            a,
            T,
            s,
            y
        ].concat(p(a().visibleColumnsDeps, [], {
            instance: s()
        })));
        T = t.useMemo(function() {
            var e = [].concat(N);
            return T.forEach(function(t) {
                e.find(function(e) {
                    return e.id === t.id;
                }) || e.push(t);
            }), e;
        }, [
            T,
            N
        ]), s().allColumns = T;
        var D = t.useMemo(function() {
            return p(a().headerGroups, B(N, y), s());
        }, [
            a,
            N,
            y,
            s
        ].concat(p(a().headerGroupsDeps, [], {
            instance: s()
        })));
        s().headerGroups = D;
        var V = t.useMemo(function() {
            return D.length ? D[0].headers : [];
        }, [
            D
        ]);
        s().headers = V, s().flatHeaders = D.reduce(function(e, t) {
            return [].concat(e, t.headers);
        }, []), g(a().useInstanceBeforeDimensions, s());
        var _ = N.filter(function(e) {
            return e.isVisible;
        }).map(function(e) {
            return e.id;
        }).sort().join("_");
        N = t.useMemo(function() {
            return N.filter(function(e) {
                return e.isVisible;
            });
        }, [
            N,
            _
        ]), s().visibleColumns = N;
        var X = ue(V), U = X[0], $ = X[1], J = X[2];
        return s().totalColumnsMinWidth = U, s().totalColumnsWidth = $, s().totalColumnsMaxWidth = J, g(a().useInstance, s()), [].concat(s().flatHeaders, s().allColumns).forEach(function(e) {
            e.render = R(s(), e), e.getHeaderProps = f(a().getHeaderProps, {
                instance: s(),
                column: e
            }), e.getFooterProps = f(a().getFooterProps, {
                instance: s(),
                column: e
            });
        }), s().headerGroups = t.useMemo(function() {
            return D.filter(function(e, t) {
                return e.headers = e.headers.filter(function(e) {
                    return e.headers ? function e(t) {
                        return t.filter(function(t) {
                            return t.headers ? e(t.headers) : t.isVisible;
                        }).length;
                    }(e.headers) : e.isVisible;
                }), !!e.headers.length && (e.getHeaderGroupProps = f(a().getHeaderGroupProps, {
                    instance: s(),
                    headerGroup: e,
                    index: t
                }), e.getFooterGroupProps = f(a().getFooterGroupProps, {
                    instance: s(),
                    headerGroup: e,
                    index: t
                }), !0);
            });
        }, [
            D,
            s,
            a
        ]), s().footerGroups = [].concat(s().headerGroups).reverse(), s().prepareRow = t.useCallback(function(e) {
            e.getRowProps = f(a().getRowProps, {
                instance: s(),
                row: e
            }), e.allCells = T.map(function(t) {
                var n = e.values[t.id], o = {
                    column: t,
                    row: e,
                    value: n
                };
                return o.getCellProps = f(a().getCellProps, {
                    instance: s(),
                    cell: o
                }), o.render = R(s(), t, {
                    row: e,
                    cell: o,
                    value: n
                }), o;
            }), e.cells = N.map(function(t) {
                return e.allCells.find(function(e) {
                    return e.column.id === t.id;
                });
            }), g(a().prepareRow, e, {
                instance: s()
            });
        }, [
            a,
            s,
            T,
            N
        ]), s().getTableProps = f(a().getTableProps, {
            instance: s()
        }), s().getTableBodyProps = f(a().getTableBodyProps, {
            instance: s()
        }), g(a().useFinalInstance, s()), s();
    }, Object.defineProperty(e, "__esModule", {
        value: !0
    });
});

});

parcelRegister("cqOAn", function(module, exports) {

var $ifeP6 = parcelRequire("ifeP6");
module.exports = $ifeP6("6ceQh").then(()=>parcelRequire("1e1gh"));

});
parcelRegister("ifeP6", function(module, exports) {
"use strict";

function $d485204cc0cedddc$var$load(id) {
    // eslint-disable-next-line no-undef
    return import((parcelRequire("kKiJW")).resolve(id));
}
module.exports = $d485204cc0cedddc$var$load;

});



var $4rFIf = parcelRequire("4rFIf");
var $57fd423301e4690c$exports = {};
"use strict";
function $57fd423301e4690c$var$checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") return;
    try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE($57fd423301e4690c$var$checkDCE);
    } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
    }
}
// DCE check should happen before ReactDOM bundle executes so that
// DevTools can report bad minification during injection.
$57fd423301e4690c$var$checkDCE();

$57fd423301e4690c$exports = (parcelRequire("6mCXn"));


/**
 * React Router DOM v6.17.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ 
var $4rFIf = parcelRequire("4rFIf");
/**
 * @remix-run/router v1.10.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ function $35fc6c0e1453dea6$var$_extends() {
    $35fc6c0e1453dea6$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $35fc6c0e1453dea6$var$_extends.apply(this, arguments);
}
////////////////////////////////////////////////////////////////////////////////
//#region Types and Constants
////////////////////////////////////////////////////////////////////////////////
/**
 * Actions represent the type of change to a location value.
 */ var $35fc6c0e1453dea6$export$e19cd5f9376f8cee;
(function(Action) {
    /**
   * A POP indicates a change to an arbitrary index in the history stack, such
   * as a back or forward navigation. It does not describe the direction of the
   * navigation, only that the current index changed.
   *
   * Note: This is the default action for newly created history objects.
   */ Action["Pop"] = "POP";
    /**
   * A PUSH indicates a new entry being added to the history stack, such as when
   * a link is clicked and a new page loads. When this happens, all subsequent
   * entries in the stack are lost.
   */ Action["Push"] = "PUSH";
    /**
   * A REPLACE indicates the entry at the current index in the history stack
   * being replaced by a new one.
   */ Action["Replace"] = "REPLACE";
})($35fc6c0e1453dea6$export$e19cd5f9376f8cee || ($35fc6c0e1453dea6$export$e19cd5f9376f8cee = {}));
const $35fc6c0e1453dea6$var$PopStateEventType = "popstate";
/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like tests and React Native.
 */ function $35fc6c0e1453dea6$export$2b76ad033c6e6d08(options) {
    if (options === void 0) options = {};
    let { initialEntries: initialEntries = [
        "/"
    ], initialIndex: initialIndex, v5Compat: v5Compat = false } = options;
    let entries; // Declare so we can access from createMemoryLocation
    entries = initialEntries.map((entry, index)=>createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index === 0 ? "default" : undefined));
    let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
    let action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop;
    let listener = null;
    function clampIndex(n) {
        return Math.min(Math.max(n, 0), entries.length - 1);
    }
    function getCurrentLocation() {
        return entries[index];
    }
    function createMemoryLocation(to, state, key) {
        if (state === void 0) state = null;
        let location = $35fc6c0e1453dea6$var$createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
        $35fc6c0e1453dea6$export$c0e02632e14916fd(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
        return location;
    }
    function createHref(to) {
        return typeof to === "string" ? to : $35fc6c0e1453dea6$export$fe53371bee54353d(to);
    }
    let history = {
        get index () {
            return index;
        },
        get action () {
            return action;
        },
        get location () {
            return getCurrentLocation();
        },
        createHref: createHref,
        createURL (to) {
            return new URL(createHref(to), "http://localhost");
        },
        encodeLocation (to) {
            let path = typeof to === "string" ? $35fc6c0e1453dea6$export$8ccf933b0513f8d0(to) : to;
            return {
                pathname: path.pathname || "",
                search: path.search || "",
                hash: path.hash || ""
            };
        },
        push (to, state) {
            action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Push;
            let nextLocation = createMemoryLocation(to, state);
            index += 1;
            entries.splice(index, entries.length, nextLocation);
            if (v5Compat && listener) listener({
                action: action,
                location: nextLocation,
                delta: 1
            });
        },
        replace (to, state) {
            action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Replace;
            let nextLocation = createMemoryLocation(to, state);
            entries[index] = nextLocation;
            if (v5Compat && listener) listener({
                action: action,
                location: nextLocation,
                delta: 0
            });
        },
        go (delta) {
            action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop;
            let nextIndex = clampIndex(index + delta);
            let nextLocation = entries[nextIndex];
            index = nextIndex;
            if (listener) listener({
                action: action,
                location: nextLocation,
                delta: delta
            });
        },
        listen (fn) {
            listener = fn;
            return ()=>{
                listener = null;
            };
        }
    };
    return history;
}
/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */ function $35fc6c0e1453dea6$export$719fc203c4e16dee(options) {
    if (options === void 0) options = {};
    function createBrowserLocation(window1, globalHistory) {
        let { pathname: pathname, search: search, hash: hash } = window1.location;
        return $35fc6c0e1453dea6$var$createLocation("", {
            pathname: pathname,
            search: search,
            hash: hash
        }, // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
    }
    function createBrowserHref(window1, to) {
        return typeof to === "string" ? to : $35fc6c0e1453dea6$export$fe53371bee54353d(to);
    }
    return $35fc6c0e1453dea6$var$getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
 */ function $35fc6c0e1453dea6$export$b71fdd3798280242(options) {
    if (options === void 0) options = {};
    function createHashLocation(window1, globalHistory) {
        let { pathname: pathname = "/", search: search = "", hash: hash = "" } = $35fc6c0e1453dea6$export$8ccf933b0513f8d0(window1.location.hash.substr(1));
        // Hash URL should always have a leading / just like window.location.pathname
        // does, so if an app ends up at a route like /#something then we add a
        // leading slash so all of our path-matching behaves the same as if it would
        // in a browser router.  This is particularly important when there exists a
        // root splat route (<Route path="*">) since that matches internally against
        // "/*" and we'd expect /#something to 404 in a hash router app.
        if (!pathname.startsWith("/") && !pathname.startsWith(".")) pathname = "/" + pathname;
        return $35fc6c0e1453dea6$var$createLocation("", {
            pathname: pathname,
            search: search,
            hash: hash
        }, // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
    }
    function createHashHref(window1, to) {
        let base = window1.document.querySelector("base");
        let href = "";
        if (base && base.getAttribute("href")) {
            let url = window1.location.href;
            let hashIndex = url.indexOf("#");
            href = hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        return href + "#" + (typeof to === "string" ? to : $35fc6c0e1453dea6$export$fe53371bee54353d(to));
    }
    function validateHashLocation(location, to) {
        $35fc6c0e1453dea6$export$c0e02632e14916fd(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
    }
    return $35fc6c0e1453dea6$var$getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function $35fc6c0e1453dea6$export$3e9cee6b33872309(value, message) {
    if (value === false || value === null || typeof value === "undefined") throw new Error(message);
}
function $35fc6c0e1453dea6$export$c0e02632e14916fd(cond, message) {
    if (!cond) {
        // eslint-disable-next-line no-console
        if (typeof console !== "undefined") console.warn(message);
        try {
            // Welcome to debugging history!
            //
            // This error is thrown as a convenience, so you can more easily
            // find the source for a warning that appears in the console by
            // enabling "pause on exceptions" in your JavaScript debugger.
            throw new Error(message);
        // eslint-disable-next-line no-empty
        } catch (e) {}
    }
}
function $35fc6c0e1453dea6$var$createKey() {
    return Math.random().toString(36).substr(2, 8);
}
/**
 * For browser-based histories, we combine the state and key into an object
 */ function $35fc6c0e1453dea6$var$getHistoryState(location, index) {
    return {
        usr: location.state,
        key: location.key,
        idx: index
    };
}
/**
 * Creates a Location object with a unique key from the given Path
 */ function $35fc6c0e1453dea6$var$createLocation(current, to, state, key) {
    if (state === void 0) state = null;
    let location = $35fc6c0e1453dea6$var$_extends({
        pathname: typeof current === "string" ? current : current.pathname,
        search: "",
        hash: ""
    }, typeof to === "string" ? $35fc6c0e1453dea6$export$8ccf933b0513f8d0(to) : to, {
        state: state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to && to.key || key || $35fc6c0e1453dea6$var$createKey()
    });
    return location;
}
/**
 * Creates a string URL path from the given pathname, search, and hash components.
 */ function $35fc6c0e1453dea6$export$fe53371bee54353d(_ref) {
    let { pathname: pathname = "/", search: search = "", hash: hash = "" } = _ref;
    if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
}
/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 */ function $35fc6c0e1453dea6$export$8ccf933b0513f8d0(path) {
    let parsedPath = {};
    if (path) {
        let hashIndex = path.indexOf("#");
        if (hashIndex >= 0) {
            parsedPath.hash = path.substr(hashIndex);
            path = path.substr(0, hashIndex);
        }
        let searchIndex = path.indexOf("?");
        if (searchIndex >= 0) {
            parsedPath.search = path.substr(searchIndex);
            path = path.substr(0, searchIndex);
        }
        if (path) parsedPath.pathname = path;
    }
    return parsedPath;
}
function $35fc6c0e1453dea6$var$getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) options = {};
    let { window: window1 = document.defaultView, v5Compat: v5Compat = false } = options;
    let globalHistory = window1.history;
    let action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop;
    let listener = null;
    let index = getIndex();
    // Index should only be null when we initialize. If not, it's because the
    // user called history.pushState or history.replaceState directly, in which
    // case we should log a warning as it will result in bugs.
    if (index == null) {
        index = 0;
        globalHistory.replaceState($35fc6c0e1453dea6$var$_extends({}, globalHistory.state, {
            idx: index
        }), "");
    }
    function getIndex() {
        let state = globalHistory.state || {
            idx: null
        };
        return state.idx;
    }
    function handlePop() {
        action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop;
        let nextIndex = getIndex();
        let delta = nextIndex == null ? null : nextIndex - index;
        index = nextIndex;
        if (listener) listener({
            action: action,
            location: history.location,
            delta: delta
        });
    }
    function push(to, state) {
        action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Push;
        let location = $35fc6c0e1453dea6$var$createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex() + 1;
        let historyState = $35fc6c0e1453dea6$var$getHistoryState(location, index);
        let url = history.createHref(location);
        // try...catch because iOS limits us to 100 pushState calls :/
        try {
            globalHistory.pushState(historyState, "", url);
        } catch (error) {
            // If the exception is because `state` can't be serialized, let that throw
            // outwards just like a replace call would so the dev knows the cause
            // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps
            // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
            if (error instanceof DOMException && error.name === "DataCloneError") throw error;
            // They are going to lose state here, but there is no real
            // way to warn them about it since the page will refresh...
            window1.location.assign(url);
        }
        if (v5Compat && listener) listener({
            action: action,
            location: history.location,
            delta: 1
        });
    }
    function replace(to, state) {
        action = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Replace;
        let location = $35fc6c0e1453dea6$var$createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex();
        let historyState = $35fc6c0e1453dea6$var$getHistoryState(location, index);
        let url = history.createHref(location);
        globalHistory.replaceState(historyState, "", url);
        if (v5Compat && listener) listener({
            action: action,
            location: history.location,
            delta: 0
        });
    }
    function createURL(to) {
        // window.location.origin is "null" (the literal string value) in Firefox
        // under certain conditions, notably when serving from a local HTML file
        // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297
        let base = window1.location.origin !== "null" ? window1.location.origin : window1.location.href;
        let href = typeof to === "string" ? to : $35fc6c0e1453dea6$export$fe53371bee54353d(to);
        $35fc6c0e1453dea6$export$3e9cee6b33872309(base, "No window.location.(origin|href) available to create URL for href: " + href);
        return new URL(href, base);
    }
    let history = {
        get action () {
            return action;
        },
        get location () {
            return getLocation(window1, globalHistory);
        },
        listen (fn) {
            if (listener) throw new Error("A history only accepts one active listener");
            window1.addEventListener($35fc6c0e1453dea6$var$PopStateEventType, handlePop);
            listener = fn;
            return ()=>{
                window1.removeEventListener($35fc6c0e1453dea6$var$PopStateEventType, handlePop);
                listener = null;
            };
        },
        createHref (to) {
            return createHref(window1, to);
        },
        createURL: createURL,
        encodeLocation (to) {
            // Encode a Location the same way window.location would
            let url = createURL(to);
            return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash
            };
        },
        push: push,
        replace: replace,
        go (n) {
            return globalHistory.go(n);
        }
    };
    return history;
}
//#endregion
var $35fc6c0e1453dea6$var$ResultType;
(function(ResultType) {
    ResultType["data"] = "data";
    ResultType["deferred"] = "deferred";
    ResultType["redirect"] = "redirect";
    ResultType["error"] = "error";
})($35fc6c0e1453dea6$var$ResultType || ($35fc6c0e1453dea6$var$ResultType = {}));
const $35fc6c0e1453dea6$var$immutableRouteKeys = new Set([
    "lazy",
    "caseSensitive",
    "path",
    "id",
    "index",
    "children"
]);
function $35fc6c0e1453dea6$var$isIndexRoute(route) {
    return route.index === true;
}
// Walk the route tree generating unique IDs where necessary, so we are working
// solely with AgnosticDataRouteObject's within the Router
function $35fc6c0e1453dea6$export$4a6d22b32134ea5d(routes, mapRouteProperties, parentPath, manifest) {
    if (parentPath === void 0) parentPath = [];
    if (manifest === void 0) manifest = {};
    return routes.map((route, index)=>{
        let treePath = [
            ...parentPath,
            index
        ];
        let id = typeof route.id === "string" ? route.id : treePath.join("-");
        $35fc6c0e1453dea6$export$3e9cee6b33872309(route.index !== true || !route.children, "Cannot specify children on an index route");
        $35fc6c0e1453dea6$export$3e9cee6b33872309(!manifest[id], 'Found a route id collision on id "' + id + '".  Route ' + "id's must be globally unique within Data Router usages");
        if ($35fc6c0e1453dea6$var$isIndexRoute(route)) {
            let indexRoute = $35fc6c0e1453dea6$var$_extends({}, route, mapRouteProperties(route), {
                id: id
            });
            manifest[id] = indexRoute;
            return indexRoute;
        } else {
            let pathOrLayoutRoute = $35fc6c0e1453dea6$var$_extends({}, route, mapRouteProperties(route), {
                id: id,
                children: undefined
            });
            manifest[id] = pathOrLayoutRoute;
            if (route.children) pathOrLayoutRoute.children = $35fc6c0e1453dea6$export$4a6d22b32134ea5d(route.children, mapRouteProperties, treePath, manifest);
            return pathOrLayoutRoute;
        }
    });
}
/**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/utils/match-routes
 */ function $35fc6c0e1453dea6$export$2708184779ceb39d(routes, locationArg, basename) {
    if (basename === void 0) basename = "/";
    let location = typeof locationArg === "string" ? $35fc6c0e1453dea6$export$8ccf933b0513f8d0(locationArg) : locationArg;
    let pathname = $35fc6c0e1453dea6$export$b69e3301ce081aa3(location.pathname || "/", basename);
    if (pathname == null) return null;
    let branches = $35fc6c0e1453dea6$var$flattenRoutes(routes);
    $35fc6c0e1453dea6$var$rankRouteBranches(branches);
    let matches = null;
    for(let i = 0; matches == null && i < branches.length; ++i)matches = $35fc6c0e1453dea6$var$matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location
    // or from router.navigate, but we want to match against the unencoded
    // paths in the route definitions.  Memory router locations won't be
    // encoded here but there also shouldn't be anything to decode so this
    // should be a safe operation.  This avoids needing matchRoutes to be
    // history-aware.
    $35fc6c0e1453dea6$var$safelyDecodeURI(pathname));
    return matches;
}
function $35fc6c0e1453dea6$export$b3fac024fad9e8ff(match, loaderData) {
    let { route: route, pathname: pathname, params: params } = match;
    return {
        id: route.id,
        pathname: pathname,
        params: params,
        data: loaderData[route.id],
        handle: route.handle
    };
}
function $35fc6c0e1453dea6$var$flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) branches = [];
    if (parentsMeta === void 0) parentsMeta = [];
    if (parentPath === void 0) parentPath = "";
    let flattenRoute = (route, index, relativePath)=>{
        let meta = {
            relativePath: relativePath === undefined ? route.path || "" : relativePath,
            caseSensitive: route.caseSensitive === true,
            childrenIndex: index,
            route: route
        };
        if (meta.relativePath.startsWith("/")) {
            $35fc6c0e1453dea6$export$3e9cee6b33872309(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
            meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = $35fc6c0e1453dea6$export$86d9a7913e44197e([
            parentPath,
            meta.relativePath
        ]);
        let routesMeta = parentsMeta.concat(meta);
        // Add the children before adding this route to the array, so we traverse the
        // route tree depth-first and child routes appear before their parents in
        // the "flattened" version.
        if (route.children && route.children.length > 0) {
            $35fc6c0e1453dea6$export$3e9cee6b33872309(// Our types know better, but runtime JS may not!
            // @ts-expect-error
            route.index !== true, "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".'));
            $35fc6c0e1453dea6$var$flattenRoutes(route.children, branches, routesMeta, path);
        }
        // Routes without a path shouldn't ever match by themselves unless they are
        // index routes, so don't add them to the list of possible branches.
        if (route.path == null && !route.index) return;
        branches.push({
            path: path,
            score: $35fc6c0e1453dea6$var$computeScore(path, route.index),
            routesMeta: routesMeta
        });
    };
    routes.forEach((route, index)=>{
        var _route$path;
        // coarse-grain check for optional params
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) flattenRoute(route, index);
        else for (let exploded of $35fc6c0e1453dea6$var$explodeOptionalSegments(route.path))flattenRoute(route, index, exploded);
    });
    return branches;
}
/**
 * Computes all combinations of optional path segments for a given path,
 * excluding combinations that are ambiguous and of lower priority.
 *
 * For example, `/one/:two?/three/:four?/:five?` explodes to:
 * - `/one/three`
 * - `/one/:two/three`
 * - `/one/three/:four`
 * - `/one/three/:five`
 * - `/one/:two/three/:four`
 * - `/one/:two/three/:five`
 * - `/one/three/:four/:five`
 * - `/one/:two/three/:four/:five`
 */ function $35fc6c0e1453dea6$var$explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first, ...rest] = segments;
    // Optional path segments are denoted by a trailing `?`
    let isOptional = first.endsWith("?");
    // Compute the corresponding required segment: `foo?` -> `foo`
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) // Intepret empty string as omitting an optional segment
    // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`
    return isOptional ? [
        required,
        ""
    ] : [
        required
    ];
    let restExploded = $35fc6c0e1453dea6$var$explodeOptionalSegments(rest.join("/"));
    let result = [];
    // All child paths with the prefix.  Do this for all children before the
    // optional version for all children, so we get consistent ordering where the
    // parent optional aspect is preferred as required.  Otherwise, we can get
    // child sections interspersed where deeper optional segments are higher than
    // parent optional segments, where for example, /:two would explode _earlier_
    // then /:one.  By always including the parent as required _for all children_
    // first, we avoid this issue
    result.push(...restExploded.map((subpath)=>subpath === "" ? required : [
            required,
            subpath
        ].join("/")));
    // Then, if this is an optional value, add all child versions without
    if (isOptional) result.push(...restExploded);
    // for absolute paths, ensure `/` instead of empty segment
    return result.map((exploded)=>path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function $35fc6c0e1453dea6$var$rankRouteBranches(branches) {
    branches.sort((a, b)=>a.score !== b.score ? b.score - a.score // Higher score first
         : $35fc6c0e1453dea6$var$compareIndexes(a.routesMeta.map((meta)=>meta.childrenIndex), b.routesMeta.map((meta)=>meta.childrenIndex)));
}
const $35fc6c0e1453dea6$var$paramRe = /^:\w+$/;
const $35fc6c0e1453dea6$var$dynamicSegmentValue = 3;
const $35fc6c0e1453dea6$var$indexRouteValue = 2;
const $35fc6c0e1453dea6$var$emptySegmentValue = 1;
const $35fc6c0e1453dea6$var$staticSegmentValue = 10;
const $35fc6c0e1453dea6$var$splatPenalty = -2;
const $35fc6c0e1453dea6$var$isSplat = (s)=>s === "*";
function $35fc6c0e1453dea6$var$computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some($35fc6c0e1453dea6$var$isSplat)) initialScore += $35fc6c0e1453dea6$var$splatPenalty;
    if (index) initialScore += $35fc6c0e1453dea6$var$indexRouteValue;
    return segments.filter((s)=>!$35fc6c0e1453dea6$var$isSplat(s)).reduce((score, segment)=>score + ($35fc6c0e1453dea6$var$paramRe.test(segment) ? $35fc6c0e1453dea6$var$dynamicSegmentValue : segment === "" ? $35fc6c0e1453dea6$var$emptySegmentValue : $35fc6c0e1453dea6$var$staticSegmentValue), initialScore);
}
function $35fc6c0e1453dea6$var$compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i)=>n === b[i]);
    return siblings ? // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0;
}
function $35fc6c0e1453dea6$var$matchRouteBranch(branch, pathname) {
    let { routesMeta: routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for(let i = 0; i < routesMeta.length; ++i){
        let meta = routesMeta[i];
        let end = i === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = $35fc6c0e1453dea6$export$81336c211d5ff295({
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: end
        }, remainingPathname);
        if (!match) return null;
        Object.assign(matchedParams, match.params);
        let route = meta.route;
        matches.push({
            // TODO: Can this as be avoided?
            params: matchedParams,
            pathname: $35fc6c0e1453dea6$export$86d9a7913e44197e([
                matchedPathname,
                match.pathname
            ]),
            pathnameBase: $35fc6c0e1453dea6$export$a5c6d149b50c1d86($35fc6c0e1453dea6$export$86d9a7913e44197e([
                matchedPathname,
                match.pathnameBase
            ])),
            route: route
        });
        if (match.pathnameBase !== "/") matchedPathname = $35fc6c0e1453dea6$export$86d9a7913e44197e([
            matchedPathname,
            match.pathnameBase
        ]);
    }
    return matches;
}
/**
 * Returns a path with params interpolated.
 *
 * @see https://reactrouter.com/utils/generate-path
 */ function $35fc6c0e1453dea6$export$82476f982757e71e(originalPath, params) {
    if (params === void 0) params = {};
    let path = originalPath;
    if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
        $35fc6c0e1453dea6$export$c0e02632e14916fd(false, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
        path = path.replace(/\*$/, "/*");
    }
    // ensure `/` is added at the beginning if the path is absolute
    const prefix = path.startsWith("/") ? "/" : "";
    const stringify = (p)=>p == null ? "" : typeof p === "string" ? p : String(p);
    const segments = path.split(/\/+/).map((segment, index, array)=>{
        const isLastSegment = index === array.length - 1;
        // only apply the splat if it's the last segment
        if (isLastSegment && segment === "*") {
            const star = "*";
            // Apply the splat
            return stringify(params[star]);
        }
        const keyMatch = segment.match(/^:(\w+)(\??)$/);
        if (keyMatch) {
            const [, key, optional] = keyMatch;
            let param = params[key];
            $35fc6c0e1453dea6$export$3e9cee6b33872309(optional === "?" || param != null, 'Missing ":' + key + '" param');
            return stringify(param);
        }
        // Remove any optional markers from optional static segments
        return segment.replace(/\?$/g, "");
    })// Remove empty segments
    .filter((segment)=>!!segment);
    return prefix + segments.join("/");
}
/**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/utils/match-path
 */ function $35fc6c0e1453dea6$export$81336c211d5ff295(pattern, pathname) {
    if (typeof pattern === "string") pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
    };
    let [matcher, paramNames] = $35fc6c0e1453dea6$var$compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = paramNames.reduce((memo, paramName, index)=>{
        // We need to compute the pathnameBase here using the raw splat value
        // instead of using params["*"] later because it will be decoded then
        if (paramName === "*") {
            let splatValue = captureGroups[index] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        memo[paramName] = $35fc6c0e1453dea6$var$safelyDecodeURIComponent(captureGroups[index] || "", paramName);
        return memo;
    }, {});
    return {
        params: params,
        pathname: matchedPathname,
        pathnameBase: pathnameBase,
        pattern: pattern
    };
}
function $35fc6c0e1453dea6$var$compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) caseSensitive = false;
    if (end === void 0) end = true;
    $35fc6c0e1453dea6$export$c0e02632e14916fd(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let paramNames = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
    .replace(/^\/*/, "/") // Make sure it has a leading /
    .replace(/[\\.*+^$?{}|()[\]]/g, "\\$&") // Escape special regex chars
    .replace(/\/:(\w+)/g, (_, paramName)=>{
        paramNames.push(paramName);
        return "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
        paramNames.push("*");
        regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest
         : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
    } else if (end) // When matching to the end, ignore trailing slashes
    regexpSource += "\\/*$";
    else if (path !== "" && path !== "/") // If our path is non-empty and contains anything beyond an initial slash,
    // then we have _some_ form of path in our regex, so we should expect to
    // match only if we find the end of this path segment.  Look for an optional
    // non-captured trailing slash (to match a portion of the URL) or the end
    // of the path (if we've matched to the end).  We used to do this with a
    // word boundary but that gives false positives on routes like
    // /user-preferences since `-` counts as a word boundary.
    regexpSource += "(?:(?=\\/|$))";
    let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
    return [
        matcher,
        paramNames
    ];
}
function $35fc6c0e1453dea6$var$safelyDecodeURI(value) {
    try {
        return decodeURI(value);
    } catch (error) {
        $35fc6c0e1453dea6$export$c0e02632e14916fd(false, 'The URL path "' + value + '" could not be decoded because it is is a ' + "malformed URL segment. This is probably due to a bad percent " + ("encoding (" + error + ")."));
        return value;
    }
}
function $35fc6c0e1453dea6$var$safelyDecodeURIComponent(value, paramName) {
    try {
        return decodeURIComponent(value);
    } catch (error) {
        $35fc6c0e1453dea6$export$c0e02632e14916fd(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
        return value;
    }
}
/**
 * @private
 */ function $35fc6c0e1453dea6$export$b69e3301ce081aa3(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) return null;
    // We want to leave trailing slash behavior in the user's control, so if they
    // specify a basename with a trailing slash, we should support it
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") // pathname does not start with basename/
    return null;
    return pathname.slice(startIndex) || "/";
}
/**
 * Returns a resolved path object relative to the given pathname.
 *
 * @see https://reactrouter.com/utils/resolve-path
 */ function $35fc6c0e1453dea6$export$b09f2ff0bbcb43c7(to, fromPathname) {
    if (fromPathname === void 0) fromPathname = "/";
    let { pathname: toPathname, search: search = "", hash: hash = "" } = typeof to === "string" ? $35fc6c0e1453dea6$export$8ccf933b0513f8d0(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : $35fc6c0e1453dea6$var$resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
        pathname: pathname,
        search: $35fc6c0e1453dea6$var$normalizeSearch(search),
        hash: $35fc6c0e1453dea6$var$normalizeHash(hash)
    };
}
function $35fc6c0e1453dea6$var$resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment)=>{
        if (segment === "..") // Keep the root "" segment so the pathname starts at /
        {
            if (segments.length > 1) segments.pop();
        } else if (segment !== ".") segments.push(segment);
    });
    return segments.length > 1 ? segments.join("/") : "/";
}
function $35fc6c0e1453dea6$var$getInvalidPathError(char, field, dest, path) {
    return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
/**
 * @private
 *
 * When processing relative navigation we want to ignore ancestor routes that
 * do not contribute to the path, such that index/pathless layout routes don't
 * interfere.
 *
 * For example, when moving a route element into an index route and/or a
 * pathless layout route, relative link behavior contained within should stay
 * the same.  Both of the following examples should link back to the root:
 *
 *   <Route path="/">
 *     <Route path="accounts" element={<Link to=".."}>
 *   </Route>
 *
 *   <Route path="/">
 *     <Route path="accounts">
 *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
 *         <Route index element={<Link to=".."} />  // <-- Does not contribute
 *       </Route
 *     </Route>
 *   </Route>
 */ function $35fc6c0e1453dea6$export$90ba53ce1c7fdff2(matches) {
    return matches.filter((match, index)=>index === 0 || match.route.path && match.route.path.length > 0);
}
/**
 * @private
 */ function $35fc6c0e1453dea6$export$cae722b0cc860f13(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) isPathRelative = false;
    let to;
    if (typeof toArg === "string") to = $35fc6c0e1453dea6$export$8ccf933b0513f8d0(toArg);
    else {
        to = $35fc6c0e1453dea6$var$_extends({}, toArg);
        $35fc6c0e1453dea6$export$3e9cee6b33872309(!to.pathname || !to.pathname.includes("?"), $35fc6c0e1453dea6$var$getInvalidPathError("?", "pathname", "search", to));
        $35fc6c0e1453dea6$export$3e9cee6b33872309(!to.pathname || !to.pathname.includes("#"), $35fc6c0e1453dea6$var$getInvalidPathError("#", "pathname", "hash", to));
        $35fc6c0e1453dea6$export$3e9cee6b33872309(!to.search || !to.search.includes("#"), $35fc6c0e1453dea6$var$getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    // Routing is relative to the current pathname if explicitly requested.
    //
    // If a pathname is explicitly provided in `to`, it should be relative to the
    // route context. This is explained in `Note on `<Link to>` values` in our
    // migration guide from v5 as a means of disambiguation between `to` values
    // that begin with `/` and those that do not. However, this is problematic for
    // `to` values that do not provide a pathname. `to` can simply be a search or
    // hash string, in which case we should assume that the navigation is relative
    // to the current location's pathname and *not* the route pathname.
    if (isPathRelative || toPathname == null) from = locationPathname;
    else {
        let routePathnameIndex = routePathnames.length - 1;
        if (toPathname.startsWith("..")) {
            let toSegments = toPathname.split("/");
            // Each leading .. segment means "go up one route" instead of "go up one
            // URL segment".  This is a key difference from how <a href> works and a
            // major reason we call this a "to" value instead of a "href".
            while(toSegments[0] === ".."){
                toSegments.shift();
                routePathnameIndex -= 1;
            }
            to.pathname = toSegments.join("/");
        }
        // If there are more ".." segments than parent routes, resolve relative to
        // the root / URL.
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = $35fc6c0e1453dea6$export$b09f2ff0bbcb43c7(to, from);
    // Ensure the pathname has a trailing slash if the original "to" had one
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    // Or if this was a link to the current path which has a trailing slash
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) path.pathname += "/";
    return path;
}
/**
 * @private
 */ function $35fc6c0e1453dea6$export$f5655dfea9d981c7(to) {
    // Empty strings should be treated the same as / paths
    return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? $35fc6c0e1453dea6$export$8ccf933b0513f8d0(to).pathname : to.pathname;
}
/**
 * @private
 */ const $35fc6c0e1453dea6$export$86d9a7913e44197e = (paths)=>paths.join("/").replace(/\/\/+/g, "/");
/**
 * @private
 */ const $35fc6c0e1453dea6$export$a5c6d149b50c1d86 = (pathname)=>pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
/**
 * @private
 */ const $35fc6c0e1453dea6$var$normalizeSearch = (search)=>!search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
/**
 * @private
 */ const $35fc6c0e1453dea6$var$normalizeHash = (hash)=>!hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
/**
 * This is a shortcut for creating `application/json` responses. Converts `data`
 * to JSON and sets the `Content-Type` header.
 */ const $35fc6c0e1453dea6$export$7b419323e6ed4f31 = function json(data, init) {
    if (init === void 0) init = {};
    let responseInit = typeof init === "number" ? {
        status: init
    } : init;
    let headers = new Headers(responseInit.headers);
    if (!headers.has("Content-Type")) headers.set("Content-Type", "application/json; charset=utf-8");
    return new Response(JSON.stringify(data), $35fc6c0e1453dea6$var$_extends({}, responseInit, {
        headers: headers
    }));
};
class $35fc6c0e1453dea6$export$42a99a7a4bc0e76a extends Error {
}
class $35fc6c0e1453dea6$export$61d759255b4eec65 {
    constructor(data, responseInit){
        this.pendingKeysSet = new Set();
        this.subscribers = new Set();
        this.deferredKeys = [];
        $35fc6c0e1453dea6$export$3e9cee6b33872309(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");
        // Set up an AbortController + Promise we can race against to exit early
        // cancellation
        let reject;
        this.abortPromise = new Promise((_, r)=>reject = r);
        this.controller = new AbortController();
        let onAbort = ()=>reject(new $35fc6c0e1453dea6$export$42a99a7a4bc0e76a("Deferred data aborted"));
        this.unlistenAbortSignal = ()=>this.controller.signal.removeEventListener("abort", onAbort);
        this.controller.signal.addEventListener("abort", onAbort);
        this.data = Object.entries(data).reduce((acc, _ref)=>{
            let [key, value] = _ref;
            return Object.assign(acc, {
                [key]: this.trackPromise(key, value)
            });
        }, {});
        if (this.done) // All incoming values were resolved
        this.unlistenAbortSignal();
        this.init = responseInit;
    }
    trackPromise(key, value) {
        if (!(value instanceof Promise)) return value;
        this.deferredKeys.push(key);
        this.pendingKeysSet.add(key);
        // We store a little wrapper promise that will be extended with
        // _data/_error props upon resolve/reject
        let promise = Promise.race([
            value,
            this.abortPromise
        ]).then((data)=>this.onSettle(promise, key, undefined, data), (error)=>this.onSettle(promise, key, error));
        // Register rejection listeners to avoid uncaught promise rejections on
        // errors or aborted deferred values
        promise.catch(()=>{});
        Object.defineProperty(promise, "_tracked", {
            get: ()=>true
        });
        return promise;
    }
    onSettle(promise, key, error, data) {
        if (this.controller.signal.aborted && error instanceof $35fc6c0e1453dea6$export$42a99a7a4bc0e76a) {
            this.unlistenAbortSignal();
            Object.defineProperty(promise, "_error", {
                get: ()=>error
            });
            return Promise.reject(error);
        }
        this.pendingKeysSet.delete(key);
        if (this.done) // Nothing left to abort!
        this.unlistenAbortSignal();
        // If the promise was resolved/rejected with undefined, we'll throw an error as you
        // should always resolve with a value or null
        if (error === undefined && data === undefined) {
            let undefinedError = new Error('Deferred data for key "' + key + '" resolved/rejected with `undefined`, ' + "you must resolve/reject with a value or `null`.");
            Object.defineProperty(promise, "_error", {
                get: ()=>undefinedError
            });
            this.emit(false, key);
            return Promise.reject(undefinedError);
        }
        if (data === undefined) {
            Object.defineProperty(promise, "_error", {
                get: ()=>error
            });
            this.emit(false, key);
            return Promise.reject(error);
        }
        Object.defineProperty(promise, "_data", {
            get: ()=>data
        });
        this.emit(false, key);
        return data;
    }
    emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber)=>subscriber(aborted, settledKey));
    }
    subscribe(fn) {
        this.subscribers.add(fn);
        return ()=>this.subscribers.delete(fn);
    }
    cancel() {
        this.controller.abort();
        this.pendingKeysSet.forEach((v, k)=>this.pendingKeysSet.delete(k));
        this.emit(true);
    }
    async resolveData(signal) {
        let aborted = false;
        if (!this.done) {
            let onAbort = ()=>this.cancel();
            signal.addEventListener("abort", onAbort);
            aborted = await new Promise((resolve)=>{
                this.subscribe((aborted)=>{
                    signal.removeEventListener("abort", onAbort);
                    if (aborted || this.done) resolve(aborted);
                });
            });
        }
        return aborted;
    }
    get done() {
        return this.pendingKeysSet.size === 0;
    }
    get unwrappedData() {
        $35fc6c0e1453dea6$export$3e9cee6b33872309(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
        return Object.entries(this.data).reduce((acc, _ref2)=>{
            let [key, value] = _ref2;
            return Object.assign(acc, {
                [key]: $35fc6c0e1453dea6$var$unwrapTrackedPromise(value)
            });
        }, {});
    }
    get pendingKeys() {
        return Array.from(this.pendingKeysSet);
    }
}
function $35fc6c0e1453dea6$var$isTrackedPromise(value) {
    return value instanceof Promise && value._tracked === true;
}
function $35fc6c0e1453dea6$var$unwrapTrackedPromise(value) {
    if (!$35fc6c0e1453dea6$var$isTrackedPromise(value)) return value;
    if (value._error) throw value._error;
    return value._data;
}
const $35fc6c0e1453dea6$export$260e5c0943f31606 = function defer(data, init) {
    if (init === void 0) init = {};
    let responseInit = typeof init === "number" ? {
        status: init
    } : init;
    return new $35fc6c0e1453dea6$export$61d759255b4eec65(data, responseInit);
};
/**
 * A redirect response. Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */ const $35fc6c0e1453dea6$export$89e12c5b50f7529d = function redirect(url, init) {
    if (init === void 0) init = 302;
    let responseInit = init;
    if (typeof responseInit === "number") responseInit = {
        status: responseInit
    };
    else if (typeof responseInit.status === "undefined") responseInit.status = 302;
    let headers = new Headers(responseInit.headers);
    headers.set("Location", url);
    return new Response(null, $35fc6c0e1453dea6$var$_extends({}, responseInit, {
        headers: headers
    }));
};
/**
 * A redirect response that will force a document reload to the new location.
 * Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */ const $35fc6c0e1453dea6$export$a6cd19cd1951a23c = (url, init)=>{
    let response = $35fc6c0e1453dea6$export$89e12c5b50f7529d(url, init);
    response.headers.set("X-Remix-Reload-Document", "true");
    return response;
};
/**
 * @private
 * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies
 *
 * We don't export the class for public use since it's an implementation
 * detail, but we export the interface above so folks can build their own
 * abstractions around instances via isRouteErrorResponse()
 */ class $35fc6c0e1453dea6$export$6c6580e81da25755 {
    constructor(status, statusText, data, internal){
        if (internal === void 0) internal = false;
        this.status = status;
        this.statusText = statusText || "";
        this.internal = internal;
        if (data instanceof Error) {
            this.data = data.toString();
            this.error = data;
        } else this.data = data;
    }
}
/**
 * Check if the given error is an ErrorResponse generated from a 4xx/5xx
 * Response thrown from an action/loader
 */ function $35fc6c0e1453dea6$export$972111febbeef05b(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const $35fc6c0e1453dea6$var$validMutationMethodsArr = [
    "post",
    "put",
    "patch",
    "delete"
];
const $35fc6c0e1453dea6$var$validMutationMethods = new Set($35fc6c0e1453dea6$var$validMutationMethodsArr);
const $35fc6c0e1453dea6$var$validRequestMethodsArr = [
    "get",
    ...$35fc6c0e1453dea6$var$validMutationMethodsArr
];
const $35fc6c0e1453dea6$var$validRequestMethods = new Set($35fc6c0e1453dea6$var$validRequestMethodsArr);
const $35fc6c0e1453dea6$var$redirectStatusCodes = new Set([
    301,
    302,
    303,
    307,
    308
]);
const $35fc6c0e1453dea6$var$redirectPreserveMethodStatusCodes = new Set([
    307,
    308
]);
const $35fc6c0e1453dea6$export$ed3e14b2f9e105d0 = {
    state: "idle",
    location: undefined,
    formMethod: undefined,
    formAction: undefined,
    formEncType: undefined,
    formData: undefined,
    json: undefined,
    text: undefined
};
const $35fc6c0e1453dea6$export$52eace9c284d3585 = {
    state: "idle",
    data: undefined,
    formMethod: undefined,
    formAction: undefined,
    formEncType: undefined,
    formData: undefined,
    json: undefined,
    text: undefined
};
const $35fc6c0e1453dea6$export$386d57f03f0b2883 = {
    state: "unblocked",
    proceed: undefined,
    reset: undefined,
    location: undefined
};
const $35fc6c0e1453dea6$var$ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const $35fc6c0e1453dea6$var$defaultMapRouteProperties = (route)=>({
        hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
const $35fc6c0e1453dea6$var$TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region createRouter
////////////////////////////////////////////////////////////////////////////////
/**
 * Create a router and listen to history POP navigations
 */ function $35fc6c0e1453dea6$export$baddd0131ee8c05b(init) {
    const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : undefined;
    const isBrowser = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
    const isServer = !isBrowser;
    $35fc6c0e1453dea6$export$3e9cee6b33872309(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
    let mapRouteProperties;
    if (init.mapRouteProperties) mapRouteProperties = init.mapRouteProperties;
    else if (init.detectErrorBoundary) {
        // If they are still using the deprecated version, wrap it with the new API
        let detectErrorBoundary = init.detectErrorBoundary;
        mapRouteProperties = (route)=>({
                hasErrorBoundary: detectErrorBoundary(route)
            });
    } else mapRouteProperties = $35fc6c0e1453dea6$var$defaultMapRouteProperties;
    // Routes keyed by ID
    let manifest = {};
    // Routes in tree format for matching
    let dataRoutes = $35fc6c0e1453dea6$export$4a6d22b32134ea5d(init.routes, mapRouteProperties, undefined, manifest);
    let inFlightDataRoutes;
    let basename = init.basename || "/";
    // Config driven behavior flags
    let future = $35fc6c0e1453dea6$var$_extends({
        v7_normalizeFormMethod: false,
        v7_prependBasename: false
    }, init.future);
    // Cleanup function for history
    let unlistenHistory = null;
    // Externally-provided functions to call on all state changes
    let subscribers = new Set();
    // Externally-provided object to hold scroll restoration locations during routing
    let savedScrollPositions = null;
    // Externally-provided function to get scroll restoration keys
    let getScrollRestorationKey = null;
    // Externally-provided function to get current scroll position
    let getScrollPosition = null;
    // One-time flag to control the initial hydration scroll restoration.  Because
    // we don't get the saved positions from <ScrollRestoration /> until _after_
    // the initial render, we need to manually trigger a separate updateState to
    // send along the restoreScrollPosition
    // Set to true if we have `hydrationData` since we assume we were SSR'd and that
    // SSR did the initial scroll restoration.
    let initialScrollRestored = init.hydrationData != null;
    let initialMatches = $35fc6c0e1453dea6$export$2708184779ceb39d(dataRoutes, init.history.location, basename);
    let initialErrors = null;
    if (initialMatches == null) {
        // If we do not match a user-provided-route, fall back to the root
        // to allow the error boundary to take over
        let error = $35fc6c0e1453dea6$var$getInternalRouterError(404, {
            pathname: init.history.location.pathname
        });
        let { matches: matches, route: route } = $35fc6c0e1453dea6$var$getShortCircuitMatches(dataRoutes);
        initialMatches = matches;
        initialErrors = {
            [route.id]: error
        };
    }
    let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy
    // functions around still then we'll need to run them in initialize()
    !initialMatches.some((m)=>m.route.lazy) && // And we have to either have no loaders or have been provided hydrationData
    (!initialMatches.some((m)=>m.route.loader) || init.hydrationData != null);
    let router;
    let state = {
        historyAction: init.history.action,
        location: init.history.location,
        matches: initialMatches,
        initialized: initialized,
        navigation: $35fc6c0e1453dea6$export$ed3e14b2f9e105d0,
        // Don't restore on initial updateState() if we were SSR'd
        restoreScrollPosition: init.hydrationData != null ? false : null,
        preventScrollReset: false,
        revalidation: "idle",
        loaderData: init.hydrationData && init.hydrationData.loaderData || {},
        actionData: init.hydrationData && init.hydrationData.actionData || null,
        errors: init.hydrationData && init.hydrationData.errors || initialErrors,
        fetchers: new Map(),
        blockers: new Map()
    };
    // -- Stateful internal variables to manage navigations --
    // Current navigation in progress (to be committed in completeNavigation)
    let pendingAction = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop;
    // Should the current navigation prevent the scroll reset if scroll cannot
    // be restored?
    let pendingPreventScrollReset = false;
    // AbortController for the active navigation
    let pendingNavigationController;
    // Should the current navigation enable document.startViewTransition?
    let pendingViewTransitionEnabled = false;
    // Store applied view transitions so we can apply them on POP
    let appliedViewTransitions = new Map();
    // Cleanup function for persisting applied transitions to sessionStorage
    let removePageHideEventListener = null;
    // We use this to avoid touching history in completeNavigation if a
    // revalidation is entirely uninterrupted
    let isUninterruptedRevalidation = false;
    // Use this internal flag to force revalidation of all loaders:
    //  - submissions (completed or interrupted)
    //  - useRevalidator()
    //  - X-Remix-Revalidate (from redirect)
    let isRevalidationRequired = false;
    // Use this internal array to capture routes that require revalidation due
    // to a cancelled deferred on action submission
    let cancelledDeferredRoutes = [];
    // Use this internal array to capture fetcher loads that were cancelled by an
    // action navigation and require revalidation
    let cancelledFetcherLoads = [];
    // AbortControllers for any in-flight fetchers
    let fetchControllers = new Map();
    // Track loads based on the order in which they started
    let incrementingLoadId = 0;
    // Track the outstanding pending navigation data load to be compared against
    // the globally incrementing load when a fetcher load lands after a completed
    // navigation
    let pendingNavigationLoadId = -1;
    // Fetchers that triggered data reloads as a result of their actions
    let fetchReloadIds = new Map();
    // Fetchers that triggered redirect navigations
    let fetchRedirectIds = new Set();
    // Most recent href/match for fetcher.load calls for fetchers
    let fetchLoadMatches = new Map();
    // Store DeferredData instances for active route matches.  When a
    // route loader returns defer() we stick one in here.  Then, when a nested
    // promise resolves we update loaderData.  If a new navigation starts we
    // cancel active deferreds for eliminated routes.
    let activeDeferreds = new Map();
    // Store blocker functions in a separate Map outside of router state since
    // we don't need to update UI state if they change
    let blockerFunctions = new Map();
    // Flag to ignore the next history update, so we can revert the URL change on
    // a POP navigation that was blocked by the user without touching router state
    let ignoreNextHistoryUpdate = false;
    // Initialize the router, all side effects should be kicked off from here.
    // Implemented as a Fluent API for ease of:
    //   let router = createRouter(init).initialize();
    function initialize() {
        // If history informs us of a POP navigation, start the navigation but do not update
        // state.  We'll update our own state once the navigation completes
        unlistenHistory = init.history.listen((_ref)=>{
            let { action: historyAction, location: location, delta: delta } = _ref;
            // Ignore this event if it was just us resetting the URL from a
            // blocked POP navigation
            if (ignoreNextHistoryUpdate) {
                ignoreNextHistoryUpdate = false;
                return;
            }
            $35fc6c0e1453dea6$export$c0e02632e14916fd(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
            let blockerKey = shouldBlockNavigation({
                currentLocation: state.location,
                nextLocation: location,
                historyAction: historyAction
            });
            if (blockerKey && delta != null) {
                // Restore the URL to match the current UI, but don't update router state
                ignoreNextHistoryUpdate = true;
                init.history.go(delta * -1);
                // Put the blocker into a blocked state
                updateBlocker(blockerKey, {
                    state: "blocked",
                    location: location,
                    proceed () {
                        updateBlocker(blockerKey, {
                            state: "proceeding",
                            proceed: undefined,
                            reset: undefined,
                            location: location
                        });
                        // Re-do the same POP navigation we just blocked
                        init.history.go(delta);
                    },
                    reset () {
                        let blockers = new Map(state.blockers);
                        blockers.set(blockerKey, $35fc6c0e1453dea6$export$386d57f03f0b2883);
                        updateState({
                            blockers: blockers
                        });
                    }
                });
                return;
            }
            return startNavigation(historyAction, location);
        });
        if (isBrowser) {
            // FIXME: This feels gross.  How can we cleanup the lines between
            // scrollRestoration/appliedTransitions persistance?
            $35fc6c0e1453dea6$var$restoreAppliedTransitions(routerWindow, appliedViewTransitions);
            let _saveAppliedTransitions = ()=>$35fc6c0e1453dea6$var$persistAppliedTransitions(routerWindow, appliedViewTransitions);
            routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
            removePageHideEventListener = ()=>routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
        }
        // Kick off initial data load if needed.  Use Pop to avoid modifying history
        // Note we don't do any handling of lazy here.  For SPA's it'll get handled
        // in the normal navigation flow.  For SSR it's expected that lazy modules are
        // resolved prior to router creation since we can't go into a fallbackElement
        // UI for SSR'd apps
        if (!state.initialized) startNavigation($35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop, state.location);
        return router;
    }
    // Clean up a router and it's side effects
    function dispose() {
        if (unlistenHistory) unlistenHistory();
        if (removePageHideEventListener) removePageHideEventListener();
        subscribers.clear();
        pendingNavigationController && pendingNavigationController.abort();
        state.fetchers.forEach((_, key)=>deleteFetcher(key));
        state.blockers.forEach((_, key)=>deleteBlocker(key));
    }
    // Subscribe to state updates for the router
    function subscribe(fn) {
        subscribers.add(fn);
        return ()=>subscribers.delete(fn);
    }
    // Update our state and notify the calling context of the change
    function updateState(newState, viewTransitionOpts) {
        state = $35fc6c0e1453dea6$var$_extends({}, state, newState);
        subscribers.forEach((subscriber)=>subscriber(state, {
                unstable_viewTransitionOpts: viewTransitionOpts
            }));
    }
    // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION
    // and setting state.[historyAction/location/matches] to the new route.
    // - Location is a required param
    // - Navigation will always be set to IDLE_NAVIGATION
    // - Can pass any other state in newState
    function completeNavigation(location, newState) {
        var _location$state, _location$state2;
        // Deduce if we're in a loading/actionReload state:
        // - We have committed actionData in the store
        // - The current navigation was a mutation submission
        // - We're past the submitting state and into the loading state
        // - The location being loaded is not the result of a redirect
        let isActionReload = state.actionData != null && state.navigation.formMethod != null && $35fc6c0e1453dea6$var$isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
        let actionData;
        if (newState.actionData) {
            if (Object.keys(newState.actionData).length > 0) actionData = newState.actionData;
            else // Empty actionData -> clear prior actionData due to an action error
            actionData = null;
        } else if (isActionReload) // Keep the current data if we're wrapping up the action reload
        actionData = state.actionData;
        else // Clear actionData on any other completed navigations
        actionData = null;
        // Always preserve any existing loaderData from re-used routes
        let loaderData = newState.loaderData ? $35fc6c0e1453dea6$var$mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
        // On a successful navigation we can assume we got through all blockers
        // so we can start fresh
        let blockers = state.blockers;
        if (blockers.size > 0) {
            blockers = new Map(blockers);
            blockers.forEach((_, k)=>blockers.set(k, $35fc6c0e1453dea6$export$386d57f03f0b2883));
        }
        // Always respect the user flag.  Otherwise don't reset on mutation
        // submission navigations unless they redirect
        let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && $35fc6c0e1453dea6$var$isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
        if (inFlightDataRoutes) {
            dataRoutes = inFlightDataRoutes;
            inFlightDataRoutes = undefined;
        }
        if (isUninterruptedRevalidation) ;
        else if (pendingAction === $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop) ;
        else if (pendingAction === $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Push) init.history.push(location, location.state);
        else if (pendingAction === $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Replace) init.history.replace(location, location.state);
        let viewTransitionOpts;
        // On POP, enable transitions if they were enabled on the original navigation
        if (pendingAction === $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop) {
            // Forward takes precedence so they behave like the original navigation
            let priorPaths = appliedViewTransitions.get(state.location.pathname);
            if (priorPaths && priorPaths.has(location.pathname)) viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location
            };
            else if (appliedViewTransitions.has(location.pathname)) // If we don't have a previous forward nav, assume we're popping back to
            // the new location and enable if that location previously enabled
            viewTransitionOpts = {
                currentLocation: location,
                nextLocation: state.location
            };
        } else if (pendingViewTransitionEnabled) {
            // Store the applied transition on PUSH/REPLACE
            let toPaths = appliedViewTransitions.get(state.location.pathname);
            if (toPaths) toPaths.add(location.pathname);
            else {
                toPaths = new Set([
                    location.pathname
                ]);
                appliedViewTransitions.set(state.location.pathname, toPaths);
            }
            viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location
            };
        }
        updateState($35fc6c0e1453dea6$var$_extends({}, newState, {
            actionData: actionData,
            loaderData: loaderData,
            historyAction: pendingAction,
            location: location,
            initialized: true,
            navigation: $35fc6c0e1453dea6$export$ed3e14b2f9e105d0,
            revalidation: "idle",
            restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
            preventScrollReset: preventScrollReset,
            blockers: blockers
        }), viewTransitionOpts);
        // Reset stateful navigation vars
        pendingAction = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Pop;
        pendingPreventScrollReset = false;
        pendingViewTransitionEnabled = false;
        isUninterruptedRevalidation = false;
        isRevalidationRequired = false;
        cancelledDeferredRoutes = [];
        cancelledFetcherLoads = [];
    }
    // Trigger a navigation event, which can either be a numerical POP or a PUSH
    // replace with an optional submission
    async function navigate(to, opts) {
        if (typeof to === "number") {
            init.history.go(to);
            return;
        }
        let normalizedPath = $35fc6c0e1453dea6$var$normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
        let { path: path, submission: submission, error: error } = $35fc6c0e1453dea6$var$normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
        let currentLocation = state.location;
        let nextLocation = $35fc6c0e1453dea6$var$createLocation(state.location, path, opts && opts.state);
        // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded
        // URL from window.location, so we need to encode it here so the behavior
        // remains the same as POP and non-data-router usages.  new URL() does all
        // the same encoding we'd get from a history.pushState/window.location read
        // without having to touch history
        nextLocation = $35fc6c0e1453dea6$var$_extends({}, nextLocation, init.history.encodeLocation(nextLocation));
        let userReplace = opts && opts.replace != null ? opts.replace : undefined;
        let historyAction = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Push;
        if (userReplace === true) historyAction = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Replace;
        else if (userReplace === false) ;
        else if (submission != null && $35fc6c0e1453dea6$var$isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) // By default on submissions to the current location we REPLACE so that
        // users don't have to double-click the back button to get to the prior
        // location.  If the user redirects to a different location from the
        // action/loader this will be ignored and the redirect will be a PUSH
        historyAction = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Replace;
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : undefined;
        let blockerKey = shouldBlockNavigation({
            currentLocation: currentLocation,
            nextLocation: nextLocation,
            historyAction: historyAction
        });
        if (blockerKey) {
            // Put the blocker into a blocked state
            updateBlocker(blockerKey, {
                state: "blocked",
                location: nextLocation,
                proceed () {
                    updateBlocker(blockerKey, {
                        state: "proceeding",
                        proceed: undefined,
                        reset: undefined,
                        location: nextLocation
                    });
                    // Send the same navigation through
                    navigate(to, opts);
                },
                reset () {
                    let blockers = new Map(state.blockers);
                    blockers.set(blockerKey, $35fc6c0e1453dea6$export$386d57f03f0b2883);
                    updateState({
                        blockers: blockers
                    });
                }
            });
            return;
        }
        return await startNavigation(historyAction, nextLocation, {
            submission: submission,
            // Send through the formData serialization error if we have one so we can
            // render at the right error boundary after we match routes
            pendingError: error,
            preventScrollReset: preventScrollReset,
            replace: opts && opts.replace,
            enableViewTransition: opts && opts.unstable_viewTransition
        });
    }
    // Revalidate all current loaders.  If a navigation is in progress or if this
    // is interrupted by a navigation, allow this to "succeed" by calling all
    // loaders during the next loader round
    function revalidate() {
        interruptActiveLoads();
        updateState({
            revalidation: "loading"
        });
        // If we're currently submitting an action, we don't need to start a new
        // navigation, we'll just let the follow up loader execution call all loaders
        if (state.navigation.state === "submitting") return;
        // If we're currently in an idle state, start a new navigation for the current
        // action/location and mark it as uninterrupted, which will skip the history
        // update in completeNavigation
        if (state.navigation.state === "idle") {
            startNavigation(state.historyAction, state.location, {
                startUninterruptedRevalidation: true
            });
            return;
        }
        // Otherwise, if we're currently in a loading state, just start a new
        // navigation to the navigation.location but do not trigger an uninterrupted
        // revalidation so that history correctly updates once the navigation completes
        startNavigation(pendingAction || state.historyAction, state.navigation.location, {
            overrideNavigation: state.navigation
        });
    }
    // Start a navigation to the given action/location.  Can optionally provide a
    // overrideNavigation which will override the normalLoad in the case of a redirect
    // navigation
    async function startNavigation(historyAction, location, opts) {
        // Abort any in-progress navigations and start a new one. Unset any ongoing
        // uninterrupted revalidations unless told otherwise, since we want this
        // new navigation to update history normally
        pendingNavigationController && pendingNavigationController.abort();
        pendingNavigationController = null;
        pendingAction = historyAction;
        isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
        // Save the current scroll position every time we start a new navigation,
        // and track whether we should reset scroll on completion
        saveScrollPosition(state.location, state.matches);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let loadingNavigation = opts && opts.overrideNavigation;
        let matches = $35fc6c0e1453dea6$export$2708184779ceb39d(routesToUse, location, basename);
        // Short circuit with a 404 on the root error boundary if we match nothing
        if (!matches) {
            let error = $35fc6c0e1453dea6$var$getInternalRouterError(404, {
                pathname: location.pathname
            });
            let { matches: notFoundMatches, route: route } = $35fc6c0e1453dea6$var$getShortCircuitMatches(routesToUse);
            // Cancel all pending deferred on 404s since we don't keep any routes
            cancelActiveDeferreds();
            completeNavigation(location, {
                matches: notFoundMatches,
                loaderData: {},
                errors: {
                    [route.id]: error
                }
            });
            return;
        }
        // Short circuit if it's only a hash change and not a revalidation or
        // mutation submission.
        //
        // Ignore on initial page loads because since the initial load will always
        // be "same hash".  For example, on /page#hash and submit a <Form method="post">
        // which will default to a navigation to /page
        if (state.initialized && !isRevalidationRequired && $35fc6c0e1453dea6$var$isHashChangeOnly(state.location, location) && !(opts && opts.submission && $35fc6c0e1453dea6$var$isMutationMethod(opts.submission.formMethod))) {
            completeNavigation(location, {
                matches: matches
            });
            return;
        }
        // Create a controller/Request for this navigation
        pendingNavigationController = new AbortController();
        let request = $35fc6c0e1453dea6$var$createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
        let pendingActionData;
        let pendingError;
        if (opts && opts.pendingError) // If we have a pendingError, it means the user attempted a GET submission
        // with binary FormData so assign here and skip to handleLoaders.  That
        // way we handle calling loaders above the boundary etc.  It's not really
        // different from an actionError in that sense.
        pendingError = {
            [$35fc6c0e1453dea6$var$findNearestBoundary(matches).route.id]: opts.pendingError
        };
        else if (opts && opts.submission && $35fc6c0e1453dea6$var$isMutationMethod(opts.submission.formMethod)) {
            // Call action if we received an action submission
            let actionOutput = await handleAction(request, location, opts.submission, matches, {
                replace: opts.replace
            });
            if (actionOutput.shortCircuited) return;
            pendingActionData = actionOutput.pendingActionData;
            pendingError = actionOutput.pendingActionError;
            loadingNavigation = $35fc6c0e1453dea6$var$getLoadingNavigation(location, opts.submission);
            // Create a GET request for the loaders
            request = new Request(request.url, {
                signal: request.signal
            });
        }
        // Call loaders
        let { shortCircuited: shortCircuited, loaderData: loaderData, errors: errors } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);
        if (shortCircuited) return;
        // Clean up now that the action/loaders have completed.  Don't clean up if
        // we short circuited because pendingNavigationController will have already
        // been assigned to a new controller for the next navigation
        pendingNavigationController = null;
        completeNavigation(location, $35fc6c0e1453dea6$var$_extends({
            matches: matches
        }, pendingActionData ? {
            actionData: pendingActionData
        } : {}, {
            loaderData: loaderData,
            errors: errors
        }));
    }
    // Call the action matched by the leaf route for this navigation and handle
    // redirects/errors
    async function handleAction(request, location, submission, matches, opts) {
        if (opts === void 0) opts = {};
        interruptActiveLoads();
        // Put us in a submitting state
        let navigation = $35fc6c0e1453dea6$var$getSubmittingNavigation(location, submission);
        updateState({
            navigation: navigation
        });
        // Call our action and get the result
        let result;
        let actionMatch = $35fc6c0e1453dea6$var$getTargetMatch(matches, location);
        if (!actionMatch.route.action && !actionMatch.route.lazy) result = {
            type: $35fc6c0e1453dea6$var$ResultType.error,
            error: $35fc6c0e1453dea6$var$getInternalRouterError(405, {
                method: request.method,
                pathname: location.pathname,
                routeId: actionMatch.route.id
            })
        };
        else {
            result = await $35fc6c0e1453dea6$var$callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename);
            if (request.signal.aborted) return {
                shortCircuited: true
            };
        }
        if ($35fc6c0e1453dea6$var$isRedirectResult(result)) {
            let replace;
            if (opts && opts.replace != null) replace = opts.replace;
            else // If the user didn't explicity indicate replace behavior, replace if
            // we redirected to the exact same location we're currently at to avoid
            // double back-buttons
            replace = result.location === state.location.pathname + state.location.search;
            await startRedirectNavigation(state, result, {
                submission: submission,
                replace: replace
            });
            return {
                shortCircuited: true
            };
        }
        if ($35fc6c0e1453dea6$var$isErrorResult(result)) {
            // Store off the pending error - we use it to determine which loaders
            // to call and will commit it when we complete the navigation
            let boundaryMatch = $35fc6c0e1453dea6$var$findNearestBoundary(matches, actionMatch.route.id);
            // By default, all submissions are REPLACE navigations, but if the
            // action threw an error that'll be rendered in an errorElement, we fall
            // back to PUSH so that the user can use the back button to get back to
            // the pre-submission form location to try again
            if ((opts && opts.replace) !== true) pendingAction = $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Push;
            return {
                // Send back an empty object we can use to clear out any prior actionData
                pendingActionData: {},
                pendingActionError: {
                    [boundaryMatch.route.id]: result.error
                }
            };
        }
        if ($35fc6c0e1453dea6$var$isDeferredResult(result)) throw $35fc6c0e1453dea6$var$getInternalRouterError(400, {
            type: "defer-action"
        });
        return {
            pendingActionData: {
                [actionMatch.route.id]: result.data
            }
        };
    }
    // Call all applicable loaders for the given matches, handling redirects,
    // errors, etc.
    async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {
        // Figure out the right navigation we want to use for data loading
        let loadingNavigation = overrideNavigation || $35fc6c0e1453dea6$var$getLoadingNavigation(location, submission);
        // If this was a redirect from an action we don't have a "submission" but
        // we have it on the loading navigation so use that if available
        let activeSubmission = submission || fetcherSubmission || $35fc6c0e1453dea6$var$getSubmissionFromNavigation(loadingNavigation);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let [matchesToLoad, revalidatingFetchers] = $35fc6c0e1453dea6$var$getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);
        // Cancel pending deferreds for no-longer-matched routes or routes we're
        // about to reload.  Note that if this is an action reload we would have
        // already cancelled all pending deferreds so this would be a no-op
        cancelActiveDeferreds((routeId)=>!(matches && matches.some((m)=>m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m)=>m.route.id === routeId));
        pendingNavigationLoadId = ++incrementingLoadId;
        // Short circuit if we have no loaders to run
        if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
            let updatedFetchers = markFetchRedirectsDone();
            completeNavigation(location, $35fc6c0e1453dea6$var$_extends({
                matches: matches,
                loaderData: {},
                // Commit pending error if we're short circuiting
                errors: pendingError || null
            }, pendingActionData ? {
                actionData: pendingActionData
            } : {}, updatedFetchers ? {
                fetchers: new Map(state.fetchers)
            } : {}));
            return {
                shortCircuited: true
            };
        }
        // If this is an uninterrupted revalidation, we remain in our current idle
        // state.  If not, we need to switch to our loading state and load data,
        // preserving any new action data or existing action data (in the case of
        // a revalidation interrupting an actionReload)
        if (!isUninterruptedRevalidation) {
            revalidatingFetchers.forEach((rf)=>{
                let fetcher = state.fetchers.get(rf.key);
                let revalidatingFetcher = $35fc6c0e1453dea6$var$getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);
                state.fetchers.set(rf.key, revalidatingFetcher);
            });
            let actionData = pendingActionData || state.actionData;
            updateState($35fc6c0e1453dea6$var$_extends({
                navigation: loadingNavigation
            }, actionData ? Object.keys(actionData).length === 0 ? {
                actionData: null
            } : {
                actionData: actionData
            } : {}, revalidatingFetchers.length > 0 ? {
                fetchers: new Map(state.fetchers)
            } : {}));
        }
        revalidatingFetchers.forEach((rf)=>{
            if (fetchControllers.has(rf.key)) abortFetcher(rf.key);
            if (rf.controller) // Fetchers use an independent AbortController so that aborting a fetcher
            // (via deleteFetcher) does not abort the triggering navigation that
            // triggered the revalidation
            fetchControllers.set(rf.key, rf.controller);
        });
        // Proxy navigation abort through to revalidation fetchers
        let abortPendingFetchRevalidations = ()=>revalidatingFetchers.forEach((f)=>abortFetcher(f.key));
        if (pendingNavigationController) pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let { results: results, loaderResults: loaderResults, fetcherResults: fetcherResults } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
        if (request.signal.aborted) return {
            shortCircuited: true
        };
        // Clean up _after_ loaders have completed.  Don't clean up if we short
        // circuited because fetchControllers would have been aborted and
        // reassigned to new controllers for the next navigation
        if (pendingNavigationController) pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        revalidatingFetchers.forEach((rf)=>fetchControllers.delete(rf.key));
        // If any loaders returned a redirect Response, start a new REPLACE navigation
        let redirect = $35fc6c0e1453dea6$var$findRedirect(results);
        if (redirect) {
            if (redirect.idx >= matchesToLoad.length) {
                // If this redirect came from a fetcher make sure we mark it in
                // fetchRedirectIds so it doesn't get revalidated on the next set of
                // loader executions
                let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
            }
            await startRedirectNavigation(state, redirect.result, {
                replace: replace
            });
            return {
                shortCircuited: true
            };
        }
        // Process and commit output from loaders
        let { loaderData: loaderData, errors: errors } = $35fc6c0e1453dea6$var$processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
        // Wire up subscribers to update loaderData as promises settle
        activeDeferreds.forEach((deferredData, routeId)=>{
            deferredData.subscribe((aborted)=>{
                // Note: No need to updateState here since the TrackedPromise on
                // loaderData is stable across resolve/reject
                // Remove this instance if we were aborted or if promises have settled
                if (aborted || deferredData.done) activeDeferreds.delete(routeId);
            });
        });
        let updatedFetchers = markFetchRedirectsDone();
        let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
        let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return $35fc6c0e1453dea6$var$_extends({
            loaderData: loaderData,
            errors: errors
        }, shouldUpdateFetchers ? {
            fetchers: new Map(state.fetchers)
        } : {});
    }
    function getFetcher(key) {
        return state.fetchers.get(key) || $35fc6c0e1453dea6$export$52eace9c284d3585;
    }
    // Trigger a fetcher load/submit for the given fetcher key
    function fetch(key, routeId, href, opts) {
        if (isServer) throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
        if (fetchControllers.has(key)) abortFetcher(key);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let normalizedPath = $35fc6c0e1453dea6$var$normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);
        let matches = $35fc6c0e1453dea6$export$2708184779ceb39d(routesToUse, normalizedPath, basename);
        if (!matches) {
            setFetcherError(key, routeId, $35fc6c0e1453dea6$var$getInternalRouterError(404, {
                pathname: normalizedPath
            }));
            return;
        }
        let { path: path, submission: submission, error: error } = $35fc6c0e1453dea6$var$normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
        if (error) {
            setFetcherError(key, routeId, error);
            return;
        }
        let match = $35fc6c0e1453dea6$var$getTargetMatch(matches, path);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        if (submission && $35fc6c0e1453dea6$var$isMutationMethod(submission.formMethod)) {
            handleFetcherAction(key, routeId, path, match, matches, submission);
            return;
        }
        // Store off the match so we can call it's shouldRevalidate on subsequent
        // revalidations
        fetchLoadMatches.set(key, {
            routeId: routeId,
            path: path
        });
        handleFetcherLoader(key, routeId, path, match, matches, submission);
    }
    // Call the action for the matched fetcher.submit(), and then handle redirects,
    // errors, and revalidation
    async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {
        interruptActiveLoads();
        fetchLoadMatches.delete(key);
        if (!match.route.action && !match.route.lazy) {
            let error = $35fc6c0e1453dea6$var$getInternalRouterError(405, {
                method: submission.formMethod,
                pathname: path,
                routeId: routeId
            });
            setFetcherError(key, routeId, error);
            return;
        }
        // Put this fetcher into it's submitting state
        let existingFetcher = state.fetchers.get(key);
        let fetcher = $35fc6c0e1453dea6$var$getSubmittingFetcher(submission, existingFetcher);
        state.fetchers.set(key, fetcher);
        updateState({
            fetchers: new Map(state.fetchers)
        });
        // Call the action for the fetcher
        let abortController = new AbortController();
        let fetchRequest = $35fc6c0e1453dea6$var$createClientSideRequest(init.history, path, abortController.signal, submission);
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let actionResult = await $35fc6c0e1453dea6$var$callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);
        if (fetchRequest.signal.aborted) {
            // We can delete this so long as we weren't aborted by ou our own fetcher
            // re-submit which would have put _new_ controller is in fetchControllers
            if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
            return;
        }
        if ($35fc6c0e1453dea6$var$isRedirectResult(actionResult)) {
            fetchControllers.delete(key);
            if (pendingNavigationLoadId > originatingLoadId) {
                // A new navigation was kicked off after our action started, so that
                // should take precedence over this redirect navigation.  We already
                // set isRevalidationRequired so all loaders for the new route should
                // fire unless opted out via shouldRevalidate
                let doneFetcher = $35fc6c0e1453dea6$var$getDoneFetcher(undefined);
                state.fetchers.set(key, doneFetcher);
                updateState({
                    fetchers: new Map(state.fetchers)
                });
                return;
            } else {
                fetchRedirectIds.add(key);
                let loadingFetcher = $35fc6c0e1453dea6$var$getLoadingFetcher(submission);
                state.fetchers.set(key, loadingFetcher);
                updateState({
                    fetchers: new Map(state.fetchers)
                });
                return startRedirectNavigation(state, actionResult, {
                    fetcherSubmission: submission
                });
            }
        }
        // Process any non-redirect errors thrown
        if ($35fc6c0e1453dea6$var$isErrorResult(actionResult)) {
            setFetcherError(key, routeId, actionResult.error);
            return;
        }
        if ($35fc6c0e1453dea6$var$isDeferredResult(actionResult)) throw $35fc6c0e1453dea6$var$getInternalRouterError(400, {
            type: "defer-action"
        });
        // Start the data load for current matches, or the next location if we're
        // in the middle of a navigation
        let nextLocation = state.navigation.location || state.location;
        let revalidationRequest = $35fc6c0e1453dea6$var$createClientSideRequest(init.history, nextLocation, abortController.signal);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let matches = state.navigation.state !== "idle" ? $35fc6c0e1453dea6$export$2708184779ceb39d(routesToUse, state.navigation.location, basename) : state.matches;
        $35fc6c0e1453dea6$export$3e9cee6b33872309(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = $35fc6c0e1453dea6$var$getLoadingFetcher(submission, actionResult.data);
        state.fetchers.set(key, loadFetcher);
        let [matchesToLoad, revalidatingFetchers] = $35fc6c0e1453dea6$var$getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {
            [match.route.id]: actionResult.data
        }, undefined // No need to send through errors since we short circuit above
        );
        // Put all revalidating fetchers into the loading state, except for the
        // current fetcher which we want to keep in it's current loading state which
        // contains it's action submission info + action data
        revalidatingFetchers.filter((rf)=>rf.key !== key).forEach((rf)=>{
            let staleKey = rf.key;
            let existingFetcher = state.fetchers.get(staleKey);
            let revalidatingFetcher = $35fc6c0e1453dea6$var$getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);
            state.fetchers.set(staleKey, revalidatingFetcher);
            if (fetchControllers.has(staleKey)) abortFetcher(staleKey);
            if (rf.controller) fetchControllers.set(staleKey, rf.controller);
        });
        updateState({
            fetchers: new Map(state.fetchers)
        });
        let abortPendingFetchRevalidations = ()=>revalidatingFetchers.forEach((rf)=>abortFetcher(rf.key));
        abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let { results: results, loaderResults: loaderResults, fetcherResults: fetcherResults } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
        if (abortController.signal.aborted) return;
        abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        fetchReloadIds.delete(key);
        fetchControllers.delete(key);
        revalidatingFetchers.forEach((r)=>fetchControllers.delete(r.key));
        let redirect = $35fc6c0e1453dea6$var$findRedirect(results);
        if (redirect) {
            if (redirect.idx >= matchesToLoad.length) {
                // If this redirect came from a fetcher make sure we mark it in
                // fetchRedirectIds so it doesn't get revalidated on the next set of
                // loader executions
                let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
            }
            return startRedirectNavigation(state, redirect.result);
        }
        // Process and commit output from loaders
        let { loaderData: loaderData, errors: errors } = $35fc6c0e1453dea6$var$processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);
        // Since we let revalidations complete even if the submitting fetcher was
        // deleted, only put it back to idle if it hasn't been deleted
        if (state.fetchers.has(key)) {
            let doneFetcher = $35fc6c0e1453dea6$var$getDoneFetcher(actionResult.data);
            state.fetchers.set(key, doneFetcher);
        }
        let didAbortFetchLoads = abortStaleFetchLoads(loadId);
        // If we are currently in a navigation loading state and this fetcher is
        // more recent than the navigation, we want the newer data so abort the
        // navigation and complete it with the fetcher data
        if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
            $35fc6c0e1453dea6$export$3e9cee6b33872309(pendingAction, "Expected pending action");
            pendingNavigationController && pendingNavigationController.abort();
            completeNavigation(state.navigation.location, {
                matches: matches,
                loaderData: loaderData,
                errors: errors,
                fetchers: new Map(state.fetchers)
            });
        } else {
            // otherwise just update with the fetcher data, preserving any existing
            // loaderData for loaders that did not need to reload.  We have to
            // manually merge here since we aren't going through completeNavigation
            updateState($35fc6c0e1453dea6$var$_extends({
                errors: errors,
                loaderData: $35fc6c0e1453dea6$var$mergeLoaderData(state.loaderData, loaderData, matches, errors)
            }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {
                fetchers: new Map(state.fetchers)
            } : {}));
            isRevalidationRequired = false;
        }
    }
    // Call the matched loader for fetcher.load(), handling redirects, errors, etc.
    async function handleFetcherLoader(key, routeId, path, match, matches, submission) {
        let existingFetcher = state.fetchers.get(key);
        // Put this fetcher into it's loading state
        let loadingFetcher = $35fc6c0e1453dea6$var$getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);
        state.fetchers.set(key, loadingFetcher);
        updateState({
            fetchers: new Map(state.fetchers)
        });
        // Call the loader for this fetcher route match
        let abortController = new AbortController();
        let fetchRequest = $35fc6c0e1453dea6$var$createClientSideRequest(init.history, path, abortController.signal);
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let result = await $35fc6c0e1453dea6$var$callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename);
        // Deferred isn't supported for fetcher loads, await everything and treat it
        // as a normal load.  resolveDeferredData will return undefined if this
        // fetcher gets aborted, so we just leave result untouched and short circuit
        // below if that happens
        if ($35fc6c0e1453dea6$var$isDeferredResult(result)) result = await $35fc6c0e1453dea6$var$resolveDeferredData(result, fetchRequest.signal, true) || result;
        // We can delete this so long as we weren't aborted by our our own fetcher
        // re-load which would have put _new_ controller is in fetchControllers
        if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
        if (fetchRequest.signal.aborted) return;
        // If the loader threw a redirect Response, start a new REPLACE navigation
        if ($35fc6c0e1453dea6$var$isRedirectResult(result)) {
            if (pendingNavigationLoadId > originatingLoadId) {
                // A new navigation was kicked off after our loader started, so that
                // should take precedence over this redirect navigation
                let doneFetcher = $35fc6c0e1453dea6$var$getDoneFetcher(undefined);
                state.fetchers.set(key, doneFetcher);
                updateState({
                    fetchers: new Map(state.fetchers)
                });
                return;
            } else {
                fetchRedirectIds.add(key);
                await startRedirectNavigation(state, result);
                return;
            }
        }
        // Process any non-redirect errors thrown
        if ($35fc6c0e1453dea6$var$isErrorResult(result)) {
            let boundaryMatch = $35fc6c0e1453dea6$var$findNearestBoundary(state.matches, routeId);
            state.fetchers.delete(key);
            // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -
            // do we need to behave any differently with our non-redirect errors?
            // What if it was a non-redirect Response?
            updateState({
                fetchers: new Map(state.fetchers),
                errors: {
                    [boundaryMatch.route.id]: result.error
                }
            });
            return;
        }
        $35fc6c0e1453dea6$export$3e9cee6b33872309(!$35fc6c0e1453dea6$var$isDeferredResult(result), "Unhandled fetcher deferred data");
        // Put the fetcher back into an idle state
        let doneFetcher = $35fc6c0e1453dea6$var$getDoneFetcher(result.data);
        state.fetchers.set(key, doneFetcher);
        updateState({
            fetchers: new Map(state.fetchers)
        });
    }
    /**
   * Utility function to handle redirects returned from an action or loader.
   * Normally, a redirect "replaces" the navigation that triggered it.  So, for
   * example:
   *
   *  - user is on /a
   *  - user clicks a link to /b
   *  - loader for /b redirects to /c
   *
   * In a non-JS app the browser would track the in-flight navigation to /b and
   * then replace it with /c when it encountered the redirect response.  In
   * the end it would only ever update the URL bar with /c.
   *
   * In client-side routing using pushState/replaceState, we aim to emulate
   * this behavior and we also do not update history until the end of the
   * navigation (including processed redirects).  This means that we never
   * actually touch history until we've processed redirects, so we just use
   * the history action from the original navigation (PUSH or REPLACE).
   */ async function startRedirectNavigation(state, redirect, _temp) {
        let { submission: submission, fetcherSubmission: fetcherSubmission, replace: replace } = _temp === void 0 ? {} : _temp;
        if (redirect.revalidate) isRevalidationRequired = true;
        let redirectLocation = $35fc6c0e1453dea6$var$createLocation(state.location, redirect.location, {
            _isRedirect: true
        });
        $35fc6c0e1453dea6$export$3e9cee6b33872309(redirectLocation, "Expected a location on the redirect navigation");
        if (isBrowser) {
            let isDocumentReload = false;
            if (redirect.reloadDocument) // Hard reload if the response contained X-Remix-Reload-Document
            isDocumentReload = true;
            else if ($35fc6c0e1453dea6$var$ABSOLUTE_URL_REGEX.test(redirect.location)) {
                const url = init.history.createURL(redirect.location);
                isDocumentReload = // Hard reload if it's an absolute URL to a new origin
                url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
                $35fc6c0e1453dea6$export$b69e3301ce081aa3(url.pathname, basename) == null;
            }
            if (isDocumentReload) {
                if (replace) routerWindow.location.replace(redirect.location);
                else routerWindow.location.assign(redirect.location);
                return;
            }
        }
        // There's no need to abort on redirects, since we don't detect the
        // redirect until the action/loaders have settled
        pendingNavigationController = null;
        let redirectHistoryAction = replace === true ? $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Replace : $35fc6c0e1453dea6$export$e19cd5f9376f8cee.Push;
        // Use the incoming submission if provided, fallback on the active one in
        // state.navigation
        let { formMethod: formMethod, formAction: formAction, formEncType: formEncType } = state.navigation;
        if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) submission = $35fc6c0e1453dea6$var$getSubmissionFromNavigation(state.navigation);
        // If this was a 307/308 submission we want to preserve the HTTP method and
        // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the
        // redirected location
        let activeSubmission = submission || fetcherSubmission;
        if ($35fc6c0e1453dea6$var$redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && $35fc6c0e1453dea6$var$isMutationMethod(activeSubmission.formMethod)) await startNavigation(redirectHistoryAction, redirectLocation, {
            submission: $35fc6c0e1453dea6$var$_extends({}, activeSubmission, {
                formAction: redirect.location
            }),
            // Preserve this flag across redirects
            preventScrollReset: pendingPreventScrollReset
        });
        else {
            // If we have a navigation submission, we will preserve it through the
            // redirect navigation
            let overrideNavigation = $35fc6c0e1453dea6$var$getLoadingNavigation(redirectLocation, submission);
            await startNavigation(redirectHistoryAction, redirectLocation, {
                overrideNavigation: overrideNavigation,
                fetcherSubmission: // Send fetcher submissions through for shouldRevalidate
                fetcherSubmission,
                // Preserve this flag across redirects
                preventScrollReset: pendingPreventScrollReset
            });
        }
    }
    async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
        // Call all navigation loaders and revalidating fetcher loaders in parallel,
        // then slice off the results into separate arrays so we can handle them
        // accordingly
        let results = await Promise.all([
            ...matchesToLoad.map((match)=>$35fc6c0e1453dea6$var$callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename)),
            ...fetchersToLoad.map((f)=>{
                if (f.matches && f.match && f.controller) return $35fc6c0e1453dea6$var$callLoaderOrAction("loader", $35fc6c0e1453dea6$var$createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);
                else {
                    let error = {
                        type: $35fc6c0e1453dea6$var$ResultType.error,
                        error: $35fc6c0e1453dea6$var$getInternalRouterError(404, {
                            pathname: f.path
                        })
                    };
                    return error;
                }
            })
        ]);
        let loaderResults = results.slice(0, matchesToLoad.length);
        let fetcherResults = results.slice(matchesToLoad.length);
        await Promise.all([
            $35fc6c0e1453dea6$var$resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(()=>request.signal), false, state.loaderData),
            $35fc6c0e1453dea6$var$resolveDeferredResults(currentMatches, fetchersToLoad.map((f)=>f.match), fetcherResults, fetchersToLoad.map((f)=>f.controller ? f.controller.signal : null), true)
        ]);
        return {
            results: results,
            loaderResults: loaderResults,
            fetcherResults: fetcherResults
        };
    }
    function interruptActiveLoads() {
        // Every interruption triggers a revalidation
        isRevalidationRequired = true;
        // Cancel pending route-level deferreds and mark cancelled routes for
        // revalidation
        cancelledDeferredRoutes.push(...cancelActiveDeferreds());
        // Abort in-flight fetcher loads
        fetchLoadMatches.forEach((_, key)=>{
            if (fetchControllers.has(key)) {
                cancelledFetcherLoads.push(key);
                abortFetcher(key);
            }
        });
    }
    function setFetcherError(key, routeId, error) {
        let boundaryMatch = $35fc6c0e1453dea6$var$findNearestBoundary(state.matches, routeId);
        deleteFetcher(key);
        updateState({
            errors: {
                [boundaryMatch.route.id]: error
            },
            fetchers: new Map(state.fetchers)
        });
    }
    function deleteFetcher(key) {
        let fetcher = state.fetchers.get(key);
        // Don't abort the controller if this is a deletion of a fetcher.submit()
        // in it's loading phase since - we don't want to abort the corresponding
        // revalidation and want them to complete and land
        if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) abortFetcher(key);
        fetchLoadMatches.delete(key);
        fetchReloadIds.delete(key);
        fetchRedirectIds.delete(key);
        state.fetchers.delete(key);
    }
    function abortFetcher(key) {
        let controller = fetchControllers.get(key);
        $35fc6c0e1453dea6$export$3e9cee6b33872309(controller, "Expected fetch controller: " + key);
        controller.abort();
        fetchControllers.delete(key);
    }
    function markFetchersDone(keys) {
        for (let key of keys){
            let fetcher = getFetcher(key);
            let doneFetcher = $35fc6c0e1453dea6$var$getDoneFetcher(fetcher.data);
            state.fetchers.set(key, doneFetcher);
        }
    }
    function markFetchRedirectsDone() {
        let doneKeys = [];
        let updatedFetchers = false;
        for (let key of fetchRedirectIds){
            let fetcher = state.fetchers.get(key);
            $35fc6c0e1453dea6$export$3e9cee6b33872309(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
                fetchRedirectIds.delete(key);
                doneKeys.push(key);
                updatedFetchers = true;
            }
        }
        markFetchersDone(doneKeys);
        return updatedFetchers;
    }
    function abortStaleFetchLoads(landedId) {
        let yeetedKeys = [];
        for (let [key, id] of fetchReloadIds)if (id < landedId) {
            let fetcher = state.fetchers.get(key);
            $35fc6c0e1453dea6$export$3e9cee6b33872309(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
                abortFetcher(key);
                fetchReloadIds.delete(key);
                yeetedKeys.push(key);
            }
        }
        markFetchersDone(yeetedKeys);
        return yeetedKeys.length > 0;
    }
    function getBlocker(key, fn) {
        let blocker = state.blockers.get(key) || $35fc6c0e1453dea6$export$386d57f03f0b2883;
        if (blockerFunctions.get(key) !== fn) blockerFunctions.set(key, fn);
        return blocker;
    }
    function deleteBlocker(key) {
        state.blockers.delete(key);
        blockerFunctions.delete(key);
    }
    // Utility function to update blockers, ensuring valid state transitions
    function updateBlocker(key, newBlocker) {
        let blocker = state.blockers.get(key) || $35fc6c0e1453dea6$export$386d57f03f0b2883;
        // Poor mans state machine :)
        // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM
        $35fc6c0e1453dea6$export$3e9cee6b33872309(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
        let blockers = new Map(state.blockers);
        blockers.set(key, newBlocker);
        updateState({
            blockers: blockers
        });
    }
    function shouldBlockNavigation(_ref2) {
        let { currentLocation: currentLocation, nextLocation: nextLocation, historyAction: historyAction } = _ref2;
        if (blockerFunctions.size === 0) return;
        // We ony support a single active blocker at the moment since we don't have
        // any compelling use cases for multi-blocker yet
        if (blockerFunctions.size > 1) $35fc6c0e1453dea6$export$c0e02632e14916fd(false, "A router only supports one blocker at a time");
        let entries = Array.from(blockerFunctions.entries());
        let [blockerKey, blockerFunction] = entries[entries.length - 1];
        let blocker = state.blockers.get(blockerKey);
        if (blocker && blocker.state === "proceeding") // If the blocker is currently proceeding, we don't need to re-check
        // it and can let this navigation continue
        return;
        // At this point, we know we're unblocked/blocked so we need to check the
        // user-provided blocker function
        if (blockerFunction({
            currentLocation: currentLocation,
            nextLocation: nextLocation,
            historyAction: historyAction
        })) return blockerKey;
    }
    function cancelActiveDeferreds(predicate) {
        let cancelledRouteIds = [];
        activeDeferreds.forEach((dfd, routeId)=>{
            if (!predicate || predicate(routeId)) {
                // Cancel the deferred - but do not remove from activeDeferreds here -
                // we rely on the subscribers to do that so our tests can assert proper
                // cleanup via _internalActiveDeferreds
                dfd.cancel();
                cancelledRouteIds.push(routeId);
                activeDeferreds.delete(routeId);
            }
        });
        return cancelledRouteIds;
    }
    // Opt in to capturing and reporting scroll positions during navigations,
    // used by the <ScrollRestoration> component
    function enableScrollRestoration(positions, getPosition, getKey) {
        savedScrollPositions = positions;
        getScrollPosition = getPosition;
        getScrollRestorationKey = getKey || null;
        // Perform initial hydration scroll restoration, since we miss the boat on
        // the initial updateState() because we've not yet rendered <ScrollRestoration/>
        // and therefore have no savedScrollPositions available
        if (!initialScrollRestored && state.navigation === $35fc6c0e1453dea6$export$ed3e14b2f9e105d0) {
            initialScrollRestored = true;
            let y = getSavedScrollPosition(state.location, state.matches);
            if (y != null) updateState({
                restoreScrollPosition: y
            });
        }
        return ()=>{
            savedScrollPositions = null;
            getScrollPosition = null;
            getScrollRestorationKey = null;
        };
    }
    function getScrollKey(location, matches) {
        if (getScrollRestorationKey) {
            let key = getScrollRestorationKey(location, matches.map((m)=>$35fc6c0e1453dea6$export$b3fac024fad9e8ff(m, state.loaderData)));
            return key || location.key;
        }
        return location.key;
    }
    function saveScrollPosition(location, matches) {
        if (savedScrollPositions && getScrollPosition) {
            let key = getScrollKey(location, matches);
            savedScrollPositions[key] = getScrollPosition();
        }
    }
    function getSavedScrollPosition(location, matches) {
        if (savedScrollPositions) {
            let key = getScrollKey(location, matches);
            let y = savedScrollPositions[key];
            if (typeof y === "number") return y;
        }
        return null;
    }
    function _internalSetRoutes(newRoutes) {
        manifest = {};
        inFlightDataRoutes = $35fc6c0e1453dea6$export$4a6d22b32134ea5d(newRoutes, mapRouteProperties, undefined, manifest);
    }
    router = {
        get basename () {
            return basename;
        },
        get state () {
            return state;
        },
        get routes () {
            return dataRoutes;
        },
        get window () {
            return routerWindow;
        },
        initialize: initialize,
        subscribe: subscribe,
        enableScrollRestoration: enableScrollRestoration,
        navigate: navigate,
        fetch: fetch,
        revalidate: revalidate,
        // Passthrough to history-aware createHref used by useHref so we get proper
        // hash-aware URLs in DOM paths
        createHref: (to)=>init.history.createHref(to),
        encodeLocation: (to)=>init.history.encodeLocation(to),
        getFetcher: getFetcher,
        deleteFetcher: deleteFetcher,
        dispose: dispose,
        getBlocker: getBlocker,
        deleteBlocker: deleteBlocker,
        _internalFetchControllers: fetchControllers,
        _internalActiveDeferreds: activeDeferreds,
        _internalSetRoutes: // TODO: Remove setRoutes, it's temporary to avoid dealing with
        // updating the tree while validating the update algorithm.
        _internalSetRoutes
    };
    return router;
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region createStaticHandler
////////////////////////////////////////////////////////////////////////////////
const $35fc6c0e1453dea6$export$4d0306f8f6a4585b = Symbol("deferred");
function $35fc6c0e1453dea6$export$3336b097a6fbc59a(routes, opts) {
    $35fc6c0e1453dea6$export$3e9cee6b33872309(routes.length > 0, "You must provide a non-empty routes array to createStaticHandler");
    let manifest = {};
    let basename = (opts ? opts.basename : null) || "/";
    let mapRouteProperties;
    if (opts != null && opts.mapRouteProperties) mapRouteProperties = opts.mapRouteProperties;
    else if (opts != null && opts.detectErrorBoundary) {
        // If they are still using the deprecated version, wrap it with the new API
        let detectErrorBoundary = opts.detectErrorBoundary;
        mapRouteProperties = (route)=>({
                hasErrorBoundary: detectErrorBoundary(route)
            });
    } else mapRouteProperties = $35fc6c0e1453dea6$var$defaultMapRouteProperties;
    let dataRoutes = $35fc6c0e1453dea6$export$4a6d22b32134ea5d(routes, mapRouteProperties, undefined, manifest);
    /**
   * The query() method is intended for document requests, in which we want to
   * call an optional action and potentially multiple loaders for all nested
   * routes.  It returns a StaticHandlerContext object, which is very similar
   * to the router state (location, loaderData, actionData, errors, etc.) and
   * also adds SSR-specific information such as the statusCode and headers
   * from action/loaders Responses.
   *
   * It _should_ never throw and should report all errors through the
   * returned context.errors object, properly associating errors to their error
   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be
   * used to emulate React error boundaries during SSr by performing a second
   * pass only down to the boundaryId.
   *
   * The one exception where we do not return a StaticHandlerContext is when a
   * redirect response is returned or thrown from any action/loader.  We
   * propagate that out and return the raw Response so the HTTP server can
   * return it directly.
   */ async function query(request, _temp2) {
        let { requestContext: requestContext } = _temp2 === void 0 ? {} : _temp2;
        let url = new URL(request.url);
        let method = request.method;
        let location = $35fc6c0e1453dea6$var$createLocation("", $35fc6c0e1453dea6$export$fe53371bee54353d(url), null, "default");
        let matches = $35fc6c0e1453dea6$export$2708184779ceb39d(dataRoutes, location, basename);
        // SSR supports HEAD requests while SPA doesn't
        if (!$35fc6c0e1453dea6$var$isValidMethod(method) && method !== "HEAD") {
            let error = $35fc6c0e1453dea6$var$getInternalRouterError(405, {
                method: method
            });
            let { matches: methodNotAllowedMatches, route: route } = $35fc6c0e1453dea6$var$getShortCircuitMatches(dataRoutes);
            return {
                basename: basename,
                location: location,
                matches: methodNotAllowedMatches,
                loaderData: {},
                actionData: null,
                errors: {
                    [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        } else if (!matches) {
            let error = $35fc6c0e1453dea6$var$getInternalRouterError(404, {
                pathname: location.pathname
            });
            let { matches: notFoundMatches, route: route } = $35fc6c0e1453dea6$var$getShortCircuitMatches(dataRoutes);
            return {
                basename: basename,
                location: location,
                matches: notFoundMatches,
                loaderData: {},
                actionData: null,
                errors: {
                    [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        }
        let result = await queryImpl(request, location, matches, requestContext);
        if ($35fc6c0e1453dea6$var$isResponse(result)) return result;
        // When returning StaticHandlerContext, we patch back in the location here
        // since we need it for React Context.  But this helps keep our submit and
        // loadRouteData operating on a Request instead of a Location
        return $35fc6c0e1453dea6$var$_extends({
            location: location,
            basename: basename
        }, result);
    }
    /**
   * The queryRoute() method is intended for targeted route requests, either
   * for fetch ?_data requests or resource route requests.  In this case, we
   * are only ever calling a single action or loader, and we are returning the
   * returned value directly.  In most cases, this will be a Response returned
   * from the action/loader, but it may be a primitive or other value as well -
   * and in such cases the calling context should handle that accordingly.
   *
   * We do respect the throw/return differentiation, so if an action/loader
   * throws, then this method will throw the value.  This is important so we
   * can do proper boundary identification in Remix where a thrown Response
   * must go to the Catch Boundary but a returned Response is happy-path.
   *
   * One thing to note is that any Router-initiated Errors that make sense
   * to associate with a status code will be thrown as an ErrorResponse
   * instance which include the raw Error, such that the calling context can
   * serialize the error as they see fit while including the proper response
   * code.  Examples here are 404 and 405 errors that occur prior to reaching
   * any user-defined loaders.
   */ async function queryRoute(request, _temp3) {
        let { routeId: routeId, requestContext: requestContext } = _temp3 === void 0 ? {} : _temp3;
        let url = new URL(request.url);
        let method = request.method;
        let location = $35fc6c0e1453dea6$var$createLocation("", $35fc6c0e1453dea6$export$fe53371bee54353d(url), null, "default");
        let matches = $35fc6c0e1453dea6$export$2708184779ceb39d(dataRoutes, location, basename);
        // SSR supports HEAD requests while SPA doesn't
        if (!$35fc6c0e1453dea6$var$isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS") throw $35fc6c0e1453dea6$var$getInternalRouterError(405, {
            method: method
        });
        else if (!matches) throw $35fc6c0e1453dea6$var$getInternalRouterError(404, {
            pathname: location.pathname
        });
        let match = routeId ? matches.find((m)=>m.route.id === routeId) : $35fc6c0e1453dea6$var$getTargetMatch(matches, location);
        if (routeId && !match) throw $35fc6c0e1453dea6$var$getInternalRouterError(403, {
            pathname: location.pathname,
            routeId: routeId
        });
        else if (!match) // This should never hit I don't think?
        throw $35fc6c0e1453dea6$var$getInternalRouterError(404, {
            pathname: location.pathname
        });
        let result = await queryImpl(request, location, matches, requestContext, match);
        if ($35fc6c0e1453dea6$var$isResponse(result)) return result;
        let error = result.errors ? Object.values(result.errors)[0] : undefined;
        if (error !== undefined) // If we got back result.errors, that means the loader/action threw
        // _something_ that wasn't a Response, but it's not guaranteed/required
        // to be an `instanceof Error` either, so we have to use throw here to
        // preserve the "error" state outside of queryImpl.
        throw error;
        // Pick off the right state value to return
        if (result.actionData) return Object.values(result.actionData)[0];
        if (result.loaderData) {
            var _result$activeDeferre;
            let data = Object.values(result.loaderData)[0];
            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) data[$35fc6c0e1453dea6$export$4d0306f8f6a4585b] = result.activeDeferreds[match.route.id];
            return data;
        }
        return undefined;
    }
    async function queryImpl(request, location, matches, requestContext, routeMatch) {
        $35fc6c0e1453dea6$export$3e9cee6b33872309(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
        try {
            if ($35fc6c0e1453dea6$var$isMutationMethod(request.method.toLowerCase())) {
                let result = await submit(request, matches, routeMatch || $35fc6c0e1453dea6$var$getTargetMatch(matches, location), requestContext, routeMatch != null);
                return result;
            }
            let result = await loadRouteData(request, matches, requestContext, routeMatch);
            return $35fc6c0e1453dea6$var$isResponse(result) ? result : $35fc6c0e1453dea6$var$_extends({}, result, {
                actionData: null,
                actionHeaders: {}
            });
        } catch (e) {
            // If the user threw/returned a Response in callLoaderOrAction, we throw
            // it to bail out and then return or throw here based on whether the user
            // returned or threw
            if ($35fc6c0e1453dea6$var$isQueryRouteResponse(e)) {
                if (e.type === $35fc6c0e1453dea6$var$ResultType.error) throw e.response;
                return e.response;
            }
            // Redirects are always returned since they don't propagate to catch
            // boundaries
            if ($35fc6c0e1453dea6$var$isRedirectResponse(e)) return e;
            throw e;
        }
    }
    async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
        let result;
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
            let error = $35fc6c0e1453dea6$var$getInternalRouterError(405, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: actionMatch.route.id
            });
            if (isRouteRequest) throw error;
            result = {
                type: $35fc6c0e1453dea6$var$ResultType.error,
                error: error
            };
        } else {
            result = await $35fc6c0e1453dea6$var$callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, {
                isStaticRequest: true,
                isRouteRequest: isRouteRequest,
                requestContext: requestContext
            });
            if (request.signal.aborted) {
                let method = isRouteRequest ? "queryRoute" : "query";
                throw new Error(method + "() call aborted: " + request.method + " " + request.url);
            }
        }
        if ($35fc6c0e1453dea6$var$isRedirectResult(result)) // Uhhhh - this should never happen, we should always throw these from
        // callLoaderOrAction, but the type narrowing here keeps TS happy and we
        // can get back on the "throw all redirect responses" train here should
        // this ever happen :/
        throw new Response(null, {
            status: result.status,
            headers: {
                Location: result.location
            }
        });
        if ($35fc6c0e1453dea6$var$isDeferredResult(result)) {
            let error = $35fc6c0e1453dea6$var$getInternalRouterError(400, {
                type: "defer-action"
            });
            if (isRouteRequest) throw error;
            result = {
                type: $35fc6c0e1453dea6$var$ResultType.error,
                error: error
            };
        }
        if (isRouteRequest) {
            // Note: This should only be non-Response values if we get here, since
            // isRouteRequest should throw any Response received in callLoaderOrAction
            if ($35fc6c0e1453dea6$var$isErrorResult(result)) throw result.error;
            return {
                matches: [
                    actionMatch
                ],
                loaderData: {},
                actionData: {
                    [actionMatch.route.id]: result.data
                },
                errors: null,
                // Note: statusCode + headers are unused here since queryRoute will
                // return the raw Response or value
                statusCode: 200,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        }
        if ($35fc6c0e1453dea6$var$isErrorResult(result)) {
            // Store off the pending error - we use it to determine which loaders
            // to call and will commit it when we complete the navigation
            let boundaryMatch = $35fc6c0e1453dea6$var$findNearestBoundary(matches, actionMatch.route.id);
            let context = await loadRouteData(request, matches, requestContext, undefined, {
                [boundaryMatch.route.id]: result.error
            });
            // action status codes take precedence over loader status codes
            return $35fc6c0e1453dea6$var$_extends({}, context, {
                statusCode: $35fc6c0e1453dea6$export$972111febbeef05b(result.error) ? result.error.status : 500,
                actionData: null,
                actionHeaders: $35fc6c0e1453dea6$var$_extends({}, result.headers ? {
                    [actionMatch.route.id]: result.headers
                } : {})
            });
        }
        // Create a GET request for the loaders
        let loaderRequest = new Request(request.url, {
            headers: request.headers,
            redirect: request.redirect,
            signal: request.signal
        });
        let context = await loadRouteData(loaderRequest, matches, requestContext);
        return $35fc6c0e1453dea6$var$_extends({}, context, result.statusCode ? {
            statusCode: result.statusCode
        } : {}, {
            actionData: {
                [actionMatch.route.id]: result.data
            },
            actionHeaders: $35fc6c0e1453dea6$var$_extends({}, result.headers ? {
                [actionMatch.route.id]: result.headers
            } : {})
        });
    }
    async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {
        let isRouteRequest = routeMatch != null;
        // Short circuit if we have no loaders to run (queryRoute())
        if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) throw $35fc6c0e1453dea6$var$getInternalRouterError(400, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: routeMatch == null ? void 0 : routeMatch.route.id
        });
        let requestMatches = routeMatch ? [
            routeMatch
        ] : $35fc6c0e1453dea6$var$getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);
        let matchesToLoad = requestMatches.filter((m)=>m.route.loader || m.route.lazy);
        // Short circuit if we have no loaders to run (query())
        if (matchesToLoad.length === 0) return {
            matches: matches,
            // Add a null for all matched routes for proper revalidation on the client
            loaderData: matches.reduce((acc, m)=>Object.assign(acc, {
                    [m.route.id]: null
                }), {}),
            errors: pendingActionError || null,
            statusCode: 200,
            loaderHeaders: {},
            activeDeferreds: null
        };
        let results = await Promise.all([
            ...matchesToLoad.map((match)=>$35fc6c0e1453dea6$var$callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, {
                    isStaticRequest: true,
                    isRouteRequest: isRouteRequest,
                    requestContext: requestContext
                }))
        ]);
        if (request.signal.aborted) {
            let method = isRouteRequest ? "queryRoute" : "query";
            throw new Error(method + "() call aborted: " + request.method + " " + request.url);
        }
        // Process and commit output from loaders
        let activeDeferreds = new Map();
        let context = $35fc6c0e1453dea6$var$processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);
        // Add a null for any non-loader matches for proper revalidation on the client
        let executedLoaders = new Set(matchesToLoad.map((match)=>match.route.id));
        matches.forEach((match)=>{
            if (!executedLoaders.has(match.route.id)) context.loaderData[match.route.id] = null;
        });
        return $35fc6c0e1453dea6$var$_extends({}, context, {
            matches: matches,
            activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
        });
    }
    return {
        dataRoutes: dataRoutes,
        query: query,
        queryRoute: queryRoute
    };
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Helpers
////////////////////////////////////////////////////////////////////////////////
/**
 * Given an existing StaticHandlerContext and an error thrown at render time,
 * provide an updated StaticHandlerContext suitable for a second SSR render
 */ function $35fc6c0e1453dea6$export$fec11da027c70692(routes, context, error) {
    let newContext = $35fc6c0e1453dea6$var$_extends({}, context, {
        statusCode: 500,
        errors: {
            [context._deepestRenderedBoundaryId || routes[0].id]: error
        }
    });
    return newContext;
}
function $35fc6c0e1453dea6$var$isSubmissionNavigation(opts) {
    return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== undefined);
}
function $35fc6c0e1453dea6$var$normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {
    let contextualMatches;
    let activeRouteMatch;
    if (fromRouteId != null && relative !== "path") {
        // Grab matches up to the calling route so our route-relative logic is
        // relative to the correct source route.  When using relative:path,
        // fromRouteId is ignored since that is always relative to the current
        // location path
        contextualMatches = [];
        for (let match of matches){
            contextualMatches.push(match);
            if (match.route.id === fromRouteId) {
                activeRouteMatch = match;
                break;
            }
        }
    } else {
        contextualMatches = matches;
        activeRouteMatch = matches[matches.length - 1];
    }
    // Resolve the relative path
    let path = $35fc6c0e1453dea6$export$cae722b0cc860f13(to ? to : ".", $35fc6c0e1453dea6$export$90ba53ce1c7fdff2(contextualMatches).map((m)=>m.pathnameBase), $35fc6c0e1453dea6$export$b69e3301ce081aa3(location.pathname, basename) || location.pathname, relative === "path");
    // When `to` is not specified we inherit search/hash from the current
    // location, unlike when to="." and we just inherit the path.
    // See https://github.com/remix-run/remix/issues/927
    if (to == null) {
        path.search = location.search;
        path.hash = location.hash;
    }
    // Add an ?index param for matched index routes if we don't already have one
    if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !$35fc6c0e1453dea6$var$hasNakedIndexQuery(path.search)) path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    // If we're operating within a basename, prepend it to the pathname.  If
    // this is a root navigation, then just use the raw basename which allows
    // the basename to have full control over the presence of a trailing slash
    // on root actions
    if (prependBasename && basename !== "/") path.pathname = path.pathname === "/" ? basename : $35fc6c0e1453dea6$export$86d9a7913e44197e([
        basename,
        path.pathname
    ]);
    return $35fc6c0e1453dea6$export$fe53371bee54353d(path);
}
// Normalize navigation options by converting formMethod=GET formData objects to
// URLSearchParams so they behave identically to links with query params
function $35fc6c0e1453dea6$var$normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
    // Return location verbatim on non-submission navigations
    if (!opts || !$35fc6c0e1453dea6$var$isSubmissionNavigation(opts)) return {
        path: path
    };
    if (opts.formMethod && !$35fc6c0e1453dea6$var$isValidMethod(opts.formMethod)) return {
        path: path,
        error: $35fc6c0e1453dea6$var$getInternalRouterError(405, {
            method: opts.formMethod
        })
    };
    let getInvalidBodyError = ()=>({
            path: path,
            error: $35fc6c0e1453dea6$var$getInternalRouterError(400, {
                type: "invalid-body"
            })
        });
    // Create a Submission on non-GET navigations
    let rawFormMethod = opts.formMethod || "get";
    let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
    let formAction = $35fc6c0e1453dea6$var$stripHashFromPath(path);
    if (opts.body !== undefined) {
        if (opts.formEncType === "text/plain") {
            // text only support POST/PUT/PATCH/DELETE submissions
            if (!$35fc6c0e1453dea6$var$isMutationMethod(formMethod)) return getInvalidBodyError();
            let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
            Array.from(opts.body.entries()).reduce((acc, _ref3)=>{
                let [name, value] = _ref3;
                return "" + acc + name + "=" + value + "\n";
            }, "") : String(opts.body);
            return {
                path: path,
                submission: {
                    formMethod: formMethod,
                    formAction: formAction,
                    formEncType: opts.formEncType,
                    formData: undefined,
                    json: undefined,
                    text: text
                }
            };
        } else if (opts.formEncType === "application/json") {
            // json only supports POST/PUT/PATCH/DELETE submissions
            if (!$35fc6c0e1453dea6$var$isMutationMethod(formMethod)) return getInvalidBodyError();
            try {
                let json = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
                return {
                    path: path,
                    submission: {
                        formMethod: formMethod,
                        formAction: formAction,
                        formEncType: opts.formEncType,
                        formData: undefined,
                        json: json,
                        text: undefined
                    }
                };
            } catch (e) {
                return getInvalidBodyError();
            }
        }
    }
    $35fc6c0e1453dea6$export$3e9cee6b33872309(typeof FormData === "function", "FormData is not available in this environment");
    let searchParams;
    let formData;
    if (opts.formData) {
        searchParams = $35fc6c0e1453dea6$var$convertFormDataToSearchParams(opts.formData);
        formData = opts.formData;
    } else if (opts.body instanceof FormData) {
        searchParams = $35fc6c0e1453dea6$var$convertFormDataToSearchParams(opts.body);
        formData = opts.body;
    } else if (opts.body instanceof URLSearchParams) {
        searchParams = opts.body;
        formData = $35fc6c0e1453dea6$var$convertSearchParamsToFormData(searchParams);
    } else if (opts.body == null) {
        searchParams = new URLSearchParams();
        formData = new FormData();
    } else try {
        searchParams = new URLSearchParams(opts.body);
        formData = $35fc6c0e1453dea6$var$convertSearchParamsToFormData(searchParams);
    } catch (e) {
        return getInvalidBodyError();
    }
    let submission = {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
        formData: formData,
        json: undefined,
        text: undefined
    };
    if ($35fc6c0e1453dea6$var$isMutationMethod(submission.formMethod)) return {
        path: path,
        submission: submission
    };
    // Flatten submission onto URLSearchParams for GET submissions
    let parsedPath = $35fc6c0e1453dea6$export$8ccf933b0513f8d0(path);
    // On GET navigation submissions we can drop the ?index param from the
    // resulting location since all loaders will run.  But fetcher GET submissions
    // only run a single loader so we need to preserve any incoming ?index params
    if (isFetcher && parsedPath.search && $35fc6c0e1453dea6$var$hasNakedIndexQuery(parsedPath.search)) searchParams.append("index", "");
    parsedPath.search = "?" + searchParams;
    return {
        path: $35fc6c0e1453dea6$export$fe53371bee54353d(parsedPath),
        submission: submission
    };
}
// Filter out all routes below any caught error as they aren't going to
// render so we don't need to load them
function $35fc6c0e1453dea6$var$getLoaderMatchesUntilBoundary(matches, boundaryId) {
    let boundaryMatches = matches;
    if (boundaryId) {
        let index = matches.findIndex((m)=>m.route.id === boundaryId);
        if (index >= 0) boundaryMatches = matches.slice(0, index);
    }
    return boundaryMatches;
}
function $35fc6c0e1453dea6$var$getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {
    let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;
    let currentUrl = history.createURL(state.location);
    let nextUrl = history.createURL(location);
    // Pick navigation matches that are net-new or qualify for revalidation
    let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;
    let boundaryMatches = $35fc6c0e1453dea6$var$getLoaderMatchesUntilBoundary(matches, boundaryId);
    let navigationMatches = boundaryMatches.filter((match, index)=>{
        if (match.route.lazy) // We haven't loaded this route yet so we don't know if it's got a loader!
        return true;
        if (match.route.loader == null) return false;
        // Always call the loader on new route instances and pending defer cancellations
        if ($35fc6c0e1453dea6$var$isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some((id)=>id === match.route.id)) return true;
        // This is the default implementation for when we revalidate.  If the route
        // provides it's own implementation, then we give them full control but
        // provide this value so they can leverage it if needed after they check
        // their own specific use cases
        let currentRouteMatch = state.matches[index];
        let nextRouteMatch = match;
        return $35fc6c0e1453dea6$var$shouldRevalidateLoader(match, $35fc6c0e1453dea6$var$_extends({
            currentUrl: currentUrl,
            currentParams: currentRouteMatch.params,
            nextUrl: nextUrl,
            nextParams: nextRouteMatch.params
        }, submission, {
            actionResult: actionResult,
            defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
            isRevalidationRequired || // Clicked the same link, resubmitted a GET form
            currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
            currentUrl.search !== nextUrl.search || $35fc6c0e1453dea6$var$isNewRouteInstance(currentRouteMatch, nextRouteMatch)
        }));
    });
    // Pick fetcher.loads that need to be revalidated
    let revalidatingFetchers = [];
    fetchLoadMatches.forEach((f, key)=>{
        // Don't revalidate if fetcher won't be present in the subsequent render
        if (!matches.some((m)=>m.route.id === f.routeId)) return;
        let fetcherMatches = $35fc6c0e1453dea6$export$2708184779ceb39d(routesToUse, f.path, basename);
        // If the fetcher path no longer matches, push it in with null matches so
        // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is
        // currently only a use-case for Remix HMR where the route tree can change
        // at runtime and remove a route previously loaded via a fetcher
        if (!fetcherMatches) {
            revalidatingFetchers.push({
                key: key,
                routeId: f.routeId,
                path: f.path,
                matches: null,
                match: null,
                controller: null
            });
            return;
        }
        // Revalidating fetchers are decoupled from the route matches since they
        // load from a static href.  They revalidate based on explicit revalidation
        // (submission, useRevalidator, or X-Remix-Revalidate)
        let fetcher = state.fetchers.get(key);
        let fetcherMatch = $35fc6c0e1453dea6$var$getTargetMatch(fetcherMatches, f.path);
        let shouldRevalidate = false;
        if (fetchRedirectIds.has(key)) // Never trigger a revalidation of an actively redirecting fetcher
        shouldRevalidate = false;
        else if (cancelledFetcherLoads.includes(key)) // Always revalidate if the fetcher was cancelled
        shouldRevalidate = true;
        else if (fetcher && fetcher.state !== "idle" && fetcher.data === undefined) // If the fetcher hasn't ever completed loading yet, then this isn't a
        // revalidation, it would just be a brand new load if an explicit
        // revalidation is required
        shouldRevalidate = isRevalidationRequired;
        else // Otherwise fall back on any user-defined shouldRevalidate, defaulting
        // to explicit revalidations only
        shouldRevalidate = $35fc6c0e1453dea6$var$shouldRevalidateLoader(fetcherMatch, $35fc6c0e1453dea6$var$_extends({
            currentUrl: currentUrl,
            currentParams: state.matches[state.matches.length - 1].params,
            nextUrl: nextUrl,
            nextParams: matches[matches.length - 1].params
        }, submission, {
            actionResult: actionResult,
            defaultShouldRevalidate: isRevalidationRequired
        }));
        if (shouldRevalidate) revalidatingFetchers.push({
            key: key,
            routeId: f.routeId,
            path: f.path,
            matches: fetcherMatches,
            match: fetcherMatch,
            controller: new AbortController()
        });
    });
    return [
        navigationMatches,
        revalidatingFetchers
    ];
}
function $35fc6c0e1453dea6$var$isNewLoader(currentLoaderData, currentMatch, match) {
    let isNew = // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match.route.id !== currentMatch.route.id;
    // Handle the case that we don't have data for a re-used route, potentially
    // from a prior error or from a cancelled pending deferred
    let isMissingData = currentLoaderData[match.route.id] === undefined;
    // Always load if this is a net-new route or we don't yet have data
    return isNew || isMissingData;
}
function $35fc6c0e1453dea6$var$isNewRouteInstance(currentMatch, match) {
    let currentPath = currentMatch.route.path;
    return(// param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]);
}
function $35fc6c0e1453dea6$var$shouldRevalidateLoader(loaderMatch, arg) {
    if (loaderMatch.route.shouldRevalidate) {
        let routeChoice = loaderMatch.route.shouldRevalidate(arg);
        if (typeof routeChoice === "boolean") return routeChoice;
    }
    return arg.defaultShouldRevalidate;
}
/**
 * Execute route.lazy() methods to lazily load route modules (loader, action,
 * shouldRevalidate) and update the routeManifest in place which shares objects
 * with dataRoutes so those get updated as well.
 */ async function $35fc6c0e1453dea6$var$loadLazyRouteModule(route, mapRouteProperties, manifest) {
    if (!route.lazy) return;
    let lazyRoute = await route.lazy();
    // If the lazy route function was executed and removed by another parallel
    // call then we can return - first lazy() to finish wins because the return
    // value of lazy is expected to be static
    if (!route.lazy) return;
    let routeToUpdate = manifest[route.id];
    $35fc6c0e1453dea6$export$3e9cee6b33872309(routeToUpdate, "No route found in manifest");
    // Update the route in place.  This should be safe because there's no way
    // we could yet be sitting on this route as we can't get there without
    // resolving lazy() first.
    //
    // This is different than the HMR "update" use-case where we may actively be
    // on the route being updated.  The main concern boils down to "does this
    // mutation affect any ongoing navigations or any current state.matches
    // values?".  If not, it should be safe to update in place.
    let routeUpdates = {};
    for(let lazyRouteProperty in lazyRoute){
        let staticRouteValue = routeToUpdate[lazyRouteProperty];
        let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based
        // on the route updates
        lazyRouteProperty !== "hasErrorBoundary";
        $35fc6c0e1453dea6$export$c0e02632e14916fd(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" ' + "defined but its lazy function is also returning a value for this property. " + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
        if (!isPropertyStaticallyDefined && !$35fc6c0e1453dea6$var$immutableRouteKeys.has(lazyRouteProperty)) routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
    }
    // Mutate the route with the provided updates.  Do this first so we pass
    // the updated version to mapRouteProperties
    Object.assign(routeToUpdate, routeUpdates);
    // Mutate the `hasErrorBoundary` property on the route based on the route
    // updates and remove the `lazy` function so we don't resolve the lazy
    // route again.
    Object.assign(routeToUpdate, $35fc6c0e1453dea6$var$_extends({}, mapRouteProperties(routeToUpdate), {
        lazy: undefined
    }));
}
async function $35fc6c0e1453dea6$var$callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {
    if (opts === void 0) opts = {};
    let resultType;
    let result;
    let onReject;
    let runHandler = (handler)=>{
        // Setup a promise we can race against so that abort signals short circuit
        let reject;
        let abortPromise = new Promise((_, r)=>reject = r);
        onReject = ()=>reject();
        request.signal.addEventListener("abort", onReject);
        return Promise.race([
            handler({
                request: request,
                params: match.params,
                context: opts.requestContext
            }),
            abortPromise
        ]);
    };
    try {
        let handler = match.route[type];
        if (match.route.lazy) {
            if (handler) {
                // Run statically defined handler in parallel with lazy()
                let handlerError;
                let values = await Promise.all([
                    // If the handler throws, don't let it immediately bubble out,
                    // since we need to let the lazy() execution finish so we know if this
                    // route has a boundary that can handle the error
                    runHandler(handler).catch((e)=>{
                        handlerError = e;
                    }),
                    $35fc6c0e1453dea6$var$loadLazyRouteModule(match.route, mapRouteProperties, manifest)
                ]);
                if (handlerError) throw handlerError;
                result = values[0];
            } else {
                // Load lazy route module, then run any returned handler
                await $35fc6c0e1453dea6$var$loadLazyRouteModule(match.route, mapRouteProperties, manifest);
                handler = match.route[type];
                if (handler) // Handler still run even if we got interrupted to maintain consistency
                // with un-abortable behavior of handler execution on non-lazy or
                // previously-lazy-loaded routes
                result = await runHandler(handler);
                else if (type === "action") {
                    let url = new URL(request.url);
                    let pathname = url.pathname + url.search;
                    throw $35fc6c0e1453dea6$var$getInternalRouterError(405, {
                        method: request.method,
                        pathname: pathname,
                        routeId: match.route.id
                    });
                } else // lazy() route has no loader to run.  Short circuit here so we don't
                // hit the invariant below that errors on returning undefined.
                return {
                    type: $35fc6c0e1453dea6$var$ResultType.data,
                    data: undefined
                };
            }
        } else if (!handler) {
            let url = new URL(request.url);
            let pathname = url.pathname + url.search;
            throw $35fc6c0e1453dea6$var$getInternalRouterError(404, {
                pathname: pathname
            });
        } else result = await runHandler(handler);
        $35fc6c0e1453dea6$export$3e9cee6b33872309(result !== undefined, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
    } catch (e) {
        resultType = $35fc6c0e1453dea6$var$ResultType.error;
        result = e;
    } finally{
        if (onReject) request.signal.removeEventListener("abort", onReject);
    }
    if ($35fc6c0e1453dea6$var$isResponse(result)) {
        let status = result.status;
        // Process redirects
        if ($35fc6c0e1453dea6$var$redirectStatusCodes.has(status)) {
            let location = result.headers.get("Location");
            $35fc6c0e1453dea6$export$3e9cee6b33872309(location, "Redirects returned/thrown from loaders/actions must have a Location header");
            // Support relative routing in internal redirects
            if (!$35fc6c0e1453dea6$var$ABSOLUTE_URL_REGEX.test(location)) location = $35fc6c0e1453dea6$var$normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);
            else if (!opts.isStaticRequest) {
                // Strip off the protocol+origin for same-origin + same-basename absolute
                // redirects. If this is a static request, we can let it go back to the
                // browser as-is
                let currentUrl = new URL(request.url);
                let url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);
                let isSameBasename = $35fc6c0e1453dea6$export$b69e3301ce081aa3(url.pathname, basename) != null;
                if (url.origin === currentUrl.origin && isSameBasename) location = url.pathname + url.search + url.hash;
            }
            // Don't process redirects in the router during static requests requests.
            // Instead, throw the Response and let the server handle it with an HTTP
            // redirect.  We also update the Location header in place in this flow so
            // basename and relative routing is taken into account
            if (opts.isStaticRequest) {
                result.headers.set("Location", location);
                throw result;
            }
            return {
                type: $35fc6c0e1453dea6$var$ResultType.redirect,
                status: status,
                location: location,
                revalidate: result.headers.get("X-Remix-Revalidate") !== null,
                reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
            };
        }
        // For SSR single-route requests, we want to hand Responses back directly
        // without unwrapping.  We do this with the QueryRouteResponse wrapper
        // interface so we can know whether it was returned or thrown
        if (opts.isRouteRequest) {
            let queryRouteResponse = {
                type: resultType === $35fc6c0e1453dea6$var$ResultType.error ? $35fc6c0e1453dea6$var$ResultType.error : $35fc6c0e1453dea6$var$ResultType.data,
                response: result
            };
            throw queryRouteResponse;
        }
        let data;
        let contentType = result.headers.get("Content-Type");
        // Check between word boundaries instead of startsWith() due to the last
        // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type
        if (contentType && /\bapplication\/json\b/.test(contentType)) data = await result.json();
        else data = await result.text();
        if (resultType === $35fc6c0e1453dea6$var$ResultType.error) return {
            type: resultType,
            error: new $35fc6c0e1453dea6$export$6c6580e81da25755(status, result.statusText, data),
            headers: result.headers
        };
        return {
            type: $35fc6c0e1453dea6$var$ResultType.data,
            data: data,
            statusCode: result.status,
            headers: result.headers
        };
    }
    if (resultType === $35fc6c0e1453dea6$var$ResultType.error) return {
        type: resultType,
        error: result
    };
    if ($35fc6c0e1453dea6$export$fbcedacb60443473(result)) {
        var _result$init, _result$init2;
        return {
            type: $35fc6c0e1453dea6$var$ResultType.deferred,
            deferredData: result,
            statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
            headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
        };
    }
    return {
        type: $35fc6c0e1453dea6$var$ResultType.data,
        data: result
    };
}
// Utility method for creating the Request instances for loaders/actions during
// client-side navigations and fetches.  During SSR we will always have a
// Request instance from the static handler (query/queryRoute)
function $35fc6c0e1453dea6$var$createClientSideRequest(history, location, signal, submission) {
    let url = history.createURL($35fc6c0e1453dea6$var$stripHashFromPath(location)).toString();
    let init = {
        signal: signal
    };
    if (submission && $35fc6c0e1453dea6$var$isMutationMethod(submission.formMethod)) {
        let { formMethod: formMethod, formEncType: formEncType } = submission;
        // Didn't think we needed this but it turns out unlike other methods, patch
        // won't be properly normalized to uppercase and results in a 405 error.
        // See: https://fetch.spec.whatwg.org/#concept-method
        init.method = formMethod.toUpperCase();
        if (formEncType === "application/json") {
            init.headers = new Headers({
                "Content-Type": formEncType
            });
            init.body = JSON.stringify(submission.json);
        } else if (formEncType === "text/plain") // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = submission.text;
        else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = $35fc6c0e1453dea6$var$convertFormDataToSearchParams(submission.formData);
        else // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = submission.formData;
    }
    return new Request(url, init);
}
function $35fc6c0e1453dea6$var$convertFormDataToSearchParams(formData) {
    let searchParams = new URLSearchParams();
    for (let [key, value] of formData.entries())// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs
    searchParams.append(key, typeof value === "string" ? value : value.name);
    return searchParams;
}
function $35fc6c0e1453dea6$var$convertSearchParamsToFormData(searchParams) {
    let formData = new FormData();
    for (let [key, value] of searchParams.entries())formData.append(key, value);
    return formData;
}
function $35fc6c0e1453dea6$var$processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
    // Fill in loaderData/errors from our loaders
    let loaderData = {};
    let errors = null;
    let statusCode;
    let foundError = false;
    let loaderHeaders = {};
    // Process loader results into state.loaderData/state.errors
    results.forEach((result, index)=>{
        let id = matchesToLoad[index].route.id;
        $35fc6c0e1453dea6$export$3e9cee6b33872309(!$35fc6c0e1453dea6$var$isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
        if ($35fc6c0e1453dea6$var$isErrorResult(result)) {
            // Look upwards from the matched route for the closest ancestor
            // error boundary, defaulting to the root match
            let boundaryMatch = $35fc6c0e1453dea6$var$findNearestBoundary(matches, id);
            let error = result.error;
            // If we have a pending action error, we report it at the highest-route
            // that throws a loader error, and then clear it out to indicate that
            // it was consumed
            if (pendingError) {
                error = Object.values(pendingError)[0];
                pendingError = undefined;
            }
            errors = errors || {};
            // Prefer higher error values if lower errors bubble to the same boundary
            if (errors[boundaryMatch.route.id] == null) errors[boundaryMatch.route.id] = error;
            // Clear our any prior loaderData for the throwing route
            loaderData[id] = undefined;
            // Once we find our first (highest) error, we set the status code and
            // prevent deeper status codes from overriding
            if (!foundError) {
                foundError = true;
                statusCode = $35fc6c0e1453dea6$export$972111febbeef05b(result.error) ? result.error.status : 500;
            }
            if (result.headers) loaderHeaders[id] = result.headers;
        } else {
            if ($35fc6c0e1453dea6$var$isDeferredResult(result)) {
                activeDeferreds.set(id, result.deferredData);
                loaderData[id] = result.deferredData.data;
            } else loaderData[id] = result.data;
            // Error status codes always override success status codes, but if all
            // loaders are successful we take the deepest status code.
            if (result.statusCode != null && result.statusCode !== 200 && !foundError) statusCode = result.statusCode;
            if (result.headers) loaderHeaders[id] = result.headers;
        }
    });
    // If we didn't consume the pending action error (i.e., all loaders
    // resolved), then consume it here.  Also clear out any loaderData for the
    // throwing route
    if (pendingError) {
        errors = pendingError;
        loaderData[Object.keys(pendingError)[0]] = undefined;
    }
    return {
        loaderData: loaderData,
        errors: errors,
        statusCode: statusCode || 200,
        loaderHeaders: loaderHeaders
    };
}
function $35fc6c0e1453dea6$var$processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
    let { loaderData: loaderData, errors: errors } = $35fc6c0e1453dea6$var$processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
    // Process results from our revalidating fetchers
    for(let index = 0; index < revalidatingFetchers.length; index++){
        let { key: key, match: match, controller: controller } = revalidatingFetchers[index];
        $35fc6c0e1453dea6$export$3e9cee6b33872309(fetcherResults !== undefined && fetcherResults[index] !== undefined, "Did not find corresponding fetcher result");
        let result = fetcherResults[index];
        // Process fetcher non-redirect errors
        if (controller && controller.signal.aborted) continue;
        else if ($35fc6c0e1453dea6$var$isErrorResult(result)) {
            let boundaryMatch = $35fc6c0e1453dea6$var$findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
            if (!(errors && errors[boundaryMatch.route.id])) errors = $35fc6c0e1453dea6$var$_extends({}, errors, {
                [boundaryMatch.route.id]: result.error
            });
            state.fetchers.delete(key);
        } else if ($35fc6c0e1453dea6$var$isRedirectResult(result)) // Should never get here, redirects should get processed above, but we
        // keep this to type narrow to a success result in the else
        $35fc6c0e1453dea6$export$3e9cee6b33872309(false, "Unhandled fetcher revalidation redirect");
        else if ($35fc6c0e1453dea6$var$isDeferredResult(result)) // Should never get here, deferred data should be awaited for fetchers
        // in resolveDeferredResults
        $35fc6c0e1453dea6$export$3e9cee6b33872309(false, "Unhandled fetcher deferred data");
        else {
            let doneFetcher = $35fc6c0e1453dea6$var$getDoneFetcher(result.data);
            state.fetchers.set(key, doneFetcher);
        }
    }
    return {
        loaderData: loaderData,
        errors: errors
    };
}
function $35fc6c0e1453dea6$var$mergeLoaderData(loaderData, newLoaderData, matches, errors) {
    let mergedLoaderData = $35fc6c0e1453dea6$var$_extends({}, newLoaderData);
    for (let match of matches){
        let id = match.route.id;
        if (newLoaderData.hasOwnProperty(id)) {
            if (newLoaderData[id] !== undefined) mergedLoaderData[id] = newLoaderData[id];
        } else if (loaderData[id] !== undefined && match.route.loader) // Preserve existing keys not included in newLoaderData and where a loader
        // wasn't removed by HMR
        mergedLoaderData[id] = loaderData[id];
        if (errors && errors.hasOwnProperty(id)) break;
    }
    return mergedLoaderData;
}
// Find the nearest error boundary, looking upwards from the leaf route (or the
// route specified by routeId) for the closest ancestor error boundary,
// defaulting to the root match
function $35fc6c0e1453dea6$var$findNearestBoundary(matches, routeId) {
    let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m)=>m.route.id === routeId) + 1) : [
        ...matches
    ];
    return eligibleMatches.reverse().find((m)=>m.route.hasErrorBoundary === true) || matches[0];
}
function $35fc6c0e1453dea6$var$getShortCircuitMatches(routes) {
    // Prefer a root layout route if present, otherwise shim in a route object
    let route = routes.length === 1 ? routes[0] : routes.find((r)=>r.index || !r.path || r.path === "/") || {
        id: "__shim-error-route__"
    };
    return {
        matches: [
            {
                params: {},
                pathname: "",
                pathnameBase: "",
                route: route
            }
        ],
        route: route
    };
}
function $35fc6c0e1453dea6$var$getInternalRouterError(status, _temp4) {
    let { pathname: pathname, routeId: routeId, method: method, type: type } = _temp4 === void 0 ? {} : _temp4;
    let statusText = "Unknown Server Error";
    let errorMessage = "Unknown @remix-run/router error";
    if (status === 400) {
        statusText = "Bad Request";
        if (method && pathname && routeId) errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
        else if (type === "defer-action") errorMessage = "defer() is not supported in actions";
        else if (type === "invalid-body") errorMessage = "Unable to encode submission body";
    } else if (status === 403) {
        statusText = "Forbidden";
        errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
    } else if (status === 404) {
        statusText = "Not Found";
        errorMessage = 'No route matches URL "' + pathname + '"';
    } else if (status === 405) {
        statusText = "Method Not Allowed";
        if (method && pathname && routeId) errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
        else if (method) errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
    }
    return new $35fc6c0e1453dea6$export$6c6580e81da25755(status || 500, statusText, new Error(errorMessage), true);
}
// Find any returned redirect errors, starting from the lowest match
function $35fc6c0e1453dea6$var$findRedirect(results) {
    for(let i = results.length - 1; i >= 0; i--){
        let result = results[i];
        if ($35fc6c0e1453dea6$var$isRedirectResult(result)) return {
            result: result,
            idx: i
        };
    }
}
function $35fc6c0e1453dea6$var$stripHashFromPath(path) {
    let parsedPath = typeof path === "string" ? $35fc6c0e1453dea6$export$8ccf933b0513f8d0(path) : path;
    return $35fc6c0e1453dea6$export$fe53371bee54353d($35fc6c0e1453dea6$var$_extends({}, parsedPath, {
        hash: ""
    }));
}
function $35fc6c0e1453dea6$var$isHashChangeOnly(a, b) {
    if (a.pathname !== b.pathname || a.search !== b.search) return false;
    if (a.hash === "") // /page -> /page#hash
    return b.hash !== "";
    else if (a.hash === b.hash) // /page#hash -> /page#hash
    return true;
    else if (b.hash !== "") // /page#hash -> /page#other
    return true;
    // If the hash is removed the browser will re-perform a request to the server
    // /page#hash -> /page
    return false;
}
function $35fc6c0e1453dea6$var$isDeferredResult(result) {
    return result.type === $35fc6c0e1453dea6$var$ResultType.deferred;
}
function $35fc6c0e1453dea6$var$isErrorResult(result) {
    return result.type === $35fc6c0e1453dea6$var$ResultType.error;
}
function $35fc6c0e1453dea6$var$isRedirectResult(result) {
    return (result && result.type) === $35fc6c0e1453dea6$var$ResultType.redirect;
}
function $35fc6c0e1453dea6$export$fbcedacb60443473(value) {
    let deferred = value;
    return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
}
function $35fc6c0e1453dea6$var$isResponse(value) {
    return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
}
function $35fc6c0e1453dea6$var$isRedirectResponse(result) {
    if (!$35fc6c0e1453dea6$var$isResponse(result)) return false;
    let status = result.status;
    let location = result.headers.get("Location");
    return status >= 300 && status <= 399 && location != null;
}
function $35fc6c0e1453dea6$var$isQueryRouteResponse(obj) {
    return obj && $35fc6c0e1453dea6$var$isResponse(obj.response) && (obj.type === $35fc6c0e1453dea6$var$ResultType.data || obj.type === $35fc6c0e1453dea6$var$ResultType.error);
}
function $35fc6c0e1453dea6$var$isValidMethod(method) {
    return $35fc6c0e1453dea6$var$validRequestMethods.has(method.toLowerCase());
}
function $35fc6c0e1453dea6$var$isMutationMethod(method) {
    return $35fc6c0e1453dea6$var$validMutationMethods.has(method.toLowerCase());
}
async function $35fc6c0e1453dea6$var$resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
    for(let index = 0; index < results.length; index++){
        let result = results[index];
        let match = matchesToLoad[index];
        // If we don't have a match, then we can have a deferred result to do
        // anything with.  This is for revalidating fetchers where the route was
        // removed during HMR
        if (!match) continue;
        let currentMatch = currentMatches.find((m)=>m.route.id === match.route.id);
        let isRevalidatingLoader = currentMatch != null && !$35fc6c0e1453dea6$var$isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;
        if ($35fc6c0e1453dea6$var$isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
            // Note: we do not have to touch activeDeferreds here since we race them
            // against the signal in resolveDeferredData and they'll get aborted
            // there if needed
            let signal = signals[index];
            $35fc6c0e1453dea6$export$3e9cee6b33872309(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
            await $35fc6c0e1453dea6$var$resolveDeferredData(result, signal, isFetcher).then((result)=>{
                if (result) results[index] = result || results[index];
            });
        }
    }
}
async function $35fc6c0e1453dea6$var$resolveDeferredData(result, signal, unwrap) {
    if (unwrap === void 0) unwrap = false;
    let aborted = await result.deferredData.resolveData(signal);
    if (aborted) return;
    if (unwrap) try {
        return {
            type: $35fc6c0e1453dea6$var$ResultType.data,
            data: result.deferredData.unwrappedData
        };
    } catch (e) {
        // Handle any TrackedPromise._error values encountered while unwrapping
        return {
            type: $35fc6c0e1453dea6$var$ResultType.error,
            error: e
        };
    }
    return {
        type: $35fc6c0e1453dea6$var$ResultType.data,
        data: result.deferredData.data
    };
}
function $35fc6c0e1453dea6$var$hasNakedIndexQuery(search) {
    return new URLSearchParams(search).getAll("index").some((v)=>v === "");
}
function $35fc6c0e1453dea6$var$getTargetMatch(matches, location) {
    let search = typeof location === "string" ? $35fc6c0e1453dea6$export$8ccf933b0513f8d0(location).search : location.search;
    if (matches[matches.length - 1].route.index && $35fc6c0e1453dea6$var$hasNakedIndexQuery(search || "")) // Return the leaf index route when index is present
    return matches[matches.length - 1];
    // Otherwise grab the deepest "path contributing" match (ignoring index and
    // pathless layout routes)
    let pathMatches = $35fc6c0e1453dea6$export$90ba53ce1c7fdff2(matches);
    return pathMatches[pathMatches.length - 1];
}
function $35fc6c0e1453dea6$var$getSubmissionFromNavigation(navigation) {
    let { formMethod: formMethod, formAction: formAction, formEncType: formEncType, text: text, formData: formData, json: json } = navigation;
    if (!formMethod || !formAction || !formEncType) return;
    if (text != null) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: undefined,
        json: undefined,
        text: text
    };
    else if (formData != null) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: formData,
        json: undefined,
        text: undefined
    };
    else if (json !== undefined) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: undefined,
        json: json,
        text: undefined
    };
}
function $35fc6c0e1453dea6$var$getLoadingNavigation(location, submission) {
    if (submission) {
        let navigation = {
            state: "loading",
            location: location,
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text
        };
        return navigation;
    } else {
        let navigation = {
            state: "loading",
            location: location,
            formMethod: undefined,
            formAction: undefined,
            formEncType: undefined,
            formData: undefined,
            json: undefined,
            text: undefined
        };
        return navigation;
    }
}
function $35fc6c0e1453dea6$var$getSubmittingNavigation(location, submission) {
    let navigation = {
        state: "submitting",
        location: location,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
    };
    return navigation;
}
function $35fc6c0e1453dea6$var$getLoadingFetcher(submission, data) {
    if (submission) {
        let fetcher = {
            state: "loading",
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
            data: data
        };
        return fetcher;
    } else {
        let fetcher = {
            state: "loading",
            formMethod: undefined,
            formAction: undefined,
            formEncType: undefined,
            formData: undefined,
            json: undefined,
            text: undefined,
            data: data
        };
        return fetcher;
    }
}
function $35fc6c0e1453dea6$var$getSubmittingFetcher(submission, existingFetcher) {
    let fetcher = {
        state: "submitting",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data: existingFetcher ? existingFetcher.data : undefined
    };
    return fetcher;
}
function $35fc6c0e1453dea6$var$getDoneFetcher(data) {
    let fetcher = {
        state: "idle",
        formMethod: undefined,
        formAction: undefined,
        formEncType: undefined,
        formData: undefined,
        json: undefined,
        text: undefined,
        data: data
    };
    return fetcher;
}
function $35fc6c0e1453dea6$var$restoreAppliedTransitions(_window, transitions) {
    try {
        let sessionPositions = _window.sessionStorage.getItem($35fc6c0e1453dea6$var$TRANSITIONS_STORAGE_KEY);
        if (sessionPositions) {
            let json = JSON.parse(sessionPositions);
            for (let [k, v] of Object.entries(json || {}))if (v && Array.isArray(v)) transitions.set(k, new Set(v || []));
        }
    } catch (e) {
    // no-op, use default empty object
    }
}
function $35fc6c0e1453dea6$var$persistAppliedTransitions(_window, transitions) {
    if (transitions.size > 0) {
        let json = {};
        for (let [k, v] of transitions)json[k] = [
            ...v
        ];
        try {
            _window.sessionStorage.setItem($35fc6c0e1453dea6$var$TRANSITIONS_STORAGE_KEY, JSON.stringify(json));
        } catch (error) {
            $35fc6c0e1453dea6$export$c0e02632e14916fd(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
        }
    }
}

/**
 * React Router v6.17.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ 
var $4rFIf = parcelRequire("4rFIf");

function $178516013a5ef3e1$var$_extends() {
    $178516013a5ef3e1$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $178516013a5ef3e1$var$_extends.apply(this, arguments);
}
// Create react-specific types from the agnostic types in @remix-run/router to
// export from react-router
const $178516013a5ef3e1$export$3add0d5dce533e2e = /*#__PURE__*/ $4rFIf.createContext(null);
const $178516013a5ef3e1$export$145dfa71566a64dc = /*#__PURE__*/ $4rFIf.createContext(null);
const $178516013a5ef3e1$var$AwaitContext = /*#__PURE__*/ $4rFIf.createContext(null);
/**
 * A Navigator is a "location changer"; it's how you get to different locations.
 *
 * Every history instance conforms to the Navigator interface, but the
 * distinction is useful primarily when it comes to the low-level `<Router>` API
 * where both the location and a navigator must be provided separately in order
 * to avoid "tearing" that may occur in a suspense-enabled app if the action
 * and/or location were to be read directly from the history instance.
 */ const $178516013a5ef3e1$export$26749e8557646306 = /*#__PURE__*/ $4rFIf.createContext(null);
const $178516013a5ef3e1$export$c7914228fb69b0f5 = /*#__PURE__*/ $4rFIf.createContext(null);
const $178516013a5ef3e1$export$9072aa6dd1f93057 = /*#__PURE__*/ $4rFIf.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
});
const $178516013a5ef3e1$var$RouteErrorContext = /*#__PURE__*/ $4rFIf.createContext(null);
/**
 * Returns the full href for the given "to" value. This is useful for building
 * custom links that are also accessible and preserve right-click behavior.
 *
 * @see https://reactrouter.com/hooks/use-href
 */ function $178516013a5ef3e1$export$b66bb29c5006f12f(to, _temp) {
    let { relative: relative } = _temp === void 0 ? {} : _temp;
    !$178516013a5ef3e1$export$9c954a9d03d32f4a() && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let { basename: basename, navigator: navigator } = $4rFIf.useContext($178516013a5ef3e1$export$26749e8557646306);
    let { hash: hash, pathname: pathname, search: search } = $178516013a5ef3e1$export$e75d2a2d1b3c245b(to, {
        relative: relative
    });
    let joinedPathname = pathname;
    // If we're operating within a basename, prepend it to the pathname prior
    // to creating the href.  If this is a root navigation, then just use the raw
    // basename which allows the basename to have full control over the presence
    // of a trailing slash on root links
    if (basename !== "/") joinedPathname = pathname === "/" ? basename : (0, $35fc6c0e1453dea6$export$86d9a7913e44197e)([
        basename,
        pathname
    ]);
    return navigator.createHref({
        pathname: joinedPathname,
        search: search,
        hash: hash
    });
}
/**
 * Returns true if this component is a descendant of a `<Router>`.
 *
 * @see https://reactrouter.com/hooks/use-in-router-context
 */ function $178516013a5ef3e1$export$9c954a9d03d32f4a() {
    return $4rFIf.useContext($178516013a5ef3e1$export$c7914228fb69b0f5) != null;
}
/**
 * Returns the current location object, which represents the current URL in web
 * browsers.
 *
 * Note: If you're using this it may mean you're doing some of your own
 * "routing" in your app, and we'd like to know what your use case is. We may
 * be able to provide something higher-level to better suit your needs.
 *
 * @see https://reactrouter.com/hooks/use-location
 */ function $178516013a5ef3e1$export$45d76561a5302f2b() {
    !$178516013a5ef3e1$export$9c954a9d03d32f4a() && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return $4rFIf.useContext($178516013a5ef3e1$export$c7914228fb69b0f5).location;
}
/**
 * Returns the current navigation action which describes how the router came to
 * the current location, either by a pop, push, or replace on the history stack.
 *
 * @see https://reactrouter.com/hooks/use-navigation-type
 */ function $178516013a5ef3e1$export$1b3f31771c5d07c() {
    return $4rFIf.useContext($178516013a5ef3e1$export$c7914228fb69b0f5).navigationType;
}
/**
 * Returns a PathMatch object if the given pattern matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * `<NavLink>`.
 *
 * @see https://reactrouter.com/hooks/use-match
 */ function $178516013a5ef3e1$export$6c330e8992e8a295(pattern) {
    !$178516013a5ef3e1$export$9c954a9d03d32f4a() && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let { pathname: pathname } = $178516013a5ef3e1$export$45d76561a5302f2b();
    return $4rFIf.useMemo(()=>(0, $35fc6c0e1453dea6$export$81336c211d5ff295)(pattern, pathname), [
        pathname,
        pattern
    ]);
}
/**
 * The interface for the navigate() function returned from useNavigate().
 */ const $178516013a5ef3e1$var$navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
// Mute warnings for calls to useNavigate in SSR environments
function $178516013a5ef3e1$var$useIsomorphicLayoutEffect(cb) {
    let isStatic = $4rFIf.useContext($178516013a5ef3e1$export$26749e8557646306).static;
    if (!isStatic) // We should be able to get rid of this once react 18.3 is released
    // See: https://github.com/facebook/react/pull/26395
    // eslint-disable-next-line react-hooks/rules-of-hooks
    $4rFIf.useLayoutEffect(cb);
}
/**
 * Returns an imperative method for changing the location. Used by `<Link>`s, but
 * may also be used by other elements to change the location.
 *
 * @see https://reactrouter.com/hooks/use-navigate
 */ function $178516013a5ef3e1$export$9770f232ac06a008() {
    let { isDataRoute: isDataRoute } = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return isDataRoute ? $178516013a5ef3e1$var$useNavigateStable() : $178516013a5ef3e1$var$useNavigateUnstable();
}
function $178516013a5ef3e1$var$useNavigateUnstable() {
    !$178516013a5ef3e1$export$9c954a9d03d32f4a() && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let dataRouterContext = $4rFIf.useContext($178516013a5ef3e1$export$3add0d5dce533e2e);
    let { basename: basename, navigator: navigator } = $4rFIf.useContext($178516013a5ef3e1$export$26749e8557646306);
    let { matches: matches } = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $178516013a5ef3e1$export$45d76561a5302f2b();
    let routePathnamesJson = JSON.stringify((0, $35fc6c0e1453dea6$export$90ba53ce1c7fdff2)(matches).map((match)=>match.pathnameBase));
    let activeRef = $4rFIf.useRef(false);
    $178516013a5ef3e1$var$useIsomorphicLayoutEffect(()=>{
        activeRef.current = true;
    });
    let navigate = $4rFIf.useCallback(function(to, options) {
        if (options === void 0) options = {};
        // Short circuit here since if this happens on first render the navigate
        // is useless because we haven't wired up our history listener yet
        if (!activeRef.current) return;
        if (typeof to === "number") {
            navigator.go(to);
            return;
        }
        let path = (0, $35fc6c0e1453dea6$export$cae722b0cc860f13)(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
        // If we're operating within a basename, prepend it to the pathname prior
        // to handing off to history (but only if we're not in a data router,
        // otherwise it'll prepend the basename inside of the router).
        // If this is a root navigation, then we navigate to the raw basename
        // which allows the basename to have full control over the presence of a
        // trailing slash on root links
        if (dataRouterContext == null && basename !== "/") path.pathname = path.pathname === "/" ? basename : (0, $35fc6c0e1453dea6$export$86d9a7913e44197e)([
            basename,
            path.pathname
        ]);
        (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);
    }, [
        basename,
        navigator,
        routePathnamesJson,
        locationPathname,
        dataRouterContext
    ]);
    return navigate;
}
const $178516013a5ef3e1$var$OutletContext = /*#__PURE__*/ $4rFIf.createContext(null);
/**
 * Returns the context (if provided) for the child route at this level of the route
 * hierarchy.
 * @see https://reactrouter.com/hooks/use-outlet-context
 */ function $178516013a5ef3e1$export$4138103a3ae699cc() {
    return $4rFIf.useContext($178516013a5ef3e1$var$OutletContext);
}
/**
 * Returns the element for the child route at this level of the route
 * hierarchy. Used internally by `<Outlet>` to render child routes.
 *
 * @see https://reactrouter.com/hooks/use-outlet
 */ function $178516013a5ef3e1$export$a3be3530d8e40d0b(context) {
    let outlet = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057).outlet;
    if (outlet) return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$OutletContext.Provider, {
        value: context
    }, outlet);
    return outlet;
}
/**
 * Returns an object of key/value pairs of the dynamic params from the current
 * URL that were matched by the route path.
 *
 * @see https://reactrouter.com/hooks/use-params
 */ function $178516013a5ef3e1$export$99eaa27ddbbb95ef() {
    let { matches: matches } = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
}
/**
 * Resolves the pathname of the given `to` value against the current location.
 *
 * @see https://reactrouter.com/hooks/use-resolved-path
 */ function $178516013a5ef3e1$export$e75d2a2d1b3c245b(to, _temp2) {
    let { relative: relative } = _temp2 === void 0 ? {} : _temp2;
    let { matches: matches } = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $178516013a5ef3e1$export$45d76561a5302f2b();
    let routePathnamesJson = JSON.stringify((0, $35fc6c0e1453dea6$export$90ba53ce1c7fdff2)(matches).map((match)=>match.pathnameBase));
    return $4rFIf.useMemo(()=>(0, $35fc6c0e1453dea6$export$cae722b0cc860f13)(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [
        to,
        routePathnamesJson,
        locationPathname,
        relative
    ]);
}
/**
 * Returns the element of the route that matched the current location, prepared
 * with the correct context to render the remainder of the route tree. Route
 * elements in the tree must render an `<Outlet>` to render their child route's
 * element.
 *
 * @see https://reactrouter.com/hooks/use-routes
 */ function $178516013a5ef3e1$export$5d3fca4a98652595(routes, locationArg) {
    return $178516013a5ef3e1$export$5fcee62552a12fbf(routes, locationArg);
}
// Internal implementation with accept optional param for RouterProvider usage
function $178516013a5ef3e1$export$5fcee62552a12fbf(routes, locationArg, dataRouterState) {
    !$178516013a5ef3e1$export$9c954a9d03d32f4a() && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let { navigator: navigator } = $4rFIf.useContext($178516013a5ef3e1$export$26749e8557646306);
    let { matches: parentMatches } = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    let locationFromContext = $178516013a5ef3e1$export$45d76561a5302f2b();
    let location;
    if (locationArg) {
        var _parsedLocationArg$pa;
        let parsedLocationArg = typeof locationArg === "string" ? (0, $35fc6c0e1453dea6$export$8ccf933b0513f8d0)(locationArg) : locationArg;
        !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
        location = parsedLocationArg;
    } else location = locationFromContext;
    let pathname = location.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = (0, $35fc6c0e1453dea6$export$2708184779ceb39d)(routes, {
        pathname: remainingPathname
    });
    let renderedMatches = $178516013a5ef3e1$var$_renderMatches(matches && matches.map((match)=>Object.assign({}, match, {
            params: Object.assign({}, parentParams, match.params),
            pathname: (0, $35fc6c0e1453dea6$export$86d9a7913e44197e)([
                parentPathnameBase,
                // Re-encode pathnames that were decoded inside matchRoutes
                navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname
            ]),
            pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : (0, $35fc6c0e1453dea6$export$86d9a7913e44197e)([
                parentPathnameBase,
                // Re-encode pathnames that were decoded inside matchRoutes
                navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
            ])
        })), parentMatches, dataRouterState);
    // When a user passes in a `locationArg`, the associated routes need to
    // be wrapped in a new `LocationContext.Provider` in order for `useLocation`
    // to use the scoped location instead of the global location.
    if (locationArg && renderedMatches) return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$c7914228fb69b0f5.Provider, {
        value: {
            location: $178516013a5ef3e1$var$_extends({
                pathname: "/",
                search: "",
                hash: "",
                state: null,
                key: "default"
            }, location),
            navigationType: (0, $35fc6c0e1453dea6$export$e19cd5f9376f8cee).Pop
        }
    }, renderedMatches);
    return renderedMatches;
}
function $178516013a5ef3e1$var$DefaultErrorComponent() {
    let error = $178516013a5ef3e1$export$ed527bf60f6e05f2();
    let message = (0, $35fc6c0e1453dea6$export$972111febbeef05b)(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
        padding: "0.5rem",
        backgroundColor: lightgrey
    };
    let codeStyles = {
        padding: "2px 4px",
        backgroundColor: lightgrey
    };
    let devInfo = null;
    return /*#__PURE__*/ $4rFIf.createElement($4rFIf.Fragment, null, /*#__PURE__*/ $4rFIf.createElement("h2", null, "Unexpected Application Error!"), /*#__PURE__*/ $4rFIf.createElement("h3", {
        style: {
            fontStyle: "italic"
        }
    }, message), stack ? /*#__PURE__*/ $4rFIf.createElement("pre", {
        style: preStyles
    }, stack) : null, devInfo);
}
const $178516013a5ef3e1$var$defaultErrorElement = /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$DefaultErrorComponent, null);
class $178516013a5ef3e1$var$RenderErrorBoundary extends $4rFIf.Component {
    constructor(props){
        super(props);
        this.state = {
            location: props.location,
            revalidation: props.revalidation,
            error: props.error
        };
    }
    static getDerivedStateFromError(error) {
        return {
            error: error
        };
    }
    static getDerivedStateFromProps(props, state) {
        // When we get into an error state, the user will likely click "back" to the
        // previous page that didn't have an error. Because this wraps the entire
        // application, that will have no effect--the error page continues to display.
        // This gives us a mechanism to recover from the error when the location changes.
        //
        // Whether we're in an error state or not, we update the location in state
        // so that when we are in an error state, it gets reset when a new location
        // comes in and the user recovers from the error.
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
        };
        // If we're not changing locations, preserve the location but still surface
        // any new errors that may come through. We retain the existing error, we do
        // this because the error provided from the app state may be cleared without
        // the location changing.
        return {
            error: props.error || state.error,
            location: state.location,
            revalidation: props.revalidation || state.revalidation
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
        return this.state.error ? /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$9072aa6dd1f93057.Provider, {
            value: this.props.routeContext
        }, /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
        })) : this.props.children;
    }
}
function $178516013a5ef3e1$var$RenderedRoute(_ref) {
    let { routeContext: routeContext, match: match, children: children } = _ref;
    let dataRouterContext = $4rFIf.useContext($178516013a5ef3e1$export$3add0d5dce533e2e);
    // Track how deep we got in our render pass to emulate SSR componentDidCatch
    // in a DataStaticRouter
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$9072aa6dd1f93057.Provider, {
        value: routeContext
    }, children);
}
function $178516013a5ef3e1$var$_renderMatches(matches, parentMatches, dataRouterState) {
    var _dataRouterState2;
    if (parentMatches === void 0) parentMatches = [];
    if (dataRouterState === void 0) dataRouterState = null;
    if (matches == null) {
        var _dataRouterState;
        if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) // Don't bail if we have data router errors so we can render them in the
        // boundary.  Use the pre-matched (or shimmed) matches
        matches = dataRouterState.matches;
        else return null;
    }
    let renderedMatches = matches;
    // If we have data errors, trim matches to the highest error boundary
    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors != null) {
        let errorIndex = renderedMatches.findIndex((m)=>m.route.id && (errors == null ? void 0 : errors[m.route.id]));
        !(errorIndex >= 0) && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
        renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    return renderedMatches.reduceRight((outlet, match, index)=>{
        let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null;
        // Only data routers handle errors
        let errorElement = null;
        if (dataRouterState) errorElement = match.route.errorElement || $178516013a5ef3e1$var$defaultErrorElement;
        let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));
        let getChildren = ()=>{
            let children;
            if (error) children = errorElement;
            else if (match.route.Component) // Note: This is a de-optimized path since React won't re-use the
            // ReactElement since it's identity changes with each new
            // React.createElement call.  We keep this so folks can use
            // `<Route Component={...}>` in `<Routes>` but generally `Component`
            // usage is only advised in `RouterProvider` when we can convert it to
            // `element` ahead of time.
            children = /*#__PURE__*/ $4rFIf.createElement(match.route.Component, null);
            else if (match.route.element) children = match.route.element;
            else children = outlet;
            return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$RenderedRoute, {
                match: match,
                routeContext: {
                    outlet: outlet,
                    matches: matches,
                    isDataRoute: dataRouterState != null
                },
                children: children
            });
        };
        // Only wrap in an error boundary within data router usages when we have an
        // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to
        // an ancestor ErrorBoundary/errorElement
        return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$RenderErrorBoundary, {
            location: dataRouterState.location,
            revalidation: dataRouterState.revalidation,
            component: errorElement,
            error: error,
            children: getChildren(),
            routeContext: {
                outlet: null,
                matches: matches,
                isDataRoute: true
            }
        }) : getChildren();
    }, null);
}
var $178516013a5ef3e1$var$DataRouterHook = /*#__PURE__*/ function(DataRouterHook) {
    DataRouterHook["UseBlocker"] = "useBlocker";
    DataRouterHook["UseRevalidator"] = "useRevalidator";
    DataRouterHook["UseNavigateStable"] = "useNavigate";
    return DataRouterHook;
}($178516013a5ef3e1$var$DataRouterHook || {});
var $178516013a5ef3e1$var$DataRouterStateHook = /*#__PURE__*/ function(DataRouterStateHook) {
    DataRouterStateHook["UseBlocker"] = "useBlocker";
    DataRouterStateHook["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook["UseActionData"] = "useActionData";
    DataRouterStateHook["UseRouteError"] = "useRouteError";
    DataRouterStateHook["UseNavigation"] = "useNavigation";
    DataRouterStateHook["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook["UseMatches"] = "useMatches";
    DataRouterStateHook["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook["UseRouteId"] = "useRouteId";
    return DataRouterStateHook;
}($178516013a5ef3e1$var$DataRouterStateHook || {});
function $178516013a5ef3e1$var$getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function $178516013a5ef3e1$var$useDataRouterContext(hookName) {
    let ctx = $4rFIf.useContext($178516013a5ef3e1$export$3add0d5dce533e2e);
    !ctx && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return ctx;
}
function $178516013a5ef3e1$var$useDataRouterState(hookName) {
    let state = $4rFIf.useContext($178516013a5ef3e1$export$145dfa71566a64dc);
    !state && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return state;
}
function $178516013a5ef3e1$var$useRouteContext(hookName) {
    let route = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    !route && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return route;
}
// Internal version with hookName-aware debugging
function $178516013a5ef3e1$var$useCurrentRouteId(hookName) {
    let route = $178516013a5ef3e1$var$useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return thisRoute.route.id;
}
/**
 * Returns the ID for the nearest contextual route
 */ function $178516013a5ef3e1$export$5fc8298006ad9e58() {
    return $178516013a5ef3e1$var$useCurrentRouteId($178516013a5ef3e1$var$DataRouterStateHook.UseRouteId);
}
/**
 * Returns the current navigation, defaulting to an "idle" navigation when
 * no navigation is in progress
 */ function $178516013a5ef3e1$export$d0fd4b7106de2769() {
    let state = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseNavigation);
    return state.navigation;
}
/**
 * Returns a revalidate function for manually triggering revalidation, as well
 * as the current state of any manual revalidations
 */ function $178516013a5ef3e1$export$600dc272ed516c15() {
    let dataRouterContext = $178516013a5ef3e1$var$useDataRouterContext($178516013a5ef3e1$var$DataRouterHook.UseRevalidator);
    let state = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseRevalidator);
    return $4rFIf.useMemo(()=>({
            revalidate: dataRouterContext.router.revalidate,
            state: state.revalidation
        }), [
        dataRouterContext.router.revalidate,
        state.revalidation
    ]);
}
/**
 * Returns the active route matches, useful for accessing loaderData for
 * parent/child routes or the route "handle" property
 */ function $178516013a5ef3e1$export$2378eb7f5ff86053() {
    let { matches: matches, loaderData: loaderData } = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseMatches);
    return $4rFIf.useMemo(()=>matches.map((m)=>(0, $35fc6c0e1453dea6$export$b3fac024fad9e8ff)(m, loaderData)), [
        matches,
        loaderData
    ]);
}
/**
 * Returns the loader data for the nearest ancestor Route loader
 */ function $178516013a5ef3e1$export$1448a5050d252c4d() {
    let state = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseLoaderData);
    let routeId = $178516013a5ef3e1$var$useCurrentRouteId($178516013a5ef3e1$var$DataRouterStateHook.UseLoaderData);
    if (state.errors && state.errors[routeId] != null) {
        console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
        return undefined;
    }
    return state.loaderData[routeId];
}
/**
 * Returns the loaderData for the given routeId
 */ function $178516013a5ef3e1$export$fd5d37484eab868d(routeId) {
    let state = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseRouteLoaderData);
    return state.loaderData[routeId];
}
/**
 * Returns the action data for the nearest ancestor Route action
 */ function $178516013a5ef3e1$export$fdc00f3f26066d5e() {
    let state = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseActionData);
    let route = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    !route && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return Object.values((state == null ? void 0 : state.actionData) || {})[0];
}
/**
 * Returns the nearest ancestor Route error, which could be a loader/action
 * error or a render error.  This is intended to be called from your
 * ErrorBoundary/errorElement to display a proper error message.
 */ function $178516013a5ef3e1$export$ed527bf60f6e05f2() {
    var _state$errors;
    let error = $4rFIf.useContext($178516013a5ef3e1$var$RouteErrorContext);
    let state = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseRouteError);
    let routeId = $178516013a5ef3e1$var$useCurrentRouteId($178516013a5ef3e1$var$DataRouterStateHook.UseRouteError);
    // If this was a render error, we put it in a RouteError context inside
    // of RenderErrorBoundary
    if (error) return error;
    // Otherwise look for errors from our data router state
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
/**
 * Returns the happy-path data from the nearest ancestor `<Await />` value
 */ function $178516013a5ef3e1$export$78a72ddb39bdd145() {
    let value = $4rFIf.useContext($178516013a5ef3e1$var$AwaitContext);
    return value == null ? void 0 : value._data;
}
/**
 * Returns the error from the nearest ancestor `<Await />` value
 */ function $178516013a5ef3e1$export$17f53340677d5831() {
    let value = $4rFIf.useContext($178516013a5ef3e1$var$AwaitContext);
    return value == null ? void 0 : value._error;
}
let $178516013a5ef3e1$var$blockerId = 0;
/**
 * Allow the application to block navigations within the SPA and present the
 * user a confirmation dialog to confirm the navigation.  Mostly used to avoid
 * using half-filled form data.  This does not handle hard-reloads or
 * cross-origin navigations.
 */ function $178516013a5ef3e1$export$2af03a1de5c0910(shouldBlock) {
    let { router: router, basename: basename } = $178516013a5ef3e1$var$useDataRouterContext($178516013a5ef3e1$var$DataRouterHook.UseBlocker);
    let state = $178516013a5ef3e1$var$useDataRouterState($178516013a5ef3e1$var$DataRouterStateHook.UseBlocker);
    let [blockerKey, setBlockerKey] = $4rFIf.useState("");
    let blockerFunction = $4rFIf.useCallback((arg)=>{
        if (typeof shouldBlock !== "function") return !!shouldBlock;
        if (basename === "/") return shouldBlock(arg);
        // If they provided us a function and we've got an active basename, strip
        // it from the locations we expose to the user to match the behavior of
        // useLocation
        let { currentLocation: currentLocation, nextLocation: nextLocation, historyAction: historyAction } = arg;
        return shouldBlock({
            currentLocation: $178516013a5ef3e1$var$_extends({}, currentLocation, {
                pathname: (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(currentLocation.pathname, basename) || currentLocation.pathname
            }),
            nextLocation: $178516013a5ef3e1$var$_extends({}, nextLocation, {
                pathname: (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(nextLocation.pathname, basename) || nextLocation.pathname
            }),
            historyAction: historyAction
        });
    }, [
        basename,
        shouldBlock
    ]);
    // This effect is in charge of blocker key assignment and deletion (which is
    // tightly coupled to the key)
    $4rFIf.useEffect(()=>{
        let key = String(++$178516013a5ef3e1$var$blockerId);
        setBlockerKey(key);
        return ()=>router.deleteBlocker(key);
    }, [
        router
    ]);
    // This effect handles assigning the blockerFunction.  This is to handle
    // unstable blocker function identities, and happens only after the prior
    // effect so we don't get an orphaned blockerFunction in the router with a
    // key of "".  Until then we just have the IDLE_BLOCKER.
    $4rFIf.useEffect(()=>{
        if (blockerKey !== "") router.getBlocker(blockerKey, blockerFunction);
    }, [
        router,
        blockerKey,
        blockerFunction
    ]);
    // Prefer the blocker from `state` not `router.state` since DataRouterContext
    // is memoized so this ensures we update on blocker state updates
    return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : (0, $35fc6c0e1453dea6$export$386d57f03f0b2883);
}
/**
 * Stable version of useNavigate that is used when we are in the context of
 * a RouterProvider.
 */ function $178516013a5ef3e1$var$useNavigateStable() {
    let { router: router } = $178516013a5ef3e1$var$useDataRouterContext($178516013a5ef3e1$var$DataRouterHook.UseNavigateStable);
    let id = $178516013a5ef3e1$var$useCurrentRouteId($178516013a5ef3e1$var$DataRouterStateHook.UseNavigateStable);
    let activeRef = $4rFIf.useRef(false);
    $178516013a5ef3e1$var$useIsomorphicLayoutEffect(()=>{
        activeRef.current = true;
    });
    let navigate = $4rFIf.useCallback(function(to, options) {
        if (options === void 0) options = {};
        // Short circuit here since if this happens on first render the navigate
        // is useless because we haven't wired up our router subscriber yet
        if (!activeRef.current) return;
        if (typeof to === "number") router.navigate(to);
        else router.navigate(to, $178516013a5ef3e1$var$_extends({
            fromRouteId: id
        }, options));
    }, [
        router,
        id
    ]);
    return navigate;
}
const $178516013a5ef3e1$var$alreadyWarned = {};
function $178516013a5ef3e1$var$warningOnce(key, cond, message) {
    if (!cond && !$178516013a5ef3e1$var$alreadyWarned[key]) $178516013a5ef3e1$var$alreadyWarned[key] = true;
}
/**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const $178516013a5ef3e1$var$START_TRANSITION = "startTransition";
const $178516013a5ef3e1$var$startTransitionImpl = $4rFIf[$178516013a5ef3e1$var$START_TRANSITION];
/**
 * Given a Remix Router instance, render the appropriate UI
 */ function $178516013a5ef3e1$export$323e4fc2fa4753fb(_ref) {
    let { fallbackElement: fallbackElement, router: router, future: future } = _ref;
    let [state, setStateImpl] = $4rFIf.useState(router.state);
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $4rFIf.useCallback((newState)=>{
        if (v7_startTransition && $178516013a5ef3e1$var$startTransitionImpl) $178516013a5ef3e1$var$startTransitionImpl(()=>setStateImpl(newState));
        else setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    // Need to use a layout effect here so we are subscribed early enough to
    // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
    $4rFIf.useLayoutEffect(()=>router.subscribe(setState), [
        router,
        setState
    ]);
    let navigator = $4rFIf.useMemo(()=>{
        return {
            createHref: router.createHref,
            encodeLocation: router.encodeLocation,
            go: (n)=>router.navigate(n),
            push: (to, state, opts)=>router.navigate(to, {
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                }),
            replace: (to, state, opts)=>router.navigate(to, {
                    replace: true,
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                })
        };
    }, [
        router
    ]);
    let basename = router.basename || "/";
    let dataRouterContext = $4rFIf.useMemo(()=>({
            router: router,
            navigator: navigator,
            static: false,
            basename: basename
        }), [
        router,
        navigator,
        basename
    ]);
    // The fragment and {null} here are important!  We need them to keep React 18's
    // useId happy when we are server-rendering since we may have a <script> here
    // containing the hydrated server-side staticContext (from StaticRouterProvider).
    // useId relies on the component tree structure to generate deterministic id's
    // so we need to ensure it remains the same on the client even though
    // we don't need the <script> tag
    return /*#__PURE__*/ $4rFIf.createElement($4rFIf.Fragment, null, /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$3add0d5dce533e2e.Provider, {
        value: dataRouterContext
    }, /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$145dfa71566a64dc.Provider, {
        value: state
    }, /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$55185c17a0fcbe46, {
        basename: basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: navigator
    }, state.initialized ? /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$DataRoutes, {
        routes: router.routes,
        state: state
    }) : fallbackElement))), null);
}
function $178516013a5ef3e1$var$DataRoutes(_ref2) {
    let { routes: routes, state: state } = _ref2;
    return $178516013a5ef3e1$export$5fcee62552a12fbf(routes, undefined, state);
}
/**
 * A `<Router>` that stores all entries in memory.
 *
 * @see https://reactrouter.com/router-components/memory-router
 */ function $178516013a5ef3e1$export$ae46f04cfaffe093(_ref3) {
    let { basename: basename, children: children, initialEntries: initialEntries, initialIndex: initialIndex, future: future } = _ref3;
    let historyRef = $4rFIf.useRef();
    if (historyRef.current == null) historyRef.current = (0, $35fc6c0e1453dea6$export$2b76ad033c6e6d08)({
        initialEntries: initialEntries,
        initialIndex: initialIndex,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $4rFIf.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $4rFIf.useCallback((newState)=>{
        v7_startTransition && $178516013a5ef3e1$var$startTransitionImpl ? $178516013a5ef3e1$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $4rFIf.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$55185c17a0fcbe46, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * Changes the current location.
 *
 * Note: This API is mostly useful in React.Component subclasses that are not
 * able to use hooks. In functional components, we recommend you use the
 * `useNavigate` hook instead.
 *
 * @see https://reactrouter.com/components/navigate
 */ function $178516013a5ef3e1$export$444b3ab0cb9aec40(_ref4) {
    let { to: to, replace: replace, state: state, relative: relative } = _ref4;
    !$178516013a5ef3e1$export$9c954a9d03d32f4a() && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let { matches: matches } = $4rFIf.useContext($178516013a5ef3e1$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $178516013a5ef3e1$export$45d76561a5302f2b();
    let navigate = $178516013a5ef3e1$export$9770f232ac06a008();
    // Resolve the path outside of the effect so that when effects run twice in
    // StrictMode they navigate to the same place
    let path = (0, $35fc6c0e1453dea6$export$cae722b0cc860f13)(to, (0, $35fc6c0e1453dea6$export$90ba53ce1c7fdff2)(matches).map((match)=>match.pathnameBase), locationPathname, relative === "path");
    let jsonPath = JSON.stringify(path);
    $4rFIf.useEffect(()=>navigate(JSON.parse(jsonPath), {
            replace: replace,
            state: state,
            relative: relative
        }), [
        navigate,
        jsonPath,
        relative,
        replace,
        state
    ]);
    return null;
}
/**
 * Renders the child route's element, if there is one.
 *
 * @see https://reactrouter.com/components/outlet
 */ function $178516013a5ef3e1$export$910ae8079b2c2852(props) {
    return $178516013a5ef3e1$export$a3be3530d8e40d0b(props.context);
}
/**
 * Declares an element that should be rendered at a certain URL path.
 *
 * @see https://reactrouter.com/components/route
 */ function $178516013a5ef3e1$export$e7b0ac011bb776c6(_props) {
    (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
}
/**
 * Provides location context for the rest of the app.
 *
 * Note: You usually won't render a `<Router>` directly. Instead, you'll render a
 * router that is more specific to your environment such as a `<BrowserRouter>`
 * in web browsers or a `<StaticRouter>` for server rendering.
 *
 * @see https://reactrouter.com/router-components/router
 */ function $178516013a5ef3e1$export$55185c17a0fcbe46(_ref5) {
    let { basename: basenameProp = "/", children: children = null, location: locationProp, navigationType: navigationType = (0, $35fc6c0e1453dea6$export$e19cd5f9376f8cee).Pop, navigator: navigator, static: staticProp = false } = _ref5;
    !!$178516013a5ef3e1$export$9c954a9d03d32f4a() && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    // Preserve trailing slashes on basename, so we can let the user control
    // the enforcement of trailing slashes throughout the app
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = $4rFIf.useMemo(()=>({
            basename: basename,
            navigator: navigator,
            static: staticProp
        }), [
        basename,
        navigator,
        staticProp
    ]);
    if (typeof locationProp === "string") locationProp = (0, $35fc6c0e1453dea6$export$8ccf933b0513f8d0)(locationProp);
    let { pathname: pathname = "/", search: search = "", hash: hash = "", state: state = null, key: key = "default" } = locationProp;
    let locationContext = $4rFIf.useMemo(()=>{
        let trailingPathname = (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(pathname, basename);
        if (trailingPathname == null) return null;
        return {
            location: {
                pathname: trailingPathname,
                search: search,
                hash: hash,
                state: state,
                key: key
            },
            navigationType: navigationType
        };
    }, [
        basename,
        pathname,
        search,
        hash,
        state,
        key,
        navigationType
    ]);
    if (locationContext == null) return null;
    return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$26749e8557646306.Provider, {
        value: navigationContext
    }, /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$export$c7914228fb69b0f5.Provider, {
        children: children,
        value: locationContext
    }));
}
/**
 * A container for a nested tree of `<Route>` elements that renders the branch
 * that best matches the current location.
 *
 * @see https://reactrouter.com/components/routes
 */ function $178516013a5ef3e1$export$3565eb3d00ca5a74(_ref6) {
    let { children: children, location: location } = _ref6;
    return $178516013a5ef3e1$export$5d3fca4a98652595($178516013a5ef3e1$export$16da398f5434bdec(children), location);
}
/**
 * Component to use for rendering lazily loaded data from returning defer()
 * in a loader function
 */ function $178516013a5ef3e1$export$6ddabde395c8c576(_ref7) {
    let { children: children, errorElement: errorElement, resolve: resolve } = _ref7;
    return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$AwaitErrorBoundary, {
        resolve: resolve,
        errorElement: errorElement
    }, /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$ResolveAwait, null, children));
}
var $178516013a5ef3e1$var$AwaitRenderStatus = /*#__PURE__*/ function(AwaitRenderStatus) {
    AwaitRenderStatus[AwaitRenderStatus["pending"] = 0] = "pending";
    AwaitRenderStatus[AwaitRenderStatus["success"] = 1] = "success";
    AwaitRenderStatus[AwaitRenderStatus["error"] = 2] = "error";
    return AwaitRenderStatus;
}($178516013a5ef3e1$var$AwaitRenderStatus || {});
const $178516013a5ef3e1$var$neverSettledPromise = new Promise(()=>{});
class $178516013a5ef3e1$var$AwaitErrorBoundary extends $4rFIf.Component {
    constructor(props){
        super(props);
        this.state = {
            error: null
        };
    }
    static getDerivedStateFromError(error) {
        return {
            error: error
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error("<Await> caught the following error during render", error, errorInfo);
    }
    render() {
        let { children: children, errorElement: errorElement, resolve: resolve } = this.props;
        let promise = null;
        let status = $178516013a5ef3e1$var$AwaitRenderStatus.pending;
        if (!(resolve instanceof Promise)) {
            // Didn't get a promise - provide as a resolved promise
            status = $178516013a5ef3e1$var$AwaitRenderStatus.success;
            promise = Promise.resolve();
            Object.defineProperty(promise, "_tracked", {
                get: ()=>true
            });
            Object.defineProperty(promise, "_data", {
                get: ()=>resolve
            });
        } else if (this.state.error) {
            // Caught a render error, provide it as a rejected promise
            status = $178516013a5ef3e1$var$AwaitRenderStatus.error;
            let renderError = this.state.error;
            promise = Promise.reject().catch(()=>{}); // Avoid unhandled rejection warnings
            Object.defineProperty(promise, "_tracked", {
                get: ()=>true
            });
            Object.defineProperty(promise, "_error", {
                get: ()=>renderError
            });
        } else if (resolve._tracked) {
            // Already tracked promise - check contents
            promise = resolve;
            status = promise._error !== undefined ? $178516013a5ef3e1$var$AwaitRenderStatus.error : promise._data !== undefined ? $178516013a5ef3e1$var$AwaitRenderStatus.success : $178516013a5ef3e1$var$AwaitRenderStatus.pending;
        } else {
            // Raw (untracked) promise - track it
            status = $178516013a5ef3e1$var$AwaitRenderStatus.pending;
            Object.defineProperty(resolve, "_tracked", {
                get: ()=>true
            });
            promise = resolve.then((data)=>Object.defineProperty(resolve, "_data", {
                    get: ()=>data
                }), (error)=>Object.defineProperty(resolve, "_error", {
                    get: ()=>error
                }));
        }
        if (status === $178516013a5ef3e1$var$AwaitRenderStatus.error && promise._error instanceof (0, $35fc6c0e1453dea6$export$42a99a7a4bc0e76a)) // Freeze the UI by throwing a never resolved promise
        throw $178516013a5ef3e1$var$neverSettledPromise;
        if (status === $178516013a5ef3e1$var$AwaitRenderStatus.error && !errorElement) // No errorElement, throw to the nearest route-level error boundary
        throw promise._error;
        if (status === $178516013a5ef3e1$var$AwaitRenderStatus.error) // Render via our errorElement
        return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$AwaitContext.Provider, {
            value: promise,
            children: errorElement
        });
        if (status === $178516013a5ef3e1$var$AwaitRenderStatus.success) // Render children with resolved value
        return /*#__PURE__*/ $4rFIf.createElement($178516013a5ef3e1$var$AwaitContext.Provider, {
            value: promise,
            children: children
        });
        // Throw to the suspense boundary
        throw promise;
    }
}
/**
 * @private
 * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`
 */ function $178516013a5ef3e1$var$ResolveAwait(_ref8) {
    let { children: children } = _ref8;
    let data = $178516013a5ef3e1$export$78a72ddb39bdd145();
    let toRender = typeof children === "function" ? children(data) : children;
    return /*#__PURE__*/ $4rFIf.createElement($4rFIf.Fragment, null, toRender);
}
///////////////////////////////////////////////////////////////////////////////
// UTILS
///////////////////////////////////////////////////////////////////////////////
/**
 * Creates a route config from a React "children" object, which is usually
 * either a `<Route>` element or an array of them. Used internally by
 * `<Routes>` to create a route config from its children.
 *
 * @see https://reactrouter.com/utils/create-routes-from-children
 */ function $178516013a5ef3e1$export$16da398f5434bdec(children, parentPath) {
    if (parentPath === void 0) parentPath = [];
    let routes = [];
    $4rFIf.Children.forEach(children, (element, index)=>{
        if (!/*#__PURE__*/ $4rFIf.isValidElement(element)) // Ignore non-elements. This allows people to more easily inline
        // conditionals in their route config.
        return;
        let treePath = [
            ...parentPath,
            index
        ];
        if (element.type === $4rFIf.Fragment) {
            // Transparently support React.Fragment and its children.
            routes.push.apply(routes, $178516013a5ef3e1$export$16da398f5434bdec(element.props.children, treePath));
            return;
        }
        !(element.type === $178516013a5ef3e1$export$e7b0ac011bb776c6) && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
        !(!element.props.index || !element.props.children) && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
        let route = {
            id: element.props.id || treePath.join("-"),
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            Component: element.props.Component,
            index: element.props.index,
            path: element.props.path,
            loader: element.props.loader,
            action: element.props.action,
            errorElement: element.props.errorElement,
            ErrorBoundary: element.props.ErrorBoundary,
            hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
            shouldRevalidate: element.props.shouldRevalidate,
            handle: element.props.handle,
            lazy: element.props.lazy
        };
        if (element.props.children) route.children = $178516013a5ef3e1$export$16da398f5434bdec(element.props.children, treePath);
        routes.push(route);
    });
    return routes;
}
/**
 * Renders the result of `matchRoutes()` into a React element.
 */ function $178516013a5ef3e1$export$daf73786167a7f72(matches) {
    return $178516013a5ef3e1$var$_renderMatches(matches);
}
function $178516013a5ef3e1$export$52b333d321859367(route) {
    let updates = {
        // Note: this check also occurs in createRoutesFromChildren so update
        // there if you change this -- please and thank you!
        hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
    };
    if (route.Component) Object.assign(updates, {
        element: /*#__PURE__*/ $4rFIf.createElement(route.Component),
        Component: undefined
    });
    if (route.ErrorBoundary) Object.assign(updates, {
        errorElement: /*#__PURE__*/ $4rFIf.createElement(route.ErrorBoundary),
        ErrorBoundary: undefined
    });
    return updates;
}
function $178516013a5ef3e1$export$f30f7e456d254e83(routes, opts) {
    return (0, $35fc6c0e1453dea6$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $178516013a5ef3e1$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $35fc6c0e1453dea6$export$2b76ad033c6e6d08)({
            initialEntries: opts == null ? void 0 : opts.initialEntries,
            initialIndex: opts == null ? void 0 : opts.initialIndex
        }),
        hydrationData: opts == null ? void 0 : opts.hydrationData,
        routes: routes,
        mapRouteProperties: $178516013a5ef3e1$export$52b333d321859367
    }).initialize();
}



function $9d75162fdeea70fe$var$_extends() {
    $9d75162fdeea70fe$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $9d75162fdeea70fe$var$_extends.apply(this, arguments);
}
function $9d75162fdeea70fe$var$_objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const $9d75162fdeea70fe$var$defaultMethod = "get";
const $9d75162fdeea70fe$var$defaultEncType = "application/x-www-form-urlencoded";
function $9d75162fdeea70fe$var$isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
}
function $9d75162fdeea70fe$var$isButtonElement(object) {
    return $9d75162fdeea70fe$var$isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function $9d75162fdeea70fe$var$isFormElement(object) {
    return $9d75162fdeea70fe$var$isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function $9d75162fdeea70fe$var$isInputElement(object) {
    return $9d75162fdeea70fe$var$isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function $9d75162fdeea70fe$var$isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function $9d75162fdeea70fe$var$shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !$9d75162fdeea70fe$var$isModifiedEvent(event) // Ignore clicks with modifier keys
    ;
}
/**
 * Creates a URLSearchParams object using the given initializer.
 *
 * This is identical to `new URLSearchParams(init)` except it also
 * supports arrays as values in the object form of the initializer
 * instead of just strings. This is convenient when you need multiple
 * values for a given key, but don't want to use an array initializer.
 *
 * For example, instead of:
 *
 *   let searchParams = new URLSearchParams([
 *     ['sort', 'name'],
 *     ['sort', 'price']
 *   ]);
 *
 * you can do:
 *
 *   let searchParams = createSearchParams({
 *     sort: ['name', 'price']
 *   });
 */ function $9d75162fdeea70fe$export$a2e4e2dcc7b1f22f(init) {
    if (init === void 0) init = "";
    return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key)=>{
        let value = init[key];
        return memo.concat(Array.isArray(value) ? value.map((v)=>[
                key,
                v
            ]) : [
            [
                key,
                value
            ]
        ]);
    }, []));
}
function $9d75162fdeea70fe$var$getSearchParamsForLocation(locationSearch, defaultSearchParams) {
    let searchParams = $9d75162fdeea70fe$export$a2e4e2dcc7b1f22f(locationSearch);
    if (defaultSearchParams) // Use `defaultSearchParams.forEach(...)` here instead of iterating of
    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to
    // web extensions. Relevant Bugzilla tickets:
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984
    defaultSearchParams.forEach((_, key)=>{
        if (!searchParams.has(key)) defaultSearchParams.getAll(key).forEach((value)=>{
            searchParams.append(key, value);
        });
    });
    return searchParams;
}
// One-time check for submitter support
let $9d75162fdeea70fe$var$_formDataSupportsSubmitter = null;
function $9d75162fdeea70fe$var$isFormDataSubmitterSupported() {
    if ($9d75162fdeea70fe$var$_formDataSupportsSubmitter === null) try {
        new FormData(document.createElement("form"), // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0);
        $9d75162fdeea70fe$var$_formDataSupportsSubmitter = false;
    } catch (e) {
        $9d75162fdeea70fe$var$_formDataSupportsSubmitter = true;
    }
    return $9d75162fdeea70fe$var$_formDataSupportsSubmitter;
}
const $9d75162fdeea70fe$var$supportedFormEncTypes = new Set([
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
]);
function $9d75162fdeea70fe$var$getFormEncType(encType) {
    if (encType != null && !$9d75162fdeea70fe$var$supportedFormEncTypes.has(encType)) return null;
    return encType;
}
function $9d75162fdeea70fe$var$getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if ($9d75162fdeea70fe$var$isFormElement(target)) {
        // When grabbing the action from the element, it will have had the basename
        // prefixed to ensure non-JS scenarios work, so strip it since we'll
        // re-prefix in the router
        let attr = target.getAttribute("action");
        action = attr ? (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(attr, basename) : null;
        method = target.getAttribute("method") || $9d75162fdeea70fe$var$defaultMethod;
        encType = $9d75162fdeea70fe$var$getFormEncType(target.getAttribute("enctype")) || $9d75162fdeea70fe$var$defaultEncType;
        formData = new FormData(target);
    } else if ($9d75162fdeea70fe$var$isButtonElement(target) || $9d75162fdeea70fe$var$isInputElement(target) && (target.type === "submit" || target.type === "image")) {
        let form = target.form;
        if (form == null) throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
        // <button>/<input type="submit"> may override attributes of <form>
        // When grabbing the action from the element, it will have had the basename
        // prefixed to ensure non-JS scenarios work, so strip it since we'll
        // re-prefix in the router
        let attr = target.getAttribute("formaction") || form.getAttribute("action");
        action = attr ? (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(attr, basename) : null;
        method = target.getAttribute("formmethod") || form.getAttribute("method") || $9d75162fdeea70fe$var$defaultMethod;
        encType = $9d75162fdeea70fe$var$getFormEncType(target.getAttribute("formenctype")) || $9d75162fdeea70fe$var$getFormEncType(form.getAttribute("enctype")) || $9d75162fdeea70fe$var$defaultEncType;
        // Build a FormData object populated from a form and submitter
        formData = new FormData(form, target);
        // If this browser doesn't support the `FormData(el, submitter)` format,
        // then tack on the submitter value at the end.  This is a lightweight
        // solution that is not 100% spec compliant.  For complete support in older
        // browsers, consider using the `formdata-submitter-polyfill` package
        if (!$9d75162fdeea70fe$var$isFormDataSubmitterSupported()) {
            let { name: name, type: type, value: value } = target;
            if (type === "image") {
                let prefix = name ? name + "." : "";
                formData.append(prefix + "x", "0");
                formData.append(prefix + "y", "0");
            } else if (name) formData.append(name, value);
        }
    } else if ($9d75162fdeea70fe$var$isHtmlElement(target)) throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    else {
        method = $9d75162fdeea70fe$var$defaultMethod;
        action = null;
        encType = $9d75162fdeea70fe$var$defaultEncType;
        body = target;
    }
    // Send body for <Form encType="text/plain" so we encode it into text
    if (formData && encType === "text/plain") {
        body = formData;
        formData = undefined;
    }
    return {
        action: action,
        method: method.toLowerCase(),
        encType: encType,
        formData: formData,
        body: body
    };
}
const $9d75162fdeea70fe$var$_excluded = [
    "onClick",
    "relative",
    "reloadDocument",
    "replace",
    "state",
    "target",
    "to",
    "preventScrollReset",
    "unstable_viewTransition"
], $9d75162fdeea70fe$var$_excluded2 = [
    "aria-current",
    "caseSensitive",
    "className",
    "end",
    "style",
    "to",
    "unstable_viewTransition",
    "children"
], $9d75162fdeea70fe$var$_excluded3 = [
    "reloadDocument",
    "replace",
    "state",
    "method",
    "action",
    "onSubmit",
    "submit",
    "relative",
    "preventScrollReset",
    "unstable_viewTransition"
];
function $9d75162fdeea70fe$export$1f3f55432a00e06d(routes, opts) {
    return (0, $35fc6c0e1453dea6$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $9d75162fdeea70fe$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $35fc6c0e1453dea6$export$719fc203c4e16dee)({
            window: opts == null ? void 0 : opts.window
        }),
        hydrationData: (opts == null ? void 0 : opts.hydrationData) || $9d75162fdeea70fe$var$parseHydrationData(),
        routes: routes,
        mapRouteProperties: (0, $178516013a5ef3e1$export$52b333d321859367),
        window: opts == null ? void 0 : opts.window
    }).initialize();
}
function $9d75162fdeea70fe$export$1ba7ed8a3a7b3765(routes, opts) {
    return (0, $35fc6c0e1453dea6$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $9d75162fdeea70fe$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $35fc6c0e1453dea6$export$b71fdd3798280242)({
            window: opts == null ? void 0 : opts.window
        }),
        hydrationData: (opts == null ? void 0 : opts.hydrationData) || $9d75162fdeea70fe$var$parseHydrationData(),
        routes: routes,
        mapRouteProperties: (0, $178516013a5ef3e1$export$52b333d321859367),
        window: opts == null ? void 0 : opts.window
    }).initialize();
}
function $9d75162fdeea70fe$var$parseHydrationData() {
    var _window;
    let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
    if (state && state.errors) state = $9d75162fdeea70fe$var$_extends({}, state, {
        errors: $9d75162fdeea70fe$var$deserializeErrors(state.errors)
    });
    return state;
}
function $9d75162fdeea70fe$var$deserializeErrors(errors) {
    if (!errors) return null;
    let entries = Object.entries(errors);
    let serialized = {};
    for (let [key, val] of entries){
        // Hey you!  If you change this, please change the corresponding logic in
        // serializeErrors in react-router-dom/server.tsx :)
        if (val && val.__type === "RouteErrorResponse") serialized[key] = new (0, $35fc6c0e1453dea6$export$6c6580e81da25755)(val.status, val.statusText, val.data, val.internal === true);
        else if (val && val.__type === "Error") {
            // Attempt to reconstruct the right type of Error (i.e., ReferenceError)
            if (val.__subType) {
                let ErrorConstructor = window[val.__subType];
                if (typeof ErrorConstructor === "function") try {
                    // @ts-expect-error
                    let error = new ErrorConstructor(val.message);
                    // Wipe away the client-side stack trace.  Nothing to fill it in with
                    // because we don't serialize SSR stack traces for security reasons
                    error.stack = "";
                    serialized[key] = error;
                } catch (e) {
                // no-op - fall through and create a normal Error
                }
            }
            if (serialized[key] == null) {
                let error = new Error(val.message);
                // Wipe away the client-side stack trace.  Nothing to fill it in with
                // because we don't serialize SSR stack traces for security reasons
                error.stack = "";
                serialized[key] = error;
            }
        } else serialized[key] = val;
    }
    return serialized;
}
const $9d75162fdeea70fe$export$7ad602f0e94e62d1 = /*#__PURE__*/ $4rFIf.createContext({
    isTransitioning: false
});
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Components
////////////////////////////////////////////////////////////////////////////////
/**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const $9d75162fdeea70fe$var$START_TRANSITION = "startTransition";
const $9d75162fdeea70fe$var$startTransitionImpl = $4rFIf[$9d75162fdeea70fe$var$START_TRANSITION];
function $9d75162fdeea70fe$var$startTransitionSafe(cb) {
    if ($9d75162fdeea70fe$var$startTransitionImpl) $9d75162fdeea70fe$var$startTransitionImpl(cb);
    else cb();
}
class $9d75162fdeea70fe$var$Deferred {
    constructor(){
        this.status = "pending";
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = (value)=>{
                if (this.status === "pending") {
                    this.status = "resolved";
                    resolve(value);
                }
            };
            this.reject = (reason)=>{
                if (this.status === "pending") {
                    this.status = "rejected";
                    reject(reason);
                }
            };
        });
    }
}
/**
 * Given a Remix Router instance, render the appropriate UI
 */ function $9d75162fdeea70fe$export$323e4fc2fa4753fb(_ref) {
    let { fallbackElement: fallbackElement, router: router, future: future } = _ref;
    let [state, setStateImpl] = $4rFIf.useState(router.state);
    let [pendingState, setPendingState] = $4rFIf.useState();
    let [vtContext, setVtContext] = $4rFIf.useState({
        isTransitioning: false
    });
    let [renderDfd, setRenderDfd] = $4rFIf.useState();
    let [transition, setTransition] = $4rFIf.useState();
    let [interruption, setInterruption] = $4rFIf.useState();
    let { v7_startTransition: v7_startTransition } = future || {};
    let optInStartTransition = $4rFIf.useCallback((cb)=>{
        if (v7_startTransition) $9d75162fdeea70fe$var$startTransitionSafe(cb);
        else cb();
    }, [
        v7_startTransition
    ]);
    let setState = $4rFIf.useCallback((newState, _ref2)=>{
        let { unstable_viewTransitionOpts: viewTransitionOpts } = _ref2;
        if (!viewTransitionOpts || router.window == null || typeof router.window.document.startViewTransition !== "function") // Mid-navigation state update, or startViewTransition isn't available
        optInStartTransition(()=>setStateImpl(newState));
        else if (transition && renderDfd) {
            // Interrupting an in-progress transition, cancel and let everything flush
            // out, and then kick off a new transition from the interruption state
            renderDfd.resolve();
            transition.skipTransition();
            setInterruption({
                state: newState,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
            });
        } else {
            // Completed navigation update with opted-in view transitions, let 'er rip
            setPendingState(newState);
            setVtContext({
                isTransitioning: true,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
            });
        }
    }, [
        optInStartTransition,
        transition,
        renderDfd,
        router.window
    ]);
    // Need to use a layout effect here so we are subscribed early enough to
    // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
    $4rFIf.useLayoutEffect(()=>router.subscribe(setState), [
        router,
        setState
    ]);
    // When we start a view transition, create a Deferred we can use for the
    // eventual "completed" render
    $4rFIf.useEffect(()=>{
        if (vtContext.isTransitioning) setRenderDfd(new $9d75162fdeea70fe$var$Deferred());
    }, [
        vtContext.isTransitioning
    ]);
    // Once the deferred is created, kick off startViewTransition() to update the
    // DOM and then wait on the Deferred to resolve (indicating the DOM update has
    // happened)
    $4rFIf.useEffect(()=>{
        if (renderDfd && pendingState && router.window) {
            let newState = pendingState;
            let renderPromise = renderDfd.promise;
            let transition = router.window.document.startViewTransition(async ()=>{
                optInStartTransition(()=>setStateImpl(newState));
                await renderPromise;
            });
            transition.finished.finally(()=>{
                setRenderDfd(undefined);
                setTransition(undefined);
                setPendingState(undefined);
                setVtContext({
                    isTransitioning: false
                });
            });
            setTransition(transition);
        }
    }, [
        optInStartTransition,
        pendingState,
        renderDfd,
        router.window
    ]);
    // When the new location finally renders and is committed to the DOM, this
    // effect will run to resolve the transition
    $4rFIf.useEffect(()=>{
        if (renderDfd && pendingState && state.location.key === pendingState.location.key) renderDfd.resolve();
    }, [
        renderDfd,
        transition,
        state.location,
        pendingState
    ]);
    // If we get interrupted with a new navigation during a transition, we skip
    // the active transition, let it cleanup, then kick it off again here
    $4rFIf.useEffect(()=>{
        if (!vtContext.isTransitioning && interruption) {
            setPendingState(interruption.state);
            setVtContext({
                isTransitioning: true,
                currentLocation: interruption.currentLocation,
                nextLocation: interruption.nextLocation
            });
            setInterruption(undefined);
        }
    }, [
        vtContext.isTransitioning,
        interruption
    ]);
    let navigator = $4rFIf.useMemo(()=>{
        return {
            createHref: router.createHref,
            encodeLocation: router.encodeLocation,
            go: (n)=>router.navigate(n),
            push: (to, state, opts)=>router.navigate(to, {
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                }),
            replace: (to, state, opts)=>router.navigate(to, {
                    replace: true,
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                })
        };
    }, [
        router
    ]);
    let basename = router.basename || "/";
    let dataRouterContext = $4rFIf.useMemo(()=>({
            router: router,
            navigator: navigator,
            static: false,
            basename: basename
        }), [
        router,
        navigator,
        basename
    ]);
    // The fragment and {null} here are important!  We need them to keep React 18's
    // useId happy when we are server-rendering since we may have a <script> here
    // containing the hydrated server-side staticContext (from StaticRouterProvider).
    // useId relies on the component tree structure to generate deterministic id's
    // so we need to ensure it remains the same on the client even though
    // we don't need the <script> tag
    return /*#__PURE__*/ $4rFIf.createElement($4rFIf.Fragment, null, /*#__PURE__*/ $4rFIf.createElement((0, $178516013a5ef3e1$export$3add0d5dce533e2e).Provider, {
        value: dataRouterContext
    }, /*#__PURE__*/ $4rFIf.createElement((0, $178516013a5ef3e1$export$145dfa71566a64dc).Provider, {
        value: state
    }, /*#__PURE__*/ $4rFIf.createElement($9d75162fdeea70fe$export$7ad602f0e94e62d1.Provider, {
        value: vtContext
    }, /*#__PURE__*/ $4rFIf.createElement((0, $178516013a5ef3e1$export$55185c17a0fcbe46), {
        basename: basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: navigator
    }, state.initialized ? /*#__PURE__*/ $4rFIf.createElement($9d75162fdeea70fe$var$DataRoutes, {
        routes: router.routes,
        state: state
    }) : fallbackElement)))), null);
}
function $9d75162fdeea70fe$var$DataRoutes(_ref3) {
    let { routes: routes, state: state } = _ref3;
    return (0, $178516013a5ef3e1$export$5fcee62552a12fbf)(routes, undefined, state);
}
/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */ function $9d75162fdeea70fe$export$9ba4e89fdfa1fc54(_ref4) {
    let { basename: basename, children: children, future: future, window: window1 } = _ref4;
    let historyRef = $4rFIf.useRef();
    if (historyRef.current == null) historyRef.current = (0, $35fc6c0e1453dea6$export$719fc203c4e16dee)({
        window: window1,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $4rFIf.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $4rFIf.useCallback((newState)=>{
        v7_startTransition && $9d75162fdeea70fe$var$startTransitionImpl ? $9d75162fdeea70fe$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $4rFIf.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $4rFIf.createElement((0, $178516013a5ef3e1$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * A `<Router>` for use in web browsers. Stores the location in the hash
 * portion of the URL so it is not sent to the server.
 */ function $9d75162fdeea70fe$export$7221d69dcfc8e36b(_ref5) {
    let { basename: basename, children: children, future: future, window: window1 } = _ref5;
    let historyRef = $4rFIf.useRef();
    if (historyRef.current == null) historyRef.current = (0, $35fc6c0e1453dea6$export$b71fdd3798280242)({
        window: window1,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $4rFIf.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $4rFIf.useCallback((newState)=>{
        v7_startTransition && $9d75162fdeea70fe$var$startTransitionImpl ? $9d75162fdeea70fe$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $4rFIf.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $4rFIf.createElement((0, $178516013a5ef3e1$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * A `<Router>` that accepts a pre-instantiated history object. It's important
 * to note that using your own history object is highly discouraged and may add
 * two versions of the history library to your bundles unless you use the same
 * version of the history library that React Router uses internally.
 */ function $9d75162fdeea70fe$export$eefb0c834599897e(_ref6) {
    let { basename: basename, children: children, future: future, history: history } = _ref6;
    let [state, setStateImpl] = $4rFIf.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $4rFIf.useCallback((newState)=>{
        v7_startTransition && $9d75162fdeea70fe$var$startTransitionImpl ? $9d75162fdeea70fe$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $4rFIf.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $4rFIf.createElement((0, $178516013a5ef3e1$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
const $9d75162fdeea70fe$var$isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const $9d75162fdeea70fe$var$ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
/**
 * The public API for rendering a history-aware `<a>`.
 */ const $9d75162fdeea70fe$export$a6c7ac8248d6e38a = /*#__PURE__*/ $4rFIf.forwardRef(function LinkWithRef(_ref7, ref) {
    let { onClick: onClick, relative: relative, reloadDocument: reloadDocument, replace: replace, state: state, target: target, to: to, preventScrollReset: preventScrollReset, unstable_viewTransition: unstable_viewTransition } = _ref7, rest = $9d75162fdeea70fe$var$_objectWithoutPropertiesLoose(_ref7, $9d75162fdeea70fe$var$_excluded);
    let { basename: basename } = $4rFIf.useContext((0, $178516013a5ef3e1$export$26749e8557646306));
    // Rendered into <a href> for absolute URLs
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && $9d75162fdeea70fe$var$ABSOLUTE_URL_REGEX.test(to)) {
        // Render the absolute href server- and client-side
        absoluteHref = to;
        // Only check for external origins client-side
        if ($9d75162fdeea70fe$var$isBrowser) try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) // Strip the protocol/origin/basename for same-origin absolute URLs
            to = path + targetUrl.search + targetUrl.hash;
            else isExternal = true;
        } catch (e) {}
    }
    // Rendered into <a href> for relative URLs
    let href = (0, $178516013a5ef3e1$export$b66bb29c5006f12f)(to, {
        relative: relative
    });
    let internalOnClick = $9d75162fdeea70fe$export$67621102c14d847(to, {
        replace: replace,
        state: state,
        target: target,
        preventScrollReset: preventScrollReset,
        relative: relative,
        unstable_viewTransition: unstable_viewTransition
    });
    function handleClick(event) {
        if (onClick) onClick(event);
        if (!event.defaultPrevented) internalOnClick(event);
    }
    return(/*#__PURE__*/ // eslint-disable-next-line jsx-a11y/anchor-has-content
    $4rFIf.createElement("a", $9d75162fdeea70fe$var$_extends({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref: ref,
        target: target
    })));
});
/**
 * A `<Link>` wrapper that knows if it's "active" or not.
 */ const $9d75162fdeea70fe$export$b0d92dbee9b5b60d = /*#__PURE__*/ $4rFIf.forwardRef(function NavLinkWithRef(_ref8, ref) {
    let { "aria-current": ariaCurrentProp = "page", caseSensitive: caseSensitive = false, className: classNameProp = "", end: end = false, style: styleProp, to: to, unstable_viewTransition: unstable_viewTransition, children: children } = _ref8, rest = $9d75162fdeea70fe$var$_objectWithoutPropertiesLoose(_ref8, $9d75162fdeea70fe$var$_excluded2);
    let path = (0, $178516013a5ef3e1$export$e75d2a2d1b3c245b)(to, {
        relative: rest.relative
    });
    let location = (0, $178516013a5ef3e1$export$45d76561a5302f2b)();
    let routerState = $4rFIf.useContext((0, $178516013a5ef3e1$export$145dfa71566a64dc));
    let { navigator: navigator } = $4rFIf.useContext((0, $178516013a5ef3e1$export$26749e8557646306));
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    $9d75162fdeea70fe$export$328fe15191788e7f(path) && unstable_viewTransition === true;
    let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
    }
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
        isActive: isActive,
        isPending: isPending,
        isTransitioning: isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : undefined;
    let className;
    if (typeof classNameProp === "function") className = classNameProp(renderProps);
    else // If the className prop is not a function, we use a default `active`
    // class for <NavLink />s that are active. In v5 `active` was the default
    // value for `activeClassName`, but we are removing that API and can still
    // use the old default behavior for a cleaner upgrade path and keep the
    // simple styling rules working as they currently do.
    className = [
        classNameProp,
        isActive ? "active" : null,
        isPending ? "pending" : null,
        isTransitioning ? "transitioning" : null
    ].filter(Boolean).join(" ");
    let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /*#__PURE__*/ $4rFIf.createElement($9d75162fdeea70fe$export$a6c7ac8248d6e38a, $9d75162fdeea70fe$var$_extends({}, rest, {
        "aria-current": ariaCurrent,
        className: className,
        ref: ref,
        style: style,
        to: to,
        unstable_viewTransition: unstable_viewTransition
    }), typeof children === "function" ? children(renderProps) : children);
});
/**
 * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except
 * that the interaction with the server is with `fetch` instead of new document
 * requests, allowing components to add nicer UX to the page as the form is
 * submitted and returns with data.
 */ const $9d75162fdeea70fe$export$a7fed597f4b8afd8 = /*#__PURE__*/ $4rFIf.forwardRef((props, ref)=>{
    let submit = $9d75162fdeea70fe$export$47c85c6e3a081d3();
    return /*#__PURE__*/ $4rFIf.createElement($9d75162fdeea70fe$var$FormImpl, $9d75162fdeea70fe$var$_extends({}, props, {
        submit: submit,
        ref: ref
    }));
});
const $9d75162fdeea70fe$var$FormImpl = /*#__PURE__*/ $4rFIf.forwardRef((_ref9, forwardedRef)=>{
    let { reloadDocument: reloadDocument, replace: replace, state: state, method: method = $9d75162fdeea70fe$var$defaultMethod, action: action, onSubmit: onSubmit, submit: submit, relative: relative, preventScrollReset: preventScrollReset, unstable_viewTransition: unstable_viewTransition } = _ref9, props = $9d75162fdeea70fe$var$_objectWithoutPropertiesLoose(_ref9, $9d75162fdeea70fe$var$_excluded3);
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let formAction = $9d75162fdeea70fe$export$89a6bd6db0d97c56(action, {
        relative: relative
    });
    let submitHandler = (event)=>{
        onSubmit && onSubmit(event);
        if (event.defaultPrevented) return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
        submit(submitter || event.currentTarget, {
            method: submitMethod,
            replace: replace,
            state: state,
            relative: relative,
            preventScrollReset: preventScrollReset,
            unstable_viewTransition: unstable_viewTransition
        });
    };
    return /*#__PURE__*/ $4rFIf.createElement("form", $9d75162fdeea70fe$var$_extends({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
});
/**
 * This component will emulate the browser's scroll restoration on location
 * changes.
 */ function $9d75162fdeea70fe$export$11aac1aab828f1fa(_ref10) {
    let { getKey: getKey, storageKey: storageKey } = _ref10;
    $9d75162fdeea70fe$export$25057cfe5591e3e9({
        getKey: getKey,
        storageKey: storageKey
    });
    return null;
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Hooks
////////////////////////////////////////////////////////////////////////////////
var $9d75162fdeea70fe$var$DataRouterHook;
(function(DataRouterHook) {
    DataRouterHook["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook["UseSubmit"] = "useSubmit";
    DataRouterHook["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook["UseFetcher"] = "useFetcher";
    DataRouterHook["useViewTransitionState"] = "useViewTransitionState";
})($9d75162fdeea70fe$var$DataRouterHook || ($9d75162fdeea70fe$var$DataRouterHook = {}));
var $9d75162fdeea70fe$var$DataRouterStateHook;
(function(DataRouterStateHook) {
    DataRouterStateHook["UseFetchers"] = "useFetchers";
    DataRouterStateHook["UseScrollRestoration"] = "useScrollRestoration";
})($9d75162fdeea70fe$var$DataRouterStateHook || ($9d75162fdeea70fe$var$DataRouterStateHook = {}));
function $9d75162fdeea70fe$var$getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function $9d75162fdeea70fe$var$useDataRouterContext(hookName) {
    let ctx = $4rFIf.useContext((0, $178516013a5ef3e1$export$3add0d5dce533e2e));
    !ctx && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return ctx;
}
function $9d75162fdeea70fe$var$useDataRouterState(hookName) {
    let state = $4rFIf.useContext((0, $178516013a5ef3e1$export$145dfa71566a64dc));
    !state && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    return state;
}
/**
 * Handles the click behavior for router `<Link>` components. This is useful if
 * you need to create custom `<Link>` components with the same click behavior we
 * use in our exported `<Link>`.
 */ function $9d75162fdeea70fe$export$67621102c14d847(to, _temp) {
    let { target: target, replace: replaceProp, state: state, preventScrollReset: preventScrollReset, relative: relative, unstable_viewTransition: unstable_viewTransition } = _temp === void 0 ? {} : _temp;
    let navigate = (0, $178516013a5ef3e1$export$9770f232ac06a008)();
    let location = (0, $178516013a5ef3e1$export$45d76561a5302f2b)();
    let path = (0, $178516013a5ef3e1$export$e75d2a2d1b3c245b)(to, {
        relative: relative
    });
    return $4rFIf.useCallback((event)=>{
        if ($9d75162fdeea70fe$var$shouldProcessLinkClick(event, target)) {
            event.preventDefault();
            // If the URL hasn't changed, a regular <a> will do a replace instead of
            // a push, so do the same here unless the replace prop is explicitly set
            let replace = replaceProp !== undefined ? replaceProp : (0, $35fc6c0e1453dea6$export$fe53371bee54353d)(location) === (0, $35fc6c0e1453dea6$export$fe53371bee54353d)(path);
            navigate(to, {
                replace: replace,
                state: state,
                preventScrollReset: preventScrollReset,
                relative: relative,
                unstable_viewTransition: unstable_viewTransition
            });
        }
    }, [
        location,
        navigate,
        path,
        replaceProp,
        state,
        target,
        to,
        preventScrollReset,
        relative,
        unstable_viewTransition
    ]);
}
/**
 * A convenient wrapper for reading and writing search parameters via the
 * URLSearchParams interface.
 */ function $9d75162fdeea70fe$export$f1a78c17382fe22a(defaultInit) {
    let defaultSearchParamsRef = $4rFIf.useRef($9d75162fdeea70fe$export$a2e4e2dcc7b1f22f(defaultInit));
    let hasSetSearchParamsRef = $4rFIf.useRef(false);
    let location = (0, $178516013a5ef3e1$export$45d76561a5302f2b)();
    let searchParams = $4rFIf.useMemo(()=>// Only merge in the defaults if we haven't yet called setSearchParams.
        // Once we call that we want those to take precedence, otherwise you can't
        // remove a param with setSearchParams({}) if it has an initial value
        $9d75162fdeea70fe$var$getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [
        location.search
    ]);
    let navigate = (0, $178516013a5ef3e1$export$9770f232ac06a008)();
    let setSearchParams = $4rFIf.useCallback((nextInit, navigateOptions)=>{
        const newSearchParams = $9d75162fdeea70fe$export$a2e4e2dcc7b1f22f(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
        hasSetSearchParamsRef.current = true;
        navigate("?" + newSearchParams, navigateOptions);
    }, [
        navigate,
        searchParams
    ]);
    return [
        searchParams,
        setSearchParams
    ];
}
function $9d75162fdeea70fe$var$validateClientSideSubmission() {
    if (typeof document === "undefined") throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
}
/**
 * Returns a function that may be used to programmatically submit a form (or
 * some arbitrary data) to the server.
 */ function $9d75162fdeea70fe$export$47c85c6e3a081d3() {
    let { router: router } = $9d75162fdeea70fe$var$useDataRouterContext($9d75162fdeea70fe$var$DataRouterHook.UseSubmit);
    let { basename: basename } = $4rFIf.useContext((0, $178516013a5ef3e1$export$26749e8557646306));
    let currentRouteId = (0, $178516013a5ef3e1$export$5fc8298006ad9e58)();
    return $4rFIf.useCallback(function(target, options) {
        if (options === void 0) options = {};
        $9d75162fdeea70fe$var$validateClientSideSubmission();
        let { action: action, method: method, encType: encType, formData: formData, body: body } = $9d75162fdeea70fe$var$getFormSubmissionInfo(target, basename);
        router.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData: formData,
            body: body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            state: options.state,
            fromRouteId: currentRouteId,
            unstable_viewTransition: options.unstable_viewTransition
        });
    }, [
        router,
        basename,
        currentRouteId
    ]);
}
/**
 * Returns the implementation for fetcher.submit
 */ function $9d75162fdeea70fe$var$useSubmitFetcher(fetcherKey, fetcherRouteId) {
    let { router: router } = $9d75162fdeea70fe$var$useDataRouterContext($9d75162fdeea70fe$var$DataRouterHook.UseSubmitFetcher);
    let { basename: basename } = $4rFIf.useContext((0, $178516013a5ef3e1$export$26749e8557646306));
    return $4rFIf.useCallback(function(target, options) {
        if (options === void 0) options = {};
        $9d75162fdeea70fe$var$validateClientSideSubmission();
        let { action: action, method: method, encType: encType, formData: formData, body: body } = $9d75162fdeea70fe$var$getFormSubmissionInfo(target, basename);
        !(fetcherRouteId != null) && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
        router.fetch(fetcherKey, fetcherRouteId, options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData: formData,
            body: body,
            formMethod: options.method || method,
            formEncType: options.encType || encType
        });
    }, [
        router,
        basename,
        fetcherKey,
        fetcherRouteId
    ]);
}
// v7: Eventually we should deprecate this entirely in favor of using the
// router method directly?
function $9d75162fdeea70fe$export$89a6bd6db0d97c56(action, _temp2) {
    let { relative: relative } = _temp2 === void 0 ? {} : _temp2;
    let { basename: basename } = $4rFIf.useContext((0, $178516013a5ef3e1$export$26749e8557646306));
    let routeContext = $4rFIf.useContext((0, $178516013a5ef3e1$export$9072aa6dd1f93057));
    !routeContext && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let [match] = routeContext.matches.slice(-1);
    // Shallow clone path so we can modify it below, otherwise we modify the
    // object referenced by useMemo inside useResolvedPath
    let path = $9d75162fdeea70fe$var$_extends({}, (0, $178516013a5ef3e1$export$e75d2a2d1b3c245b)(action ? action : ".", {
        relative: relative
    }));
    // Previously we set the default action to ".". The problem with this is that
    // `useResolvedPath(".")` excludes search params of the resolved URL. This is
    // the intended behavior of when "." is specifically provided as
    // the form action, but inconsistent w/ browsers when the action is omitted.
    // https://github.com/remix-run/remix/issues/927
    let location = (0, $178516013a5ef3e1$export$45d76561a5302f2b)();
    if (action == null) {
        // Safe to write to this directly here since if action was undefined, we
        // would have called useResolvedPath(".") which will never include a search
        path.search = location.search;
        // When grabbing search params from the URL, remove the automatically
        // inserted ?index param so we match the useResolvedPath search behavior
        // which would not include ?index
        if (match.route.index) {
            let params = new URLSearchParams(path.search);
            params.delete("index");
            path.search = params.toString() ? "?" + params.toString() : "";
        }
    }
    if ((!action || action === ".") && match.route.index) path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    // If we're operating within a basename, prepend it to the pathname prior
    // to creating the form action.  If this is a root navigation, then just use
    // the raw basename which allows the basename to have full control over the
    // presence of a trailing slash on root actions
    if (basename !== "/") path.pathname = path.pathname === "/" ? basename : (0, $35fc6c0e1453dea6$export$86d9a7913e44197e)([
        basename,
        path.pathname
    ]);
    return (0, $35fc6c0e1453dea6$export$fe53371bee54353d)(path);
}
function $9d75162fdeea70fe$var$createFetcherForm(fetcherKey, routeId) {
    let FetcherForm = /*#__PURE__*/ $4rFIf.forwardRef((props, ref)=>{
        let submit = $9d75162fdeea70fe$var$useSubmitFetcher(fetcherKey, routeId);
        return /*#__PURE__*/ $4rFIf.createElement($9d75162fdeea70fe$var$FormImpl, $9d75162fdeea70fe$var$_extends({}, props, {
            ref: ref,
            submit: submit
        }));
    });
    return FetcherForm;
}
let $9d75162fdeea70fe$var$fetcherId = 0;
// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`
/**
 * Interacts with route loaders and actions without causing a navigation. Great
 * for any interaction that stays on the same page.
 */ function $9d75162fdeea70fe$export$5b0d2d9a9921565a() {
    var _route$matches;
    let { router: router } = $9d75162fdeea70fe$var$useDataRouterContext($9d75162fdeea70fe$var$DataRouterHook.UseFetcher);
    let route = $4rFIf.useContext((0, $178516013a5ef3e1$export$9072aa6dd1f93057));
    !route && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
    !(routeId != null) && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let [fetcherKey] = $4rFIf.useState(()=>String(++$9d75162fdeea70fe$var$fetcherId));
    let [Form] = $4rFIf.useState(()=>{
        !routeId && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
        return $9d75162fdeea70fe$var$createFetcherForm(fetcherKey, routeId);
    });
    let [load] = $4rFIf.useState(()=>(href)=>{
            !router && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
            !routeId && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
            router.fetch(fetcherKey, routeId, href);
        });
    let submit = $9d75162fdeea70fe$var$useSubmitFetcher(fetcherKey, routeId);
    let fetcher = router.getFetcher(fetcherKey);
    let fetcherWithComponents = $4rFIf.useMemo(()=>$9d75162fdeea70fe$var$_extends({
            Form: Form,
            submit: submit,
            load: load
        }, fetcher), [
        fetcher,
        Form,
        submit,
        load
    ]);
    $4rFIf.useEffect(()=>{
        // Is this busted when the React team gets real weird and calls effects
        // twice on mount?  We really just need to garbage collect here when this
        // fetcher is no longer around.
        return ()=>{
            if (!router) {
                console.warn("No router available to clean up from useFetcher()");
                return;
            }
            router.deleteFetcher(fetcherKey);
        };
    }, [
        router,
        fetcherKey
    ]);
    return fetcherWithComponents;
}
/**
 * Provides all fetchers currently on the page. Useful for layouts and parent
 * routes that need to provide pending/optimistic UI regarding the fetch.
 */ function $9d75162fdeea70fe$export$fa996778a3a31087() {
    let state = $9d75162fdeea70fe$var$useDataRouterState($9d75162fdeea70fe$var$DataRouterStateHook.UseFetchers);
    return [
        ...state.fetchers.values()
    ];
}
const $9d75162fdeea70fe$var$SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
let $9d75162fdeea70fe$var$savedScrollPositions = {};
/**
 * When rendered inside a RouterProvider, will restore scroll positions on navigations
 */ function $9d75162fdeea70fe$export$25057cfe5591e3e9(_temp3) {
    let { getKey: getKey, storageKey: storageKey } = _temp3 === void 0 ? {} : _temp3;
    let { router: router } = $9d75162fdeea70fe$var$useDataRouterContext($9d75162fdeea70fe$var$DataRouterHook.UseScrollRestoration);
    let { restoreScrollPosition: restoreScrollPosition, preventScrollReset: preventScrollReset } = $9d75162fdeea70fe$var$useDataRouterState($9d75162fdeea70fe$var$DataRouterStateHook.UseScrollRestoration);
    let { basename: basename } = $4rFIf.useContext((0, $178516013a5ef3e1$export$26749e8557646306));
    let location = (0, $178516013a5ef3e1$export$45d76561a5302f2b)();
    let matches = (0, $178516013a5ef3e1$export$2378eb7f5ff86053)();
    let navigation = (0, $178516013a5ef3e1$export$d0fd4b7106de2769)();
    // Trigger manual scroll restoration while we're active
    $4rFIf.useEffect(()=>{
        window.history.scrollRestoration = "manual";
        return ()=>{
            window.history.scrollRestoration = "auto";
        };
    }, []);
    // Save positions on pagehide
    $9d75162fdeea70fe$var$usePageHide($4rFIf.useCallback(()=>{
        if (navigation.state === "idle") {
            let key = (getKey ? getKey(location, matches) : null) || location.key;
            $9d75162fdeea70fe$var$savedScrollPositions[key] = window.scrollY;
        }
        try {
            sessionStorage.setItem(storageKey || $9d75162fdeea70fe$var$SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify($9d75162fdeea70fe$var$savedScrollPositions));
        } catch (error) {}
        window.history.scrollRestoration = "auto";
    }, [
        storageKey,
        getKey,
        navigation.state,
        location,
        matches
    ]));
    // Read in any saved scroll locations
    if (typeof document !== "undefined") {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $4rFIf.useLayoutEffect(()=>{
            try {
                let sessionPositions = sessionStorage.getItem(storageKey || $9d75162fdeea70fe$var$SCROLL_RESTORATION_STORAGE_KEY);
                if (sessionPositions) $9d75162fdeea70fe$var$savedScrollPositions = JSON.parse(sessionPositions);
            } catch (e) {
            // no-op, use default empty object
            }
        }, [
            storageKey
        ]);
        // Enable scroll restoration in the router
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $4rFIf.useLayoutEffect(()=>{
            let getKeyWithoutBasename = getKey && basename !== "/" ? (location, matches)=>getKey($9d75162fdeea70fe$var$_extends({}, location, {
                    pathname: (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(location.pathname, basename) || location.pathname
                }), matches) : getKey;
            let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration($9d75162fdeea70fe$var$savedScrollPositions, ()=>window.scrollY, getKeyWithoutBasename);
            return ()=>disableScrollRestoration && disableScrollRestoration();
        }, [
            router,
            basename,
            getKey
        ]);
        // Restore scrolling when state.restoreScrollPosition changes
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $4rFIf.useLayoutEffect(()=>{
            // Explicit false means don't do anything (used for submissions)
            if (restoreScrollPosition === false) return;
            // been here before, scroll to it
            if (typeof restoreScrollPosition === "number") {
                window.scrollTo(0, restoreScrollPosition);
                return;
            }
            // try to scroll to the hash
            if (location.hash) {
                let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
                if (el) {
                    el.scrollIntoView();
                    return;
                }
            }
            // Don't reset if this navigation opted out
            if (preventScrollReset === true) return;
            // otherwise go to the top on new locations
            window.scrollTo(0, 0);
        }, [
            location,
            restoreScrollPosition,
            preventScrollReset
        ]);
    }
}
/**
 * Setup a callback to be fired on the window's `beforeunload` event. This is
 * useful for saving some data to `window.localStorage` just before the page
 * refreshes.
 *
 * Note: The `callback` argument should be a function created with
 * `React.useCallback()`.
 */ function $9d75162fdeea70fe$export$c0a586b329cae57d(callback, options) {
    let { capture: capture } = options || {};
    $4rFIf.useEffect(()=>{
        let opts = capture != null ? {
            capture: capture
        } : undefined;
        window.addEventListener("beforeunload", callback, opts);
        return ()=>{
            window.removeEventListener("beforeunload", callback, opts);
        };
    }, [
        callback,
        capture
    ]);
}
/**
 * Setup a callback to be fired on the window's `pagehide` event. This is
 * useful for saving some data to `window.localStorage` just before the page
 * refreshes.  This event is better supported than beforeunload across browsers.
 *
 * Note: The `callback` argument should be a function created with
 * `React.useCallback()`.
 */ function $9d75162fdeea70fe$var$usePageHide(callback, options) {
    let { capture: capture } = options || {};
    $4rFIf.useEffect(()=>{
        let opts = capture != null ? {
            capture: capture
        } : undefined;
        window.addEventListener("pagehide", callback, opts);
        return ()=>{
            window.removeEventListener("pagehide", callback, opts);
        };
    }, [
        callback,
        capture
    ]);
}
/**
 * Wrapper around useBlocker to show a window.confirm prompt to users instead
 * of building a custom UI with useBlocker.
 *
 * Warning: This has *a lot of rough edges* and behaves very differently (and
 * very incorrectly in some cases) across browsers if user click addition
 * back/forward navigations while the confirm is open.  Use at your own risk.
 */ function $9d75162fdeea70fe$export$39f4eb3dbd812741(_ref11) {
    let { when: when, message: message } = _ref11;
    let blocker = (0, $178516013a5ef3e1$export$2af03a1de5c0910)(when);
    $4rFIf.useEffect(()=>{
        if (blocker.state === "blocked") {
            let proceed = window.confirm(message);
            if (proceed) // This timeout is needed to avoid a weird "race" on POP navigations
            // between the `window.history` revert navigation and the result of
            // `window.confirm`
            setTimeout(blocker.proceed, 0);
            else blocker.reset();
        }
    }, [
        blocker,
        message
    ]);
    $4rFIf.useEffect(()=>{
        if (blocker.state === "blocked" && !when) blocker.reset();
    }, [
        blocker,
        when
    ]);
}
/**
 * Return a boolean indicating if there is an active view transition to the
 * given href.  You can use this value to render CSS classes or viewTransitionName
 * styles onto your elements
 *
 * @param href The destination href
 * @param [opts.relative] Relative routing type ("route" | "path")
 */ function $9d75162fdeea70fe$export$328fe15191788e7f(to, opts) {
    if (opts === void 0) opts = {};
    let vtContext = $4rFIf.useContext($9d75162fdeea70fe$export$7ad602f0e94e62d1);
    !(vtContext != null) && (0, $35fc6c0e1453dea6$export$3e9cee6b33872309)(false);
    let { basename: basename } = $9d75162fdeea70fe$var$useDataRouterContext($9d75162fdeea70fe$var$DataRouterHook.useViewTransitionState);
    let path = (0, $178516013a5ef3e1$export$e75d2a2d1b3c245b)(to, {
        relative: opts.relative
    });
    if (!vtContext.isTransitioning) return false;
    let currentPath = (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = (0, $35fc6c0e1453dea6$export$b69e3301ce081aa3)(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    // Transition is active if we're going to or coming from the indicated
    // destination.  This ensures that other PUSH navigations that reverse
    // an indicated transition apply.  I.e., on the list view you have:
    //
    //   <NavLink to="/details/1" unstable_viewTransition>
    //
    // If you click the breadcrumb back to the list view:
    //
    //   <NavLink to="/list" unstable_viewTransition>
    //
    // We should apply the transition because it's indicated as active going
    // from /list -> /details/1 and therefore should be active on the reverse
    // (even though this isn't strictly a POP reverse)
    return (0, $35fc6c0e1453dea6$export$81336c211d5ff295)(path.pathname, nextPath) != null || (0, $35fc6c0e1453dea6$export$81336c211d5ff295)(path.pathname, currentPath) != null;
}


/**
 * Find an element with the given HTML tag and selector, raising an exception
 * if it's not found.
 *
 * @param tagName The name of the element's HTML tag.
 * @param selector The selector for the element, not including its HTML tag.
 * @param parent The parent node to search within (defaults to `document`).
 */ function $65f7f0dcdebfaa46$export$bad8ef72755038c6(tagName, selector, parent = document) {
    const finalSelector = `${tagName}${selector}`;
    const node = parent.querySelector(finalSelector);
    if (!node) throw new Error(`Couldn't find any elements matching "${finalSelector}"`);
    return node;
}


/**
 * Assert that the given argument isn't null and return it. Throw
 * an exception otherwise.
 *
 * This is primarily useful for situations where we're unable to
 * statically verify that something isn't null (e.g. due to the limitations
 * of typings we didn't write) but are sure it won't be in practice.
 */ function $68dfc0e667d126bb$export$4b7ba0a4d1fec0b8(thing) {
    if (thing === null) throw new Error("Assertion failure, expected argument to not be null!");
    return thing;
}
function $68dfc0e667d126bb$export$1282158678cd0974(thing) {
    if (thing === undefined) throw new Error("Assertion failure, expected argument to not be undefined!");
    return thing;
}
function $68dfc0e667d126bb$export$25bd2ba92e0bfde8(msg = "Code should never reach this point!") {
    throw new Error(msg);
}





var $4rFIf = parcelRequire("4rFIf");
var $b7974fe239754330$exports = {};
"use strict";
Object.defineProperty($b7974fe239754330$exports, "__esModule", {
    value: true
});
$b7974fe239754330$exports["default"] = $b7974fe239754330$var$_default;
$b7974fe239754330$exports.setCookie = $b7974fe239754330$exports.getCookie = void 0;
$b7974fe239754330$exports.stringifyOptions = $b7974fe239754330$var$stringifyOptions;

var $4rFIf = parcelRequire("4rFIf");
function $b7974fe239754330$var$_slicedToArray(arr, i) {
    return $b7974fe239754330$var$_arrayWithHoles(arr) || $b7974fe239754330$var$_iterableToArrayLimit(arr, i) || $b7974fe239754330$var$_unsupportedIterableToArray(arr, i) || $b7974fe239754330$var$_nonIterableRest();
}
function $b7974fe239754330$var$_nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function $b7974fe239754330$var$_unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return $b7974fe239754330$var$_arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $b7974fe239754330$var$_arrayLikeToArray(o, minLen);
}
function $b7974fe239754330$var$_arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function $b7974fe239754330$var$_iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function $b7974fe239754330$var$_arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function $b7974fe239754330$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $b7974fe239754330$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $b7974fe239754330$var$ownKeys(Object(source), !0).forEach(function(key) {
            $b7974fe239754330$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $b7974fe239754330$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $b7974fe239754330$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var $b7974fe239754330$var$isBrowser = typeof window !== "undefined";
function $b7974fe239754330$var$stringifyOptions(options) {
    return Object.keys(options).reduce(function(acc, key) {
        if (key === "days") return acc;
        else {
            if (options[key] === false) return acc;
            else if (options[key] === true) return "".concat(acc, "; ").concat(key);
            else return "".concat(acc, "; ").concat(key, "=").concat(options[key]);
        }
    }, "");
}
var $b7974fe239754330$var$setCookie = function setCookie(name, value, options) {
    if (!$b7974fe239754330$var$isBrowser) return;
    var optionsWithDefaults = $b7974fe239754330$var$_objectSpread({
        days: 7,
        path: "/"
    }, options);
    var expires = new Date(Date.now() + optionsWithDefaults.days * 864e5).toUTCString();
    document.cookie = name + "=" + encodeURIComponent(value) + "; expires=" + expires + $b7974fe239754330$var$stringifyOptions(optionsWithDefaults);
};
$b7974fe239754330$exports.setCookie = $b7974fe239754330$var$setCookie;
var $b7974fe239754330$var$getCookie = function getCookie(name) {
    var initialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    return $b7974fe239754330$var$isBrowser && document.cookie.split("; ").reduce(function(r, v) {
        var parts = v.split("=");
        return parts[0] === name ? decodeURIComponent(parts[1]) : r;
    }, "") || initialValue;
};
$b7974fe239754330$exports.getCookie = $b7974fe239754330$var$getCookie;
function $b7974fe239754330$var$_default(key, initialValue) {
    var _useState = (0, $4rFIf.useState)(function() {
        return $b7974fe239754330$var$getCookie(key, initialValue);
    }), _useState2 = $b7974fe239754330$var$_slicedToArray(_useState, 2), item = _useState2[0], setItem = _useState2[1];
    var updateItem = function updateItem(value, options) {
        setItem(value);
        $b7974fe239754330$var$setCookie(key, value, options);
    };
    return [
        item,
        updateItem
    ];
}


const $5c86a1ebbed41112$export$a0fd8390cfe8ae69 = /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createContext(null);
function $5c86a1ebbed41112$export$87091915187a1a85({ children: children }) {
    let [isAuthenticated, setAuthentication] = (0, (/*@__PURE__*/$parcel$interopDefault($b7974fe239754330$exports)))("auth", "");
    let signin = (password, callback)=>{
        setAuthentication(password);
        callback();
    };
    let value = {
        isAuthenticated: isAuthenticated,
        signin: signin
    };
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($5c86a1ebbed41112$export$a0fd8390cfe8ae69.Provider, {
        value: value
    }, children);
}



var $4rFIf = parcelRequire("4rFIf");

var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $5348bbfd2df69362$export$5e365fc0c9d145f8 = new (0, $ezVNZ.QueryFiles)(`eviction-time-series`);
function $5348bbfd2df69362$export$33ff2f0f6f46f0e(row) {
    return {
        day: row.day.toISOString(),
        nyc_holdover_filings: (0, $dQEow.toInt)(row.nyc_holdover_filings),
        nyc_holdover_res_filings: (0, $dQEow.toInt)(row.nyc_holdover_res_filings),
        nyc_nonpay_filings: (0, $dQEow.toInt)(row.nyc_nonpay_filings),
        nyc_nonpay_res_filings: (0, $dQEow.toInt)(row.nyc_nonpay_res_filings),
        outside_nyc_holdover_filings: (0, $dQEow.toInt)(row.outside_nyc_holdover_filings),
        outside_nyc_nonpay_filings: (0, $dQEow.toInt)(row.outside_nyc_nonpay_filings),
        total_filings: (0, $dQEow.toInt)(row.total_filings)
    };
}
function $5348bbfd2df69362$var$getEvictionTimeSeriesCsvHeader() {
    return [
        "day",
        "nyc_holdover_filings",
        "nyc_holdover_res_filings",
        "nyc_nonpay_filings",
        "nyc_nonpay_res_filings",
        "outside_nyc_holdover_filings",
        "outside_nyc_nonpay_filings",
        "total_filings"
    ];
}
function $5348bbfd2df69362$var$toEvictionTimeSeriesCsvRow(row) {
    return [
        row.day.substr(0, 10),
        row.nyc_holdover_filings.toString(),
        row.nyc_holdover_res_filings.toString(),
        row.nyc_nonpay_filings.toString(),
        row.nyc_nonpay_res_filings.toString(),
        row.outside_nyc_holdover_filings.toString(),
        row.outside_nyc_nonpay_filings.toString(),
        row.total_filings.toString()
    ];
}
const $5348bbfd2df69362$export$5d3fc30cb757c39f = {
    files: $5348bbfd2df69362$export$5e365fc0c9d145f8,
    sqlToRow: $5348bbfd2df69362$export$33ff2f0f6f46f0e,
    csvHeader: $5348bbfd2df69362$var$getEvictionTimeSeriesCsvHeader(),
    toCsvRow: $5348bbfd2df69362$var$toEvictionTimeSeriesCsvRow
};



var $c0nCP = parcelRequire("c0nCP");


var $4rFIf = parcelRequire("4rFIf");

var $1WhnP = parcelRequire("1WhnP");

var $f5z94 = parcelRequire("f5z94");

var $5ayhH = parcelRequire("5ayhH");

/**
 * Take the array of data rows and get the date for the latest week we
 * have data and subtract a given number of weeks. This is used to draw
 * the rectangle on the graphs for the period where we have incomplete
 * data, due to repoting lags. The result is a string in the same format
 * as the "week" dates stored in the input data.
 */ function $17430b689f99735b$var$getEvictionDataLagDate(data, lagDays) {
    const maxEvictionDateNum = Math.max.apply(Math, data.map((row)=>Date.parse(row.day)));
    let returnDate = new Date(maxEvictionDateNum);
    returnDate.setDate(returnDate.getDate() - lagDays);
    returnDate.setHours(0, 0, 0, 0);
    return returnDate.toISOString();
}
const $17430b689f99735b$var$EvictionViz = (props)=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $5348bbfd2df69362$export$5e365fc0c9d145f8).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: `${(0, $5ayhH.VIZ_TIME_SERIES_CLASS)} ${(0, $5ayhH.VIZ_TIME_SERIES_SHORT_CLASS)}`
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($17430b689f99735b$var$EvictionVizWithValues, {
            values: values,
            ...props
        }));
};
const $17430b689f99735b$var$EvictionVizWithValues = ({ values: values, fieldName: fieldName, title: title, timeUnit: timeUnit, height: height })=>{
    values = values.filter(// If we are viewing data by week, let's grab data since the first Sunday of Jan 2020
    // Otherwise, we can grab data from 1/1/2020 onwards
    (row)=>row.day >= (timeUnit === "yearweek" ? "2020-01-05 00:00:00" : "2020-01-01 00:00:00"));
    const casesSinceCovid = values.filter((row)=>row.day >= "2020-03-23 00:00:00").reduce((total, row)=>total + row[fieldName], 0);
    const EvictionDataLagStart = $17430b689f99735b$var$getEvictionDataLagDate(values, 30); // 4 weeks for lag
    const EvictionDataLagEnd = $17430b689f99735b$var$getEvictionDataLagDate(values, 0); // latest date
    const timeUnitLabel = timeUnit === "yearmonthdate" ? "Day" : timeUnit === "yearweek" ? "Week" : "Month";
    const lineColor = "#AF2525";
    const spec = {
        $schema: "https://vega.github.io/schema/vega-lite/v4.json",
        description: title,
        width: "container",
        height: height,
        title: {
            text: `${title}, 2020 - Present`,
            subtitle: [
                `Cases since COVID-19 (all cases, active and disposed): ${casesSinceCovid.toLocaleString()}`,
                // This effectively adds extra padding below the subtitle.
                ""
            ]
        },
        layer: [
            {
                data: {
                    values: [
                        {
                            lagDateStart: EvictionDataLagStart,
                            lagDateEnd: EvictionDataLagEnd
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "rect",
                            color: "grey",
                            opacity: 0.3
                        },
                        encoding: {
                            x: {
                                field: "lagDateStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "lagDateEnd",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "right",
                            baseline: "bottom",
                            dy: -(height / 2) - 1,
                            text: "Due to reporting lags, data for most recent weeks (in gray) is incomplete"
                        },
                        encoding: {
                            x: {
                                field: "lagDateEnd",
                                type: "temporal"
                            }
                        }
                    }
                ]
            },
            {
                data: {
                    values: values
                },
                encoding: {
                    x: {
                        timeUnit: timeUnit,
                        field: "day"
                    },
                    tooltip: [
                        {
                            field: "day",
                            timeUnit: timeUnit,
                            title: `${timeUnitLabel} of`,
                            type: "temporal",
                            format: timeUnit === "yearmonth" ? "%B" : "%b %d, %Y"
                        },
                        {
                            field: fieldName,
                            aggregate: "sum",
                            title: "Filings",
                            formatType: "numberWithCommas"
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "line",
                            color: lineColor,
                            interpolate: "monotone"
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day",
                                axis: {
                                    title: "",
                                    format: "%b \u2019%y",
                                    labelAngle: 45
                                }
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                axis: {
                                    title: `Eviction Filings per ${timeUnitLabel}`
                                }
                            }
                        }
                    },
                    {
                        selection: {
                            index: {
                                type: "single",
                                on: "mousemove",
                                encodings: [
                                    "x"
                                ],
                                nearest: true,
                                empty: "none",
                                clear: "mouseout"
                            }
                        },
                        mark: {
                            type: "point",
                            strokeWidth: 4,
                            color: lineColor
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day"
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                type: "quantitative"
                            },
                            opacity: {
                                condition: {
                                    selection: "index",
                                    value: 1
                                },
                                value: 0
                            }
                        }
                    }
                ]
            }
        ]
    };
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $f5z94.LazyVegaLite), {
        spec: spec,
        className: `${(0, $5ayhH.VIZ_TIME_SERIES_SHORT_CLASS)} ${(0, $5ayhH.VIZ_TIME_SERIES_CLASS)}`
    });
};
function $17430b689f99735b$export$d54c3199eac26240(value) {
    return $17430b689f99735b$export$fe626ad03aa8aaa5.has(value);
}
const $17430b689f99735b$export$fe626ad03aa8aaa5 = new Map([
    [
        "total_filings",
        "Total NY State Eviction Filings"
    ],
    [
        "nyc_holdover_filings",
        "NYC Holdover Filings"
    ],
    [
        "nyc_holdover_res_filings",
        "NYC Holdover Residential Filings"
    ],
    [
        "nyc_nonpay_filings",
        "NYC Non-Payment Filings"
    ],
    [
        "nyc_nonpay_res_filings",
        "NYC Non-Payment Residential Filings"
    ],
    [
        "outside_nyc_holdover_filings",
        "Upstate Holdover Filings"
    ],
    [
        "outside_nyc_nonpay_filings",
        "Upstate Non-Payment Filings"
    ]
]);
const $17430b689f99735b$export$2b2b71d8c42a4264 = ({ height: height, fieldNames: fieldNames })=>{
    const [timeUnit, setTimeUnit] = (0, $4rFIf.useState)("yearweek");
    fieldNames = fieldNames || Array.from($17430b689f99735b$export$fe626ad03aa8aaa5.keys());
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "View by:\xa0\xa0", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "timeUnit",
        value: "yearmonthdate",
        checked: timeUnit === "yearmonthdate",
        onChange: (e)=>setTimeUnit("yearmonthdate")
    }), "Day"), "\xa0\xa0", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "timeUnit",
        value: "yearweek",
        checked: timeUnit === "yearweek",
        onChange: (e)=>setTimeUnit("yearweek")
    }), "Week"), "\xa0\xa0", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "timeUnit",
        value: "yearmonth",
        checked: timeUnit === "yearmonth",
        onChange: (e)=>setTimeUnit("yearmonth")
    }), "Month")), fieldNames.map((fieldName)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($17430b689f99735b$var$EvictionViz, {
            key: fieldName,
            height: height,
            timeUnit: timeUnit,
            fieldName: fieldName,
            title: (0, $68dfc0e667d126bb$export$1282158678cd0974)($17430b689f99735b$export$fe626ad03aa8aaa5.get(fieldName))
        })));
};




var $4rFIf = parcelRequire("4rFIf");

var $1WhnP = parcelRequire("1WhnP");

var $f5z94 = parcelRequire("f5z94");

var $5ayhH = parcelRequire("5ayhH");

var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $ce106105c45ef35f$export$31175288a0767e64 = new (0, $ezVNZ.QueryFiles)(`total-active-cases`);
function $ce106105c45ef35f$export$173d683f6383bf02(row) {
    return {
        day: row.day.toISOString(),
        active_cases: (0, $dQEow.toInt)(row.active_cases)
    };
}
function $ce106105c45ef35f$var$getActiveCasesCsvHeader() {
    return [
        "day",
        "active_cases"
    ];
}
function $ce106105c45ef35f$var$toActiveCasesCsvRow(row) {
    return [
        row.day.substr(0, 10),
        row.active_cases.toString()
    ];
}
const $ce106105c45ef35f$export$f0e78377ba1e84fd = {
    files: $ce106105c45ef35f$export$31175288a0767e64,
    sqlToRow: $ce106105c45ef35f$export$173d683f6383bf02,
    csvHeader: $ce106105c45ef35f$var$getActiveCasesCsvHeader(),
    toCsvRow: $ce106105c45ef35f$var$toActiveCasesCsvRow
};


/**
 * Take the array of data rows and get the date for the latest week we
 * have data and subtract a given number of weeks. This is used to draw
 * the rectangle on the graphs for the period where we have incomplete
 * data, due to repoting lags. The result is a string in the same format
 * as the "week" dates stored in the input data.
 */ function $cd8245394e01f007$var$getActiveCasesLagDate(data, lagDays) {
    const maxActiveCasesDateNum = Math.max.apply(Math, data.map((row)=>Date.parse(row.day)));
    let returnDate = new Date(maxActiveCasesDateNum);
    returnDate.setDate(returnDate.getDate() - lagDays);
    returnDate.setHours(0, 0, 0, 0);
    return returnDate.toISOString();
}
const $cd8245394e01f007$var$ActiveCasesViz = (props)=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $ce106105c45ef35f$export$31175288a0767e64).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($cd8245394e01f007$var$ActiveCasesVizWithValues, {
            values: values,
            ...props
        }));
};
function $cd8245394e01f007$var$thousands_separators(num) {
    var num_parts = num.toString().split(".");
    num_parts[0] = num_parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return num_parts.join(".");
}
const $cd8245394e01f007$var$ActiveCasesVizWithValues = ({ values: values, fieldName: fieldName, title: title, timeUnit: timeUnit, height: height })=>{
    var _a;
    values = values.filter(// If we are viewing data by week, let's grab data since the first Sunday of Jan 2020
    // Otherwise, we can grab data from 1/1/2020 onwards
    (row)=>row.day >= (timeUnit === "yearweek" ? "2020-01-05 00:00:00" : "2020-01-01 00:00:00"));
    //   const casesSinceCovid = values.filter(
    //     row => row.day >= "2020-03-23 00:00:00"
    //   ).reduce(
    //     (total, row) => total + row[fieldName], 0
    //   );
    // commented this out because this counter should probably be different from total active cases
    const ActiveCasesDataLagStart = $cd8245394e01f007$var$getActiveCasesLagDate(values, 30); // 4 weeks for lag
    const ActiveCasesDataLagEnd = $cd8245394e01f007$var$getActiveCasesLagDate(values, 0); // latest date
    const timeUnitLabel = timeUnit === "yearmonthdate" ? "Day" : timeUnit === "yearweek" ? "Week" : "Month";
    const lineColor = "#AF2525";
    const MoratoriumStart = new Date("2020-03-17");
    const MoratoriumEnd = new Date("2020-06-20");
    const MoratoriumMid = new Date("2020-05-05");
    const MorTwoStart = new Date("2020-12-28");
    const MorTwoEnd = new Date("2021-02-26");
    const MorTwoMid = new Date("2021-01-26");
    const lineTop = 20;
    const lineBottom = 20;
    const casesCovidStart = (_a = values.find((datapoint)=>datapoint.day === "2020-03-16T04:00:00.000Z")) === null || _a === void 0 ? void 0 : _a.active_cases;
    const casesCovidStartThousands = $cd8245394e01f007$var$thousands_separators(casesCovidStart);
    const spec = {
        $schema: "https://vega.github.io/schema/vega-lite/v4.json",
        description: title,
        width: "container",
        height: 400,
        title: {
            text: `${title}`,
            fontSize: 16,
            subtitle: [
                `January 2020 - Present`,
                // This effectively adds extra padding below the subtitle.
                ""
            ]
        },
        layer: [
            {
                data: {
                    values: values
                },
                encoding: {
                    x: {
                        timeUnit: timeUnit,
                        field: "day"
                    },
                    tooltip: [
                        {
                            field: "day",
                            timeUnit: timeUnit,
                            title: `${timeUnitLabel} of`,
                            type: "temporal",
                            format: timeUnit === "yearmonth" ? "%B" : "%b %d, %Y"
                        },
                        {
                            field: fieldName,
                            aggregate: "sum",
                            title: "Active Cases",
                            formatType: "numberWithCommas"
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "area",
                            color: lineColor,
                            interpolate: "monotone",
                            opacity: 0.6
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day",
                                axis: {
                                    title: "",
                                    format: "%b \u2019%y",
                                    labelAngle: 45,
                                    grid: false
                                }
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                axis: {
                                    title: `Total Active Cases`
                                },
                                scale: {
                                    "zero": false
                                }
                            }
                        }
                    },
                    {
                        mark: {
                            type: "line",
                            color: lineColor,
                            interpolate: "monotone",
                            strokeWidth: 4
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day",
                                axis: {
                                    title: "",
                                    format: "%b \u2019%y"
                                }
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                axis: {},
                                scale: {
                                    "zero": false
                                }
                            }
                        }
                    },
                    {
                        selection: {
                            index: {
                                type: "single",
                                on: "mousemove",
                                encodings: [
                                    "x"
                                ],
                                nearest: true,
                                empty: "none",
                                clear: "mouseout"
                            }
                        },
                        mark: {
                            type: "point",
                            strokeWidth: 4,
                            color: lineColor
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day"
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                type: "quantitative"
                            },
                            opacity: {
                                condition: {
                                    selection: "index",
                                    value: 1
                                },
                                value: 0
                            }
                        }
                    }
                ]
            },
            {
                data: {
                    values: [
                        {
                            lagDateStart: ActiveCasesDataLagStart,
                            lagDateEnd: ActiveCasesDataLagEnd
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "rect",
                            color: "grey",
                            opacity: 0
                        },
                        encoding: {
                            x: {
                                field: "lagDateStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "lagDateEnd",
                                type: "temporal"
                            }
                        }
                    }
                ]
            },
            {
                data: {
                    values: [
                        {
                            morDateStart: MoratoriumStart,
                            morDateEnd: MoratoriumEnd,
                            morDateMid: MoratoriumMid,
                            morTwoStart: MorTwoStart,
                            morTwoEnd: MorTwoEnd,
                            morTwoMid: MorTwoMid,
                            covidCasesStart: 150000
                        }
                    ]
                },
                layer: [
                    {
                        // For some reason this gray rectangle and the
                        mark: {
                            type: "rect",
                            color: "gray",
                            opacity: 0.2
                        },
                        encoding: {
                            x: {
                                field: "morDateStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "morDateEnd",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "center",
                            baseline: "bottom",
                            dy: -(height * 0.05),
                            fontSize: 14,
                            opacity: 0.6,
                            text: [
                                "Eviction",
                                "Moratorium"
                            ]
                        },
                        encoding: {
                            x: {
                                field: "morDateMid",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "rect",
                            color: "gray",
                            opacity: 0.2
                        },
                        encoding: {
                            x: {
                                field: "morTwoStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "morTwoEnd",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "center",
                            baseline: "bottom",
                            dy: -(height * 0.05),
                            fontSize: 14,
                            opacity: 0.6,
                            text: [
                                "Most Eviction",
                                "Cases Paused"
                            ]
                        },
                        encoding: {
                            x: {
                                field: "morTwoMid",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "center",
                            baseline: "bottom",
                            fontSize: 12,
                            dy: height / 6,
                            text: [
                                `There were ${casesCovidStartThousands}`,
                                `eviction cases at the`,
                                `start of the pandemic`
                            ]
                        },
                        encoding: {
                            x: {
                                field: "morDateStart",
                                type: "temporal"
                            }
                        }
                    }
                ]
            }
        ]
    };
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $f5z94.LazyVegaLite), {
        spec: spec,
        className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
    });
};
function $cd8245394e01f007$export$ad25c27ee9a5aae4(value) {
    return $cd8245394e01f007$export$50c8d6c1c61248e1.has(value);
}
const $cd8245394e01f007$export$50c8d6c1c61248e1 = new Map([
    [
        "active_cases",
        "Active Eviction Cases in New York State"
    ]
]);
const $cd8245394e01f007$export$fd53bc45e2f019eb = ({ height: height, fieldNames: fieldNames })=>{
    const [timeUnit, setTimeUnit] = (0, $4rFIf.useState)("yearweek");
    fieldNames = fieldNames || Array.from($cd8245394e01f007$export$50c8d6c1c61248e1.keys());
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, fieldNames.map((fieldName)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($cd8245394e01f007$var$ActiveCasesViz, {
            key: fieldName,
            height: height,
            timeUnit: timeUnit,
            fieldName: fieldName,
            title: (0, $68dfc0e667d126bb$export$1282158678cd0974)($cd8245394e01f007$export$50c8d6c1c61248e1.get(fieldName))
        })));
};




var $4rFIf = parcelRequire("4rFIf");

var $1WhnP = parcelRequire("1WhnP");

var $f5z94 = parcelRequire("f5z94");

var $5ayhH = parcelRequire("5ayhH");

var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $f53c0fee93cf5ff8$export$6d50c162e81d9f35 = new (0, $ezVNZ.QueryFiles)(`marshal-evictions-by-week`);
function $f53c0fee93cf5ff8$export$374b25abab340985(row) {
    return {
        week_eviction: row.week_eviction.toISOString(),
        marshalevictions: (0, $dQEow.toInt)(row.marshalevictions)
    };
}
function $f53c0fee93cf5ff8$var$getMarshalEvicsCsvHeader() {
    return [
        "week_eviction",
        "marshalevictions"
    ];
}
function $f53c0fee93cf5ff8$var$toMarshalEvicsCsvRow(row) {
    return [
        row.week_eviction.substr(0, 10),
        row.marshalevictions.toString()
    ];
}
const $f53c0fee93cf5ff8$export$acb9523163957791 = {
    files: $f53c0fee93cf5ff8$export$6d50c162e81d9f35,
    sqlToRow: $f53c0fee93cf5ff8$export$374b25abab340985,
    csvHeader: $f53c0fee93cf5ff8$var$getMarshalEvicsCsvHeader(),
    toCsvRow: $f53c0fee93cf5ff8$var$toMarshalEvicsCsvRow
};


/**
 * Take the array of data rows and get the date for the latest week we
 * have data and subtract a given number of weeks. This is used to draw
 * the rectangle on the graphs for the period where we have incomplete
 * data, due to repoting lags. The result is a string in the same format
 * as the "week" dates stored in the input data.
 */ function $a2ea272e50551566$var$getMarshalEvicsLagDate(data, lagDays) {
    const maxMarshalEvicsDateNum = Math.max.apply(Math, data.map((row)=>Date.parse(row.week_eviction)));
    let returnDate = new Date(maxMarshalEvicsDateNum);
    returnDate.setDate(returnDate.getDate() - lagDays);
    returnDate.setHours(0, 0, 0, 0);
    return returnDate.toISOString();
}
const $a2ea272e50551566$var$MarshalEvicsViz = (props)=>{
    const [timeUnit, setTimeUnit] = (0, $4rFIf.useState)("yearweek");
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("form", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "citywide-timeunit",
        id: "citywide-yearweek",
        checked: timeUnit === "yearweek",
        onChange: (e)=>setTimeUnit("yearweek")
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", {
        htmlFor: "citywide-yearweek"
    }, "Week"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "citywide-timeunit",
        id: "citywide-yearmonth",
        checked: timeUnit === "yearmonth",
        onChange: (e)=>setTimeUnit("yearmonth")
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", {
        htmlFor: "citywide-yearmonth"
    }, "Month")), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $f53c0fee93cf5ff8$export$6d50c162e81d9f35).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($a2ea272e50551566$var$MarshalEvicsVizWithValues, {
            values: values,
            timeUnit: timeUnit,
            ...props
        })));
};
function $a2ea272e50551566$var$thousands_separators(num) {
    var num_parts = num.toString().split(".");
    num_parts[0] = num_parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return num_parts.join(".");
}
const $a2ea272e50551566$var$MarshalEvicsVizWithValues = ({ values: values, fieldName: fieldName, title: title, timeUnit: timeUnit, height: height })=>{
    values = values.filter(// If we are viewing data by week, let's grab data since the first Sunday of Jan 2020
    // Otherwise, we can grab data from 1/1/2020 onwards
    (row)=>row.week_eviction >= (timeUnit === "yearweek" ? "2021-06-01 00:00:00" : "2021-06-01 00:00:00"));
    const evictionsSinceJan = values.filter((row)=>row.week_eviction >= "2022-01-14 00:00:00").reduce((total, row)=>total + row[fieldName], 0);
    const timeUnitLabel = timeUnit === "yearmonthdate" ? "Day" : timeUnit === "yearweek" ? "Week" : "Month";
    const barColor = "#B73A3A";
    const selectedBarColor = "#AF2525";
    const spec = {
        $schema: "https://vega.github.io/schema/vega-lite/v4.json",
        description: title,
        width: "container",
        height: 400,
        title: {
            align: "left",
            anchor: "start",
            text: `${title}`,
            fontSize: 24,
            subtitle: [
                `There have been ${$a2ea272e50551566$var$thousands_separators(evictionsSinceJan)} residential evictions by court-ordered`,
                `marshals since eviction protections expired on January 15, 2022.`,
                // This effectively adds extra padding below the subtitle.
                ""
            ],
            subtitleFontSize: 16
        },
        layer: [
            {
                data: {
                    values: values
                },
                encoding: {
                    x: {
                        timeUnit: timeUnit,
                        field: "week_eviction"
                    },
                    tooltip: [
                        {
                            field: "week_eviction",
                            timeUnit: timeUnit,
                            title: `${timeUnitLabel} of`,
                            type: "temporal",
                            format: timeUnit === "yearmonth" ? "%B" : "%b %d, %Y"
                        },
                        {
                            field: fieldName,
                            aggregate: "sum",
                            title: "Evictions",
                            formatType: "numberWithCommas"
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "bar",
                            color: barColor,
                            interpolate: "monotone",
                            opacity: 0.9
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "week_eviction",
                                axis: {
                                    title: "",
                                    format: "%b \u2019%y",
                                    labelAngle: 45,
                                    grid: false
                                }
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                axis: {
                                    title: `Total Evictions`
                                },
                                scale: {
                                    "zero": false
                                }
                            }
                        }
                    },
                    {
                        selection: {
                            index: {
                                type: "single",
                                on: "mousemove",
                                encodings: [
                                    "x"
                                ],
                                nearest: true,
                                empty: "none",
                                clear: "mouseout"
                            }
                        },
                        mark: {
                            type: "bar",
                            strokeWidth: 4,
                            color: selectedBarColor
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "week_eviction"
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                type: "quantitative"
                            },
                            opacity: {
                                condition: {
                                    selection: "index",
                                    value: 1
                                },
                                value: 0
                            }
                        }
                    }
                ]
            }
        ]
    };
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $f5z94.LazyVegaLite), {
        spec: spec,
        className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
    });
};
function $a2ea272e50551566$export$51c0adebe06c3e9d(value) {
    return $a2ea272e50551566$export$c9af08045535eeab.has(value);
}
const $a2ea272e50551566$export$c9af08045535eeab = new Map([
    [
        "marshalevictions",
        "Pandemic Evictions in New York City"
    ]
]);
const $a2ea272e50551566$export$22df5c4dbf56580b = ({ height: height, fieldNames: fieldNames })=>{
    fieldNames = fieldNames || Array.from($a2ea272e50551566$export$c9af08045535eeab.keys());
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, fieldNames.map((fieldName)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($a2ea272e50551566$var$MarshalEvicsViz, {
            key: fieldName,
            height: height,
            fieldName: fieldName,
            title: (0, $68dfc0e667d126bb$export$1282158678cd0974)($a2ea272e50551566$export$c9af08045535eeab.get(fieldName))
        })));
};




var $4rFIf = parcelRequire("4rFIf");

var $1WhnP = parcelRequire("1WhnP");

var $f5z94 = parcelRequire("f5z94");

var $5ayhH = parcelRequire("5ayhH");

var $ezVNZ = parcelRequire("ezVNZ");
const $58e75752efd21bac$export$52348d2d8d2521c5 = new (0, $ezVNZ.QueryFiles)(`share-represented`);
function $58e75752efd21bac$export$74738cf204be3662(row) {
    return {
        day: row.day.toISOString(),
        rep_rate: row.rep_rate
    };
}
function $58e75752efd21bac$var$getPctReppedCsvHeader() {
    return [
        "day",
        "rep_rate"
    ];
}
function $58e75752efd21bac$var$toPctReppedCsvRow(row) {
    return [
        row.day.substr(0, 10),
        row.rep_rate.toString()
    ];
}
const $58e75752efd21bac$export$5863db63d3a52c92 = {
    files: $58e75752efd21bac$export$52348d2d8d2521c5,
    sqlToRow: $58e75752efd21bac$export$74738cf204be3662,
    csvHeader: $58e75752efd21bac$var$getPctReppedCsvHeader(),
    toCsvRow: $58e75752efd21bac$var$toPctReppedCsvRow
};


const $b43f9b20eb8473d8$var$PctReppedViz = (props)=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $58e75752efd21bac$export$52348d2d8d2521c5).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($b43f9b20eb8473d8$var$PctReppedVizWithValues, {
            values: values,
            ...props
        }));
};
function $b43f9b20eb8473d8$var$thousands_separators(num) {
    var num_parts = num.toString().split(".");
    num_parts[0] = num_parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return num_parts.join(".");
}
const $b43f9b20eb8473d8$var$PctReppedVizWithValues = ({ values: values, fieldName: fieldName, title: title, timeUnit: timeUnit, height: height })=>{
    values = values.filter(// If we are viewing data by week, let's grab data since the first Sunday of Jan 2020
    // Otherwise, we can grab data from 1/1/2020 onwards
    (row)=>row.day >= (timeUnit === "yearweek" ? "2022-01-01 00:00:00" : "2022-01-01 00:00:00"));
    // const timeUnitLabel = timeUnit === "yearmonthdate" ? "Day"
    //   : timeUnit === "yearweek" ? "Week" 
    //   : "Month";
    const lineColor = "#AF2525";
    const spec = {
        $schema: "https://vega.github.io/schema/vega-lite/v4.json",
        description: title,
        width: "container",
        height: 400,
        title: {
            align: "left",
            anchor: "start",
            text: `Share of Represented Tenants`,
            fontSize: 24,
            subtitle: [
                `Percent of all tenants with eviction cases who are represented`,
                `by an attorney by the week the case was filed`,
                // This effectively adds extra padding below the subtitle.
                ""
            ],
            subtitleFontSize: 16
        },
        layer: [
            {
                data: {
                    values: values
                },
                encoding: {
                    x: {
                        timeUnit: timeUnit,
                        field: "day"
                    },
                    tooltip: [
                        {
                            field: "day",
                            timeUnit: timeUnit,
                            title: `Week of`,
                            type: "temporal",
                            format: timeUnit === "yearmonth" ? "%B" : "%b %d, %Y"
                        },
                        {
                            field: fieldName,
                            // aggregate: "sum",
                            title: "Represented tenants (%)"
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "line",
                            color: lineColor,
                            interpolate: "monotone",
                            opacity: 1
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day",
                                axis: {
                                    title: "",
                                    format: "%b %d \u2019%y",
                                    labelAngle: 45,
                                    grid: false
                                }
                            },
                            y: {
                                field: `${fieldName}`,
                                aggregate: "sum",
                                axis: {
                                    title: `Percent of tenants with representation (%)`
                                },
                                scale: {
                                    "zero": false
                                }
                            }
                        }
                    },
                    {
                        mark: {
                            type: "line",
                            color: lineColor,
                            interpolate: "monotone",
                            strokeWidth: 4
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day",
                                axis: {
                                    title: "",
                                    format: "%b \u2019%y"
                                }
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                axis: {},
                                scale: {
                                    "zero": false
                                }
                            }
                        }
                    },
                    {
                        selection: {
                            index: {
                                type: "single",
                                on: "mousemove",
                                encodings: [
                                    "x"
                                ],
                                nearest: true,
                                empty: "none",
                                clear: "mouseout"
                            }
                        },
                        mark: {
                            type: "point",
                            strokeWidth: 4,
                            color: lineColor
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day"
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                type: "quantitative"
                            },
                            opacity: {
                                condition: {
                                    selection: "index",
                                    value: 1
                                },
                                value: 0
                            }
                        }
                    }
                ]
            }
        ]
    };
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $f5z94.LazyVegaLite), {
        spec: spec,
        className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
    });
};
function $b43f9b20eb8473d8$export$d84852f349f5791(value) {
    return $b43f9b20eb8473d8$export$c9f6d91e52d60003.has(value);
}
const $b43f9b20eb8473d8$export$c9f6d91e52d60003 = new Map([
    [
        "rep_rate",
        "PctRepped"
    ]
]);
const $b43f9b20eb8473d8$export$d742382c3243554 = ({ height: height, fieldNames: fieldNames })=>{
    const [timeUnit, setTimeUnit] = (0, $4rFIf.useState)("yearweek");
    fieldNames = fieldNames || Array.from($b43f9b20eb8473d8$export$c9f6d91e52d60003.keys());
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, fieldNames.map((fieldName)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($b43f9b20eb8473d8$var$PctReppedViz, {
            key: fieldName,
            height: height,
            timeUnit: timeUnit,
            fieldName: fieldName,
            title: (0, $68dfc0e667d126bb$export$1282158678cd0974)($b43f9b20eb8473d8$export$c9f6d91e52d60003.get(fieldName))
        })));
};




var $4rFIf = parcelRequire("4rFIf");

var $1WhnP = parcelRequire("1WhnP");

var $f5z94 = parcelRequire("f5z94");

var $5ayhH = parcelRequire("5ayhH");

var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $0bbef91116275ea3$export$9d7bbd793c7cc953 = new (0, $ezVNZ.QueryFiles)(`total-judgments-statewide`);
function $0bbef91116275ea3$export$92ff7cbedffb35da(row) {
    return {
        day: row.day.toISOString(),
        judgments: (0, $dQEow.toInt)(row.judgments)
    };
}
function $0bbef91116275ea3$var$getJudgmentsCsvHeader() {
    return [
        "day",
        "judgments"
    ];
}
function $0bbef91116275ea3$var$toJudgmentsCsvRow(row) {
    return [
        row.day.substr(0, 10),
        row.judgments.toString()
    ];
}
const $0bbef91116275ea3$export$8e5f277c9030502 = {
    files: $0bbef91116275ea3$export$9d7bbd793c7cc953,
    sqlToRow: $0bbef91116275ea3$export$92ff7cbedffb35da,
    csvHeader: $0bbef91116275ea3$var$getJudgmentsCsvHeader(),
    toCsvRow: $0bbef91116275ea3$var$toJudgmentsCsvRow
};


/**
 * Take the array of data rows and get the date for the latest week we
 * have data and subtract a given number of weeks. This is used to draw
 * the rectangle on the graphs for the period where we have incomplete
 * data, due to repoting lags. The result is a string in the same format
 * as the "week" dates stored in the input data.
 */ function $58aafa11c0146cbf$var$getJudgmentsLagDate(data, lagDays) {
    const maxJudgmentsDateNum = Math.max.apply(Math, data.map((row)=>Date.parse(row.day)));
    let returnDate = new Date(maxJudgmentsDateNum);
    returnDate.setDate(returnDate.getDate() - lagDays);
    returnDate.setHours(0, 0, 0, 0);
    return returnDate.toISOString();
}
const $58aafa11c0146cbf$var$JudgmentsViz = (props)=>{
    const [timeUnit, setTimeUnit] = (0, $4rFIf.useState)("yearweek");
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("form", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "statewide-timeunit",
        id: "statewide-yearweek",
        checked: timeUnit === "yearweek",
        onChange: (e)=>setTimeUnit("yearweek")
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", {
        htmlFor: "statewide-yearweek"
    }, "Week"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "statewide-timeunit",
        id: "statewide-yearmonth",
        checked: timeUnit === "yearmonth",
        onChange: (e)=>setTimeUnit("yearmonth")
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", {
        htmlFor: "statewide-yearmonth"
    }, "Month")), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $0bbef91116275ea3$export$9d7bbd793c7cc953).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($58aafa11c0146cbf$var$JudgmentsVizWithValues, {
            values: values,
            timeUnit: timeUnit,
            ...props
        })));
};
function $58aafa11c0146cbf$var$thousands_separators(num) {
    var num_parts = num.toString().split(".");
    num_parts[0] = num_parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return num_parts.join(".");
}
const $58aafa11c0146cbf$var$JudgmentsVizWithValues = ({ values: values, fieldName: fieldName, title: title, timeUnit: timeUnit, height: height })=>{
    values = values.filter(// If we are viewing data by week, let's grab data since the first Sunday of Jan 2020
    // Otherwise, we can grab data from 1/1/2020 onwards
    (row)=>row.day >= (timeUnit === "yearweek" ? "2020-01-05 00:00:00" : "2020-01-01 00:00:00"));
    //   const casesSinceCovid = values.filter(
    //     row => row.day >= "2020-03-23 00:00:00"
    //   ).reduce(
    //     (total, row) => total + row[fieldName], 0
    //   );
    // commented this out because this counter should probably be different from total judgments
    const JudgmentsDataLagStart = $58aafa11c0146cbf$var$getJudgmentsLagDate(values, 30); // 4 weeks for lag
    const JudgmentsDataLagEnd = $58aafa11c0146cbf$var$getJudgmentsLagDate(values, 0); // latest date
    const timeUnitLabel = timeUnit === "yearmonthdate" ? "Day" : timeUnit === "yearweek" ? "Week" : "Month";
    const barColor = "#B73A3A";
    const selectedBarColor = "#AF2525";
    const MoratoriumStart = new Date("2020-03-17");
    const MoratoriumEnd = new Date("2020-06-20");
    const MoratoriumMid = new Date("2020-05-05");
    const MorTwoStart = new Date("2020-12-28");
    const MorTwoEnd = new Date("2021-02-26");
    const MorTwoMid = new Date("2021-01-26");
    const lineTop = 20;
    const lineBottom = 20;
    // const casesCovidStart = values.find(datapoint => datapoint.day === '2020-03-16T04:00:00.000Z')?.judgments;
    // const casesCovidStartThousands = thousands_separators(casesCovidStart);
    const spec = {
        $schema: "https://vega.github.io/schema/vega-lite/v4.json",
        description: title,
        width: "container",
        height: 400,
        title: {
            text: `${title}`,
            fontSize: 16,
            subtitle: [
                `March 2020 - Present`,
                // This effectively adds extra padding below the subtitle.
                ""
            ]
        },
        layer: [
            {
                data: {
                    values: values
                },
                encoding: {
                    x: {
                        timeUnit: timeUnit,
                        field: "day"
                    },
                    tooltip: [
                        {
                            field: "day",
                            timeUnit: timeUnit,
                            title: `${timeUnitLabel} of`,
                            type: "temporal",
                            format: timeUnit === "yearmonth" ? "%B" : "%b %d, %Y"
                        },
                        {
                            field: fieldName,
                            aggregate: "sum",
                            title: "Judgments",
                            formatType: "numberWithCommas"
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "bar",
                            color: barColor,
                            interpolate: "monotone",
                            opacity: 0.6
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day",
                                axis: {
                                    title: "",
                                    format: "%b \u2019%y",
                                    labelAngle: 45,
                                    grid: false
                                }
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                axis: {
                                    title: `Total Judgments`
                                },
                                scale: {
                                    "zero": false
                                }
                            }
                        }
                    },
                    // {
                    //   mark: {
                    //     type: "line",
                    //     color: lineColor,
                    //     interpolate: "monotone",
                    //     strokeWidth: 4,
                    //   },
                    //   encoding: {
                    //     x: {
                    //       timeUnit,
                    //       field: "day",
                    //       axis: {
                    //         title: "",
                    //         format: "%b ’%y",
                    //       },
                    //     },
                    //     y: {
                    //       field: fieldName,
                    //       aggregate: "sum",
                    //       axis: {
                    //       },
                    //       scale: {"zero": false},
                    //     },
                    //   },
                    // },
                    {
                        selection: {
                            index: {
                                type: "single",
                                on: "mousemove",
                                encodings: [
                                    "x"
                                ],
                                nearest: true,
                                empty: "none",
                                clear: "mouseout"
                            }
                        },
                        mark: {
                            type: "bar",
                            strokeWidth: 4,
                            color: selectedBarColor
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day"
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                type: "quantitative"
                            },
                            opacity: {
                                condition: {
                                    selection: "index",
                                    value: 1
                                },
                                value: 0
                            }
                        }
                    }
                ]
            },
            {
                data: {
                    values: [
                        {
                            lagDateStart: JudgmentsDataLagStart,
                            lagDateEnd: JudgmentsDataLagEnd
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "rect",
                            color: "grey",
                            opacity: 0
                        },
                        encoding: {
                            x: {
                                field: "lagDateStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "lagDateEnd",
                                type: "temporal"
                            }
                        }
                    }
                ]
            },
            {
                data: {
                    values: [
                        {
                            morDateStart: MoratoriumStart,
                            morDateEnd: MoratoriumEnd,
                            morDateMid: MoratoriumMid,
                            morTwoStart: MorTwoStart,
                            morTwoEnd: MorTwoEnd,
                            morTwoMid: MorTwoMid
                        }
                    ]
                },
                layer: [
                    {
                        // For some reason this gray rectangle and the
                        mark: {
                            type: "rect",
                            color: "gray",
                            opacity: 0.2
                        },
                        encoding: {
                            x: {
                                field: "morDateStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "morDateEnd",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "center",
                            baseline: "bottom",
                            dy: -(height * 0.05),
                            fontSize: 14,
                            opacity: 0.6,
                            text: [
                                "Eviction",
                                "Moratorium"
                            ]
                        },
                        encoding: {
                            x: {
                                field: "morDateMid",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "rect",
                            color: "gray",
                            opacity: 0.2
                        },
                        encoding: {
                            x: {
                                field: "morTwoStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "morTwoEnd",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "center",
                            baseline: "bottom",
                            dy: -(height * 0.05),
                            fontSize: 14,
                            opacity: 0.6,
                            text: [
                                "Most Eviction",
                                "Cases Paused"
                            ]
                        },
                        encoding: {
                            x: {
                                field: "morTwoMid",
                                type: "temporal"
                            }
                        }
                    },
                    // { 
                    //   mark: {
                    //     type: "text",
                    //     align: "center",
                    //     baseline: "bottom",
                    //     fontSize: 12,             
                    //     dy: (height*.05),
                    //     text: [`There  were ${casesCovidStartThousands}`, `eviction cases at the`,`start of the pandemic`],
                    //   },
                    //   encoding: {
                    //     x: { field: "morDateStart", type: "temporal" },
                    //   },  
                    // },
                    {
                        mark: {
                            type: "rect",
                            color: "black",
                            opacity: 1,
                            width: 2,
                            y: height - height * .45,
                            y2: height - height * .48
                        },
                        encoding: {
                            x: {
                                field: "morDateStart",
                                type: "temporal"
                            }
                        }
                    }
                ]
            }
        ]
    };
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $f5z94.LazyVegaLite), {
        spec: spec,
        className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
    });
};
function $58aafa11c0146cbf$export$9dfcb9da95de2dc0(value) {
    return $58aafa11c0146cbf$export$ff3e378b8435757c.has(value);
}
const $58aafa11c0146cbf$export$ff3e378b8435757c = new Map([
    [
        "judgments",
        "Eviction Judgments in New York State"
    ]
]);
const $58aafa11c0146cbf$export$b32d4ce0b4ab1c14 = ({ height: height, fieldNames: fieldNames })=>{
    fieldNames = fieldNames || Array.from($58aafa11c0146cbf$export$ff3e378b8435757c.keys());
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, fieldNames.map((fieldName)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($58aafa11c0146cbf$var$JudgmentsViz, {
            key: fieldName,
            height: height,
            fieldName: fieldName,
            title: (0, $68dfc0e667d126bb$export$1282158678cd0974)($58aafa11c0146cbf$export$ff3e378b8435757c.get(fieldName))
        })));
};




var $4rFIf = parcelRequire("4rFIf");

var $1WhnP = parcelRequire("1WhnP");

var $f5z94 = parcelRequire("f5z94");

var $5ayhH = parcelRequire("5ayhH");

var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $2ded4ae9eacc0b10$export$9d7bbd793c7cc953 = new (0, $ezVNZ.QueryFiles)(`total-judgments-citywide`);
function $2ded4ae9eacc0b10$export$92ff7cbedffb35da(row) {
    return {
        day: row.day.toISOString(),
        judgments: (0, $dQEow.toInt)(row.judgments)
    };
}
function $2ded4ae9eacc0b10$var$getJudgmentsCsvHeader() {
    return [
        "day",
        "judgments"
    ];
}
function $2ded4ae9eacc0b10$var$toJudgmentsCsvRow(row) {
    return [
        row.day.substr(0, 10),
        row.judgments.toString()
    ];
}
const $2ded4ae9eacc0b10$export$f0ca48d65cffac26 = {
    files: $2ded4ae9eacc0b10$export$9d7bbd793c7cc953,
    sqlToRow: $2ded4ae9eacc0b10$export$92ff7cbedffb35da,
    csvHeader: $2ded4ae9eacc0b10$var$getJudgmentsCsvHeader(),
    toCsvRow: $2ded4ae9eacc0b10$var$toJudgmentsCsvRow
};


/**
 * Take the array of data rows and get the date for the latest week we
 * have data and subtract a given number of weeks. This is used to draw
 * the rectangle on the graphs for the period where we have incomplete
 * data, due to repoting lags. The result is a string in the same format
 * as the "week" dates stored in the input data.
 */ function $638c0333d22b1e3e$var$getJudgmentsLagDate(data, lagDays) {
    const maxJudgmentsDateNum = Math.max.apply(Math, data.map((row)=>Date.parse(row.day)));
    let returnDate = new Date(maxJudgmentsDateNum);
    returnDate.setDate(returnDate.getDate() - lagDays);
    returnDate.setHours(0, 0, 0, 0);
    return returnDate.toISOString();
}
const $638c0333d22b1e3e$var$JudgmentsViz = (props)=>{
    const [timeUnit, setTimeUnit] = (0, $4rFIf.useState)("yearweek");
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("form", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "citywide-timeunit",
        id: "citywide-yearweek",
        checked: timeUnit === "yearweek",
        onChange: (e)=>setTimeUnit("yearweek")
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", {
        htmlFor: "citywide-yearweek"
    }, "Week"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "radio",
        name: "citywide-timeunit",
        id: "citywide-yearmonth",
        checked: timeUnit === "yearmonth",
        onChange: (e)=>setTimeUnit("yearmonth")
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", {
        htmlFor: "citywide-yearmonth"
    }, "Month")), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $2ded4ae9eacc0b10$export$9d7bbd793c7cc953).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($638c0333d22b1e3e$var$JudgmentsVizWithValues, {
            values: values,
            timeUnit: timeUnit,
            ...props
        })));
};
function $638c0333d22b1e3e$var$thousands_separators(num) {
    var num_parts = num.toString().split(".");
    num_parts[0] = num_parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return num_parts.join(".");
}
const $638c0333d22b1e3e$var$JudgmentsVizWithValues = ({ values: values, fieldName: fieldName, title: title, timeUnit: timeUnit, height: height })=>{
    values = values.filter(// If we are viewing data by week, let's grab data since the first Sunday of Jan 2020
    // Otherwise, we can grab data from 1/1/2020 onwards
    (row)=>row.day >= (timeUnit === "yearweek" ? "2020-01-05 00:00:00" : "2020-01-01 00:00:00"));
    //   const casesSinceCovid = values.filter(
    //     row => row.day >= "2020-03-23 00:00:00"
    //   ).reduce(
    //     (total, row) => total + row[fieldName], 0
    //   );
    // commented this out because this counter should probably be different from total judgments
    const JudgmentsDataLagStart = $638c0333d22b1e3e$var$getJudgmentsLagDate(values, 30); // 4 weeks for lag
    const JudgmentsDataLagEnd = $638c0333d22b1e3e$var$getJudgmentsLagDate(values, 0); // latest date
    const timeUnitLabel = timeUnit === "yearmonthdate" ? "Day" : timeUnit === "yearweek" ? "Week" : "Month";
    const barColor = "#B73A3A";
    const selectedBarColor = "#AF2525";
    const MoratoriumStart = new Date("2020-03-17");
    const MoratoriumEnd = new Date("2020-06-20");
    const MoratoriumMid = new Date("2020-05-05");
    const MorTwoStart = new Date("2020-12-28");
    const MorTwoEnd = new Date("2021-02-26");
    const MorTwoMid = new Date("2021-01-26");
    const lineTop = 20;
    const lineBottom = 20;
    // const casesCovidStart = values.find(datapoint => datapoint.day === '2020-03-16T04:00:00.000Z')?.judgments;
    // const casesCovidStartThousands = thousands_separators(casesCovidStart);
    const spec = {
        $schema: "https://vega.github.io/schema/vega-lite/v4.json",
        description: title,
        width: "container",
        height: 400,
        title: {
            text: `${title}`,
            fontSize: 16,
            subtitle: [
                `March 2020 - Present`,
                // This effectively adds extra padding below the subtitle.
                ""
            ]
        },
        layer: [
            {
                data: {
                    values: values
                },
                encoding: {
                    x: {
                        timeUnit: timeUnit,
                        field: "day"
                    },
                    tooltip: [
                        {
                            field: "day",
                            timeUnit: timeUnit,
                            title: `${timeUnitLabel} of`,
                            type: "temporal",
                            format: timeUnit === "yearmonth" ? "%B" : "%b %d, %Y"
                        },
                        {
                            field: fieldName,
                            aggregate: "sum",
                            title: "Judgments",
                            formatType: "numberWithCommas"
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "bar",
                            color: barColor,
                            interpolate: "monotone",
                            opacity: 0.6
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day",
                                axis: {
                                    title: "",
                                    format: "%b \u2019%y",
                                    labelAngle: 45,
                                    grid: false
                                }
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                axis: {
                                    title: `Total Judgments`
                                },
                                scale: {
                                    "zero": false
                                }
                            }
                        }
                    },
                    {
                        selection: {
                            index: {
                                type: "single",
                                on: "mousemove",
                                encodings: [
                                    "x"
                                ],
                                nearest: true,
                                empty: "none",
                                clear: "mouseout"
                            }
                        },
                        mark: {
                            type: "bar",
                            strokeWidth: 4,
                            color: selectedBarColor
                        },
                        encoding: {
                            x: {
                                timeUnit: timeUnit,
                                field: "day"
                            },
                            y: {
                                field: fieldName,
                                aggregate: "sum",
                                type: "quantitative"
                            },
                            opacity: {
                                condition: {
                                    selection: "index",
                                    value: 1
                                },
                                value: 0
                            }
                        }
                    }
                ]
            },
            {
                data: {
                    values: [
                        {
                            lagDateStart: JudgmentsDataLagStart,
                            lagDateEnd: JudgmentsDataLagEnd
                        }
                    ]
                },
                layer: [
                    {
                        mark: {
                            type: "rect",
                            color: "grey",
                            opacity: 0
                        },
                        encoding: {
                            x: {
                                field: "lagDateStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "lagDateEnd",
                                type: "temporal"
                            }
                        }
                    }
                ]
            },
            {
                data: {
                    values: [
                        {
                            morDateStart: MoratoriumStart,
                            morDateEnd: MoratoriumEnd,
                            morDateMid: MoratoriumMid,
                            morTwoStart: MorTwoStart,
                            morTwoEnd: MorTwoEnd,
                            morTwoMid: MorTwoMid
                        }
                    ]
                },
                layer: [
                    {
                        // For some reason this gray rectangle and the
                        mark: {
                            type: "rect",
                            color: "gray",
                            opacity: 0.2
                        },
                        encoding: {
                            x: {
                                field: "morDateStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "morDateEnd",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "center",
                            baseline: "bottom",
                            dy: -(height * 0.05),
                            fontSize: 14,
                            opacity: 0.6,
                            text: [
                                "Eviction",
                                "Moratorium"
                            ]
                        },
                        encoding: {
                            x: {
                                field: "morDateMid",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "rect",
                            color: "gray",
                            opacity: 0.2
                        },
                        encoding: {
                            x: {
                                field: "morTwoStart",
                                type: "temporal"
                            },
                            x2: {
                                field: "morTwoEnd",
                                type: "temporal"
                            }
                        }
                    },
                    {
                        mark: {
                            type: "text",
                            align: "center",
                            baseline: "bottom",
                            dy: -(height * 0.05),
                            fontSize: 14,
                            opacity: 0.6,
                            text: [
                                "Most Eviction",
                                "Cases Paused"
                            ]
                        },
                        encoding: {
                            x: {
                                field: "morTwoMid",
                                type: "temporal"
                            }
                        }
                    },
                    // { 
                    //   mark: {
                    //     type: "text",
                    //     align: "center",
                    //     baseline: "bottom",
                    //     fontSize: 12,             
                    //     dy: (height*.05),
                    //     text: [`There  were ${casesCovidStartThousands}`, `eviction cases at the`,`start of the pandemic`],
                    //   },
                    //   encoding: {
                    //     x: { field: "morDateStart", type: "temporal" },
                    //   },  
                    // },
                    {
                        mark: {
                            type: "rect",
                            color: "black",
                            opacity: 1,
                            width: 2,
                            y: height - height * .45,
                            y2: height - height * .48
                        },
                        encoding: {
                            x: {
                                field: "morDateStart",
                                type: "temporal"
                            }
                        }
                    }
                ]
            }
        ]
    };
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $f5z94.LazyVegaLite), {
        spec: spec,
        className: (0, $5ayhH.VIZ_TIME_SERIES_CLASS)
    });
};
function $638c0333d22b1e3e$export$9dfcb9da95de2dc0(value) {
    return $638c0333d22b1e3e$export$ff3e378b8435757c.has(value);
}
const $638c0333d22b1e3e$export$ff3e378b8435757c = new Map([
    [
        "judgments",
        "Eviction Judgments in NYC"
    ]
]);
const $638c0333d22b1e3e$export$c5737b98bc2b526e = ({ height: height, fieldNames: fieldNames })=>{
    fieldNames = fieldNames || Array.from($638c0333d22b1e3e$export$ff3e378b8435757c.keys());
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, fieldNames.map((fieldName)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($638c0333d22b1e3e$var$JudgmentsViz, {
            key: fieldName,
            height: height,
            fieldName: fieldName,
            title: (0, $68dfc0e667d126bb$export$1282158678cd0974)($638c0333d22b1e3e$export$ff3e378b8435757c.get(fieldName))
        })));
};



var $4rFIf = parcelRequire("4rFIf");
var $9c5c965a961fa8bf$exports = {};

$9c5c965a961fa8bf$exports = (parcelRequire("5fsMG"));



var $1WhnP = parcelRequire("1WhnP");

var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $b1a1131d4f9d7fb3$export$71833e24ada6474b = new (0, $ezVNZ.QueryFiles)(`total-active-cases-table`);
function $b1a1131d4f9d7fb3$export$596f90a6ab88a3db(row) {
    return {
        count: (0, $dQEow.toInt)(row.count),
        category: row.category
    };
}
function $b1a1131d4f9d7fb3$var$getTotalActiveCasesCsvHeader() {
    return [
        "count",
        "category"
    ];
}
function $b1a1131d4f9d7fb3$var$toTotalActiveCasesCsvRow(row) {
    return [
        row.count,
        row.category
    ];
}
const $b1a1131d4f9d7fb3$export$b6f8a7a9786aa98b = {
    files: $b1a1131d4f9d7fb3$export$71833e24ada6474b,
    sqlToRow: $b1a1131d4f9d7fb3$export$596f90a6ab88a3db,
    csvHeader: $b1a1131d4f9d7fb3$var$getTotalActiveCasesCsvHeader(),
    toCsvRow: $b1a1131d4f9d7fb3$var$toTotalActiveCasesCsvRow
};



var $5ayhH = parcelRequire("5ayhH");
var $27a63afe44b4abf5$exports = {};
$27a63afe44b4abf5$exports = $27a63afe44b4abf5$var$flatten;
$27a63afe44b4abf5$var$flatten.flatten = $27a63afe44b4abf5$var$flatten;
$27a63afe44b4abf5$var$flatten.unflatten = $27a63afe44b4abf5$var$unflatten;
function $27a63afe44b4abf5$var$isBuffer(obj) {
    return obj && obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function $27a63afe44b4abf5$var$keyIdentity(key) {
    return key;
}
function $27a63afe44b4abf5$var$flatten(target, opts) {
    opts = opts || {};
    const delimiter = opts.delimiter || ".";
    const maxDepth = opts.maxDepth;
    const transformKey = opts.transformKey || $27a63afe44b4abf5$var$keyIdentity;
    const output = {};
    function step(object, prev, currentDepth) {
        currentDepth = currentDepth || 1;
        Object.keys(object).forEach(function(key) {
            const value = object[key];
            const isarray = opts.safe && Array.isArray(value);
            const type = Object.prototype.toString.call(value);
            const isbuffer = $27a63afe44b4abf5$var$isBuffer(value);
            const isobject = type === "[object Object]" || type === "[object Array]";
            const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
            if (!isarray && !isbuffer && isobject && Object.keys(value).length && (!opts.maxDepth || currentDepth < maxDepth)) return step(value, newKey, currentDepth + 1);
            output[newKey] = value;
        });
    }
    step(target);
    return output;
}
function $27a63afe44b4abf5$var$unflatten(target, opts) {
    opts = opts || {};
    const delimiter = opts.delimiter || ".";
    const overwrite = opts.overwrite || false;
    const transformKey = opts.transformKey || $27a63afe44b4abf5$var$keyIdentity;
    const result = {};
    const isbuffer = $27a63afe44b4abf5$var$isBuffer(target);
    if (isbuffer || Object.prototype.toString.call(target) !== "[object Object]") return target;
    // safely ensure that the key is
    // an integer.
    function getkey(key) {
        const parsedKey = Number(key);
        return isNaN(parsedKey) || key.indexOf(".") !== -1 || opts.object ? key : parsedKey;
    }
    function addKeys(keyPrefix, recipient, target) {
        return Object.keys(target).reduce(function(result, key) {
            result[keyPrefix + delimiter + key] = target[key];
            return result;
        }, recipient);
    }
    function isEmpty(val) {
        const type = Object.prototype.toString.call(val);
        const isArray = type === "[object Array]";
        const isObject = type === "[object Object]";
        if (!val) return true;
        else if (isArray) return !val.length;
        else if (isObject) return !Object.keys(val).length;
    }
    target = Object.keys(target).reduce(function(result, key) {
        const type = Object.prototype.toString.call(target[key]);
        const isObject = type === "[object Object]" || type === "[object Array]";
        if (!isObject || isEmpty(target[key])) {
            result[key] = target[key];
            return result;
        } else return addKeys(key, result, $27a63afe44b4abf5$var$flatten(target[key], opts));
    }, {});
    Object.keys(target).forEach(function(key) {
        const split = key.split(delimiter).map(transformKey);
        let key1 = getkey(split.shift());
        let key2 = getkey(split[0]);
        let recipient = result;
        while(key2 !== undefined){
            if (key1 === "__proto__") return;
            const type = Object.prototype.toString.call(recipient[key1]);
            const isobject = type === "[object Object]" || type === "[object Array]";
            // do not write over falsey, non-undefined values if overwrite is false
            if (!overwrite && !isobject && typeof recipient[key1] !== "undefined") return;
            if (overwrite && !isobject || !overwrite && recipient[key1] == null) recipient[key1] = typeof key2 === "number" && !opts.object ? [] : {};
            recipient = recipient[key1];
            if (split.length > 0) {
                key1 = getkey(split.shift());
                key2 = getkey(split[0]);
            }
        }
        // unflatten again for 'messy objects'
        recipient[key1] = $27a63afe44b4abf5$var$unflatten(target[key], opts);
    });
    return result;
}



var $kcdlB = parcelRequire("kcdlB");
const $6a77321ab89d82f6$export$492c209b89f2ad16 = ()=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $b1a1131d4f9d7fb3$export$71833e24ada6474b).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TABLE_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($6a77321ab89d82f6$var$ActiveCasesTableWithValues, {
            values: values
        }));
};
const $6a77321ab89d82f6$var$ActiveCasesTableWithValues = (values)=>{
    const dataTable = $6a77321ab89d82f6$var$constructDataTable(values);
    const rowLabels = [
        "Statewide Totals",
        "  without NYC commercial #s",
        "Pre-Pandemic #",
        "  without NYC commercial #s",
        "Pandemic #",
        "  without NYC commercial #s",
        "NYC Totals",
        "  residential only #s",
        "Pre-Pandemic #",
        "  residential only #s",
        "Pandemic #",
        "  residential only #s",
        "Outside NYC Totals",
        "Pre-Pandemic #",
        "Pandemic #"
    ];
    var data = [];
    for(var i = 0; i < rowLabels.length; i++)data[i] = {
        id: rowLabels[i],
        totalActiveCases: (0, $kcdlB.numberWithCommas)(dataTable[i][0]),
        nonPayment: (0, $kcdlB.numberWithCommas)(dataTable[i][1]),
        holdover: (0, $kcdlB.numberWithCommas)(dataTable[i][2])
    };
    const columns = [
        {
            Header: "",
            accessor: "id"
        },
        {
            Header: "Total Active Cases",
            accessor: "totalActiveCases"
        },
        {
            Header: "Non-payment",
            accessor: "nonPayment"
        },
        {
            Header: "Holdover",
            accessor: "holdover"
        }
    ];
    const { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, headerGroups: headerGroups, rows: rows, prepareRow: prepareRow } = (0, $9c5c965a961fa8bf$exports.useTable)({
        columns: columns,
        data: data
    });
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("table", {
        ...getTableProps()
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("thead", null, headerGroups.map((headerGroup)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...headerGroup.getHeaderGroupProps()
        }, headerGroup.headers.map((column)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("th", {
                ...column.getHeaderProps()
            }, column.render("Header")))))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tbody", {
        ...getTableBodyProps()
    }, rows.map((row, i)=>{
        prepareRow(row);
        return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...row.getRowProps()
        }, row.cells.map((cell)=>{
            return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("td", {
                align: "right",
                ...cell.getCellProps(),
                style: {
                    background: [
                        0,
                        6,
                        12
                    ].includes(cell.row.index) ? "yellow" : "white",
                    fontWeight: [
                        0,
                        2,
                        4,
                        6,
                        8,
                        10,
                        12
                    ].includes(cell.row.index) ? "bold" : "normal"
                }
            }, cell.render("Cell"));
        }));
    })));
};
function $6a77321ab89d82f6$var$constructDataTable(values) {
    var activeCasesMap = Object.fromEntries(new Map(values.values.map((key)=>[
            key.category,
            key.count
        ])));
    var activeCasesDeepObject = (0, $27a63afe44b4abf5$exports.unflatten)(activeCasesMap);
    const easyAccessMap = {
        "outside-pandemic-all": activeCasesDeepObject["Outside NYC"]["Issued Pandemic"]["All"],
        "outside-prepandemic-all": activeCasesDeepObject["Outside NYC"]["Issued Prepandemic"]["All"],
        "nyc-pandemic-residential": activeCasesDeepObject["NYC"]["Issued Pandemic"]["Residential"],
        "nyc-pandemic-commercial": activeCasesDeepObject["NYC"]["Issued Pandemic"]["Commercial"],
        "nyc-prepandemic-residential": activeCasesDeepObject["NYC"]["Issued Prepandemic"]["Residential"],
        "nyc-prepandemic-commercial": activeCasesDeepObject["NYC"]["Issued Prepandemic"]["Commercial"]
    };
    var table = Array.from(Array(15), ()=>Array(3)); // 15 rows, 3 cols
    return $6a77321ab89d82f6$var$fillTable(table, easyAccessMap);
}
function $6a77321ab89d82f6$var$fillTable(table, easyAccessMap) {
    const total_col = 0; // total column index
    const np_col = 1; // nonpayment column
    const ho_col = 2; // holdover column
    const state_row = 0;
    const nyc_row = 6;
    const outside_row = 12;
    // Set most granular counts. All other cells will hold sums of these.
    table[nyc_row + 2][np_col] = easyAccessMap["nyc-prepandemic-residential"]["Non-Payment"] + easyAccessMap["nyc-prepandemic-commercial"]["Non-Payment"];
    table[nyc_row + 2][ho_col] = easyAccessMap["nyc-prepandemic-residential"]["Holdover"] + easyAccessMap["nyc-prepandemic-commercial"]["Holdover"];
    table[nyc_row + 3][np_col] = easyAccessMap["nyc-prepandemic-residential"]["Non-Payment"];
    table[nyc_row + 3][ho_col] = easyAccessMap["nyc-prepandemic-residential"]["Holdover"];
    table[nyc_row + 4][np_col] = easyAccessMap["nyc-pandemic-residential"]["Non-Payment"] + easyAccessMap["nyc-pandemic-commercial"]["Non-Payment"];
    table[nyc_row + 4][ho_col] = easyAccessMap["nyc-pandemic-residential"]["Holdover"] + easyAccessMap["nyc-pandemic-commercial"]["Holdover"];
    table[nyc_row + 5][np_col] = easyAccessMap["nyc-pandemic-residential"]["Non-Payment"];
    table[nyc_row + 5][ho_col] = easyAccessMap["nyc-pandemic-residential"]["Holdover"];
    table[outside_row + 1][np_col] = easyAccessMap["outside-prepandemic-all"]["Non-Payment"];
    table[outside_row + 1][ho_col] = easyAccessMap["outside-prepandemic-all"]["Holdover"];
    table[outside_row + 2][np_col] = easyAccessMap["outside-pandemic-all"]["Non-Payment"];
    table[outside_row + 2][ho_col] = easyAccessMap["outside-pandemic-all"]["Holdover"];
    for(var col = np_col; col <= ho_col; col++){
        // Sum outside NYC vertically
        table[outside_row][col] = table[outside_row + 1][col] + table[outside_row + 2][col];
        // Sum NYC vertically
        table[nyc_row][col] = table[nyc_row + 2][col] + table[nyc_row + 4][col];
        table[nyc_row + 1][col] = table[nyc_row + 3][col] + table[nyc_row + 5][col];
        // Sum Statewide vertically
        table[state_row + 2][col] = table[nyc_row + 2][col] + table[outside_row + 1][col];
        table[state_row + 3][col] = table[nyc_row + 3][col] + table[outside_row + 1][col];
        table[state_row + 4][col] = table[nyc_row + 4][col] + table[outside_row + 2][col];
        table[state_row + 5][col] = table[nyc_row + 5][col] + table[outside_row + 2][col];
        // Top lines vertical
        table[state_row][col] = table[state_row + 2][col] + table[state_row + 4][col];
        table[state_row + 1][col] = table[state_row + 3][col] + table[state_row + 5][col];
    }
    // Sum outside NYC horizontally
    for(var i = outside_row; i < table.length; i++)table[i][total_col] = table[i][np_col] + table[i][ho_col];
    // Sum NYC horizontally
    for(var i = nyc_row; i < outside_row; i++)table[i][total_col] = table[i][np_col] + table[i][ho_col];
    // Sum Statewide horizontally
    for(var i = state_row; i < nyc_row; i++)table[i][total_col] = table[i][np_col] + table[i][ho_col];
    return table;
}



var $5ayhH = parcelRequire("5ayhH");

var $4rFIf = parcelRequire("4rFIf");


var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $03c6736be4a3cb76$export$513dcedbf57a1de3 = new (0, $ezVNZ.QueryFiles)(`filings-by-zip-table-outside-nyc`);
const $03c6736be4a3cb76$export$5dad35a935aa01e5 = {
    court_name: "",
    zipcode: "",
    filings: 0
};
function $03c6736be4a3cb76$export$815806e825509111(row) {
    return {
        court_name: (0, $dQEow.ensureString)(row.court_name),
        zipcode: (0, $dQEow.ensureString)(row.zipcode),
        filings: (0, $dQEow.toInt)(row.filings)
    };
}
function $03c6736be4a3cb76$var$getCsvHeader() {
    return [
        "court_name",
        "zipcode",
        "filings"
    ];
}
function $03c6736be4a3cb76$var$toCsvRow(row) {
    return [
        row.court_name,
        row.zipcode,
        row.filings.toString()
    ];
}
const $03c6736be4a3cb76$export$496d5a78b96ea0d4 = {
    files: $03c6736be4a3cb76$export$513dcedbf57a1de3,
    sqlToRow: $03c6736be4a3cb76$export$815806e825509111,
    csvHeader: $03c6736be4a3cb76$var$getCsvHeader(),
    toCsvRow: $03c6736be4a3cb76$var$toCsvRow
};



var $5ayhH = parcelRequire("5ayhH");

var $1WhnP = parcelRequire("1WhnP");

var $kcdlB = parcelRequire("kcdlB");
const $66a14c1bf75c8751$export$8c02771dd24df70c = ()=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("span", null, "Note: Zip codes may appear in multiple courts."), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $03c6736be4a3cb76$export$513dcedbf57a1de3).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TABLE_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($66a14c1bf75c8751$var$FilingsByZipOutsideNYCTableWithValues, {
            values: values
        })));
};
const $66a14c1bf75c8751$var$Table = ({ columns: columns, data: data })=>{
    const { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, headerGroups: headerGroups, rows: rows, prepareRow: prepareRow } = (0, $9c5c965a961fa8bf$exports.useTable)({
        columns: columns,
        data: data,
        initialState: {
            groupBy: [
                "court"
            ]
        }
    }, (0, $9c5c965a961fa8bf$exports.useGroupBy), (0, $9c5c965a961fa8bf$exports.useExpanded));
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("table", {
        ...getTableProps()
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("thead", null, headerGroups.map((headerGroup)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...headerGroup.getHeaderGroupProps()
        }, headerGroup.headers.map((column)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("th", {
                ...column.getHeaderProps()
            }, column.id == "court" ? /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("span", {
                ...column.getGroupByToggleProps()
            }, column.isGrouped ? "\u27A1\uFE0F " : "\u2B07\uFE0F ") : null, column.render("Header")))))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tbody", {
        ...getTableBodyProps()
    }, rows.map((row, i)=>{
        prepareRow(row);
        return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...row.getRowProps()
        }, row.cells.map((cell)=>{
            return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("td", {
                align: "left",
                ...cell.getCellProps()
            }, cell.isGrouped ? /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("span", {
                ...row.getToggleRowExpandedProps()
            }, row.isExpanded ? "\u2B07\uFE0F" : "\u27A1\uFE0F"), " ", cell.render("Cell"), " (", row.subRows.length, ")") : cell.isAggregated ? cell.render("Aggregated") : cell.isPlaceholder ? null : cell.render("Cell"));
        }));
    })));
};
function $66a14c1bf75c8751$var$makeColumns() {
    const cols = (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).useMemo(()=>[
            {
                Header: "Court",
                accessor: "court_name",
                id: "court"
            },
            {
                Header: "Zipcode",
                accessor: "zipcode",
                aggregate: "count",
                Aggregated: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${value} zip codes`)
            },
            {
                Header: "Total cases filed since March 23, 2020",
                accessor: "filings",
                aggregate: "sum",
                Aggregated: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${(0, $kcdlB.numberWithCommas)(value)}`)
            }
        ], []);
    return cols;
}
const $66a14c1bf75c8751$var$FilingsByZipOutsideNYCTableWithValues = (values)=>{
    var data = values.values;
    const columns = $66a14c1bf75c8751$var$makeColumns();
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($66a14c1bf75c8751$var$Table, {
        columns: columns,
        data: data
    });
};



var $4rFIf = parcelRequire("4rFIf");


var $ezVNZ = parcelRequire("ezVNZ");
const $1cb1da9c077fe694$export$d67a940aac01a0ab = new (0, $ezVNZ.QueryFiles)(`monthly-filings-table-by-zip`);
function $1cb1da9c077fe694$export$8e9aecc8bb20c8c5(row) {
    return {
        zipcode: row.zipcode,
        region: row.region,
        borough: row.borough,
        two_months_ago: row.two_months_ago,
        three_months_ago: row.three_months_ago,
        num_increase: row.num_increase,
        percent_increase: row.percent_increase
    };
}
function $1cb1da9c077fe694$var$getMonthlyFilingsByZipCsvHeader() {
    return [
        "zipcode",
        "region",
        "borough",
        "two_months_ago",
        "three_months_ago",
        "num_increase",
        "percent_increase"
    ];
}
function $1cb1da9c077fe694$var$toMonthlyFilingsByZipCsvRow(row) {
    return [
        row.zipcode,
        row.region,
        row.borough,
        row.two_months_ago,
        row.three_months_ago,
        row.num_increase,
        row.percent_increase
    ];
}
const $1cb1da9c077fe694$export$af84ae31554fe6a1 = {
    files: $1cb1da9c077fe694$export$d67a940aac01a0ab,
    sqlToRow: $1cb1da9c077fe694$export$8e9aecc8bb20c8c5,
    csvHeader: $1cb1da9c077fe694$var$getMonthlyFilingsByZipCsvHeader(),
    toCsvRow: $1cb1da9c077fe694$var$toMonthlyFilingsByZipCsvRow
};



var $5ayhH = parcelRequire("5ayhH");

var $1WhnP = parcelRequire("1WhnP");

var $kcdlB = parcelRequire("kcdlB");
const $db1a2d154bd72103$export$8aedbfb1f5629cb1 = ()=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("span", null, "Note: Filings from past 5-6 weeks may be artificially low due to reporting lags."), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $1cb1da9c077fe694$export$d67a940aac01a0ab).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TABLE_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($db1a2d154bd72103$var$MonthlyFilingsByZipWithValues, {
            values: values
        })));
};
const $db1a2d154bd72103$var$Table = ({ columns: columns, data: data })=>{
    const { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, headerGroups: headerGroups, rows: rows, prepareRow: prepareRow } = (0, $9c5c965a961fa8bf$exports.useTable)({
        columns: columns,
        data: data
    });
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("table", {
        ...getTableProps()
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("thead", null, headerGroups.map((headerGroup)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...headerGroup.getHeaderGroupProps()
        }, headerGroup.headers.map((column)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("th", {
                ...column.getHeaderProps()
            }, column.render("Header")))))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tbody", {
        ...getTableBodyProps()
    }, rows.map((row, i)=>{
        prepareRow(row);
        return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...row.getRowProps()
        }, row.cells.map((cell)=>{
            return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("td", {
                align: "left",
                ...cell.getCellProps()
            }, cell.isPlaceholder ? null : cell.render("Cell"));
        }));
    })));
};
function $db1a2d154bd72103$var$makeColumns() {
    const cols = (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).useMemo(()=>[
            {
                Header: "Zipcode",
                accessor: "zipcode"
            },
            {
                Header: "Borough",
                accessor: "borough"
            },
            {
                Header: "3 months ago",
                accessor: "three_months_ago"
            },
            {
                Header: "2 months ago",
                accessor: "two_months_ago"
            },
            {
                Header: "# Increase",
                accessor: "num_increase"
            },
            {
                Header: "% Increase",
                accessor: "percent_increase",
                Cell: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${(0, $kcdlB.numberWithCommas)(value)}%`)
            }
        ], []);
    return cols;
}
const $db1a2d154bd72103$var$MonthlyFilingsByZipWithValues = (values)=>{
    var data = values.values;
    const columns = $db1a2d154bd72103$var$makeColumns();
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($db1a2d154bd72103$var$Table, {
        columns: columns,
        data: data
    });
};



var $4rFIf = parcelRequire("4rFIf");


var $ezVNZ = parcelRequire("ezVNZ");
const $eb1b974524bf0fc5$export$4fa59ae0e1b3519f = new (0, $ezVNZ.QueryFiles)(`monthly-filings-table-citywide`);
function $eb1b974524bf0fc5$export$b870577dbaea04a6(row) {
    return {
        borough: row.borough,
        region: row.region,
        two_months_ago: row.two_months_ago,
        three_months_ago: row.three_months_ago,
        num_increase: row.num_increase,
        percent_increase: row.percent_increase
    };
}
function $eb1b974524bf0fc5$var$getMonthlyFilingsCitywideCsvHeader() {
    return [
        "borough",
        "region",
        "two_months_ago",
        "three_months_ago",
        "num_increase",
        "percent_increase"
    ];
}
function $eb1b974524bf0fc5$var$toMonthlyFilingsCitywideCsvRow(row) {
    return [
        row.borough,
        row.region,
        row.two_months_ago,
        row.three_months_ago,
        row.num_increase,
        row.percent_increase
    ];
}
const $eb1b974524bf0fc5$export$567b8229e156b914 = {
    files: $eb1b974524bf0fc5$export$4fa59ae0e1b3519f,
    sqlToRow: $eb1b974524bf0fc5$export$b870577dbaea04a6,
    csvHeader: $eb1b974524bf0fc5$var$getMonthlyFilingsCitywideCsvHeader(),
    toCsvRow: $eb1b974524bf0fc5$var$toMonthlyFilingsCitywideCsvRow
};



var $5ayhH = parcelRequire("5ayhH");

var $1WhnP = parcelRequire("1WhnP");

var $kcdlB = parcelRequire("kcdlB");
const $ec2e9f2c234bb9c4$export$63143764f1433243 = ()=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("span", null, "Note: Filings from past 5-6 weeks may be artificially low due to reporting lags."), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $eb1b974524bf0fc5$export$4fa59ae0e1b3519f).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TABLE_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($ec2e9f2c234bb9c4$var$MonthlyFilingsCitywideWithValues, {
            values: values
        })));
};
const $ec2e9f2c234bb9c4$var$Table = ({ columns: columns, data: data })=>{
    const { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, headerGroups: headerGroups, rows: rows, prepareRow: prepareRow } = (0, $9c5c965a961fa8bf$exports.useTable)({
        columns: columns,
        data: data,
        initialState: {
            groupBy: [
                "region"
            ]
        }
    }, (0, $9c5c965a961fa8bf$exports.useGroupBy), (0, $9c5c965a961fa8bf$exports.useExpanded));
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("table", {
        ...getTableProps()
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("thead", null, headerGroups.map((headerGroup)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...headerGroup.getHeaderGroupProps()
        }, headerGroup.headers.map((column)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("th", {
                ...column.getHeaderProps()
            }, column.id == "court" ? /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("span", {
                ...column.getGroupByToggleProps()
            }, column.isGrouped ? "\u27A1\uFE0F " : "\u2B07\uFE0F ") : null, column.render("Header")))))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tbody", {
        ...getTableBodyProps()
    }, rows.map((row, i)=>{
        prepareRow(row);
        return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("tr", {
            ...row.getRowProps()
        }, row.cells.map((cell)=>{
            return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("td", {
                align: "left",
                ...cell.getCellProps()
            }, cell.isGrouped ? /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("span", {
                ...row.getToggleRowExpandedProps()
            }, row.isExpanded ? "\u2B07\uFE0F" : "\u27A1\uFE0F"), " ", cell.render("Cell"), " (", row.subRows.length, ")") : cell.isAggregated ? cell.render("Aggregated") : cell.isPlaceholder ? null : cell.render("Cell"));
        }));
    })));
};
function $ec2e9f2c234bb9c4$var$makeColumns() {
    const cols = (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).useMemo(()=>[
            {
                Header: "Region",
                accessor: "region",
                id: "region"
            },
            {
                Header: "Borough",
                accessor: "borough",
                aggregate: "count",
                Aggregated: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${value} boroughs`)
            },
            {
                Header: "3 months ago",
                accessor: "three_months_ago",
                // "sum" doesn't handle negative values properly: https://github.com/tannerlinsley/react-table/issues/3273
                aggregate: (leafValues)=>leafValues.reduce((value, next)=>parseInt(value) + parseInt(next)),
                Aggregated: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${(0, $kcdlB.numberWithCommas)(value)}`),
                Cell: ({ value: value })=>value
            },
            {
                Header: "2 months ago",
                accessor: "two_months_ago",
                // "sum" doesn't handle negative values properly: https://github.com/tannerlinsley/react-table/issues/3273
                aggregate: (leafValues)=>leafValues.reduce((value, next)=>parseInt(value) + parseInt(next)),
                Aggregated: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${(0, $kcdlB.numberWithCommas)(value)}`),
                Cell: ({ value: value })=>value
            },
            {
                Header: "# Increase",
                accessor: "num_increase",
                // "sum" doesn't handle negative values properly: https://github.com/tannerlinsley/react-table/issues/3273
                aggregate: (leafValues)=>leafValues.reduce((value, next)=>parseInt(value) + parseInt(next)),
                Aggregated: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${(0, $kcdlB.numberWithCommas)(value)}`),
                Cell: ({ value: value })=>value
            },
            {
                Header: "% Increase",
                accessor: "percent_increase",
                aggregate: (leafValues)=>$ec2e9f2c234bb9c4$var$calculate_percentage_increase(leafValues),
                aggregateValue: (_value, { original: original })=>`${original.two_months_ago}-${original.three_months_ago}`,
                Aggregated: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${value}%`),
                Cell: ({ value: value })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, `${(0, $kcdlB.numberWithCommas)(value)}%`)
            }
        ], []);
    return cols;
}
/**
 *  leafValues looks like:
 *  ['123-455', '467-234']
*/ function $ec2e9f2c234bb9c4$var$calculate_percentage_increase(leafValues) {
    var two_months_ago_sum = 0;
    var three_months_ago_sum = 0;
    for(let idx in leafValues){
        let spl = leafValues[idx].split("-");
        two_months_ago_sum += parseInt(spl[0]);
        three_months_ago_sum += parseInt(spl[1]);
    }
    return Math.round((two_months_ago_sum - three_months_ago_sum) / three_months_ago_sum * 100);
}
const $ec2e9f2c234bb9c4$var$MonthlyFilingsCitywideWithValues = (values)=>{
    var data = values.values;
    const columns = $ec2e9f2c234bb9c4$var$makeColumns();
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($ec2e9f2c234bb9c4$var$Table, {
        columns: columns,
        data: data
    });
};



var $4rFIf = parcelRequire("4rFIf");
var $098a7b94293d3a42$exports = {};

(function(global, factory) {
    factory($098a7b94293d3a42$exports, (parcelRequire("4rFIf")));
})($098a7b94293d3a42$exports, function(exports1, React) {
    "use strict";
    function degreesToRadians(degrees) {
        return degrees * Math.PI / 180;
    }
    function valueBetween(value, min, max) {
        if (value > max) return max;
        if (value < min) return min;
        return value;
    }
    function extractPercentage(value, percentage) {
        return percentage / 100 * value;
    }
    function bisectorAngle(startAngle, lengthAngle) {
        return startAngle + lengthAngle / 2;
    }
    function shiftVectorAlongAngle(angle, distance) {
        var angleRadians = degreesToRadians(angle);
        return {
            dx: distance * Math.cos(angleRadians),
            dy: distance * Math.sin(angleRadians)
        };
    }
    function isNumber(value) {
        return typeof value === "number";
    }
    function functionProp(prop, payload) {
        return typeof prop === "function" ? prop(payload) : prop;
    }
    function makePropsWithDefaults(props, defaultProps) {
        var result = Object.assign({}, defaultProps, props);
        // @NOTE Object.assign doesn't default properties with undefined value (like React defaultProps does)
        for(var key in defaultProps)if (props[key] === undefined) result[key] = defaultProps[key];
        return result;
    }
    function sumValues(data) {
        var sum = 0;
        for(var i = 0; i < data.length; i++)sum += data[i].value;
        return sum;
    }
    // Append "percentage", "degrees" and "startAngle" to each data entry
    function extendData(_ref) {
        var data = _ref.data, totalAngle = _ref.lengthAngle, totalValue = _ref.totalValue, paddingAngle = _ref.paddingAngle, chartStartAngle = _ref.startAngle;
        var total = totalValue || sumValues(data);
        var normalizedTotalAngle = valueBetween(totalAngle, -360, 360);
        var numberOfPaddings = Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;
        var singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);
        var degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;
        var degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;
        var lastSegmentEnd = 0;
        var extendedData = [];
        // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?
        for(var i = 0; i < data.length; i++){
            var dataEntry = data[i];
            var valueInPercentage = total === 0 ? 0 : dataEntry.value / total * 100;
            var degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);
            var startAngle = lastSegmentEnd + chartStartAngle;
            lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;
            extendedData.push(Object.assign({
                percentage: valueInPercentage,
                startAngle: startAngle,
                degrees: degrees
            }, dataEntry));
        }
        return extendedData;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for(i = 0; i < sourceKeys.length; i++){
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
        }
        return target;
    }
    function ReactMinimalPieChartLabel(_ref) {
        var renderLabel = _ref.renderLabel, labelProps = _ref.labelProps;
        var label = renderLabel(labelProps);
        // Default label
        if (typeof label === "string" || typeof label === "number") {
            labelProps.dataEntry;
            labelProps.dataIndex;
            var props = _objectWithoutPropertiesLoose(labelProps, [
                "dataEntry",
                "dataIndex"
            ]);
            return /*#__PURE__*/ React.createElement("text", Object.assign({
                dominantBaseline: "central"
            }, props), label);
        }
        if (React.isValidElement(label)) return label;
        return null;
    }
    function round(number) {
        var divisor = 1e14; // 14 decimals
        return Math.round((number + Number.EPSILON) * divisor) / divisor;
    }
    function evaluateTextAnchorPosition(_ref) {
        var labelPosition = _ref.labelPosition, lineWidth = _ref.lineWidth, labelHorizontalShift = _ref.labelHorizontalShift;
        var dx = round(labelHorizontalShift);
        // Label in the vertical center
        if (dx === 0) return "middle";
        // Outward label
        if (labelPosition > 100) return dx > 0 ? "start" : "end";
        // Inward label
        var innerRadius = 100 - lineWidth;
        if (labelPosition < innerRadius) return dx > 0 ? "end" : "start";
        // Overlying label
        return "middle";
    }
    function makeLabelRenderProps(data, props) {
        return data.map(function(dataEntry, index) {
            var _functionProp;
            var segmentsShift = (_functionProp = functionProp(props.segmentsShift, index)) != null ? _functionProp : 0;
            var distanceFromCenter = extractPercentage(props.radius, props.labelPosition) + segmentsShift;
            var _shiftVectorAlongAngl = shiftVectorAlongAngle(bisectorAngle(dataEntry.startAngle, dataEntry.degrees), distanceFromCenter), dx = _shiftVectorAlongAngl.dx, dy = _shiftVectorAlongAngl.dy; // This object is passed as argument to the "label" function prop
            var labelRenderProps = {
                x: props.center[0],
                y: props.center[1],
                dx: dx,
                dy: dy,
                textAnchor: evaluateTextAnchorPosition({
                    labelPosition: props.labelPosition,
                    lineWidth: props.lineWidth,
                    labelHorizontalShift: dx
                }),
                dataEntry: dataEntry,
                dataIndex: index,
                style: functionProp(props.labelStyle, index)
            };
            return labelRenderProps;
        });
    }
    function renderLabels(data, props) {
        var label = props.label;
        if (label) return makeLabelRenderProps(data, props).map(function(labelRenderProps, index) {
            return /*#__PURE__*/ React.createElement(ReactMinimalPieChartLabel, {
                key: "label-" + (labelRenderProps.dataEntry.key || index),
                renderLabel: label,
                labelProps: labelRenderProps
            });
        });
    }
    // from http://stackoverflow.com/a/18473154
    var partialCircle = function partialCircle(cx, cy, r, start, end) {
        var length = end - start;
        if (length === 0) return [];
        var fromX = r * Math.cos(start) + cx;
        var fromY = r * Math.sin(start) + cy;
        var toX = r * Math.cos(end) + cx;
        var toY = r * Math.sin(end) + cy;
        var large = Math.abs(length) <= Math.PI ? "0" : "1";
        var sweep = length < 0 ? "0" : "1";
        return [
            [
                "M",
                fromX,
                fromY
            ],
            [
                "A",
                r,
                r,
                0,
                large,
                sweep,
                toX,
                toY
            ]
        ];
    };
    var svgPartialCircle = partialCircle;
    var partialCircle$1 = svgPartialCircle;
    function makePathCommands(cx, cy, startAngle, lengthAngle, radius) {
        var patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);
        return partialCircle$1(cx, cy, // center X and Y
        radius, degreesToRadians(startAngle), degreesToRadians(startAngle + patchedLengthAngle)).map(function(command) {
            return command.join(" ");
        }).join(" ");
    }
    function ReactMinimalPieChartPath(_ref) {
        var cx = _ref.cx, cy = _ref.cy, lengthAngle = _ref.lengthAngle, lineWidth = _ref.lineWidth, radius = _ref.radius, _ref$shift = _ref.shift, shift = _ref$shift === void 0 ? 0 : _ref$shift, reveal = _ref.reveal, rounded = _ref.rounded, startAngle = _ref.startAngle, title = _ref.title, props = _objectWithoutPropertiesLoose(_ref, [
            "cx",
            "cy",
            "lengthAngle",
            "lineWidth",
            "radius",
            "shift",
            "reveal",
            "rounded",
            "startAngle",
            "title"
        ]);
        var pathRadius = radius - lineWidth / 2;
        //@NOTE This shift might be rendered as a translation in future
        var _shiftVectorAlongAngl = shiftVectorAlongAngle(bisectorAngle(startAngle, lengthAngle), shift), dx = _shiftVectorAlongAngl.dx, dy = _shiftVectorAlongAngl.dy;
        var pathCommands = makePathCommands(cx + dx, cy + dy, startAngle, lengthAngle, pathRadius);
        var strokeDasharray;
        var strokeDashoffset;
        // Animate/hide paths with "stroke-dasharray" + "stroke-dashoffset"
        // https://css-tricks.com/svg-line-animation-works/
        if (isNumber(reveal)) {
            var pathLength = degreesToRadians(pathRadius) * lengthAngle;
            strokeDasharray = Math.abs(pathLength);
            strokeDashoffset = strokeDasharray - extractPercentage(strokeDasharray, reveal);
        }
        return /*#__PURE__*/ React.createElement("path", Object.assign({
            d: pathCommands,
            fill: "none",
            strokeWidth: lineWidth,
            strokeDasharray: strokeDasharray,
            strokeDashoffset: strokeDashoffset,
            strokeLinecap: rounded ? "round" : undefined
        }, props), title && /*#__PURE__*/ React.createElement("title", null, title));
    }
    function combineSegmentTransitionsStyle(duration, easing, customStyle) {
        // Merge chart's animation CSS transition with "transition" found to customStyle
        var transition = "stroke-dashoffset " + duration + "ms " + easing;
        if (customStyle && customStyle.transition) transition = transition + "," + customStyle.transition;
        return {
            transition: transition
        };
    }
    function getRevealValue(props) {
        //@NOTE When animation is on, chart has to be fully revealed when reveal is not set
        if (props.animate && !isNumber(props.reveal)) return 100;
        return props.reveal;
    }
    function makeEventHandler(eventHandler, payload) {
        return eventHandler && function(e) {
            eventHandler(e, payload);
        };
    }
    function renderSegments(data, props, revealOverride) {
        // @NOTE this should go in Path component. Here for performance reasons
        var reveal = revealOverride != null ? revealOverride : getRevealValue(props);
        var radius = props.radius, _props$center = props.center, cx = _props$center[0], cy = _props$center[1];
        var lineWidth = extractPercentage(radius, props.lineWidth);
        var paths = data.map(function(dataEntry, index) {
            var segmentsStyle = functionProp(props.segmentsStyle, index);
            return /*#__PURE__*/ React.createElement(ReactMinimalPieChartPath, {
                cx: cx,
                cy: cy,
                key: dataEntry.key || index,
                lengthAngle: dataEntry.degrees,
                lineWidth: lineWidth,
                radius: radius,
                rounded: props.rounded,
                reveal: reveal,
                shift: functionProp(props.segmentsShift, index),
                startAngle: dataEntry.startAngle,
                title: dataEntry.title,
                style: Object.assign({}, segmentsStyle, props.animate && combineSegmentTransitionsStyle(props.animationDuration, props.animationEasing, segmentsStyle)),
                stroke: dataEntry.color,
                tabIndex: props.segmentsTabIndex,
                onBlur: makeEventHandler(props.onBlur, index),
                onClick: makeEventHandler(props.onClick, index),
                onFocus: makeEventHandler(props.onFocus, index),
                onKeyDown: makeEventHandler(props.onKeyDown, index),
                onMouseOver: makeEventHandler(props.onMouseOver, index),
                onMouseOut: makeEventHandler(props.onMouseOut, index)
            });
        });
        if (props.background) paths.unshift(/*#__PURE__*/ React.createElement(ReactMinimalPieChartPath, {
            cx: cx,
            cy: cy,
            key: "bg",
            lengthAngle: props.lengthAngle,
            lineWidth: lineWidth,
            radius: radius,
            rounded: props.rounded,
            startAngle: props.startAngle,
            stroke: props.background
        }));
        return paths;
    }
    var defaultProps = {
        animationDuration: 500,
        animationEasing: "ease-out",
        center: [
            50,
            50
        ],
        data: [],
        labelPosition: 50,
        lengthAngle: 360,
        lineWidth: 100,
        paddingAngle: 0,
        radius: 50,
        startAngle: 0,
        viewBoxSize: [
            100,
            100
        ]
    };
    function ReactMinimalPieChart(originalProps) {
        var props = makePropsWithDefaults(originalProps, // @ts-expect-error: defaultProps.data is typed as BaseDataEntry
        defaultProps);
        var _useState = React.useState(props.animate ? 0 : null), revealOverride = _useState[0], setRevealOverride = _useState[1];
        React.useEffect(function() {
            if (props.animate) // Trigger initial animation
            setRevealOverride(null);
        }, []);
        var extendedData = extendData(props);
        return /*#__PURE__*/ React.createElement("svg", {
            viewBox: "0 0 " + props.viewBoxSize[0] + " " + props.viewBoxSize[1],
            width: "100%",
            height: "100%",
            className: props.className,
            style: props.style
        }, renderSegments(extendedData, props, revealOverride), renderLabels(extendedData, props), props.children);
    }
    exports1.PieChart = ReactMinimalPieChart;
    exports1.pieChartDefaultProps = defaultProps;
});



var $dQEow = parcelRequire("dQEow");

var $ezVNZ = parcelRequire("ezVNZ");
const $573b9780cc0bcdce$export$4e60e8397b169b91 = new (0, $ezVNZ.QueryFiles)(`borough-pie-chart-active-cases`);
function $573b9780cc0bcdce$export$5cf361c8476fc3a7(row) {
    return {
        count: (0, $dQEow.toInt)(row.count),
        borough: row.borough,
        timeBucket: row.timebucket
    };
}
function $573b9780cc0bcdce$var$getBoroughPieChartActiveCasesCsvHeader() {
    return [
        "count",
        "borough",
        "timeBucket"
    ];
}
function $573b9780cc0bcdce$var$toBoroughPieChartActiveCasesCsvRow(row) {
    return [
        row.count,
        row.borough,
        row.timeBucket
    ];
}
const $573b9780cc0bcdce$export$14afe4a33ef34f26 = {
    files: $573b9780cc0bcdce$export$4e60e8397b169b91,
    sqlToRow: $573b9780cc0bcdce$export$5cf361c8476fc3a7,
    csvHeader: $573b9780cc0bcdce$var$getBoroughPieChartActiveCasesCsvHeader(),
    toCsvRow: $573b9780cc0bcdce$var$toBoroughPieChartActiveCasesCsvRow
};



var $1WhnP = parcelRequire("1WhnP");

var $5ayhH = parcelRequire("5ayhH");
const $72bfc70dea82d4c7$export$9925fc234bcbd8ef = ()=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $1WhnP.JsonLoader), {
        url: (0, $573b9780cc0bcdce$export$4e60e8397b169b91).json,
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_TABLE_CLASS)
        })
    }, (values)=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($72bfc70dea82d4c7$var$BoroughPieChartsActiveCasesWithValues, {
            values: values
        })));
};
const $72bfc70dea82d4c7$var$BoroughPieChartsActiveCasesWithValues = (values)=>{
    const data = $72bfc70dea82d4c7$var$formatData(values.values);
    const defaultLabelStyle = {
        fontSize: "5px",
        fontFamily: "sans-serif"
    };
    const [hovered, setHovered] = (0, $4rFIf.useState)(undefined);
    function addHover(dataPoint, i) {
        if (hovered === i) return {
            ...dataPoint,
            title: `${dataPoint.value} filings`
        };
        return dataPoint;
    }
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
        className: "pie-chart-section"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("section", {
        className: "pie-chart"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h4", null, "Pre-pandemic Active Cases (NYC)"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $098a7b94293d3a42$exports.PieChart), {
        data: data.prePandemicData.map(addHover),
        label: ({ dataEntry: dataEntry })=>`${dataEntry.title}: ${Math.round(dataEntry.percentage)}%`,
        labelStyle: {
            ...defaultLabelStyle
        },
        style: {
            height: "250px"
        },
        onMouseOver: (_, index)=>{
            setHovered(index);
        },
        onMouseOut: ()=>{
            setHovered(undefined);
        }
    })), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("section", {
        className: "pie-chart"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h4", null, "Pandemic Active Cases (NYC)"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $098a7b94293d3a42$exports.PieChart), {
        data: data.pandemicData.map(addHover),
        label: ({ dataEntry: dataEntry })=>`${dataEntry.title}: ${Math.round(dataEntry.percentage)}%`,
        labelStyle: {
            ...defaultLabelStyle
        },
        style: {
            height: "250px"
        },
        onMouseOver: (_, index)=>{
            setHovered(index);
        },
        onMouseOut: ()=>{
            setHovered(undefined);
        }
    })));
};
function $72bfc70dea82d4c7$var$formatData(data) {
    const colors = {
        "Bronx": "#B3EFFF",
        "Brooklyn": "#00CFFF",
        "Manhattan": "#046B99",
        "Queens": "#4373B1",
        "Staten Island": "#606060"
    };
    function compareTitles(a, b) {
        return a.title < b.title ? -1 : 0;
    }
    let rowToSection = (item)=>({
            "title": item.borough,
            "value": item.count,
            "color": colors[item.borough]
        });
    return {
        prePandemicData: data.filter((item)=>item.timeBucket == "Issued Prepandemic").map(rowToSection).sort(compareTitles),
        pandemicData: data.filter((item)=>item.timeBucket == "Issued Pandemic").map(rowToSection).sort(compareTitles)
    };
}



var $4rFIf = parcelRequire("4rFIf");

var $ezVNZ = parcelRequire("ezVNZ");
const $f61c7d9f55a63a67$var$HDC_GITHUB = "https://github.com/housing-data-coalition";
const $f61c7d9f55a63a67$var$to_formatted_date = (x)=>{
    return new Date(x).toLocaleDateString("en-us", {
        weekday: "long",
        year: "numeric",
        month: "short",
        day: "numeric",
        timeZone: "UTC"
    });
};
const $f61c7d9f55a63a67$var$getLatestFilingDate = ()=>{
    const [latestFilingDate, setLatestFilingDate] = (0, $4rFIf.useState)(null);
    const latest_filing_date_url = new (0, $ezVNZ.QueryFiles)(`latest-filing-date`);
    (0, $4rFIf.useEffect)(()=>{
        fetch(latest_filing_date_url.json).then((res)=>res.json()).then((data)=>{
            const date = $f61c7d9f55a63a67$var$to_formatted_date(data[0].latest_date);
            setLatestFilingDate(date);
        });
    }, [
        latest_filing_date_url.json
    ]);
    if (latestFilingDate === null) return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null);
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("li", null, "NYCDB is automatically updated with the latest OCA files overnight each Sunday. If successfully updated, the latest filing date in the data should be the latest Friday. The latest filing date in NYCDB is", " ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("b", null, latestFilingDate), ".");
};
const $f61c7d9f55a63a67$var$getOcaUpdateDate = ()=>{
    const [ocaUpdateDate, setOcaUpdateDate] = (0, $4rFIf.useState)(null);
    const oca_url = "https://oca-2-dev.s3.amazonaws.com/public/last-updated-date.txt";
    (0, $4rFIf.useEffect)(()=>{
        fetch(oca_url, {
            mode: "no-cors"
        }).then((res)=>res.text()).then((data)=>{
            const date = $f61c7d9f55a63a67$var$to_formatted_date(data);
            setOcaUpdateDate(date);
        });
    }, [
        oca_url
    ]);
    if (ocaUpdateDate === null) return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null);
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("li", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: `${$f61c7d9f55a63a67$var$HDC_GITHUB}/oca#csv-files`,
        target: "_blank"
    }, "Raw data files from Office of Court Administration"), " ", "should be updated every Tuesday. These files were last updated on", " ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("b", null, `${ocaUpdateDate}`), ".");
};
const $f61c7d9f55a63a67$export$9d2b404785bde0c5 = ()=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "Maintenance Checklist:"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("ul", null, $f61c7d9f55a63a67$var$getOcaUpdateDate(), $f61c7d9f55a63a67$var$getLatestFilingDate(), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("li", null, "Check the tracker\u2019s", " ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: `${$f61c7d9f55a63a67$var$HDC_GITHUB}/rtc-eviction-viz/actions/workflows/deploy.yml`,
        target: "_blank"
    }, "build/deploy history"), " ", "to confirm latest build/deploy date is today and there are no recent unsuccessful builds.")));
};


const $43b5dc0423533f03$export$f91f096c7a97d5dc = "widget";
const $43b5dc0423533f03$export$e27ad012b3a02620 = "config";
const $43b5dc0423533f03$export$2e6e659f45603640 = "view";
const $43b5dc0423533f03$export$d711cf38861aac5a = "fieldName";
const $43b5dc0423533f03$export$845cea13c03031d = "height";
const $43b5dc0423533f03$export$95831a705aaa853b = 150;
const $43b5dc0423533f03$export$19cdc3d7f5f91177 = 500;
const $43b5dc0423533f03$export$531d594600413521 = 500;
const $43b5dc0423533f03$export$fb363a9d1a284f20 = "housing";



const $886cba49e64b9e8f$var$ZipCodeViz = /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).lazy(()=>(parcelRequire("cqOAn")));
const $886cba49e64b9e8f$var$OTHER_VISUALIZATIONS = new Map([
    [
        "filings_by_zip",
        "Filings By Zip Code"
    ],
    [
        "total_active_cases",
        "Total Active Cases"
    ],
    [
        "total_judgments",
        "Total Eviction Judgments"
    ],
    [
        "marshal_evictions",
        "Total Marshal Evictions"
    ],
    [
        "pct_repped",
        "Share of Represented Tenants"
    ]
]);
const $886cba49e64b9e8f$var$DatasetDownloads = ({ files: files, title: title })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).Fragment, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: files.csv
    }, "Download ", title, " CSV")), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: files.json
    }, "Download ", title, " JSON")));
const $886cba49e64b9e8f$var$LazyZipCodeViz = ({ height: height })=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $4rFIf.Suspense), {
        fallback: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5ayhH.VizFallback), {
            className: (0, $5ayhH.VIZ_GEO_CLASS)
        })
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($886cba49e64b9e8f$var$ZipCodeViz, {
        height: height
    }));
const $886cba49e64b9e8f$export$68193e00f2de37e5 = ()=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
        className: "container"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h1", null, "New York Eviction Filings Tracker"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "Managed by RTC Coalition's ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://www.righttocounselnyc.org/hcmc",
        target: "_blank"
    }, "Housing Courts Must Change! Campaign"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("em", null, "Powered by the ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://www.housingdatanyc.org/",
        target: "_blank"
    }, "Housing Data Coalition"), ", ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://www.justfix.nyc/",
        target: "_blank"
    }, "JustFix.nyc"), ", and ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://anhd.org/",
        target: "_blank"
    }, "ANHD"))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "This website is for internal use by the Right to Counsel Coalition. Accuracy is not guaranteed and it should not be referenced publicly. If you would like to use or reference this data, please contact ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "mailto:malika@righttocounselnyc.org",
        target: "_blank"
    }, "malika@righttocounselnyc.org"), "."), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Total Active Cases"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $6a77321ab89d82f6$export$492c209b89f2ad16), null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $72bfc70dea82d4c7$export$9925fc234bcbd8ef), null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Active Cases since 2020"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $cd8245394e01f007$export$fd53bc45e2f019eb), {
        height: (0, $43b5dc0423533f03$export$19cdc3d7f5f91177)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Marshal Evictions since Jan 15 2022"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $a2ea272e50551566$export$22df5c4dbf56580b), {
        height: (0, $43b5dc0423533f03$export$531d594600413521)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Share of Represented Tenants"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $b43f9b20eb8473d8$export$d742382c3243554), {
        height: (0, $43b5dc0423533f03$export$531d594600413521)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Eviction Judgments since 3/23/2020"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $58aafa11c0146cbf$export$b32d4ce0b4ab1c14), {
        height: (0, $43b5dc0423533f03$export$531d594600413521)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $638c0333d22b1e3e$export$c5737b98bc2b526e), {
        height: (0, $43b5dc0423533f03$export$531d594600413521)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Filings by zip code (NYC)"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($886cba49e64b9e8f$var$LazyZipCodeViz, {
        height: 600
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("small", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("strong", null, "Data sources:"), " New York State Office of Court Administration eviction filings and PLUTO19v2 via ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://github.com/nycdb/nycdb",
        target: "_blank"
    }, "NYCDB"), ". By the ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://housingdatanyc.org",
        target: "_blank"
    }, "Housing Data Coalition"), ", ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://justfix.nyc",
        target: "_blank"
    }, "JustFix.nyc"), ", and ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://anhd.org",
        target: "_blank"
    }, "ANHD"), ". *Numbers of total units per zip code exclude single-unit properties to approximate the number of rental units."), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($886cba49e64b9e8f$var$DatasetDownloads, {
        files: (0, $c0nCP.FILINGS_BY_ZIP),
        title: "filings by zip code (NYC)"
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Filings by zip code (Outside NYC)"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $66a14c1bf75c8751$export$8c02771dd24df70c), null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Monthly filings"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h3", null, "By zip code"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $db1a2d154bd72103$export$8aedbfb1f5629cb1), null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h3", null, "Statewide"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $ec2e9f2c234bb9c4$export$63143764f1433243), null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("br", null), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h2", null, "Filings over time"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $17430b689f99735b$export$2b2b71d8c42a4264), {
        height: (0, $43b5dc0423533f03$export$95831a705aaa853b)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($886cba49e64b9e8f$var$DatasetDownloads, {
        files: (0, $5348bbfd2df69362$export$5e365fc0c9d145f8),
        title: "filings over time"
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: `?${(0, $43b5dc0423533f03$export$2e6e659f45603640)}=${(0, $43b5dc0423533f03$export$e27ad012b3a02620)}`
    }, "Configure this page as a widget")), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://github.com/housing-data-coalition/rtc-eviction-viz"
    }, "Learn more on GitHub")), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "https://github.com/housing-data-coalition/rtc-eviction-viz/actions/workflows/deploy.yml"
    }, "See when this site was last deployed")), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $f61c7d9f55a63a67$export$9d2b404785bde0c5), null));
const $886cba49e64b9e8f$export$a829527ff4e4114a = ({ fieldName: fieldName, height: height })=>{
    if (fieldName === "filings_by_zip") return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($886cba49e64b9e8f$var$LazyZipCodeViz, {
        height: height
    });
    if (fieldName === "total_active_cases") return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $cd8245394e01f007$export$fd53bc45e2f019eb), {
        height: height
    });
    if (fieldName === "total_judgments") return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $58aafa11c0146cbf$export$b32d4ce0b4ab1c14), {
        height: height
    });
    if (fieldName === "marshal_evictions") return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $a2ea272e50551566$export$22df5c4dbf56580b), {
        height: height
    });
    if (fieldName === "pct_repped") return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $b43f9b20eb8473d8$export$d742382c3243554), {
        height: height
    });
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $17430b689f99735b$export$2b2b71d8c42a4264), {
        height: height,
        fieldNames: [
            fieldName
        ]
    });
};
const $886cba49e64b9e8f$export$7f975361b06827cb = ()=>{
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
        className: "container"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("h1", null, "New York Evictions Widget Configurator"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "Use the following form to generate a widget. Once you submit it, grab the URL from the address bar and put it in an ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("code", null, "<iframe>"), ". The widget will horizontally expand to fill all available space, so make sure you style your container as needed."), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("form", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "hidden",
        name: (0, $43b5dc0423533f03$export$2e6e659f45603640),
        value: (0, $43b5dc0423533f03$export$f91f096c7a97d5dc)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "Time series visualization:"), Array.from((0, $17430b689f99735b$export$fe626ad03aa8aaa5).entries()).map(([fieldName, title])=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
            key: fieldName
        }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
            type: "radio",
            name: (0, $43b5dc0423533f03$export$d711cf38861aac5a),
            value: fieldName
        }), title))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "Other visualization:"), Array.from($886cba49e64b9e8f$var$OTHER_VISUALIZATIONS.entries()).map(([fieldName, title])=>/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
            key: fieldName
        }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
            type: "radio",
            name: (0, $43b5dc0423533f03$export$d711cf38861aac5a),
            value: fieldName
        }), title))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", {
        htmlFor: "height"
    }, "Height of graph: "), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        type: "number",
        min: "1",
        id: "height",
        name: (0, $43b5dc0423533f03$export$845cea13c03031d)
    })), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("button", {
        type: "submit"
    }, "Show widget"))), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("a", {
        href: "./"
    }, "Go back")));
};
function $886cba49e64b9e8f$var$isWidgetVisualization(fieldName) {
    const combinedMap = new Map([
        ...(0, $17430b689f99735b$export$fe626ad03aa8aaa5).entries(),
        ...$886cba49e64b9e8f$var$OTHER_VISUALIZATIONS.entries()
    ]);
    return combinedMap.has(fieldName);
}
function $886cba49e64b9e8f$export$349032aabef74e95(fieldName) {
    fieldName = fieldName || "";
    if ($886cba49e64b9e8f$var$isWidgetVisualization(fieldName)) return fieldName;
    return "total_filings";
}
function $886cba49e64b9e8f$export$9ab4156a944c3dfd(value, defaultValue) {
    const num = parseInt(value || "");
    if (!isNaN(num) && num > 0) return num;
    return defaultValue;
}



const $bc753c3b20c0bed1$var$useAuth = ()=>(0, $4rFIf.useContext)((0, $5c86a1ebbed41112$export$a0fd8390cfe8ae69));
function $bc753c3b20c0bed1$var$RequireAuth({ children: children }) {
    let auth = $bc753c3b20c0bed1$var$useAuth();
    let location = (0, $178516013a5ef3e1$export$45d76561a5302f2b)();
    if (auth.isAuthenticated !== (0, $43b5dc0423533f03$export$fb363a9d1a284f20)) return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $178516013a5ef3e1$export$444b3ab0cb9aec40), {
        to: "/login",
        state: {
            from: location
        },
        replace: true
    });
    return children;
}
const $bc753c3b20c0bed1$var$LoginPage = ()=>{
    var _a, _b;
    let navigate = (0, $178516013a5ef3e1$export$9770f232ac06a008)();
    let location = (0, $178516013a5ef3e1$export$45d76561a5302f2b)();
    let auth = $bc753c3b20c0bed1$var$useAuth();
    let from = ((_b = (_a = location.state) === null || _a === void 0 ? void 0 : _a.from) === null || _b === void 0 ? void 0 : _b.pathname) || "/";
    function handleSubmit(event) {
        event.preventDefault();
        let formData = new FormData(event.currentTarget);
        let password = formData.get("password");
        auth.signin(password, ()=>{
            navigate(from, {
                replace: true
            });
        });
    }
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("div", {
        className: "container"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("p", null, "You must log in to view the dashboard"), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("form", {
        onSubmit: handleSubmit
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("label", null, "Password: ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("input", {
        name: "password",
        type: "text"
    })), " ", /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement("button", {
        type: "submit"
    }, "Login")));
};
const $bc753c3b20c0bed1$var$IndexPage = ()=>{
    const search = new URLSearchParams(window.location.search);
    const view = search.get((0, $43b5dc0423533f03$export$2e6e659f45603640));
    return view === (0, $43b5dc0423533f03$export$f91f096c7a97d5dc) ? /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $886cba49e64b9e8f$export$a829527ff4e4114a), {
        fieldName: (0, $886cba49e64b9e8f$export$349032aabef74e95)(search.get((0, $43b5dc0423533f03$export$d711cf38861aac5a))),
        height: (0, $886cba49e64b9e8f$export$9ab4156a944c3dfd)(search.get((0, $43b5dc0423533f03$export$845cea13c03031d)), (0, $43b5dc0423533f03$export$95831a705aaa853b))
    }) : view === (0, $43b5dc0423533f03$export$e27ad012b3a02620) ? /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $886cba49e64b9e8f$export$7f975361b06827cb), null) : /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($bc753c3b20c0bed1$var$RequireAuth, null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $886cba49e64b9e8f$export$68193e00f2de37e5), null));
};
const $bc753c3b20c0bed1$var$App = ()=>{
    const [isAuthenticated, setAuthenticated] = (0, $4rFIf.useState)(false);
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $5c86a1ebbed41112$export$87091915187a1a85), null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $178516013a5ef3e1$export$3565eb3d00ca5a74), null, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $178516013a5ef3e1$export$e7b0ac011bb776c6), {
        path: "/",
        element: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($bc753c3b20c0bed1$var$IndexPage, null)
    }), /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $178516013a5ef3e1$export$e7b0ac011bb776c6), {
        path: "/login",
        element: /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($bc753c3b20c0bed1$var$LoginPage, null)
    })));
};
async function $bc753c3b20c0bed1$var$main() {
    (0, (/*@__PURE__*/$parcel$interopDefault($57fd423301e4690c$exports))).render(/*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement((0, $9d75162fdeea70fe$export$9ba4e89fdfa1fc54), {
        basename: "rtc-eviction-viz"
    }, /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($4rFIf))).createElement($bc753c3b20c0bed1$var$App, null)), (0, $65f7f0dcdebfaa46$export$bad8ef72755038c6)("div", "#app"));
}
$bc753c3b20c0bed1$var$main();


//# sourceMappingURL=index.d9a7cbfb.js.map
